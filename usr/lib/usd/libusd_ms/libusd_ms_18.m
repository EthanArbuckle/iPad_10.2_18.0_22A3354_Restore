void sub_20C57D790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned int *a44)
{
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;

  if (a40)
    operator delete(a40);
  if (a44)
  {
    v45 = a44 + 2;
    do
    {
      v46 = __ldxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 8))(a44);
  }
  _Unwind_Resume(a1);
}

void sub_20C57D948(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6F96F96F96F96F97 * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xD20D20D20D20D3)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20C580EF0(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[312 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 312;
        v12 -= 312;
        memcpy(v12, v10, 0x132uLL);
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10;
  _BOOL8 v11;
  const char *v12;
  unsigned int *v13;
  unsigned int v14;
  const char *Text;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD v29[4];
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34[3];
  int v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  void *v40[3];
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (a2)
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    memset(v40, 0, sizeof(v40));
    v35 = 4;
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v38);
    v39 = 0;
    memset(v34, 0, sizeof(v34));
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimePreamble(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v41, (uint64_t)v40, (uint64_t)&v35, v34) & 1) != 0)
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v11 = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeInstanceTransformsAtTime((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v31, 0, 1, a4, a5);
      if (v11)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentFromTransforms(a1, a2, (unint64_t *)&v41, (uint64_t)v40, a4, v10, v34, (uint64_t)&v31, a3);
      }
      else
      {
        v29[0] = "usdGeom/pointInstancer.cpp";
        v29[1] = "_ComputeExtentAtTime";
        v29[2] = 1302;
        v29[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(VtVec3fArray *, cons"
                 "t UsdTimeCode, const UsdTimeCode, const GfMatrix4d *) const";
        v30 = 0;
        sub_20C35C4F8((uint64_t)v22, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
        sub_20C348EEC((uint64_t)v22, &v27);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"%s -- could not compute instance transforms", v16, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
        sub_20BFD265C(&v27);
        if ((v26 & 7) != 0)
        {
          v17 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
        sub_20BFD265C(&v24);
        if (v23)
          sub_20C35C614(v23);
      }
      sub_20BF5618C((uint64_t)&v31);
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)&v31 = v34;
    sub_20BFD6F90((void ***)&v31);
    if ((v39 & 7) != 0)
    {
      v19 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
    sub_20BFD265C(&v37);
    if (v36)
      sub_20C35C614(v36);
    if (v40[0])
      operator delete(v40[0]);
    sub_20BF5618C((uint64_t)&v41);
  }
  else
  {
    *(_QWORD *)&v41 = "usdGeom/pointInstancer.cpp";
    *((_QWORD *)&v41 + 1) = "_ComputeExtentAtTime";
    *(_QWORD *)&v42 = 1272;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(VtVec3fAr"
                            "ray *, const UsdTimeCode, const UsdTimeCode, const GfMatrix4d *) const";
    LOBYTE(v43) = 0;
    sub_20C35C4F8((uint64_t)&v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_20C348EEC((uint64_t)&v31, (int *)v29);
    v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v29);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"%s -- null container passed to ComputeExtentAtTime()", v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v29 + 1);
    sub_20BFD265C(v29);
    if ((BYTE8(v32) & 7) != 0)
    {
      v13 = (unsigned int *)(*((_QWORD *)&v32 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
    sub_20BFD265C(&v32);
    if (*((_QWORD *)&v31 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v31 + 1));
    return 0;
  }
  return v11;
}

void sub_20C57DD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  void *v32;

  sub_20C35C2E0((uint64_t)&a11);
  sub_20BF5618C((uint64_t)&a21);
  a21 = (void **)&a27;
  sub_20BFD6F90(&a21);
  sub_20C377F1C((uint64_t)&a30);
  v32 = *(void **)(v30 - 152);
  if (v32)
    operator delete(v32);
  sub_20BF5618C(v30 - 128);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t a4, double a5)
{
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  unsigned int *v18;
  unsigned int v19;
  const char *Text;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  void **v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38[3];
  uint64_t v39[3];
  int v40;
  int v41;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v42;
  int v43;
  int v44;
  uint64_t v45;
  void *__p[3];
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  if (a2)
  {
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    memset(__p, 0, sizeof(__p));
    v40 = 4;
    v42 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v43);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v44);
    v45 = 0;
    memset(v39, 0, sizeof(v39));
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimePreamble(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v47, (uint64_t)__p, (uint64_t)&v40, v39) & 1) != 0)
    {
      memset(v38, 0, sizeof(v38));
      v10 = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeInstanceTransformsAtTimes((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, v38, a3, 0, 1, a5);
      if (v10)
      {
        v34 = 0uLL;
        v35 = 0;
        sub_20C574410((uint64_t *)&v34, (a3[1] - *a3) >> 3);
        v12 = *a3;
        if (a3[1] != *a3)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentFromTransforms(a1, v34 + v13, (unint64_t *)&v47, (uint64_t)__p, *(double *)(v12 + 8 * v14++), v11, v39, v38[0] + v13, a4);
            v12 = *a3;
            v13 += 40;
          }
          while (v14 < (a3[1] - *a3) >> 3);
        }
        v15 = *a2;
        *a2 = v34;
        v34 = v15;
        v16 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 2) = v35;
        v35 = v16;
        v27 = (void **)&v34;
        sub_20C5755EC(&v27);
      }
      else
      {
        *(_QWORD *)&v34 = "usdGeom/pointInstancer.cpp";
        *((_QWORD *)&v34 + 1) = "_ComputeExtentAtTimes";
        v35 = 1357;
        v36 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(std:"
                                ":vector<VtVec3fArray> *, const std::vector<UsdTimeCode> &, const UsdTimeCode, const GfMatrix4d *) const";
        v37 = 0;
        sub_20C35C4F8((uint64_t)&v27, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
        sub_20C348EEC((uint64_t)&v27, &v32);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v32);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"%s -- could not compute instance transforms", v21, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
        sub_20BFD265C(&v32);
        if ((v31 & 7) != 0)
        {
          v22 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_20BFD265C(&v29);
        if (v28)
          sub_20C35C614(v28);
      }
      *(_QWORD *)&v34 = v38;
      sub_20C57F0A0((void ***)&v34);
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)&v34 = v39;
    sub_20BFD6F90((void ***)&v34);
    if ((v45 & 7) != 0)
    {
      v24 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_20BFD265C(&v43);
    if (v42)
      sub_20C35C614(v42);
    if (__p[0])
      operator delete(__p[0]);
    sub_20BF5618C((uint64_t)&v47);
  }
  else
  {
    *(_QWORD *)&v47 = "usdGeom/pointInstancer.cpp";
    *((_QWORD *)&v47 + 1) = "_ComputeExtentAtTimes";
    *(_QWORD *)&v48 = 1326;
    *((_QWORD *)&v48 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(std::vec"
                            "tor<VtVec3fArray> *, const std::vector<UsdTimeCode> &, const UsdTimeCode, const GfMatrix4d *) const";
    LOBYTE(v49) = 0;
    sub_20C35C4F8((uint64_t)&v34, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_20C348EEC((uint64_t)&v34, &v40);
    v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v47, 1, (pxrInternal__aapl__pxrReserved__ *)"%s -- null container passed to ComputeExtentAtTimes()", v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_20BFD265C(&v40);
    if ((v36 & 7) != 0)
    {
      v18 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_20BFD265C(&v35);
    if (*((_QWORD *)&v34 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v34 + 1));
    return 0;
  }
  return v10;
}

void sub_20C57E188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p)
{
  uint64_t v30;

  sub_20C35C2E0((uint64_t)&a10);
  a15 = &a20;
  sub_20C57F0A0((void ***)&a15);
  a15 = &a23;
  sub_20BFD6F90((void ***)&a15);
  sub_20C377F1C((uint64_t)&a26);
  if (__p)
    operator delete(__p);
  sub_20BF5618C(v30 - 144);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeExtentAtTime(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(a1, a2, 0, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeExtentAtTimes(uint64_t a1, __int128 *a2, uint64_t *a3, double a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(a1, a2, a3, 0, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetInstanceCount(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetProtoIndicesAttr(a1, (uint64_t)v7);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5);
  v1 = *(_QWORD *)&v5[0];
  sub_20BF5618C((uint64_t)v5);
  if ((v11 & 7) != 0)
  {
    v2 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v1;
}

void sub_20C57E30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20C372B54((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20C57E32C(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C57E538;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C57E364()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C565A28((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C57E438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C57E484(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C57E514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C57E538(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v7;
  _BOOL8 v8;
  _BOOL8 v9;
  _QWORD v11[4];
  char v12;
  void (**v13)(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *__hidden);
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v13, a1);
  v13 = off_24C53CC08;
  if (v14
    && (*(_BYTE *)(v14 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v13) & 1) != 0
    || (v11[0] = "usdGeom/pointInstancer.cpp",
        v11[1] = "_ComputeExtentForPointInstancer",
        v11[2] = 1434,
        v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForPointInstancer(const UsdGeomBoundable &, const "
                 "UsdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        v12 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "pointInstancerSchema", 0) & 1) != 0))
  {
    v7 = *a2;
    if (a3)
      v8 = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime((uint64_t)&v13, a4, a3, v7, *a2);
    else
      v8 = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime((uint64_t)&v13, a4, 0, v7, *a2);
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v13);
  return v9;
}

void sub_20C57E62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C57E644(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C57E6A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C57E6BC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524D00;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C53CC80;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C57E748(uint64_t a1, uint64_t a2)
{
  sub_20C032BD4(a2, *(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t sub_20C57E76C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  result = sub_20BFE4F9C(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v6 = *(_QWORD **)a2;
    return pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==(v6, *(_QWORD **)(a1 + 8));
  }
  return result;
}

uint64_t sub_20C57E7C8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C57E848((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C57E830(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C57E848(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)sub_20C57E8CC(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_20BDDE1B4(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_20C57E8CC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_20C57EA74(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C57EAD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C57EAF4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6[2];
  uint64_t v7;
  uint64_t v8;

  v7 = a3;
  v8 = a2;
  sub_20BF56210(a1);
  v6[0] = (uint64_t **)&v8;
  v6[1] = (uint64_t **)&v7;
  sub_20C57EB50(a1, (a3 - a2) >> 3, v6);
}

void sub_20C57EB50(unint64_t *a1, unint64_t a2, uint64_t ***a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_20;
  v7 = (uint64_t *)a1[4];
  if (!v7)
  {
    if (8 * a2 / a2 == 8)
    {
      v17 = sub_20C004638((uint64_t)a1, a2);
      v16 = v17;
      v18 = **a3;
      v19 = *a3[1];
      if (v18 != v19)
      {
        v20 = 0;
        do
        {
          v17[v20] = v18[v20];
          ++v20;
        }
        while (&v18[v20] != v19);
      }
      goto LABEL_32;
    }
LABEL_20:
    sub_20BF56210(a1);
    return;
  }
  if (a1[3])
  {
LABEL_22:
    if (v3 >= a2)
      v21 = a2;
    else
      v21 = *a1;
    v22 = sub_20C004638((uint64_t)a1, a2);
    v16 = v22;
    if (v21)
    {
      v23 = 8 * v21;
      v24 = v22;
      do
      {
        v25 = *v7++;
        *v24++ = v25;
        v23 -= 8;
      }
      while (v23);
    }
    if (v3 < a2)
    {
      v26 = **a3;
      v27 = *a3[1];
      if (v26 != v27)
      {
        v28 = v3;
        do
        {
          v29 = *v26++;
          v22[v28++] = v29;
        }
        while (v26 != v27);
      }
    }
    goto LABEL_32;
  }
  v8 = atomic_load((unint64_t *)v7 - 2);
  if (v8 != 1)
  {
    v7 = (uint64_t *)a1[4];
    goto LABEL_22;
  }
  if (v3 < a2)
  {
    v9 = a1[4];
    if (*(_QWORD *)(v9 - 8) < a2)
    {
      v10 = sub_20C004638((uint64_t)a1, a2);
      v7 = v10;
      if (v3)
      {
        for (i = 0; i != v3; ++i)
          v10[i] = *(_QWORD *)(v9 + i * 8);
      }
    }
    v12 = **a3;
    v13 = *a3[1];
    if (v12 != v13)
    {
      v14 = v3;
      do
      {
        v15 = *v12++;
        v7[v14++] = v15;
      }
      while (v12 != v13);
    }
  }
  v16 = v7;
LABEL_32:
  if (v16 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v16;
  }
  *a1 = a2;
}

uint64_t sub_20C57ED30(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C57E848((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C57ED98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C57EDB0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (!v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_20BE10B80((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_20C57EE28(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(uint64_t **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20C004638(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 8 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<long long>::emplace_back(Args &&...) [T = long long, Args = <c"
           "onst long long &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

BOOL sub_20C57EF8C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = &stru_24C524D00;
  v12 = 0;
  v11[0] = &unk_24C539A28;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C57F020(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C57E848((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C57F088(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20C57F0A0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C57F0E0((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_20C57F0E0(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; sub_20BF5618C(i))
    i -= 40;
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20C57F12C(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C57F168(a1, v4);
  }
  else if (!v3)
  {
    sub_20C57F0E0((uint64_t)a1, *a1 + 40 * a2);
  }
}

void sub_20C57F168(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      sub_20BDDF694();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20BED4724(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20C57F2CC(a1, &v15);
    sub_20C57F4F8((uint64_t)&v15);
  }
}

void sub_20C57F2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C57F4F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C57F2CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C57F340((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C57F340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      v9 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (*(_QWORD *)(v7 - 16))
          v10 = *(unint64_t **)(v7 - 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v7 = *((_QWORD *)&v17 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C57F400((uint64_t)v14);
  return v12;
}

uint64_t sub_20C57F400(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C57F434((uint64_t *)a1);
  return a1;
}

uint64_t sub_20C57F434(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_20C57F4A8(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_20C57F4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    sub_20BF5618C(result);
    result = *(_QWORD *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_20C57F4F8(uint64_t a1)
{
  sub_20C57F52C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C57F52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 40;
    sub_20BF5618C(v4 - 40);
  }
}

void sub_20C57F56C(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_20C57F6C4(a1);
    if (a4 > 0x666666666666666)
      sub_20BDDF694();
    v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    sub_20BED4B34(a1, v11);
    v12 = sub_20C57F6FC(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = (__int128 *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    sub_20C57F810(a2, v13, v9);
    v12 = sub_20C57F6FC(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_20C57F810(a2, a3, v9);
  sub_20C57F0E0((uint64_t)a1, v14);
}

void sub_20C57F6B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C57F6BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C57F6C4(uint64_t *a1)
{
  if (*a1)
  {
    sub_20C57F0E0((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C57F6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v13 = a4;
  v12 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  while (a2 != a3)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 16) = v5;
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v4 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v4 + 24))
        v7 = *(unint64_t **)(v4 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = v13;
    }
    a2 += 40;
    v4 += 40;
    v13 = v4;
  }
  v11 = 1;
  sub_20C57F79C((uint64_t)v10);
  return v4;
}

uint64_t sub_20C57F79C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C57F7D0(a1);
  return a1;
}

void sub_20C57F7D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 40;
    sub_20BF5618C(v1);
  }
}

__int128 *sub_20C57F810(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C282748(a3, v4);
      v4 = (__int128 *)((char *)v4 + 40);
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_20C57F86C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, char *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;

  if (this)
  {
    v4 = a1[1];
    if (!v4)
      return 1;
    v5 = (int)a3;
    v7 = *(_QWORD *)this;
    if (*(_QWORD *)this == (int)a3)
      return 1;
    if (v4 * (int)a3 == v7)
    {
      sub_20BF5FC60(this, (uint64_t)this, a3);
      v8 = 0;
      v9 = 0;
      v10 = (_OWORD *)*((_QWORD *)this + 4);
      v11 = v10;
      do
      {
        if (((*(_QWORD *)(*a1 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
        {
          v12 = v5;
          v13 = v10;
          if (v5 >= 1)
          {
            do
            {
              v14 = *v13;
              v15 = v13[1];
              v16 = v13[3];
              v11[2] = v13[2];
              v11[3] = v16;
              *v11 = v14;
              v11[1] = v15;
              v17 = v13[4];
              v18 = v13[5];
              v19 = v13[7];
              v11[6] = v13[6];
              v11[7] = v19;
              v11[4] = v17;
              v11[5] = v18;
              v11 += 8;
              v13 += 8;
              --v12;
            }
            while (v12);
          }
          v9 += v5;
        }
        ++v8;
        v10 += 8;
      }
      while (v8 != v4);
      if (v9 < *(_QWORD *)this)
      {
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v29 = &v21;
        sub_20BF5F980((unint64_t *)this, v9, &v29);
      }
      return 1;
    }
    *(_QWORD *)&v21 = "usdGeom/pointInstancer.h";
    *((_QWORD *)&v21 + 1) = "ApplyMaskToArray";
    *(_QWORD *)&v22 = 1231;
    *((_QWORD *)&v22 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ApplyMaskToArray(const "
                            "std::vector<BOOL> &, VtArray<T> *, const int) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v23) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Input mask's size (%zu) is not compatible with the input dataArray (%zu) and elementSize (%d).", a3, v4, v7, a3);
  }
  else
  {
    *(_QWORD *)&v21 = "usdGeom/pointInstancer.h";
    *((_QWORD *)&v21 + 1) = "ApplyMaskToArray";
    *(_QWORD *)&v22 = 1221;
    *((_QWORD *)&v22 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ApplyMaskToArray(const "
                            "std::vector<BOOL> &, VtArray<T> *, const int) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v23) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL dataArray.");
  }
  return 0;
}

_QWORD *sub_20C57FA18(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C57FAB4(a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[8 * a2];
    v8 = a2 << 7;
    do
    {
      v9 = *a3;
      v10 = a3[1];
      v11 = a3[3];
      v6[2] = a3[2];
      v6[3] = v11;
      *v6 = v9;
      v6[1] = v10;
      v12 = a3[4];
      v13 = a3[5];
      v14 = a3[7];
      v6[6] = a3[6];
      v6[7] = v14;
      v6[4] = v12;
      v6[5] = v13;
      v6 += 8;
      v8 -= 128;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C57FA98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20C57FAB4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    sub_20BDDF694();
  result = (char *)sub_20C57FAF4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *sub_20C57FAF4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    sub_20BDDF5B4();
  return operator new(a2 << 7);
}

void sub_20C57FB28(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  _DWORD v12[32];
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v12[0] = 0;
      v13 = 65539;
      v14 = 55;
      tbb::task_group_context::init((uint64_t)v12, v6, v7, v8);
      v10[0] = a1;
      v10[1] = 0;
      v10[2] = a3;
      v9 = a2;
      sub_20C57FC30(v10, &v9, (uint64_t)&v11, (tbb::task_group_context *)v12);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v12);
    }
    else
    {
      sub_20C580174(a2, 0, (unint64_t)a1);
    }
  }
}

void sub_20C57FC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C57FC30(_QWORD *result, _QWORD *a2, uint64_t a3, tbb::task_group_context *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v9;

  if (result[1] < *result)
  {
    v5 = result;
    v9 = a4;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &unk_24C53CCB8;
    v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_QWORD *)(v6 + 32) = *a2;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 52) = 5;
    *(_QWORD *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40)
                                                                                           + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_20C57FCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::task *v10;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C57FD08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C57FD74(v2, a1, (unint64_t *)(a1 + 8));
  return 0;
}

void sub_20C57FD74(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a3[2] < *a3 - a3[1])
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C57FE24(a2);
          if (a3[2] >= *a3 - a3[1])
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            break;
          }
        }
      }
    }
  }
  sub_20C57FEE8(a1, a2, a3);
}

uint64_t sub_20C57FE24(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v3 = &unk_24C53CCB8;
  *(_QWORD *)(v3 + 8) = v4;
  v6 = v5 + ((unint64_t)(*(_QWORD *)(a1 + 8) - v5) >> 1);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(v3 + 40) = v7;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 52);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

void sub_20C57FEE8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  char v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10[16];
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  if (a3[2] < *a3 - v4 && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v10 = 0x10000;
    v11 = *(_OWORD *)a3;
    v12 = a3[2];
    while (1)
    {
      sub_20C15C670(v10, *(unsigned __int8 *)(a1 + 12));
      v6 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0)
        break;
      v9 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v9;
      v8 = v10[2];
      if (v10[2] < 2u)
      {
        v7 = v10[0];
        if (v10[v10[0] + 3] < v9
          && *((_QWORD *)&v11 + 3 * v10[0] + 2) < *((_QWORD *)&v11 + 3 * v10[0]) - *((_QWORD *)&v11 + 3 * v10[0] + 1))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      sub_20C5800AC(a2, (__int128 *)((char *)&v11 + 24 * v10[1]), v10[v10[1] + 3]);
      v8 = --v10[2];
      v10[1] = (v10[1] + 1) & 7;
LABEL_11:
      if (!v8 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56)))
        return;
    }
    v7 = v10[0];
LABEL_6:
    sub_20C580174(*(_QWORD *)(a2 + 32), *((_QWORD *)&v11 + 3 * v7 + 1), *((_QWORD *)&v11 + 3 * v7));
    v8 = --v10[2];
    v10[0] = (v10[0] - 1) & 7;
    goto LABEL_11;
  }
  sub_20C580174(*(_QWORD *)(a2 + 32), v4, *a3);
}

uint64_t sub_20C5800AC(uint64_t a1, __int128 *a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &unk_24C53CCB8;
  v8 = *a2;
  *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

void sub_20C580174(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float32x2_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  float *v21;
  float v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _QWORD *v31;
  float32x2_t *v32;
  float32x2_t v33;
  float v34;
  float32x2_t *v35;
  float32x2_t v36;
  float v37;
  _QWORD *v38;
  double v39;
  float32x2_t *v40;
  float v41;
  float v42;
  uint64_t v43;
  char *v44;
  float64x2_t *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v52;
  uint64_t v53;
  char *v54;
  float64x2_t *v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  _OWORD v78[8];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  if (a2 < a3)
  {
    v79 = v10;
    v80 = v9;
    v81 = v8;
    v82 = v7;
    v83 = v6;
    v84 = v5;
    v85 = v3;
    v86 = v4;
    v12 = a2;
    v14 = 12 * a2;
    v15 = 16 * a2;
    while (*(_QWORD *)(*(_QWORD *)a1 + 8)
         && ((*(_QWORD *)(**(_QWORD **)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
LABEL_25:
      ++v12;
      v14 += 12;
      v15 += 16;
      if (a3 == v12)
        return;
    }
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v78, 1.0);
    v16 = *(_QWORD **)(a1 + 24);
    if (*v16)
    {
      v17 = (float32x2_t *)(v16[4] + v14);
      v70 = vcvtq_f64_f32(*v17);
      v71.f64[0] = v17[1].f32[0];
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)v78, &v70);
      v18 = *(_QWORD **)(a1 + 32);
      if (*v18)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(&v67, (float32x2_t *)(v18[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)&v70, v67.f64);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v78, v70.f64);
        goto LABEL_10;
      }
    }
    else
    {
      v19 = *(_QWORD **)(a1 + 32);
      if (*v19)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(&v70, (float32x2_t *)(v19[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)v78, v70.f64);
LABEL_10:
        v20 = *(_QWORD **)(a1 + 64);
        if (*v20)
        {
          v21 = (float *)(v20[4] + v14);
          v22 = v21[1];
          v23 = v21[2];
          v24 = *v21;
          v25 = v22;
          v26 = v23;
          v27 = **(double **)(a1 + 16) * sqrtf((float)((float)(*v21 * *v21) + (float)(v22 * v22)) + (float)(v23 * v23));
          v67.f64[0] = v24;
          v67.f64[1] = v25;
          v68 = v26;
          v69 = v27;
          v28 = v24 * v24 + v25 * v25 + v26 * v26;
          if (fabs(v28 + -1.0) >= 1.0e-10)
          {
            v29 = sqrt(v28);
            if (v29 <= 1.0e-10)
              v30 = 1.0e10;
            else
              v30 = 1.0 / v29;
            v67.f64[0] = v30 * v24;
            v67.f64[1] = v30 * v25;
            v68 = v30 * v26;
          }
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v70, &v67);
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v78, v70.f64);
        }
      }
    }
    v31 = *(_QWORD **)(a1 + 48);
    v32 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + v14);
    v33 = *v32;
    v34 = v32[1].f32[0];
    if (*v31)
    {
      v35 = (float32x2_t *)(v31[4] + v14);
      v36 = *v35;
      v37 = v35[1].f32[0];
      v38 = *(_QWORD **)(a1 + 56);
      v39 = **(double **)(a1 + 8);
      if (*v38)
      {
        v40 = (float32x2_t *)(v38[4] + v14);
        v41 = v39 * v40[1].f32[0];
        v36 = vadd_f32(v36, vmul_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v40), v39)), (float32x2_t)0x3F0000003F000000));
        v37 = v37 + (float)(v41 * 0.5);
      }
      v42 = v39 * v37;
      v33 = vadd_f32(v33, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v36), v39)));
      v34 = v34 + v42;
    }
    v70 = vcvtq_f64_f32(v33);
    v71.f64[0] = v34;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly((uint64_t)v78, (uint64_t)&v70);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) == **(_QWORD **)(a1 + 88))
    {
      v63 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_20BF5FC60(v63, v43, v44);
      v55 = (float64x2_t *)(*((_QWORD *)v63 + 4) + 8 * v15);
      v64 = (float64x2_t)v78[0];
      v65 = (float64x2_t)v78[1];
      v66 = (float64x2_t)v78[3];
      v55[2] = (float64x2_t)v78[2];
      v55[3] = v66;
      *v55 = v64;
      v55[1] = v65;
      v59 = (float64x2_t)v78[4];
      v60 = (float64x2_t)v78[5];
      v61 = (float64x2_t)v78[6];
      v62 = (float64x2_t)v78[7];
    }
    else
    {
      v45 = (float64x2_t *)(**(_QWORD **)(a1 + 72)
                          + ((uint64_t)*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 32) + 4 * v12) << 7));
      v46 = v45[3];
      v48 = *v45;
      v47 = v45[1];
      v72 = v45[2];
      v73 = v46;
      v70 = v48;
      v71 = v47;
      v49 = v45[7];
      v51 = v45[4];
      v50 = v45[5];
      v76 = v45[6];
      v77 = v49;
      v74 = v51;
      v75 = v50;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v70.f64, (double *)v78);
      v52 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_20BF5FC60(v52, v53, v54);
      v55 = (float64x2_t *)(*((_QWORD *)v52 + 4) + 8 * v15);
      v56 = v70;
      v57 = v71;
      v58 = v73;
      v55[2] = v72;
      v55[3] = v58;
      *v55 = v56;
      v55[1] = v57;
      v59 = v74;
      v60 = v75;
      v61 = v76;
      v62 = v77;
    }
    v55[6] = v61;
    v55[7] = v62;
    v55[4] = v59;
    v55[5] = v60;
    goto LABEL_25;
  }
}

void sub_20C580508(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  _DWORD v12[32];
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v12[0] = 0;
      v13 = 65539;
      v14 = 55;
      tbb::task_group_context::init((uint64_t)v12, v6, v7, v8);
      v10[0] = a1;
      v10[1] = 0;
      v10[2] = a3;
      v9 = a2;
      sub_20C580610(v10, &v9, (uint64_t)&v11, (tbb::task_group_context *)v12);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v12);
    }
    else
    {
      sub_20C580B54(a2, 0, (unint64_t)a1);
    }
  }
}

void sub_20C5805F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C580610(_QWORD *result, _QWORD *a2, uint64_t a3, tbb::task_group_context *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v9;

  if (result[1] < *result)
  {
    v5 = result;
    v9 = a4;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &unk_24C53CD00;
    v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_QWORD *)(v6 + 32) = *a2;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 52) = 5;
    *(_QWORD *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40)
                                                                                           + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_20C5806C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::task *v10;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5806E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C580754(v2, a1, (unint64_t *)(a1 + 8));
  return 0;
}

void sub_20C580754(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a3[2] < *a3 - a3[1])
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C580804(a2);
          if (a3[2] >= *a3 - a3[1])
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            break;
          }
        }
      }
    }
  }
  sub_20C5808C8(a1, a2, a3);
}

uint64_t sub_20C580804(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v3 = &unk_24C53CD00;
  *(_QWORD *)(v3 + 8) = v4;
  v6 = v5 + ((unint64_t)(*(_QWORD *)(a1 + 8) - v5) >> 1);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(v3 + 40) = v7;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 52);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

void sub_20C5808C8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  char v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10[16];
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  if (a3[2] < *a3 - v4 && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v10 = 0x10000;
    v11 = *(_OWORD *)a3;
    v12 = a3[2];
    while (1)
    {
      sub_20C15C670(v10, *(unsigned __int8 *)(a1 + 12));
      v6 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0)
        break;
      v9 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v9;
      v8 = v10[2];
      if (v10[2] < 2u)
      {
        v7 = v10[0];
        if (v10[v10[0] + 3] < v9
          && *((_QWORD *)&v11 + 3 * v10[0] + 2) < *((_QWORD *)&v11 + 3 * v10[0]) - *((_QWORD *)&v11 + 3 * v10[0] + 1))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      sub_20C580A8C(a2, (__int128 *)((char *)&v11 + 24 * v10[1]), v10[v10[1] + 3]);
      v8 = --v10[2];
      v10[1] = (v10[1] + 1) & 7;
LABEL_11:
      if (!v8 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56)))
        return;
    }
    v7 = v10[0];
LABEL_6:
    sub_20C580B54(*(_QWORD *)(a2 + 32), *((_QWORD *)&v11 + 3 * v7 + 1), *((_QWORD *)&v11 + 3 * v7));
    v8 = --v10[2];
    v10[0] = (v10[0] - 1) & 7;
    goto LABEL_11;
  }
  sub_20C580B54(*(_QWORD *)(a2 + 32), v4, *a3);
}

uint64_t sub_20C580A8C(uint64_t a1, __int128 *a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &unk_24C53CD00;
  v8 = *a2;
  *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

void sub_20C580B54(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float32x2_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  float *v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _QWORD *v32;
  float32x2_t *v33;
  float32x2_t v34;
  float v35;
  float32x2_t *v36;
  float32x2_t v37;
  float v38;
  _QWORD *v39;
  double v40;
  float32x2_t *v41;
  float v42;
  float v43;
  uint64_t v44;
  char *v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v53;
  uint64_t v54;
  char *v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  _OWORD v79[8];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  if (a2 < a3)
  {
    v80 = v10;
    v81 = v9;
    v82 = v8;
    v83 = v7;
    v84 = v6;
    v85 = v5;
    v86 = v3;
    v87 = v4;
    v12 = a2;
    v14 = 12 * a2;
    v15 = 8 * a2;
    v16 = a2 << 7;
    while (*(_QWORD *)(*(_QWORD *)a1 + 8)
         && ((*(_QWORD *)(**(_QWORD **)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
LABEL_25:
      ++v12;
      v14 += 12;
      v15 += 8;
      v16 += 128;
      if (a3 == v12)
        return;
    }
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v79, 1.0);
    v17 = *(_QWORD **)(a1 + 24);
    if (*v17)
    {
      v18 = (float32x2_t *)(v17[4] + v14);
      v71 = vcvtq_f64_f32(*v18);
      v72.f64[0] = v18[1].f32[0];
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)v79, &v71);
      v19 = *(_QWORD **)(a1 + 32);
      if (*v19)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v68.f64, (unsigned __int16 *)(v19[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)&v71, v68.f64);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v79, v71.f64);
        goto LABEL_10;
      }
    }
    else
    {
      v20 = *(_QWORD **)(a1 + 32);
      if (*v20)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v71.f64, (unsigned __int16 *)(v20[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)v79, v71.f64);
LABEL_10:
        v21 = *(_QWORD **)(a1 + 64);
        if (*v21)
        {
          v22 = (float *)(v21[4] + v14);
          v23 = v22[1];
          v24 = v22[2];
          v25 = *v22;
          v26 = v23;
          v27 = v24;
          v28 = **(double **)(a1 + 16) * sqrtf((float)((float)(*v22 * *v22) + (float)(v23 * v23)) + (float)(v24 * v24));
          v68.f64[0] = v25;
          v68.f64[1] = v26;
          v69 = v27;
          v70 = v28;
          v29 = v25 * v25 + v26 * v26 + v27 * v27;
          if (fabs(v29 + -1.0) >= 1.0e-10)
          {
            v30 = sqrt(v29);
            if (v30 <= 1.0e-10)
              v31 = 1.0e10;
            else
              v31 = 1.0 / v30;
            v68.f64[0] = v31 * v25;
            v68.f64[1] = v31 * v26;
            v69 = v31 * v27;
          }
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v71, &v68);
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v79, v71.f64);
        }
      }
    }
    v32 = *(_QWORD **)(a1 + 48);
    v33 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + v14);
    v34 = *v33;
    v35 = v33[1].f32[0];
    if (*v32)
    {
      v36 = (float32x2_t *)(v32[4] + v14);
      v37 = *v36;
      v38 = v36[1].f32[0];
      v39 = *(_QWORD **)(a1 + 56);
      v40 = **(double **)(a1 + 8);
      if (*v39)
      {
        v41 = (float32x2_t *)(v39[4] + v14);
        v42 = v40 * v41[1].f32[0];
        v37 = vadd_f32(v37, vmul_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v41), v40)), (float32x2_t)0x3F0000003F000000));
        v38 = v38 + (float)(v42 * 0.5);
      }
      v43 = v40 * v38;
      v34 = vadd_f32(v34, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v37), v40)));
      v35 = v35 + v43;
    }
    v71 = vcvtq_f64_f32(v34);
    v72.f64[0] = v35;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly((uint64_t)v79, (uint64_t)&v71);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) == **(_QWORD **)(a1 + 88))
    {
      v64 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_20BF5FC60(v64, v44, v45);
      v56 = (float64x2_t *)(*((_QWORD *)v64 + 4) + v16);
      v65 = (float64x2_t)v79[0];
      v66 = (float64x2_t)v79[1];
      v67 = (float64x2_t)v79[3];
      v56[2] = (float64x2_t)v79[2];
      v56[3] = v67;
      *v56 = v65;
      v56[1] = v66;
      v60 = (float64x2_t)v79[4];
      v61 = (float64x2_t)v79[5];
      v62 = (float64x2_t)v79[6];
      v63 = (float64x2_t)v79[7];
    }
    else
    {
      v46 = (float64x2_t *)(**(_QWORD **)(a1 + 72)
                          + ((uint64_t)*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 32) + 4 * v12) << 7));
      v47 = v46[3];
      v49 = *v46;
      v48 = v46[1];
      v73 = v46[2];
      v74 = v47;
      v71 = v49;
      v72 = v48;
      v50 = v46[7];
      v52 = v46[4];
      v51 = v46[5];
      v77 = v46[6];
      v78 = v50;
      v75 = v52;
      v76 = v51;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v71.f64, (double *)v79);
      v53 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_20BF5FC60(v53, v54, v55);
      v56 = (float64x2_t *)(*((_QWORD *)v53 + 4) + v16);
      v57 = v71;
      v58 = v72;
      v59 = v74;
      v56[2] = v73;
      v56[3] = v59;
      *v56 = v57;
      v56[1] = v58;
      v60 = v75;
      v61 = v76;
      v62 = v77;
      v63 = v78;
    }
    v56[6] = v62;
    v56[7] = v63;
    v56[4] = v60;
    v56[5] = v61;
    goto LABEL_25;
  }
}

void *sub_20C580EF0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD20D20D20D20D3)
    sub_20BDDF5B4();
  return operator new(312 * a2);
}

_QWORD *sub_20C580F38(_QWORD *a1, unint64_t a2)
{
  int64x2_t *v4;
  int64x2_t v5;
  int64x2_t *v6;
  int64x2_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C02CC00(a1, a2);
    v4 = (int64x2_t *)a1[1];
    v5 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
    v6 = &v4[3 * a2];
    v7 = vdupq_n_s64(0xC7EFFFFFE0000000);
    do
    {
      *v4 = v5;
      v4[1] = (int64x2_t)xmmword_20CA5AAF0;
      v4[2] = v7;
      v4 += 3;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_20C580FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C580FD8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53CD48;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53CD48;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C581378(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C581378(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C581378(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _BYTE __dst[312];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 < a3)
  {
    v24 = v3;
    v25 = v4;
    v6 = a2;
    v8 = a2 << 7;
    v9 = 48 * a2;
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)a1 + 8)
        || ((*(_QWORD *)(**(_QWORD **)a1 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        memcpy(__dst, (const void *)(**(_QWORD **)(a1 + 24) + 312 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 4 * v6)), sizeof(__dst));
        v10 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + v8);
        v20 = *(_OWORD *)&__dst[112];
        v21 = *(_OWORD *)&__dst[128];
        v22 = *(_OWORD *)&__dst[144];
        v23 = *(_OWORD *)&__dst[160];
        v16 = *(_OWORD *)&__dst[48];
        v17 = *(_OWORD *)&__dst[64];
        v18 = *(_OWORD *)&__dst[80];
        v19 = *(_OWORD *)&__dst[96];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v16, v10);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)__dst, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v16);
        v11 = **(double ***)(a1 + 16);
        if (v11)
        {
          v20 = *(_OWORD *)&__dst[112];
          v21 = *(_OWORD *)&__dst[128];
          v22 = *(_OWORD *)&__dst[144];
          v23 = *(_OWORD *)&__dst[160];
          v16 = *(_OWORD *)&__dst[48];
          v17 = *(_OWORD *)&__dst[64];
          v18 = *(_OWORD *)&__dst[80];
          v19 = *(_OWORD *)&__dst[96];
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v16, v11);
          pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)__dst, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v16);
        }
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)__dst, (uint64_t)&v16);
        v12 = (_OWORD *)(**(_QWORD **)(a1 + 40) + v9);
        v13 = v16;
        v14 = v18;
        v12[1] = v17;
        v12[2] = v14;
        *v12 = v13;
      }
      ++v6;
      v8 += 128;
      v9 += 48;
    }
    while (a3 != v6);
  }
}

uint64_t sub_20C5814F4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 **v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned __int8 v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v36[16];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((_BYTE *)this + 56) == 2)
  {
    v4 = *((_QWORD *)this - 4);
    v5 = *(_QWORD *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      v6 = (__int128 **)*((_QWORD *)this + 1);
      *(_QWORD *)(v4 + 24) = *v6;
      v7 = v4 + 24;
      *(_QWORD *)(v7 + 8) = v6[1];
      *(_QWORD *)(v7 + 16) = v6[2];
      v8 = *v6;
      v9 = *v8;
      v10 = v8[1];
      *(_OWORD *)(v7 + 56) = v8[2];
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *((_QWORD *)this + 1) = v7;
      *(_BYTE *)(v7 - 15) = 1;
    }
  }
  v11 = (__int128 *)((char *)this + 16);
  v12 = *((_QWORD *)this + 4);
  v13 = *((_QWORD *)this + 2) - *((_QWORD *)this + 3);
  if (v12 < v13)
  {
    v14 = *((_QWORD *)this + 5);
    if (v14 > 1)
      goto LABEL_15;
    if (v14 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        v15 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
        *((_QWORD *)this - 4) = v15;
        *(_QWORD *)(v15 - 24) = 2;
        v16 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v15, 0x40uLL);
        v17 = *((_BYTE *)this + 56);
        *(_BYTE *)(v15 - 11) = 1;
        *(_QWORD *)v15 = &unk_24C520F68;
        __dmb(0xBu);
        *(_BYTE *)(v15 + 8) = 0;
        *(_QWORD *)v15 = &off_24C53CDD8;
        *(_BYTE *)(v15 + 9) = 0;
        *(_BYTE *)(v15 + 10) = v17;
        *(_QWORD *)(v15 + 16) = 0;
        *(_BYTE *)(v16 - 11) = 1;
        *(_QWORD *)v16 = &off_24C53CD90;
        *(_QWORD *)(v16 + 8) = *((_QWORD *)this + 1);
        *(_QWORD *)(v16 + 16) = *((_QWORD *)this + 2);
        v18 = *((_QWORD *)this + 3) + ((*((_QWORD *)this + 2) - *((_QWORD *)this + 3)) >> 1);
        *((_QWORD *)this + 2) = v18;
        *(_QWORD *)(v16 + 24) = v18;
        *(_QWORD *)(v16 + 32) = *((_QWORD *)this + 4);
        v19 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v19;
        *(_QWORD *)(v16 + 40) = v19;
        *(_DWORD *)(v16 + 48) = 2;
        *(_BYTE *)(v16 + 52) = *((_BYTE *)this + 52);
        *(_BYTE *)(v16 + 56) = 2;
        *((_BYTE *)this + 56) = 1;
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v16 - 40))(*(_QWORD *)(v16 - 40), v16, v16 - 8);
        v12 = *((_QWORD *)this + 4);
        v13 = *((_QWORD *)this + 2) - *((_QWORD *)this + 3);
        if (v12 >= v13)
          break;
        v20 = *((_QWORD *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v12 < v13 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v36 = 0x10000;
    v37 = *v11;
    v38 = *((_QWORD *)this + 4);
    while (1)
    {
      sub_20C15C670(v36, *((unsigned __int8 *)this + 52));
      v21 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v21 & 1) == 0)
        break;
      v24 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v24;
      v23 = v36[2];
      if (v36[2] < 2u)
      {
        v22 = v36[0];
        if (v36[v36[0] + 3] < v24
          && *((_QWORD *)&v37 + 3 * v36[0] + 2) < *((_QWORD *)&v37 + 3 * v36[0]) - *((_QWORD *)&v37 + 3 * v36[0] + 1))
        {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      v25 = v36[1];
      v26 = v36[v36[1] + 3];
      v27 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
      *((_QWORD *)this - 4) = v27;
      *(_QWORD *)(v27 - 24) = 2;
      v28 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v27, 0x40uLL);
      v29 = (char *)&v37 + 24 * v25;
      v30 = *((_BYTE *)this + 56);
      *(_BYTE *)(v27 - 11) = 1;
      *(_QWORD *)v27 = &unk_24C520F68;
      __dmb(0xBu);
      *(_BYTE *)(v27 + 8) = 0;
      *(_QWORD *)v27 = &off_24C53CDD8;
      *(_BYTE *)(v27 + 9) = 0;
      *(_BYTE *)(v27 + 10) = v30;
      *(_QWORD *)(v27 + 16) = 0;
      *(_BYTE *)(v28 - 11) = 1;
      *(_QWORD *)v28 = &off_24C53CD90;
      *(_QWORD *)(v28 + 8) = *((_QWORD *)this + 1);
      v31 = *(_OWORD *)v29;
      *(_QWORD *)(v28 + 32) = *((_QWORD *)v29 + 2);
      *(_OWORD *)(v28 + 16) = v31;
      v32 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v32;
      *(_QWORD *)(v28 + 40) = v32;
      *(_DWORD *)(v28 + 48) = 2;
      LOBYTE(v32) = *((_BYTE *)this + 52);
      *(_BYTE *)(v28 + 56) = 2;
      *(_BYTE *)(v28 + 52) = v32 - v26;
      *((_BYTE *)this + 56) = 1;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v28 - 40))(*(_QWORD *)(v28 - 40), v28, v28 - 8);
      v23 = --v36[2];
      v36[1] = (v36[1] + 1) & 7;
LABEL_30:
      if (!v23 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        goto LABEL_34;
    }
    v22 = v36[0];
LABEL_25:
    sub_20C5819F0((uint64_t)this, (unint64_t *)&v37 + 3 * v22);
    v23 = --v36[2];
    v36[0] = (v36[0] - 1) & 7;
    goto LABEL_30;
  }
  sub_20C5819F0((uint64_t)this, (unint64_t *)this + 2);
LABEL_34:
  if (*((_BYTE *)this + 56) == 1)
  {
    v33 = *((_QWORD *)this - 4);
    v34 = *((_QWORD *)this + 1);
    __dmb(0xBu);
    *(_QWORD *)(v33 + 16) = v34;
  }
  return 0;
}

_QWORD *sub_20C581964(_QWORD *result)
{
  *result = &off_24C53CDD8;
  return result;
}

uint64_t sub_20C581978(uint64_t a1)
{
  uint64_t v1;
  float64x2_t v2;
  float64x2_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 9))
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2.f64[0] = *(float64_t *)(a1 + 64);
    v2.f64[1] = *(float64_t *)(v1 + 48);
    v3.f64[0] = *(float64_t *)(v1 + 40);
    v3.f64[1] = *(float64_t *)(a1 + 72);
    v4 = vbslq_s8((int8x16_t)vcgtq_f64(v3, v2), *(int8x16_t *)(a1 + 64), *(int8x16_t *)(v1 + 40));
    v5 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(v1 + 56)), *(int8x16_t *)(a1 + 80), *(int8x16_t *)(v1 + 56));
    *(int8x16_t *)(v1 + 24) = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v1 + 24), *(float64x2_t *)(a1 + 48)), *(int8x16_t *)(a1 + 48), *(int8x16_t *)(v1 + 24));
    *(int8x16_t *)(v1 + 40) = v4;
    *(int8x16_t *)(v1 + 56) = v5;
  }
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v6 = *(_QWORD *)(a1 - 32);
    v7 = *(_QWORD *)(a1 + 16);
    __dmb(0xBu);
    *(_QWORD *)(v6 + 16) = v7;
  }
  return 0;
}

double sub_20C5819F0(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  _OWORD *v3;
  _QWORD **v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_OWORD *)(v2 + 24);
  v4 = **(_QWORD ****)(v2 + 8);
  v6 = *a2;
  v5 = a2[1];
  v7 = *(_OWORD *)(v2 + 24);
  v8 = *(_OWORD *)(v2 + 56);
  v15 = *(_OWORD *)(v2 + 40);
  v16 = v8;
  v14 = v7;
  v9 = v6 - v5;
  if (v6 > v5)
  {
    v10 = 48 * v5;
    do
    {
      sub_20BEF4754((uint64_t)&v14, **v4 + v10);
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  result = *(double *)&v14;
  v12 = v15;
  v13 = v16;
  *v3 = v14;
  v3[1] = v12;
  v3[2] = v13;
  return result;
}

void sub_20C581A88()
{
  void *__p[2];
  char v1;

  sub_20C582E60();
  sub_20BDDC0E4(__p, "Points");
  sub_20C582F80((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C581AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CE20;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/points.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdGeomPoints pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CE20;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C581C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_254989C90);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254989C90))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254989C88, "Points");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254989C88, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989C90);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_254989C88, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CE20;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdGeom/points.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdGeomPoints pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CE20;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C581E68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989C90);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989CA0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989CA0))
  {
    __cxa_guard_release(&qword_254989CA0);
  }
  return &qword_254989C98;
}

void sub_20C581F0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989CA0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989CB0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)__cxa_guard_acquire(&qword_254989CB0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(v3);
      byte_254989CA8 = sub_20C35BD7C((char *)&qword_254989C98, v4, v5);
      __cxa_guard_release(&qword_254989CB0);
    }
  }
  return byte_254989CA8;
}

void sub_20C581F88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989CB0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(this);
  return &qword_254989C98;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1312), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C582060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::CreateWidthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 448), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5821B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::CreateIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 448), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 488), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254989CD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989CD0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *((_QWORD *)v5 + 164);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 56);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_254989CB8, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989CB8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989CD0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989CF0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989CF0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)1);
    sub_20C5824D0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989CD8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989CF0);
  }
  if (v1)
    return &qword_254989CD8;
  else
    return &qword_254989CB8;
}

void sub_20C58244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_254989CD0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5824D0(uint64_t **a1)
{
  qword_254989CE0 = 0;
  unk_254989CE8 = 0;
  qword_254989CD8 = 0;
  sub_20BFC9A6C((char **)&qword_254989CD8, ((unk_254989CC0 - qword_254989CB8) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_254989CD8, (_QWORD *)qword_254989CE0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_254989CD8, (_QWORD *)qword_254989CE0, (uint64_t *)qword_254989CB8, unk_254989CC0, (unk_254989CC0 - qword_254989CB8) >> 3);
}

void sub_20C582564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  _BOOL4 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v20 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(this, (uint64_t)&v15);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v21 = 0;
  v4 = sub_20C361F00((uint64_t)&v15, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 488), (uint64_t)&v20, &v21);
  if ((v21 & 7) != 0)
  {
    v5 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v19 & 7) != 0)
  {
    v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  if (v4)
  {
    *a2 = v20;
    v20 = 0;
  }
  else
  {
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 153);
    *a2 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        *a2 = v11;
    }
  }
  if ((v20 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
}

void sub_20C5826D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::SetWidthsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  uint64_t *String;
  const char *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(a2, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(this, (uint64_t)&v24);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4)
      v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v17 = 0;
    v5 = sub_20C361C9C((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488), (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17);
    if ((v17 & 7) != 0)
    {
      v6 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    if ((v27 & 7) != 0)
    {
      v8 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
    sub_20BFD265C(&v26);
    if (v25)
      sub_20C35C614(v25);
  }
  else
  {
    v24 = "usdGeom/points.cpp";
    v25 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetWidthsInterpolation";
    v26 = 212;
    v27 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPoints::SetWidthsInterpolation(const TfToken &)";
    v28 = 0;
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    sub_20C35C4F8((uint64_t)&v17, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_20C348EEC((uint64_t)&v17, &v22);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
    if (*((char *)String + 23) >= 0)
      v13 = (const char *)String;
    else
      v13 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set invalid interpolation \"%s\" for widths attr on prim %s", v11, v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    if ((v21 & 7) != 0)
    {
      v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if (v18)
      sub_20C35C614(v18);
    return 0;
  }
  return v5;
}

void sub_20C582914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent(a1, a2, 0, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent(uint64_t *a1, _QWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  char *v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  float *v28;
  unsigned __int32 v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  uint64_t v35;
  char *v36;
  float v37;
  float v38;
  uint64_t v39;
  char *v40;
  float v41;
  float v42;
  float v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float *v55;
  uint64_t v56;
  char *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float v73;
  float v74;
  float v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  char *v81;
  float *v82;
  float v84;
  float v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  _QWORD v91[3];
  _OWORD v92[8];
  uint64_t *v93[4];
  float *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[2];

  if (*a1 != *a2)
    return 0;
  DWORD2(v92[0]) = 0;
  *(_QWORD *)&v92[0] = 0;
  v93[0] = (uint64_t *)v92;
  sub_20BF5AD04(a4, 2uLL, v93);
  v10 = a2[4] + 4 * *a2;
  v97[0] = a2[4];
  v97[1] = v10;
  v11 = *a1;
  v12 = a1[4] + 12 * *a1;
  v95 = a1[4];
  v96 = v12;
  if (v11)
  {
    v13 = 3.40282347e38;
    v14 = -3.40282347e38;
    v15 = -3.40282347e38;
    v16 = -3.40282347e38;
    v17 = 3.40282347e38;
    v18 = 3.40282347e38;
    while (1)
    {
      v90 = v18;
      v21 = *(float *)sub_20C583034(v97, v8, v9) * 0.5;
      if (a3)
      {
        v94 = 0;
        memset(v93, 0, sizeof(v93));
        v22 = *(_OWORD *)(a3 + 80);
        v92[4] = *(_OWORD *)(a3 + 64);
        v92[5] = v22;
        v23 = *(_OWORD *)(a3 + 112);
        v92[6] = *(_OWORD *)(a3 + 96);
        v92[7] = v23;
        v24 = *(_OWORD *)(a3 + 16);
        v92[0] = *(_OWORD *)a3;
        v92[1] = v24;
        v25 = *(_OWORD *)(a3 + 48);
        v92[2] = *(_OWORD *)(a3 + 32);
        v92[3] = v25;
        memset(v91, 0, sizeof(v91));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly((uint64_t)v92, (uint64_t)v91);
        if ((pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent((const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v92, (unint64_t *)v93, v21) & 1) == 0)
        {
          sub_20BF5618C((uint64_t)v93);
          return 0;
        }
        v28 = (float *)sub_20C5830B0(&v95, v26, v27);
        v29 = sub_20C575548((float64x2_t *)a3, v28).u32[0];
        v31 = v30;
        v33 = v32;
        v88 = v13;
        v89 = v16;
        v34 = v14;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v93, v35, v36);
        v86 = v17;
        v87 = v15;
        v37 = v94[1];
        v84 = *v94;
        v85 = *(float *)&v29;
        v38 = v94[2];
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v93, v39, v40);
        v41 = v94[3];
        v42 = v94[4];
        v43 = v94[5];
        sub_20BF5618C((uint64_t)v93);
        v44 = (float)(v33 + v38);
        if (v34 >= v44)
          v45 = v34;
        else
          v45 = (float)(v33 + v38);
        v46 = (float)(v33 + v43);
        if (v45 >= v46)
          v14 = v45;
        else
          v14 = (float)(v33 + v43);
        v47 = (float)(v31 + v37);
        v48 = v87;
        if (v87 < v47)
          v48 = (float)(v31 + v37);
        v49 = (float)(v31 + v42);
        if (v48 >= v49)
          v15 = v48;
        else
          v15 = (float)(v31 + v42);
        v50 = (float)(v85 + v84);
        v51 = v89;
        if (v89 < v50)
          v51 = (float)(v85 + v84);
        v52 = (float)(v85 + v41);
        if (v51 >= v52)
          v16 = v51;
        else
          v16 = (float)(v85 + v41);
        if (v88 <= v44)
          v44 = v88;
        if (v44 <= v46)
          v13 = v44;
        else
          v13 = (float)(v33 + v43);
        v53 = v86;
        if (v86 > v47)
          v53 = v47;
        if (v53 <= v49)
          v17 = v53;
        else
          v17 = v49;
        v54 = v90;
        if (v90 > v50)
          v54 = (float)(v85 + v84);
        if (v54 <= v52)
          v18 = v54;
        else
          v18 = v52;
      }
      else
      {
        v55 = (float *)sub_20C5830B0(&v95, v19, v20);
        v58 = (float)(v21 + *v55);
        v59 = (float)(v21 + v55[1]);
        v60 = (float)(v21 + v55[2]);
        if (v90 <= v58)
          v61 = v90;
        else
          v61 = (float)(v21 + *v55);
        if (v17 <= v59)
          v62 = v17;
        else
          v62 = (float)(v21 + v55[1]);
        v63 = v14;
        if (v13 <= v60)
          v64 = v13;
        else
          v64 = (float)(v21 + v55[2]);
        if (v16 < v58)
          v16 = (float)(v21 + *v55);
        if (v15 >= v59)
          v65 = v15;
        else
          v65 = (float)(v21 + v55[1]);
        if (v63 >= v60)
          v66 = v63;
        else
          v66 = (float)(v21 + v55[2]);
        v67 = (float *)sub_20C5830B0(&v95, v56, v57);
        v68 = (float)(*v67 - v21);
        v69 = (float)(v67[1] - v21);
        v70 = (float)(v67[2] - v21);
        if (v61 <= v68)
          v18 = v61;
        else
          v18 = (float)(*v67 - v21);
        if (v62 <= v69)
          v71 = v62;
        else
          v71 = v69;
        if (v64 <= v70)
          v13 = v64;
        else
          v13 = v70;
        if (v16 < v68)
          v16 = v68;
        if (v65 >= v69)
          v72 = v65;
        else
          v72 = v69;
        v17 = v71;
        if (v66 < v70)
          v14 = v70;
        else
          v14 = v66;
        v15 = v72;
      }
      sub_20C5831A8(v97);
      sub_20C58312C(&v95);
      if (v95 == v96)
        goto LABEL_75;
    }
  }
  v16 = -3.40282347e38;
  v18 = 3.40282347e38;
  v17 = 3.40282347e38;
  v13 = 3.40282347e38;
  v15 = -3.40282347e38;
  v14 = -3.40282347e38;
LABEL_75:
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v8, v9);
  v76 = (float *)a4[4];
  v73 = v18;
  *v76 = v73;
  v74 = v17;
  v76[1] = v74;
  v75 = v13;
  v76[2] = v75;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v80, v81);
  v82 = (float *)a4[4];
  v77 = v16;
  v82[3] = v77;
  v78 = v15;
  v82[4] = v78;
  v79 = v14;
  v82[5] = v79;
  return 1;
}

void sub_20C582D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 192);
  _Unwind_Resume(a1);
}

void sub_20C582D60(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C583224;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetPointCount(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(a1, (uint64_t)v7);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5);
  v1 = *(_QWORD *)&v5[0];
  sub_20BF5618C((uint64_t)v5);
  if ((v11 & 7) != 0)
  {
    v2 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v1;
}

void sub_20C582E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20C372B54((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C582E60()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C55C298((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C582F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C582F80(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C583010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C583034(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtArray<float"
            ">>::operator*() [T = const pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C5830A8()
{
  JUMPOUT(0x20C583058);
}

uint64_t sub_20C5830B0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtArray<pxrIn"
            "ternal__aapl__pxrReserved__::GfVec3f>>::operator*() [T = const pxrInternal__aapl__pxrReserved__::VtArray<pxr"
            "Internal__aapl__pxrReserved__::GfVec3f>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C583124()
{
  JUMPOUT(0x20C5830D4);
}

_QWORD *sub_20C58312C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator++() [T = const pxrInternal__aapl__pxrReserved"
            "__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 12;
  }
  return a1;
}

_QWORD *sub_20C5831A8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":VtArray<float>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_20C583224(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, float64x2_t *a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  char v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void (**v29)(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *__hidden);
  uint64_t v30;

  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v29, a1);
  v29 = off_24C53CE20;
  if (v30
    && (*(_BYTE *)(v30 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) != 0
    || (*(_QWORD *)&v26 = "usdGeom/points.cpp",
        *((_QWORD *)&v26 + 1) = "_ComputeExtentForPoints",
        *(_QWORD *)&v27 = 293,
        *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForPoints(const UsdGeomBoundable &,"
                                " const UsdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        LOBYTE(v28) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "pointsSchema", 0) & 1) != 0))
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v29, (uint64_t)&v23);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v23, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v26);
    v8 = v7;
    if ((BYTE8(v24) & 7) != 0)
    {
      v9 = (unsigned int *)(*((_QWORD *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_20BFD265C(&v24);
    if (*((_QWORD *)&v23 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v23 + 1));
    if ((v8 & 1) != 0)
    {
      v25 = 0;
      v23 = 0u;
      v24 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)&v29, (uint64_t)&v18);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)&v18, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v23);
      v12 = v11;
      if ((v22 & 7) != 0)
      {
        v13 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (v19)
        sub_20C35C614(v19);
      if ((v12 & 1) != 0)
      {
        if (a3)
          v15 = pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent((uint64_t *)&v26, &v23, (uint64_t)a3, a4);
        else
          v15 = pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent((uint64_t *)&v26, &v23, 0, a4);
      }
      else if (a3)
      {
        v15 = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent((uint64_t *)&v26, a3, a4);
      }
      else
      {
        v15 = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent(&v26, a4);
      }
      v16 = v15;
      sub_20BF5618C((uint64_t)&v23);
    }
    else
    {
      v16 = 0;
    }
    sub_20BF5618C((uint64_t)&v26);
  }
  else
  {
    v16 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v29);
  return v16;
}

void sub_20C583438(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  if (a1 != a2)
  {
    atomic_store(0, (unsigned int *)(a1 + 40));
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 48);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v7)
      sub_20C35C614(v7);
    sub_20C01A074((int *)(a1 + 16), (_DWORD *)(a2 + 16));
    sub_20C01A0C8((int *)(a1 + 20), (_DWORD *)(a2 + 20));
    sub_20BF32220((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if ((_DWORD)result)
  {
    v4 = sub_20C398E78(this);
    return pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidPrimvarName(v4, v5);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidPrimvarName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v2;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  const char *v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  const char *v11;
  uint64_t *v12;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  uint64_t *v16;
  const char *v17;
  int v18;
  size_t v19;
  size_t v20;
  unint64_t v21;

  v2 = this;
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    v3 = this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  if (*((char *)EmptyString + 23) >= 0)
    v6 = (const char *)EmptyString;
  else
    v6 = (const char *)*EmptyString;
  v7 = *((char *)v3 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)v3 + 23);
  else
    v8 = *((_QWORD *)v3 + 1);
  v9 = strlen(v6);
  if (v8 < v9)
    return 0;
  v10 = v9;
  v11 = v7 >= 0 ? (const char *)v3 : *(const char **)v3;
  v12 = (uint64_t *)strncmp(v11, v6, v10);
  if ((_DWORD)v12)
    return 0;
  if ((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = (*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v12);
    v14 = (unint64_t)v12;
  }
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v12);
  if ((*((_QWORD *)v15 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v16 = (uint64_t *)((*((_QWORD *)v15 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  if (*((char *)v16 + 23) >= 0)
    v17 = (const char *)v16;
  else
    v17 = (const char *)*v16;
  v18 = *(char *)(v14 + 23);
  if (v18 >= 0)
    v19 = *(unsigned __int8 *)(v14 + 23);
  else
    v19 = *(_QWORD *)(v14 + 8);
  v20 = strlen(v17);
  if (v19 < v20)
    return 1;
  v21 = *(_QWORD *)v14;
  if (v18 >= 0)
    v21 = v14;
  return strcmp((const char *)(v21 + v19 - v20), v17) != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  char *v1;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void ***v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  void **v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)atomic_load(&qword_254989CF8);
  if (!v1)
  {
    v1 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1, "primvars:", 0);
    v3 = v1 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 8, ":idFrom", 0);
    v4 = v1 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 16, ":indices", 0);
    v5 = *(void ***)v1;
    v31 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v31 = (void **)v6;
    }
    v8 = (unsigned int *)*v3;
    v32 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v32 = v9;
    }
    v11 = (unsigned int *)*v4;
    v33 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v33 = v12;
    }
    *((_QWORD *)v1 + 3) = 0;
    *((_QWORD *)v1 + 4) = 0;
    *((_QWORD *)v1 + 5) = 0;
    v14 = operator new(0x18uLL);
    v15 = 0;
    *((_QWORD *)v1 + 3) = v14;
    *((_QWORD *)v1 + 4) = v14;
    *((_QWORD *)v1 + 5) = v14 + 3;
    do
    {
      v16 = (unint64_t)(&v31)[v15];
      *v14 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 2, v17));
        if ((v18 & 1) == 0)
          *v14 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v15;
      ++v14;
    }
    while (v15 != 3);
    v19 = (void ***)&v34;
    *((_QWORD *)v1 + 4) = v14;
    do
    {
      v21 = (uint64_t)*--v19;
      v20 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
    }
    while (v19 != &v31);
    while (!__ldaxr(&qword_254989CF8))
    {
      if (!__stlxr((unint64_t)v1, &qword_254989CF8))
        return (unint64_t)v1;
    }
    __clrex();
    v31 = (void **)(v1 + 24);
    sub_20BEEB2B8(&v31);
    if ((*v4 & 7) != 0)
    {
      v25 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if ((*v3 & 7) != 0)
    {
      v27 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    if ((*(_QWORD *)v1 & 7) != 0)
    {
      v29 = (unsigned int *)(*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    operator delete(v1);
    return atomic_load(&qword_254989CF8);
  }
  return (unint64_t)v1;
}

void sub_20C583A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::StripPrimvarsName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v3;
  const std::string *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  std::string __p;
  char v12;

  v3 = this;
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v5 = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    v5 = (const std::string *)this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v5, (uint64_t)EmptyString, &__p);
  if (v12)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    v8 = *(unsigned int **)v3;
    *a2 = *(unsigned int **)v3;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        *a2 = v9;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C583C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_IsNamespaced(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v2;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    v2 = this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  if (*((char *)EmptyString + 23) >= 0)
    v5 = (const char *)EmptyString;
  else
    v5 = (const char *)*EmptyString;
  v6 = *((char *)v2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)v2 + 23);
  else
    v7 = *((_QWORD *)v2 + 1);
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)v2;
  else
    v11 = *(const char **)v2;
  return strncmp(v11, v5, v10) == 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3@<X8>)
{
  char v3;
  _BOOL8 IsNamespaced;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  const void **v9;
  uint64_t *EmptyString;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  const char *v20;
  void *__p[2];
  uint64_t v22;
  const char *v23;
  char v24;
  uint64_t v25;

  v3 = (char)a2;
  *(_QWORD *)a3 = 0;
  IsNamespaced = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_IsNamespaced(this, a2);
  if (IsNamespaced)
  {
    sub_20BF32220(a3, this);
  }
  else
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsNamespaced);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v9 = (const void **)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
      v9 = (const void **)NamespacePrefix;
    }
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v9, (const void **)EmptyString, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v25);
    v11 = *(_QWORD *)a3;
    v12 = *(_QWORD *)a3 & 7;
    if (&v25 == (uint64_t *)a3)
    {
      if (v12)
      {
        v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      if (v12)
      {
        v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      *(_QWORD *)a3 = v25;
      v25 = 0;
    }
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidPrimvarName(a3, v7))
  {
    if ((*(_QWORD *)a3 & 7) != 0)
    {
      v17 = (unsigned int *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    *(_QWORD *)a3 = 0;
    if ((v3 & 1) == 0)
    {
      __p[0] = "usdGeom/primvar.cpp";
      __p[1] = "_MakeNamespaced";
      v22 = 126;
      v23 = "static TfToken pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(const TfToken &, BOOL)";
      v24 = 0;
      v19 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"%s is not a valid name for a Primvar, because it contains the reserved name \"indices\"", v20);
    }
  }
}

void sub_20C583E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;

  if ((*v16 & 7) != 0)
  {
    v17 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  uint64_t v9;

  *a2 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4)
    v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = 0;
  result = sub_20C361F00((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488), (uint64_t)a2, &v9);
  if ((v9 & 7) != 0)
  {
    v6 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((result & 1) == 0)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v8)
      v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    return (uint64_t)sub_20BF32220(a2, (_QWORD *)v8 + 17);
  }
  return result;
}

void sub_20C583F8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;

  if ((*v1 & 7) != 0)
  {
    v2 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::HasAuthoredInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 488));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 17) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4)
    v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 145) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5)
    v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 153) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6)
    v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 151) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  return (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 40) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  const char *v9;
  uint64_t *String;
  const char *v11;
  int v12;
  int v13;
  _QWORD v14[4];
  char v15;

  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(a2, a2))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4)
      v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v14[0] = 0;
    result = sub_20C361C9C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488), (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v14);
    if ((v14[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v14[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else
  {
    v14[0] = "usdGeom/primvar.cpp";
    v14[1] = "SetInterpolation";
    v14[2] = 175;
    v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation(const TfToken &)";
    v15 = 0;
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    sub_20C348EEC((uint64_t)this, &v12);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    if (*((char *)String + 23) >= 0)
      v11 = (const char *)String;
    else
      v11 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set invalid primvar interpolation \"%s\" for attribute %s", v9, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_20BFD265C(&v12);
    return 0;
  }
  return result;
}

void sub_20C58426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;

  v6 = 1;
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v7 = 0;
  sub_20C6DEE84((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 272), (uint64_t)&v6, &v7);
  if ((v7 & 7) != 0)
  {
    v3 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *String;
  const char *v9;
  int v10;
  int v11;
  _QWORD v12[4];
  char v13;
  uint64_t (*v14)(_QWORD, uint64_t);

  LODWORD(v14) = a2;
  if (a2 <= 0)
  {
    v12[0] = "usdGeom/primvar.cpp";
    v12[1] = "SetElementSize";
    v12[2] = 197;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(int)";
    v13 = 0;
    sub_20C348EEC((uint64_t)this, &v10);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    if (*((char *)String + 23) >= 0)
      v9 = (const char *)String;
    else
      v9 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set elementSize to %d for attribute %s (must be a positive, non-zero value)", a2, v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    return 0;
  }
  else
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3)
      v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v12[0] = 0;
    result = sub_20C587E10((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 272), &v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)v12);
    if ((v12[0] & 7) != 0)
    {
      v5 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  return result;
}

void sub_20C584464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a13 & 7) != 0)
  {
    v13 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::HasAuthoredElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 272));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t result;
  _QWORD v23[4];
  char v24;

  if (!a2 || !a3 || !a4 || !a5)
  {
    v23[0] = "usdGeom/primvar.cpp";
    v23[1] = "GetDeclarationInfo";
    v23[2] = 215;
    v23[3] = "void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(TfToken *, SdfValueTypeName *, Tf"
             "Token *, int *) const";
    v24 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "name && typeName && interpolation && elementSize", 0);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetPrimvarName(this, v23);
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)a2 & 7;
  if (v23 == (_QWORD *)a2)
  {
    if (v11)
    {
      v14 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
  else
  {
    if (v11)
    {
      v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    *(_QWORD *)a2 = v23[0];
  }
  *(_QWORD *)a3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(this, v23);
  v16 = *(_QWORD *)a4;
  v17 = *(_QWORD *)a4 & 7;
  if (v23 == (_QWORD *)a4)
  {
    if (v17)
    {
      v20 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  else
  {
    if (v17)
    {
      v18 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    *(_QWORD *)a4 = v23[0];
  }
  result = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(this);
  *a5 = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetPrimvarName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const std::string *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *v6;
  std::string __p;
  char v8;

  EmptyString = sub_20C398E78(this);
  if ((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v4 = (const std::string *)((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v4 = (const std::string *)EmptyString;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(EmptyString);
  if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    v6 = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v4, (uint64_t)v6, &__p);
  if (v8)
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  else
    *a2 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C5846E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v7;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *v9;
  uint64_t *v10;
  _DWORD *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  EmptyString = sub_20C398E78(this);
  if ((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (const void **)((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v7 = (const void **)EmptyString;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(EmptyString);
  if ((*((_QWORD *)NamespacePrefix + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v9 = (uint64_t *)((*((_QWORD *)NamespacePrefix + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v9, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v24);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  v10 = (uint64_t *)((char *)this + 8);
  v11 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_20C35C4F8((uint64_t)&__p, v10, v11);
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v12)
      v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&__p, &v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 464), 0, 0, a3);
    if ((v23 & 7) != 0)
    {
      v13 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&__p, v10, v11);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, a3);
    if ((v23 & 7) != 0)
    {
      v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  if ((v24 & 7) != 0)
  {
    v17 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

void sub_20C584894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  unsigned int *v18;
  unsigned int v19;

  sub_20C35C2E0((uint64_t)&__p);
  if ((a17 & 7) != 0)
  {
    v18 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 0, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::CreateIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t TypeName;

  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(a1, 1, (uint64_t)&v15);
    v6 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(&v15, a2, a3);
    if ((v18 & 7) != 0)
    {
      v7 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
    if (v16)
      sub_20C35C614(v16);
  }
  else
  {
    v15 = (pxrInternal__aapl__pxrReserved__ *)"usdGeom/primvar.cpp";
    v16 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetIndices";
    v17 = 262;
    v18 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices(const VtIntArray &, UsdTimeCode) const";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v14);
    v9 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v10 = *(const char **)v10;
    }
    else
    {
      v10 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Setting indices on non-array valued primvar of type '%s'.", v10);
    if ((v14 & 7) != 0)
    {
      v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    return 0;
  }
  return v6;
}

void sub_20C584A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::BlockIndices(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  const char *v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t TypeName;

  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 1, (uint64_t)&v10);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Block((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v10, v2);
    if ((v13 & 7) != 0)
    {
      v3 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_20BFD265C(&v12);
    if (v11)
      sub_20C35C614(v11);
  }
  else
  {
    v10 = "usdGeom/primvar.cpp";
    v11 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"BlockIndices";
    v12 = 277;
    v13 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::BlockIndices() const";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v9);
    v5 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0)
        v6 = *(const char **)v6;
    }
    else
    {
      v6 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Setting indices on non-array valued primvar of type '%s'.", v6);
    if ((v9 & 7) != 0)
    {
      v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
}

void sub_20C584BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(a1, 0, (uint64_t)&v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v9, v3))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&v9, a2);
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return v5;
}

void sub_20C584CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  _BOOL8 HasAuthoredValue;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 0, (uint64_t)&v5);
  HasAuthoredValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return HasAuthoredValue;
}

void sub_20C584D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetUnauthoredValuesIndex(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v7 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v8 = 0;
  result = sub_20C587E10((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1152), (uint64_t (**)(_QWORD, uint64_t))&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetUnauthoredValuesIndex(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;

  v6 = -1;
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v7 = 0;
  sub_20C6DEE84((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1152), (uint64_t)&v6, &v7);
  if ((v7 & 7) != 0)
  {
    v3 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, _QWORD *a2, double a3)
{
  uint64_t ElementSize;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  char v9;
  char *v10;
  void **v11;
  void *v12;
  const char *Text;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v27[1] = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v27, a3) & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)v27)
      && pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1))
    {
      v26 = 0;
      memset(v25, 0, sizeof(v25));
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v25) & 1) != 0)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(a1);
        v7 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v27, (unint64_t *)v25, ElementSize, (uint64_t)&v17);
        v8 = HIBYTE(v19);
        v9 = HIBYTE(v19);
        if (v19 < 0)
          v8 = v18;
        if (v8)
        {
          v20 = "usdGeom/primvar.cpp";
          v21 = "ComputeFlattened";
          v22 = 365;
          v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtValue *, UsdTimeCode) const";
          v24 = 0;
          pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, a1, v6);
          if (v16 >= 0)
            v11 = __p;
          else
            v11 = (void **)__p[0];
          v12 = &v17;
          if (v19 < 0)
            v12 = v17;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"For primvar %s: %s", v10, v11, v12);
          if (v16 < 0)
            operator delete(__p[0]);
          v9 = HIBYTE(v19);
        }
        if (v9 < 0)
          operator delete(v17);
      }
      else
      {
        v20 = "usdGeom/primvar.cpp";
        v21 = "ComputeFlattened";
        v22 = 357;
        v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtValue *, UsdTimeCode) const";
        v24 = 0;
        sub_20C348EEC((uint64_t)a1, (int *)&v17);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"No indices authored for indexed primvar <%s>.", Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        v7 = 0;
      }
      sub_20BF5618C((uint64_t)v25);
    }
    else
    {
      *((_QWORD *)&v25[0] + 1) = 0;
      sub_20BFD3C3C(v25, v27);
      sub_20BF4B5D8(a2, v25);
      sub_20BF4C2D8((uint64_t)v25);
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20BF4C2D8((uint64_t)v27);
  return v7;
}

void sub_20C5850DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_20BF5618C((uint64_t)&a29);
  sub_20BF4C2D8(v29 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  void *__p[2];
  __int128 v18;
  uint64_t v19;
  _QWORD *TypeName;
  unsigned int *v21;
  std::type_info **v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(a1, a2))
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)a1, a2, a3);
  TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6)
    v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v6 + 10))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v18 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<std::string>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
    if ((_DWORD)v7)
    {
      v22 = &off_24C520700;
      sub_20BF77444(&v21, (uint64_t)__p);
      sub_20BF4B5D8(a2, &v21);
      sub_20BF4C2D8((uint64_t)&v21);
    }
    if (SBYTE7(v18) < 0)
      operator delete(__p[0]);
    return v7;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8)
    v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v8 + 67))
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)a1, a2, a3);
  v19 = 0;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v7 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
  if ((_DWORD)v7)
  {
    v22 = off_24C525448;
    v9 = (char *)operator new(0x30uLL);
    v10 = v18;
    *(_OWORD *)v9 = *(_OWORD *)__p;
    *((_OWORD *)v9 + 1) = v10;
    v11 = v19;
    *((_QWORD *)v9 + 4) = v19;
    if (v11)
    {
      v12 = (unint64_t *)(v11 - 16);
      if (*((_QWORD *)v9 + 3))
        v12 = (unint64_t *)*((_QWORD *)v9 + 3);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (unsigned int *)(v9 + 40);
    atomic_store(0, (unsigned int *)v9 + 10);
    v21 = (unsigned int *)v9;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    sub_20BF4B5D8(a2, &v21);
    sub_20BF4C2D8((uint64_t)&v21);
  }
  sub_20C008280(__p);
  return v7;
}

void sub_20C585354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_20C008280(&__p);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *this, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  char v10;
  const std::type_info *v11;
  char *v12;
  const char *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  size_t v18;
  std::string *v19;
  const void *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  void *__p[2];
  int64_t v27;
  void *v28[2];
  uint64_t v29;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this) & 1) != 0)
  {
    if ((sub_20C585810(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C58592C(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C585A48(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C585B64(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C585C80(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C585D9C(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C585EB8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C585FD4(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C5860F0(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C58620C(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C586328(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C586444(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C586560(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C58667C(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C586798(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C5868B4(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C5869D0(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C586AEC(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_20C586C08(this, a3, a4, a1, (std::string *)a5) & 1) == 0)
    {
      v10 = sub_20C586D24(this, a3, a4, a1, (std::string *)a5);
      if (a5)
      {
        if ((v10 & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(this, v11, v12, (uint64_t)__p);
          if (v27 >= 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported indexed primvar value type %s.", v13, v14, v15);
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
          if (*(char *)(a5 + 23) < 0)
            v16 = *(_QWORD *)(a5 + 8);
          else
            v16 = *(unsigned __int8 *)(a5 + 23);
          if (v16)
          {
            if (*(char *)(a5 + 23) >= 0)
              v18 = *(unsigned __int8 *)(a5 + 23);
            else
              v18 = *(_QWORD *)(a5 + 8);
            v19 = &v25;
            sub_20BDF6BDC((uint64_t)&v25, v18 + 1);
            if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
            if (v18)
            {
              if (*(char *)(a5 + 23) >= 0)
                v20 = (const void *)a5;
              else
                v20 = *(const void **)a5;
              memmove(v19, v20, v18);
            }
            *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 10;
            if (v29 >= 0)
              v21 = v28;
            else
              v21 = (void **)v28[0];
            if (v29 >= 0)
              v22 = HIBYTE(v29);
            else
              v22 = (std::string::size_type)v28[1];
            v23 = std::string::append(&v25, (const std::string::value_type *)v21, v22);
            v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v27 = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
          }
          else if (SHIBYTE(v29) < 0)
          {
            sub_20BDDBFAC(__p, v28[0], (unint64_t)v28[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v28;
            v27 = v29;
          }
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(_OWORD *)a5 = *(_OWORD *)__p;
          *(_QWORD *)(a5 + 16) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(__p[0]) = 0;
          if (v16 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          if (SHIBYTE(v29) < 0)
            operator delete(v28[0]);
        }
      }
    }
    return a1[1] != 0;
  }
  else
  {
    sub_20BF4A9BC(a1, this);
    return 1;
  }
}

void sub_20C5857B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, unint64_t *a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(a1, a2, a3, 1, a4);
}

uint64_t sub_20C585810(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF58AAC(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C587E9C(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5861C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C5858FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58592C(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5A0F8(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C5882E4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF59D24(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C585A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C585A48(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20C1D3BE8(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C588728(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20C588B70(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C585B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C585B64(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5865C(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C588BB0(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5913C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C585C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C585C80(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5B118(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C588FF8(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5AC0C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C585D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C585D9C(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5C88C(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C589458(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5C438(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C585E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C585EB8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20C1D45CC(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C5898B8(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20C589D18(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C585FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C585FD4(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5AC4C(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C589D58(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5B760(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C5860C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5860F0(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5D738(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58A1BC(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5D2AC(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C5861DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58620C(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5EDE8(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58A600(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5EA00(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C5862F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586328(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20C1D50E8(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58AA50(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20C58AE94(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586444(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5D2EC(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58AED4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5DE0C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586560(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20C1D2EA4(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58B31C(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20C58B798(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C58664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58667C(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF5FDC8(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58B7D8(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF5F888(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586798(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BFED418(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58BC54(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20C58C09C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20C008280(v14);
  }
  return v10;
}

void sub_20C586884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C008280(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5868B4(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF57C2C(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58C0DC(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF57854(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C5869A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5869D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF64C0C(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58C538(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF64D34(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586AEC(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF6374C(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58C980(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF64160(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586C08(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF565F0(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58CDC8(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF56094(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C586D24(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v14[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BF560D4(a1);
  if ((_DWORD)v10)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = *((_QWORD *)a1 + 1);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a1);
    else
      v12 = *(_QWORD **)a1;
    if (sub_20C58D224(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_20BF56D20(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_20BF4B5D8(a4, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BF5618C((uint64_t)v14);
  }
  return v10;
}

void sub_20C586E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char **pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(char **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a4)
{
  int *v8;
  unint64_t *v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v20;
  char *v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  *(_DWORD *)this = 3;
  this[1] = 0;
  v8 = (int *)(this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  this[3] = 0;
  this[4] = 0;
  v9 = (unint64_t *)(this + 3);
  *((_DWORD *)this + 10) = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, v10) & 1) == 0)
  {
    v21 = "usdGeom/primvar.cpp";
    v22 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"UsdGeomPrimvar";
    v23 = 435;
    v24 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(const UsdPrim &, const TfTo"
                            "ken &, const SdfValueTypeName &)";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v21, "prim", 0);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a3, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v20);
  if (v20)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)a2, &v20, a4, 0, 0, (uint64_t)&v21);
    *(_DWORD *)this = (_DWORD)v21;
    v11 = v22;
    v22 = 0;
    v12 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)this[1];
    this[1] = (char *)v11;
    if (v12)
      sub_20C35C614(v12);
    sub_20BFD3EBC(v8, (int *)&v23);
    sub_20BFD3F10((int *)this + 5, (int *)&v23 + 1);
    if (&v21 == this)
    {
      if ((v24 & 7) != 0)
      {
        v15 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      if ((*v9 & 7) != 0)
      {
        v13 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      *v9 = v24;
      v24 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_20BFD265C(&v23);
    if (v22)
      sub_20C35C614(v22);
    if ((v20 & 7) != 0)
    {
      v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  return this;
}

void sub_20C58701C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(v1 + 32);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3@<X8>)
{
  uint64_t *v5;
  _DWORD *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  v5 = (uint64_t *)((char *)this + 8);
  v6 = (_DWORD *)((char *)this + 16);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)this + 32);
  if (a2)
  {
    sub_20C35C4F8((uint64_t)&v12, v5, v6);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, a3);
    if ((v16 & 7) != 0)
    {
      v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v12, v5, v6);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, v7, (uint64_t)a3);
    if ((v16 & 7) != 0)
    {
      v10 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
}

void sub_20C587164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIdTarget(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t IsDefined;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(this, a2)
    || !*((_QWORD *)this + 4))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(this, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v8);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v8, v3);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return IsDefined;
}

void sub_20C587220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C377F1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  char IsDefined;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v8;
  char *EmptyString;
  __int128 v11;
  unint64_t v12;
  const char *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  std::string __dst;
  _QWORD *TypeName;

  v2 = (unsigned int *)((char *)this + 40);
  v3 = atomic_load((unsigned int *)this + 10);
  if (v3)
  {
LABEL_16:
    while (v3 == 1)
    {
      sched_yield();
      v3 = atomic_load(v2);
    }
  }
  else
  {
    do
    {
      v3 = __ldaxr(v2);
      if (v3)
      {
        __clrex();
        goto LABEL_16;
      }
    }
    while (__stlxr(1u, v2));
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
    if ((IsDefined & 1) != 0)
    {
      TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
      v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v6)
        v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v6 + 10))
        goto LABEL_13;
      v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v7)
        v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v7 + 67))
      {
LABEL_13:
        v8 = sub_20C398E78(this);
        if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (char *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        if (EmptyString[23] < 0)
        {
          EmptyString = (char *)sub_20BDDBFAC(&__dst, *(void **)EmptyString, *((_QWORD *)EmptyString + 1));
        }
        else
        {
          v11 = *(_OWORD *)EmptyString;
          __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)EmptyString + 2);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v11;
        }
        v12 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)EmptyString)
                        + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v12)
        {
          v13 = (const char *)(v12 + 16);
          if (*(char *)(v12 + 39) < 0)
            v13 = *(const char **)v13;
        }
        else
        {
          v13 = "";
        }
        std::string::append(&__dst, v13);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v19);
        v14 = (_QWORD *)((char *)this + 32);
        if (&v19 == (uint64_t *)((char *)this + 32))
        {
          if ((v19 & 7) != 0)
          {
            v17 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
        }
        else
        {
          if ((*v14 & 7) != 0)
          {
            v15 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          *v14 = v19;
        }
        atomic_store(3u, v2);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v3 = 3;
      }
      else
      {
        v3 = 2;
        atomic_store(2u, v2);
      }
    }
    else
    {
      v3 = 0;
      atomic_store(2u, v2);
    }
  }
  return v3 == 3;
}

void sub_20C58743C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIdTarget(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  void **TypeName;

  v2 = (uint64_t *)a2;
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(this, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(this, 1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v16);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v16, v4))
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v2))
        v2 = sub_20C3734F4((uint64_t)this);
      v14 = sub_20BFD7890((uint64_t *)&v13, v2);
      v7 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v16, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v13);
      TypeName = (void **)&v13;
      sub_20BFD6F90(&TypeName);
    }
    else
    {
      v7 = 0;
    }
    if ((v19 & 7) != 0)
    {
      v10 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_20BFD265C(&v18);
    if (v17)
      sub_20C35C614(v17);
  }
  else
  {
    v16 = "usdGeom/primvar.cpp";
    v17 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetIdTarget";
    v18 = 474;
    v19 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIdTarget(const SdfPath &) const";
    v20 = 0;
    TypeName = (void **)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v13);
    v5 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0)
        v6 = *(const char **)v6;
    }
    else
    {
      v6 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Can only set ID Target for string or string[] typed primvars (primvar type is '%s')", v6);
    if ((v13 & 7) != 0)
    {
      v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    return 0;
  }
  return v7;
}

void sub_20C587620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<std::string>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  char v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  int IsDefined;
  char v7;
  const std::string *String;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfPath **v21;

  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(a1, a2))
    goto LABEL_14;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(a1, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v5);
  v7 = IsDefined;
  if (IsDefined)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v16, (uint64_t *)&v13)&& v14 - (_QWORD)v13 == 8)
    {
      String = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v13);
      std::string::operator=((std::string *)a2, String);
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
    v21 = &v13;
    sub_20BFD6F90((void ***)&v21);
  }
  if ((v20 & 7) != 0)
  {
    v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  if ((v7 & 1) == 0)
  {
LABEL_14:
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)a1, a2);
    v2 = v11;
  }
  return v2 & 1;
}

void sub_20C587794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BFD6F90((void ***)va1);
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  char v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  int IsDefined;
  char v7;
  uint64_t *String;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfPath **v21;

  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(a1, a2))
    goto LABEL_14;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(a1, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v5);
  v7 = IsDefined;
  if (IsDefined)
  {
    sub_20C008340(a2);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v16, (uint64_t *)&v13)&& (unint64_t)(v14 - (_QWORD)v13) >= 9)
    {
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v13);
      sub_20C58D66C((uint64_t)a2, (__int128 *)String);
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
    v21 = &v13;
    sub_20BFD6F90((void ***)&v21);
  }
  if ((v20 & 7) != 0)
  {
    v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  if ((v7 & 1) == 0)
  {
LABEL_14:
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((uint64_t)a1, a2);
    v2 = v11;
  }
  return v2 & 1;
}

void sub_20C5878E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BFD6F90((void ***)va1);
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamples(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  char UnionedTimeSamplesInInterval;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int IsDefined;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::UsdObject *v28;
  pxrInternal__aapl__pxrReserved__::UsdObject *v29;
  char *v30;
  int v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  int v33;
  int v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::UsdObject **v36;
  char v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a1))
    goto LABEL_32;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a1, 0, (uint64_t)&v31);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v31, v7);
  v9 = IsDefined;
  if (IsDefined)
  {
    v38 = *(_DWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v39 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 48);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    sub_20BFD6E54(&v40, (_DWORD *)(a1 + 16));
    sub_20BFD6EA4(&v41, (_DWORD *)(a1 + 20));
    v13 = *(_QWORD *)(a1 + 24);
    v42 = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    v43 = v31;
    v44 = v32;
    if (v32)
    {
      v16 = (unint64_t *)((char *)v32 + 48);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_20BFD6E54(&v45, &v33);
    sub_20BFD6EA4(&v46, &v34);
    v47 = v35;
    if ((v35 & 7) != 0)
    {
      v18 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v36 = &v28;
    v37 = 0;
    v28 = (pxrInternal__aapl__pxrReserved__::UsdObject *)operator new(0x40uLL);
    v29 = v28;
    v30 = (char *)v28 + 64;
    v20 = &v48;
    v29 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_20C58D80C((uint64_t)&v30, (uint64_t)&v38, (uint64_t)&v48, (uint64_t)v28);
    UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(&v28, a2, a3);
    v36 = &v28;
    sub_20C3AEE3C((void ***)&v36);
    do
    {
      v21 = *(v20 - 1);
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v20 - 3);
      sub_20BFD265C((_DWORD *)v20 - 4);
      v24 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*(v20 - 3);
      if (v24)
        sub_20C35C614(v24);
      v20 -= 4;
    }
    while (v20 != (uint64_t *)&v38);
  }
  if ((v35 & 7) != 0)
  {
    v25 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  if ((v9 & 1) == 0)
LABEL_32:
    UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(a1, a2, a3);
  return UnionedTimeSamplesInInterval & 1;
}

void sub_20C587BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  uint64_t i;

  sub_20C3AEE3C(&a16);
  for (i = 32; i != -32; i -= 32)
    sub_20C372B54((uint64_t)(&a18 + i));
  sub_20C372B54((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;

  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(this))
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(this, v2);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 0, (uint64_t)&v9);
  v5 = !pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v9, v3)|| !pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v9, v4);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return !v5 || pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(this, v2);
}

void sub_20C587D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::NameContainsNamespaces(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  unsigned __int8 v2;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v3;
  const std::string *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254989D08);
  if ((v2 & 1) == 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)__cxa_guard_acquire(&qword_254989D08);
    if ((_DWORD)v6)
    {
      NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(v6);
      if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
      if (*((char *)EmptyString + 23) < 0)
        v9 = EmptyString[1];
      else
        v9 = *((unsigned __int8 *)EmptyString + 23);
      qword_254989D00 = v9;
      __cxa_guard_release(&qword_254989D08);
    }
  }
  v3 = sub_20C398E78(this);
  if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (const std::string *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  return std::string::find(v4, 58, qword_254989D00) != -1;
}

void sub_20C587DF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D08);
  _Unwind_Resume(a1);
}

uint64_t sub_20C587E10(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB798];
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C53A020;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C587E9C(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  uint64_t *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = (uint64_t *)"_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2f]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  __p[0] = 0;
  v62 = __p;
  sub_20BF58714(a4, v10, (uint64_t **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 8 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = ((char *)v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = (uint64_t *)&v25[8 * v22];
          *v32 = v14;
          v20 = v32 + 1;
          while (v19 != (uint64_t *)v21)
          {
            v33 = *--v19;
            *--v32 = v33;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v63 = v14;
          v20 = v19 + 1;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 8 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_QWORD *)(a4[4] + v29) = *(_QWORD *)(v31 + v28);
          v29 += 8;
          v28 += 8;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = ((char *)v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = (uint64_t)v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (uint64_t *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5882E4(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  char *v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = "usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2d]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v62 = 0;
  v63 = 0;
  __p[0] = &v62;
  sub_20BF59D64(a4, v10, (_OWORD **)__p);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 16 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 16 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_OWORD *)(a4[4] + v29) = *(_OWORD *)(v31 + v28);
          v29 += 16;
          v28 += 16;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = *(_QWORD *)&v62[v38];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C5886B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C588728(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  uint64_t *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = (uint64_t *)"_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2i]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  __p[0] = 0;
  v62 = __p;
  sub_20C00F9CC(a4, v10, (uint64_t **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 8 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = ((char *)v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = (uint64_t *)&v25[8 * v22];
          *v32 = v14;
          v20 = v32 + 1;
          while (v19 != (uint64_t *)v21)
          {
            v33 = *--v19;
            *--v32 = v33;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v63 = v14;
          v20 = v19 + 1;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 8 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_QWORD *)(a4[4] + v29) = *(_QWORD *)(v31 + v28);
          v29 += 8;
          v28 += 8;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = ((char *)v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = (uint64_t)v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (uint64_t *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C588AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_20C588B70@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D39E8(a2, a1).n128_u64[0];
  return result;
}

void sub_20C588B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C588BB0(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2h]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LODWORD(__p[0]) = 0;
  v62 = __p;
  sub_20BF591FC(a4, v10, (_DWORD **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 4 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 4 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v29) = *(_DWORD *)(v31 + v28);
          v29 += 4;
          v28 += 4;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * (_QWORD)v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C588F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C588FF8(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  std::string *v57;
  void *v58;
  char v59;
  void **v60;
  char v61;
  void *__p[2];
  int64_t v63;
  char *v64;
  char *v65;
  _QWORD v66[2];
  char v67;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v64 = "usdGeom/primvar.h";
    v65 = "_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3f]";
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LODWORD(v65) = 0;
  v64 = 0;
  __p[0] = &v64;
  sub_20BF5AD04(a4, v10, (uint64_t **)__p);
  v64 = 0;
  v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    v57 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v56 = v15;
    v16 = 12 * (int)v7;
    v17 = 1;
    v54 = v16;
    v55 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          v21 = v64;
          v22 = (v65 - v64) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v66[0] - (_QWORD)v64;
          if ((uint64_t)(v66[0] - (_QWORD)v64) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v66, v11);
            v21 = v64;
            v19 = v65;
          }
          else
          {
            v25 = 0;
          }
          v34 = &v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 8;
          while (v19 != v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          v64 = v34;
          v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v65 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v65 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 12 * v18 * (int)v7;
        v29 = v13;
        v30 = v56;
        do
        {
          v31 = a1[4];
          sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v32 = a4[4] + v29;
          v33 = *(_QWORD *)(v31 + v28);
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v31 + v28 + 8);
          *(_QWORD *)v32 = v33;
          v29 += 12;
          v28 += 12;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = v64;
    if (v57 && v64 != v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v65 - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57->__r_.__value_.__l.__data_);
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      v36 = v64;
      v39 = (v65 - v64) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = *(_QWORD *)&v64[v40];
          v43 = *(unsigned int *)(a2[4] + 4 * v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v60;
            v48 = v61 < 0;
            v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v58;
            v48 = v59 < 0;
            v49 = &v58;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0)
            v50 = __p;
          else
            v50 = (void **)__p[0];
          if (v63 >= 0)
            v51 = HIBYTE(v63);
          else
            v51 = (std::string::size_type)__p[1];
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v61 < 0)
            {
              v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      v65 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C5893E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C589458(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  std::string *v57;
  void *v58;
  char v59;
  void **v60;
  char v61;
  void *__p[2];
  int64_t v63;
  char *v64;
  char *v65;
  _QWORD v66[2];
  char v67;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v64 = "usdGeom/primvar.h";
    v65 = "_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3d]";
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v64 = 0;
  v65 = 0;
  v66[0] = 0;
  __p[0] = &v64;
  sub_20BF5C478(a4, v10, (__int128 **)__p);
  v64 = 0;
  v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    v57 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v56 = v15;
    v16 = 24 * (int)v7;
    v17 = 1;
    v54 = v16;
    v55 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          v21 = v64;
          v22 = (v65 - v64) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v66[0] - (_QWORD)v64;
          if ((uint64_t)(v66[0] - (_QWORD)v64) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v66, v11);
            v21 = v64;
            v19 = v65;
          }
          else
          {
            v25 = 0;
          }
          v34 = &v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 8;
          while (v19 != v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          v64 = v34;
          v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v65 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v65 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 24 * v18 * (int)v7;
        v29 = v13;
        v30 = v56;
        do
        {
          v31 = a1[4];
          sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v32 = a4[4] + v29;
          v33 = *(_OWORD *)(v31 + v28);
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + v28 + 16);
          *(_OWORD *)v32 = v33;
          v29 += 24;
          v28 += 24;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = v64;
    if (v57 && v64 != v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v65 - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57->__r_.__value_.__l.__data_);
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      v36 = v64;
      v39 = (v65 - v64) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = *(_QWORD *)&v64[v40];
          v43 = *(unsigned int *)(a2[4] + 4 * v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v60;
            v48 = v61 < 0;
            v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v58;
            v48 = v59 < 0;
            v49 = &v58;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0)
            v50 = __p;
          else
            v50 = (void **)__p[0];
          if (v63 >= 0)
            v51 = HIBYTE(v63);
          else
            v51 = (std::string::size_type)__p[1];
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v61 < 0)
            {
              v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      v65 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C589840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5898B8(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  std::string *v57;
  void *v58;
  char v59;
  void **v60;
  char v61;
  void *__p[2];
  int64_t v63;
  char *v64;
  char *v65;
  _QWORD v66[2];
  char v67;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v64 = "usdGeom/primvar.h";
    v65 = "_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3i]";
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LODWORD(v65) = 0;
  v64 = 0;
  __p[0] = &v64;
  sub_20C0118B0(a4, v10, (uint64_t **)__p);
  v64 = 0;
  v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    v57 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v56 = v15;
    v16 = 12 * (int)v7;
    v17 = 1;
    v54 = v16;
    v55 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          v21 = v64;
          v22 = (v65 - v64) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v66[0] - (_QWORD)v64;
          if ((uint64_t)(v66[0] - (_QWORD)v64) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v66, v11);
            v21 = v64;
            v19 = v65;
          }
          else
          {
            v25 = 0;
          }
          v34 = &v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 8;
          while (v19 != v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          v64 = v34;
          v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v65 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v65 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 12 * v18 * (int)v7;
        v29 = v13;
        v30 = v56;
        do
        {
          v31 = a1[4];
          sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v32 = a4[4] + v29;
          v33 = *(_QWORD *)(v31 + v28);
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v31 + v28 + 8);
          *(_QWORD *)v32 = v33;
          v29 += 12;
          v28 += 12;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = v64;
    if (v57 && v64 != v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v65 - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57->__r_.__value_.__l.__data_);
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      v36 = v64;
      v39 = (v65 - v64) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = *(_QWORD *)&v64[v40];
          v43 = *(unsigned int *)(a2[4] + 4 * v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v60;
            v48 = v61 < 0;
            v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v58;
            v48 = v59 < 0;
            v49 = &v58;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0)
            v50 = __p;
          else
            v50 = (void **)__p[0];
          if (v63 >= 0)
            v51 = HIBYTE(v63);
          else
            v51 = (std::string::size_type)__p[1];
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v61 < 0)
            {
              v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      v65 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C589CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_20C589D18@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D42D0(a2, a1).n128_u64[0];
  return result;
}

void sub_20C589D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C589D58(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  uint64_t v35;
  void **v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  std::string *v57;
  void *v58;
  char v59;
  void **v60;
  char v61;
  void *__p[2];
  int64_t v63;
  void **v64;
  int *v65;
  _QWORD v66[2];
  char v67;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v64 = (void **)"usdGeom/primvar.h";
    v65 = (int *)"_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3h]";
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  WORD2(__p[0]) = 0;
  LODWORD(__p[0]) = 0;
  v64 = __p;
  sub_20BF5B820(a4, v10, (int **)&v64);
  v64 = 0;
  v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    v57 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v56 = v15;
    v16 = 6 * (int)v7;
    v17 = 1;
    v54 = v16;
    v55 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          v21 = v64;
          v22 = ((char *)v65 - (char *)v64) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v66[0] - (_QWORD)v64;
          if ((uint64_t)(v66[0] - (_QWORD)v64) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v66, v11);
            v21 = v64;
            v19 = v65;
          }
          else
          {
            v25 = 0;
          }
          v34 = (int *)&v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 2;
          while (v19 != (int *)v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 2;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 2;
          }
          v64 = (void **)v34;
          v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v65 = v14;
          v20 = v19 + 2;
        }
        v17 = 0;
        v65 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 6 * v18 * (int)v7;
        v29 = v13;
        v30 = v56;
        do
        {
          v31 = a1[4];
          sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v32 = a4[4] + v29;
          v33 = *(_DWORD *)(v31 + v28);
          *(_WORD *)(v32 + 4) = *(_WORD *)(v31 + v28 + 4);
          *(_DWORD *)v32 = v33;
          v29 += 6;
          v28 += 6;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = v64;
    if (v57 && v64 != (void **)v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v65 - (char *)v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57->__r_.__value_.__l.__data_);
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      v36 = v64;
      v39 = ((char *)v65 - (char *)v64) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = v64[v40 / 8];
          v43 = *(unsigned int *)(a2[4] + 4 * (_QWORD)v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v60;
            v48 = v61 < 0;
            v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v58;
            v48 = v59 < 0;
            v49 = &v58;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0)
            v50 = __p;
          else
            v50 = (void **)__p[0];
          if (v63 >= 0)
            v51 = HIBYTE(v63);
          else
            v51 = (std::string::size_type)__p[1];
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v61 < 0)
            {
              v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      v65 = (int *)v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58A144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58A1BC(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  char *v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = "usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec4f]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v62 = 0;
  v63 = 0;
  __p[0] = &v62;
  sub_20BF5D3A4(a4, v10, (_OWORD **)__p);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 16 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 16 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_OWORD *)(a4[4] + v29) = *(_OWORD *)(v31 + v28);
          v29 += 16;
          v28 += 16;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = *(_QWORD *)&v62[v38];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58A588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58A600(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  std::string *v57;
  void *v58;
  char v59;
  void **v60;
  char v61;
  void *__p[2];
  int64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    *(_QWORD *)&v64 = "usdGeom/primvar.h";
    *((_QWORD *)&v64 + 1) = "_ComputeFlattenedHelper";
    *(_QWORD *)&v65 = 862;
    *((_QWORD *)&v65 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const "
                            "VtArray<ScalarType> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [Scala"
                            "rType = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v64 = 0u;
  v65 = 0u;
  __p[0] = &v64;
  sub_20BF5EA40(a4, v10, (_OWORD **)__p);
  v64 = 0uLL;
  *(_QWORD *)&v65 = 0;
  if (*a2)
  {
    v57 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v56 = v15;
    v16 = 32 * (int)v7;
    v17 = 1;
    v54 = v16;
    v55 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = (char *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1) >= (unint64_t)v65)
        {
          v21 = (char *)v64;
          v22 = (uint64_t)(*((_QWORD *)&v64 + 1) - v64) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v65 - v64;
          if ((uint64_t)(v65 - v64) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)&v65, v11);
            v19 = (char *)*((_QWORD *)&v64 + 1);
            v21 = (char *)v64;
          }
          else
          {
            v25 = 0;
          }
          v34 = &v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 8;
          while (v19 != v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          *(_QWORD *)&v64 = v34;
          *((_QWORD *)&v64 + 1) = v20;
          *(_QWORD *)&v65 = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          **((_QWORD **)&v64 + 1) = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        *((_QWORD *)&v64 + 1) = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 32 * v18 * (int)v7;
        v29 = v13;
        v30 = v56;
        do
        {
          v31 = a1[4];
          sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v32 = (_OWORD *)(a4[4] + v29);
          v33 = *(_OWORD *)(v31 + v28 + 16);
          *v32 = *(_OWORD *)(v31 + v28);
          v32[1] = v33;
          v29 += 32;
          v28 += 32;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = (void *)v64;
    if (v57 && (_QWORD)v64 != *((_QWORD *)&v64 + 1))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (uint64_t)(*((_QWORD *)&v64 + 1) - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57->__r_.__value_.__l.__data_);
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      v36 = (void *)v64;
      v39 = (uint64_t)(*((_QWORD *)&v64 + 1) - v64) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = *(_QWORD *)(v64 + v40);
          v43 = *(unsigned int *)(a2[4] + 4 * v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v60;
            v48 = v61 < 0;
            v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v58;
            v48 = v59 < 0;
            v49 = &v58;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0)
            v50 = __p;
          else
            v50 = (void **)__p[0];
          if (v63 >= 0)
            v51 = HIBYTE(v63);
          else
            v51 = (std::string::size_type)__p[1];
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v61 < 0)
            {
              v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = (void *)v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      *((_QWORD *)&v64 + 1) = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58A9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58AA50(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  char *v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = "usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec4i]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v62 = 0;
  v63 = 0;
  __p[0] = &v62;
  sub_20C013934(a4, v10, (_OWORD **)__p);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 16 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 16 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_OWORD *)(a4[4] + v29) = *(_OWORD *)(v31 + v28);
          v29 += 16;
          v28 += 16;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = *(_QWORD *)&v62[v38];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58AE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_20C58AE94@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D4DF4(a2, a1).n128_u64[0];
  return result;
}

void sub_20C58AEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58AED4(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  uint64_t *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = (uint64_t *)"_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec4h]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  __p[0] = 0;
  v62 = __p;
  sub_20BF5DECC(a4, v10, (uint64_t **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 8 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = ((char *)v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = (uint64_t *)&v25[8 * v22];
          *v32 = v14;
          v20 = v32 + 1;
          while (v19 != (uint64_t *)v21)
          {
            v33 = *--v19;
            *--v32 = v33;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v63 = v14;
          v20 = v19 + 1;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 8 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_QWORD *)(a4[4] + v29) = *(_QWORD *)(v31 + v28);
          v29 += 8;
          v28 += 8;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = ((char *)v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = (uint64_t)v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (uint64_t *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58B2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58B31C(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  void *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  void **v50;
  BOOL v51;
  void **v52;
  void **v53;
  std::string::size_type v54;
  void *v55;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  std::string *v60;
  void *v61;
  char v62;
  void **v63;
  char v64;
  void *v65[2];
  int64_t v66;
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    __p[0] = "usdGeom/primvar.h";
    __p[1] = "_ComputeFlattenedHelper";
    *(_QWORD *)&v68 = 862;
    *((_QWORD *)&v68 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const "
                            "VtArray<ScalarType> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [Scala"
                            "rType = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    LOBYTE(v69) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  *(_OWORD *)__p = 0u;
  v68 = 0u;
  v65[0] = __p;
  sub_20C017334(a4, v10, (uint64_t *)v65);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v68 = 0;
  if (*a2)
  {
    v60 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v59 = v15;
    v16 = 72 * (int)v7;
    v17 = 1;
    v57 = v16;
    v58 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = (char *)__p[1];
        if (__p[1] >= (void *)v68)
        {
          v21 = (char *)__p[0];
          v22 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v68 - (unint64_t)__p[0];
          if ((uint64_t)(v68 - (unint64_t)__p[0]) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)&v68, v11);
            v21 = (char *)__p[0];
            v19 = (char *)__p[1];
          }
          else
          {
            v25 = 0;
          }
          v37 = &v25[8 * v22];
          *(_QWORD *)v37 = v14;
          v20 = v37 + 8;
          while (v19 != v21)
          {
            v38 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v37 - 1) = v38;
            v37 -= 8;
          }
          __p[0] = v37;
          __p[1] = v20;
          *(_QWORD *)&v68 = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)__p[1] = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        __p[1] = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v7;
        v27 = v17;
        v28 = v26;
        v29 = 72 * v18 * (int)v26;
        v30 = v13;
        v31 = v59;
        do
        {
          v32 = a1[4];
          sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v33 = a4[4] + v30;
          *(_OWORD *)v33 = *(_OWORD *)(v32 + v29);
          v34 = *(_OWORD *)(v32 + v29 + 16);
          v35 = *(_OWORD *)(v32 + v29 + 32);
          v36 = *(_OWORD *)(v32 + v29 + 48);
          *(_QWORD *)(v33 + 64) = *(_QWORD *)(v32 + v29 + 64);
          *(_OWORD *)(v33 + 32) = v35;
          *(_OWORD *)(v33 + 48) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          v30 += 72;
          v29 += 72;
          --v31;
        }
        while (v31);
        v17 = v27;
        v7 = v28;
        v16 = v57;
        a2 = v58;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v39 = __p[0];
    if (v60 && __p[0] != __p[1])
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)__p[1] - (char *)__p[0]) >> 3, *a1, v7);
      if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60->__r_.__value_.__l.__data_);
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)v65;
      v39 = __p[0];
      v60->__r_.__value_.__r.__words[2] = v66;
      v42 = ((char *)__p[1] - (char *)v39) >> 3;
      if (v42 >= 5)
        v42 = 5;
      if (v42)
      {
        v43 = 0;
        v44 = 8 * v42;
        while (1)
        {
          v45 = *(_QWORD *)((char *)__p[0] + v43);
          v46 = *(unsigned int *)(a2[4] + 4 * v45);
          v47 = (v46 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v40, v41, v47);
            v50 = v63;
            v51 = v64 < 0;
            v52 = (void **)&v63;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v40, v41, (v46 * v7), (v7 - 1 + v47));
            v50 = (void **)v61;
            v51 = v62 < 0;
            v52 = &v61;
          }
          if (v51)
            v52 = v50;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v48, v49, v46, v45, v52);
          if (v66 >= 0)
            v53 = v65;
          else
            v53 = (void **)v65[0];
          if (v66 >= 0)
            v54 = HIBYTE(v66);
          else
            v54 = (std::string::size_type)v65[1];
          std::string::append(v60, (const std::string::value_type *)v53, v54);
          if (SHIBYTE(v66) < 0)
            operator delete(v65[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v64 < 0)
            {
              v55 = v63;
LABEL_58:
              operator delete(v55);
            }
          }
          else if (v62 < 0)
          {
            v55 = v61;
            goto LABEL_58;
          }
          v43 += 8;
          if (v44 == v43)
          {
            v39 = __p[0];
            break;
          }
        }
      }
    }
    if (v39)
    {
      __p[1] = v39;
      operator delete(v39);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58B720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C58B798@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D2CF0(a2, a1).n128_u64[0];
  return result;
}

void sub_20C58B7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58B7D8(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  void *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  void **v53;
  BOOL v54;
  void **v55;
  void **v56;
  std::string::size_type v57;
  void *v58;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  std::string *v63;
  void *v64;
  char v65;
  void **v66;
  char v67;
  void *v68[2];
  int64_t v69;
  void *__p[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    __p[0] = "usdGeom/primvar.h";
    __p[1] = "_ComputeFlattenedHelper";
    *(_QWORD *)&v71 = 862;
    *((_QWORD *)&v71 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const "
                            "VtArray<ScalarType> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [Scala"
                            "rType = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v72) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  *(_OWORD *)__p = 0u;
  v71 = 0u;
  v68[0] = __p;
  sub_20BF5F980(a4, v10, (__int128 **)v68);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v71 = 0;
  if (*a2)
  {
    v63 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v62 = v15;
    v16 = (uint64_t)(int)v7 << 7;
    v17 = 1;
    v60 = v16;
    v61 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = (char *)__p[1];
        if (__p[1] >= (void *)v71)
        {
          v21 = (char *)__p[0];
          v22 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v71 - (unint64_t)__p[0];
          if ((uint64_t)(v71 - (unint64_t)__p[0]) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)&v71, v11);
            v21 = (char *)__p[0];
            v19 = (char *)__p[1];
          }
          else
          {
            v25 = 0;
          }
          v40 = &v25[8 * v22];
          *(_QWORD *)v40 = v14;
          v20 = v40 + 8;
          while (v19 != v21)
          {
            v41 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          __p[0] = v40;
          __p[1] = v20;
          *(_QWORD *)&v71 = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)__p[1] = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        __p[1] = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v7;
        v27 = v17;
        v28 = v26;
        v29 = (uint64_t)(v18 * (int)v26) << 7;
        v30 = v13;
        v31 = v62;
        do
        {
          v32 = a1[4];
          sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          v33 = (_OWORD *)(a4[4] + v30);
          v34 = *(_OWORD *)(v32 + v29);
          v35 = *(_OWORD *)(v32 + v29 + 16);
          v36 = *(_OWORD *)(v32 + v29 + 48);
          v33[2] = *(_OWORD *)(v32 + v29 + 32);
          v33[3] = v36;
          *v33 = v34;
          v33[1] = v35;
          v37 = *(_OWORD *)(v32 + v29 + 64);
          v38 = *(_OWORD *)(v32 + v29 + 80);
          v39 = *(_OWORD *)(v32 + v29 + 112);
          v33[6] = *(_OWORD *)(v32 + v29 + 96);
          v33[7] = v39;
          v33[4] = v37;
          v33[5] = v38;
          v30 += 128;
          v29 += 128;
          --v31;
        }
        while (v31);
        v17 = v27;
        v7 = v28;
        v16 = v60;
        a2 = v61;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v42 = __p[0];
    if (v63 && __p[0] != __p[1])
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)__p[1] - (char *)__p[0]) >> 3, *a1, v7);
      if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63->__r_.__value_.__l.__data_);
      *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *(_OWORD *)v68;
      v42 = __p[0];
      v63->__r_.__value_.__r.__words[2] = v69;
      v45 = ((char *)__p[1] - (char *)v42) >> 3;
      if (v45 >= 5)
        v45 = 5;
      if (v45)
      {
        v46 = 0;
        v47 = 8 * v45;
        while (1)
        {
          v48 = *(_QWORD *)((char *)__p[0] + v46);
          v49 = *(unsigned int *)(a2[4] + 4 * v48);
          v50 = (v49 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v43, v44, v50);
            v53 = v66;
            v54 = v67 < 0;
            v55 = (void **)&v66;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v43, v44, (v49 * v7), (v7 - 1 + v50));
            v53 = (void **)v64;
            v54 = v65 < 0;
            v55 = &v64;
          }
          if (v54)
            v55 = v53;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v51, v52, v49, v48, v55);
          if (v69 >= 0)
            v56 = v68;
          else
            v56 = (void **)v68[0];
          if (v69 >= 0)
            v57 = HIBYTE(v69);
          else
            v57 = (std::string::size_type)v68[1];
          std::string::append(v63, (const std::string::value_type *)v56, v57);
          if (SHIBYTE(v69) < 0)
            operator delete(v68[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v67 < 0)
            {
              v58 = v66;
LABEL_58:
              operator delete(v58);
            }
          }
          else if (v65 < 0)
          {
            v58 = v64;
            goto LABEL_58;
          }
          v46 += 8;
          if (v47 == v46)
          {
            v42 = __p[0];
            break;
          }
        }
      }
    }
    if (v42)
    {
      __p[1] = v42;
      operator delete(v42);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58BBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58BC54(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  char *v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = "usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = std::string]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  sub_20C2E6350(a4, *a2 * (int)v7);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v12 = 0;
    v13 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v14 = 1;
    else
      v14 = (int)v7;
    v54 = v14;
    v15 = 24 * (int)v7;
    v16 = 1;
    v52 = v15;
    v53 = a2;
    do
    {
      v17 = *(_DWORD *)(a2[4] + 4 * v13);
      if (v17 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v17))
      {
        v18 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v20 = v62;
          v21 = (v63 - v62) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_20BDDF694();
          v23 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v10 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v10 = v22;
          if (v10)
          {
            v24 = (char *)sub_20BDDF6A8((uint64_t)v64, v10);
            v20 = v62;
            v18 = v63;
          }
          else
          {
            v24 = 0;
          }
          v32 = &v24[8 * v21];
          *(_QWORD *)v32 = v13;
          v19 = v32 + 8;
          while (v18 != v20)
          {
            v33 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = v32;
          v63 = v19;
          v64[0] = &v24[8 * v10];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v63 = v13;
          v19 = v18 + 8;
        }
        v16 = 0;
        v63 = v19;
      }
      else if ((_DWORD)v7)
      {
        v25 = v7;
        v26 = v16;
        v27 = v25;
        v28 = 24 * v17 * (int)v25;
        v29 = v12;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v10, v11);
          std::string::operator=((std::string *)(a4[4] + v29), (const std::string *)(v31 + v28));
          v29 += 24;
          v28 += 24;
          --v30;
        }
        while (v30);
        v16 = v26;
        v7 = v27;
        v15 = v52;
        a2 = v53;
      }
      ++v13;
      v12 += v15;
    }
    while (v13 < *a2);
    v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v10, v11, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = *(_QWORD *)&v62[v38];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  return v16 & 1;
}

void sub_20C58C024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_20C58C09C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D13C4(a2, a1).n128_u64[0];
  return result;
}

void sub_20C58C0C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58C0DC(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  unint64_t *v54;
  uint64_t v55;
  std::string *v56;
  void *v57;
  char v58;
  void **v59;
  char v60;
  void *v61[2];
  int64_t v62;
  void *__p;
  char *v64;
  _QWORD v65[2];
  char v66;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    __p = "usdGeom/primvar.h";
    v64 = "_ComputeFlattenedHelper";
    v65[0] = 862;
    v65[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = double]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  v61[0] = 0;
  __p = v61;
  sub_20BF57894(a4, v10, (uint64_t **)&__p);
  __p = 0;
  v64 = 0;
  v65[0] = 0;
  if (*a2)
  {
    v56 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v55 = v15;
    v16 = 8 * (int)v7;
    v17 = 1;
    v54 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v64;
        if ((unint64_t)v64 >= v65[0])
        {
          v21 = (char *)__p;
          v22 = (v64 - (_BYTE *)__p) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v65[0] - (_QWORD)__p;
          if ((uint64_t)(v65[0] - (_QWORD)__p) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v65, v11);
            v21 = (char *)__p;
            v19 = v64;
          }
          else
          {
            v25 = 0;
          }
          v34 = &v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 8;
          while (v19 != v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          __p = v34;
          v64 = v20;
          v65[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v64 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v64 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v16;
        v27 = v7;
        v28 = v17;
        v29 = v27;
        v30 = 8 * v18 * (int)v27;
        v31 = v13;
        v32 = v55;
        do
        {
          v33 = *(_QWORD *)(a1[4] + v30);
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_QWORD *)(a4[4] + v31) = v33;
          v31 += 8;
          v30 += 8;
          --v32;
        }
        while (v32);
        v17 = v28;
        v7 = v29;
        v16 = v26;
        a2 = v54;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = (char *)__p;
    if (v56 && __p != v64)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v64 - (_BYTE *)__p) >> 3, *a1, v7);
      if (SHIBYTE(v56->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56->__r_.__value_.__l.__data_);
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)v61;
      v36 = (char *)__p;
      v56->__r_.__value_.__r.__words[2] = v62;
      v39 = (v64 - v36) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = *(_QWORD *)((char *)__p + v40);
          v43 = *(unsigned int *)(a2[4] + 4 * v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v59;
            v48 = v60 < 0;
            v49 = (void **)&v59;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v57;
            v48 = v58 < 0;
            v49 = &v57;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v62 >= 0)
            v50 = v61;
          else
            v50 = (void **)v61[0];
          if (v62 >= 0)
            v51 = HIBYTE(v62);
          else
            v51 = (std::string::size_type)v61[1];
          std::string::append(v56, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v62) < 0)
            operator delete(v61[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v60 < 0)
            {
              v52 = v59;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v58 < 0)
          {
            v52 = v57;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = (char *)__p;
            break;
          }
        }
      }
    }
    if (v36)
    {
      v64 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58C4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58C538(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = int]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LODWORD(__p[0]) = 0;
  v62 = __p;
  sub_20BF64D74(a4, v10, (_DWORD **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 4 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 4 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = *(_DWORD *)(a1[4] + v28);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v29) = v31;
          v29 += 4;
          v28 += 4;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * (_QWORD)v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58C908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58C980(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = unsigned int]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LODWORD(__p[0]) = 0;
  v62 = __p;
  sub_20BF64220(a4, v10, (_DWORD **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 4 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 4 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = *(_DWORD *)(a1[4] + v28);
          sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v29) = v31;
          v29 += 4;
          v28 += 4;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * (_QWORD)v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58CD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58CDC8(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  BOOL v48;
  void **v49;
  void **v50;
  std::string::size_type v51;
  void *v52;
  unint64_t *v54;
  uint64_t v55;
  std::string *v56;
  void *v57;
  char v58;
  void **v59;
  char v60;
  void *v61[2];
  int64_t v62;
  void *__p;
  char *v64;
  _QWORD v65[2];
  char v66;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    __p = "usdGeom/primvar.h";
    v64 = "_ComputeFlattenedHelper";
    v65[0] = 862;
    v65[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = float]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LODWORD(v61[0]) = 0;
  __p = v61;
  sub_20BF56258(a4, v10, (_DWORD **)&__p);
  __p = 0;
  v64 = 0;
  v65[0] = 0;
  if (*a2)
  {
    v56 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v55 = v15;
    v16 = 4 * (int)v7;
    v17 = 1;
    v54 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v64;
        if ((unint64_t)v64 >= v65[0])
        {
          v21 = (char *)__p;
          v22 = (v64 - (_BYTE *)__p) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v65[0] - (_QWORD)__p;
          if ((uint64_t)(v65[0] - (_QWORD)__p) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v65, v11);
            v21 = (char *)__p;
            v19 = v64;
          }
          else
          {
            v25 = 0;
          }
          v34 = &v25[8 * v22];
          *(_QWORD *)v34 = v14;
          v20 = v34 + 8;
          while (v19 != v21)
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          __p = v34;
          v64 = v20;
          v65[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v64 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v64 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v16;
        v27 = v7;
        v28 = v17;
        v29 = v27;
        v30 = 4 * v18 * (int)v27;
        v31 = v13;
        v32 = v55;
        do
        {
          v33 = *(_DWORD *)(a1[4] + v30);
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v31) = v33;
          v31 += 4;
          v30 += 4;
          --v32;
        }
        while (v32);
        v17 = v28;
        v7 = v29;
        v16 = v26;
        a2 = v54;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v36 = (char *)__p;
    if (v56 && __p != v64)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v64 - (_BYTE *)__p) >> 3, *a1, v7);
      if (SHIBYTE(v56->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56->__r_.__value_.__l.__data_);
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)v61;
      v36 = (char *)__p;
      v56->__r_.__value_.__r.__words[2] = v62;
      v39 = (v64 - v36) >> 3;
      if (v39 >= 5)
        v39 = 5;
      if (v39)
      {
        v40 = 0;
        v41 = 8 * v39;
        while (1)
        {
          v42 = *(_QWORD *)((char *)__p + v40);
          v43 = *(unsigned int *)(a2[4] + 4 * v42);
          v44 = (v43 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            v47 = v59;
            v48 = v60 < 0;
            v49 = (void **)&v59;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            v47 = (void **)v57;
            v48 = v58 < 0;
            v49 = &v57;
          }
          if (v48)
            v49 = v47;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v62 >= 0)
            v50 = v61;
          else
            v50 = (void **)v61[0];
          if (v62 >= 0)
            v51 = HIBYTE(v62);
          else
            v51 = (std::string::size_type)v61[1];
          std::string::append(v56, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v62) < 0)
            operator delete(v61[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v60 < 0)
            {
              v52 = v59;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v58 < 0)
          {
            v52 = v57;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            v36 = (char *)__p;
            break;
          }
        }
      }
    }
    if (v36)
    {
      v64 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C58D224(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  void **v45;
  BOOL v46;
  void **v47;
  void **v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::string *v55;
  void *v56;
  char v57;
  void **v58;
  char v59;
  void *__p[2];
  int64_t v61;
  void **v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v62 = (void **)"usdGeom/primvar.h";
    v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::pxr_half::half]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  v10 = *a2 * (int)v7;
  LOWORD(__p[0]) = 0;
  v62 = __p;
  sub_20BF56DE0(a4, v10, (_WORD **)&v62);
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    v55 = a5;
    v13 = 0;
    v14 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v15 = 1;
    else
      v15 = (int)v7;
    v54 = v15;
    v16 = 2 * (int)v7;
    v17 = 1;
    v52 = v16;
    v53 = a2;
    do
    {
      v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          v21 = v62;
          v22 = (v63 - (char *)v62) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_20BDDF694();
          v24 = v64[0] - (_QWORD)v62;
          if ((uint64_t)(v64[0] - (_QWORD)v62) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v23;
          if (v11)
          {
            v25 = (char *)sub_20BDDF6A8((uint64_t)v64, v11);
            v21 = v62;
            v19 = v63;
          }
          else
          {
            v25 = 0;
          }
          v32 = &v25[8 * v22];
          *(_QWORD *)v32 = v14;
          v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            v33 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          v62 = (void **)v32;
          v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v63 = v14;
          v20 = v19 + 8;
        }
        v17 = 0;
        v63 = v20;
      }
      else if ((_DWORD)v7)
      {
        v26 = v17;
        v27 = v7;
        v28 = 2 * v18 * (int)v7;
        v29 = v13;
        v30 = v54;
        do
        {
          v31 = a1[4];
          sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_WORD *)(a4[4] + v29) = *(_WORD *)(v31 + v28);
          v29 += 2;
          v28 += 2;
          --v30;
        }
        while (v30);
        v7 = v27;
        v17 = v26;
        v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55->__r_.__value_.__l.__data_);
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      v34 = v62;
      v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = v62[v38 / 8];
          v41 = *(unsigned int *)(a2[4] + 4 * (_QWORD)v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            v45 = v58;
            v46 = v59 < 0;
            v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            v45 = (void **)v56;
            v46 = v57 < 0;
            v47 = &v56;
          }
          if (v46)
            v47 = v45;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          if (v61 >= 0)
            v49 = HIBYTE(v61);
          else
            v49 = (std::string::size_type)__p[1];
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v59 < 0)
            {
              v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_20C58D5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C58D66C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  int v18;
  _QWORD v19[4];
  char v20;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_17;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_17;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = v5 + 24 * v4;
      if (*((char *)a2 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)v9, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v10 = *a2;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v9 = v10;
      }
LABEL_15:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_17:
    v11 = *(_QWORD *)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20C008558(a1, v13);
    v15 = 3 * v4;
    sub_20C0086AC(v11, v11 + 8 * v15, (uint64_t)v14);
    v16 = &v14[v15];
    if (*((char *)a2 + 23) < 0)
    {
      sub_20BDDBFAC(v16, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v17 = *a2;
      v16[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)v16 = v17;
    }
    sub_20C008280((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v14;
    goto LABEL_15;
  }
  v19[0] = "vt/array.h";
  v19[1] = "emplace_back";
  v19[2] = 433;
  v19[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back(Args &&...) [T = std::string, Args "
           "= <const std::string &>]";
  v20 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v18 = 4;
    else
      v18 = 3;
  }
  else
  {
    v18 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v18);
}

uint64_t sub_20C58D80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C37F2BC(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C58D8B4((uint64_t)v9);
  return v4;
}

void sub_20C58D8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C58D8B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58D8B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C58D8E8((uint64_t *)a1);
  return a1;
}

void sub_20C58D8E8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 32;
      sub_20C3AEEC0(v5, v3);
    }
    while (v3 != v4);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53CE78;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/primvarsAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdGeomPrimvarsAPI pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53CE78;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C58DACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989D18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989D18))
  {
    __cxa_guard_release(&qword_254989D18);
  }
  return &qword_254989D10;
}

void sub_20C58DB58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D18);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989D28);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)__cxa_guard_acquire(&qword_254989D28);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetStaticTfType(v3);
      byte_254989D20 = sub_20C35BD7C((char *)&qword_254989D10, v4, v5);
      __cxa_guard_release(&qword_254989D28);
    }
  }
  return byte_254989D20;
}

void sub_20C58DBD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D28);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetStaticTfType(this);
  return &qword_254989D10;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_254989D48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989D48))
  {
    qword_254989D30 = 0;
    *(_QWORD *)algn_254989D38 = 0;
    qword_254989D40 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989D30, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989D48);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989D68);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989D68))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_254989D50 = 0;
    *(_QWORD *)algn_254989D58 = 0;
    qword_254989D60 = 0;
    sub_20BFE538C(&qword_254989D50, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989D50, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989D68);
  }
  if (v1)
    return &qword_254989D50;
  else
    return &qword_254989D30;
}

void sub_20C58DD04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D68);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, int a5@<W4>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a6@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;

  sub_20C35C4F8((uint64_t)&v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar(a6, v11))
  {
    if (*(_QWORD *)a4)
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation(a6, a4);
    if (a5 >= 1)
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(a6, a5);
  }
  if ((v18 & 7) != 0)
  {
    v12 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C58DDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C58DE20(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v8)
    sub_20C35C614(v8);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::RemovePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v10;
  int v11;
  uint64_t v12;
  const char *p_p;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE v36[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v41);
  if (!v41)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v36, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v31, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
    if ((v30 & 7) != 0)
    {
      v6 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_20BFD265C(&v28);
    if (v27)
      sub_20C35C614(v27);
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v31, v8) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v31, (uint64_t)&__p);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&__p, v9))
      {
        v10 = sub_20C398E78(&__p);
        v11 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v36, v10);
      }
      else
      {
        v11 = 1;
      }
      v14 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41);
      if ((v30 & 7) != 0)
      {
        v15 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      v12 = v14 & v11;
      sub_20BFD265C(&v28);
      if (v27)
        sub_20C35C614(v27);
    }
    else
    {
      v12 = 0;
    }
    if ((v35 & 7) != 0)
    {
      v17 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v34 & 7) != 0)
    {
      v19 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    if (v32)
      sub_20C35C614(v32);
  }
  else
  {
    v31 = "usdGeom/primvarsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"RemovePrimvar";
    v33 = 145;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::RemovePrimvar(const TfToken &)";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)v36, v5);
    if (v29 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"RemovePrimvar called on invalid prim: %s", p_p);
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    v12 = 0;
  }
  if ((v40 & 7) != 0)
  {
    v21 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_20BFD265C(&v38);
  if (v37)
    sub_20C35C614(v37);
  if ((v41 & 7) != 0)
  {
    v23 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  return v12;
}

void sub_20C58E140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;

  sub_20C58DE20((uint64_t)&a17);
  sub_20C35C2E0(v17 - 72);
  v19 = *(_QWORD *)(v17 - 40);
  if ((v19 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(a1);
}

void sub_20C58E1D4()
{
  JUMPOUT(0x20C58E1ACLL);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::BlockPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  const char *p_p;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v35);
  if (v35)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v30, (uint64_t *)this + 1, (_DWORD *)this + 4);
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v4, v5) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v30, a2, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v25, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
      if ((v24 & 7) != 0)
      {
        v7 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_20BFD265C(&v22);
      if (v21)
        sub_20C35C614(v21);
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v25, v9) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::BlockIndices((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v25);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::Block((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v25, v10);
      }
      if ((v29 & 7) != 0)
      {
        v11 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      if ((v28 & 7) != 0)
      {
        v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
    }
    else
    {
      v25 = "usdGeom/primvarsAPI.cpp";
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"BlockPrimvar";
      v27 = 174;
      v28 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::BlockPrimvar(const TfToken &)";
      LOBYTE(v29) = 0;
      pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)v30, v6);
      if (v23 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"RemovePrimvar called on invalid prim: %s", p_p);
      if (SHIBYTE(v23) < 0)
        operator delete(__p);
    }
    if ((v34 & 7) != 0)
    {
      v16 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
    if (v31)
      sub_20C35C614(v31);
    if ((v35 & 7) != 0)
    {
      v18 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
  }
}

void sub_20C58E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;

  if (a15 < 0)
    operator delete(__p);
  sub_20C35C2E0(v17 - 56);
  v19 = *(_QWORD *)(v17 - 24);
  if ((v19 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;

  sub_20C35C4F8((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (uint64_t)v17);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v17);
  if ((v21 & 7) != 0)
  {
    v5 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
  if ((v11 & 7) != 0)
  {
    v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
}

void sub_20C58E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C372B54((uint64_t)va1);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  void **v9;
  unsigned int *v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  uint64_t v14[4];
  char v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v16, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)v16, EmptyString, v14);
    sub_20C58E754(v14, (unsigned int (*)(char *))sub_20C590F1C, a2);
    __p[0] = v14;
    sub_20C37FA04((void ***)__p);
  }
  else
  {
    v14[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v14[1] = (uint64_t)"GetPrimvars";
    v14[2] = 229;
    v14[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars() const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v16, v6);
    if (v13 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetPrimvars on invalid prim: %s", (const char *)v9);
    if (v13 < 0)
      operator delete(__p[0]);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
}

void sub_20C58E708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_20C37FA04((void ***)&__p);
  sub_20C35C2E0(v16 - 48);
  _Unwind_Resume(a1);
}

void sub_20C58E754(uint64_t *a1@<X0>, unsigned int (*a2)(char *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20C590AC0(a3, (a1[1] - *a1) >> 5);
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      sub_20C3AD760(v6, (uint64_t)&v17);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v22, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v17);
      if ((v21 & 7) != 0)
      {
        v8 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
      sub_20BFD265C(&v19);
      if (v18)
        sub_20C35C614(v18);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v22, v10)&& a2(v22))
      {
        v11 = a3[1];
        if (v11 >= a3[2])
        {
          v12 = sub_20C590E18(a3, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v22);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a3[1], (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v22);
          v12 = v11 + 48;
          a3[1] = v11 + 48;
        }
        a3[1] = v12;
      }
      if ((v27 & 7) != 0)
      {
        v13 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      if ((v26 & 7) != 0)
      {
        v15 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_20BFD265C(&v24);
      if (v23)
        sub_20C35C614(v23);
      v6 += 32;
    }
    while (v6 != v7);
  }
}

void sub_20C58E8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C591354((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetAuthoredPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  void **v9;
  unsigned int *v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  uint64_t v14[4];
  char v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v16, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v16, EmptyString, v14);
    sub_20C58E754(v14, (unsigned int (*)(char *))sub_20C590F24, a2);
    __p[0] = v14;
    sub_20C37FA04((void ***)__p);
  }
  else
  {
    v14[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v14[1] = (uint64_t)"GetAuthoredPrimvars";
    v14[2] = 244;
    v14[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetAuthoredPrimvars() const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v16, v6);
    if (v13 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetAuthoredPrimvars on invalid prim: %s", (const char *)v9);
    if (v13 < 0)
      operator delete(__p[0]);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
}

void sub_20C58EA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_20C37FA04((void ***)&__p);
  sub_20C35C2E0(v16 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithValues(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  void **v9;
  unsigned int *v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  uint64_t v14[4];
  char v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v16, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v16, EmptyString, v14);
    sub_20C58E754(v14, (unsigned int (*)(char *))pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue, a2);
    __p[0] = v14;
    sub_20C37FA04((void ***)__p);
  }
  else
  {
    v14[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v14[1] = (uint64_t)"GetPrimvarsWithValues";
    v14[2] = 260;
    v14[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithValues() const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v16, v6);
    if (v13 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetPrimvarsWithValues on invalid prim: %s", (const char *)v9);
    if (v13 < 0)
      operator delete(__p[0]);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
}

void sub_20C58EC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_20C37FA04((void ***)&__p);
  sub_20C35C2E0(v16 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  void **v9;
  unsigned int *v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  uint64_t v14[4];
  char v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v16, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v16, EmptyString, v14);
    sub_20C58E754(v14, (unsigned int (*)(char *))pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue, a2);
    __p[0] = v14;
    sub_20C37FA04((void ***)__p);
  }
  else
  {
    v14[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v14[1] = (uint64_t)"GetPrimvarsWithAuthoredValues";
    v14[2] = 276;
    v14[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithA"
                      "uthoredValues() const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v16, v6);
    if (v13 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetPrimvarsWithAuthoredValues on invalid prim: %s", (const char *)v9);
    if (v13 < 0)
      operator delete(__p[0]);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
}

void sub_20C58EDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_20C37FA04((void ***)&__p);
  sub_20C35C2E0(v16 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindInheritablePrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  _QWORD *NamespacePrefix;
  void **v8;
  unsigned int *v9;
  unsigned int v10;
  void *__p[2];
  char v12;
  _QWORD v13[4];
  char v14;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v15, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_20C58EF50((pxrInternal__aapl__pxrReserved__::TfToken *)v15, NamespacePrefix, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a2, 0);
  }
  else
  {
    v13[0] = "usdGeom/primvarsAPI.cpp";
    v13[1] = "FindInheritablePrimvars";
    v13[2] = 369;
    v13[3] = "std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindInheritablePrimvars() const";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v15, v6);
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"FindInheritablePrimvars called on invalid prim: %s", (const char *)v8);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if ((v19 & 7) != 0)
  {
    v9 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
}

void sub_20C58EF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  sub_20C35C2E0(v17 - 48);
  sub_20C591354((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_20C58EF50(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a3, int a4)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(a1))
  {
    sub_20C3AD22C((uint64_t)a1, (uint64_t)&v10);
    sub_20C58EF50(&v10, a2, a3, 0);
    if ((v14 & 7) != 0)
    {
      v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_20BFD265C(&v12);
    if (v11)
      sub_20C35C614(v11);
    sub_20C58F18C(a1, a2, a3, (uint64_t)a3, a4);
  }
}

void sub_20C58F014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindIncrementallyInheritablePrimvars(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v8;
  _QWORD *NamespacePrefix;
  void **v10;
  unsigned int *v11;
  unsigned int v12;
  void *__p[2];
  char v14;
  _QWORD v15[4];
  char v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v17, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v5, v6);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_20C58F18C((pxrInternal__aapl__pxrReserved__::TfToken *)v17, NamespacePrefix, a2, (uint64_t)a3, 0);
  }
  else
  {
    v15[0] = "usdGeom/primvarsAPI.cpp";
    v15[1] = "FindIncrementallyInheritablePrimvars";
    v15[2] = 389;
    v15[3] = "std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindIncrementallyInherita"
             "blePrimvars(const std::vector<UsdGeomPrimvar> &) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v17, v8);
    if (v14 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"FindIncrementallyInheritablePrimvars called on invalid prim: %s", (const char *)v10);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if ((v21 & 7) != 0)
  {
    v11 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
}

void sub_20C58F140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  sub_20C35C2E0(v17 - 48);
  sub_20C591354((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_20C58F18C(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a3, uint64_t a4, int a5)
{
  uint64_t *EmptyString;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v14;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v21;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v22;
  uint64_t v23;
  int *v24;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v38;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  int v40;
  int v41;
  uint64_t v42;
  void **v43;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)a1, EmptyString, &v49);
  v9 = v49;
  v10 = v50;
  if (v49 != v50)
  {
    v11 = &v41;
    v36 = a4 + 16;
    do
    {
      sub_20C3AD760(v9, (uint64_t)&v38);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v43, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v38);
      if ((v42 & 7) != 0)
      {
        v12 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11);
      sub_20BFD265C(&v40);
      if (v39)
        sub_20C35C614(v39);
      if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v43, v14)|| !pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v43))
      {
        goto LABEL_37;
      }
      v15 = sub_20C398E78(&v43);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v43, &v38);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v16)
        v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v17 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      v18 = *((_QWORD *)v16 + 17);
      if ((v38 & 7) != 0)
      {
        do
          v19 = __ldxr(v17);
        while (__stlxr(v19 - 2, v17));
      }
      v20 = v18 & 0xFFFFFFFFFFFFFFF8;
      v21 = *a3;
      v22 = a3[1];
      if (v22 == *a3)
      {
        v21 = a3[1];
LABEL_23:
        if (v17 != (unsigned int *)v20 && !a5)
          goto LABEL_37;
        if (a3 != (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4)
          sub_20C590FF8(a4, v21, v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 4));
        v28 = *(_QWORD *)(a4 + 8);
        if (v28 >= *(_QWORD *)(a4 + 16))
        {
          v29 = sub_20C590E18((uint64_t *)a4, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v43);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(*(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)(a4 + 8), (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v43);
          v29 = v28 + 48;
          *(_QWORD *)(a4 + 8) = v29;
        }
      }
      else
      {
        v23 = v10;
        v24 = v11;
        v25 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4;
        v26 = 0;
        v27 = 0;
        while ((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)sub_20C398E78((const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v21 + v26)) & 0xFFFFFFFFFFFFFFF8))
        {
          ++v27;
          v21 = *a3;
          v22 = a3[1];
          v26 += 48;
          if (v27 >= 0xAAAAAAAAAAAAAAABLL * ((v22 - *a3) >> 4))
          {
            a4 = (uint64_t)v25;
            v11 = v24;
            v10 = v23;
            goto LABEL_23;
          }
        }
        a4 = (uint64_t)v25;
        v30 = a3 == v25;
        v11 = v24;
        v10 = v23;
        if (!v30)
          sub_20C590FF8(a4, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
        v31 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(*(_QWORD *)a4 + v26);
        if (v17 == (unsigned int *)v20 || a5)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=((uint64_t)v31, (uint64_t)&v43);
          a3 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4;
          goto LABEL_37;
        }
        sub_20C590F34(v31, *(_QWORD *)(a4 + 8) - 48);
        v29 = *(_QWORD *)(a4 + 8) - 48;
        sub_20C590D20(v36, v29);
      }
      *(_QWORD *)(a4 + 8) = v29;
      a3 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4;
LABEL_37:
      if ((v48 & 7) != 0)
      {
        v32 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((v47 & 7) != 0)
      {
        v34 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
      sub_20BFD265C(&v45);
      if (v44)
        sub_20C35C614(v44);
      v9 += 32;
    }
    while (v9 != v10);
  }
  v43 = (void **)&v49;
  sub_20C37FA04(&v43);
}

void sub_20C58F4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  unsigned int *v20;
  unsigned int v21;

  if ((a14 & 7) != 0)
  {
    v20 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  sub_20C58DE20((uint64_t)&a18);
  a18 = (void **)(v18 - 104);
  sub_20C37FA04(&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  const char *p_p;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  unsigned int *v20;
  unsigned int v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  unsigned int *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v35;
  unsigned int *v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  int v54;
  int v55;
  uint64_t v56;
  char *v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v67);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)&v62, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v6, v7) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(this, a2, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v57);
    if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v57))
    {
      sub_20C3AD22C((uint64_t)&v62, (uint64_t)&__p);
      v62 = (int)__p;
      v18 = v47;
      v47 = 0;
      v19 = v63;
      v63 = v18;
      if (v19)
        sub_20C35C614(v19);
      sub_20BFD3EBC(&v64, &v48);
      sub_20BFD3F10(&v65, &v49);
      if ((v66 & 7) != 0)
      {
        v20 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      v66 = v50;
      v50 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_20BFD265C(&v48);
      v23 = v47;
      if (v47)
LABEL_33:
        sub_20C35C614(v23);
      while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v62, v22)&& !pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v67, (uint64_t)v52);
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v52))
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v52);
          if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, v24))
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, &v45);
            v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v35)
              v35 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            v36 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
            v37 = *((_QWORD *)v35 + 17) & 0xFFFFFFFFFFFFFFF8;
            if ((v45 & 7) != 0)
            {
              do
                v38 = __ldxr(v36);
              while (__stlxr(v38 - 2, v36));
            }
            if (v36 == (unsigned int *)v37)
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a3, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p);
            }
            else
            {
              *(_DWORD *)a3 = 3;
              *(_QWORD *)(a3 + 8) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
              *(_QWORD *)(a3 + 24) = 0;
              *(_QWORD *)(a3 + 32) = 0;
            }
            if ((v51 & 7) != 0)
            {
              v39 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
              do
                v40 = __ldxr(v39);
              while (__stlxr(v40 - 2, v39));
            }
            if ((v50 & 7) != 0)
            {
              v41 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stlxr(v42 - 2, v41));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
            sub_20BFD265C(&v48);
            if (v47)
              sub_20C35C614(v47);
            if ((v56 & 7) != 0)
            {
              v43 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stlxr(v44 - 2, v43));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
            sub_20BFD265C(&v54);
            if (v53)
              sub_20C35C614(v53);
            goto LABEL_4;
          }
          if ((v51 & 7) != 0)
          {
            v25 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stlxr(v26 - 2, v25));
          }
          if ((v50 & 7) != 0)
          {
            v27 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
            do
              v28 = __ldxr(v27);
            while (__stlxr(v28 - 2, v27));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
          sub_20BFD265C(&v48);
          if (v47)
            sub_20C35C614(v47);
        }
        if ((v56 & 7) != 0)
        {
          v29 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
        sub_20BFD265C(&v54);
        if (v53)
          sub_20C35C614(v53);
        sub_20C3AD22C((uint64_t)&v62, (uint64_t)&__p);
        v62 = (int)__p;
        v31 = v47;
        v47 = 0;
        v32 = v63;
        v63 = v31;
        if (v32)
          sub_20C35C614(v32);
        sub_20BFD3EBC(&v64, &v48);
        sub_20BFD3F10(&v65, &v49);
        if ((v66 & 7) != 0)
        {
          v33 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
          do
            v34 = __ldxr(v33);
          while (__stlxr(v34 - 2, v33));
        }
        v66 = v50;
        v50 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
        sub_20BFD265C(&v48);
        v23 = v47;
        if (v47)
          goto LABEL_33;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a3, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v57);
LABEL_4:
    if ((v61 & 7) != 0)
    {
      v9 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    if ((v60 & 7) != 0)
    {
      v11 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
    sub_20BFD265C(&v59);
    if (v58)
      sub_20C35C614(v58);
  }
  else
  {
    v57 = "usdGeom/primvarsAPI.cpp";
    v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"FindPrimvarWithInheritance";
    v59 = 409;
    v60 = (unint64_t)"UsdGeomPrimvar pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInherita"
                            "nce(const TfToken &) const";
    LOBYTE(v61) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v62, v8);
    if (v49 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarWithInheritance called on invalid prim: %s", p_p);
    if (SHIBYTE(v49) < 0)
      operator delete(__p);
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  if ((v66 & 7) != 0)
  {
    v14 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
  sub_20BFD265C(&v64);
  if (v63)
    sub_20C35C614(v63);
  if ((v67 & 7) != 0)
  {
    v16 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
}

void sub_20C58FAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  if ((a11 & 7) != 0)
  {
    v27 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  sub_20C58DE20((uint64_t)&__p);
  sub_20C372B54((uint64_t)&a21);
  sub_20C58DE20((uint64_t)&a25);
  sub_20C35C2E0(v25 - 104);
  v29 = *(_QWORD *)(v25 - 72);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2@<X1>, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  void **v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v20;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v21;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v22;
  char *v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  char v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v30, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v8, v9) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v23);
    if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v23))
    {
      v21 = *a3;
      v20 = a3[1];
      while (v21 != v20)
      {
        v22 = sub_20C398E78(v21);
        if ((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a4, v21);
          goto LABEL_4;
        }
        v21 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v21 + 48);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a4, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v23);
LABEL_4:
    if ((v27 & 7) != 0)
    {
      v11 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if ((v26 & 7) != 0)
    {
      v13 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_20BFD265C(&v25);
    if (v24)
      sub_20C35C614(v24);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
  }
  else
  {
    v23 = "usdGeom/primvarsAPI.cpp";
    v24 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"FindPrimvarWithInheritance";
    v25 = 445;
    v26 = (unint64_t)"UsdGeomPrimvar pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInherita"
                            "nce(const TfToken &, const std::vector<UsdGeomPrimvar> &) const";
    LOBYTE(v27) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v30, v10);
    if (v29 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarWithInheritance called on invalid prim: %s", (const char *)v17);
    if (v29 < 0)
      operator delete(__p[0]);
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
  }
  if ((v34 & 7) != 0)
  {
    v18 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_20BFD265C(&v32);
  if (v31)
    sub_20C35C614(v31);
}

void sub_20C58FDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t __p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  unsigned int *v23;
  unsigned int v24;

  sub_20C58DE20((uint64_t)&a10);
  if ((__p & 7) != 0)
  {
    v23 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  sub_20C35C2E0(v21 - 64);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  _QWORD *NamespacePrefix;
  void **v8;
  unsigned int *v9;
  unsigned int v10;
  void *__p[2];
  char v12;
  _QWORD v13[4];
  char v14;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v15, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_20C58EF50((pxrInternal__aapl__pxrReserved__::TfToken *)v15, NamespacePrefix, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a2, 1);
  }
  else
  {
    v13[0] = "usdGeom/primvarsAPI.cpp";
    v13[1] = "FindPrimvarsWithInheritance";
    v13[2] = 473;
    v13[3] = "std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWithInheritance() const";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v15, v6);
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarsWithINheritance called on invalid prim: %s", (const char *)v8);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if ((v19 & 7) != 0)
  {
    v9 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
}

void sub_20C58FF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  sub_20C35C2E0(v17 - 48);
  sub_20C591354((void ***)&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWithInheritance(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t IsDefined;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v7;
  _QWORD *NamespacePrefix;
  __int128 v9;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v10;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v11;
  void **v12;
  unsigned int *v13;
  unsigned int v14;
  void *__p[2];
  char v16;
  void **v17[4];
  char v18;
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v24 = 0uLL;
  v25 = 0;
  sub_20C35C4F8((uint64_t)v19, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v19, v5);
  if ((IsDefined & 1) != 0)
  {
    NamespacePrefix = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_20C58F18C((pxrInternal__aapl__pxrReserved__::TfToken *)v19, NamespacePrefix, a2, (uint64_t)&v24, 1);
    v9 = v24;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    if ((_QWORD)v9 == *((_QWORD *)&v9 + 1))
      v10 = *a2;
    else
      v10 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v9;
    if ((_QWORD)v9 == *((_QWORD *)&v9 + 1))
      v11 = a2[1];
    else
      v11 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)*((_QWORD *)&v9 + 1);
    sub_20C5913D8(a3, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4));
  }
  else
  {
    v17[0] = (void **)"usdGeom/primvarsAPI.cpp";
    v17[1] = (void **)"FindPrimvarsWithInheritance";
    v17[2] = (void **)494;
    v17[3] = (void **)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWith"
                      "Inheritance(const std::vector<UsdGeomPrimvar> &) const";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v19, v7);
    if (v16 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarsWithInheritance called on invalid prim: %s", (const char *)v12);
    if (v16 < 0)
      operator delete(__p[0]);
    *(_OWORD *)a3 = v24;
    *((_QWORD *)a3 + 2) = v25;
    v24 = 0uLL;
    v25 = 0;
  }
  if ((v23 & 7) != 0)
  {
    v13 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  v17[0] = (void **)&v24;
  sub_20C591354(v17);
}

void sub_20C590134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  sub_20C35C2E0((uint64_t)&a22);
  a17 = v22 - 48;
  sub_20C591354((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v5;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v6;
  uint64_t IsPrimvar;
  unsigned int *v8;
  unsigned int v9;
  void **v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  void *__p[2];
  char v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v28);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)v23, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4) & 1) == 0)
  {
    v18 = "usdGeom/primvarsAPI.cpp";
    v19 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"HasPrimvar";
    v20 = 517;
    v21 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar(const TfToken &) const";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v23, v5);
    if (v17 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"HasPrimvar called on invalid prim: %s", (const char *)v10);
    if (v17 < 0)
      operator delete(__p[0]);
    goto LABEL_13;
  }
  if (!v28)
  {
LABEL_13:
    IsPrimvar = 0;
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t)&v18);
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v18, v6);
  if ((v21 & 7) != 0)
  {
    v8 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
LABEL_14:
  if ((v27 & 7) != 0)
  {
    v11 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  if ((v28 & 7) != 0)
  {
    v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  return IsPrimvar;
}

void sub_20C590314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;

  sub_20C372B54((uint64_t)&a16);
  sub_20C35C2E0(v16 - 56);
  v18 = *(_QWORD *)(v16 - 24);
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  BOOL v2;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v7;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unsigned int *v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  int v59;
  int v60;
  uint64_t v61;

  v5 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)&v57, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v5, v6) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(this, a2, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v52);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v52))
    {
      v2 = 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v51);
      if (v51)
      {
        sub_20C3AD22C((uint64_t)&v57, (uint64_t)&__p);
        v57 = (int)__p;
        v9 = v40;
        v40 = 0;
        v10 = v58;
        v58 = v9;
        if (v10)
          sub_20C35C614(v10);
        sub_20BFD3EBC(&v59, &v41);
        sub_20BFD3F10(&v60, &v42);
        if ((v61 & 7) != 0)
        {
          v11 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        v61 = v43;
        v43 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v14 = v40;
        if (v40)
LABEL_17:
          sub_20C35C614(v14);
        while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v57, v13)&& !pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v57))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v57, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51, (uint64_t)v46);
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v46)
            && pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v46, v15))
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v46);
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, &v45);
            v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v16)
              v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            v17 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
            v2 = (v45 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 17) & 0xFFFFFFFFFFFFFFF8);
            if ((v45 & 7) != 0)
            {
              do
                v18 = __ldxr(v17);
              while (__stlxr(v18 - 2, v17));
            }
            if ((v44 & 7) != 0)
            {
              v19 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
              do
                v20 = __ldxr(v19);
              while (__stlxr(v20 - 2, v19));
            }
            if ((v43 & 7) != 0)
            {
              v21 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
              do
                v22 = __ldxr(v21);
              while (__stlxr(v22 - 2, v21));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
            sub_20BFD265C(&v41);
            if (v40)
              sub_20C35C614(v40);
            v23 = 0;
          }
          else
          {
            v23 = 1;
          }
          if ((v50 & 7) != 0)
          {
            v24 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
            do
              v25 = __ldxr(v24);
            while (__stlxr(v25 - 2, v24));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
          sub_20BFD265C(&v48);
          if (v47)
            sub_20C35C614(v47);
          if (!v23)
            goto LABEL_50;
          sub_20C3AD22C((uint64_t)&v57, (uint64_t)&__p);
          v57 = (int)__p;
          v26 = v40;
          v40 = 0;
          v27 = v58;
          v58 = v26;
          if (v27)
            sub_20C35C614(v27);
          sub_20BFD3EBC(&v59, &v41);
          sub_20BFD3F10(&v60, &v42);
          if ((v61 & 7) != 0)
          {
            v28 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
            do
              v29 = __ldxr(v28);
            while (__stlxr(v29 - 2, v28));
          }
          v61 = v43;
          v43 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
          sub_20BFD265C(&v41);
          v14 = v40;
          if (v40)
            goto LABEL_17;
        }
        v2 = 0;
LABEL_50:
        if ((v51 & 7) != 0)
        {
          v30 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
      }
      else
      {
        v2 = 0;
      }
    }
    if ((v56 & 7) != 0)
    {
      v32 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((v55 & 7) != 0)
    {
      v34 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
    sub_20BFD265C(&v54);
    if (v53)
      sub_20C35C614(v53);
  }
  else
  {
    v52 = "usdGeom/primvarsAPI.cpp";
    v53 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"HasPossiblyInheritedPrimvar";
    v54 = 532;
    v55 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar(const"
                            " TfToken &) const";
    LOBYTE(v56) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v57, v7);
    if (v42 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v52, 1, (pxrInternal__aapl__pxrReserved__ *)"HasPossiblyInheritedPrimvar called on invalid prim: %s", p_p);
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
    v2 = 0;
  }
  if ((v61 & 7) != 0)
  {
    v36 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
  sub_20BFD265C(&v59);
  if (v58)
    sub_20C35C614(v58);
  return v2;
}

void sub_20C590800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  if ((a20 & 7) != 0)
  {
    v28 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  sub_20C58DE20((uint64_t)&__p);
  sub_20C372B54((uint64_t)&a21);
  if ((a25 & 7) != 0)
  {
    v30 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  sub_20C58DE20((uint64_t)&a26);
  sub_20C35C2E0(v26 - 112);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *NamespacePrefix;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *EmptyString;
  const char *v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v12;
  const char *v13;

  NamespacePrefix = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  v4 = NamespacePrefix;
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v5 = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    NamespacePrefix = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)NamespacePrefix);
    v5 = (unint64_t)NamespacePrefix;
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)NamespacePrefix);
  if (*((char *)EmptyString + 23) >= 0)
    v7 = (const char *)EmptyString;
  else
    v7 = (const char *)*EmptyString;
  v8 = *(char *)(v5 + 23);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  v10 = strlen(v7);
  if (v9 < v10)
    return 0;
  v12 = v10;
  if (v8 >= 0)
    v13 = (const char *)v5;
  else
    v13 = *(const char **)v5;
  return strncmp(v13, v7, v12) == 0;
}

uint64_t *sub_20C59099C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C590A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void **sub_20C590AC0(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE6D0B4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 48 * v6;
    sub_20C590B70(a1, v7);
    return sub_20C590DA4(v7);
  }
  return result;
}

void sub_20C590B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C590DA4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C590B70(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C590BE4((uint64_t)(a1 + 2), a1[1], (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a1[1], *a1, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C590BE4(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v9 - 48);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v7 - 48), v9);
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C590C9C((uint64_t)v12);
  return v10;
}

void sub_20C590C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C590C9C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C590C9C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C590CD0((uint64_t *)a1);
  return a1;
}

void sub_20C590CD0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C590D20(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_20C590D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;

  v3 = *(_QWORD *)(a2 + 32);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v9)
    sub_20C35C614(v9);
}

void **sub_20C590DA4(void **a1)
{
  sub_20C590DD4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C590DD4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_20C590D20(v4, i - 48);
  }
}

uint64_t sub_20C590E18(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE6D0B4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v10[48 * v4];
  v16 = &v10[48 * v9];
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(v14, a2);
  v15 = (char *)v14 + 48;
  sub_20C590B70(a1, &v13);
  v11 = a1[1];
  sub_20C590DA4(&v13);
  return v11;
}

void sub_20C590F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C590DA4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C590F1C()
{
  return 1;
}

uint64_t sub_20C590F24()
{
  return 1;
}

void sub_20C590F34(const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v8, a1);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=((uint64_t)a1, a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a2, (uint64_t)&v8);
  if ((v13 & 7) != 0)
  {
    v4 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
}

void sub_20C590FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C58DE20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C590FF8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v12;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20C591168((void **)a1);
    if (a4 > 0x555555555555555)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    sub_20C02CC00((_QWORD *)a1, v11);
    v12 = sub_20C5911D4(v8, a2, a3, *(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)a2
                                                                   + 16
                                                                   * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    sub_20C5912F8((uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    v12 = sub_20C5911D4(v8, v13, a3, *(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C5912F8((uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_20C590D20(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C591158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C591160(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C591168(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        sub_20C590D20((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *sub_20C5911D4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v4;
  const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v6;
  _QWORD v8[3];
  char v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(v4, v6);
      v6 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v6 + 48);
      v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v11 + 48);
      v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v11 + 48);
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C591274((uint64_t)v8);
  return v4;
}

void sub_20C591260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C591274((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C591274(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C5912A8((uint64_t *)a1);
  return a1;
}

void sub_20C5912A8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      sub_20C590D20(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20C5912F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a3, v4);
      v4 += 48;
      a3 += 48;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_20C591354(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20C590D20((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *sub_20C5913D8(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *result, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, unint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v6;

  if (a4)
  {
    v6 = result;
    sub_20C02CC00(result, a4);
    result = sub_20C5911D4((uint64_t)v6 + 16, a2, a3, *((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20C59143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C591354(&a9);
  _Unwind_Resume(a1);
}

void sub_20C59145C()
{
  void *__p[2];
  char v1;

  sub_20C591AA4();
  sub_20BDDC0E4(__p, "Scope");
  sub_20C591BC4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5914A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::~UsdGeomScope(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CED0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/scope.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdGeomScope pxrInternal__aapl__pxrReserved__::UsdGeomScope::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CED0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C59164C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_254989D78);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254989D78))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254989D70, "Scope");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254989D70, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989D78);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_254989D70, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CED0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdGeom/scope.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdGeomScope pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CED0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C59183C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D78);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989D88);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989D88))
  {
    __cxa_guard_release(&qword_254989D88);
  }
  return &qword_254989D80;
}

void sub_20C5918E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D88);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomScope::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomScope *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989D98);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomScope *)__cxa_guard_acquire(&qword_254989D98);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(v3);
      byte_254989D90 = sub_20C35BD7C((char *)&qword_254989D80, v4, v5);
      __cxa_guard_release(&qword_254989D98);
    }
  }
  return byte_254989D90;
}

void sub_20C59195C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989D98);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(this);
  return &qword_254989D80;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomScope::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_254989DB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989DB8))
  {
    qword_254989DA0 = 0;
    *(_QWORD *)algn_254989DA8 = 0;
    qword_254989DB0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989DA0, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989DB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989DD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989DD8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)1);
    qword_254989DC0 = 0;
    *(_QWORD *)algn_254989DC8 = 0;
    qword_254989DD0 = 0;
    sub_20BFE538C(&qword_254989DC0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989DC0, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989DD8);
  }
  if (v1)
    return &qword_254989DC0;
  else
    return &qword_254989DA0;
}

void sub_20C591A8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989DD8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C591AA4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C591C74((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C591B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C591BC4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C591C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C591C74(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C591CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C591D04()
{
  void *__p[2];
  char v1;

  sub_20C59298C();
  sub_20BDDC0E4(__p, "Sphere");
  sub_20C592AAC((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C591D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::~UsdGeomSphere(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CF28;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/sphere.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdGeomSphere pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CF28;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C591EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_254989DE8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254989DE8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254989DE0, "Sphere");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254989DE0, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989DE8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_254989DE0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CF28;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdGeom/sphere.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdGeomSphere pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CF28;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5920E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989DE8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989DF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989DF8))
  {
    __cxa_guard_release(&qword_254989DF8);
  }
  return &qword_254989DF0;
}

void sub_20C592188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989DF8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989E08);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)__cxa_guard_acquire(&qword_254989E08);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(v3);
      byte_254989E00 = sub_20C35BD7C((char *)&qword_254989DF0, v4, v5);
      __cxa_guard_release(&qword_254989E08);
    }
  }
  return byte_254989E00;
}

void sub_20C592204(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989E08);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(this);
  return &qword_254989DF0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 920), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5922DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 920), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 296), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C592434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::CreateExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 616), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254989E28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989E28))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *((_QWORD *)v5 + 115);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 37);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_254989E10, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989E10, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989E28);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989E48);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989E48))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_20C59274C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989E30, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989E48);
  }
  if (v1)
    return &qword_254989E30;
  else
    return &qword_254989E10;
}

void sub_20C5926C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_254989E28);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C59274C(uint64_t **a1)
{
  qword_254989E38 = 0;
  unk_254989E40 = 0;
  qword_254989E30 = 0;
  sub_20BFC9A6C((char **)&qword_254989E30, ((unk_254989E18 - qword_254989E10) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_254989E30, (_QWORD *)qword_254989E38, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_254989E30, (_QWORD *)qword_254989E38, (uint64_t *)qword_254989E10, unk_254989E18, (unk_254989E18 - qword_254989E10) >> 3);
}

void sub_20C5927E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent(unint64_t *a1, double a2)
{
  uint64_t v4;
  char *v5;
  float *v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  uint64_t v11;
  int v12;
  uint64_t *v13;

  v12 = 0;
  v11 = 0;
  v13 = &v11;
  sub_20BF5AD04(a1, 2uLL, &v13);
  *(float *)&a2 = a2;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v4, v5);
  v6 = (float *)a1[4];
  *v6 = -*(float *)&a2;
  v6[1] = -*(float *)&a2;
  v6[2] = -*(float *)&a2;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = (_DWORD *)a1[4];
  v9[3] = LODWORD(a2);
  v9[4] = LODWORD(a2);
  v9[5] = LODWORD(a2);
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent(const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, unint64_t *a2, double a3)
{
  float32x2_t v6;
  uint64_t v7;
  char *v8;
  float32x2_t *v9;
  float32x2_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v25;

  LODWORD(v20) = 0;
  v19 = 0.0;
  *(_QWORD *)&v15.f64[0] = &v19;
  sub_20BF5AD04(a2, 2uLL, (uint64_t **)&v15);
  v19 = -a3;
  v20 = -a3;
  v21 = -a3;
  v22 = a3;
  v23 = a3;
  v24 = a3;
  pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v19, a1);
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v19, (uint64_t)&v15);
  *(float *)&a3 = v16;
  v6 = vcvt_f32_f64(v15);
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v7, v8);
  v9 = (float32x2_t *)a2[4];
  *v9 = v6;
  v9[1].i32[0] = LODWORD(a3);
  *(float *)&a3 = v18;
  v10 = vcvt_f32_f64(v17);
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v11, v12);
  v13 = a2[4];
  *(float32x2_t *)(v13 + 12) = v10;
  *(_DWORD *)(v13 + 20) = LODWORD(a3);
  return 1;
}

void sub_20C592954(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C592B60;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C59298C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C556F18((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C592A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C592AAC(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C592B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C592B60(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  double v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  void (**v17)(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *__hidden);
  uint64_t v18;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v17, a1);
  v17 = off_24C53CF28;
  if (v18
    && (*(_BYTE *)(v18 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v17) & 1) != 0
    || (v12 = "usdGeom/sphere.cpp",
        v13 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ComputeExtentForSphere",
        v14 = 223,
        v15 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForSphere(const UsdGeomBoundable &,"
                                " const UsdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        v16 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "sphereSchema", 0) & 1) != 0))
  {
    v11 = 0.0;
    pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)&v17, (uint64_t)&v12);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>((uint64_t)&v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v11);
    v7 = v6;
    if ((v15 & 7) != 0)
    {
      v8 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
    if ((v7 & 1) != 0)
    {
      if (a3)
        pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent(a3, a4, v11);
      else
        pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent(a4, v11);
    }
  }
  else
  {
    v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)&v17);
  return v7;
}

void sub_20C592CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)va);
  _Unwind_Resume(a1);
}

void sub_20C592CD8()
{
  void *__p[2];
  char v1;

  sub_20C5995BC();
  sub_20BDDC0E4(__p, "GeomSubset");
  sub_20C5996DC((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C592D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CF80;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/subset.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdGeomSubset pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CF80;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C592EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_254989E58);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254989E58))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254989E50, "GeomSubset");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254989E50, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989E58);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_254989E50, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CF80;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdGeom/subset.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdGeomSubset pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CF80;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5930B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989E58);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989E68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989E68))
  {
    __cxa_guard_release(&qword_254989E68);
  }
  return &qword_254989E60;
}

void sub_20C59315C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989E68);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989E78);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)__cxa_guard_acquire(&qword_254989E78);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v3);
      byte_254989E70 = sub_20C35BD7C((char *)&qword_254989E60, v4, v5);
      __cxa_guard_release(&qword_254989E78);
    }
  }
  return byte_254989E70;
}

void sub_20C5931D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989E78);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(this);
  return &qword_254989E60;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 280), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5932B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateElementTypeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 280), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 464), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C593408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 464), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 352), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C593560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateFamilyNameAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 352), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254989E98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989E98))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *((_QWORD *)v5 + 35);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = *((_QWORD *)v9 + 58);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v13)
      v13 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v14 = *((_QWORD *)v13 + 44);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_254989E80, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989E80, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989E98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989EB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989EB8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C5938F8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989EA0, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989EB8);
  }
  if (v1)
    return &qword_254989EA0;
  else
    return &qword_254989E80;
}

void sub_20C593868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989E98);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5938F8(uint64_t **a1)
{
  qword_254989EA8 = 0;
  unk_254989EB0 = 0;
  qword_254989EA0 = 0;
  sub_20BFC9A6C((char **)&qword_254989EA0, ((unk_254989E88 - qword_254989E80) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_254989EA0, (_QWORD *)qword_254989EA8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_254989EA0, (_QWORD *)qword_254989EA8, (uint64_t *)qword_254989E80, unk_254989E88, (unk_254989E88 - qword_254989E80) >> 3);
}

void sub_20C59398C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateGeomSubset@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4@<X3>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a5@<X4>, const pxrInternal__aapl__pxrReserved__::TfToken *a6@<X5>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a7@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  const pxrInternal__aapl__pxrReserved__::TfToken *v27;
  pxrInternal__aapl__pxrReserved__ *v29;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;

  sub_20C3630C0(a1, &v29);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, a2, &v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
  sub_20BFD265C(&v29);
  sub_20C35C4F8((uint64_t)&v29, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v29, v14, &v34);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(&v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, a7);
  v15 = v35;
  if (v35)
  {
    v16 = (unsigned int *)(v35 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if ((v33 & 7) != 0)
  {
    v19 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(a7, (uint64_t)&v29);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(&v29, a3, NAN);
  if ((v33 & 7) != 0)
  {
    v21 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(a7, (uint64_t)&v29);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(&v29, a4, NAN);
  if ((v33 & 7) != 0)
  {
    v23 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr(a7, (uint64_t)&v29);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(&v29, a5, NAN);
  if ((v33 & 7) != 0)
  {
    v25 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  if (*(_QWORD *)a5 && *(_QWORD *)a6)
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::SetFamilyType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a1, a5, a6, v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
  return sub_20BFD265C(&v36);
}

void sub_20C593C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped *v8;
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(v8);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C593CBC()
{
  JUMPOUT(0x20C593CACLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::SetFamilyType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;

  sub_20C35C4F8((uint64_t)v16, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C595034(a2, (uint64_t)&v15);
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6)
    v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)v16, &v15, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v6 + 88), 0, 1, (uint64_t)&v21);
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v20 & 7) != 0)
  {
    v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  v11 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(&v21, a3, NAN);
  if ((v25 & 7) != 0)
  {
    v12 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  return v11;
}

void sub_20C593E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateUniqueGeomSubset(uint64_t a1@<X0>, _QWORD *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4@<X3>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a5@<X4>, const pxrInternal__aapl__pxrReserved__::TfToken *a6@<X5>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a7@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t *EmptyString;
  __int128 v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  const char *v23;
  char *v24;
  char IsDefined;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  const pxrInternal__aapl__pxrReserved__::TfToken *v41;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v44;
  int v45;
  int v46;
  char v47[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  __int128 __dst;
  uint64_t v64;

  sub_20C35C4F8((uint64_t)v47, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v47, v12, &v52);
  v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C3630C0(a1, &v45);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v15 = *(_OWORD *)EmptyString;
    v64 = EmptyString[2];
    __dst = v15;
  }
  v44 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a1;
  v16 = a5;
  v17 = a3;
  v18 = 0;
  do
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v56, &v61);
    if ((v56 & 7) != 0)
    {
      v19 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    v21 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v52);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61, (uint64_t)&v56);
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v56, v22);
    if ((IsDefined & 1) != 0)
    {
      ++v18;
      if (*((char *)EmptyString + 23) >= 0)
        v26 = EmptyString;
      else
        v26 = (void *)*EmptyString;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%zu", v23, v24, v26, v18);
      if (SHIBYTE(v64) < 0)
        operator delete((void *)__dst);
      __dst = v54;
      v64 = v55;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(&v52, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61, a7);
    }
    if ((v60 & 7) != 0)
    {
      v27 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if (v57)
      sub_20C35C614(v57);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
    sub_20BFD265C(&v61);
  }
  while ((IsDefined & 1) != 0);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__dst);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
  sub_20BFD265C(&v45);
  v29 = v53;
  if (v53)
  {
    v30 = (unsigned int *)(v53 + 8);
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  if ((v51 & 7) != 0)
  {
    v33 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
  sub_20BFD265C(&v49);
  if (v48)
    sub_20C35C614(v48);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(a7, (uint64_t)&v56);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v56, v17, NAN);
  if ((v60 & 7) != 0)
  {
    v35 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
  sub_20BFD265C(&v58);
  if (v57)
    sub_20C35C614(v57);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(a7, (uint64_t)&v56);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__ **)&v56, a4, NAN);
  if ((v60 & 7) != 0)
  {
    v37 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
  sub_20BFD265C(&v58);
  if (v57)
    sub_20C35C614(v57);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr(a7, (uint64_t)&v56);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v56, v16, NAN);
  if ((v60 & 7) != 0)
  {
    v39 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
  sub_20BFD265C(&v58);
  if (v57)
    sub_20C35C614(v57);
  if (*(_QWORD *)v16)
  {
    if (*(_QWORD *)a6)
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::SetFamilyType(v44, v16, a6, v41);
  }
}

void sub_20C59422C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(v1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v9;
  const pxrInternal__aapl__pxrReserved__::TfType *v10;
  uint64_t *SchemaInfo;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20C35C4F8((uint64_t)&v25, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C594668(&v18);
  v4 = v18.n128_u64[1];
  v5 = v18.n128_u64[0];
  v6 = v19;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v21 = v5;
  v22 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v4;
  *(_QWORD *)&v23 = v6;
  sub_20C3ADEFC((uint64_t)&v25, (uint64_t *)&v21, (uint64_t)&v29);
  if ((BYTE8(v27) & 7) != 0)
  {
    v7 = (unsigned int *)(*((_QWORD *)&v27 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  v25 = v29;
  sub_20BFD6E54(&v26, &v30);
  sub_20BFD6EA4((_DWORD *)&v26 + 1, &v31);
  v27 = v32;
  v28 = v33;
  v21 = v34;
  sub_20BFD6E54(&v22, &v35);
  sub_20BFD6EA4((_DWORD *)&v22 + 1, &v36);
  v23 = v37;
  v24 = v38;
  while (v25 != v21 || v26 != v22 || !sub_20C39FA44((uint64_t)&v27, (uint64_t)&v23))
  {
    sub_20C3ADDEC((uint64_t)&v25, (uint64_t)&v18);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v9);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254989E60, v10);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v18, SchemaInfo, v12))
    {
      v13 = *(_QWORD **)(a2 + 8);
      if ((unint64_t)v13 >= *(_QWORD *)(a2 + 16))
      {
        v14 = sub_20C599BC4((uint64_t *)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(*(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a2 + 8), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
        *v13 = off_24C53CF80;
        v14 = (uint64_t)(v13 + 3);
        *(_QWORD *)(a2 + 8) = v14;
      }
      *(_QWORD *)(a2 + 8) = v14;
    }
    if ((v20 & 7) != 0)
    {
      v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_20BFD265C(&v19);
    if (v18.n128_u64[1])
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18.n128_u64[1]);
    sub_20C3ADE64((uint64_t)&v25);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
  sub_20BFD265C(&v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_20BFD265C(&v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  return sub_20BFD265C(&v30);
}

void sub_20C5945FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20C599B38((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C594668@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __n128 *v8;
  __n128 result;
  __int128 v10;
  char v11;

  v10 = 0uLL;
  v11 = 0;
  v2 = sub_20C3C103C((uint64_t)&v10, 0);
  v3 = *(_QWORD *)(v2 + 16);
  v10 = *(_OWORD *)v2;
  v11 = v3;
  v4 = sub_20C3C103C((uint64_t)&v10, 7);
  v5 = *(_QWORD *)(v4 + 16);
  v10 = *(_OWORD *)v4;
  v11 = v5;
  v6 = sub_20C3C103C((uint64_t)&v10, 1);
  v7 = *(_QWORD *)(v6 + 16);
  v10 = *(_OWORD *)v6;
  v11 = v7;
  v8 = (__n128 *)sub_20C3C103C((uint64_t)&v10, 0x100000005);
  result = *v8;
  *a1 = *v8;
  a1[1].n128_u64[0] = v8[1].n128_u64[0];
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v12;
  const pxrInternal__aapl__pxrReserved__::TfType *v13;
  uint64_t *SchemaInfo;
  char *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  __int128 v57;
  uint64_t v58;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_20C35C4F8((uint64_t)&v45, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C594668(&v38);
  v7 = v38.n128_u64[1];
  v8 = v38.n128_u64[0];
  v9 = v39;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v47)
    && ((v8 & 0x2000) != 0 || (v7 & 0x2000) == 0))
  {
    v8 |= 0x2000uLL;
    v7 &= ~0x2000uLL;
  }
  v41 = v8;
  v42 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v7;
  *(_QWORD *)&v43 = v9;
  sub_20C3ADEFC((uint64_t)&v45, (uint64_t *)&v41, (uint64_t)&v49);
  if ((BYTE8(v47) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v47 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_20BFD265C(&v47);
  if (v46)
    sub_20C35C614(v46);
  v45 = v49;
  sub_20BFD6E54(&v46, &v50);
  sub_20BFD6EA4((_DWORD *)&v46 + 1, &v51);
  v47 = v52;
  v48 = v53;
  v41 = v54;
  sub_20BFD6E54(&v42, &v55);
  sub_20BFD6EA4((_DWORD *)&v42 + 1, &v56);
  v43 = v57;
  v44 = v58;
  while (v45 != v41 || v46 != v42 || !sub_20C39FA44((uint64_t)&v47, (uint64_t)&v43))
  {
    sub_20C3ADDEC((uint64_t)&v45, (uint64_t)&v38);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v12);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254989E60, v13);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v38, SchemaInfo, v15))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v37, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38);
      v36 = 0;
      v37[0] = off_24C53CF80;
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v37, (uint64_t)v30);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v30, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v36);
      if ((v34 & 7) != 0)
      {
        v16 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_20BFD265C(&v32);
      if (v31)
        sub_20C35C614(v31);
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v37, (uint64_t)v30);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v30, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v35);
      if ((v34 & 7) != 0)
      {
        v18 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_20BFD265C(&v32);
      if (v31)
        sub_20C35C614(v31);
      if ((!*(_QWORD *)a2 || (v36 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
        && (!*(_QWORD *)a3 || (v35 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8)))
      {
        v20 = *(_QWORD **)(a4 + 8);
        if ((unint64_t)v20 >= *(_QWORD *)(a4 + 16))
        {
          v21 = sub_20C599BC4((uint64_t *)a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(*(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a4 + 8), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38);
          *v20 = off_24C53CF80;
          v21 = (uint64_t)(v20 + 3);
          *(_QWORD *)(a4 + 8) = v21;
        }
        *(_QWORD *)(a4 + 8) = v21;
      }
      if ((v35 & 7) != 0)
      {
        v22 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((v36 & 7) != 0)
      {
        v24 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v37);
    }
    if ((v40 & 7) != 0)
    {
      v26 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_20BFD265C(&v39);
    if (v38.n128_u64[1])
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v38.n128_u64[1]);
    sub_20C3ADE64((uint64_t)&v45);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
  sub_20BFD265C(&v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
  sub_20BFD265C(&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
  return sub_20BFD265C(&v50);
}

void sub_20C594B58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = v1;
  sub_20C599B38((void ***)(v2 - 208));
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsetFamilyNames@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v9;
  const pxrInternal__aapl__pxrReserved__::TfType *v10;
  uint64_t *SchemaInfo;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE v21[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  __int128 v47;
  uint64_t v48;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  sub_20C35C4F8((uint64_t)&v35, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C594668(&v28);
  v4 = v28.n128_u64[1];
  v5 = v28.n128_u64[0];
  v6 = v29;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v37)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v31 = v5;
  v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v4;
  *(_QWORD *)&v33 = v6;
  sub_20C3ADEFC((uint64_t)&v35, (uint64_t *)&v31, (uint64_t)&v39);
  if ((BYTE8(v37) & 7) != 0)
  {
    v7 = (unsigned int *)(*((_QWORD *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
  sub_20BFD265C(&v37);
  if (v36)
    sub_20C35C614(v36);
  v35 = v39;
  sub_20BFD6E54(&v36, &v40);
  sub_20BFD6EA4((_DWORD *)&v36 + 1, &v41);
  v37 = v42;
  v38 = v43;
  v31 = v44;
  sub_20BFD6E54(&v32, &v45);
  sub_20BFD6EA4((_DWORD *)&v32 + 1, &v46);
  v33 = v47;
  v34 = v48;
  while (v35 != v31 || v36 != v32 || !sub_20C39FA44((uint64_t)&v37, (uint64_t)&v33))
  {
    sub_20C3ADDEC((uint64_t)&v35, (uint64_t)&v28);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v9);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254989E60, v10);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v28, SchemaInfo, v12))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v27, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v28);
      v26 = 0;
      v27[0] = off_24C53CF80;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v27, (uint64_t)v21);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v26);
      if ((v25 & 7) != 0)
      {
        v13 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
      sub_20BFD265C(&v23);
      if (v22)
        sub_20C35C614(v22);
      v15 = v26;
      if (v26)
      {
        sub_20C129930((uint64_t)a2, &v26, &v26);
        v15 = v26;
      }
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v27);
    }
    if ((v30 & 7) != 0)
    {
      v18 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
    sub_20BFD265C(&v29);
    if (v28.n128_u64[1])
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v28.n128_u64[1]);
    sub_20C3ADE64((uint64_t)&v35);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
  sub_20BFD265C(&v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
  sub_20BFD265C(&v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  return sub_20BFD265C(&v40);
}

void sub_20C594F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2B200(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20C595034(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  char *EmptyString;
  __int128 v6;
  uint64_t *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t i;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string __p;
  std::string **v17;
  char v18;
  __int128 __dst;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;

  *(_QWORD *)&v25 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C599790();
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (char *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  if (EmptyString[23] < 0)
  {
    EmptyString = (char *)sub_20BDDBFAC(&__dst, *(void **)EmptyString, *((_QWORD *)EmptyString + 1));
  }
  else
  {
    v6 = *(_OWORD *)EmptyString;
    v20 = *((_QWORD *)EmptyString + 2);
    __dst = v6;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    v7 = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
  if (*((char *)v7 + 23) < 0)
  {
    sub_20BDDBFAC(&v21, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v22 = v7[2];
    v21 = v8;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C599790();
  if ((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = (uint64_t *)((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  if (*((char *)v10 + 23) < 0)
  {
    sub_20BDDBFAC(&v23, (void *)*v10, v10[1]);
  }
  else
  {
    v11 = *(_OWORD *)v10;
    v24 = v10[2];
    v23 = v11;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v17 = &v13;
  v18 = 0;
  v13 = (std::string *)operator new(0x48uLL);
  v14 = v13;
  v15 = v13 + 3;
  v14 = (std::string *)sub_20BFB76A8((uint64_t)&v15, &__dst, &v25, (char *)v13);
  pxrInternal__aapl__pxrReserved__::TfStringJoin(":", &v13, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = &v13;
  sub_20BDE5038((void ***)&v17);
  for (i = 0; i != -72; i -= 24)
  {
    if (*((char *)&v24 + i + 7) < 0)
      operator delete(*(void **)((char *)&v23 + i));
  }
}

void sub_20C595218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;

  sub_20C35C4F8((uint64_t)&v19, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C595034(a2, (uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18, (uint64_t)v24);
  if ((v18 & 7) != 0)
  {
    v6 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v23 & 7) != 0)
  {
    v8 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v24, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v19);
  v10 = v19;
  if (!v19)
  {
    v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v11)
      v11 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (unsigned int *)*((_QWORD *)v11 + 146);
  }
  *a3 = v10;
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *a3 = v12;
  }
  if ((v19 & 7) != 0)
  {
    v14 = (unsigned int *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if ((v28 & 7) != 0)
  {
    v16 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
}

void sub_20C595440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetEdges(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  signed int v12;
  unsigned int v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(a1, (uint64_t)&v14);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&v14, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19);
  if ((v18 & 7) != 0)
  {
    v3 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  sub_20C595620((unint64_t *)a2, *(_QWORD *)&v19[0] >> 1);
  if (*(_QWORD *)&v19[0] >= 2uLL)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19, v5, v6);
      v9 = *(_DWORD *)(v20 + v7);
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19, v10, v11);
      v12 = *(_DWORD *)(v20 + v7 + 4);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = *(_DWORD *)(v20 + v7 + 4);
      if (v9 > v12)
        v12 = v9;
      v14 = __PAIR64__(v12, v13);
      sub_20C5956B8(a2, &v14);
      ++v8;
      v7 += 8;
    }
    while (v8 < *(_QWORD *)&v19[0] >> 1);
  }
  sub_20BF5618C((uint64_t)v19);
}

void sub_20C5955D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C(v5);
  _Unwind_Resume(a1);
}

void sub_20C595620(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20C00FB80((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20C00FB80((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        v6[i] = *(_QWORD *)(v3 + i * 8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20C5956B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(uint64_t **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20C00FB80(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 8 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2i, Args = <pxrInternal__aapl__pxrReserved__::GfVec2i>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t *v23;
  uint64_t i;
  uint64_t v25;
  char *v26;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _BOOL4 v45;
  uint64_t *v46;
  uint64_t *v47;
  _BOOL4 v48;
  _BOOL4 v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  void **v53;
  void **v54;
  uint64_t v55;
  char *v56;
  void *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD **v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *__src;
  void **v73;
  uint64_t v74;
  void *v75;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v76;
  int v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  void *__p[2];
  __int128 v82;
  int *v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v87;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v88;
  uint64_t v89;
  _QWORD **v90;
  uint64_t *v91;

  *(_QWORD *)(a5 + 32) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  if ((sub_20C595F20((uint64_t)this, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets(this, a2, a3, (uint64_t)&v87);
    v11 = sub_20C596228((uint64_t)this, a2, 0, *(double *)a4);
    v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v12)
      v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 31) & 0xFFFFFFFFFFFFFFF8))
    {
      v85 = 0;
      v86 = 0;
      v84 = (uint64_t *)&v85;
      if (sub_20C596B50((uint64_t)this, (uint64_t)a4, &v84))
      {
        v83 = 0;
        *(_OWORD *)__p = 0u;
        v82 = 0u;
        v27 = v87;
        v28 = v88;
        while (v27 != v28)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetEdges(v27, (uint64_t)&v75);
          sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v75, v29, v30);
          v31 = v80;
          sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v75, v32, v33);
          v34 = &v80[(_QWORD)v75];
          while (v31 != v34)
            sub_20C59A370((uint64_t)__p, v31++);
          sub_20BF5618C((uint64_t)&v75);
          v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v27 + 24);
        }
        __src = 0;
        v73 = 0;
        v74 = 0;
        v35 = v84;
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v25, v26);
        v36 = v83;
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v37, v38);
        v39 = 0;
        if (v35 == (uint64_t *)&v85)
        {
LABEL_53:
          v35 = (uint64_t *)&v85;
        }
        else
        {
          v40 = &v83[2 * (uint64_t)__p[0]];
          while (v36 != v40)
          {
            v41 = *((_DWORD *)v35 + 7);
            v42 = *((_DWORD *)v35 + 8);
            v43 = *v36;
            v44 = v36[1];
            v45 = v42 < v44;
            if (v41 != *v36)
              v45 = v41 < *v36;
            if (v45)
            {
              v39 = sub_20C59A4D4((uint64_t)&__src, v39, (char *)v35 + 28) + 8;
              v46 = (uint64_t *)v35[1];
              if (v46)
              {
                do
                {
                  v35 = v46;
                  v46 = (uint64_t *)*v46;
                }
                while (v46);
              }
              else
              {
                do
                {
                  v47 = v35;
                  v35 = (uint64_t *)v35[2];
                }
                while ((uint64_t *)*v35 != v47);
              }
            }
            else
            {
              v48 = v44 < v42;
              if (v41 == v43)
                v49 = v48;
              else
                v49 = v43 < v41;
              if (v49)
              {
                v36 += 2;
              }
              else
              {
                v50 = (uint64_t *)v35[1];
                if (v50)
                {
                  do
                  {
                    v51 = v50;
                    v50 = (uint64_t *)*v50;
                  }
                  while (v50);
                }
                else
                {
                  do
                  {
                    v51 = (uint64_t *)v35[2];
                    v52 = *v51 == (_QWORD)v35;
                    v35 = v51;
                  }
                  while (!v52);
                }
                v36 += 2;
                v35 = v51;
              }
            }
            if (v35 == (uint64_t *)&v85)
              goto LABEL_53;
          }
        }
        sub_20C59A714(v39, (char *)v35, (char *)&v85, (uint64_t)&__src, (char **)&v75);
        sub_20C596AB8((unint64_t *)a5, v11);
        v53 = (void **)__src;
        v54 = v73;
        if (__src != v73)
        {
          do
          {
            v75 = *v53;
            sub_20C59A7A4(a5, &v75);
            sub_20C59A7A4(a5, (_DWORD *)&v75 + 1);
            ++v53;
          }
          while (v53 != v54);
          v53 = (void **)__src;
        }
        if (v53)
        {
          v73 = v53;
          operator delete(v53);
        }
        sub_20BF5618C((uint64_t)__p);
      }
      sub_20C599E48(v85);
    }
    else
    {
      v85 = 0;
      v86 = 0;
      v84 = (uint64_t *)&v85;
      v13 = v87;
      v14 = v88;
      if (v87 != v88)
      {
        do
        {
          v83 = 0;
          *(_OWORD *)__p = 0u;
          v82 = 0u;
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v13, (uint64_t)&v75);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&v75, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
          if ((v79 & 7) != 0)
          {
            v15 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
          sub_20BFD265C(&v77);
          if (v76)
            sub_20C35C614(v76);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v17, v18);
          v19 = v83;
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v20, v21);
          v22 = &v83[(uint64_t)__p[0]];
          while (v19 != v22)
          {
            sub_20C599E80(&v84, (uint64_t *)&v85, v19, v19);
            ++v19;
          }
          sub_20BF5618C((uint64_t)__p);
          v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v13 + 24);
        }
        while (v13 != v14);
        while (v86)
        {
          v23 = v84;
          if ((*((_DWORD *)v84 + 7) & 0x80000000) == 0)
          {
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v82 = 0;
            sub_20BE857FC(__p, v11);
            if (v11)
            {
              v55 = 0;
              v56 = (char *)__p[1];
              do
              {
                if ((unint64_t)v56 >= (unint64_t)v82)
                {
                  v58 = (char *)__p[0];
                  v59 = (v56 - (char *)__p[0]) >> 2;
                  v60 = v59 + 1;
                  if ((unint64_t)(v59 + 1) >> 62)
                    sub_20BDDF694();
                  v61 = v82 - (unint64_t)__p[0];
                  if ((uint64_t)(v82 - (unint64_t)__p[0]) >> 1 > v60)
                    v60 = v61 >> 1;
                  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                    v62 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v62 = v60;
                  if (v62)
                  {
                    v63 = (char *)sub_20BDE1330((uint64_t)&v82, v62);
                    v58 = (char *)__p[0];
                    v56 = (char *)__p[1];
                  }
                  else
                  {
                    v63 = 0;
                  }
                  v64 = &v63[4 * v59];
                  *(_DWORD *)v64 = v55;
                  v57 = v64 + 4;
                  while (v56 != v58)
                  {
                    v65 = *((_DWORD *)v56 - 1);
                    v56 -= 4;
                    *((_DWORD *)v64 - 1) = v65;
                    v64 -= 4;
                  }
                  __p[0] = v64;
                  __p[1] = v57;
                  *(_QWORD *)&v82 = &v63[4 * v62];
                  if (v58)
                    operator delete(v58);
                }
                else
                {
                  *(_DWORD *)v56 = v55;
                  v57 = v56 + 4;
                }
                __p[1] = v57;
                ++v55;
                v56 = (char *)v57;
              }
              while (v55 != v11);
            }
            v66 = v85;
            if (v85)
            {
              do
              {
                v67 = v66;
                v66 = (_QWORD *)v66[1];
              }
              while (v66);
            }
            else
            {
              v68 = &v85;
              do
              {
                v67 = v68[2];
                v52 = *v67 == (_QWORD)v68;
                v68 = (_QWORD **)v67;
              }
              while (v52);
            }
            v69 = *((unsigned int *)v67 + 7);
            if (v11 <= v69)
            {
              v70 = (v69 + 1) - v86;
              if (v70 >= v11)
                v71 = v11;
              else
                v71 = v70;
              sub_20C596AB8((unint64_t *)a5, v71);
            }
            else
            {
              sub_20C596AB8((unint64_t *)a5, v11 - v86);
            }
            v75 = __p[0];
            __src = __p[1];
            v90 = &v85;
            v91 = v84;
            v89 = a5;
            sub_20C59A210((_DWORD **)&v75, &__src, &v91, &v90, &v89);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_22;
          }
          sub_20BE10B80(&v84, v84);
          operator delete(v23);
        }
      }
      sub_20C596AB8((unint64_t *)a5, v11);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          LODWORD(__p[0]) = i;
          sub_20C59A0AC(a5, __p);
        }
      }
LABEL_22:
      sub_20BE6100C((uint64_t)&v84, v85);
    }
    __p[0] = &v87;
    sub_20C599B38((void ***)__p);
  }
}

void sub_20C595E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (__p)
  {
    a18 = __p;
    operator delete(__p);
  }
  sub_20BE6100C((uint64_t)&a22, a23);
  __p = &a25;
  sub_20C599B38((void ***)&__p);
  sub_20BF5618C(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_20C595F20(uint64_t a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v3;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  uint64_t *SchemaInfo;
  char *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v11;
  unint64_t v12;
  const char *v13;
  uint64_t *v14;
  const pxrInternal__aapl__pxrReserved__::TfType *v15;
  uint64_t *v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  unsigned int *v25;
  unsigned int v26;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  _BYTE v33[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  int v35;
  int v36;
  uint64_t v37;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)sub_20C35C4F8((uint64_t)v33, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v3);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v5);
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v33, SchemaInfo, v7);
  if (!(_DWORD)IsA)
  {
    v14 = pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(IsA);
    v16 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v14, v15);
    if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v33, v16, v17))
    {
      v28 = "usdGeom/subset.cpp";
      v29 = "_ValidateGeomType";
      v30 = 554;
      v31 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateGeomType(const UsdGeomImageable &, const TfToken &)";
      v32 = 0;
      v23 = *a2 & 0xFFFFFFFFFFFFFFF8;
      if (v23)
      {
        v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0)
          v24 = *(const char **)v24;
      }
      else
      {
        v24 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported prim type '%s'.", v24);
      goto LABEL_34;
    }
    v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v18)
      v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v18 + 39) & 0xFFFFFFFFFFFFFFF8))
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v19)
        v19 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v20 = *a2 & 0xFFFFFFFFFFFFFFF8;
      if (v20 != (*((_QWORD *)v19 + 132) & 0xFFFFFFFFFFFFFFF8))
      {
        v28 = "usdGeom/subset.cpp";
        v29 = "_ValidateGeomType";
        v30 = 549;
        v31 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateGeomType(const UsdGeomImageable &, const TfToken &)";
        v32 = 0;
        if (v20)
        {
          v21 = (const char *)(v20 + 16);
          if (*(char *)(v20 + 39) < 0)
            v21 = *(const char **)v21;
        }
        else
        {
          v21 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported element type '%s' for prim type TetMesh.", v21);
        goto LABEL_34;
      }
    }
LABEL_24:
    v22 = 1;
    goto LABEL_35;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 39) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_24;
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10)
    v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 101) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_24;
  v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11)
    v11 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v12 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v12 == (*((_QWORD *)v11 + 31) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_24;
  v28 = "usdGeom/subset.cpp";
  v29 = "_ValidateGeomType";
  v30 = 543;
  v31 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateGeomType(const UsdGeomImageable &, const TfToken &)";
  v32 = 0;
  if (v12)
  {
    v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0)
      v13 = *(const char **)v13;
  }
  else
  {
    v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported element type '%s' for prim type Mesh.", v13);
LABEL_34:
  v22 = 0;
LABEL_35:
  if ((v37 & 7) != 0)
  {
    v25 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  if (v34)
    sub_20C35C614(v34);
  return v22;
}

void sub_20C596204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C596228(uint64_t a1, _QWORD *a2, BOOL *a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  unint64_t v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v13;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v15;
  uint64_t *SchemaInfo;
  char *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  unsigned int *v25;
  unsigned int v26;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  uint64_t *v30;
  const pxrInternal__aapl__pxrReserved__::TfType *v31;
  uint64_t *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v34;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  uint64_t *v38;
  _DWORD *v39;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v40;
  unsigned int *v41;
  unsigned int v42;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v43;
  unsigned int *v44;
  unsigned int v45;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  int v49;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v50;
  BOOL v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v56;
  unsigned int *v57;
  unsigned int v58;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v80;
  int v81;
  int v82;
  uint64_t v83;
  _BYTE v84[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v85;
  int v86;
  int v87;
  uint64_t v88;
  double v89;

  v89 = a4;
  if (a3)
    *a3 = 0;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)sub_20C35C4F8((uint64_t)v84, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v13);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v15);
    IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v84, SchemaInfo, v17);
    if ((_DWORD)IsA)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v19)
        v19 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v84, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v19 + 336), (uint64_t)v79);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v79, v20))
      {
        v78 = 0;
        v76 = 0u;
        v77 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v79, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v76);
        if (v22)
          v23 = v76;
        else
          v23 = 0;
        if (a3)
          *a3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v79, v21);
        sub_20BF5618C((uint64_t)&v76);
      }
      else
      {
        v23 = 0;
      }
      if ((v83 & 7) != 0)
      {
        v54 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
    }
    else
    {
      v30 = pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(IsA);
      v32 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v30, v31);
      if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v84, v32, v33))
      {
        v23 = 0;
LABEL_107:
        if ((v88 & 7) != 0)
        {
          v64 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
          do
            v65 = __ldxr(v64);
          while (__stlxr(v65 - 2, v64));
        }
        goto LABEL_110;
      }
      v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v34)
        v34 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v84, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v34 + 1040), (uint64_t)v79);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v79, v35))
      {
        v78 = 0;
        v76 = 0u;
        v77 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>((uint64_t)v79, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v76);
        if (v37)
          v23 = v76;
        else
          v23 = 0;
        if (a3)
          *a3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v79, v36);
        sub_20BF5618C((uint64_t)&v76);
      }
      else
      {
        v23 = 0;
      }
      if ((v83 & 7) != 0)
      {
        v62 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_20BFD265C(&v81);
    if (v80)
      sub_20C35C614(v80);
    goto LABEL_107;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 101) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_20C35C4F8((uint64_t)&v76, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v24)
      v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v76, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 816), (uint64_t)v84);
    if ((BYTE8(v77) & 7) != 0)
    {
      v25 = (unsigned int *)(*((_QWORD *)&v77 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v77 + 1);
    sub_20BFD265C(&v77);
    if (*((_QWORD *)&v76 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v76 + 1));
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v84, v27))
    {
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)v84, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v76);
      if (v29)
        v23 = v76;
      else
        v23 = 0;
      if (a3)
        *a3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v84, v28);
      sub_20BF5618C((uint64_t)&v76);
    }
    else
    {
      v23 = 0;
    }
    if ((v88 & 7) != 0)
    {
      v52 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
LABEL_110:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v87);
    sub_20BFD265C(&v86);
    if (v85)
      sub_20C35C614(v85);
    return v23;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v9 + 31) & 0xFFFFFFFFFFFFFFF8))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10)
      v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v11 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v11 != (*((_QWORD *)v10 + 132) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_QWORD *)&v76 = "usdGeom/subset.cpp";
      *((_QWORD *)&v76 + 1) = "_GetElementCountAtTime";
      *(_QWORD *)&v77 = 531;
      *((_QWORD *)&v77 + 1) = "size_t pxrInternal__aapl__pxrReserved__::_GetElementCountAtTime(const UsdGeomImageable &, "
                              "const TfToken &, UsdTimeCode, BOOL *)";
      LOBYTE(v78) = 0;
      if (v11)
      {
        v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v12 = *(const char **)v12;
      }
      else
      {
        v12 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v76, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported element type '%s'.", v12);
      return 0;
    }
    sub_20C35C4F8((uint64_t)&v76, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    v56 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v56)
      v56 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v76, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v56 + 1064), (uint64_t)v84);
    if ((BYTE8(v77) & 7) != 0)
    {
      v57 = (unsigned int *)(*((_QWORD *)&v77 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v77 + 1);
    sub_20BFD265C(&v77);
    if (*((_QWORD *)&v76 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v76 + 1));
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v84, v59))
    {
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>((uint64_t)v84, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v76);
      if (v61)
        v23 = v76;
      else
        v23 = 0;
      if (a3)
        *a3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v84, v60);
      sub_20BF5618C((uint64_t)&v76);
    }
    else
    {
      v23 = 0;
    }
    if ((v88 & 7) != 0)
    {
      v66 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    goto LABEL_110;
  }
  v74 = 0;
  v75 = 0;
  v73 = (uint64_t *)&v74;
  if (sub_20C596B50(a1, (uint64_t)&v89, &v73))
  {
    v23 = v75;
    v38 = (uint64_t *)(a1 + 8);
    v39 = (_DWORD *)(a1 + 16);
    sub_20C35C4F8((uint64_t)v84, v38, v39);
    v40 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v40)
      v40 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v84, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v40 + 336), (uint64_t)&v76);
    if ((v88 & 7) != 0)
    {
      v41 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v87);
    sub_20BFD265C(&v86);
    if (v85)
      sub_20C35C614(v85);
    sub_20C35C4F8((uint64_t)v79, v38, v39);
    v43 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v43)
      v43 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v79, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v43 + 344), (uint64_t)v84);
    if ((v83 & 7) != 0)
    {
      v44 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_20BFD265C(&v81);
    if (v80)
      sub_20C35C614(v80);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v76, v46))
    {
      v49 = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v84, v47) ^ 1;
      if (!a3)
        LOBYTE(v49) = 1;
      if ((v49 & 1) == 0)
      {
        v51 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v76, v48)|| pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v84, v50);
        *a3 = v51;
      }
    }
    if ((v88 & 7) != 0)
    {
      v68 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v87);
    sub_20BFD265C(&v86);
    if (v85)
      sub_20C35C614(v85);
    if ((BYTE8(v77) & 7) != 0)
    {
      v70 = (unsigned int *)(*((_QWORD *)&v77 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stlxr(v71 - 2, v70));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v77 + 1);
    sub_20BFD265C(&v77);
    if (*((_QWORD *)&v76 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v76 + 1));
  }
  else
  {
    v23 = 0;
  }
  sub_20C599E48(v74);
  return v23;
}

void sub_20C59698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va1);
  sub_20C372B54((uint64_t)va);
  sub_20C599E48(a4);
  _Unwind_Resume(a1);
}

void sub_20C596AB8(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20BF64F28((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20BF64F28((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t sub_20C596B50(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  _DWORD *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unsigned int *v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  uint64_t v15;
  char *v16;
  char v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  int v44;
  int v45;
  _OWORD v46[2];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  int *v50;
  char v51[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  int v53;
  int v54;
  uint64_t v55;
  char v56[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  int v58;
  int v59;
  uint64_t v60;

  v4 = (uint64_t *)(a1 + 8);
  v5 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)&v48, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6)
    v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v48, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 336), (uint64_t)v56);
  if ((BYTE8(v49) & 7) != 0)
  {
    v7 = (unsigned int *)(*((_QWORD *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  if (*((_QWORD *)&v48 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v48 + 1));
  sub_20C35C4F8((uint64_t)&v48, v4, v5);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v48, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 344), (uint64_t)v51);
  if ((BYTE8(v49) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  if (*((_QWORD *)&v48 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v48 + 1));
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v56, v12)&& (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v51, v13) & 1) != 0)
  {
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v47 = 0;
    memset(v46, 0, sizeof(v46));
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v56, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v48);
    if (v14
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v51, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v46), (v17 & 1) != 0))
    {
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48, v15, v16);
      v18 = v50;
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48, v19, v20);
      v23 = &v50[v48];
      if (v18 != v23)
      {
        v24 = 0;
        do
        {
          v25 = *v18 - 1;
          if (*v18 >= 2)
          {
            v26 = 4 * v24;
            v27 = *v18 - 1;
            do
            {
              sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v21, v22);
              v28 = *(_DWORD *)(v47 + v26);
              sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v29, v30);
              v31 = *(_DWORD *)(v47 + v26 + 4);
              if (v31 >= v28)
                v32 = v28;
              else
                v32 = *(_DWORD *)(v47 + v26 + 4);
              if (v28 > v31)
                v31 = v28;
              v44 = v32;
              v45 = v31;
              sub_20C599A3C(a3, &v44);
              v26 += 4;
              ++v24;
              --v27;
            }
            while (v27);
          }
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v21, v22);
          v33 = *(_DWORD *)(v47 + 4 * v24);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v34, v35);
          v36 = *(_DWORD *)(v47 + 4 * (v24 - v25));
          if (v36 >= v33)
            v37 = v33;
          else
            v37 = *(_DWORD *)(v47 + 4 * (v24 - v25));
          if (v33 > v36)
            v36 = v33;
          v44 = v37;
          v45 = v36;
          sub_20C599A3C(a3, &v44);
          ++v24;
          ++v18;
        }
        while (v18 != v23);
      }
      v38 = 1;
    }
    else
    {
      v38 = 0;
    }
    sub_20BF5618C((uint64_t)v46);
    sub_20BF5618C((uint64_t)&v48);
  }
  else
  {
    v38 = 0;
  }
  if ((v55 & 7) != 0)
  {
    v39 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  sub_20BFD265C(&v53);
  if (v52)
    sub_20C35C614(v52);
  if ((v60 & 7) != 0)
  {
    v41 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
  sub_20BFD265C(&v58);
  if (v57)
    sub_20C35C614(v57);
  return v38;
}

void sub_20C596E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20C372B54((uint64_t)va2);
  sub_20C372B54(v3 - 112);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices(pxrInternal__aapl__pxrReserved__::UsdGeomSubset **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD **v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  void *__p[2];
  __int128 v41;
  int *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD **v47;
  uint64_t *v48;
  void *v49;

  v44 = 0;
  v45 = 0;
  v43 = (uint64_t *)&v44;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      v42 = 0;
      *(_OWORD *)__p = 0u;
      v41 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v5, (uint64_t)&v35);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&v35, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
      if ((v39 & 7) != 0)
      {
        v7 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
      sub_20BFD265C(&v37);
      if (v36)
        sub_20C35C614(v36);
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v9, v10);
      v11 = v42;
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v12, v13);
      v14 = &v42[(uint64_t)__p[0]];
      while (v11 != v14)
      {
        sub_20C599E80(&v43, (uint64_t *)&v44, v11, v11);
        ++v11;
      }
      sub_20BF5618C((uint64_t)__p);
      v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v5 + 24);
    }
    while (v5 != v6);
    while (v45)
    {
      v15 = v43;
      if ((*((_DWORD *)v43 + 7) & 0x80000000) == 0)
      {
        *(_QWORD *)(a3 + 32) = 0;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v41 = 0;
        sub_20BE857FC(__p, a2);
        if (a2)
        {
          v17 = 0;
          v18 = (char *)__p[1];
          do
          {
            if ((unint64_t)v18 >= (unint64_t)v41)
            {
              v20 = (char *)__p[0];
              v21 = (v18 - (char *)__p[0]) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                sub_20BDDF694();
              v23 = v41 - (unint64_t)__p[0];
              if ((uint64_t)(v41 - (unint64_t)__p[0]) >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)sub_20BDE1330((uint64_t)&v41, v24);
                v20 = (char *)__p[0];
                v18 = (char *)__p[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * v21];
              *(_DWORD *)v26 = v17;
              v19 = v26 + 4;
              while (v18 != v20)
              {
                v27 = *((_DWORD *)v18 - 1);
                v18 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              __p[0] = v26;
              __p[1] = v19;
              *(_QWORD *)&v41 = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *(_DWORD *)v18 = v17;
              v19 = v18 + 4;
            }
            __p[1] = v19;
            ++v17;
            v18 = (char *)v19;
          }
          while (v17 != a2);
        }
        v28 = v44;
        if (v44)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)v28[1];
          }
          while (v28);
        }
        else
        {
          v30 = &v44;
          do
          {
            v29 = v30[2];
            v31 = *v29 == (_QWORD)v30;
            v30 = (_QWORD **)v29;
          }
          while (v31);
        }
        v32 = *((unsigned int *)v29 + 7);
        if (v32 >= a2)
        {
          v33 = (v32 + 1) - v45;
          if (v33 >= a2)
            v34 = a2;
          else
            v34 = v33;
          sub_20C596AB8((unint64_t *)a3, v34);
        }
        else
        {
          sub_20C596AB8((unint64_t *)a3, a2 - v45);
        }
        v35 = __p[0];
        v48 = v43;
        v49 = __p[1];
        v47 = &v44;
        v46 = a3;
        sub_20C59A210(&v35, &v49, &v48, &v47, &v46);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_18;
      }
      sub_20BE10B80(&v43, v43);
      operator delete(v15);
    }
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_20C596AB8((unint64_t *)a3, a2);
  if (a2)
  {
    v16 = 0;
    do
    {
      LODWORD(__p[0]) = v16;
      sub_20C59A0AC(a3, __p);
      ++v16;
    }
    while (a2 != v16);
  }
LABEL_18:
  sub_20BE6100C((uint64_t)&v43, v44);
}

void sub_20C597268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  sub_20BF5618C(v20);
  sub_20BE6100C((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::ValidateSubsets(pxrInternal__aapl__pxrReserved__::UsdGeomSubset **a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v5;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  const char *Text;
  const char *v19;
  char *v20;
  unint64_t v21;
  const char *v22;
  unsigned int *v23;
  unsigned int v24;
  _DWORD *v25;
  double *v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  unint64_t v28;
  const char *v29;
  unsigned int *v30;
  unsigned int v31;
  void **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  double *v48;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v49;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  int *v58;
  char v59;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v60;
  BOOL v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  char *v65;
  void *v66;
  const std::string::value_type *p_p;
  std::string::size_type v68;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v69;
  BOOL v70;
  int v71;
  unsigned int v72;
  const char *v73;
  char *v74;
  void *v75;
  void **v76;
  std::string::size_type v77;
  _QWORD *v78;
  _QWORD **v79;
  _QWORD *v80;
  const char *v81;
  char *v82;
  void *v83;
  void **v84;
  std::string::size_type v85;
  int v86;
  const char *v87;
  char *v88;
  void *v89;
  void **v90;
  std::string::size_type v91;
  unsigned int *v92;
  unsigned int v93;
  double *v95;
  unint64_t v96;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset **v97;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v98;
  void *v99;
  char v100;
  int v101;
  int v102;
  unsigned int v103;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108[2];
  __int128 v109;
  int *v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  char *v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;

  v5 = *a1;
  v97 = a1;
  if (v5 == a1[1])
    return 1;
  v120 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(v5, (uint64_t)v108);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v108, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v120);
  if ((BYTE8(v109) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
  v96 = a2;
  sub_20BFD265C(&v109);
  if (v108[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v108[1]);
  v118 = 0;
  v119 = 0;
  v117 = (uint64_t *)&v118;
  v11 = *v97;
  v12 = v97[1];
  if (*v97 != v12)
  {
    v13 = (_DWORD *)&v109 + 1;
    do
    {
      v114 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(v11, (uint64_t)v108);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v108, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v114);
      if ((BYTE8(v109) & 7) != 0)
      {
        v14 = (unsigned int *)(*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
      sub_20BFD265C(&v109);
      if (v108[1])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v108[1]);
      v16 = v114 & 0xFFFFFFFFFFFFFFF8;
      v17 = v120 & 0xFFFFFFFFFFFFFFF8;
      if ((v114 & 0xFFFFFFFFFFFFFFF8) == (v120 & 0xFFFFFFFFFFFFFFF8))
      {
        __p = 0;
        v105 = 0;
        v106 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v11, (uint64_t)v108);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples((uint64_t)v108, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
        if ((BYTE8(v109) & 7) != 0)
        {
          v23 = (unsigned int *)(*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        v25 = v13;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
        sub_20BFD265C(&v109);
        if (v108[1])
          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v108[1]);
        v26 = (double *)__p;
        v27 = v105;
        if (__p != v105)
        {
          do
          {
            sub_20C0E7A88(&v117, (double *)&v118, v26, (uint64_t *)v26);
            ++v26;
          }
          while (v26 != (double *)v27);
          v26 = (double *)__p;
        }
        if (v26)
        {
          v105 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v26;
          operator delete(v26);
        }
        v13 = v25;
      }
      else if (a4)
      {
        sub_20C3630C0((uint64_t)v11, &__p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        v21 = v114 & 0xFFFFFFFFFFFFFFF8;
        if ((v114 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v22 = (const char *)(v21 + 16);
          if (*(char *)(v21 + 39) < 0)
            v22 = *(const char **)v22;
        }
        else
        {
          v22 = "";
        }
        v28 = v120 & 0xFFFFFFFFFFFFFFF8;
        if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v29 = (const char *)(v28 + 16);
          if (*(char *)(v28 + 39) < 0)
            v29 = *(const char **)v29;
        }
        else
        {
          v29 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Subset at path <%s> has elementType %s, which does not match '%s'.", v19, v20, Text, v22, v29);
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(_OWORD *)a4 = *(_OWORD *)v108;
        *(_QWORD *)(a4 + 16) = v109;
        BYTE7(v109) = 0;
        LOBYTE(v108[0]) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      if ((v114 & 7) != 0)
      {
        v30 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if (v16 != v17)
      {
        v47 = 0;
        goto LABEL_171;
      }
      v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v11 + 24);
    }
    while (v11 != v12);
  }
  v108[0] = (void *)0x7FF8000000000000;
  v32 = (void **)sub_20C59A908(&v114, 1uLL, v108);
  sub_20BE7E950(v32, v119 + 1);
  v33 = v117;
  if (v117 == (uint64_t *)&v118)
  {
    v34 = v115;
  }
  else
  {
    v34 = v115;
    do
    {
      v35 = v33[4];
      if (v34 >= (uint64_t *)v116)
      {
        v36 = (uint64_t *)v114;
        v37 = (uint64_t)((uint64_t)v34 - v114) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          sub_20BDDF694();
        v39 = (uint64_t)&v116[-v114];
        if ((uint64_t)&v116[-v114] >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)sub_20BDDF6A8((uint64_t)&v116, v40);
          v36 = (uint64_t *)v114;
          v34 = v115;
        }
        else
        {
          v41 = 0;
        }
        v42 = (uint64_t *)&v41[8 * v37];
        *v42 = v35;
        v43 = v42 + 1;
        while (v34 != v36)
        {
          v44 = *--v34;
          *--v42 = v44;
        }
        v114 = (unint64_t)v42;
        v115 = v43;
        v116 = &v41[8 * v40];
        if (v36)
          operator delete(v36);
        v34 = v43;
      }
      else
      {
        *v34++ = v35;
      }
      v115 = v34;
      v45 = (uint64_t *)v33[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (uint64_t *)v33[2];
          v61 = *v46 == (_QWORD)v33;
          v33 = v46;
        }
        while (!v61);
      }
      v33 = v46;
    }
    while (v46 != (uint64_t *)&v118);
  }
  v48 = (double *)v114;
  if ((uint64_t *)v114 != v34)
  {
    v95 = (double *)v34;
    LODWORD(v47) = 1;
    while (1)
    {
      v112 = 0;
      v113 = 0;
      v111 = (uint64_t *)&v112;
      v50 = *v97;
      v49 = v97[1];
      v98 = v49;
      while (v50 != v49)
      {
        v110 = 0;
        *(_OWORD *)v108 = 0u;
        v109 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v50, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v108);
        if ((v107 & 7) != 0)
        {
          v51 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
          do
            v52 = __ldxr(v51);
          while (__stlxr(v52 - 2, v51));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v106 + 1);
        sub_20BFD265C(&v106);
        if (v105)
          sub_20C35C614(v105);
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v108, v53, v54);
        v55 = v110;
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v108, v56, v57);
        v58 = &v110[(uint64_t)v108[0]];
        while (v55 != v58)
        {
          v103 = 0;
          v103 = *v55;
          sub_20C12637C(&v111, (int *)&v103, &v103);
          if ((v59 & 1) == 0)
          {
            v60 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v60)
              v60 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            v61 = (*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v60 + 146) & 0xFFFFFFFFFFFFFFF8) || a4 == 0;
            if (v61)
            {
              LODWORD(v47) = ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v60 + 146) & 0xFFFFFFFFFFFFFFF8)) & v47;
            }
            else
            {
              v62 = v103;
              sub_20C3630C0((uint64_t)v50, &v101);
              v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v101);
              sub_20C53FBD0(v48);
              v66 = &v99;
              if (v100 < 0)
                v66 = v99;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found overlapping index %d in GeomSubset at path <%s> at time %s.\n", v64, v65, v62, v63, v66);
              if (v106 >= 0)
                p_p = (const std::string::value_type *)&__p;
              else
                p_p = (const std::string::value_type *)__p;
              if (v106 >= 0)
                v68 = HIBYTE(v106);
              else
                v68 = (std::string::size_type)v105;
              std::string::append((std::string *)a4, p_p, v68);
              if (SHIBYTE(v106) < 0)
                operator delete(__p);
              if (v100 < 0)
                operator delete(v99);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v102);
              sub_20BFD265C(&v101);
              LODWORD(v47) = 0;
            }
          }
          ++v55;
        }
        sub_20BF5618C((uint64_t)v108);
        v50 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v50 + 24);
        v49 = v98;
      }
      v69 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v69)
        v69 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v70 = (*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v69 + 96) & 0xFFFFFFFFFFFFFFF8) || v113 == v96;
      v71 = v70;
      v72 = v71 & v47;
      if (!v70 && a4)
      {
        sub_20C53FBD0(v48);
        v75 = &__p;
        if (v106 < 0)
          v75 = __p;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Number of unique indices at time %s does not match the element count %ld.", v73, v74, v75, v96);
        if ((SBYTE7(v109) & 0x80u) == 0)
          v76 = v108;
        else
          v76 = (void **)v108[0];
        if ((SBYTE7(v109) & 0x80u) == 0)
          v77 = BYTE7(v109);
        else
          v77 = (std::string::size_type)v108[1];
        std::string::append((std::string *)a4, (const std::string::value_type *)v76, v77);
        if (SBYTE7(v109) < 0)
          operator delete(v108[0]);
        if (SHIBYTE(v106) < 0)
          operator delete(__p);
        v72 = 0;
      }
      if (v96)
      {
        v78 = v112;
        v79 = &v112;
        if (v112)
        {
          do
          {
            v80 = v78;
            v78 = (_QWORD *)v78[1];
          }
          while (v78);
        }
        else
        {
          do
          {
            v80 = v79[2];
            v61 = *v80 == (_QWORD)v79;
            v79 = (_QWORD **)v80;
          }
          while (v61);
        }
        if (*((int *)v80 + 7) >= v96)
        {
          if (!a4)
            goto LABEL_167;
          sub_20C53FBD0(v48);
          v83 = &__p;
          if (v106 < 0)
            v83 = __p;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found one or more indices that are greater than the element count %ld at time %s.\n", v81, v82, v96, v83);
          if ((SBYTE7(v109) & 0x80u) == 0)
            v84 = v108;
          else
            v84 = (void **)v108[0];
          if ((SBYTE7(v109) & 0x80u) == 0)
            v85 = BYTE7(v109);
          else
            v85 = (std::string::size_type)v108[1];
          std::string::append((std::string *)a4, (const std::string::value_type *)v84, v85);
          if (SBYTE7(v109) < 0)
            operator delete(v108[0]);
          if (SHIBYTE(v106) < 0)
            operator delete(__p);
          v72 = 0;
        }
      }
      v86 = *((_DWORD *)v111 + 7);
      if (v86 >= 0)
        v47 = v72;
      else
        v47 = 0;
      if ((v86 & 0x80000000) == 0 || !a4)
        goto LABEL_168;
      sub_20C53FBD0(v48);
      v89 = &__p;
      if (v106 < 0)
        v89 = __p;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found one or more indices that are less than 0 at time %s.\n", v87, v88, v89);
      if ((SBYTE7(v109) & 0x80u) == 0)
        v90 = v108;
      else
        v90 = (void **)v108[0];
      if ((SBYTE7(v109) & 0x80u) == 0)
        v91 = BYTE7(v109);
      else
        v91 = (std::string::size_type)v108[1];
      std::string::append((std::string *)a4, (const std::string::value_type *)v90, v91);
      if (SBYTE7(v109) < 0)
        operator delete(v108[0]);
      if (SHIBYTE(v106) < 0)
        operator delete(__p);
LABEL_167:
      v47 = 0;
LABEL_168:
      sub_20BE6100C((uint64_t)&v111, v112);
      if (++v48 == v95)
      {
        v34 = (uint64_t *)v114;
        if (v114)
          goto LABEL_170;
        goto LABEL_171;
      }
    }
  }
  v47 = 1;
  if (v34)
  {
LABEL_170:
    v115 = v34;
    operator delete(v34);
  }
LABEL_171:
  sub_20BE6100C((uint64_t)&v117, v118);
  if ((v120 & 7) != 0)
  {
    v92 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stlxr(v93 - 2, v92));
  }
  return v47;
}

void sub_20C597BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;

  sub_20BE6100C(v41 - 184, *(_QWORD **)(v41 - 176));
  v43 = *(void **)(v41 - 160);
  if (v43)
  {
    *(_QWORD *)(v41 - 152) = v43;
    operator delete(v43);
  }
  sub_20BE6100C(v41 - 136, *(_QWORD **)(v41 - 128));
  v44 = *(_QWORD *)(v41 - 112);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::ValidateFamily(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *a1, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  const char *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  const char *Text;
  const char *v16;
  char *v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  char *v29;
  unint64_t v30;
  const char *v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  double *v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  unint64_t v37;
  const char *v38;
  unsigned int *v39;
  unsigned int v40;
  void **v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  double *i;
  uint64_t v46;
  double *v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  const char *v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  char v61;
  double *v62;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v63;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *j;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v69;
  const char *v70;
  const char *v71;
  char *v72;
  void *v73;
  const std::string::value_type *p_p;
  std::string::size_type v75;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v76;
  int *v77;
  uint64_t v78;
  char *v79;
  int *v80;
  int v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  char *v85;
  void *v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  int *v89;
  uint64_t v90;
  char *v91;
  int *v92;
  BOOL v93;
  _BOOL4 v94;
  const char *v95;
  const char *v96;
  char *v97;
  void *v98;
  unint64_t v99;
  const char *v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v103;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v104;
  uint64_t v105;
  const char *v106;
  char *v107;
  void *v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v111;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v112;
  uint64_t v113;
  char *v114;
  int *v115;
  uint64_t v116;
  char *v117;
  unsigned int *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  const char *v123;
  char *v124;
  void *v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  uint64_t **v128;
  uint64_t *v129;
  void *v130;
  int *v131;
  uint64_t v132;
  char *v133;
  int *v134;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v135;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v136;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v137;
  int v138;
  _BOOL4 v139;
  uint64_t *v140;
  uint64_t *v141;
  void *v142;
  uint64_t *v143;
  _BOOL4 v144;
  _DWORD *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  uint64_t **v153;
  uint64_t *v154;
  _QWORD *v155;
  _QWORD **v156;
  unint64_t v157;
  const char *v158;
  const char *v159;
  char *v160;
  void *v161;
  const std::string::value_type *v162;
  std::string::size_type v163;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v164;
  _QWORD **v165;
  char *v166;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v167;
  int v168;
  int v169;
  int v170;
  int v171;
  _BOOL4 v172;
  _QWORD *v173;
  _QWORD **v174;
  _QWORD *v175;
  _BOOL4 v176;
  _BOOL4 v177;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v178;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v179;
  _QWORD *v180;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v181;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v182;
  void *v183;
  const char *v184;
  char *v185;
  void **v186;
  const std::string::value_type *v187;
  std::string::size_type v188;
  _QWORD *v189;
  _QWORD **v190;
  _QWORD *v191;
  unint64_t v192;
  const char *v193;
  char *v194;
  void *v195;
  const std::string::value_type *v196;
  std::string::size_type v197;
  int v198;
  const char *v199;
  char *v200;
  void *v201;
  const std::string::value_type *v202;
  std::string::size_type v203;
  const std::string::value_type *v204;
  std::string::size_type v205;
  unsigned int *v206;
  unsigned int v207;
  const pxrInternal__aapl__pxrReserved__::TfToken *v209;
  char v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v218;
  unint64_t v219;
  void *v220[2];
  char v221;
  void *v222;
  void *v223;
  uint64_t v224;
  void *v225;
  _QWORD *v226;
  uint64_t v227;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  int *v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  double *v240;
  uint64_t *v241;
  _QWORD *v242;
  uint64_t v243;
  BOOL v244;
  unint64_t v245;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v246;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v247;

  if ((sub_20C595F20((uint64_t)a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets(a1, a2, a3, (uint64_t)&v246);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType(a1, a3, (unsigned int **)&v245);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10)
      v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v209 = a3;
    v219 = v245;
    v215 = *((_QWORD *)v10 + 146);
    v244 = 0;
    v11 = sub_20C596228((uint64_t)a1, a2, &v244, -1.79769313e308);
    v12 = v11;
    v13 = !v244 && v11 == 0;
    v14 = !v13;
    if (a4 && (v14 & 1) == 0)
    {
      sub_20C3630C0((uint64_t)a1, &__p);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to determine element count at earliest time for geom <%s>.\n", v16, v17, Text);
      if ((SBYTE7(v233) & 0x80u) == 0)
        v18 = (const std::string::value_type *)&v232;
      else
        v18 = (const std::string::value_type *)v232;
      if ((SBYTE7(v233) & 0x80u) == 0)
        v19 = BYTE7(v233);
      else
        v19 = *((_QWORD *)&v232 + 1);
      std::string::append((std::string *)a4, v18, v19);
      if (SBYTE7(v233) < 0)
        operator delete((void *)v232);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    v211 = v12;
    v212 = (uint64_t)a1;
    v218 = a2;
    v242 = 0;
    v243 = 0;
    v241 = (uint64_t *)&v242;
    v20 = v246;
    v21 = v247;
    if (v246 != v247)
    {
      v22 = (_DWORD *)&v233 + 1;
      while (1)
      {
        v238 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(v20, (uint64_t)&v232);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v232, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v238);
        if ((BYTE8(v233) & 7) != 0)
        {
          v23 = (unsigned int *)(*((_QWORD *)&v233 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v22);
        sub_20BFD265C(&v233);
        if (*((_QWORD *)&v232 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v232 + 1));
        v25 = v238 & 0xFFFFFFFFFFFFFFF8;
        v26 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        if ((v238 & 0xFFFFFFFFFFFFFFF8) == v26)
        {
          __p = 0;
          v229 = 0;
          v230 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v20, (uint64_t)&v232);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples((uint64_t)&v232, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
          if ((BYTE8(v233) & 7) != 0)
          {
            v32 = (unsigned int *)(*((_QWORD *)&v233 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          v34 = v22;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v22);
          sub_20BFD265C(&v233);
          if (*((_QWORD *)&v232 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v232 + 1));
          v35 = (double *)__p;
          v36 = v229;
          if (__p != v229)
          {
            do
            {
              sub_20C0E7A88(&v241, (double *)&v242, v35, (uint64_t *)v35);
              ++v35;
            }
            while (v35 != (double *)v36);
            v35 = (double *)__p;
          }
          if (v35)
          {
            v229 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v35;
            operator delete(v35);
          }
          v22 = v34;
        }
        else if (a4)
        {
          sub_20C3630C0((uint64_t)v20, &__p);
          v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          v30 = v238 & 0xFFFFFFFFFFFFFFF8;
          if ((v238 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v31 = (const char *)(v30 + 16);
            if (*(char *)(v30 + 39) < 0)
              v31 = *(const char **)v31;
          }
          else
          {
            v31 = "";
          }
          v37 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v37)
          {
            v38 = (const char *)(v37 + 16);
            if (*(char *)(v37 + 39) < 0)
              v38 = *(const char **)v38;
          }
          else
          {
            v38 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Subset at path <%s> has elementType %s, which does not match '%s'.", v28, v29, v27, v31, v38);
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = v232;
          *(_QWORD *)(a4 + 16) = v233;
          BYTE7(v233) = 0;
          LOBYTE(v232) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_20BFD265C(&__p);
        }
        if ((v238 & 7) != 0)
        {
          v39 = (unsigned int *)(v238 & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        if (v25 != v26)
          break;
        v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v20 + 24);
        if (v20 == v21)
          goto LABEL_57;
      }
      v61 = 0;
      goto LABEL_396;
    }
LABEL_57:
    *(_QWORD *)&v232 = 0x7FF8000000000000;
    v41 = (void **)sub_20C59A908(&v238, 1uLL, &v232);
    sub_20BE7E950(v41, v243 + 1);
    v44 = v241;
    if (v241 == (uint64_t *)&v242)
    {
      i = (double *)v239;
    }
    else
    {
      i = (double *)v239;
      do
      {
        v46 = v44[4];
        if (i >= v240)
        {
          v47 = (double *)v238;
          v48 = i;
          v49 = (uint64_t)((uint64_t)i - v238) >> 3;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61)
            sub_20BDDF694();
          v51 = (uint64_t)v240 - v238;
          if ((uint64_t)((uint64_t)v240 - v238) >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v50;
          if (v42)
          {
            v52 = (char *)sub_20BDDF6A8((uint64_t)&v240, v42);
            v47 = (double *)v238;
            v48 = (double *)v239;
          }
          else
          {
            v52 = 0;
          }
          v53 = (uint64_t *)&v52[8 * v49];
          *v53 = v46;
          for (i = (double *)(v53 + 1); v48 != v47; --v53)
          {
            v54 = *((_QWORD *)v48-- - 1);
            *(v53 - 1) = v54;
          }
          v238 = (unint64_t)v53;
          v239 = (unint64_t)i;
          v240 = (double *)&v52[8 * v42];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_QWORD *)i++ = v46;
        }
        v239 = (unint64_t)i;
        v55 = (uint64_t *)v44[1];
        if (v55)
        {
          do
          {
            v56 = v55;
            v55 = (uint64_t *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (uint64_t *)v44[2];
            v13 = *v56 == (_QWORD)v44;
            v44 = v56;
          }
          while (!v13);
        }
        v44 = v56;
      }
      while (v56 != (uint64_t *)&v242);
    }
    v62 = (double *)v238;
    if ((double *)v238 == i)
    {
      v210 = 0;
LABEL_383:
      v61 = v210 & v14;
      if (a4 && (v210 & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No indices in family at any time.\n", (const char *)v42, v43);
        if ((SBYTE7(v233) & 0x80u) == 0)
          v204 = (const std::string::value_type *)&v232;
        else
          v204 = (const std::string::value_type *)v232;
        if ((SBYTE7(v233) & 0x80u) == 0)
          v205 = BYTE7(v233);
        else
          v205 = *((_QWORD *)&v232 + 1);
        std::string::append((std::string *)a4, v204, v205);
        if (SBYTE7(v233) < 0)
          operator delete((void *)v232);
        v61 = 0;
      }
      if (v238)
      {
        v239 = v238;
        operator delete((void *)v238);
      }
LABEL_396:
      sub_20BE6100C((uint64_t)&v241, v242);
      if ((v245 & 7) != 0)
      {
        v206 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
        do
          v207 = __ldxr(v206);
        while (__stlxr(v207 - 2, v206));
      }
      *(_QWORD *)&v232 = &v246;
      sub_20C599B38((void ***)&v232);
      return v61 & 1;
    }
    v210 = 0;
    v216 = v215 & 0xFFFFFFFFFFFFFFF8;
    v217 = v219 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      v236 = 0;
      v237 = 0;
      v235 = (uint64_t *)&v236;
      v63 = v246;
      for (j = v247; v63 != j; v63 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v63 + 24))
      {
        v234 = 0;
        v232 = 0u;
        v233 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v63, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v232);
        if ((v231 & 7) != 0)
        {
          v65 = (unsigned int *)(v231 & 0xFFFFFFFFFFFFFFF8);
          do
            v66 = __ldxr(v65);
          while (__stlxr(v66 - 2, v65));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v230 + 1);
        sub_20BFD265C(&v230);
        if (v229)
          sub_20C35C614(v229);
        v69 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v69)
          v69 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if ((*(_QWORD *)v218 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v69 + 31) & 0xFFFFFFFFFFFFFFF8))
        {
          v14 = ((v232 & 1) == 0) & v14;
          if (a4)
          {
            if ((v232 & 1) != 0)
            {
              sub_20C3630C0((uint64_t)v63, &v222);
              v70 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v222);
              sub_20C53FBD0(v62);
              v73 = &v225;
              if (v227 < 0)
                v73 = v225;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Indices attribute has an odd number of elements in GeomSubset at path <%s> at time %s with elementType edge.\n", v71, v72, v70, v73);
              if (v230 >= 0)
                p_p = (const std::string::value_type *)&__p;
              else
                p_p = (const std::string::value_type *)__p;
              if (v230 >= 0)
                v75 = HIBYTE(v230);
              else
                v75 = (std::string::size_type)v229;
              std::string::append((std::string *)a4, p_p, v75);
              if (SHIBYTE(v230) < 0)
                operator delete(__p);
              if (SHIBYTE(v227) < 0)
                operator delete(v225);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v222 + 1);
              sub_20BFD265C(&v222);
              v14 = 0;
            }
          }
        }
        if (v217 == v216)
          goto LABEL_144;
        v76 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v76)
          v76 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if ((*(_QWORD *)v218 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v76 + 31) & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_144:
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v67, v68);
          v89 = v234;
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v90, v91);
          v92 = &v234[v232];
          while (v89 != v92)
          {
            sub_20C599E80(&v235, (uint64_t *)&v236, v89, v89);
            ++v89;
          }
        }
        else
        {
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v67, v68);
          v77 = v234;
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v78, v79);
          v80 = &v234[v232];
          while (v77 != v80)
          {
            LODWORD(v220[0]) = 0;
            LODWORD(v220[0]) = *v77;
            sub_20C12637C(&v235, (int *)v220, v220);
            v14 &= v81;
            if (a4 && (v81 & 1) == 0)
            {
              v82 = LODWORD(v220[0]);
              sub_20C3630C0((uint64_t)v63, &v222);
              v83 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v222);
              sub_20C53FBD0(v62);
              v86 = &v225;
              if (v227 < 0)
                v86 = v225;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found duplicate index %d in GeomSubset at path <%s> at time %s.\n", v84, v85, v82, v83, v86);
              if (v230 >= 0)
                v87 = (const std::string::value_type *)&__p;
              else
                v87 = (const std::string::value_type *)__p;
              if (v230 >= 0)
                v88 = HIBYTE(v230);
              else
                v88 = (std::string::size_type)v229;
              std::string::append((std::string *)a4, v87, v88);
              if (SHIBYTE(v230) < 0)
                operator delete(__p);
              if (SHIBYTE(v227) < 0)
                operator delete(v225);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v222 + 1);
              sub_20BFD265C(&v222);
              v14 = 0;
            }
            ++v77;
          }
        }
        sub_20BF5618C((uint64_t)&v232);
      }
      v213 = v211;
      if (v244)
        v213 = sub_20C596228(v212, v218, 0, *v62);
      if (v237)
      {
        v93 = v244 && v213 == 0;
        v94 = !v93;
        v14 &= v94;
        if (a4)
        {
          if (!v94)
          {
            sub_20C3630C0(v212, &v225);
            v95 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v225);
            sub_20C53FBD0(v62);
            v98 = __p;
            if (v230 >= 0)
              v98 = &__p;
            v99 = *(_QWORD *)v209 & 0xFFFFFFFFFFFFFFF8;
            if (v99)
            {
              v100 = (const char *)(v99 + 16);
              if (*(char *)(v99 + 39) < 0)
                v100 = *(const char **)v100;
            }
            else
            {
              v100 = "";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Geometry <%s> has no elements at time %s, but the \"%s\" GeomSubset family contains indices.\n", v96, v97, v95, v98, v100);
            if ((SBYTE7(v233) & 0x80u) == 0)
              v101 = (const std::string::value_type *)&v232;
            else
              v101 = (const std::string::value_type *)v232;
            if ((SBYTE7(v233) & 0x80u) == 0)
              v102 = BYTE7(v233);
            else
              v102 = *((_QWORD *)&v232 + 1);
            std::string::append((std::string *)a4, v101, v102);
            if (SBYTE7(v233) < 0)
              operator delete((void *)v232);
            if (SHIBYTE(v230) < 0)
              operator delete(__p);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v225 + 1);
            sub_20BFD265C(&v225);
            v14 = 0;
          }
        }
      }
      v103 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v103)
        v103 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if ((*(_QWORD *)v218 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v103 + 31) & 0xFFFFFFFFFFFFFFF8))
        break;
      v104 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v104)
        v104 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if ((v245 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v104 + 96) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_340;
      v105 = v237;
      v14 = (v237 == v213) & v14;
      if (a4 && v237 != v213)
      {
        sub_20C53FBD0(v62);
        v108 = &__p;
        if (v230 < 0)
          v108 = __p;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Number of unique indices at time %s does not match the element count %ld.\n", v106, v107, v108, v213);
        if ((SBYTE7(v233) & 0x80u) == 0)
          v109 = (const std::string::value_type *)&v232;
        else
          v109 = (const std::string::value_type *)v232;
        if ((SBYTE7(v233) & 0x80u) == 0)
          v110 = BYTE7(v233);
        else
          v110 = *((_QWORD *)&v232 + 1);
        std::string::append((std::string *)a4, v109, v110);
        if (SBYTE7(v233) < 0)
          operator delete((void *)v232);
        if (SHIBYTE(v230) < 0)
          operator delete(__p);
        v14 = 0;
        goto LABEL_340;
      }
LABEL_341:
      if (v105)
      {
        v189 = v236;
        v190 = &v236;
        if (v236)
        {
          do
          {
            v191 = v189;
            v189 = (_QWORD *)v189[1];
          }
          while (v189);
        }
        else
        {
          do
          {
            v191 = v190[2];
            v13 = *v191 == (_QWORD)v190;
            v190 = (_QWORD **)v191;
          }
          while (v13);
        }
        if (!v213 || (v192 = *((unsigned int *)v191 + 7), (v192 & 0x80000000) != 0) || v213 > v192)
        {
          v198 = *((_DWORD *)v235 + 7);
          v14 = (v198 >= 0) & v14;
          v210 = 1;
          if (!a4 || (v198 & 0x80000000) == 0)
            goto LABEL_380;
LABEL_367:
          sub_20C53FBD0(v62);
          v201 = &__p;
          if (v230 < 0)
            v201 = __p;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found one or more indices that are less than 0 at time %s.\n", v199, v200, v201);
          if ((SBYTE7(v233) & 0x80u) == 0)
            v202 = (const std::string::value_type *)&v232;
          else
            v202 = (const std::string::value_type *)v232;
          if ((SBYTE7(v233) & 0x80u) == 0)
            v203 = BYTE7(v233);
          else
            v203 = *((_QWORD *)&v232 + 1);
          std::string::append((std::string *)a4, v202, v203);
          if (SBYTE7(v233) < 0)
            operator delete((void *)v232);
          if (SHIBYTE(v230) < 0)
            operator delete(__p);
        }
        else if (a4)
        {
          sub_20C53FBD0(v62);
          if (v230 >= 0)
            v195 = &__p;
          else
            v195 = __p;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found one or more indices that are greater than the element count %ld at time %s.\n", v193, v194, v213, v195);
          if ((SBYTE7(v233) & 0x80u) == 0)
            v196 = (const std::string::value_type *)&v232;
          else
            v196 = (const std::string::value_type *)v232;
          if ((SBYTE7(v233) & 0x80u) == 0)
            v197 = BYTE7(v233);
          else
            v197 = *((_QWORD *)&v232 + 1);
          std::string::append((std::string *)a4, v196, v197);
          if (SBYTE7(v233) < 0)
            operator delete((void *)v232);
          if (SHIBYTE(v230) < 0)
            operator delete(__p);
          if ((*((_DWORD *)v235 + 7) & 0x80000000) != 0)
            goto LABEL_367;
        }
        v14 = 0;
        v210 = 1;
      }
LABEL_380:
      sub_20BE6100C((uint64_t)&v235, v236);
      if (++v62 == i)
        goto LABEL_383;
    }
    v229 = 0;
    v230 = 0;
    __p = &v229;
    v112 = v246;
    v111 = v247;
    v214 = v247;
    while (v112 != v111)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetEdges(v112, (uint64_t)&v232);
      if (v217 == v216)
      {
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v113, v114);
        v131 = v234;
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v132, v133);
        v134 = &v234[2 * v232];
        while (v131 != v134)
        {
          v135 = &v229;
          if (__p == &v229)
            goto LABEL_232;
          v136 = v229;
          v137 = &v229;
          if (v229)
          {
            do
            {
              v135 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v136;
              v136 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)v136 + 1);
            }
            while (v136);
          }
          else
          {
            do
            {
              v135 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v137[2];
              v13 = *v135 == (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v137;
              v137 = v135;
            }
            while (v13);
          }
          v138 = *((_DWORD *)v135 + 7);
          v13 = v138 == *v131;
          v139 = v138 < *v131;
          if (v13)
            v139 = *((_DWORD *)v135 + 8) < v131[1];
          if (v139)
          {
LABEL_232:
            if (v229)
            {
              v225 = v135;
              v140 = (uint64_t *)(v135 + 1);
            }
            else
            {
              v225 = &v229;
              v140 = (uint64_t *)&v229;
            }
          }
          else
          {
            v140 = sub_20C599AB8((uint64_t)&__p, &v225, v131);
          }
          if (!*v140)
          {
            v141 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v141 + 28) = *(_QWORD *)v131;
            v142 = v225;
            *v141 = 0;
            v141[1] = 0;
            v141[2] = (uint64_t)v142;
            *v140 = (uint64_t)v141;
            if (*(_QWORD *)__p)
            {
              __p = *(void **)__p;
              v141 = (uint64_t *)*v140;
            }
            sub_20BDDE208((uint64_t *)v229, v141);
            ++v230;
          }
          v131 += 2;
        }
      }
      else
      {
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v113, v114);
        v115 = v234;
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v232, v116, v117);
        v118 = (unsigned int *)&v234[2 * v232];
        while (v115 != (int *)v118)
        {
          v119 = sub_20C599AB8((uint64_t)&__p, &v225, v115);
          if (*v119)
          {
            if (a4)
            {
              v120 = *v115;
              v121 = v115[1];
              sub_20C3630C0((uint64_t)v112, v220);
              v122 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v220);
              sub_20C53FBD0(v62);
              v125 = &v222;
              if (v224 < 0)
                v125 = v222;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found duplicate edge index (%d, %d) in GeomSubset at path <%s> at time %s.\n", v123, v124, v120, v121, v122, v125);
              if (v227 >= 0)
                v126 = (const std::string::value_type *)&v225;
              else
                v126 = (const std::string::value_type *)v225;
              if (v227 >= 0)
                v127 = HIBYTE(v227);
              else
                v127 = (std::string::size_type)v226;
              std::string::append((std::string *)a4, v126, v127);
              if (SHIBYTE(v227) < 0)
                operator delete(v225);
              if (SHIBYTE(v224) < 0)
                operator delete(v222);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v220 + 1);
              sub_20BFD265C(v220);
            }
            v14 = 0;
          }
          else
          {
            v128 = (uint64_t **)v119;
            v129 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v129 + 28) = *(_QWORD *)v115;
            v130 = v225;
            *v129 = 0;
            v129[1] = 0;
            v129[2] = (uint64_t)v130;
            *v128 = v129;
            if (*(_QWORD *)__p)
            {
              __p = *(void **)__p;
              v129 = *v128;
            }
            sub_20BDDE208((uint64_t *)v229, v129);
            ++v230;
          }
          v115 += 2;
        }
      }
      sub_20BF5618C((uint64_t)&v232);
      v112 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v112 + 24);
      v111 = v214;
    }
    v226 = 0;
    v227 = 0;
    v225 = &v226;
    if (sub_20C596B50(v212, (uint64_t)v62, (uint64_t **)&v225))
    {
      v143 = (uint64_t *)__p;
      v144 = __p == &v229;
      if (__p != &v229)
      {
        v145 = v225;
        if (v225 != &v226)
        {
          while (1)
          {
            v146 = *((_DWORD *)v143 + 7);
            v147 = *((_DWORD *)v143 + 8);
            v148 = v145[7];
            v149 = v145[8];
            v150 = v147 < v149;
            if (v146 != v148)
              v150 = v146 < v148;
            if (v150)
              break;
            v151 = v149 < v147;
            if (v146 == v148)
              v152 = v151;
            else
              v152 = v148 < v146;
            if (v152)
            {
              v153 = (uint64_t **)v143;
            }
            else
            {
              v154 = (uint64_t *)v143[1];
              if (v154)
              {
                do
                {
                  v153 = (uint64_t **)v154;
                  v154 = (uint64_t *)*v154;
                }
                while (v154);
              }
              else
              {
                do
                {
                  v153 = (uint64_t **)v143[2];
                  v13 = *v153 == v143;
                  v143 = (uint64_t *)v153;
                }
                while (!v13);
              }
            }
            v155 = (_QWORD *)*((_QWORD *)v145 + 1);
            if (v155)
            {
              do
              {
                v156 = (_QWORD **)v155;
                v155 = (_QWORD *)*v155;
              }
              while (v155);
            }
            else
            {
              do
              {
                v156 = (_QWORD **)*((_QWORD *)v145 + 2);
                v13 = *v156 == (_QWORD *)v145;
                v145 = v156;
              }
              while (!v13);
            }
            v144 = v153 == (uint64_t **)&v229;
            if (v153 != (uint64_t **)&v229)
            {
              v145 = v156;
              v143 = (uint64_t *)v153;
              if (v156 != &v226)
                continue;
            }
            goto LABEL_265;
          }
          if (!a4)
            goto LABEL_285;
          goto LABEL_269;
        }
      }
LABEL_265:
      v14 &= v144;
      if (a4 && !v144)
      {
LABEL_269:
        v157 = *(_QWORD *)v209 & 0xFFFFFFFFFFFFFFF8;
        if (v157)
        {
          v158 = (const char *)(v157 + 16);
          if (*(char *)(v157 + 39) < 0)
            v158 = *(const char **)v158;
        }
        else
        {
          v158 = "";
        }
        sub_20C53FBD0(v62);
        v161 = &v222;
        if (v224 < 0)
          v161 = v222;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"At least one edge in family %s at time %s does not exist on the parent prim.\n", v159, v160, v158, v161);
        if ((SBYTE7(v233) & 0x80u) == 0)
          v162 = (const std::string::value_type *)&v232;
        else
          v162 = (const std::string::value_type *)v232;
        if ((SBYTE7(v233) & 0x80u) == 0)
          v163 = BYTE7(v233);
        else
          v163 = *((_QWORD *)&v232 + 1);
        std::string::append((std::string *)a4, v162, v163);
        if (SBYTE7(v233) < 0)
          operator delete((void *)v232);
        if (SHIBYTE(v224) < 0)
          operator delete(v222);
LABEL_285:
        v14 = 0;
      }
    }
    v164 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v164)
      v164 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((v245 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v164 + 96) & 0xFFFFFFFFFFFFFFF8))
    {
      v222 = 0;
      v223 = 0;
      v224 = 0;
      v165 = (_QWORD **)v225;
      if (v225 != &v226)
      {
        v166 = 0;
        v167 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)__p;
        while (1)
        {
          if (v167 == &v229)
            goto LABEL_322;
          v168 = *((_DWORD *)v165 + 7);
          v169 = *((_DWORD *)v165 + 8);
          v170 = *((_DWORD *)v167 + 7);
          v171 = *((_DWORD *)v167 + 8);
          v172 = v169 < v171;
          if (v168 != v170)
            v172 = v168 < v170;
          if (v172)
          {
            v166 = sub_20C59A4D4((uint64_t)&v222, v166, (char *)v165 + 28) + 8;
            v173 = v165[1];
            if (v173)
            {
              do
              {
                v174 = (_QWORD **)v173;
                v173 = (_QWORD *)*v173;
              }
              while (v173);
              goto LABEL_318;
            }
            do
            {
              v175 = v165;
              v165 = (_QWORD **)v165[2];
            }
            while (*v165 != v175);
          }
          else
          {
            v176 = v171 < v169;
            if (v168 == v170)
              v177 = v176;
            else
              v177 = v170 < v168;
            if (!v177)
            {
              v180 = v165[1];
              if (v180)
              {
                do
                {
                  v174 = (_QWORD **)v180;
                  v180 = (_QWORD *)*v180;
                }
                while (v180);
              }
              else
              {
                do
                {
                  v174 = (_QWORD **)v165[2];
                  v13 = *v174 == v165;
                  v165 = v174;
                }
                while (!v13);
              }
              v181 = v167[1];
              if (v181)
              {
                do
                {
                  v167 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v181;
                  v181 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v181;
                }
                while (v181);
              }
              else
              {
                do
                {
                  v182 = v167;
                  v167 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v167[2];
                }
                while (*v167 != (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v182);
              }
              goto LABEL_318;
            }
            v178 = v167[1];
            if (v178)
            {
              do
              {
                v167 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v178;
                v178 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v178;
              }
              while (v178);
            }
            else
            {
              do
              {
                v179 = v167;
                v167 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v167[2];
              }
              while (*v167 != (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v179);
            }
          }
          v174 = v165;
LABEL_318:
          v165 = v174;
          if (v174 == &v226)
            goto LABEL_321;
        }
      }
      v166 = 0;
LABEL_321:
      v165 = &v226;
LABEL_322:
      sub_20C59A714(v166, (char *)v165, (char *)&v226, (uint64_t)&v222, (char **)&v232);
      v183 = v222;
      v14 = (v223 == v222) & v14;
      if (a4 && v223 != v222)
      {
        sub_20C53FBD0(v62);
        v186 = v220;
        if (v221 < 0)
          v186 = (void **)v220[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Number of unique indices at time %s does not match the element count %ld.\n", v184, v185, v186, v213);
        if ((SBYTE7(v233) & 0x80u) == 0)
          v187 = (const std::string::value_type *)&v232;
        else
          v187 = (const std::string::value_type *)v232;
        if ((SBYTE7(v233) & 0x80u) == 0)
          v188 = BYTE7(v233);
        else
          v188 = *((_QWORD *)&v232 + 1);
        std::string::append((std::string *)a4, v187, v188);
        if (SBYTE7(v233) < 0)
          operator delete((void *)v232);
        if (v221 < 0)
          operator delete(v220[0]);
        v14 = 0;
        v183 = v222;
      }
      if (v183)
      {
        v223 = v183;
        operator delete(v183);
      }
    }
    sub_20C599E48(v226);
    sub_20C599E48(v229);
LABEL_340:
    v105 = v237;
    goto LABEL_341;
  }
  v57 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v57)
  {
    v58 = (const char *)(v57 + 16);
    if (*(char *)(v57 + 39) < 0)
      v58 = *(const char **)v58;
  }
  else
  {
    v58 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid geom type for elementType %s.\n", v8, v9, v58);
  if ((SBYTE7(v233) & 0x80u) == 0)
    v59 = (const std::string::value_type *)&v232;
  else
    v59 = (const std::string::value_type *)v232;
  if ((SBYTE7(v233) & 0x80u) == 0)
    v60 = BYTE7(v233);
  else
    v60 = *((_QWORD *)&v232 + 1);
  std::string::append((std::string *)a4, v59, v60);
  if (SBYTE7(v233) < 0)
    operator delete((void *)v232);
  v61 = 0;
  return v61 & 1;
}

void sub_20C5991F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;

  v55 = *(_QWORD *)(v53 - 136);
  if ((v55 & 7) != 0)
  {
    v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  a48 = (void *)(v53 - 128);
  sub_20C599B38((void ***)&a48);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5995BC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C599690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5996DC(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C59976C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C599790()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_254989EC0);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "subsetFamily", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "familyType", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_254989EC0))
    {
      if (!__stlxr((unint64_t)v0, &qword_254989EC0))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_254989EC0);
  }
  return (unint64_t)v0;
}

void sub_20C5999A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *sub_20C599A3C(uint64_t **a1, int *a2)
{
  uint64_t *result;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;

  result = sub_20C599AB8((uint64_t)a1, &v7, a2);
  if (!*result)
  {
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *(_QWORD *)a2;
    return sub_20BDDE1B4(a1, v7, v5, v6);
  }
  return result;
}

uint64_t *sub_20C599AB8(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 7);
        v10 = *((_DWORD *)v8 + 8);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_20C599B38(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C599BC4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v14;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v14, a2) = off_24C53CF80;
  v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 24);
  sub_20C599CD4(a1, &v13);
  v11 = a1[1];
  sub_20C599DF8((uint64_t)&v13);
  return v11;
}

void sub_20C599CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C599DF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C599CD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C599D48((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C599D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 - 24 + v11), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 24)) = off_24C53CF80;
      v11 -= 24;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_20C599DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 24)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C599DF8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C599E48(_QWORD *a1)
{
  if (a1)
  {
    sub_20C599E48(*a1);
    sub_20C599E48(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_20C599E80(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_20C599F04(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_20BDDE1B4(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20C599F04(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_20C59A0AC(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF64F28(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back(Args &&...) [T = int, Args = <int>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

_DWORD *sub_20C59A210(_DWORD **a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *i;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;

  v6 = *a1;
  v7 = (_DWORD *)*a2;
  if (*a1 == (_DWORD *)*a2)
    return v6;
  for (i = (_QWORD *)*a3; *a3 != *a4; i = (_QWORD *)*a3)
  {
    v13 = *((_DWORD *)i + 7);
    if (*v6 >= v13)
    {
      if (v13 >= *v6)
      {
        *a1 = v6 + 1;
        v17 = (_QWORD *)i[1];
        if (v17)
        {
          do
          {
            v15 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)i[2];
            v16 = *v15 == (_QWORD)i;
            i = v15;
          }
          while (!v16);
        }
      }
      else
      {
        v14 = (_QWORD *)i[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)i[2];
            v16 = *v15 == (_QWORD)i;
            i = v15;
          }
          while (!v16);
        }
      }
      *a3 = v15;
    }
    else
    {
      sub_20C59A7A4(*a5, v6);
      ++*a1;
    }
    v6 = *a1;
    v7 = (_DWORD *)*a2;
    if (*a1 == (_DWORD *)*a2)
      return v6;
  }
  v18 = *a5;
  if (v6 == v7)
    return v6;
  v19 = v6;
  do
    sub_20C59A7A4(v18, v19++);
  while (v19 != v7);
  return v7;
}

void sub_20C59A370(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(uint64_t **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20C00FB80(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 8 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2i, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2i &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

char *sub_20C59A4D4(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_20BDDF6A8(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_20BDDF6A8(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_20BEF2F0C((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_20C59A6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C59A714(char *__src@<X4>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  char *v6;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;

  v6 = a2;
  if (a2 != a3)
  {
    do
    {
      v9 = sub_20C59A4D4(a4, __src, v6 + 28);
      v10 = (char *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v6 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      __src = v9 + 8;
      v6 = v11;
    }
    while (v11 != a3);
    v6 = a3;
  }
  *a5 = v6;
  a5[1] = (char *)a4;
  a5[2] = __src;
}

void sub_20C59A7A4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF64F28(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back(Args &&...) [T = int, Args = <const int &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

_QWORD *sub_20C59A908(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C59A96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C59A988()
{
  void *__p[2];
  char v1;

  sub_20C59BB78();
  sub_20BDDC0E4(__p, "TetMesh");
  sub_20C59BC98((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C59A9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::~UsdGeomTetMesh(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CFD8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/tetMesh.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdGeomTetMesh pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53CFD8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C59AB78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_254989ED0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254989ED0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254989EC8, "TetMesh");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254989EC8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989ED0);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_254989EC8, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CFD8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdGeom/tetMesh.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdGeomTetMesh pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Define(const UsdStag"
                            "ePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53CFD8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C59AD68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989ED0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989EE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989EE0))
  {
    __cxa_guard_release(&qword_254989EE0);
  }
  return &qword_254989ED8;
}

void sub_20C59AE0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989EE0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989EF0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *)__cxa_guard_acquire(&qword_254989EF0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(v3);
      byte_254989EE8 = sub_20C35BD7C((char *)&qword_254989ED8, v4, v5);
      __cxa_guard_release(&qword_254989EF0);
    }
  }
  return byte_254989EE8;
}

void sub_20C59AE88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989EF0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(this);
  return &qword_254989ED8;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetTetVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1064), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C59AF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::CreateTetVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1064), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 576), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetSurfaceFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1040), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C59B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::CreateSurfaceFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1040), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 568), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254989F10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989F10))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *((_QWORD *)v5 + 133);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 130);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_254989EF8, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989EF8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989F10);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989F30);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989F30))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)1);
    sub_20C59B3D0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989F18, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989F30);
  }
  if (v1)
    return &qword_254989F18;
  else
    return &qword_254989EF8;
}

void sub_20C59B34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_254989F10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C59B3D0(uint64_t **a1)
{
  qword_254989F20 = 0;
  unk_254989F28 = 0;
  qword_254989F18 = 0;
  sub_20BFC9A6C((char **)&qword_254989F18, ((unk_254989F00 - qword_254989EF8) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_254989F18, (_QWORD *)qword_254989F20, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_254989F18, (_QWORD *)qword_254989F20, (uint64_t *)qword_254989EF8, unk_254989F00, (unk_254989F00 - qword_254989EF8) >> 3);
}

void sub_20C59B464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::ComputeSurfaceFaces(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  void **v20;
  _QWORD *v21;
  unint64_t v22;
  float v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD **v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *i;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *j;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  __int128 v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  char v72[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v73;
  int v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  float v79;

  v3 = a2;
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetTetVertexIndicesAttr(a1, (uint64_t)v72);
    v71 = 0;
    memset(v70, 0, sizeof(v70));
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>((uint64_t)v72, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v70);
    v77 = 0u;
    v78 = 0u;
    v79 = 1.0;
    if (*(_QWORD *)&v70[0])
    {
      v62 = v3;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = 0;
        v63 = v6;
        v64 = v71 + 16 * v6;
        do
        {
          v8 = (int *)((char *)&unk_20CAEE3A0 + 12 * v7);
          v9 = *(unsigned int *)(v64 + 4 * *v8);
          v10 = *(unsigned int *)(v64 + 4 * v8[1]);
          v11 = *(_DWORD *)(v64 + 4 * v8[2]);
          if ((int)v9 <= (int)v10)
            v12 = *(_DWORD *)(v64 + 4 * v8[1]);
          else
            v12 = *(_DWORD *)(v64 + 4 * *v8);
          v65 = v9;
          if ((int)v9 >= (int)v10)
            LODWORD(v9) = v10;
          if ((int)v9 <= v11)
            v13 = v11;
          else
            v13 = v9;
          v66 = v11;
          if ((int)v9 >= v11)
            v14 = v11;
          else
            v14 = v9;
          if (v12 <= v13)
            v15 = v13;
          else
            v15 = v12;
          if (v12 >= v13)
            v16 = v13;
          else
            v16 = v12;
          v17 = v15 ^ (unint64_t)(v14 << 42);
          v18 = v17 ^ ((uint64_t)(int)v16 << 21);
          if (v5)
          {
            v19 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
            v19.i16[0] = vaddlv_u8(v19);
            if (v19.u32[0] > 1uLL)
            {
              v2 = v17 ^ ((uint64_t)(int)v16 << 21);
              if (v18 >= v5)
                v2 = v18 % v5;
            }
            else
            {
              v2 = v18 & (v5 - 1);
            }
            v20 = *(void ***)(v77 + 8 * v2);
            if (v20)
            {
              v21 = *v20;
              if (*v20)
              {
                do
                {
                  v22 = v21[1];
                  if (v22 == v18)
                  {
                    if (*((_DWORD *)v21 + 4) == (_DWORD)v14
                      && *((_DWORD *)v21 + 5) == (_DWORD)v16
                      && *((_DWORD *)v21 + 6) == v15)
                    {
                      v43 = v11;
                      v44 = v65;
                      goto LABEL_96;
                    }
                  }
                  else
                  {
                    if (v19.u32[0] > 1uLL)
                    {
                      if (v22 >= v5)
                        v22 %= v5;
                    }
                    else
                    {
                      v22 &= v5 - 1;
                    }
                    if (v22 != v2)
                      break;
                  }
                  v21 = (_QWORD *)*v21;
                }
                while (v21);
              }
            }
          }
          v21 = operator new(0x38uLL);
          *v21 = 0;
          v21[1] = v18;
          v21[2] = (v16 << 32) | v14;
          *((_DWORD *)v21 + 6) = v15;
          v21[4] = 0;
          v21[5] = 0;
          *((_DWORD *)v21 + 12) = 0;
          v23 = (float)(unint64_t)(v4 + 1);
          if (!v5 || (float)(v79 * (float)v5) < v23)
          {
            v24 = (v5 & (v5 - 1)) == 0;
            if (v5 < 3)
              v24 = 0;
            v25 = (2 * v5) | !v24;
            v26 = vcvtps_u32_f32(v23 / v79);
            if (v25 <= v26)
              prime = (int8x8_t)v26;
            else
              prime = (int8x8_t)v25;
            if (*(_QWORD *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              v5 = *((_QWORD *)&v77 + 1);
            }
            if (*(_QWORD *)&prime <= v5)
            {
              if (*(_QWORD *)&prime < v5)
              {
                v34 = vcvtps_u32_f32((float)*((unint64_t *)&v78 + 1) / v79);
                if (v5 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
                {
                  v34 = std::__next_prime(v34);
                }
                else
                {
                  v36 = 1 << -(char)__clz(v34 - 1);
                  if (v34 >= 2)
                    v34 = v36;
                }
                if (*(_QWORD *)&prime <= v34)
                  prime = (int8x8_t)v34;
                if (*(_QWORD *)&prime >= v5)
                {
                  v5 = *((_QWORD *)&v77 + 1);
                }
                else
                {
                  if (prime)
                    goto LABEL_52;
                  v42 = (void *)v77;
                  *(_QWORD *)&v77 = 0;
                  if (v42)
                    operator delete(v42);
                  v5 = 0;
                  *((_QWORD *)&v77 + 1) = 0;
                }
              }
            }
            else
            {
LABEL_52:
              if (*(_QWORD *)&prime >> 61)
                sub_20BDDF5B4();
              v28 = operator new(8 * *(_QWORD *)&prime);
              v29 = (void *)v77;
              *(_QWORD *)&v77 = v28;
              if (v29)
                operator delete(v29);
              v30 = 0;
              *((int8x8_t *)&v77 + 1) = prime;
              do
                *(_QWORD *)(v77 + 8 * v30++) = 0;
              while (*(_QWORD *)&prime != v30);
              v31 = (_QWORD **)v78;
              if ((_QWORD)v78)
              {
                v32 = *(_QWORD *)(v78 + 8);
                v33 = (uint8x8_t)vcnt_s8(prime);
                v33.i16[0] = vaddlv_u8(v33);
                if (v33.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(v77 + 8 * v32) = &v78;
                for (i = *v31; i; v32 = v38)
                {
                  v38 = i[1];
                  if (v33.u32[0] > 1uLL)
                  {
                    if (v38 >= *(_QWORD *)&prime)
                      v38 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v38 &= *(_QWORD *)&prime - 1;
                  }
                  if (v38 != v32)
                  {
                    if (!*(_QWORD *)(v77 + 8 * v38))
                    {
                      *(_QWORD *)(v77 + 8 * v38) = v31;
                      goto LABEL_77;
                    }
                    *v31 = (_QWORD *)*i;
                    *i = **(_QWORD **)(v77 + 8 * v38);
                    **(_QWORD **)(v77 + 8 * v38) = i;
                    i = v31;
                  }
                  v38 = v32;
LABEL_77:
                  v31 = (_QWORD **)i;
                  i = (_QWORD *)*i;
                }
              }
              v5 = (unint64_t)prime;
            }
            if ((v5 & (v5 - 1)) != 0)
            {
              if (v18 >= v5)
                v2 = v18 % v5;
              else
                v2 = v18;
            }
            else
            {
              v2 = (v5 - 1) & v18;
            }
          }
          v39 = v77;
          v40 = *(_QWORD **)(v77 + 8 * v2);
          v43 = v66;
          v44 = v65;
          if (v40)
          {
            *v21 = *v40;
LABEL_94:
            *v40 = v21;
            goto LABEL_95;
          }
          *v21 = v78;
          *(_QWORD *)&v78 = v21;
          *(_QWORD *)(v39 + 8 * v2) = &v78;
          if (*v21)
          {
            v41 = *(_QWORD *)(*v21 + 8);
            if ((v5 & (v5 - 1)) != 0)
            {
              if (v41 >= v5)
                v41 %= v5;
            }
            else
            {
              v41 &= v5 - 1;
            }
            v40 = (_QWORD *)(v77 + 8 * v41);
            goto LABEL_94;
          }
LABEL_95:
          v4 = ++*((_QWORD *)&v78 + 1);
LABEL_96:
          ++v21[4];
          v21[5] = v44 | (v10 << 32);
          *((_DWORD *)v21 + 12) = v43;
          ++v7;
        }
        while (v7 != 4);
        v6 = v63 + 1;
        v45 = *(_QWORD *)&v70[0];
        if ((unint64_t)(v63 + 1) >= *(_QWORD *)&v70[0])
        {
          v3 = v62;
          goto LABEL_110;
        }
      }
    }
    v45 = 0;
LABEL_110:
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    sub_20C59BD4C((unint64_t *)&v67, v45);
    for (j = (_QWORD *)v78; j; j = (_QWORD *)*j)
    {
      if (j[4] == 1)
        sub_20C59BDF8((uint64_t)&v67, j + 5);
    }
    sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v67, v46, v47);
    v49 = v69;
    sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v67, v50, v51);
    v52 = (int *)(v69 + 12 * v67);
    v53 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v52 - v49) >> 2));
    if (v52 == (int *)v49)
      v54 = 0;
    else
      v54 = v53;
    sub_20C59BF8C(v49, v52, v54, 1);
    v55 = (_QWORD *)v78;
    if ((_QWORD)v78)
    {
      do
      {
        v56 = (_QWORD *)*v55;
        operator delete(v55);
        v55 = v56;
      }
      while (v56);
    }
    v57 = (void *)v77;
    *(_QWORD *)&v77 = 0;
    if (v57)
      operator delete(v57);
    if (&v67 != (__int128 *)v3)
    {
      sub_20BF5618C(v3);
      v58 = v68;
      *(_OWORD *)v3 = v67;
      *(_OWORD *)(v3 + 16) = v58;
      v67 = 0u;
      v68 = 0u;
      *(_QWORD *)(v3 + 32) = v69;
      v69 = 0;
    }
    sub_20BF5618C((uint64_t)&v67);
    sub_20BF5618C((uint64_t)v70);
    if ((v76 & 7) != 0)
    {
      v59 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
      do
        v60 = __ldxr(v59);
      while (__stlxr(v60 - 2, v59));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
    sub_20BFD265C(&v74);
    if (v73)
      sub_20C35C614(v73);
  }
  return v3 != 0;
}

void sub_20C59BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20BF5618C((uint64_t)&a15);
  sub_20BF5618C((uint64_t)&a21);
  sub_20C372B54((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C59BB78()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C55C298((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C59BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C59BC98(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C59BD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C59BD4C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20C011AC8((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20C011AC8((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        v9 = (char *)v6 + v8;
        v10 = *(_QWORD *)(v3 + v8);
        *((_DWORD *)v9 + 2) = *(_DWORD *)(v3 + v8 + 8);
        *(_QWORD *)v9 = v10;
        v8 += 12;
      }
      while (12 * v5 != v8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20C59BDF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  _QWORD v22[4];
  char v23;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v10 = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(uint64_t **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20C011AC8(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 12 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *v17 = v18;
        v17 = (_QWORD *)((char *)v17 + 12);
        v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    v19 = *a2;
    v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v20 = v19;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3i, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3i &>]";
  v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v21 = 4;
    else
      v21 = 3;
  }
  else
  {
    v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

unint64_t sub_20C59BF8C(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  unint64_t v27;
  int *k;
  BOOL v29;
  int v30;
  int v31;
  int *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  int *j;
  BOOL v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  uint64_t v68;
  int *v69;
  BOOL v71;
  uint64_t v72;
  int *v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  BOOL v78;
  int v79;
  int *v80;
  uint64_t v81;
  char *v82;
  int v83;
  BOOL v84;
  int v85;
  int64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  BOOL v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  int v105;
  int v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int64_t v115;
  int v116;
  BOOL v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int *v124;
  int v125;
  int v126;
  int v127;
  BOOL v128;
  int v129;
  int *v130;
  unint64_t v131;
  BOOL v132;
  int *v133;
  int v134;
  int v135;
  int v136;
  BOOL v137;
  int v138;
  int *v139;
  int v140;
  BOOL v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;

  v7 = (int *)result;
LABEL_2:
  i = v7;
  while (2)
  {
    v7 = i;
    v9 = (char *)a2 - (char *)i;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = a2 - 3;
        v64 = *(a2 - 3);
        v65 = v64 < *i;
        if (v64 == *i)
        {
          v66 = *(a2 - 2);
          v67 = i[1];
          v65 = v66 < v67;
          if (v66 == v67)
            v65 = *(a2 - 1) < i[2];
        }
        if (v65)
        {
          v151 = i[2];
          v146 = *(_QWORD *)i;
          v68 = *(_QWORD *)v63;
          i[2] = *(a2 - 1);
          *(_QWORD *)i = v68;
          *(a2 - 1) = v151;
          *(_QWORD *)v63 = v146;
        }
        return result;
      case 3:
        return (unint64_t)sub_20C59CCCC(i, i + 3, a2 - 3);
      case 4:
        return (unint64_t)sub_20C59D108(i, i + 3, i + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20C59CB18(i, i + 3, i + 6, i + 9, a2 - 3);
      default:
        if (v9 > 287)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v86 = (unint64_t)(v10 - 2) >> 1;
            v87 = v86;
            while (1)
            {
              v88 = v87;
              if (v86 >= v87)
              {
                v89 = (2 * v87) | 1;
                v90 = &i[3 * v89];
                if (2 * v88 + 2 < v10)
                {
                  v91 = v90[3];
                  v92 = *v90 < v91;
                  if (*v90 == v91)
                  {
                    v93 = v90[1];
                    v94 = v90[4];
                    v92 = v93 < v94;
                    if (v93 == v94)
                      v92 = v90[2] < v90[5];
                  }
                  if (v92)
                  {
                    v90 += 3;
                    v89 = 2 * v88 + 2;
                  }
                }
                result = (unint64_t)&i[3 * v88];
                v95 = *(_DWORD *)result;
                if (*v90 == *(_DWORD *)result)
                {
                  v96 = v90[1];
                  v97 = *(_DWORD *)(result + 4);
                  v98 = v96 < v97;
                  if (v96 == v97)
                  {
                    if (v90[2] >= *(_DWORD *)(result + 8))
                      goto LABEL_164;
                  }
                  else
                  {
                    v96 = *(_DWORD *)(result + 4);
                    if (!v98)
                      goto LABEL_164;
                  }
                }
                else if (*v90 >= v95)
                {
                  v96 = *(_DWORD *)(result + 4);
LABEL_164:
                  v99 = *(_DWORD *)(result + 8);
                  v100 = v90[2];
                  *(_QWORD *)result = *(_QWORD *)v90;
                  *(_DWORD *)(result + 8) = v100;
                  while (1)
                  {
                    if (v86 < v89)
                      goto LABEL_179;
                    result = (unint64_t)v90;
                    v101 = 2 * v89;
                    v89 = (2 * v89) | 1;
                    v90 = &i[3 * v89];
                    v102 = v101 + 2;
                    if (v102 < v10)
                    {
                      v103 = v90[3];
                      v104 = *v90 < v103;
                      if (*v90 == v103)
                      {
                        v105 = v90[1];
                        v106 = v90[4];
                        v104 = v105 < v106;
                        if (v105 == v106)
                          v104 = v90[2] < v90[5];
                      }
                      if (v104)
                      {
                        v90 += 3;
                        v89 = v102;
                      }
                    }
                    v107 = *v90 < v95;
                    if (*v90 == v95)
                    {
                      v108 = v90[1];
                      v107 = v108 < v96;
                      if (v108 == v96)
                        v107 = v90[2] < v99;
                    }
                    if (v107)
                      break;
                    v109 = *(_QWORD *)v90;
                    *(_DWORD *)(result + 8) = v90[2];
                    *(_QWORD *)result = v109;
                  }
                  v90 = (int *)result;
LABEL_179:
                  *v90 = v95;
                  v90[1] = v96;
                  v90[2] = v99;
                }
              }
              v87 = v88 - 1;
              if (!v88)
              {
                v110 = v9 / 0xCuLL;
                while (1)
                {
                  v111 = 0;
                  v152 = i[2];
                  v147 = *(_QWORD *)i;
                  v112 = (char *)i;
                  do
                  {
                    v113 = v112;
                    v112 += 12 * v111 + 12;
                    v114 = 2 * v111;
                    v111 = (2 * v111) | 1;
                    v115 = v114 + 2;
                    if (v115 < v110)
                    {
                      v116 = *((_DWORD *)v112 + 3);
                      result = *(unsigned int *)v112;
                      v117 = (int)result < v116;
                      if ((_DWORD)result == v116)
                      {
                        v118 = *((_DWORD *)v112 + 1);
                        result = *((unsigned int *)v112 + 4);
                        v117 = v118 < (int)result;
                        if (v118 == (_DWORD)result)
                        {
                          result = *((unsigned int *)v112 + 5);
                          v117 = *((_DWORD *)v112 + 2) < (int)result;
                        }
                      }
                      if (v117)
                      {
                        v112 += 12;
                        v111 = v115;
                      }
                    }
                    v119 = *(_QWORD *)v112;
                    *((_DWORD *)v113 + 2) = *((_DWORD *)v112 + 2);
                    *(_QWORD *)v113 = v119;
                  }
                  while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
                  a2 -= 3;
                  if (v112 == (char *)a2)
                  {
                    *((_DWORD *)v112 + 2) = v152;
                    *(_QWORD *)v112 = v147;
                  }
                  else
                  {
                    v120 = *(_QWORD *)a2;
                    *((_DWORD *)v112 + 2) = a2[2];
                    *(_QWORD *)v112 = v120;
                    a2[2] = v152;
                    *(_QWORD *)a2 = v147;
                    v121 = v112 - (char *)i + 12;
                    if (v121 >= 13)
                    {
                      v122 = v121 / 0xCuLL - 2;
                      v123 = v122 >> 1;
                      v124 = &i[3 * (v122 >> 1)];
                      v125 = *(_DWORD *)v112;
                      if (*v124 == *(_DWORD *)v112)
                      {
                        v126 = v124[1];
                        v127 = *((_DWORD *)v112 + 1);
                        v128 = v126 < v127;
                        if (v126 == v127)
                        {
                          result = *((unsigned int *)v112 + 2);
                          if (v124[2] < (int)result)
                            goto LABEL_202;
                        }
                        else
                        {
                          v126 = *((_DWORD *)v112 + 1);
                          if (v128)
                            goto LABEL_202;
                        }
                      }
                      else if (*v124 < v125)
                      {
                        v126 = *((_DWORD *)v112 + 1);
LABEL_202:
                        v129 = *((_DWORD *)v112 + 2);
                        result = v124[2];
                        *(_QWORD *)v112 = *(_QWORD *)v124;
                        *((_DWORD *)v112 + 2) = result;
                        if (v122 >= 2)
                        {
                          while (1)
                          {
                            v130 = v124;
                            v131 = v123 - 1;
                            v123 = (v123 - 1) >> 1;
                            v124 = &i[3 * v123];
                            result = *v124;
                            v132 = (int)result < v125;
                            if ((_DWORD)result == v125)
                            {
                              result = v124[1];
                              v132 = (int)result < v126;
                              if ((_DWORD)result == v126)
                              {
                                result = v124[2];
                                v132 = (int)result < v129;
                              }
                            }
                            if (!v132)
                              break;
                            result = *(_QWORD *)v124;
                            v130[2] = v124[2];
                            *(_QWORD *)v130 = result;
                            if (v131 <= 1)
                              goto LABEL_209;
                          }
                          v124 = v130;
                        }
LABEL_209:
                        *v124 = v125;
                        v124[1] = v126;
                        v124[2] = v129;
                      }
                    }
                  }
                  v25 = v110-- <= 2;
                  if (v25)
                    return result;
                }
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &i[3 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x601)
          {
            result = (unint64_t)sub_20C59CCCC(&v7[3 * v11], v7, a2 - 3);
          }
          else
          {
            sub_20C59CCCC(v7, &v7[3 * v11], a2 - 3);
            v13 = 3 * v11;
            v14 = &v7[3 * v11 - 3];
            sub_20C59CCCC(v7 + 3, v14, a2 - 6);
            v15 = &v7[v13 + 3];
            sub_20C59CCCC(v7 + 6, v15, a2 - 9);
            result = (unint64_t)sub_20C59CCCC(v14, v12, v15);
            v148 = v7[2];
            v143 = *(_QWORD *)v7;
            v16 = v12[2];
            *(_QWORD *)v7 = *(_QWORD *)v12;
            v7[2] = v16;
            v12[2] = v148;
            *(_QWORD *)v12 = v143;
          }
          --a3;
          v17 = *v7;
          if ((a4 & 1) == 0)
          {
            v18 = *(v7 - 3);
            if (v18 == v17)
            {
              v19 = *(v7 - 2);
              v20 = v7[1];
              if (v19 == v20)
              {
                if (*(v7 - 1) < v7[2])
                  goto LABEL_18;
              }
              else
              {
                if (v19 < v20)
                  goto LABEL_18;
                v19 = v7[1];
              }
            }
            else
            {
              if (v18 < v17)
                goto LABEL_18;
              v19 = v7[1];
            }
            v43 = v7[2];
            v44 = *(a2 - 3);
            v45 = v17 < v44;
            if (v17 == v44)
            {
              v46 = *(a2 - 2);
              v45 = v19 < v46;
              if (v19 == v46)
                v45 = v43 < *(a2 - 1);
            }
            if (v45)
            {
              for (i = v7 + 3; ; i += 3)
              {
                v47 = v17 < *i;
                if (v17 == *i)
                {
                  v48 = i[1];
                  v47 = v19 < v48;
                  if (v19 == v48)
                    v47 = v43 < i[2];
                }
                if (v47)
                  break;
              }
            }
            else
            {
              for (i = v7 + 3; i < a2; i += 3)
              {
                v49 = v17 < *i;
                if (v17 == *i)
                {
                  v50 = i[1];
                  v49 = v19 < v50;
                  if (v19 == v50)
                    v49 = v43 < i[2];
                }
                if (v49)
                  break;
              }
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 3; ; j -= 3)
              {
                v52 = v17 < v44;
                if (v17 == v44)
                {
                  v53 = j[1];
                  v52 = v19 < v53;
                  if (v19 == v53)
                    v52 = v43 < j[2];
                }
                if (!v52)
                  break;
                v54 = *(j - 3);
                v44 = v54;
              }
            }
            while (i < j)
            {
              v150 = i[2];
              v145 = *(_QWORD *)i;
              v55 = *(_QWORD *)j;
              i[2] = j[2];
              *(_QWORD *)i = v55;
              j[2] = v150;
              *(_QWORD *)j = v145;
              do
              {
                v56 = i[3];
                i += 3;
                v57 = v17 < v56;
                if (v17 == v56)
                {
                  v58 = i[1];
                  v57 = v19 < v58;
                  if (v19 == v58)
                    v57 = v43 < i[2];
                }
              }
              while (!v57);
              do
              {
                v59 = *(j - 3);
                j -= 3;
                v60 = v17 < v59;
                if (v17 == v59)
                {
                  v61 = j[1];
                  v60 = v19 < v61;
                  if (v19 == v61)
                    v60 = v43 < j[2];
                }
              }
              while (v60);
            }
            if (i - 3 != v7)
            {
              v62 = *(_QWORD *)(i - 3);
              v7[2] = *(i - 1);
              *(_QWORD *)v7 = v62;
            }
            a4 = 0;
            *(i - 3) = v17;
            *(i - 2) = v19;
            *(i - 1) = v43;
            continue;
          }
LABEL_18:
          v21 = 0;
          v22 = v7[1];
          v23 = v7[2];
          while (1)
          {
            v24 = v7[v21 + 3];
            v25 = v24 < v17;
            if (v24 == v17)
            {
              v26 = v7[v21 + 4];
              v25 = v26 < v22;
              if (v26 == v22)
                v25 = v7[v21 + 5] < v23;
            }
            if (!v25)
              break;
            v21 += 3;
          }
          v27 = (unint64_t)&v7[v21 + 3];
          k = a2 - 3;
          if (v21 * 4)
          {
            while (1)
            {
              v29 = *k < v17;
              if (*k == v17)
              {
                v30 = k[1];
                v29 = v30 < v22;
                if (v30 == v22)
                  v29 = k[2] < v23;
              }
              if (v29)
                break;
              k -= 3;
            }
          }
          else
          {
            k = a2;
            if (v27 < (unint64_t)a2)
            {
              for (k = a2 - 3; ; k -= 3)
              {
                if (*k == v17)
                {
                  v31 = k[1];
                  if (v31 == v22)
                  {
                    if (v27 >= (unint64_t)k || k[2] < v23)
                      break;
                  }
                  else if (v27 >= (unint64_t)k || v31 < v22)
                  {
                    break;
                  }
                }
                else if (*k < v17 || v27 >= (unint64_t)k)
                {
                  break;
                }
              }
            }
          }
          i = (int *)v27;
          if (v27 < (unint64_t)k)
          {
            v33 = k;
            do
            {
              v149 = i[2];
              v144 = *(_QWORD *)i;
              v34 = *(_QWORD *)v33;
              i[2] = v33[2];
              *(_QWORD *)i = v34;
              v33[2] = v149;
              *(_QWORD *)v33 = v144;
              do
              {
                v35 = i[3];
                i += 3;
                v36 = v35 < v17;
                if (v35 == v17)
                {
                  v37 = i[1];
                  v36 = v37 < v22;
                  if (v37 == v22)
                    v36 = i[2] < v23;
                }
              }
              while (v36);
              do
              {
                v38 = *(v33 - 3);
                v33 -= 3;
                v39 = v38 < v17;
                if (v38 == v17)
                {
                  v40 = v33[1];
                  v39 = v40 < v22;
                  if (v40 == v22)
                    v39 = v33[2] < v23;
                }
              }
              while (!v39);
            }
            while (i < v33);
          }
          if (i - 3 != v7)
          {
            v41 = *(_QWORD *)(i - 3);
            v7[2] = *(i - 1);
            *(_QWORD *)v7 = v41;
          }
          *(i - 3) = v17;
          *(i - 2) = v22;
          *(i - 1) = v23;
          if (v27 < (unint64_t)k)
          {
LABEL_65:
            result = sub_20C59BF8C(v7, i - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v42 = sub_20C59CE98(v7, i - 3);
          result = sub_20C59CE98(i, a2);
          if (!(_DWORD)result)
          {
            if (v42)
              continue;
            goto LABEL_65;
          }
          a2 = i - 3;
          if (v42)
            return result;
          goto LABEL_2;
        }
        v69 = i + 3;
        v71 = i == a2 || v69 == a2;
        if ((a4 & 1) == 0)
        {
          if (v71)
            return result;
          while (1)
          {
            v133 = v7;
            v7 = v69;
            v134 = v133[3];
            if (v134 == *v133)
              break;
            if (v134 < *v133)
            {
              v135 = v133[4];
LABEL_221:
              v138 = v133[5];
              do
              {
                v139 = v133;
                *(_QWORD *)(v133 + 3) = *(_QWORD *)v133;
                v133[5] = v133[2];
                v140 = *(v133 - 3);
                v133 -= 3;
                v141 = v134 < v140;
                if (v134 == v140)
                {
                  v142 = *(v139 - 2);
                  v141 = v135 < v142;
                  if (v135 == v142)
                    v141 = v138 < *(v139 - 1);
                }
              }
              while (v141);
              *v139 = v134;
              v139[1] = v135;
              v139[2] = v138;
            }
LABEL_227:
            v69 = v7 + 3;
            if (v7 + 3 == a2)
              return result;
          }
          v135 = v133[4];
          v136 = v133[1];
          v137 = v135 < v136;
          if (v135 == v136)
            v137 = v133[5] < v133[2];
          if (!v137)
            goto LABEL_227;
          goto LABEL_221;
        }
        if (v71)
          return result;
        v72 = 0;
        v73 = i;
        do
        {
          v74 = v73;
          v73 = v69;
          v75 = v74[3];
          if (v75 == *v74)
          {
            v76 = v74[4];
            v77 = v74[1];
            v78 = v76 < v77;
            if (v76 == v77)
              v78 = v74[5] < v74[2];
            if (!v78)
              goto LABEL_145;
          }
          else
          {
            if (v75 >= *v74)
              goto LABEL_145;
            v76 = v74[4];
          }
          v79 = v74[5];
          *(_QWORD *)v73 = *(_QWORD *)v74;
          v73[2] = v74[2];
          v80 = i;
          if (v74 == i)
            goto LABEL_144;
          v81 = v72;
          do
          {
            v82 = (char *)i + v81;
            v83 = *(int *)((char *)i + v81 - 12);
            v84 = v75 < v83;
            if (v75 != v83)
              goto LABEL_138;
            v85 = *((_DWORD *)v82 - 2);
            if (v76 == v85)
            {
              v84 = v79 < *(int *)((char *)i + v81 - 4);
LABEL_138:
              if (!v84)
              {
                v80 = v74;
                goto LABEL_144;
              }
              goto LABEL_142;
            }
            if (v76 >= v85)
            {
              v80 = (int *)((char *)i + v81);
              goto LABEL_144;
            }
LABEL_142:
            v74 -= 3;
            *(_QWORD *)v82 = *(_QWORD *)((char *)i + v81 - 12);
            *((_DWORD *)v82 + 2) = *(int *)((char *)i + v81 - 4);
            v81 -= 12;
          }
          while (v81);
          v80 = i;
LABEL_144:
          *v80 = v75;
          v80[1] = v76;
          v80[2] = v79;
LABEL_145:
          v69 = v73 + 3;
          v72 += 12;
        }
        while (v73 + 3 != a2);
        return result;
    }
  }
}

int *sub_20C59CB18(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;

  result = sub_20C59D108(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
  {
    v12 = a5[1];
    v13 = a4[1];
    v11 = v12 < v13;
    if (v12 == v13)
      v11 = a5[2] < a4[2];
  }
  if (v11)
  {
    v14 = a4[2];
    v15 = *(_QWORD *)a4;
    v16 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v16;
    *(_QWORD *)a5 = v15;
    a5[2] = v14;
    v17 = *a4 < *a3;
    if (*a4 == *a3)
    {
      v18 = a4[1];
      v19 = a3[1];
      v17 = v18 < v19;
      if (v18 == v19)
        v17 = a4[2] < a3[2];
    }
    if (v17)
    {
      v20 = a3[2];
      v21 = *(_QWORD *)a3;
      v22 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v22;
      *(_QWORD *)a4 = v21;
      a4[2] = v20;
      v23 = *a3 < *a2;
      if (*a3 == *a2)
      {
        v24 = a3[1];
        v25 = a2[1];
        v23 = v24 < v25;
        if (v24 == v25)
          v23 = a3[2] < a2[2];
      }
      if (v23)
      {
        v26 = a2[2];
        v27 = *(_QWORD *)a2;
        v28 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v28;
        *(_QWORD *)a3 = v27;
        a3[2] = v26;
        v29 = *a2 < *a1;
        if (*a2 == *a1)
        {
          v30 = a2[1];
          v31 = a1[1];
          v29 = v30 < v31;
          if (v30 == v31)
            v29 = a2[2] < a1[2];
        }
        if (v29)
        {
          v32 = a1[2];
          v33 = *(_QWORD *)a1;
          v34 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v34;
          *(_QWORD *)a2 = v33;
          a2[2] = v32;
        }
      }
    }
  }
  return result;
}

int *sub_20C59CCCC(int *result, int *a2, _DWORD *a3)
{
  int v3;
  BOOL v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;

  v3 = *a2;
  v4 = *a2 < *result;
  if (*a2 == *result)
  {
    v5 = a2[1];
    v6 = result[1];
    v4 = v5 < v6;
    if (v5 == v6)
      v4 = a2[2] < result[2];
  }
  if (!v4)
  {
    v13 = *a3 < v3;
    if (*a3 == v3)
    {
      v14 = a3[1];
      v15 = a2[1];
      v13 = v14 < v15;
      if (v14 == v15)
        v13 = a3[2] < a2[2];
    }
    if (v13)
    {
      v16 = a2[2];
      v17 = *(_QWORD *)a2;
      v18 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v18;
      *(_QWORD *)a3 = v17;
      a3[2] = v16;
      v19 = *a2 < *result;
      if (*a2 == *result)
      {
        v20 = a2[1];
        v21 = result[1];
        v19 = v20 < v21;
        if (v20 == v21)
          v19 = a2[2] < result[2];
      }
      if (v19)
      {
        v22 = result[2];
        v23 = *(_QWORD *)result;
        v24 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v24;
        *(_QWORD *)a2 = v23;
        a2[2] = v22;
      }
    }
    return result;
  }
  v7 = *a3 < v3;
  if (*a3 == v3)
  {
    v8 = a3[1];
    v9 = a2[1];
    v7 = v8 < v9;
    if (v8 == v9)
      v7 = a3[2] < a2[2];
  }
  if (v7)
  {
    v10 = result[2];
    v11 = *(_QWORD *)result;
    v12 = a3[2];
    *(_QWORD *)result = *(_QWORD *)a3;
    result[2] = v12;
LABEL_29:
    *(_QWORD *)a3 = v11;
    a3[2] = v10;
    return result;
  }
  v25 = result[2];
  v26 = *(_QWORD *)result;
  v27 = a2[2];
  *(_QWORD *)result = *(_QWORD *)a2;
  result[2] = v27;
  *(_QWORD *)a2 = v26;
  a2[2] = v25;
  v28 = *a3 < (int)v26;
  if (*a3 == (_DWORD)v26)
  {
    v29 = a3[1];
    v30 = a2[1];
    v28 = v29 < v30;
    if (v29 == v30)
      v28 = a3[2] < a2[2];
  }
  if (v28)
  {
    v10 = a2[2];
    v11 = *(_QWORD *)a2;
    v31 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v31;
    goto LABEL_29;
  }
  return result;
}

BOOL sub_20C59CE98(int *a1, int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *(a2 - 3);
      v8 = v7 < *a1;
      if (v7 == *a1)
      {
        v9 = *(a2 - 2);
        v10 = a1[1];
        v8 = v9 < v10;
        if (v9 == v10)
          v8 = *(a2 - 1) < a1[2];
      }
      if (v8)
      {
        v11 = a1[2];
        v12 = *(_QWORD *)a1;
        v13 = *(a2 - 1);
        *(_QWORD *)a1 = *(_QWORD *)v6;
        a1[2] = v13;
        *(_QWORD *)v6 = v12;
        *(a2 - 1) = v11;
      }
      return result;
    case 3uLL:
      sub_20C59CCCC(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_20C59D108(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20C59CB18(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v14 = a1 + 6;
      sub_20C59CCCC(a1, a1 + 3, a1 + 6);
      v15 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *v15;
    if (*v15 != *v14)
      break;
    v19 = v15[1];
    v20 = v14[1];
    v21 = v19 < v20;
    if (v19 == v20)
      v21 = v15[2] < v14[2];
    if (v21)
      goto LABEL_17;
LABEL_29:
    v14 = v15;
    v16 += 12;
    v15 += 3;
    if (v15 == a2)
      return 1;
  }
  if (v18 >= *v14)
    goto LABEL_29;
  v19 = v15[1];
LABEL_17:
  v22 = v15[2];
  *(_QWORD *)v15 = *(_QWORD *)v14;
  v15[2] = v14[2];
  v23 = a1;
  if (v14 != a1)
  {
    v24 = v16;
    do
    {
      v25 = *(int *)((char *)a1 + v24 + 12);
      if (v18 == v25)
      {
        v26 = *(int *)((char *)a1 + v24 + 16);
        v27 = v19 < v26;
        if (v19 == v26)
          v27 = v22 < *(int *)((char *)a1 + v24 + 20);
        if (!v27)
        {
          v23 = v14;
          goto LABEL_28;
        }
      }
      else if (v18 >= v25)
      {
        v23 = (int *)((char *)a1 + v24 + 24);
        goto LABEL_28;
      }
      v14 -= 3;
      *(_QWORD *)((char *)a1 + v24 + 24) = *(_QWORD *)((char *)a1 + v24 + 12);
      *(int *)((char *)a1 + v24 + 32) = *(int *)((char *)a1 + v24 + 20);
      v24 -= 12;
    }
    while (v24 != -24);
    v23 = a1;
  }
LABEL_28:
  *v23 = v18;
  v23[1] = v19;
  v23[2] = v22;
  if (++v17 != 8)
    goto LABEL_29;
  return v15 + 3 == a2;
}

int *sub_20C59D108(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;

  result = sub_20C59CCCC(a1, a2, a3);
  v9 = *a4 < *a3;
  if (*a4 == *a3)
  {
    v10 = a4[1];
    v11 = a3[1];
    v9 = v10 < v11;
    if (v10 == v11)
      v9 = a4[2] < a3[2];
  }
  if (v9)
  {
    v12 = a3[2];
    v13 = *(_QWORD *)a3;
    v14 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v14;
    *(_QWORD *)a4 = v13;
    a4[2] = v12;
    v15 = *a3 < *a2;
    if (*a3 == *a2)
    {
      v16 = a3[1];
      v17 = a2[1];
      v15 = v16 < v17;
      if (v16 == v17)
        v15 = a3[2] < a2[2];
    }
    if (v15)
    {
      v18 = a2[2];
      v19 = *(_QWORD *)a2;
      v20 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v20;
      *(_QWORD *)a3 = v19;
      a3[2] = v18;
      v21 = *a2 < *a1;
      if (*a2 == *a1)
      {
        v22 = a2[1];
        v23 = a1[1];
        v21 = v22 < v23;
        if (v22 == v23)
          v21 = a2[2] < a1[2];
      }
      if (v21)
      {
        v24 = a1[2];
        v25 = *(_QWORD *)a1;
        v26 = a2[2];
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[2] = v26;
        *(_QWORD *)a2 = v25;
        a2[2] = v24;
      }
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::~UsdGeomVisibilityAPI(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D030;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/visibilityAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdGeomVisibilityAPI pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D030;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C59D3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  return 5;
}

uint64_t sub_20C59D41C(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254989F38, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdGeomVisibilityAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C59D5D4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D030;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D030;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C59D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C59D5D4(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254989F38, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdGeomVisibilityAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989F40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989F40))
  {
    __cxa_guard_release(&qword_254989F40);
  }
  return &qword_254989F38;
}

void sub_20C59D6F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989F40);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989F50);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *)__cxa_guard_acquire(&qword_254989F50);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(v3);
      byte_254989F48 = sub_20C35BD7C((char *)&qword_254989F38, v4, v5);
      __cxa_guard_release(&qword_254989F50);
    }
  }
  return byte_254989F48;
}

void sub_20C59D76C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989F50);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(this);
  return &qword_254989F38;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetGuideVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 400), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C59D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::CreateGuideVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 400), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetProxyVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 904), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C59D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::CreateProxyVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 904), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetRenderVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 960), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C59DAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::CreateRenderVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 960), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254989F70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989F70))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *((_QWORD *)v5 + 50);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = *((_QWORD *)v9 + 113);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v13)
      v13 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v14 = *((_QWORD *)v13 + 120);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_254989F58, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989F58, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989F70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254989F90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254989F90))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C59DE8C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989F78, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989F90);
  }
  if (v1)
    return &qword_254989F78;
  else
    return &qword_254989F58;
}

void sub_20C59DDFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989F70);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C59DE8C(uint64_t **a1)
{
  qword_254989F80 = 0;
  unk_254989F88 = 0;
  qword_254989F78 = 0;
  sub_20BFC9A6C((char **)&qword_254989F78, ((unk_254989F60 - qword_254989F58) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_254989F78, (_QWORD *)qword_254989F80, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_254989F78, (_QWORD *)qword_254989F80, (uint64_t *)qword_254989F58, unk_254989F60, (unk_254989F60 - qword_254989F58) >> 3);
}

void sub_20C59DF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetPurposeVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  unint64_t v9;
  const char *v10;
  const char *Text;
  unsigned int *v12;
  unsigned int v13;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD v21[4];
  char v22;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6)
    v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 49) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetGuideVisibilityAttr(this, a3);
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7)
      v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 111) & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetProxyVisibilityAttr(this, a3);
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v8)
        v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v9 == (*((_QWORD *)v8 + 119) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetRenderVisibilityAttr(this, a3);
      }
      else
      {
        v21[0] = "usdGeom/visibilityAPI.cpp";
        v21[1] = "GetPurposeVisibilityAttr";
        v21[2] = 219;
        v21[3] = "UsdAttribute pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetPurposeVisibilityAttr(const TfToken &) const";
        v22 = 0;
        if (v9)
        {
          v10 = (const char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0)
            v10 = *(const char **)v10;
        }
        else
        {
          v10 = "";
        }
        sub_20C35C4F8((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
        sub_20C348EEC((uint64_t)v14, &v19);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected purpose '%s' getting purpose visibility attribute for <%s>.", v10, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
        if ((v18 & 7) != 0)
        {
          v12 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        sub_20BFD265C(&v16);
        if (v15)
          sub_20C35C614(v15);
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
  }
}

void sub_20C59E168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C59E18C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C59E260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C59E2B0()
{
  void *__p[2];
  char v1;

  sub_20C59E8F8();
  sub_20BDDC0E4(__p, "Xform");
  sub_20C59EA18((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C59E2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::~UsdGeomXform(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D088;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/xform.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdGeomXform pxrInternal__aapl__pxrReserved__::UsdGeomXform::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D088;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C59E4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_254989FA0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254989FA0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254989F98, "Xform");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254989F98, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989FA0);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_254989F98, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D088;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdGeom/xform.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdGeomXform pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D088;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C59E690(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989FA0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254989FB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254989FB0))
  {
    __cxa_guard_release(&qword_254989FB0);
  }
  return &qword_254989FA8;
}

void sub_20C59E734(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989FB0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXform::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomXform *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254989FC0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXform *)__cxa_guard_acquire(&qword_254989FC0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(v3);
      byte_254989FB8 = sub_20C35BD7C((char *)&qword_254989FA8, v4, v5);
      __cxa_guard_release(&qword_254989FC0);
    }
  }
  return byte_254989FB8;
}

void sub_20C59E7B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254989FC0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(this);
  return &qword_254989FA8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXform::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_254989FE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254989FE0))
  {
    qword_254989FC8 = 0;
    unk_254989FD0 = 0;
    qword_254989FD8 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989FC8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254989FE0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A000);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A000))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_254989FE8 = 0;
    unk_254989FF0 = 0;
    qword_254989FF8 = 0;
    sub_20BFE538C(&qword_254989FE8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254989FE8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A000);
  }
  if (v1)
    return &qword_254989FE8;
  else
    return &qword_254989FC8;
}

void sub_20C59E8E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A000);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C59E8F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C59E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C59EA18(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C59EAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D0E0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/xformable.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdGeomXformable pxrInternal__aapl__pxrReserved__::UsdGeomXformable::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D0E0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C59EC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A010);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A010))
  {
    __cxa_guard_release(&qword_25498A010);
  }
  return &qword_25498A008;
}

void sub_20C59ECE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A010);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A020);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)__cxa_guard_acquire(&qword_25498A020);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(v3);
      byte_25498A018 = sub_20C35BD7C((char *)&qword_25498A008, v4, v5);
      __cxa_guard_release(&qword_25498A020);
    }
  }
  return byte_25498A018;
}

void sub_20C59ED60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A020);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(this);
  return &qword_25498A008;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOpOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1336), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C59EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1336), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A040);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A040))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *((_QWORD *)v5 + 167);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498A028, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A028, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A040);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A060);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A060))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)1);
    sub_20C59F0C8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A048, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A060);
  }
  if (v1)
    return &qword_25498A048;
  else
    return &qword_25498A028;
}

void sub_20C59F078(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A040);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C59F0C8(uint64_t **a1)
{
  qword_25498A050 = 0;
  unk_25498A058 = 0;
  qword_25498A048 = 0;
  sub_20BFC9A6C((char **)&qword_25498A048, ((*(_QWORD *)algn_25498A030 - qword_25498A028) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A048, (_QWORD *)qword_25498A050, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A048, (_QWORD *)qword_25498A050, (uint64_t *)qword_25498A028, *(uint64_t **)algn_25498A030, (*(_QWORD *)algn_25498A030 - qword_25498A028) >> 3);
}

void sub_20C59F15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t IsDefined;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOpOrderAttr(a1, (uint64_t)&v8);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v8, v3);
  if ((IsDefined & 1) != 0)
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v8, a2);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return IsDefined;
}

void sub_20C59F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  std::string::size_type v20;
  const char *v21;
  unsigned int *v22;
  unsigned int v23;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v25;
  const char *Text;
  unint64_t v27;
  const char *v28;
  const char *p_p;
  unsigned int *v30;
  unsigned int v31;
  const char *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v37;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  std::type_info_vtbl *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  unint64_t v48;
  const char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  void *v54;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v55;
  int v56;
  int v57;
  uint64_t v58;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  int v64;
  char v65;
  uint64_t TypeName;
  unint64_t v67;
  int v68;
  int v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  int v75;
  int v76;
  char v77;
  uint64_t v78;
  std::string v79;
  __int128 v80;
  _QWORD *v81;
  std::type_info v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = 0u;
  v80 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v79.__r_.__value_.__r.__words[1]);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a4, a5, &v79);
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v79.__r_.__value_.__r.__words[1], v12, v13);
  v14 = v81;
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v79.__r_.__value_.__r.__words[1], v15, v16);
  v19 = &v81[v79.__r_.__value_.__l.__size_];
  if (v14 != v19)
  {
    while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (v79.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v14 == v19)
      {
        v14 = &v81[v79.__r_.__value_.__l.__size_];
        break;
      }
    }
  }
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v79.__r_.__value_.__r.__words[1], v17, v18);
  if (v14 == &v81[v79.__r_.__value_.__l.__size_])
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a4, 0, (std::string *)&v78);
    LODWORD(v70) = 3;
    v71 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v72);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v72 + 1);
    v73 = 0;
    v75 = 0;
    sub_20C35C4F8((uint64_t)&__p, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v78, (uint64_t)&v82);
    if ((v62 & 7) != 0)
    {
      v22 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
    sub_20BFD265C(&v61);
    if (v60)
      sub_20C35C614(v60);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v82, v24))
    {
      __p = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v82);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValueTypeName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&__p, v25) != (_DWORD)a3)
      {
        __p = "usdGeom/xformable.cpp";
        v60 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"AddXformOp";
        v61 = 208;
        v62 = (unint64_t)"UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(const UsdG"
                                "eomXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL) const";
        v63 = 0;
        sub_20C348EEC((uint64_t)&v82, &v68);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
        TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v82);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v67);
        v27 = v67 & 0xFFFFFFFFFFFFFFF8;
        if ((v67 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v28 = (const char *)(v27 + 16);
          if (*(char *)(v27 + 39) < 0)
            v28 = *(const char **)v28;
        }
        else
        {
          v28 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D178, a3, (uint64_t)&v54);
        if (v57 >= 0)
          v32 = (const char *)&v54;
        else
          v32 = (const char *)v54;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"XformOp <%s> has typeName '%s' which does not match the requested precision '%s'. Proceeding to use existing typeName / precision.", Text, v28, v32);
        if (SHIBYTE(v57) < 0)
          operator delete(v54);
        if ((v67 & 7) != 0)
        {
          v33 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
          do
            v34 = __ldxr(v33);
          while (__stlxr(v34 - 2, v33));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
        sub_20BFD265C(&v68);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v82, a5);
      sub_20C5A287C((uint64_t)&v70, (uint64_t)&__p);
      v76 = v64;
      v77 = v65;
      sub_20C5435DC((uint64_t)&__p);
    }
    else
    {
      sub_20C35C4F8((uint64_t)&v54, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(&__p, &v54, a2, a3, a4, a5);
      sub_20C5A287C((uint64_t)&v70, (uint64_t)&__p);
      v76 = v64;
      v77 = v65;
      sub_20C5435DC((uint64_t)&__p);
      if ((v58 & 7) != 0)
      {
        v30 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
      sub_20BFD265C(&v56);
      if (v55)
        sub_20C35C614(v55);
    }
    if ((v85 & 7) != 0)
    {
      v35 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v84);
    sub_20BFD265C(&v83);
    if (v82.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v82.__type_name);
    v37 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v70);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v37, v38))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v70, (unsigned int **)&__p);
      sub_20C5A2D98((uint64_t)&v79.__r_.__value_.__l.__size_, &__p);
      if ((__p & 7) != 0)
      {
        v39 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      v82.__type_name = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1, &v82, 0, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__ **)&__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v79.__r_.__value_.__r.__words[1], NAN);
      if ((v62 & 7) != 0)
      {
        v41 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
      sub_20BFD265C(&v61);
      if (v60)
        sub_20C35C614(v60);
      sub_20BF4C2D8((uint64_t)&v82);
      sub_20C5A29DC(a6, (uint64_t)&v70);
      *(_DWORD *)(a6 + 128) = v76;
      *(_BYTE *)(a6 + 132) = v77;
    }
    else
    {
      __p = "usdGeom/xformable.cpp";
      v60 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"AddXformOp";
      v61 = 224;
      v62 = (unint64_t)"UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(const UsdGeo"
                              "mXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL) const";
      v63 = 0;
      v43 = a2;
      v44 = (std::type_info_vtbl *)&v82;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D188, v43, (uint64_t)&v82);
      if (v84 < 0)
        v44 = v82.__vftable;
      v45 = a3;
      v46 = (const char *)&v54;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D178, v45, (uint64_t)&v54);
      if (v57 < 0)
        v46 = (const char *)v54;
      sub_20C3630C0(a1, &v68);
      v47 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
      v48 = *a4 & 0xFFFFFFFFFFFFFFF8;
      if (v48)
      {
        v49 = (const char *)(v48 + 16);
        if (*(char *)(v48 + 39) < 0)
          v49 = *(const char **)v49;
      }
      else
      {
        v49 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to add xform op of type %s and precision %s on prim at path <%s>. opSuffix=%s, isInverseOp=%d", (const char *)v44, v46, v47, v49, a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
      sub_20BFD265C(&v68);
      if (SHIBYTE(v57) < 0)
        operator delete(v54);
      if (SHIBYTE(v84) < 0)
        operator delete(v82.__vftable);
      *(_DWORD *)a6 = 3;
      *(_QWORD *)(a6 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 20));
      *(_QWORD *)(a6 + 24) = 0;
      *(_DWORD *)(a6 + 120) = 0;
    }
    sub_20C5435DC((uint64_t)&v70);
    if ((v78 & 7) != 0)
    {
      v50 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
  else
  {
    v70 = "usdGeom/xformable.cpp";
    v71 = "AddXformOp";
    v72 = 190;
    v73 = "UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(const UsdGeomXformOp::Type, cons"
          "t UsdGeomXformOp::Precision, const TfToken &, BOOL) const";
    v74 = 0;
    v20 = v79.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if ((v79.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0)
        v21 = *(const char **)v21;
    }
    else
    {
      v21 = "";
    }
    sub_20C59FB44((uint64_t *)&v79.__r_.__value_.__l.__size_);
    if (v61 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"The xformOp '%s' already exists in xformOpOrder [%s].", v21, p_p);
    if (SHIBYTE(v61) < 0)
      operator delete(__p);
    *(_DWORD *)a6 = 3;
    *(_QWORD *)(a6 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 20));
    *(_QWORD *)(a6 + 24) = 0;
    *(_DWORD *)(a6 + 120) = 0;
  }
  if ((v79.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v52 = (unsigned int *)(v79.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  sub_20C00918C(&v79.__r_.__value_.__l.__size_);
}

void sub_20C59F954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

uint64_t sub_20C59FB44(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  uint64_t v6;

  sub_20BDDE5E0((uint64_t)v3);
  v6 = a1[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v3, a1, (uint64_t)&v6, (void (*)(uint64_t, _QWORD *))sub_20C009174);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C59FC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BDDE6CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int v28;
  int v29;
  uint64_t v30;
  _BYTE v31[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  std::string v37;
  __int128 v38;
  _QWORD *v39;

  v39 = 0;
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = 0u;
  v38 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v37.__r_.__value_.__r.__words[1]);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a3, a4, &v37);
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37.__r_.__value_.__r.__words[1], v10, v11);
  v12 = v39;
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37.__r_.__value_.__r.__words[1], v13, v14);
  v17 = &v39[v37.__r_.__value_.__l.__size_];
  if (v12 != v17)
  {
    while ((*v12 & 0xFFFFFFFFFFFFFFF8) != (v37.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v12 == v17)
      {
        v12 = &v39[v37.__r_.__value_.__l.__size_];
        break;
      }
    }
  }
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37.__r_.__value_.__r.__words[1], v15, v16);
  if (v12 == &v39[v37.__r_.__value_.__l.__size_])
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 20));
    *(_QWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 120) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a3, 0, (std::string *)&v36);
    sub_20C35C4F8((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v26, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36, (uint64_t)v31);
    if ((v30 & 7) != 0)
    {
      v18 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_20BFD265C(&v28);
    if (v27)
      sub_20C35C614(v27);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)a5, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v31, a4);
    if ((v35 & 7) != 0)
    {
      v20 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_20BFD265C(&v33);
    if (v32)
      sub_20C35C614(v32);
    if ((v36 & 7) != 0)
    {
      v22 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  if ((v37.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v24 = (unsigned int *)(v37.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20C00918C(&v37.__r_.__value_.__l.__size_);
}

void sub_20C59FE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20C372B54((uint64_t)va);
  if ((v15 & 7) != 0)
  {
    v6 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  sub_20C00918C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 1, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTranslateOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddScaleOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 2, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetScaleOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 2, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateXOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 3, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateXOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 3, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateYOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 4, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateYOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 4, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateZOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 5, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateZOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 5, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateXYZOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 6, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateXYZOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 6, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateXZYOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 7, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateXZYOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 7, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateYXZOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 8, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateYXZOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 8, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateYZXOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 9, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateYZXOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 9, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateZXYOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 10, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateZXYOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 10, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateZYXOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 11, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateZYXOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 11, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddOrientOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 12, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrientOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 12, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(a1, 13, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTransformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp((uint64_t)this, 13, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v10;
  uint64_t v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__ *v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int v28;
  int v29;
  uint64_t v30;
  _OWORD v31[2];
  _QWORD *v32;
  _OWORD v33[2];
  uint64_t v34;
  std::type_info v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v33);
  if (a2)
  {
    if (sub_20C5A0444((uint64_t *)v33))
    {
      v6 = 1;
    }
    else
    {
      sub_20C008C78((uint64_t)v31, *(_QWORD *)&v33[0] + 1);
      v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v13)
        v13 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v11, v12);
      sub_20BF32220(v32, (_QWORD *)v13 + 13);
      if (*(_QWORD *)&v33[0])
      {
        v16 = 0;
        v17 = 1;
        do
        {
          sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v14, v15);
          v18 = v34;
          sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v19, v20);
          ++v16;
          sub_20BF32220(&v32[v17], (_QWORD *)(v18 + v17 * 8 - 8));
          ++v17;
        }
        while (v16 < *(_QWORD *)&v33[0]);
      }
      v35.__type_name = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr(this, &v35, 0, (uint64_t)&v26);
      v6 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v31, NAN);
      if ((v30 & 7) != 0)
      {
        v21 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_20BFD265C(&v28);
      if (v27)
        sub_20C35C614(v27);
      sub_20BF4C2D8((uint64_t)&v35);
      sub_20C00918C(v31);
    }
    goto LABEL_34;
  }
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  if (!*(_QWORD *)&v33[0])
  {
LABEL_15:
    v6 = 1;
    goto LABEL_33;
  }
  v7 = 0;
  v8 = 0;
  do
  {
    while (1)
    {
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v4, v5);
      v9 = v34;
      v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v10)
        v10 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if ((*(_QWORD *)(v9 + 8 * v7) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 13) & 0xFFFFFFFFFFFFFFF8))
        break;
      if ((v8 & 1) != 0)
      {
        sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v4, v5);
        sub_20C5A2F6C((uint64_t)v31, (uint64_t *)(v34 + 8 * v7));
        goto LABEL_12;
      }
      v8 = 0;
      if (++v7 >= *(_QWORD *)&v33[0])
        goto LABEL_15;
    }
    sub_20C00924C(v31);
LABEL_12:
    ++v7;
    v8 = 1;
  }
  while (v7 < *(_QWORD *)&v33[0]);
  v35.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr(this, &v35, 0, (uint64_t)&v26);
  v6 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v31, NAN);
  if ((v30 & 7) != 0)
  {
    v23 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  sub_20BF4C2D8((uint64_t)&v35);
LABEL_33:
  sub_20C00918C(v31);
LABEL_34:
  sub_20C00918C(v33);
  return v6;
}

void sub_20C5A0394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

BOOL sub_20C5A0444(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)a1[4];
  v3 = *a1;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (v4)
  {
    if (!v3)
      return v2 != (_QWORD *)(a1[4] + 8 * *a1);
  }
  else
  {
    v4 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    if (!v3)
      return v2 != (_QWORD *)(a1[4] + 8 * *a1);
  }
  v5 = &v2[v3];
  v6 = 8 * v3;
  while ((*v2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v4 + 13) & 0xFFFFFFFFFFFFFFF8))
  {
    ++v2;
    v6 -= 8;
    if (!v6)
    {
      v2 = v5;
      return v2 != (_QWORD *)(a1[4] + 8 * *a1);
    }
  }
  return v2 != (_QWORD *)(a1[4] + 8 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  _BOOL8 v1;
  _OWORD v3[2];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v3) & 1) != 0&& sub_20C5A0444((uint64_t *)v3);
  sub_20C00918C(v3);
  return v1;
}

void sub_20C5A0538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00918C(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v8;
  uint64_t *v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp **v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  const char *Text;
  const char *v27;
  int v29;
  int v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  __int128 i;
  _OWORD v37[2];
  uint64_t v38;
  std::type_info v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  sub_20C5A0994((uint64_t *)v37, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3) + a3);
  if (a3)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    if (!v8)
      v8 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    sub_20C5A2F6C((uint64_t)v37, (uint64_t *)v8 + 13);
  }
  for (i = *(_OWORD *)a2; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C5A0A80(&i))
  {
    v9 = sub_20C5A0A08(&i, v6, v7);
    v10 = sub_20C555914(*v9);
    sub_20C35C4F8((uint64_t)&v31, (uint64_t *)(v10 + 8), (_DWORD *)(v10 + 16));
    sub_20C35C4F8((uint64_t)&v39, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    v11 = (_DWORD)v31 == LODWORD(v39.__vftable)
       && v32 == (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v39.__type_name
       && v33 == v40
       && (v34 & 0xFFFFFFFFFFFFFFF8) == (v41 & 0xFFFFFFFFFFFFFFF8);
    if ((v41 & 7) != 0)
    {
      v12 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
    sub_20BFD265C(&v40);
    if (v39.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v39.__type_name);
    if ((v34 & 7) != 0)
    {
      v14 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    if (v32)
      sub_20C35C614(v32);
    if (!v11)
    {
      v31 = (unint64_t)"usdGeom/xformable.cpp";
      v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetXformOpOrder";
      v33 = 512;
      v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder(const vector<UsdG"
                              "eomXformOp> &, BOOL) const";
      v35 = 0;
      v24 = sub_20C5A0A08(&i, v16, v17);
      v25 = sub_20C555914(*v24);
      sub_20C348EEC(v25, (int *)&v39);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
      sub_20C3630C0(a1, &v29);
      v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"XformOp attribute <%s> does not belong to schema prim <%s>.", Text, v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_20BFD265C(&v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39.__vftable + 1);
      sub_20BFD265C(&v39);
      v21 = 0;
      goto LABEL_34;
    }
    v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp **)sub_20C5A0A08(&i, v16, v17);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(*v18, (unsigned int **)&v31);
    sub_20C5A2D98((uint64_t)v37, &v31);
    if ((v31 & 7) != 0)
    {
      v19 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  v39.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1, &v39, 0, (uint64_t)&v31);
  v21 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__ **)&v31, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v37, NAN);
  if ((v34 & 7) != 0)
  {
    v22 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  sub_20BF4C2D8((uint64_t)&v39);
LABEL_34:
  sub_20C00918C(v37);
  return v21;
}

void sub_20C5A08C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

void sub_20C5A0994(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = (uint64_t *)a1[4];
  if (!v4)
  {
    if (!a2)
      return;
    v6 = sub_20C009504((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3])
    v5 = a1;
  else
    v5 = v4 - 1;
  if (*v5 < a2)
  {
    v6 = sub_20C0095A0((uint64_t)a1, v4, a2, *a1);
LABEL_9:
    v7 = v6;
    sub_20C00918C(a1);
    a1[4] = (uint64_t)v7;
  }
}

_QWORD *sub_20C5A0A08(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::U"
            "sdGeomXformOp>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C5A0A80(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::UsdGeomXformOp>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdGeom"
            "XformOp>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 136;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::ClearXformOpOrder(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  uint64_t v1;
  _QWORD v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  v1 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder((uint64_t)this, v3, 0);
  v4 = (void **)v3;
  sub_20C54356C(&v4);
  return v1;
}

void sub_20C5A0B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C54356C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::MakeMatrixXform(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  const char *Text;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  char **v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  BOOL v24;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::ClearXformOpOrder(this);
  v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(this, &v24, 0, (uint64_t *)&v19);
  v4 = v19;
  v5 = (char *)v20;
  v12 = &v19;
  sub_20C54356C((void ***)&v12);
  if (v4 == v5)
  {
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp((uint64_t)this, 13, 0, &v19, 0, a2);
    if ((v19 & 7) != 0)
    {
      v10 = (unsigned int *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v19 = "usdGeom/xformable.cpp";
    v20 = "MakeMatrixXform";
    v21 = 533;
    v22 = "UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::MakeMatrixXform() const";
    v23 = 0;
    sub_20C35C4F8((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_20C348EEC((uint64_t)&v12, &v17);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"Could not clear xformOpOrder for <%s>", v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_20BFD265C(&v17);
    if ((v16 & 7) != 0)
    {
      v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 120) = 0;
  }
}

void sub_20C5A0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  unsigned int *v15;
  unsigned int v16;

  if ((a15 & 7) != 0)
  {
    v15 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, BOOL *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(this, a2, 0, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, BOOL *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t *v8;
  _DWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *i;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  unint64_t *Instance;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  char *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  const char *Text;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  int v43;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  char v59;
  unint64_t v60;
  char v61[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned __int8 v66;
  char v67[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72[4];
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v73;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2)
  {
    *a2 = 0;
  }
  else
  {
    v55 = "usdGeom/xformable.cpp";
    v56 = "_GetOrderedXformOps";
    v57 = 555;
    v58 = "vector<UsdGeomXformOp> pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(BOOL *, BOOL) const";
    v59 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"resetsXformStack is NULL.");
  }
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v72) & 1) != 0&& v72[0])
  {
    sub_20C5A1354(a4, v72[0]);
    v8 = (uint64_t *)((char *)this + 8);
    v9 = (_DWORD *)((char *)this + 16);
    sub_20C35C4F8((uint64_t)v67, v8, v9);
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v72, v10, v11);
    for (i = v73; ; i = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)i + 8))
    {
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v72, v12, v13);
      if (i == (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v73 + 8 * v72[0]))
        break;
      v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v15)
        v15 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if ((*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 13) & 0xFFFFFFFFFFFFFFF8))
      {
        if (a2)
          *a2 = 1;
        v23 = *a4;
        for (j = a4[1]; j != v23; j = sub_20C5435DC(j - 136))
          ;
        a4[1] = v23;
      }
      else
      {
        v66 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v67, i, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66, (uint64_t)v61);
        if (a3)
        {
          pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
          pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v55, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v61);
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!Instance)
            Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          v18 = v60;
          v19 = atomic_load(Instance + 18);
          if (v18 >= v19
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
          {
            v20 = a4[1];
            if (v20 >= a4[2])
            {
              v21 = sub_20C5A3204(a4, (uint64_t)&v55, &v66);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(a4[1], &v55, v66);
              v21 = v20 + 136;
              a4[1] = v20 + 136;
            }
            a4[1] = v21;
          }
          else
          {
            v50 = "usdGeom/xformable.cpp";
            v51 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_GetOrderedXformOps";
            v52 = 602;
            v53 = (unint64_t)"vector<UsdGeomXformOp> pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrder"
                                    "edXformOps(BOOL *, BOOL) const";
            v54 = 0;
            v28 = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
            if (v28)
            {
              v29 = (const char *)(v28 + 16);
              if (*(char *)(v28 + 39) < 0)
                v29 = *(const char **)v29;
            }
            else
            {
              v29 = "";
            }
            sub_20C35C4F8((uint64_t)&v42, v8, v9);
            sub_20C348EEC((uint64_t)&v42, &v48);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v50, (pxrInternal__aapl__pxrReserved__ *)"Unable to get attribute associated with the xformOp '%s', on the prim at path <%s>. Skipping xformOp in the computation of the local transformation at prim.", v37, v29, Text);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
            sub_20BFD265C(&v48);
            if ((v47 & 7) != 0)
            {
              v38 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
              do
                v39 = __ldxr(v38);
              while (__stlxr(v39 - 2, v38));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
            sub_20BFD265C(&v45);
            if (v44)
              sub_20C35C614(v44);
          }
          sub_20C373B34((uint64_t)&v55);
          pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
        }
        else if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v61, v16))
        {
          v24 = a4[1];
          if (v24 >= a4[2])
          {
            v25 = sub_20C5A3310(a4, (uint64_t)v61, &v66);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(a4[1], v61, v66);
            v25 = v24 + 136;
            a4[1] = v24 + 136;
          }
          a4[1] = v25;
        }
        else
        {
          v55 = "usdGeom/xformable.cpp";
          v56 = "_GetOrderedXformOps";
          v57 = 620;
          v58 = "vector<UsdGeomXformOp> pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(BOOL *, BOOL) const";
          v59 = 0;
          v26 = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
          if (v26)
          {
            v27 = (const char *)(v26 + 16);
            if (*(char *)(v26 + 39) < 0)
              v27 = *(const char **)v27;
          }
          else
          {
            v27 = "";
          }
          sub_20C35C4F8((uint64_t)&v50, v8, v9);
          sub_20C348EEC((uint64_t)&v50, &v42);
          v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v55, (pxrInternal__aapl__pxrReserved__ *)"Unable to get attribute associated with the xformOp '%s', on the prim at path <%s>. Skipping xformOp in the computation of the local transformation at prim.", v31, v27, v30);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
          sub_20BFD265C(&v42);
          if ((v53 & 7) != 0)
          {
            v32 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
          sub_20BFD265C(&v52);
          if (v51)
            sub_20C35C614(v51);
        }
        if ((v65 & 7) != 0)
        {
          v34 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v64);
        sub_20BFD265C(&v63);
        if (v62)
          sub_20C35C614(v62);
      }
    }
    if ((v71 & 7) != 0)
    {
      v40 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
    sub_20BFD265C(&v69);
    if (v68)
      sub_20C35C614(v68);
  }
  sub_20C00918C(v72);
}

void sub_20C5A1250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  uint64_t v28;

  sub_20C35C2E0(v28 - 176);
  sub_20C00918C((_QWORD *)(v28 - 144));
  sub_20C54356C(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A1354(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C381580(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 136 * v6;
    sub_20C5A3108(a1, v7);
    return sub_20C5A31B8((uint64_t)v7);
  }
  return result;
}

void sub_20C5A13F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A31B8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery(pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *this, const pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a2)
{
  __int128 v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(a2, (BOOL *)this + 24, 1, (uint64_t *)&v4);
  sub_20C5441EC((void **)this);
  *(_OWORD *)this = v4;
  *((_QWORD *)this + 2) = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20C54356C(&v6);
  return this;
}

void sub_20C5A1480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C54356C(&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation(uint64_t *a1, _OWORD *a2, double a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(a2, a1, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(_OWORD *a1, uint64_t *a2, double a3)
{
  double v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[8];
  _OWORD v23[8];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v23, 1.0);
  v7 = *a2;
  for (i = a2[1]; i != *a2; v7 = *a2)
  {
    if (i - 136 != v7
      && (v9 = sub_20C555914(i - 136), v10 = sub_20C555914(i - 272), *(_DWORD *)v9 == *(_DWORD *)v10)
      && *(_QWORD *)(v9 + 8) == *(_QWORD *)(v10 + 8)
      && *(_QWORD *)(v9 + 16) == *(_QWORD *)(v10 + 16)
      && (*(_QWORD *)(v9 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFF8)
      && (*(_BYTE *)(i - 4) != 0) != (*(_BYTE *)(i - 140) != 0))
    {
      i -= 136;
    }
    else
    {
      memset(v22, 0, sizeof(v22));
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(i - 136, v22, a3);
      v11 = (_OWORD *)atomic_load(&qword_25498A068);
      if (!v11)
      {
        v11 = operator new(0x80uLL);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v24, 1.0);
        v12 = v29;
        v11[4] = v28;
        v11[5] = v12;
        v13 = v31;
        v11[6] = v30;
        v11[7] = v13;
        v14 = v25;
        *v11 = v24;
        v11[1] = v14;
        v15 = v27;
        v11[2] = v26;
        v11[3] = v15;
        while (!__ldaxr(&qword_25498A068))
        {
          if (!__stlxr((unint64_t)v11, &qword_25498A068))
            goto LABEL_10;
        }
        __clrex();
        operator delete(v11);
        v11 = (_OWORD *)atomic_load(&qword_25498A068);
      }
LABEL_10:
      if (!pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)v22, (double *)v11))
        v6 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v23, (double *)v22);
    }
    i -= 136;
  }
  if (a1)
  {
    v17 = v23[5];
    a1[4] = v23[4];
    a1[5] = v17;
    v18 = v23[7];
    a1[6] = v23[6];
    a1[7] = v18;
    v19 = v23[1];
    *a1 = v23[0];
    a1[1] = v19;
    v20 = v23[3];
    a1[2] = v23[2];
    a1[3] = v20;
  }
  else
  {
    *(_QWORD *)&v24 = "usdGeom/xformable.cpp";
    *((_QWORD *)&v24 + 1) = "GetLocalTransformation";
    *(_QWORD *)&v25 = 965;
    *((_QWORD *)&v25 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMat"
                            "rix4d *, const vector<UsdGeomXformOp> &, const UsdTimeCode)";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'transform' pointer is NULL.", v6);
  }
  return a1 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::HasNonEmptyXformOpOrder(pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *this)
{
  return *(_QWORD *)this != *((_QWORD *)this + 1);
}

uint64_t sub_20C5A16E8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v7 = *a1;
  v8 = v3;
  if (v7 == v3)
    return 0;
  do
  {
    v4 = (unsigned int **)sub_20C5A0A08(&v7, a2, a3);
    v5 = sub_20C5A19B0(*v4);
    if ((v5 & 1) != 0)
      break;
    sub_20C5A0A80(&v7);
  }
  while (v7 != v8);
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  char XformOpOrderValue;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v8;
  uint64_t *v9;
  _DWORD *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v16;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  _BYTE v28[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  _OWORD v34[2];
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v35;

  v35 = 0;
  memset(v34, 0, sizeof(v34));
  XformOpOrderValue = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v34);
  if (*(_QWORD *)&v34[0])
    v5 = XformOpOrderValue;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
  {
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v34, v3, v4);
    v8 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v35 + 8 * *(_QWORD *)&v34[0]);
    v9 = (uint64_t *)((char *)this + 8);
    v10 = (_DWORD *)((char *)this + 16);
    while (1)
    {
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v34, v6, v7);
      if (v8 == v35)
        goto LABEL_28;
      v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v11)
        v11 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      v12 = *((_QWORD *)v8 - 1);
      v8 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v8 - 8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 13) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v33 = 0;
      sub_20C35C4F8((uint64_t)&v23, v9, v10);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v23, v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v33, (uint64_t)v28);
      if ((v27 & 7) != 0)
      {
        v13 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_20BFD265C(&v25);
      if (v24)
        sub_20C35C614(v24);
      if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v28, v15))goto LABEL_20;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v23, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v28, v33);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v23);
      if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v16, v17)
        || (sub_20C5A19B0(&v23) & 1) == 0)
      {
        break;
      }
      sub_20C5435DC((uint64_t)&v23);
      v18 = 0;
LABEL_21:
      if ((v32 & 7) != 0)
      {
        v19 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      sub_20BFD265C(&v30);
      if (v29)
        sub_20C35C614(v29);
      if ((v18 & 1) == 0)
      {
        v22 = 1;
        goto LABEL_29;
      }
    }
    sub_20C5435DC((uint64_t)&v23);
LABEL_20:
    v18 = 1;
    goto LABEL_21;
  }
LABEL_28:
  v22 = 0;
LABEL_29:
  sub_20C00918C(v34);
  return v22;
}

void sub_20C5A1948(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A19B0(unsigned int *a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = a1[30];
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return off_24C53D158[v1]((int)&v4, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying(uint64_t a1, uint64_t *a2, char *a3)
{
  if (*a2 == a2[1])
    return 0;
  else
    return sub_20C5A16E8(a2, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t UnionedTimeSamplesInInterval;
  pxrInternal__aapl__pxrReserved__::UsdObject *v16;
  unint64_t v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::UsdObject **v19;

  v6 = *a1;
  v8 = a1[1] - v6;
  if (v8 == 136)
    return sub_20C5A1B8C(v6, (uint64_t)a2, a3);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_20C3AAA6C((uint64_t *)&v16, 0xF0F0F0F0F0F0F0F1 * (v8 >> 3));
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      v12 = sub_20C555914(v10);
      v13 = v17;
      if (v17 >= v18)
      {
        v14 = sub_20C3AF144((uint64_t *)&v16, v12);
      }
      else
      {
        sub_20C37F2BC((uint64_t)&v18, v17, v12);
        v14 = v13 + 32;
      }
      v17 = v14;
      v10 += 136;
    }
    while (v10 != v11);
  }
  UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(&v16, a2, a3);
  v19 = &v16;
  sub_20C3AEE3C((void ***)&v19);
  return UnionedTimeSamplesInInterval;
}

void sub_20C5A1B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C3AEE3C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A1B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C53D168[v3])(&v6, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t TimeSamplesInInterval;
  uint64_t v7[3];
  BOOL v8;
  void **v9;

  v8 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(a1, &v8, 0, v7);
  TimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(v7, a2, a3);
  v9 = (void **)v7;
  sub_20C54356C(&v9);
  return TimeSamplesInInterval;
}

void sub_20C5A1C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C54356C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamples(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamplesInInterval(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v9;
  const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v10;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v11;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v12;
  uint64_t UnionedTimeSamplesInInterval;
  pxrInternal__aapl__pxrReserved__::UsdObject *v15;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v16;
  unint64_t v17;
  pxrInternal__aapl__pxrReserved__::UsdObject **v18;

  v6 = *a1;
  v8 = a1[1] - v6;
  if (v8 == 136)
  {
    sub_20C5A1B8C(v6, (uint64_t)a2, a3);
    v8 = a1[1] - *a1;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_20C373004((uint64_t *)&v15, 0xF0F0F0F0F0F0F0F1 * (v8 >> 3));
  v9 = (const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)*a1;
  v10 = (const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)a1[1];
  while (v9 != v10)
  {
    if (*((_DWORD *)v9 + 30) != 1)
      sub_20BF1C1FC();
    v11 = v16;
    if ((unint64_t)v16 >= v17)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_20C5A341C((uint64_t *)&v15, v9);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(v16, v9);
      v12 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)((char *)v11 + 120);
    }
    v16 = v12;
    v9 = (const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)((char *)v9 + 136);
  }
  UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(&v15, a2, a3);
  v18 = &v15;
  sub_20C373C0C((void ***)&v18);
  return UnionedTimeSamplesInInterval;
}

void sub_20C5A1D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C373C0C(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, uint64_t a2)
{
  uint64_t TimeSamplesInInterval;
  uint64_t v5[3];
  BOOL v6;
  void **v7;
  char v8;
  uint64_t v9;
  char v10;

  v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(a1, &v6, 0, v5);
  v7 = (void **)0xFFF0000000000000;
  v8 = 0;
  v9 = 0x7FF0000000000000;
  v10 = 0;
  TimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v7, a2);
  v7 = (void **)v5;
  sub_20C54356C(&v7);
  return TimeSamplesInInterval;
}

void sub_20C5A1E44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_20C54356C((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::IsAttributeIncludedInLocalTransform(pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char *a3)
{
  uint64_t v3;
  uint64_t *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)this;
  v12 = v3;
  if (v11 == v3)
    return 0;
  do
  {
    v5 = sub_20C5A0A08(&v11, (uint64_t)a2, a3);
    v6 = (_DWORD *)sub_20C555914(*v5);
    v7 = *(_QWORD *)sub_20C398E78(v6) & 0xFFFFFFFFFFFFFFF8;
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    v9 = v7 == v8;
    if (v7 == v8)
      break;
    sub_20C5A0A80(&v11);
  }
  while (v11 != v12);
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, uint64_t a2, _BYTE *a3, double a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int XformOpOrderValue;
  uint64_t v12;
  char *v13;
  char v14;
  unsigned __int8 *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  unint64_t *v20;
  uint64_t v21;
  char *v22;
  unint64_t *v23;
  _QWORD *v24;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v26;
  uint64_t *v27;
  pxrInternal__aapl__pxrReserved__::TfToken *Identifier;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v35;
  const void **v36;
  uint64_t *v37;
  pxrInternal__aapl__pxrReserved__::TfToken *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v50;
  BOOL v51;
  void *v52;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v53;
  unsigned int *v54;
  unsigned int v55;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v56;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v57;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v58;
  _OWORD *v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *Text;
  char *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned int v75;
  _OWORD v77[8];
  void *__s1[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v87;
  int v88;
  int v89;
  uint64_t v90;
  BOOL v91;
  _OWORD v92[2];
  uint64_t v93;
  __int128 v94;
  _OWORD v95[7];

  if (!a2)
  {
    __s1[0] = "usdGeom/xformable.cpp";
    __s1[1] = "GetLocalTransformation";
    *(_QWORD *)&v79 = 846;
    *((_QWORD *)&v79 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix4d *"
                            ", BOOL *, const UsdTimeCode) const";
    LOBYTE(v80) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__s1, 1, (pxrInternal__aapl__pxrReserved__ *)"transform is NULL.");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)__s1, 1.0);
  v7 = v83;
  *(_OWORD *)(a2 + 64) = v82;
  *(_OWORD *)(a2 + 80) = v7;
  v8 = v85;
  *(_OWORD *)(a2 + 96) = v84;
  *(_OWORD *)(a2 + 112) = v8;
  v9 = v79;
  *(_OWORD *)a2 = *(_OWORD *)__s1;
  *(_OWORD *)(a2 + 16) = v9;
  v10 = v81;
  *(_OWORD *)(a2 + 32) = v80;
  *(_OWORD *)(a2 + 48) = v10;
  if (!a3)
  {
    __s1[0] = "usdGeom/xformable.cpp";
    __s1[1] = "GetLocalTransformation";
    *(_QWORD *)&v79 = 853;
    *((_QWORD *)&v79 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix4d *"
                            ", BOOL *, const UsdTimeCode) const";
    LOBYTE(v80) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__s1, 1, (pxrInternal__aapl__pxrReserved__ *)"resetsXformStack is NULL.");
    return 0;
  }
  *a3 = 0;
  v93 = 0;
  memset(v92, 0, sizeof(v92));
  XformOpOrderValue = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v92);
  v75 = XformOpOrderValue;
  if (*(_QWORD *)&v92[0])
    v14 = XformOpOrderValue;
  else
    v14 = 0;
  if ((v14 & 1) != 0)
  {
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v92, v12, v13);
    v17 = v93 + 8 * *(_QWORD *)&v92[0];
    v18 = (uint64_t *)((char *)a1 + 8);
    v19 = (_DWORD *)((char *)a1 + 16);
    v20 = &qword_25498A068;
    while (1)
    {
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v92, (uint64_t)v15, v16);
      if (v17 == v93)
        goto LABEL_112;
      v23 = v20;
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v92, v21, v22);
      v24 = (_QWORD *)(v17 - 8);
      if (v17 - 8 != v93)
        break;
LABEL_72:
      v53 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v53)
        v53 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if ((*v24 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v53 + 13) & 0xFFFFFFFFFFFFFFF8))
      {
        *a3 = 1;
        goto LABEL_112;
      }
      v91 = 0;
      sub_20C35C4F8((uint64_t)__s1, v18, v19);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)__s1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(v17 - 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v91, (uint64_t)v86);
      v20 = v23;
      if ((BYTE8(v79) & 7) != 0)
      {
        v54 = (unsigned int *)(*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v79 + 1);
      sub_20BFD265C(&v79);
      if (__s1[1])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__s1[1]);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v86, v56))
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)__s1, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v86, v91);
        v57 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)__s1);
        if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v57, v58))
        {
          memset(v77, 0, sizeof(v77));
          pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform((uint64_t)__s1, v77, a4);
          v59 = (_OWORD *)atomic_load(v23);
          if (!v59)
          {
            v59 = operator new(0x80uLL);
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v94, 1.0);
            v69 = v95[4];
            v59[4] = v95[3];
            v59[5] = v69;
            v70 = v95[6];
            v59[6] = v95[5];
            v59[7] = v70;
            v71 = v95[0];
            *v59 = v94;
            v59[1] = v71;
            v72 = v95[2];
            v59[2] = v95[1];
            v59[3] = v72;
            while (!__ldaxr(v23))
            {
              if (!__stlxr((unint64_t)v59, v23))
                goto LABEL_83;
            }
            __clrex();
            operator delete(v59);
            v59 = (_OWORD *)atomic_load(v23);
          }
LABEL_83:
          if (!pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)v77, (double *)v59))
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a2, (double *)v77);
        }
        sub_20C5435DC((uint64_t)__s1);
      }
      else
      {
        __s1[0] = "usdGeom/xformable.cpp";
        __s1[1] = "GetLocalTransformation";
        *(_QWORD *)&v79 = 904;
        *((_QWORD *)&v79 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix"
                                "4d *, BOOL *, const UsdTimeCode) const";
        LOBYTE(v80) = 0;
        v60 = *v24 & 0xFFFFFFFFFFFFFFF8;
        if (v60)
        {
          v61 = (const char *)(v60 + 16);
          if (*(char *)(v60 + 39) < 0)
            v61 = *(const char **)v61;
        }
        else
        {
          v61 = "";
        }
        v62 = sub_20C35C4F8((uint64_t)&v94, v18, v19);
        sub_20C348EEC(v62, (int *)v77);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v77);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__s1, (pxrInternal__aapl__pxrReserved__ *)"Unable to get attribute associated with the xformOp '%s', on the prim at path <%s>. Skipping xformOp in the computation of the local transformation at prim.", v64, v61, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v77 + 1);
        sub_20BFD265C(v77);
        if ((BYTE8(v95[0]) & 7) != 0)
        {
          v65 = (unsigned int *)(*((_QWORD *)&v95[0] + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v66 = __ldxr(v65);
          while (__stlxr(v66 - 2, v65));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v95 + 1);
        sub_20BFD265C(v95);
        if (*((_QWORD *)&v94 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v94 + 1));
      }
      if ((v90 & 7) != 0)
      {
        v67 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v89);
      sub_20BFD265C(&v88);
      if (v87)
        sub_20C35C614(v87);
LABEL_102:
      v17 -= 8;
    }
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A2AEC();
    if ((*((_QWORD *)EmptyString + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v26 = (const void **)((*((_QWORD *)EmptyString + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      v26 = (const void **)EmptyString;
    }
    if ((*v24 & 0xFFFFFFFFFFFFFFF8) != 0)
      v27 = (uint64_t *)((*v24 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    Identifier = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v26, (const void **)v27, (uint64_t)__s1);
    if ((*(_QWORD *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      v29 = (uint64_t *)((*(_QWORD *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Identifier);
    v16 = (char *)__s1[1];
    if ((SBYTE7(v79) & 0x80u) == 0)
      v30 = (void *)BYTE7(v79);
    else
      v30 = __s1[1];
    v31 = *((unsigned __int8 *)v29 + 23);
    v32 = (char)v31;
    if ((v31 & 0x80u) != 0)
      v31 = v29[1];
    if (v30 == (void *)v31)
    {
      if (v32 >= 0)
        v15 = (unsigned __int8 *)v29;
      else
        v15 = (unsigned __int8 *)*v29;
      if ((BYTE7(v79) & 0x80) != 0)
      {
        v34 = __s1[0];
        if (!memcmp(__s1[0], v15, (size_t)__s1[1]))
        {
          operator delete(v34);
LABEL_101:
          v17 -= 8;
          goto LABEL_102;
        }
      }
      else
      {
        if (!BYTE7(v79))
          goto LABEL_101;
        v33 = 0;
        while (*((unsigned __int8 *)__s1 + v33) == v15[v33])
        {
          if (BYTE7(v79) == ++v33)
            goto LABEL_101;
        }
      }
    }
    v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A2AEC();
    if ((*((_QWORD *)v35 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v36 = (const void **)((*((_QWORD *)v35 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
      v36 = (const void **)v35;
    }
    if ((*(_QWORD *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      v37 = (uint64_t *)((*(_QWORD *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
    v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v36, (const void **)v37, (uint64_t)&v94);
    if ((*v24 & 0xFFFFFFFFFFFFFFF8) != 0)
      v39 = (uint64_t *)((*v24 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
    v16 = (char *)*((_QWORD *)&v94 + 1);
    if ((SBYTE7(v95[0]) & 0x80u) == 0)
      v40 = BYTE7(v95[0]);
    else
      v40 = *((_QWORD *)&v94 + 1);
    v41 = *((unsigned __int8 *)v39 + 23);
    v42 = (char)v41;
    if ((v41 & 0x80u) != 0)
      v41 = v39[1];
    if (v40 == v41)
    {
      if (v42 >= 0)
        v15 = (unsigned __int8 *)v39;
      else
        v15 = (unsigned __int8 *)*v39;
      if ((BYTE7(v95[0]) & 0x80) != 0)
      {
        v52 = (void *)v94;
        v51 = memcmp((const void *)v94, v15, *((size_t *)&v94 + 1)) == 0;
        goto LABEL_66;
      }
      if (BYTE7(v95[0]))
      {
        v43 = BYTE7(v95[0]) - 1;
        v44 = (unsigned __int8 *)&v94;
        do
        {
          v46 = *v44++;
          v45 = v46;
          v48 = *v15++;
          v47 = v48;
          v50 = v43-- != 0;
          v51 = v45 == v47;
        }
        while (v45 == v47 && v50);
        if ((BYTE7(v95[0]) & 0x80) != 0)
        {
LABEL_64:
          v52 = (void *)v94;
LABEL_66:
          operator delete(v52);
        }
      }
      else
      {
        v51 = 1;
      }
LABEL_68:
      if (SBYTE7(v79) < 0)
      {
        operator delete(__s1[0]);
        if (v51)
        {
LABEL_70:
          v17 -= 8;
          v20 = v23;
          goto LABEL_102;
        }
      }
      else if (v51)
      {
        goto LABEL_70;
      }
      goto LABEL_72;
    }
    v51 = 0;
    if ((BYTE7(v95[0]) & 0x80) == 0)
      goto LABEL_68;
    goto LABEL_64;
  }
LABEL_112:
  sub_20C00918C(v92);
  return v75;
}

void sub_20C5A2580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_20C00918C(&a60);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, _OWORD *a2, BOOL *a3, uint64_t *a4, double a5)
{
  _QWORD v9[4];
  char v10;

  if (a3)
  {
    *a3 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetResetXformStack(a1);
  }
  else
  {
    v9[0] = "usdGeom/xformable.cpp";
    v9[1] = "GetLocalTransformation";
    v9[2] = 924;
    v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix4d *, BOOL *, const "
            "vector<UsdGeomXformOp> &, const UsdTimeCode) const";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"resetsXformStack is NULL.");
  }
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(a2, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::IsTransformationAffectedByAttrNamed(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 167) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  else
    return pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(this, a2);
}

uint64_t *sub_20C5A2758()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C591C74((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5A282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A287C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 120);
  v4 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C53D128[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C53D138[v4])(&v5, result, a2);
}

int *sub_20C5A2908(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_20C5A2918(*a1, a2, a3);
}

uint64_t sub_20C5A2910(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_20C5A29BC(*a1, a2, a3);
}

int *sub_20C5A2918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *result;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (*(_DWORD *)(a1 + 120))
    return (int *)sub_20C544500(a1, a3);
  *(_DWORD *)a2 = *(_DWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v6;
  if (v7)
    sub_20C35C614(v7);
  sub_20BFD3EBC((int *)(a2 + 16), (int *)(a3 + 16));
  result = sub_20BFD3F10((int *)(a2 + 20), (int *)(a3 + 20));
  if (a3 != a2)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t sub_20C5A29BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 120) == 1)
    return sub_20C547D2C(a2, a3);
  else
    return sub_20C544600(a1, a3);
}

uint64_t sub_20C5A29DC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  sub_20C5A2A10(a1, a2);
  return a1;
}

uint64_t sub_20C5A2A10(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 120);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C53D128[v4])(&v7, result);
  *(_DWORD *)(v3 + 120) = -1;
  v5 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C53D148[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

uint64_t sub_20C5A2A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20C38579C(a2, a3);
}

uint64_t sub_20C5A2AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20C373D44(a2, a3);
}

BOOL sub_20C5A2AB4(int a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(this, this);
}

BOOL sub_20C5A2ABC(int a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(this, this);
}

uint64_t sub_20C5A2AC4(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(a2, **a1, (uint64_t)(*a1)[1]);
}

uint64_t sub_20C5A2AD8(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(a2, **a1, (uint64_t)(*a1)[1]);
}

unint64_t sub_20C5A2AEC()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A070);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "transform", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "!invert!", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498A070))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A070))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A070);
  }
  return (unint64_t)v0;
}

void sub_20C5A2CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5A2D98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  _QWORD v13[4];
  char v14;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
      *a2 = 0;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_15:
    v9 = 1;
    do
    {
      v10 = v9;
      v9 *= 2;
    }
    while (v10 < v4 + 1);
    v11 = sub_20C0095A0(a1, *(uint64_t **)(a1 + 32), v10, *(_QWORD *)a1);
    v11[v4] = *a2;
    *a2 = 0;
    sub_20C00918C((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v11;
    goto LABEL_13;
  }
  v13[0] = "vt/array.h";
  v13[1] = "emplace_back";
  v13[2] = 433;
  v13[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <pxrInternal__aapl__pxrReserved__::TfToken>]";
  v14 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v12 = 4;
    else
      v12 = 3;
  }
  else
  {
    v12 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v12);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *sub_20C5A2EE4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *result;
  void *v4;

  result = sub_20C5A2F2C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::~UsdGeomXformOpTypes_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *sub_20C5A2F2C()
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::UsdGeomXformOpTypes_StaticTokenType(v0);
  return v0;
}

void sub_20C5A2F58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C5A2F6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  _QWORD v20[4];
  char v21;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_19;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_19;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      *(_QWORD *)(v5 + 8 * v4) = *a2;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *(_QWORD *)(v5 + 8 * v4) &= 0xFFFFFFFFFFFFFFF8;
      }
LABEL_17:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_19:
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20C0095A0(a1, *(uint64_t **)(a1 + 32), v13, *(_QWORD *)a1);
    v15 = v14;
    v16 = *a2;
    v14[v4] = *a2;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v14[v4] &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C00918C((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_17;
  }
  v20[0] = "vt/array.h";
  v20[1] = "emplace_back";
  v20[2] = 433;
  v20[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <const pxrInternal__aapl__pxrReserved__::TfToken &>]";
  v21 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v19 = 4;
    else
      v19 = 3;
  }
  else
  {
    v19 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v19);
}

uint64_t sub_20C5A3108(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v5 == *a1)
  {
    result = a2[1];
  }
  else
  {
    do
    {
      result = sub_20C5A29DC(v6 - 136, v5 - 136);
      v8 = *(_DWORD *)(v5 - 8);
      *(_BYTE *)(v6 - 4) = *(_BYTE *)(v5 - 4);
      *(_DWORD *)(v6 - 8) = v8;
      v5 -= 136;
      v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  v9 = *a1;
  *a1 = result;
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C5A31B8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    sub_20C5435DC(i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C5A3204(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xF0F0F0F0F0F0F0)
    v11 = 0x1E1E1E1E1E1E1E1;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20C381580(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[136 * v5];
  v17 = v16;
  v18 = &v12[136 * v11];
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(v16, a2, *a3);
  v17 = v16 + 136;
  sub_20C5A3108(a1, &v15);
  v13 = a1[1];
  sub_20C5A31B8((uint64_t)&v15);
  return v13;
}

void sub_20C5A32FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A31B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A3310(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xF0F0F0F0F0F0F0)
    v11 = 0x1E1E1E1E1E1E1E1;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20C381580(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[136 * v5];
  v17 = v16;
  v18 = &v12[136 * v11];
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(v16, a2, *a3);
  v17 = v16 + 136;
  sub_20C5A3108(a1, &v15);
  v13 = a1[1];
  sub_20C5A31B8((uint64_t)&v15);
  return v13;
}

void sub_20C5A3408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A31B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A341C(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C373D00(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v10[120 * v4];
  v16 = &v10[120 * v9];
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(v14, a2);
  v15 = (char *)v14 + 120;
  sub_20C373C7C(a1, &v13);
  v11 = a1[1];
  sub_20C373DF4((uint64_t)&v13);
  return v11;
}

void sub_20C5A350C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C373DF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::~UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  void **v43;

  v43 = (void **)((char *)this + 112);
  sub_20BEEB2B8(&v43);
  v2 = *((_QWORD *)this + 13);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 11);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 10);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 9);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 8);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 7);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 6);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 5);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 4);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 3);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 2);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v41 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v55 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "translate", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v55, "scale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "rotateX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "rotateY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "rotateZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "rotateXYZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "rotateXZY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "rotateYXZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "rotateYZX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "rotateZXY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "rotateZYX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "orient", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "transform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "!resetXformStack!", 0);
  v2 = *(_QWORD *)this;
  v56 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v55;
  v57 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v58 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v59 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v60 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v61 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v62 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v63 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v64 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v65 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v66 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v67 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v68 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v69 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v44 = operator new(0x70uLL);
  v45 = 0;
  *((_QWORD *)this + 14) = v44;
  *((_QWORD *)this + 15) = v44;
  *((_QWORD *)this + 16) = v44 + 14;
  do
  {
    v46 = *(&v56 + v45);
    *v44 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
      if ((v48 & 1) == 0)
        *v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v45;
    ++v44;
  }
  while (v45 != 14);
  v49 = &v70;
  *((_QWORD *)this + 15) = v44;
  do
  {
    v51 = *--v49;
    v50 = v51;
    if ((v51 & 7) != 0)
    {
      v52 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
  }
  while (v49 != &v56);
  return this;
}

void sub_20C5A3C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, void **a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;

  sub_20BEEB2B8(&a15);
  v41 = (char *)&a31;
  while (1)
  {
    v43 = *((_QWORD *)v41 - 1);
    v41 -= 8;
    v42 = v43;
    if ((v43 & 7) != 0)
    {
      v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if (v41 == &a17)
    {
      if ((*v35 & 7) != 0)
      {
        v46 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v34 & 7) != 0)
      {
        v48 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*v33 & 7) != 0)
      {
        v50 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v32 & 7) != 0)
      {
        v52 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v40 & 7) != 0)
      {
        v54 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v39 & 7) != 0)
      {
        v56 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v38 & 7) != 0)
      {
        v58 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v37 & 7) != 0)
      {
        v60 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v36 & 7) != 0)
      {
        v62 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*a11 & 7) != 0)
      {
        v64 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*a12 & 7) != 0)
      {
        v66 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*a13 & 7) != 0)
      {
        v68 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a14 & 7) != 0)
      {
        v70 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v31 & 7) != 0)
      {
        v72 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5A3EBC()
{
  JUMPOUT(0x20C5A3E04);
}

void sub_20C5A3EC4()
{
  JUMPOUT(0x20C5A3E28);
}

void sub_20C5A3ECC()
{
  JUMPOUT(0x20C5A3E4CLL);
}

void sub_20C5A3ED4()
{
  JUMPOUT(0x20C5A3E70);
}

void sub_20C5A3EDC()
{
  JUMPOUT(0x20C5A3E94);
}

void sub_20C5A3EE8()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeInvalid");
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeTranslate");
  sub_20BDDC0E4(__p, "translate");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeScale");
  sub_20BDDC0E4(__p, "scale");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateX");
  sub_20BDDC0E4(__p, "rotateX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateY");
  sub_20BDDC0E4(__p, "rotateY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateZ");
  sub_20BDDC0E4(__p, "rotateZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateXYZ");
  sub_20BDDC0E4(__p, "rotateXYZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateXZY");
  sub_20BDDC0E4(__p, "rotateXZY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateYXZ");
  sub_20BDDC0E4(__p, "rotateYXZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateYZX");
  sub_20BDDC0E4(__p, "rotateYZX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 9, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateZXY");
  sub_20BDDC0E4(__p, "rotateZXY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 10, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeRotateZYX");
  sub_20BDDC0E4(__p, "rotateZYX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 11, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeOrient");
  sub_20BDDC0E4(__p, "orient");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 12, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::TypeTransform");
  sub_20BDDC0E4(__p, "transform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D188, 13, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::PrecisionDouble");
  sub_20BDDC0E4(__p, "Double");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D178, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::PrecisionFloat");
  sub_20BDDC0E4(__p, "Float");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D178, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdGeomXformOp::PrecisionHalf");
  sub_20BDDC0E4(__p, "Half");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D178, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C5A44E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, char a3)
{
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  _DWORD *v8;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  unsigned int *v13;
  unsigned int v14;
  const char *Text;
  int v17;
  int v18;
  void **v19[4];
  char v20;
  uint64_t v21[3];

  v6 = sub_20C37FE20((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v6 + 120) = 0;
  *(_DWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 132) = a3;
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, v7) & 1) != 0)
  {
    v8 = (_DWORD *)sub_20C555914((uint64_t)this);
    v9 = sub_20C398E78(v8);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C555914((uint64_t)this);
    pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(v10, v21);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v9, v11))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v19);
      *((_DWORD *)this + 32) = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeEnum((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v19, v12);
      if (((uint64_t)v19[0] & 7) != 0)
      {
        v13 = (unsigned int *)((unint64_t)v19[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
    }
    else
    {
      v19[0] = (void **)"usdGeom/xformOp.cpp";
      v19[1] = (void **)"UsdGeomXformOp";
      v19[2] = (void **)133;
      v19[3] = (void **)"pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(const UsdAttribute &, BOOL)";
      v20 = 0;
      sub_20C348EEC((uint64_t)a2, &v17);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform op: <%s>.", Text);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_20BFD265C(&v17);
    }
    v19[0] = (void **)v21;
    sub_20BDE5038(v19);
  }
  return this;
}

void sub_20C5A46D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  a11 = (void **)&a16;
  sub_20BDE5038(&a11);
  sub_20C5435DC(v16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A50FC();
  if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)v4 + 23) >= 0)
    v5 = (const char *)v4;
  else
    v5 = (const char *)*v4;
  v6 = *((char *)EmptyString + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)EmptyString + 23);
  else
    v7 = EmptyString[1];
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)EmptyString;
  else
    v11 = (const char *)*EmptyString;
  return strncmp(v11, v5, v10) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeEnum(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v15;
  unint64_t v16;
  const char *v17;
  _QWORD v19[4];
  char v20;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v3)
    v3 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFF8))
    return 13;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v4)
    v4 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v5)
    v5 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 5) & 0xFFFFFFFFFFFFFFF8))
    return 6;
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v6)
    v6 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
    return 2;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v7)
    v7 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
    return 3;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v8)
    v8 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 3) & 0xFFFFFFFFFFFFFFF8))
    return 4;
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v9)
    v9 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 4) & 0xFFFFFFFFFFFFFFF8))
    return 5;
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v10)
    v10 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 6) & 0xFFFFFFFFFFFFFFF8))
    return 7;
  v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v11)
    v11 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 7) & 0xFFFFFFFFFFFFFFF8))
    return 8;
  v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v12)
    v12 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8))
    return 9;
  v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v13)
    v13 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFFFF8))
    return 10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v14)
    v14 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 10) & 0xFFFFFFFFFFFFFFF8))
    return 11;
  v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v15)
    v15 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 11) & 0xFFFFFFFFFFFFFFF8))
    return 12;
  if (!pxrInternal__aapl__pxrReserved__::TfToken::operator==(this, ""))
  {
    v19[0] = "usdGeom/xformOp.cpp";
    v19[1] = "GetOpTypeEnum";
    v19[2] = 311;
    v19[3] = "static UsdGeomXformOp::Type pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeEnum(const TfToken &)";
    v20 = 0;
    v16 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(const char **)v17;
    }
    else
    {
      v17 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform opType token '%s'.", v17);
  }
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  _DWORD *v2;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v3;
  unsigned __int8 v4;
  unint64_t v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  int OpTypeEnumFromCString;
  void **v12;
  uint64_t v13;
  const char *Text;
  void *__p[2];
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  v2 = (_DWORD *)sub_20C555914((uint64_t)this);
  v3 = sub_20C398E78(v2);
  v4 = atomic_load((unsigned __int8 *)&qword_25498A080);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25498A080))
  {
    byte_25498A078 = sub_20C377708();
    __cxa_guard_release(&qword_25498A080);
  }
  v5 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(char **)v6;
  }
  else
  {
    v6 = "";
  }
  v7 = byte_25498A078;
  v8 = strchr(v6, byte_25498A078);
  if (v8)
  {
    v9 = v8 + 1;
    v10 = strchr(v8 + 1, v7);
    if (!v10)
      v10 = &v9[strlen(v9)];
    OpTypeEnumFromCString = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetOpTypeEnumFromCString((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v9, (const char *)(v10 - v9));
    *((_DWORD *)this + 32) = OpTypeEnumFromCString;
    if (!OpTypeEnumFromCString)
    {
      v17 = "usdGeom/xformOp.cpp";
      v18 = "_Init";
      v19 = 159;
      v20 = "void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init()";
      v21 = 0;
      sub_20BE93368(__p, v9, v10, v10 - v9);
      if (v16 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform opType token '%s'.", (const char *)v12);
      if (v16 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v17 = "usdGeom/xformOp.cpp";
    v18 = "_Init";
    v19 = 148;
    v20 = "void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init()";
    v21 = 0;
    v13 = sub_20C555914((uint64_t)this);
    sub_20C348EEC(v13, (int *)__p);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform op: <%s>.", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
  }
}

void sub_20C5A4D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_guard_abort(&qword_25498A080);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetOpTypeEnumFromCString(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const char *a2)
{
  _QWORD v4[2];

  v4[0] = this;
  v4[1] = a2;
  if (a2 == (const char *)5)
  {
    if (!strncmp("scale", (const char *)this, 5uLL))
      return 2;
  }
  else if (a2 == (const char *)7)
  {
    if (!strncmp("rotateX", (const char *)this, 7uLL))
      return 3;
    if (!strncmp("rotateY", (const char *)this, 7uLL))
      return 4;
  }
  else if (a2 == (const char *)9)
  {
    if (!strncmp("transform", (const char *)this, 9uLL))
      return 13;
    if (!strncmp("translate", (const char *)this, 9uLL))
      return 1;
    if (!strncmp("rotateXYZ", (const char *)this, 9uLL))
      return 6;
  }
  if (sub_20C5A5F48((uint64_t)v4, "rotateZ"))
    return 5;
  if (sub_20C5A5F48((uint64_t)v4, "rotateXZY"))
    return 7;
  if (sub_20C5A5F48((uint64_t)v4, "rotateYXZ"))
    return 8;
  if (sub_20C5A5F48((uint64_t)v4, "rotateYZX"))
    return 9;
  if (sub_20C5A5F48((uint64_t)v4, "rotateZXY"))
    return 10;
  if (sub_20C5A5F48((uint64_t)v4, "rotateZYX"))
    return 11;
  if (sub_20C5A5F48((uint64_t)v4, "orient"))
    return 12;
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;

  v5 = sub_20C37FE20(a1, a2);
  *(_DWORD *)(v5 + 120) = 0;
  *(_DWORD *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 132) = a3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v5);
  return a1;
}

{
  uint64_t v5;

  v5 = sub_20C373D44(a1, a2);
  *(_DWORD *)(v5 + 120) = 1;
  *(_DWORD *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 132) = a3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v5);
  return a1;
}

void sub_20C5A4F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5435DC(v1);
  _Unwind_Resume(a1);
}

void sub_20C5A4FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5435DC(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  _DWORD *v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v12;
  uint64_t *v13;
  void *__p;
  char v15;

  if (*((_BYTE *)this + 132))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A50FC();
    if ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    v11 = (_DWORD *)sub_20C555914((uint64_t)this);
    v12 = sub_20C398E78(v11);
    if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) != 0)
      v13 = (uint64_t *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)EmptyString, (const void **)v13, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (v15 < 0)
      operator delete(__p);
  }
  else
  {
    v6 = (_DWORD *)sub_20C555914((uint64_t)this);
    v7 = sub_20C398E78(v6);
    v8 = *(unsigned int **)v7;
    *a2 = *(unsigned int **)v7;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        *a2 = v9;
    }
  }
}

void sub_20C5A50E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C5A50FC()
{
  unint64_t *v0;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  void ***v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v0 = (unint64_t *)atomic_load(&qword_25498A088);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0x60uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "xformOp:", 0);
    v65 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "!invert!xformOp:", 0);
    v2 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "!invert!", 0);
    v3 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "xformOp:transform", 0);
    v4 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "xformOp:rotateX", 0);
    v5 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "xformOp:rotateY", 0);
    v6 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "xformOp:rotateZ", 0);
    v7 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "xformOp:orient", 0);
    v8 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "transform", 0);
    v9 = *v0;
    v66 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v66 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *v65;
    v67 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v67 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *v2;
    v68 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v68 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *v3;
    v69 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v69 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = *v4;
    v70 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v70 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = *v5;
    v71 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v71 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = *v6;
    v72 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v72 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = *v7;
    v73 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = *v8;
    v74 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        v74 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[9] = 0;
    v0[10] = 0;
    v0[11] = 0;
    v36 = operator new(0x48uLL);
    v37 = 0;
    v0[9] = (unint64_t)v36;
    v0[10] = (unint64_t)v36;
    v0[11] = (unint64_t)(v36 + 9);
    do
    {
      v38 = *(&v66 + v37);
      *v36 = v38;
      if ((v38 & 7) != 0)
      {
        v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 2, v39));
        if ((v40 & 1) == 0)
          *v36 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v37;
      ++v36;
    }
    while (v37 != 9);
    v41 = (void ***)&v75;
    v0[10] = (unint64_t)v36;
    do
    {
      v43 = (uint64_t)*--v41;
      v42 = v43;
      if ((v43 & 7) != 0)
      {
        v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
    }
    while (v41 != (void ***)&v66);
    while (!__ldaxr(&qword_25498A088))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A088))
        return (unint64_t)v0;
    }
    __clrex();
    v66 = (unint64_t)(v0 + 9);
    sub_20BEEB2B8((void ***)&v66);
    if ((*v8 & 7) != 0)
    {
      v47 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
    if ((*v7 & 7) != 0)
    {
      v49 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
    if ((*v6 & 7) != 0)
    {
      v51 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stlxr(v52 - 2, v51));
    }
    if ((*v5 & 7) != 0)
    {
      v53 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v54 = __ldxr(v53);
      while (__stlxr(v54 - 2, v53));
    }
    if ((*v4 & 7) != 0)
    {
      v55 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    if ((*v3 & 7) != 0)
    {
      v57 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    if ((*v2 & 7) != 0)
    {
      v59 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v60 = __ldxr(v59);
      while (__stlxr(v60 - 2, v59));
    }
    if ((*v65 & 7) != 0)
    {
      v61 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stlxr(v62 - 2, v61));
    }
    if ((*v0 & 7) != 0)
    {
      v63 = (unsigned int *)(*v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v64 = __ldxr(v63);
      while (__stlxr(v64 - 2, v63));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A088);
  }
  return (unint64_t)v0;
}

void sub_20C5A5630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;

  sub_20BEEB2B8(&a11);
  v31 = &a22;
  while (1)
  {
    v33 = *--v31;
    v32 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    if (v31 == (uint64_t *)&a13)
    {
      if ((*v29 & 7) != 0)
      {
        v36 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v28 & 7) != 0)
      {
        v38 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v27 & 7) != 0)
      {
        v40 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v26 & 7) != 0)
      {
        v42 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v25 & 7) != 0)
      {
        v44 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v24 & 7) != 0)
      {
        v46 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v23 & 7) != 0)
      {
        v48 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*a10 & 7) != 0)
      {
        v50 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v22 & 7) != 0)
      {
        v52 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      operator delete(v22);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5A57E0()
{
  JUMPOUT(0x20C5A57D0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if ((_DWORD)result)
  {
    v4 = sub_20C398E78(this);
    return pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v4, v5);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t *v11;
  const char *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const char *v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  const std::string *v19;
  pxrInternal__aapl__pxrReserved__::TfToken *v20;
  uint64_t *v21;
  std::string::size_type v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  uint64_t v26;
  char v27;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A50FC();
  if ((*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v11 = (uint64_t *)((*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  if (*((char *)v11 + 23) >= 0)
    v12 = (const char *)v11;
  else
    v12 = (const char *)*v11;
  v13 = *((char *)EmptyString + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)EmptyString + 23);
  else
    v14 = EmptyString[1];
  v15 = strlen(v12);
  if (v14 < v15)
  {
    *(_BYTE *)a3 = 0;
LABEL_19:
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2, a4);
    return;
  }
  v16 = v15;
  if (v13 >= 0)
    v17 = (const char *)EmptyString;
  else
    v17 = (const char *)*EmptyString;
  v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)strncmp(v17, v12, v16);
  *(_BYTE *)a3 = (_DWORD)v18 == 0;
  if ((_DWORD)v18)
    goto LABEL_19;
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v19 = (const std::string *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v19 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
  v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A50FC();
  if ((*((_QWORD *)v20 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v21 = (uint64_t *)((*((_QWORD *)v20 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
  if (*((char *)v21 + 23) < 0)
    v22 = v21[1];
  else
    v22 = *((unsigned __int8 *)v21 + 23);
  std::string::basic_string(&v25, v19, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, a4);
  if ((v26 & 7) != 0)
  {
    v23 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_20C5A59DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValueTypeName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  unint64_t v14;
  const char *v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  _QWORD v19[4];
  char v20;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3)
    v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v3 + 45))
    return 0;
  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4)
    v4 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v4 + 23))
    return 0;
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6)
    v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v6 + 20))
    return 1;
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v7 + 17))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8)
      v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v8 + 8))
      return 0;
    v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v9)
      v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v9 + 7))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v10)
        v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v10 + 6))
        return 2;
      v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v11)
        v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v11 + 42))
        return 0;
      v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v12)
        v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v12 + 41))
      {
        v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v13)
          v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)this, (_QWORD **)v13 + 40))
          return 2;
        v19[0] = "usdGeom/xformOp.cpp";
        v19[1] = "GetPrecisionFromValueTypeName";
        v19[2] = 247;
        v19[3] = "static UsdGeomXformOp::Precision pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValu"
                 "eTypeName(const SdfValueTypeName &)";
        v20 = 0;
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v18);
        v14 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v15 = (const char *)(v14 + 16);
          if (*(char *)(v14 + 39) < 0)
            v15 = *(const char **)v15;
        }
        else
        {
          v15 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid typeName '%s' specified.", v15);
        if ((v18 & 7) != 0)
        {
          v16 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        return 0;
      }
    }
    return 1;
  }
  return 2;
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeToken(int a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *result;
  unsigned __int8 v2;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *v14;

  switch(a1)
  {
    case 1:
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!result)
        result = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      break;
    case 2:
      v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v3)
        v3 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v3 + 8);
      break;
    case 3:
      v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v4)
        v4 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v4 + 16);
      break;
    case 4:
      v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v5)
        v5 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v5 + 24);
      break;
    case 5:
      v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v6)
        v6 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v6 + 32);
      break;
    case 6:
      v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v7)
        v7 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v7 + 40);
      break;
    case 7:
      v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v8)
        v8 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v8 + 48);
      break;
    case 8:
      v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v9)
        v9 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v9 + 56);
      break;
    case 9:
      v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v10)
        v10 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v10 + 64);
      break;
    case 10:
      v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v11)
        v11 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v11 + 72);
      break;
    case 11:
      v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v12)
        v12 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v12 + 80);
      break;
    case 12:
      v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v13)
        v13 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v13 + 88);
      break;
    case 13:
      v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v14)
        v14 = sub_20C5A2EE4(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v14 + 96);
      break;
    default:
      v2 = atomic_load((unsigned __int8 *)&qword_25498A098);
      if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_25498A098))
      {
        result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)&unk_25498A090;
      }
      else
      {
        __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498A090, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498A098);
        result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)&unk_25498A090;
      }
      break;
  }
  return result;
}

BOOL sub_20C5A5F48(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return v4 == *(_QWORD *)(a1 + 8) && strncmp(__s, *(const char **)a1, v4) == 0;
}

void *pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetValueTypeName(int a1, int a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v2;
  void *result;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  unsigned __int8 v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  _QWORD v14[4];
  char v15;

  switch(a1)
  {
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      if (a2 == 2)
      {
        v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v5)
          v5 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v5 + 136;
      }
      else if (a2 == 1)
      {
        v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v2)
          v2 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v2 + 160;
      }
      else
      {
        v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v6)
          v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v6 + 184;
      }
      break;
    case 3:
    case 4:
    case 5:
      if (a2 == 2)
      {
        v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v8)
          v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v8 + 48;
      }
      else if (a2 == 1)
      {
        v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v4)
          v4 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v4 + 56;
      }
      else
      {
        v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v10)
          v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v10 + 64;
      }
      break;
    case 12:
      if (a2 == 2)
      {
        v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v12)
          v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v12 + 320;
      }
      else if (a2 == 1)
      {
        v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v7)
          v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v7 + 328;
      }
      else
      {
        v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v13)
          v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        result = (char *)v13 + 336;
      }
      break;
    case 13:
      if (a2)
      {
        v14[0] = "usdGeom/xformOp.cpp";
        v14[1] = "GetValueTypeName";
        v14[2] = 367;
        v14[3] = "static const SdfValueTypeName &pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetValueTypeName(const"
                 " UsdGeomXformOp::Type, const UsdGeomXformOp::Precision)";
        v15 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Matrix transformations can only be encoded in double precision. Overriding precision to double.");
      }
      v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v9)
        v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      result = (char *)v9 + 360;
      break;
    default:
      v11 = atomic_load((unsigned __int8 *)&qword_25498A0A8);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25498A0A8))
      {
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&unk_25498A0A0);
        __cxa_guard_release(&qword_25498A0A8);
      }
      result = &unk_25498A0A0;
      break;
  }
  return result;
}

void sub_20C5A61F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A0A8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _QWORD *a5, char a6)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *ValueTypeName;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  void **v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  void *__p[2];
  char v23;
  std::string v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = a3;
  *(_BYTE *)(a1 + 132) = a6;
  ValueTypeName = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetValueTypeName(a3, a4);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(ValueTypeName))
  {
    v25 = "usdGeom/xformOp.cpp";
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"UsdGeomXformOp";
    v27 = 432;
    v28 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(const UsdPrim &, const UsdG"
                            "eomXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D188, a3, (uint64_t)&v24);
    v13 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
    v14 = v24.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D178, a4, (uint64_t)__p);
    v15 = &v24;
    if (v13 < 0)
      v15 = (std::string *)v14;
    if (v23 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform-op: incompatible combination of opType (%s) and precision (%s).", (const char *)v15, (const char *)v16);
    if (v23 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a3, a5, 0, &v24);
    if (!v24.__r_.__value_.__r.__words[0])
    {
      v25 = "usdGeom/xformOp.cpp";
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"UsdGeomXformOp";
      v27 = 441;
      v28 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(const UsdPrim &, const Us"
                              "dGeomXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL)";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "!attrName.IsEmpty()", 0);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a2, (uint64_t *)&v24, ValueTypeName, 0, 0, (uint64_t)&v25);
    sub_20C5A2918(a1, a1, (uint64_t)&v25);
    if ((v28 & 7) != 0)
    {
      v17 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
    if ((v24.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v19 = (unsigned int *)(v24.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  return a1;
}

void sub_20C5A6440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  unsigned int *v25;
  unsigned int v26;

  if ((a18 & 7) != 0)
  {
    v25 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  sub_20C5435DC(v23);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(int a1@<W0>, _QWORD *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *OpTypeToken;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *IsXformOp;
  std::string::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v14;
  uint64_t *v15;
  uint64_t *v16;
  size_t v17;
  std::string *v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const void *v20;
  uint64_t *v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string::size_type v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::TfToken *v32;
  const void **v33;
  uint64_t *v34;
  std::string::size_type v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  std::string v41;
  std::string::size_type v42;
  void *__p[2];
  std::string::size_type v44;

  OpTypeToken = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeToken(a1);
  IsXformOp = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(OpTypeToken, v8);
  if ((_DWORD)IsXformOp)
  {
    v10 = *(_QWORD *)OpTypeToken;
    a4->__r_.__value_.__r.__words[0] = *(_QWORD *)OpTypeToken;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        a4->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A50FC();
    if ((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v14 = (const void **)((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      v14 = (const void **)EmptyString;
    }
    if ((*(_QWORD *)OpTypeToken & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((*(_QWORD *)OpTypeToken & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v14, (const void **)v15, (uint64_t)__p);
    IsXformOp = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4);
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
  }
  if (!*a2)
    goto LABEL_49;
  if ((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    v16 = (uint64_t *)((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsXformOp);
  if (*((char *)v16 + 23) >= 0)
    v17 = *((unsigned __int8 *)v16 + 23);
  else
    v17 = v16[1];
  v18 = &v41;
  v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v41, v17 + 1);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*((char *)v16 + 23) >= 0)
      v20 = v16;
    else
      v20 = (const void *)*v16;
    v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v18, v20, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 58;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v21 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
  v22 = *((char *)v21 + 23);
  if (v22 >= 0)
    v23 = (const std::string::value_type *)v21;
  else
    v23 = (const std::string::value_type *)*v21;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)v21 + 23);
  else
    v24 = v21[1];
  v25 = std::string::append(&v41, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v44 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
  v27 = a4->__r_.__value_.__r.__words[0];
  if (&v42 != (std::string::size_type *)a4)
  {
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    v27 = 0;
    a4->__r_.__value_.__r.__words[0] = v42;
    v42 = 0;
  }
  if ((v27 & 7) != 0)
  {
    v30 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if (!a3)
      return;
  }
  else
  {
LABEL_49:
    if (!a3)
      return;
  }
  v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5A50FC();
  if ((*((_QWORD *)v32 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v33 = (const void **)((*((_QWORD *)v32 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
    v33 = (const void **)v32;
  }
  if ((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    v34 = (uint64_t *)((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v34 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v33, (const void **)v34, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v41);
  v35 = a4->__r_.__value_.__r.__words[0];
  v36 = a4->__r_.__value_.__r.__words[0] & 7;
  if (&v41 == a4)
  {
    if (v36)
    {
      v39 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
  }
  else
  {
    if (v36)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    a4->__r_.__value_.__r.__words[0] = v41.__r_.__value_.__r.__words[0];
    v41.__r_.__value_.__r.__words[0] = 0;
  }
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
}

void sub_20C5A67BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _QWORD *v21;
  unsigned int *v23;
  unsigned int v24;

  if (a21 < 0)
    operator delete(__p);
  if ((*v21 & 7) != 0)
  {
    v23 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecision(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v1;
  const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v2;
  uint64_t TypeName;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)sub_20C555914((uint64_t)this);
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v1);
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValueTypeName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&TypeName, v2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::HasSuffix(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _DWORD *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  unint64_t v5;
  uint64_t *v6;
  const char *v7;
  int v8;
  size_t v9;
  size_t v10;
  unint64_t v12;

  v3 = (_DWORD *)sub_20C555914((uint64_t)this);
  EmptyString = sub_20C398E78(v3);
  if ((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v5 = (*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v5 = (unint64_t)EmptyString;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v6 = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  if (*((char *)v6 + 23) >= 0)
    v7 = (const char *)v6;
  else
    v7 = (const char *)*v6;
  v8 = *(char *)(v5 + 23);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  v10 = strlen(v7);
  if (v9 < v10)
    return 0;
  v12 = *(_QWORD *)v5;
  if (v8 >= 0)
    v12 = v5;
  return strcmp((const char *)(v12 + v9 - v10), v7) == 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(unsigned int a1@<W0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a4@<X8>)
{
  unsigned __int16 *v5;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  const pxrInternal__aapl__pxrReserved__::GfMatrix4f *v20;
  const char *p_p;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  int v29;
  const char *v30;
  const char *v31;
  const char *v32;
  float64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  double v36;
  uint64_t v37;
  float32x2_t *v38;
  float64_t v39;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  float64_t v52;
  float64_t v53;
  double v59;
  double *v60;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  int v65;
  float64_t v66;
  const char *v67;
  const char *v68;
  double *v69;
  int v70;
  float64_t v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  float32x2_t *v75;
  float64_t v76;
  float64_t v77;
  float64_t v78;
  uint64_t v79;
  float64_t v80;
  float64_t v81;
  float64_t v82;
  void *v83;
  char v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64_t v89;
  _OWORD v90[4];
  float64_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64_t v96;
  float64x2_t __p;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64_t v101;
  float64x2_t v102[2];
  __int128 v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  __int128 v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;

  v5 = (unsigned __int16 *)a2;
  if (a1 == 13)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
    if (sub_20BFADE60((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      v7 = *((_QWORD *)v5 + 1);
      if ((v7 & 4) != 0)
        v8 = (float64x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      else
        v8 = *(float64x2_t **)v5;
      v9 = *v8;
      v10 = v8[1];
      v11 = v8[3];
      v113 = v8[2];
      v114 = v11;
      v111 = (__int128)v9;
      v112 = v10;
      v12 = v8[4];
      v13 = v8[5];
      v14 = v8[7];
      v117 = v8[6];
      v118 = v14;
      v115 = v12;
      v116 = v13;
      if (!a3)
      {
LABEL_21:
        v22 = v116;
        *((float64x2_t *)a4 + 4) = v115;
        *((float64x2_t *)a4 + 5) = v22;
        v23 = v118;
        *((float64x2_t *)a4 + 6) = v117;
        *((float64x2_t *)a4 + 7) = v23;
        v24 = v112;
        *(_OWORD *)a4 = v111;
        *((float64x2_t *)a4 + 1) = v24;
        v25 = v114;
        *((float64x2_t *)a4 + 2) = v113;
        *((float64x2_t *)a4 + 3) = v25;
        return;
      }
LABEL_15:
      v92.f64[0] = 0.0;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v111, v92.f64, 0.0, (uint64_t)&v103);
      v115 = v107;
      v116 = v108;
      v117 = v109;
      v118 = v110;
      v111 = v103;
      v112 = v104;
      v113 = v105;
      v114 = v106;
      if (fabs(v92.f64[0]) < 0.000000001)
      {
        *(_QWORD *)&v103 = "usdGeom/xformOp.cpp";
        *((_QWORD *)&v103 + 1) = "GetOpTransform";
        *(_QWORD *)&v104.f64[0] = 510;
        *(_QWORD *)&v104.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(con"
                                  "st UsdGeomXformOp::Type, const VtValue &, BOOL)";
        LOBYTE(v105.f64[0]) = 0;
        sub_20BF834B0((uint64_t)v5);
        if (v98.f64[0] >= 0.0)
          p_p = (const char *)&__p;
        else
          p_p = *(const char **)&__p.f64[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v103, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot invert singular transform op with value %s.", p_p);
        if (SHIBYTE(v98.f64[0]) < 0)
          operator delete(*(void **)&__p.f64[0]);
      }
      goto LABEL_21;
    }
    if (sub_20C5A73E0((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      v19 = *((_QWORD *)v5 + 1);
      if ((v19 & 4) != 0)
        v20 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)(*(uint64_t (**)(unsigned __int16 *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      else
        v20 = *(const pxrInternal__aapl__pxrReserved__::GfMatrix4f **)v5;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v103, v20);
      v115 = v107;
      v116 = v108;
      v117 = v109;
      v118 = v110;
      v111 = v103;
      v112 = v104;
      v113 = v105;
      v114 = v106;
      if (!a3)
        goto LABEL_21;
      goto LABEL_15;
    }
    *(_QWORD *)&v103 = "usdGeom/xformOp.cpp";
    *((_QWORD *)&v103 + 1) = "GetOpTransform";
    *(_QWORD *)&v104.f64[0] = 500;
    *(_QWORD *)&v104.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(const U"
                              "sdGeomXformOp::Type, const VtValue &, BOOL)";
    LOBYTE(v105.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D188, 13, (uint64_t)&__p);
    v29 = SHIBYTE(v98.f64[0]);
    v30 = *(const char **)&__p.f64[0];
    sub_20BF834B0((uint64_t)v5);
    if (v29 >= 0)
      v31 = (const char *)&__p;
    else
      v31 = v30;
    if (v93.f64[0] >= 0.0)
      v32 = (const char *)&v92;
    else
      v32 = *(const char **)&v92.f64[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v103, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid combination of opType (%s) and opVal (%s). Returning identity matrix.", v31, v32);
    if (SHIBYTE(v93.f64[0]) < 0)
      operator delete(*(void **)&v92.f64[0]);
    if ((SHIBYTE(v98.f64[0]) & 0x80000000) == 0)
      goto LABEL_37;
    v33 = __p.f64[0];
    goto LABEL_36;
  }
  if (sub_20BF78EEC(a2))
  {
    v16 = *((_QWORD *)v5 + 1);
    v17 = (double *)v5;
    if ((v16 & 4) != 0)
      v17 = (double *)(*(uint64_t (**)(unsigned __int16 *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    v18 = *v17;
  }
  else
  {
    if (sub_20BF7B9F8((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      v26 = *((_QWORD *)v5 + 1);
      v27 = (float *)v5;
      if ((v26 & 4) != 0)
        v27 = (float *)(*(uint64_t (**)(unsigned __int16 *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      v28 = *v27;
    }
    else
    {
      if (!sub_20C1D0B64((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
        goto LABEL_50;
      v34 = *((_QWORD *)v5 + 1);
      v35 = v5;
      if ((v34 & 4) != 0)
        v35 = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      v28 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v35];
    }
    v18 = v28;
  }
  if (a3)
    v36 = -v18;
  else
    v36 = v18;
  switch(a1)
  {
    case 5u:
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      v103 = 0uLL;
      v104.f64[0] = 1.0;
      goto LABEL_56;
    case 4u:
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      v103 = xmmword_20CA52210;
      v104.f64[0] = 0.0;
      goto LABEL_56;
    case 3u:
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      v104.f64[0] = 0.0;
      v103 = 0x3FF0000000000000uLL;
LABEL_56:
      v104.f64[1] = v36;
      v40 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v111, (float64x2_t *)&v103);
LABEL_57:
      v41 = *((_OWORD *)v40 + 3);
      v43 = *(_OWORD *)v40;
      v42 = *((_OWORD *)v40 + 1);
      *((_OWORD *)a4 + 2) = *((_OWORD *)v40 + 2);
      *((_OWORD *)a4 + 3) = v41;
      *(_OWORD *)a4 = v43;
      *((_OWORD *)a4 + 1) = v42;
      v44 = *((_OWORD *)v40 + 7);
      v46 = *((_OWORD *)v40 + 4);
      v45 = *((_OWORD *)v40 + 5);
      *((_OWORD *)a4 + 6) = *((_OWORD *)v40 + 6);
      *((_OWORD *)a4 + 7) = v44;
      *((_OWORD *)a4 + 4) = v46;
      *((_OWORD *)a4 + 5) = v45;
      return;
  }
LABEL_50:
  memset(v102, 0, 24);
  if (sub_20BFA2E0C((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    v37 = *((_QWORD *)v5 + 1);
    if ((v37 & 4) != 0)
      v38 = (float32x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v38 = *(float32x2_t **)v5;
    v39 = v38[1].f32[0];
    v102[0] = vcvtq_f64_f32(*v38);
    v102[1].f64[0] = v39;
    goto LABEL_66;
  }
  if (sub_20BFA0FB4((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    v47 = *((_QWORD *)v5 + 1);
    if ((v47 & 4) != 0)
      v48 = (*(uint64_t (**)(unsigned __int16 *))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v48 = *(_QWORD *)v5;
    v49 = *(float64x2_t *)v48;
    v102[1].f64[0] = *(float64_t *)(v48 + 16);
    v102[0] = v49;
LABEL_66:
    if (a1 == 2)
    {
      if (a3)
      {
        __asm { FMOV            V2.2D, #1.0 }
        v102[0] = vdivq_f64(_Q2, v102[0]);
        v102[1].f64[0] = 1.0 / v102[1].f64[0];
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)&v111, v102);
    }
    else if (a1 == 1)
    {
      if (a3)
      {
        v102[0] = vnegq_f64(v102[0]);
        v102[1].f64[0] = -v102[1].f64[0];
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)&v111, (uint64_t)v102);
    }
    else
    {
      v59 = v102[0].f64[0];
      if (a3)
      {
        v59 = -v102[0].f64[0];
        v102[0].f64[0] = -v102[0].f64[0];
        *(float64x2_t *)((char *)v102 + 8) = vnegq_f64(*(float64x2_t *)((char *)v102 + 8));
      }
      v107.f64[0] = 0.0;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v112.f64[0] = 0.0;
      v111 = 0x3FF0000000000000uLL;
      v112.f64[1] = v59;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v103, (float64x2_t *)&v111);
      v101 = 0.0;
      v99 = 0u;
      v100 = 0u;
      __p = 0u;
      v98 = 0u;
      v111 = xmmword_20CA52210;
      v112.f64[0] = 0.0;
      v112.f64[1] = v102[0].f64[1];
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&__p, (float64x2_t *)&v111);
      v96 = 0.0;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v111 = 0uLL;
      v112.f64[0] = 1.0;
      v112.f64[1] = v102[1].f64[0];
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v92, (float64x2_t *)&v111);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)v90, 1.0);
      switch(a1)
      {
        case 6u:
          if ((a3 & 1) != 0)
            goto LABEL_78;
          goto LABEL_105;
        case 7u:
          if ((a3 & 1) != 0)
            goto LABEL_95;
          goto LABEL_99;
        case 8u:
          if ((a3 & 1) != 0)
            goto LABEL_97;
          goto LABEL_102;
        case 9u:
          if ((a3 & 1) != 0)
          {
LABEL_99:
            v87 = v105;
            v88 = v106;
            v89 = v107.f64[0];
            v85 = (float64x2_t)v103;
            v86 = v104;
            v60 = (double *)&__p;
          }
          else
          {
LABEL_95:
            v87 = v99;
            v88 = v100;
            v89 = v101;
            v85 = __p;
            v86 = v98;
            v60 = (double *)&v103;
          }
          v69 = (double *)&v92;
          break;
        case 0xAu:
          if ((a3 & 1) != 0)
          {
LABEL_102:
            v87 = v99;
            v88 = v100;
            v89 = v101;
            v85 = __p;
            v86 = v98;
            v60 = (double *)&v92;
          }
          else
          {
LABEL_97:
            v87 = v94;
            v88 = v95;
            v89 = v96;
            v85 = v92;
            v86 = v93;
            v60 = (double *)&__p;
          }
          v69 = (double *)&v103;
          break;
        case 0xBu:
          if ((a3 & 1) != 0)
          {
LABEL_105:
            v87 = v105;
            v88 = v106;
            v89 = v107.f64[0];
            v85 = (float64x2_t)v103;
            v86 = v104;
            v60 = (double *)&v92;
          }
          else
          {
LABEL_78:
            v87 = v94;
            v88 = v95;
            v89 = v96;
            v85 = v92;
            v86 = v93;
            v60 = (double *)&v103;
          }
          v69 = (double *)&__p;
          break;
        default:
          *(_QWORD *)&v111 = "usdGeom/xformOp.cpp";
          *((_QWORD *)&v111 + 1) = "GetOpTransform";
          *(_QWORD *)&v112.f64[0] = 605;
          *(_QWORD *)&v112.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(c"
                                    "onst UsdGeomXformOp::Type, const VtValue &, BOOL)";
          LOBYTE(v113.f64[0]) = 0;
          pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D188, a1, (uint64_t)&v85);
          v70 = SHIBYTE(v86.f64[0]);
          v71 = v85.f64[0];
          sub_20BF834B0((uint64_t)v5);
          if (v70 >= 0)
            v72 = (const char *)&v85;
          else
            v72 = *(const char **)&v71;
          if (v84 >= 0)
            v73 = (const char *)&v83;
          else
            v73 = (const char *)v83;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v111, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid combination of opType (%s) and opVal (%s). Returning identity matrix.", v72, v73);
          if (v84 < 0)
            operator delete(v83);
          if ((SHIBYTE(v86.f64[0]) & 0x80000000) == 0)
            goto LABEL_37;
          v33 = v85.f64[0];
          goto LABEL_36;
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(v85.f64, v69);
      v113 = v87;
      v114 = v88;
      v115.f64[0] = v89;
      v111 = (__int128)v85;
      v112 = v86;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=((double *)&v111, v60);
      v90[2] = v113;
      v90[3] = v114;
      v91 = v115.f64[0];
      v90[0] = v111;
      v90[1] = v112;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v111, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v90);
    }
    goto LABEL_57;
  }
  if (sub_20C1D48C0((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    v50 = *((_QWORD *)v5 + 1);
    v51 = v5;
    if ((v50 & 4) != 0)
      v51 = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    v52 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v51[1]];
    v53 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v51[2]];
    v102[0].f64[0] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v51];
    v102[0].f64[1] = v52;
    v102[1].f64[0] = v53;
    goto LABEL_66;
  }
  if (a1 != 12)
  {
    *(_QWORD *)&v111 = "usdGeom/xformOp.cpp";
    *((_QWORD *)&v111 + 1) = "GetOpTransform";
    *(_QWORD *)&v112.f64[0] = 634;
    *(_QWORD *)&v112.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(const U"
                              "sdGeomXformOp::Type, const VtValue &, BOOL)";
    LOBYTE(v113.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D188, a1, (uint64_t)&v103);
    v65 = SHIBYTE(v104.f64[0]);
    v66 = *(double *)&v103;
    sub_20BF834B0((uint64_t)v5);
    if (v65 >= 0)
      v67 = (const char *)&v103;
    else
      v67 = *(const char **)&v66;
    if (v98.f64[0] >= 0.0)
      v68 = (const char *)&__p;
    else
      v68 = *(const char **)&__p.f64[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v111, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid combination of opType (%s) and opVal (%s). Returning identity matrix.", v67, v68);
    if (SHIBYTE(v98.f64[0]) < 0)
      operator delete(*(void **)&__p.f64[0]);
    if ((SHIBYTE(v104.f64[0]) & 0x80000000) == 0)
      goto LABEL_37;
    v33 = *(double *)&v103;
LABEL_36:
    operator delete(*(void **)&v33);
LABEL_37:
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a4, 1.0);
    return;
  }
  v111 = 0u;
  v112 = 0u;
  if (sub_20BFAF48C((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    v61 = *((_QWORD *)v5 + 1);
    if ((v61 & 4) != 0)
      v62 = (float64x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v62 = *(float64x2_t **)v5;
    v63 = *v62;
    v64 = v62[1];
  }
  else
  {
    if (!sub_20BFB08AC((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      if (sub_20C1D33A8((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
      {
        v79 = *((_QWORD *)v5 + 1);
        if ((v79 & 4) != 0)
          v5 = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        v80 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[3]];
        v81 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[1]];
        v82 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[2]];
        *(double *)&v111 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v5];
        *((float64_t *)&v111 + 1) = v81;
        v112.f64[0] = v82;
        v112.f64[1] = v80;
      }
      goto LABEL_123;
    }
    v74 = *((_QWORD *)v5 + 1);
    if ((v74 & 4) != 0)
      v75 = (float32x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v75 = *(float32x2_t **)v5;
    v63 = vcvtq_f64_f32(*v75);
    v64 = vcvtq_f64_f32(v75[1]);
  }
  v111 = (__int128)v63;
  v112 = v64;
LABEL_123:
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v103, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)&v111);
  if (a3)
  {
    *(_QWORD *)&v103 = sub_20BEF83AC((double *)&v103);
    *((float64_t *)&v103 + 1) = v76;
    v104.f64[0] = v77;
    v104.f64[1] = v78;
  }
  __p = 0uLL;
  v98.f64[0] = 0.0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(a4, (float64x2_t *)&v103, (uint64_t)&__p);
}

void sub_20C5A7350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A73E0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 73)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BFD0);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[8];
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a2, 1.0);
  v13 = 0;
  if ((sub_20C5A7500(a1, (uint64_t)v12, a3) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(*(_DWORD *)(a1 + 128), (pxrInternal__aapl__pxrReserved__::VtValue *)v12, *(unsigned __int8 *)(a1 + 132), (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v11);
    v6 = v11[5];
    a2[4] = v11[4];
    a2[5] = v6;
    v7 = v11[7];
    a2[6] = v11[6];
    a2[7] = v7;
    v8 = v11[1];
    *a2 = v11[0];
    a2[1] = v8;
    v9 = v11[3];
    a2[2] = v11[2];
    a2[3] = v9;
  }
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C5A74E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A7500(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  *(double *)&v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C53D198[v3])(&v6, a1);
}

uint64_t sub_20C5A7554(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get(a2, **a1, *((double *)*a1 + 1));
}

uint64_t sub_20C5A756C(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::Get(a2, **a1, *((double *)*a1 + 1));
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::~UsdGeomXformCommonAPI(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D1B8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdGeom/xformCommonAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdGeomXformCommonAPI pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D1B8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5A7718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A0B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A0B8))
  {
    __cxa_guard_release(&qword_25498A0B8);
  }
  return &qword_25498A0B0;
}

void sub_20C5A77A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A0B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A0C8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *)__cxa_guard_acquire(&qword_25498A0C8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetStaticTfType(v3);
      byte_25498A0C0 = sub_20C35BD7C((char *)&qword_25498A0B0, v4, v5);
      __cxa_guard_release(&qword_25498A0C8);
    }
  }
  return byte_25498A0C0;
}

void sub_20C5A7820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A0C8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetStaticTfType(this);
  return &qword_25498A0B0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A0E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A0E8))
  {
    qword_25498A0D0 = 0;
    *(_QWORD *)algn_25498A0D8 = 0;
    qword_25498A0E0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A0D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A0E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A108);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A108))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498A0F0 = 0;
    *(_QWORD *)algn_25498A0F8 = 0;
    qword_25498A100 = 0;
    sub_20BFE538C(&qword_25498A0F0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A0F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A108);
  }
  if (v1)
    return &qword_25498A0F0;
  else
    return &qword_25498A0D0;
}

void sub_20C5A7950(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A108);
  _Unwind_Resume(a1);
}

void sub_20C5A7968()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::RotationOrderXYZ");
  sub_20BDDC0E4(&__p, "XYZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D210, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::RotationOrderXZY");
  sub_20BDDC0E4(&__p, "XZY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D210, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::RotationOrderYXZ");
  sub_20BDDC0E4(&__p, "YXZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D210, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::RotationOrderYZX");
  sub_20BDDC0E4(&__p, "YZX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D210, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::RotationOrderZXY");
  sub_20BDDC0E4(&__p, "ZXY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D210, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::RotationOrderZYX");
  sub_20BDDC0E4(&__p, "ZYX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D210, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::OpTranslate");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D200, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::OpRotate");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D200, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::OpScale");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D200, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdGeomXformCommonAPI::OpPivot");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53D200, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C5A7CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  void (**v11)(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *__hidden);
  uint64_t v12;

  if (!pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible(this))
    return 0;
  sub_20C35C4F8((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6);
  v11 = off_24C53D0E0;
  if ((v10 & 7) != 0)
  {
    v2 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  if (v12
    && (*(_BYTE *)(v12 + 57) & 8) == 0
    && (((uint64_t (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v11[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v11) & 1) != 0)
  {
    v4 = sub_20C5A7E68((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v11, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v11);
  return v4;
}

void sub_20C5A7E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A7E68(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v25;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v26;
  int IsXformOp;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v28;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v29;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  void **v63[2];
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;

  v72 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(a1, &v72, &v70);
  v13 = 0;
  v14 = v70;
  if (0xF0F0F0F0F0F0F0F1 * ((v71 - v70) >> 3) <= 5)
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25498A128);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25498A128))
    {
      sub_20C5AB104();
      __cxa_atexit((void (*)(void *))sub_20C5AB260, &qword_25498A110, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498A128);
    }
    LODWORD(v63[0]) = 3;
    v63[1] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v64);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v65);
    v66 = 0;
    v67 = 0;
    if (v14 != v71)
    {
      v16 = (_DWORD *)sub_20C555914(v14);
      if ((*(_QWORD *)sub_20C398E78(v16) & 0xFFFFFFFFFFFFFFF8) == (qword_25498A110 & 0xFFFFFFFFFFFFFFF8)
        && !*(_BYTE *)(v14 + 132))
      {
        sub_20C5A287C((uint64_t)v63, v14);
        v17 = *(_DWORD *)(v14 + 128);
        v69 = *(_BYTE *)(v14 + 132);
        v68 = v17;
        v14 += 136;
      }
    }
    v55 = 3;
    v56 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v57);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v58);
    v59 = 0;
    v60 = 0;
    if (v14 != v71)
    {
      v18 = (_DWORD *)sub_20C555914(v14);
      if ((*(_QWORD *)sub_20C398E78(v18) & 0xFFFFFFFFFFFFFFF8) == (qword_25498A118 & 0xFFFFFFFFFFFFFFF8)
        && !*(_BYTE *)(v14 + 132))
      {
        sub_20C5A287C((uint64_t)&v55, v14);
        v19 = *(_DWORD *)(v14 + 128);
        v62 = *(_BYTE *)(v14 + 132);
        v61 = v19;
        v14 += 136;
      }
    }
    v47 = 3;
    v48 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v50);
    v51 = 0;
    v52 = 0;
    if (v14 != v71 && (*(_DWORD *)(v14 + 128) - 6) <= 5 && !*(_BYTE *)(v14 + 132))
    {
      sub_20C5A287C((uint64_t)&v47, v14);
      v20 = *(_DWORD *)(v14 + 128);
      v54 = *(_BYTE *)(v14 + 132);
      v53 = v20;
      v14 += 136;
    }
    v39 = 3;
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v42);
    v43 = 0;
    v44 = 0;
    if (v14 != v71)
    {
      v21 = (_DWORD *)sub_20C555914(v14);
      if ((*(_QWORD *)sub_20C398E78(v21) & 0xFFFFFFFFFFFFFFF8) == (qword_25498A120 & 0xFFFFFFFFFFFFFFF8)
        && !*(_BYTE *)(v14 + 132))
      {
        sub_20C5A287C((uint64_t)&v39, v14);
        v22 = *(_DWORD *)(v14 + 128);
        v46 = *(_BYTE *)(v14 + 132);
        v45 = v22;
        v14 += 136;
      }
    }
    v31 = 3;
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v34);
    v35 = 0;
    v36 = 0;
    if (v14 != v71)
    {
      v23 = (_DWORD *)sub_20C555914(v14);
      if ((*(_QWORD *)sub_20C398E78(v23) & 0xFFFFFFFFFFFFFFF8) == (qword_25498A118 & 0xFFFFFFFFFFFFFFF8))
      {
        if (*(_BYTE *)(v14 + 132))
        {
          sub_20C5A287C((uint64_t)&v31, v14);
          v24 = *(_DWORD *)(v14 + 128);
          v38 = *(_BYTE *)(v14 + 132);
          v37 = v24;
          v14 += 136;
        }
      }
    }
    if (v14 == v71
      && (v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v55),
          IsXformOp = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v25, v26),
          v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v31),
          IsXformOp == pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v28, v29)))
    {
      if (a2)
      {
        sub_20C5A287C(a2, (uint64_t)v63);
        *(_DWORD *)(a2 + 128) = v68;
        *(_BYTE *)(a2 + 132) = v69;
      }
      if (a3)
      {
        sub_20C5A287C(a3, (uint64_t)&v55);
        *(_DWORD *)(a3 + 128) = v61;
        *(_BYTE *)(a3 + 132) = v62;
      }
      if (a4)
      {
        sub_20C5A287C(a4, (uint64_t)&v47);
        *(_DWORD *)(a4 + 128) = v53;
        *(_BYTE *)(a4 + 132) = v54;
      }
      if (a5)
      {
        sub_20C5A287C(a5, (uint64_t)&v39);
        *(_DWORD *)(a5 + 128) = v45;
        *(_BYTE *)(a5 + 132) = v46;
      }
      if (a6)
      {
        sub_20C5A287C(a6, (uint64_t)&v31);
        *(_DWORD *)(a6 + 128) = v37;
        *(_BYTE *)(a6 + 132) = v38;
      }
      if (a7)
        *a7 = v72;
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
    sub_20C5435DC((uint64_t)&v31);
    sub_20C5435DC((uint64_t)&v39);
    sub_20C5435DC((uint64_t)&v47);
    sub_20C5435DC((uint64_t)&v55);
    sub_20C5435DC((uint64_t)v63);
  }
  v63[0] = (void **)&v70;
  sub_20C54356C(v63);
  return v13;
}

void sub_20C5A8310(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25498A128);
  *(_QWORD *)(v1 - 256) = v1 - 120;
  sub_20C54356C((void ***)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetXformVectors(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a5, unsigned int a6, double a7)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v12;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v14;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v16;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v18;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v19;
  uint64_t v20;
  _BYTE v22[136];
  _BYTE v23[136];
  _BYTE v24[136];
  _BYTE v25[136];
  uint64_t v26;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, a6, 1, 4, 8, 2u, (uint64_t)v22);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v22);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v12, v13)
    && (v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v24),
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v14, v15))
    && (v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v25),
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v16, v17))
    && (v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v23),
        (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v18, v19) & 1) != 0)
    && sub_20C5A8720((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v22, a2, a7)
    && sub_20C5A8830((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v24, a3, a7)
    && sub_20C5A8830((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v25, a4, a7))
  {
    v20 = sub_20C5A8830((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v23, a5, a7);
  }
  else
  {
    v20 = 0;
  }
  sub_20C5435DC((uint64_t)&v26);
  sub_20C5435DC((uint64_t)v25);
  sub_20C5435DC((uint64_t)v24);
  sub_20C5435DC((uint64_t)v23);
  sub_20C5435DC((uint64_t)v22);
  return v20;
}

void sub_20C5A84FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A8940((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  void (**v19)(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *__hidden);
  uint64_t v20;
  unsigned int v21;

  v21 = a2;
  sub_20C35C4F8((uint64_t)&v14, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v19, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
  v19 = off_24C53D0E0;
  if ((v18 & 7) != 0)
  {
    v12 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  if (v20
    && (*(_BYTE *)(v20 + 57) & 8) == 0
    && (((uint64_t (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v19[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v19) & 1) != 0)
  {
    sub_20C5AA3A4((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v19, &v21, (a4 | a3 | a5 | a6) & 1, ((a4 | a3 | a5 | a6) >> 1) & 1, ((a4 | a3 | a5 | a6) >> 2) & 1, ((a4 | a3 | a5 | a6) >> 3) & 1, (_DWORD *)a7);
  }
  else
  {
    bzero((void *)a7, 0x2A8uLL);
    *(_DWORD *)a7 = 3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 20));
    *(_QWORD *)(a7 + 24) = 0;
    *(_DWORD *)(a7 + 120) = 0;
    *(_DWORD *)(a7 + 136) = 3;
    *(_QWORD *)(a7 + 144) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 152));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 156));
    *(_QWORD *)(a7 + 160) = 0;
    *(_DWORD *)(a7 + 256) = 0;
    *(_DWORD *)(a7 + 272) = 3;
    *(_QWORD *)(a7 + 280) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 288));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 292));
    *(_QWORD *)(a7 + 296) = 0;
    *(_DWORD *)(a7 + 392) = 0;
    *(_DWORD *)(a7 + 408) = 3;
    *(_QWORD *)(a7 + 416) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 424));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 428));
    *(_QWORD *)(a7 + 432) = 0;
    *(_DWORD *)(a7 + 528) = 0;
    *(_DWORD *)(a7 + 544) = 3;
    *(_QWORD *)(a7 + 552) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 560));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 564));
    *(_QWORD *)(a7 + 568) = 0;
    *(_DWORD *)(a7 + 664) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v19);
}

void sub_20C5A86F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A8720(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__ **v7;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD v12[4];
  char v13;

  if (*((_BYTE *)a1 + 132))
  {
    v12[0] = "usdGeom/xformOp.h";
    v12[1] = "Set";
    v12[2] = 399;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = pxrInternal__"
             "aapl__pxrReserved__::GfVec3d]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1, (unsigned int **)&v11);
    v3 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set a value on the inverse xformOp '%s'. Please set value on the paired non-inverse xformOp instead.", v4);
    if ((v11 & 7) != 0)
    {
      v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    return 0;
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__ **)sub_20C555914((uint64_t)a1);
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>(v7, a2, a3);
  }
}

uint64_t sub_20C5A8830(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__ **v7;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD v12[4];
  char v13;

  if (*((_BYTE *)a1 + 132))
  {
    v12[0] = "usdGeom/xformOp.h";
    v12[1] = "Set";
    v12[2] = 399;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = pxrInternal__"
             "aapl__pxrReserved__::GfVec3f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1, (unsigned int **)&v11);
    v3 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set a value on the inverse xformOp '%s'. Please set value on the paired non-inverse xformOp instead.", v4);
    if ((v11 & 7) != 0)
    {
      v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    return 0;
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__ **)sub_20C555914((uint64_t)a1);
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3f>(v7, a2, a3);
  }
}

uint64_t sub_20C5A8940(uint64_t a1)
{
  sub_20C5435DC(a1 + 544);
  sub_20C5435DC(a1 + 408);
  sub_20C5435DC(a1 + 272);
  sub_20C5435DC(a1 + 136);
  return sub_20C5435DC(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(unsigned int a1)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  if (a1 < 6)
    return a1 + 6;
  v5[0] = "usdGeom/xformCommonAPI.cpp";
  v5[1] = "ConvertRotationOrderToOpType";
  v5[2] = 334;
  v5[3] = "static UsdGeomXformOp::Type pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpT"
          "ype(RotationOrder)";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D210, a1, (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid rotation order <%s>.", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  return 6;
}

void sub_20C5A8A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(unsigned int a1)
{
  uint64_t v1;
  void **v2;
  void *__p[2];
  char v5;
  _QWORD v6[4];
  char v7;

  v1 = a1 - 6;
  if (v1 >= 6)
  {
    v6[0] = "usdGeom/xformCommonAPI.cpp";
    v6[1] = "ConvertOpTypeToRotationOrder";
    v6[2] = 360;
    v6[3] = "static UsdGeomXformCommonAPI::RotationOrder pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::Convert"
            "OpTypeToRotationOrder(UsdGeomXformOp::Type)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D188, a1, (uint64_t)__p);
    if (v5 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' is not a three-axis rotate op type", (const char *)v2);
    if (v5 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v1;
}

void sub_20C5A8AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CanConvertOpTypeToRotationOrder(int a1)
{
  return (a1 - 6) < 6;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(uint64_t a1, _QWORD *a2, _DWORD *a3, float32x2_t *a4, uint64_t a5, _DWORD *a6, double a7)
{
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v16;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v18;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v20;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v27;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v28;
  float v29;
  float32_t v30;
  char *v31;
  float64_t v32;
  uint64_t v33;
  const char *v34;
  double v35;
  double v36;
  double v37;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v38;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v39;
  int IsXformOp;
  uint64_t result;
  int v42;
  char v43;
  _BYTE v44[128];
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  char *v64;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  int v69;
  _QWORD v70[3];
  float64x2_t v71;
  uint64_t v72;
  const char *v73;
  char v74;
  _BYTE v75[128];
  __int128 v76[8];
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  double v81[3];
  __int128 v82;
  uint64_t v83;
  double v84[3];

  if (a2 && a3 && a4 && a5 && a6
    || (v64 = "usdGeom/xformCommonAPI.cpp",
        v65 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetXformVectors",
        v66 = 478,
        v67 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(GfVec3d *,"
                                " GfVec3f *, GfVec3f *, GfVec3f *, RotationOrder *, const UsdTimeCode) const",
        v68 = 0,
        v42 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "translation && rotation && scale && pivot && rotOrder", 0), result = 0, v42))
  {
    sub_20C35C4F8((uint64_t)&v64, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v70, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v64);
    v70[0] = off_24C53D0E0;
    if ((v67 & 7) != 0)
    {
      v14 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
    sub_20BFD265C(&v66);
    if (v65)
      sub_20C35C614(v65);
    LODWORD(v64) = 3;
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v66);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v66 + 1);
    v67 = 0;
    v69 = 0;
    v58 = 3;
    v59 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v61);
    v62 = 0;
    v63 = 0;
    v51 = 3;
    v52 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v53);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v54);
    v55 = 0;
    v56 = 0;
    v45 = 3;
    v46 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v47);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v48);
    v49 = 0;
    v50 = 0;
    if ((sub_20C5A7E68((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v70, (uint64_t)&v64, (uint64_t)&v58, (uint64_t)&v51, (uint64_t)&v45, 0, 0) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v44, 1.0);
      v43 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v70, (uint64_t)v44, &v43, a7);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v79, 1.0);
      v78 = 1.0;
      v77 = (float64x2_t)xmmword_20CAEE598;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)v44, v76, (uint64_t)&v77, &v79, (uint64_t)a2, (uint64_t)v75, 1.0e-10);
      v30 = v78;
      *a4 = vcvt_f32_f64(v77);
      a4[1].f32[0] = v30;
      if ((pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v79, 0) & 1) == 0)
      {
        *(_QWORD *)&v71.f64[0] = "usdGeom/xformCommonAPI.cpp";
        *(_QWORD *)&v71.f64[1] = "_ConvertMatrixToComponents";
        v72 = 201;
        v73 = "void pxrInternal__aapl__pxrReserved__::_ConvertMatrixToComponents(const GfMatrix4d &, GfVec3d *, GfVec3f *, GfVec3f *)";
        v74 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v71, (pxrInternal__aapl__pxrReserved__ *)"Failed to orthonormalize rotation matrix.", v31);
      }
      v71.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v79);
      v71.f64[1] = v32;
      v72 = v33;
      v73 = v34;
      v84[1] = 0.0;
      v84[0] = 0.0;
      v84[2] = 1.0;
      v82 = xmmword_20CA52210;
      v83 = 0;
      v81[0] = 1.0;
      v81[2] = 0.0;
      v81[1] = 0.0;
      v35 = pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v71, v84, (double *)&v82, v81);
      *(float *)&v36 = v36;
      *(float *)&v37 = v37;
      *(float *)&v35 = v35;
      *a3 = LODWORD(v36);
      a3[1] = LODWORD(v37);
      a3[2] = LODWORD(v35);
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      *a6 = 0;
      goto LABEL_33;
    }
    v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v64);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v16, v17)
      || (sub_20C5A9000((uint64_t)&v64, (uint64_t)a2, a7) & 1) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v51);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v18, v19)
      || (sub_20C5A9054((uint64_t)&v51, (uint64_t)a3, a7) & 1) == 0)
    {
      *(_QWORD *)a3 = 0;
      a3[2] = 0;
    }
    v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v45);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v20, v21)
      || (sub_20C5A9054((uint64_t)&v45, (uint64_t)a4, a7) & 1) == 0)
    {
      __asm { FMOV            V0.2S, #1.0 }
      *a4 = _D0;
      a4[1].i32[0] = 1065353216;
    }
    v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v58);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v27, v28))
      goto LABEL_29;
    if (sub_20C5A9000((uint64_t)&v58, (uint64_t)&v79, a7))
    {
      if (a5)
      {
        v29 = v80;
        *(float32x2_t *)a5 = vcvt_f32_f64(v79);
        *(float *)(a5 + 8) = v29;
      }
      goto LABEL_30;
    }
    if ((sub_20C5A9054((uint64_t)&v58, a5, a7) & 1) == 0)
    {
LABEL_29:
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
LABEL_30:
    v38 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v51);
    IsXformOp = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v38, v39);
    if (IsXformOp)
      IsXformOp = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(v57);
    *a6 = IsXformOp;
LABEL_33:
    sub_20C5435DC((uint64_t)&v45);
    sub_20C5435DC((uint64_t)&v51);
    sub_20C5435DC((uint64_t)&v58);
    sub_20C5435DC((uint64_t)&v64);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v70);
    return 1;
  }
  return result;
}

void sub_20C5A8FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_20C5435DC((uint64_t)&a27);
  sub_20C5435DC((uint64_t)&a44);
  sub_20C5435DC((uint64_t)&a61);
  sub_20C5435DC((uint64_t)&STACK[0x228]);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5A9000(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  *(double *)&v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C53D220[v3])(&v6, a1);
}

uint64_t sub_20C5A9054(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  *(double *)&v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C53D230[v3])(&v6, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectorsByAccumulation(uint64_t a1, _QWORD *a2, _DWORD *a3, float32x2_t *a4, uint64_t a5, _DWORD *a6, double a7)
{
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  float64_t v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int *v50;
  int v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  int v68;
  char *v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  _BYTE *v81;
  unsigned int v82;
  unsigned int v83;
  float64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BOOL4 v92;
  _DWORD *v93;
  unsigned int v94;
  float64x2_t *v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  uint64_t v115;
  float32_t v116;
  float64_t v117;
  float64_t v118;
  float64_t v119;
  float v120;
  double v121;
  double v122;
  uint64_t XformVectors;
  double *v124;
  float32_t v125;
  float32_t v126;
  float32_t v127;
  int v133;
  uint64_t v134;
  unsigned int v135;
  _DWORD *v136;
  unsigned int v137;
  _DWORD *v138;
  _QWORD *v139;
  float32x2_t *v140;
  double v141[3];
  __int128 v142;
  uint64_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  int v152;
  char v153;
  void *v154[3];
  void *__p;
  char *v156;
  char *v157;
  float64x2_t v158;
  BOOL v159;
  _QWORD v160[3];
  float64x2_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    return pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(a1, a2, a3, a4, a5, a6, a7);
  sub_20C35C4F8((uint64_t)&v144, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v160, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v144);
  v160[0] = off_24C53D0E0;
  if ((LOBYTE(v145.f64[1]) & 7) != 0)
  {
    v15 = (unsigned int *)(*(_QWORD *)&v145.f64[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v145.f64 + 1);
  sub_20BFD265C(&v145);
  if (*(_QWORD *)&v144.f64[1])
    sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v144.f64[1]);
  v159 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v160, &v159, (uint64_t *)&v158);
  v139 = a2;
  v140 = (float32x2_t *)a5;
  if (*(_QWORD *)&v158.f64[0] == *(_QWORD *)&v158.f64[1])
  {
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 6;
    v24 = 6;
  }
  else
  {
    v19 = v158.f64[0];
    while (1)
    {
      v20 = *(_DWORD *)(*(_QWORD *)&v19 + 128);
      if (v20 - 3 <= 8)
        break;
      *(_QWORD *)&v19 += 136;
      if (*(_QWORD *)&v19 == *(_QWORD *)&v158.f64[1])
      {
        v20 = 6;
        break;
      }
    }
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v144 = v158;
    v24 = 6;
    do
    {
      v25 = *(_DWORD *)(*sub_20C5A0A08(&v144, v17, v18) + 128);
      v28 = sub_20C5A0A08(&v144, v26, v27);
      if ((v25 - 3) >= 9)
      {
        if (*(_DWORD *)(*v28 + 128) == 2)
        {
          v22 = 1;
        }
        else if (*(_DWORD *)(*sub_20C5A0A08(&v144, v29, v30) + 128) == 1)
        {
          v21 += *(unsigned __int8 *)(*sub_20C5A0A08(&v144, v31, v32) + 132);
        }
      }
      else
      {
        v23 = 1;
        v24 = *(_DWORD *)(*v28 + 128);
      }
      sub_20C5A0A80(&v144);
    }
    while (*(_QWORD *)&v144.f64[0] != *(_QWORD *)&v144.f64[1]);
  }
  v136 = a3;
  v138 = a6;
  v33 = (char *)operator new(4uLL);
  *(_DWORD *)v33 = 1;
  v156 = v33 + 4;
  v157 = v33 + 4;
  __p = v33;
  v35 = (char *)sub_20BDE1330((uint64_t)&v157, 2uLL);
  v36 = (char *)__p;
  v37 = v156;
  *((_DWORD *)v35 + 1) = 1;
  v38 = v35 + 4;
  v39 = &v35[4 * v34];
  v40 = v35 + 8;
  while (v37 != v36)
  {
    v41 = *((_DWORD *)v37 - 1);
    v37 -= 4;
    *((_DWORD *)v38 - 1) = v41;
    v38 -= 4;
  }
  __p = v38;
  v156 = v35 + 8;
  v157 = &v35[4 * v34];
  if (v36)
  {
    operator delete(v36);
    v39 = v157;
  }
  v156 = v35 + 8;
  if ((v23 & 1) != 0)
  {
    if (v40 >= v39)
    {
      v44 = (char *)__p;
      v45 = (v40 - (_BYTE *)__p) >> 2;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 62)
        sub_20BDDF694();
      v47 = v39 - (_BYTE *)__p;
      if (v47 >> 1 > v46)
        v46 = v47 >> 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)sub_20BDE1330((uint64_t)&v157, v48);
        v44 = (char *)__p;
        v40 = v156;
      }
      else
      {
        v49 = 0;
      }
      v50 = (int *)&v49[4 * v45];
      v39 = &v49[4 * v48];
      *v50 = v24;
      v42 = (char *)(v50 + 1);
      while (v40 != v44)
      {
        v51 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *--v50 = v51;
      }
      __p = v50;
      v156 = v42;
      v157 = v39;
      if (v44)
      {
        operator delete(v44);
        v39 = v157;
      }
    }
    else
    {
      *((_DWORD *)v35 + 2) = v24;
      v42 = v35 + 12;
    }
    v156 = v42;
    v43 = 3;
    v134 = 2;
    v40 = v42;
  }
  else
  {
    v43 = 2;
    v134 = 0xFFFFFFFFLL;
  }
  if (v21 < 2)
  {
    v137 = -1;
    if ((v22 & 1) == 0)
    {
LABEL_76:
      v68 = -1;
      goto LABEL_84;
    }
  }
  else
  {
    if (v40 >= v39)
    {
      v54 = (char *)__p;
      v55 = (v40 - (_BYTE *)__p) >> 2;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62)
        sub_20BDDF694();
      v57 = v39 - (_BYTE *)__p;
      if (v57 >> 1 > v56)
        v56 = v57 >> 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
        v58 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        v59 = (char *)sub_20BDE1330((uint64_t)&v157, v58);
        v54 = (char *)__p;
        v40 = v156;
      }
      else
      {
        v59 = 0;
      }
      v66 = &v59[4 * v55];
      v39 = &v59[4 * v58];
      *(_DWORD *)v66 = 1;
      v52 = v66 + 4;
      while (v40 != v54)
      {
        v67 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *((_DWORD *)v66 - 1) = v67;
        v66 -= 4;
      }
      __p = v66;
      v156 = v52;
      v157 = v39;
      if (v54)
      {
        operator delete(v54);
        v39 = v157;
      }
    }
    else
    {
      *(_DWORD *)v40 = 1;
      v52 = v40 + 4;
    }
    v156 = v52;
    v137 = v43++;
    v40 = v52;
    if ((v22 & 1) == 0)
      goto LABEL_76;
  }
  if (v40 >= v39)
  {
    v60 = (char *)__p;
    v61 = (v40 - (_BYTE *)__p) >> 2;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 62)
      sub_20BDDF694();
    v63 = v39 - (_BYTE *)__p;
    if (v63 >> 1 > v62)
      v62 = v63 >> 1;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
      v64 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    if (v64)
    {
      v65 = (char *)sub_20BDE1330((uint64_t)&v157, v64);
      v60 = (char *)__p;
      v40 = v156;
    }
    else
    {
      v65 = 0;
    }
    v69 = &v65[4 * v61];
    v39 = &v65[4 * v64];
    *(_DWORD *)v69 = 2;
    v53 = v69 + 4;
    while (v40 != v60)
    {
      v70 = *((_DWORD *)v40 - 1);
      v40 -= 4;
      *((_DWORD *)v69 - 1) = v70;
      v69 -= 4;
    }
    __p = v69;
    v156 = v53;
    v157 = v39;
    if (v60)
    {
      operator delete(v60);
      v39 = v157;
    }
  }
  else
  {
    *(_DWORD *)v40 = 2;
    v53 = v40 + 4;
  }
  v156 = v53;
  v68 = v43++;
  v40 = v53;
LABEL_84:
  v135 = v68;
  if (v40 >= v39)
  {
    v72 = (char *)__p;
    v73 = (v40 - (_BYTE *)__p) >> 2;
    v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 62)
      sub_20BDDF694();
    v75 = v39 - (_BYTE *)__p;
    if (v75 >> 1 > v74)
      v74 = v75 >> 1;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
      v76 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v76 = v74;
    if (v76)
    {
      v77 = (char *)sub_20BDE1330((uint64_t)&v157, v76);
      v72 = (char *)__p;
      v40 = v156;
    }
    else
    {
      v77 = 0;
    }
    v78 = &v77[4 * v73];
    v79 = &v77[4 * v76];
    *(_DWORD *)v78 = 1;
    v71 = v78 + 4;
    while (v40 != v72)
    {
      v80 = *((_DWORD *)v40 - 1);
      v40 -= 4;
      *((_DWORD *)v78 - 1) = v80;
      v78 -= 4;
    }
    __p = v78;
    v156 = v71;
    v157 = v79;
    if (v72)
      operator delete(v72);
  }
  else
  {
    *(_DWORD *)v40 = 1;
    v71 = v40 + 4;
  }
  v156 = v71;
  v81 = __p;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v144, 1.0);
  sub_20C57FA18(v154, (v71 - v81) >> 2, (__int128 *)&v144);
  v82 = -252645135 * ((*(_QWORD *)&v158.f64[1] - *(_QWORD *)&v158.f64[0]) >> 3) - 1;
  v83 = ((unint64_t)(v156 - (_BYTE *)__p) >> 2) - 1;
  while ((v82 & 0x80000000) == 0 && (v83 & 0x80000000) == 0)
  {
    v84 = v158.f64[0];
    sub_20C543CC8((uint64_t)&v144, *(_QWORD *)&v158.f64[0] + 136 * v82);
    v85 = *(_QWORD *)&v84 + 136 * v82;
    v86 = *(_DWORD *)(v85 + 128);
    v153 = *(_BYTE *)(v85 + 132);
    v152 = v86;
    v87 = *((_DWORD *)__p + v83);
    if (v86 == v87)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform((uint64_t)&v144, &v161, a7);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v154[0] + 16 * (unint64_t)v83, v161.f64);
      --v82;
      if (v87 != v20)
      {
        if (v87 != 1)
          goto LABEL_107;
        if (!v153)
        {
          if (v83 == 1)
          {
            v88 = *((_OWORD *)v154[0] + 13);
            v165 = *((_OWORD *)v154[0] + 12);
            v166 = v88;
            v89 = *((_OWORD *)v154[0] + 15);
            v167 = *((_OWORD *)v154[0] + 14);
            v168 = v89;
            v90 = *((_OWORD *)v154[0] + 9);
            v161 = *((float64x2_t *)v154[0] + 8);
            v162 = v90;
            v91 = *((_OWORD *)v154[0] + 11);
            v163 = *((_OWORD *)v154[0] + 10);
            v164 = v91;
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v161.f64, (double *)v154[0] + 16 * v43);
            v83 = !sub_20C5A9ADC(&v161);
          }
          goto LABEL_107;
        }
      }
    }
    --v83;
LABEL_107:
    sub_20C5435DC((uint64_t)&v144);
  }
  if ((v137 & 0x80000000) != 0)
  {
    v94 = v82 >> 31;
    v93 = v138;
  }
  else
  {
    v92 = sub_20C5A9ADC((float64x2_t *)v154[0] + 8 * (unint64_t)v137);
    v93 = v138;
    v94 = (v82 & 0x80000000) != 0 && v92;
  }
  v95 = (float64x2_t *)v154[0];
  if (v83 == (_DWORD)v43)
  {
    v96 = (float64x2_t *)((char *)v154[0] + 128 * v43);
    v97 = *v96;
    v98 = v96[1];
    v99 = v96[3];
    *((float64x2_t *)v154[0] + 2) = v96[2];
    v95[3] = v99;
    *v95 = v97;
    v95[1] = v98;
    v100 = v96[4];
    v101 = v96[5];
    v102 = v96[7];
    v95[6] = v96[6];
    v95[7] = v102;
    v95[4] = v100;
    v95[5] = v101;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v144, 1.0);
    v95 = (float64x2_t *)v154[0];
    v103 = (float64x2_t *)((char *)v154[0] + 128 * v43);
    v104 = v144;
    v105 = v145;
    v106 = v147;
    v103[2] = v146;
    v103[3] = v106;
    v103[1] = v105;
    v107 = v149;
    v108 = v151;
    v109 = v148;
    v103[6] = v150;
    v103[7] = v108;
    v103[4] = v109;
    v103[5] = v107;
    *v103 = v104;
  }
  v110 = v95[12];
  v111 = v95[14];
  v112 = v95[15];
  v149 = v95[13];
  v150 = v111;
  v151 = v112;
  v113 = v95[9];
  v144 = v95[8];
  v145 = v113;
  v114 = v95[11];
  v146 = v95[10];
  v147 = v114;
  v148 = v110;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v144.f64, v95[8 * v43].f64);
  if ((sub_20C5A9ADC(&v144) & v94 & 1) != 0)
  {
    if (v139)
    {
      v115 = *((_QWORD *)v154[0] + 14);
      *(_OWORD *)v139 = *((_OWORD *)v154[0] + 6);
      v139[2] = v115;
    }
    if (v140)
    {
      v116 = *((double *)v154[0] + 30);
      *v140 = vcvt_f32_f64(*((float64x2_t *)v154[0] + 14));
      v140[1].f32[0] = v116;
    }
    if (v136)
    {
      if ((v23 & 1) == 0)
      {
        *(_QWORD *)v136 = 0;
        v136[2] = 0;
        if (!a4)
        {
LABEL_128:
          if (!v93)
            goto LABEL_140;
          goto LABEL_136;
        }
LABEL_132:
        if ((v135 & 0x80000000) != 0)
        {
          __asm { FMOV            V0.2S, #1.0 }
          *a4 = _D0;
          a4[1].i32[0] = 1065353216;
          if (!v93)
          {
LABEL_140:
            XformVectors = 1;
            goto LABEL_141;
          }
        }
        else
        {
          v124 = (double *)((char *)v154[0] + 128 * (unint64_t)v135);
          v125 = *v124;
          a4->f32[0] = v125;
          v126 = v124[5];
          a4->f32[1] = v126;
          v127 = v124[10];
          a4[1].f32[0] = v127;
          if (!v93)
            goto LABEL_140;
        }
LABEL_136:
        if (v20 - 6 > 5)
          v133 = 0;
        else
          v133 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(v20);
        *v93 = v133;
        goto LABEL_140;
      }
      v144.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v154[0] + 128 * v134));
      v144.f64[1] = v117;
      v145.f64[0] = v118;
      v145.f64[1] = v119;
      *(_QWORD *)&v162 = 0;
      v161 = (float64x2_t)0x3FF0000000000000uLL;
      v142 = xmmword_20CA52210;
      v143 = 0;
      v141[0] = 0.0;
      v141[1] = 0.0;
      v141[2] = 1.0;
      v120 = pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v144, v161.f64, (double *)&v142, v141);
      *(float *)&v121 = v121;
      *(float *)&v122 = v122;
      *(float *)v136 = v120;
      v136[1] = LODWORD(v121);
      v136[2] = LODWORD(v122);
    }
    if (!a4)
      goto LABEL_128;
    goto LABEL_132;
  }
  XformVectors = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(a1, v139, v136, a4, (uint64_t)v140, v93, a7);
LABEL_141:
  if (v154[0])
  {
    v154[1] = v154[0];
    operator delete(v154[0]);
  }
  if (__p)
  {
    v156 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)&v144.f64[0] = &v158;
  sub_20C54356C((void ***)&v144);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v160);
  return XformVectors;
}

void sub_20C5A9A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char *a45,char *a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (__p)
    operator delete(__p);
  if (a45)
  {
    a46 = a45;
    operator delete(a45);
  }
  a45 = &a48;
  sub_20C54356C((void ***)&a45);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&a52);
  _Unwind_Resume(a1);
}

BOOL sub_20C5A9ADC(float64x2_t *a1)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19[8];

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v19, 1.0);
  v2 = vsubq_f64(*a1, v19[0]);
  v3 = vmulq_f64(v2, v2);
  v4 = vsubq_f64(a1[1], v19[1]);
  v5 = vmulq_f64(v4, v4);
  if (vaddq_f64(vaddq_f64(vaddq_f64(v3, (float64x2_t)vdupq_laneq_s64((int64x2_t)v3, 1)), v5), (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).f64[0] > 1.0e-12)return 0;
  v6 = vsubq_f64(a1[2], v19[2]);
  v7 = vmulq_f64(v6, v6);
  v8 = vsubq_f64(a1[3], v19[3]);
  v9 = vmulq_f64(v8, v8);
  if (vaddq_f64(vaddq_f64(vaddq_f64(v7, (float64x2_t)vdupq_laneq_s64((int64x2_t)v7, 1)), v9), (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)).f64[0] > 1.0e-12)return 0;
  v10 = vsubq_f64(a1[4], v19[4]);
  v11 = vmulq_f64(v10, v10);
  v12 = vsubq_f64(a1[5], v19[5]);
  v13 = vmulq_f64(v12, v12);
  if (vaddq_f64(vaddq_f64(vaddq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)), v13), (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0] > 1.0e-12)return 0;
  v14 = vsubq_f64(a1[6], v19[6]);
  v15 = vmulq_f64(v14, v14);
  v16 = vsubq_f64(a1[7], v19[7]);
  v17 = vmulq_f64(v16, v16);
  return vaddq_f64(vaddq_f64(vaddq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)), v17), (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1)).f64[0] <= 1.0e-12;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  _BOOL8 ResetXformStack;
  unsigned int *v2;
  unsigned int v3;
  _BYTE v5[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[3];

  sub_20C35C4F8((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v5);
  v10[0] = off_24C53D0E0;
  ResetXformStack = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetResetXformStack((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v10);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v10);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return ResetXformStack;
}

void sub_20C5A9C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va1);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this, int a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[3];

  sub_20C35C4F8((uint64_t)v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v7);
  v12[0] = off_24C53D0E0;
  v3 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetResetXformStack((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v12, a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v3;
}

void sub_20C5A9D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va1);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetTranslate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v5;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v6;
  uint64_t v7;
  _BYTE v9[136];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, 1, 0, 0, 0, (uint64_t)v9);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v9);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v5, v6) & 1) != 0)
    v7 = sub_20C5A8720((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v9, a2, a3);
  else
    v7 = 0;
  sub_20C5435DC((uint64_t)&v13);
  sub_20C5435DC((uint64_t)&v12);
  sub_20C5435DC((uint64_t)&v11);
  sub_20C5435DC((uint64_t)&v10);
  sub_20C5435DC((uint64_t)v9);
  return v7;
}

void sub_20C5A9E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A8940((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int *v11;
  unsigned int v12;
  _BYTE v13[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  void (**v18)(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *__hidden);
  uint64_t v19;

  sub_20C35C4F8((uint64_t)v13, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v13);
  v18 = off_24C53D0E0;
  if ((v17 & 7) != 0)
  {
    v11 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  if (v19
    && (*(_BYTE *)(v19 + 57) & 8) == 0
    && (((uint64_t (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v18[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v18) & 1) != 0)
  {
    sub_20C5AA3A4((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v18, 0, (a3 | a2 | a4 | a5) & 1, ((a3 | a2 | a4 | a5) >> 1) & 1, ((a3 | a2 | a4 | a5) >> 2) & 1, ((a3 | a2 | a4 | a5) >> 3) & 1, (_DWORD *)a6);
  }
  else
  {
    bzero((void *)a6, 0x2A8uLL);
    *(_DWORD *)a6 = 3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 20));
    *(_QWORD *)(a6 + 24) = 0;
    *(_DWORD *)(a6 + 120) = 0;
    *(_DWORD *)(a6 + 136) = 3;
    *(_QWORD *)(a6 + 144) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 152));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 156));
    *(_QWORD *)(a6 + 160) = 0;
    *(_DWORD *)(a6 + 256) = 0;
    *(_DWORD *)(a6 + 272) = 3;
    *(_QWORD *)(a6 + 280) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 288));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 292));
    *(_QWORD *)(a6 + 296) = 0;
    *(_DWORD *)(a6 + 392) = 0;
    *(_DWORD *)(a6 + 408) = 3;
    *(_QWORD *)(a6 + 416) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 424));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 428));
    *(_QWORD *)(a6 + 432) = 0;
    *(_DWORD *)(a6 + 528) = 0;
    *(_DWORD *)(a6 + 544) = 3;
    *(_QWORD *)(a6 + 552) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 560));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 564));
    *(_QWORD *)(a6 + 568) = 0;
    *(_DWORD *)(a6 + 664) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v18);
}

void sub_20C5AA030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetPivot(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v5;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v6;
  uint64_t v7;
  _BYTE v9[136];
  _BYTE v10[136];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, 2, 0, 0, 0, (uint64_t)v9);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v10);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v5, v6) & 1) != 0)
    v7 = sub_20C5A8830((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v10, a2, a3);
  else
    v7 = 0;
  sub_20C5435DC((uint64_t)&v13);
  sub_20C5435DC((uint64_t)&v12);
  sub_20C5435DC((uint64_t)&v11);
  sub_20C5435DC((uint64_t)v10);
  sub_20C5435DC((uint64_t)v9);
  return v7;
}

void sub_20C5AA110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A8940((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetRotate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v6;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v7;
  uint64_t v8;
  _BYTE v10[136];
  uint64_t v11;
  _BYTE v12[136];
  uint64_t v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, a3, 4, 0, 0, 0, (uint64_t)v10);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v12);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v6, v7) & 1) != 0)
    v8 = sub_20C5A8830((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v12, a2, a4);
  else
    v8 = 0;
  sub_20C5435DC((uint64_t)&v14);
  sub_20C5435DC((uint64_t)&v13);
  sub_20C5435DC((uint64_t)v12);
  sub_20C5435DC((uint64_t)&v11);
  sub_20C5435DC((uint64_t)v10);
  return v8;
}

void sub_20C5AA1DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A8940((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetScale(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v5;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v6;
  uint64_t v7;
  _BYTE v9[136];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[136];
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, 8, 0, 0, 0, (uint64_t)v9);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)v12);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v5, v6) & 1) != 0)
    v7 = sub_20C5A8830((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v12, a2, a3);
  else
    v7 = 0;
  sub_20C5435DC((uint64_t)&v13);
  sub_20C5435DC((uint64_t)v12);
  sub_20C5435DC((uint64_t)&v11);
  sub_20C5435DC((uint64_t)&v10);
  sub_20C5435DC((uint64_t)v9);
  return v7;
}

void sub_20C5AA2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A8940((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5AA2B8(uint64_t a1)
{
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 136) = 3;
  *(_QWORD *)(a1 + 144) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 152));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 156));
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 3;
  *(_QWORD *)(a1 + 280) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 292));
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 408) = 3;
  *(_QWORD *)(a1 + 416) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 424));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 428));
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 544) = 3;
  *(_QWORD *)(a1 + 552) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 560));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 564));
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  return a1;
}

uint64_t sub_20C5AA3A4@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v14;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v17;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v19;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v23;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v25;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v26;
  const char *Text;
  char *v28;
  void **v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v32;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v34;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v35;
  uint64_t v36;
  const char *v37;
  int v38;
  void **v39;
  void **v40;
  void **v41;
  unsigned int *v42;
  unsigned int v43;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v44;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v45;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v46;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v47;
  unsigned int *v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v50;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v51;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v52;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v53;
  const char *v54;
  unsigned int v55;
  const char *v56;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v57;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v58;
  const char *v59;
  unsigned int v60;
  const char *v61;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v62;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v63;
  const char *v64;
  unsigned int v65;
  const char *v66;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v67;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v68;
  const char *v69;
  unsigned int v70;
  const char *v71;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v72;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v73;
  const char *v74;
  unsigned int v75;
  const char *v76;
  char *v78;
  const char *v79;
  unint64_t v80;
  const char *v81;
  char v82;
  unsigned int v83;
  char v84;
  void *__p[2];
  char v86;
  void *v87[2];
  char v88;
  int v89;
  int v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  char v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  char v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  char v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  char v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  char v131;

  v124 = 3;
  v125 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v126);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v127);
  v128 = 0;
  v129 = 0;
  v116 = 3;
  v117 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v118);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v119);
  v120 = 0;
  v121 = 0;
  v108 = 3;
  v109 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v110);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v111);
  v112 = 0;
  v113 = 0;
  v100 = 3;
  v101 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v102);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v103);
  v104 = 0;
  v105 = 0;
  v92 = 3;
  v93 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v94);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v95);
  v96 = 0;
  v97 = 0;
  v91 = 0;
  if ((sub_20C5A7E68(a1, (uint64_t)&v124, (uint64_t)&v116, (uint64_t)&v108, (uint64_t)&v100, (uint64_t)&v92, &v91) & 1) == 0)
  {
    v78 = "usdGeom/xformCommonAPI.cpp";
    v79 = "_GetOrAddCommonXformOps";
    v80 = 860;
    v81 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformable &,"
          " const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
    v82 = 0;
    sub_20C3630C0((uint64_t)a1, v87);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v87);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v78, (pxrInternal__aapl__pxrReserved__ *)"Could not determine xform ops for incompatible xformable <%s>", v28, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v87 + 1);
    v29 = v87;
LABEL_19:
    sub_20BFD265C(v29);
    goto LABEL_20;
  }
  if (a2)
  {
    if (a5)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v108);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v14, v15))
      {
        v16 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(v114);
        if (v16 != *a2)
        {
          v78 = "usdGeom/xformCommonAPI.cpp";
          v79 = "_GetOrAddCommonXformOps";
          v80 = 875;
          v81 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXforma"
                "ble &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
          v82 = 0;
          sub_20C3630C0((uint64_t)a1, &v89);
          v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v89);
          pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D210, *a2, (uint64_t)v87);
          v38 = v88;
          v39 = (void **)v87[0];
          pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C53D210, v16, (uint64_t)__p);
          v40 = v87;
          if (v38 < 0)
            v40 = v39;
          if (v86 >= 0)
            v41 = __p;
          else
            v41 = (void **)__p[0];
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Rotation order mismatch on prim <%s> (%s != %s)", v37, (const char *)v40, (const char *)v41);
          if (v86 < 0)
            operator delete(__p[0]);
          if (v88 < 0)
            operator delete(v87[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v90);
          v29 = (void **)&v89;
          goto LABEL_19;
        }
      }
    }
  }
  if (!a3)
    goto LABEL_9;
  v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v124);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v17, v18) & 1) != 0)
  {
    a3 = 0;
LABEL_9:
    if (a4)
      goto LABEL_10;
    goto LABEL_26;
  }
  v87[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp((uint64_t)a1, 0, v87, 0, (uint64_t)&v78);
  sub_20C5A287C((uint64_t)&v124, (uint64_t)&v78);
  v130 = v83;
  v131 = v84;
  sub_20C5435DC((uint64_t)&v78);
  if (((uint64_t)v87[0] & 7) != 0)
  {
    v30 = (unsigned int *)((unint64_t)v87[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v124);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v32, v33) & 1) == 0)
  {
    v78 = "usdGeom/xformCommonAPI.cpp";
    v79 = "_GetOrAddCommonXformOps";
    v80 = 885;
    v81 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformable &,"
          " const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
    v82 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "t", 0) & 1) == 0)
      goto LABEL_89;
  }
  a3 = 1;
  if (a4)
  {
LABEL_10:
    v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v116);
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v19, v20) & 1) == 0)
    {
      v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v21)
        v21 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp((uint64_t)a1, 1, (_QWORD *)v21 + 100, 0, (uint64_t)&v78);
      sub_20C5A287C((uint64_t)&v116, (uint64_t)&v78);
      v122 = v83;
      v123 = v84;
      sub_20C5435DC((uint64_t)&v78);
      v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v22)
        v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp((uint64_t)a1, 1, (_QWORD *)v22 + 100, 1, (uint64_t)&v78);
      sub_20C5A287C((uint64_t)&v92, (uint64_t)&v78);
      v98 = v83;
      v99 = v84;
      sub_20C5435DC((uint64_t)&v78);
      v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v116);
      if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v23, v24)
        || (v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v92),
            (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v25, v26) & 1) == 0))
      {
        v78 = "usdGeom/xformCommonAPI.cpp";
        v79 = "_GetOrAddCommonXformOps";
        v80 = 896;
        v81 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformabl"
              "e &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
        v82 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "p && pInv", 0) & 1) == 0)
          goto LABEL_89;
      }
      a3 = 1;
    }
  }
LABEL_26:
  if (!a5
    || (v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v108),
        (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v34, v35) & 1) != 0))
  {
LABEL_46:
    if (a6
      && (v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v100),
          (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v46, v47) & 1) == 0))
    {
      v87[0] = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddScaleOp((uint64_t)a1, 1, v87, 0, (uint64_t)&v78);
      sub_20C5A287C((uint64_t)&v100, (uint64_t)&v78);
      v106 = v83;
      v107 = v84;
      sub_20C5435DC((uint64_t)&v78);
      if (((uint64_t)v87[0] & 7) != 0)
      {
        v48 = (unsigned int *)((unint64_t)v87[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      v50 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v100);
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v50, v51) & 1) == 0)
      {
        v78 = "usdGeom/xformCommonAPI.cpp";
        v79 = "_GetOrAddCommonXformOps";
        v80 = 915;
        v81 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformabl"
              "e &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
        v82 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "s", 0) & 1) == 0)
        {
LABEL_89:
          bzero(a7, 0x2A8uLL);
          sub_20C5AA2B8((uint64_t)a7);
          goto LABEL_81;
        }
      }
    }
    else if (!a3)
    {
LABEL_80:
      sub_20C5A29DC((uint64_t)a7, (uint64_t)&v124);
      a7[32] = v130;
      *((_BYTE *)a7 + 132) = v131;
      sub_20C5A29DC((uint64_t)(a7 + 34), (uint64_t)&v116);
      a7[66] = v122;
      *((_BYTE *)a7 + 268) = v123;
      sub_20C5A29DC((uint64_t)(a7 + 68), (uint64_t)&v108);
      a7[100] = v114;
      *((_BYTE *)a7 + 404) = v115;
      sub_20C5A29DC((uint64_t)(a7 + 102), (uint64_t)&v100);
      a7[134] = v106;
      *((_BYTE *)a7 + 540) = v107;
      sub_20C5A29DC((uint64_t)(a7 + 136), (uint64_t)&v92);
      a7[168] = v98;
      *((_BYTE *)a7 + 676) = v99;
      goto LABEL_81;
    }
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v52 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v124);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v52, v53))
    {
      v54 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v56 = (const char *)sub_20C5AB2C4((uint64_t *)&v78, (uint64_t)&v124);
      }
      else
      {
        sub_20C543CC8((uint64_t)v79, (uint64_t)&v124);
        v55 = v130;
        *((_BYTE *)v54 + 132) = v131;
        *((_DWORD *)v54 + 32) = v55;
        v56 = v54 + 136;
      }
      v79 = v56;
    }
    v57 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v116);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v57, v58))
    {
      v59 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v61 = (const char *)sub_20C5AB2C4((uint64_t *)&v78, (uint64_t)&v116);
      }
      else
      {
        sub_20C543CC8((uint64_t)v79, (uint64_t)&v116);
        v60 = v122;
        *((_BYTE *)v59 + 132) = v123;
        *((_DWORD *)v59 + 32) = v60;
        v61 = v59 + 136;
      }
      v79 = v61;
    }
    v62 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v108);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v62, v63))
    {
      v64 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v66 = (const char *)sub_20C5AB2C4((uint64_t *)&v78, (uint64_t)&v108);
      }
      else
      {
        sub_20C543CC8((uint64_t)v79, (uint64_t)&v108);
        v65 = v114;
        *((_BYTE *)v64 + 132) = v115;
        *((_DWORD *)v64 + 32) = v65;
        v66 = v64 + 136;
      }
      v79 = v66;
    }
    v67 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v100);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v67, v68))
    {
      v69 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v71 = (const char *)sub_20C5AB2C4((uint64_t *)&v78, (uint64_t)&v100);
      }
      else
      {
        sub_20C543CC8((uint64_t)v79, (uint64_t)&v100);
        v70 = v106;
        *((_BYTE *)v69 + 132) = v107;
        *((_DWORD *)v69 + 32) = v70;
        v71 = v69 + 136;
      }
      v79 = v71;
    }
    v72 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v92);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v72, v73))
    {
      v74 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v76 = (const char *)sub_20C5AB2C4((uint64_t *)&v78, (uint64_t)&v92);
      }
      else
      {
        sub_20C543CC8((uint64_t)v79, (uint64_t)&v92);
        v75 = v98;
        *((_BYTE *)v74 + 132) = v99;
        *((_DWORD *)v74 + 32) = v75;
        v76 = v74 + 136;
      }
      v79 = v76;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder((uint64_t)a1, &v78, v91);
    v87[0] = &v78;
    sub_20C54356C((void ***)v87);
    goto LABEL_80;
  }
  if (a2)
    v36 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(*a2);
  else
    v36 = 6;
  v87[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp((uint64_t)a1, v36, 1, v87, 0, (uint64_t)&v78);
  sub_20C5A287C((uint64_t)&v108, (uint64_t)&v78);
  v114 = v83;
  v115 = v84;
  sub_20C5435DC((uint64_t)&v78);
  if (((uint64_t)v87[0] & 7) != 0)
  {
    v42 = (unsigned int *)((unint64_t)v87[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_20C555914((uint64_t)&v108);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v44, v45)
    || (v78 = "usdGeom/xformCommonAPI.cpp",
        v79 = "_GetOrAddCommonXformOps",
        v80 = 908,
        v81 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformabl"
              "e &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)",
        v82 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "r", 0) & 1) != 0))
  {
    a3 = 1;
    goto LABEL_46;
  }
LABEL_20:
  bzero(a7, 0x2A8uLL);
  *a7 = 3;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 5);
  *((_QWORD *)a7 + 3) = 0;
  a7[30] = 0;
  a7[34] = 3;
  *((_QWORD *)a7 + 18) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 39);
  *((_QWORD *)a7 + 20) = 0;
  a7[64] = 0;
  a7[68] = 3;
  *((_QWORD *)a7 + 35) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 72);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 73);
  *((_QWORD *)a7 + 37) = 0;
  a7[98] = 0;
  a7[102] = 3;
  *((_QWORD *)a7 + 52) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 106);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 107);
  *((_QWORD *)a7 + 54) = 0;
  a7[132] = 0;
  a7[136] = 3;
  *((_QWORD *)a7 + 69) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 140);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 141);
  *((_QWORD *)a7 + 71) = 0;
  a7[166] = 0;
LABEL_81:
  sub_20C5435DC((uint64_t)&v92);
  sub_20C5435DC((uint64_t)&v100);
  sub_20C5435DC((uint64_t)&v108);
  sub_20C5435DC((uint64_t)&v116);
  return sub_20C5435DC((uint64_t)&v124);
}

void sub_20C5AAD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  sub_20C5435DC((uint64_t)&a38);
  sub_20C5435DC((uint64_t)&a55);
  sub_20C5435DC((uint64_t)&a72);
  sub_20C5435DC((uint64_t)&STACK[0x280]);
  sub_20C5435DC(v72 - 216);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetRotationTransform@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3@<X8>)
{
  unsigned int v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v5 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(a2);
  v10[1] = (char *)&off_24C51E0D8 + 2;
  v6 = operator new(0x10uLL);
  *(_QWORD *)v6 = *(_QWORD *)a1;
  v6[2] = *(_DWORD *)(a1 + 8);
  v7 = v6 + 3;
  atomic_store(0, v6 + 3);
  v10[0] = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(v5, (pxrInternal__aapl__pxrReserved__::VtValue *)v10, 0, a3);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C5AAFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5AAFE0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5AB0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5AB104()
{
  unsigned int *v0;
  unsigned int v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(1, &v5, 0, (std::string *)&qword_25498A110);
  if ((v5 & 7) != 0)
  {
    v0 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(1, (_QWORD *)v2 + 100, 0, (std::string *)&qword_25498A118);
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(2, &v5, 0, (std::string *)&qword_25498A120);
  if ((v5 & 7) != 0)
  {
    v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
}

void sub_20C5AB1CC(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  if ((qword_25498A110 & 7) != 0)
  {
    v1 = (unsigned int *)(qword_25498A110 & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5AB260(_QWORD *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = result[2];
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  v4 = result[1];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((*result & 7) != 0)
  {
    v7 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

uint64_t sub_20C5AB2C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xF0F0F0F0F0F0F0)
    v9 = 0x1E1E1E1E1E1E1E1;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C381580(v7, v9);
  else
    v10 = 0;
  v15 = v10;
  v16 = &v10[136 * v4];
  v17 = (uint64_t)v16;
  v18 = &v10[136 * v9];
  sub_20C543CC8((uint64_t)v16, a2);
  v11 = (uint64_t)v16;
  v12 = *(_DWORD *)(a2 + 128);
  v16[132] = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(v11 + 128) = v12;
  v17 += 136;
  sub_20C5A3108(a1, &v15);
  v13 = a1[1];
  sub_20C5A31B8((uint64_t)&v15);
  return v13;
}

void sub_20C5AB3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5A31B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5AB3E0(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(a2, **a1);
}

uint64_t sub_20C5AB3F8(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(a2, **a1, *((double *)*a1 + 1));
}

void sub_20C5AB410(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(a2, **a1);
}

uint64_t sub_20C5AB428(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(a2, **a1, *((double *)*a1 + 1));
}

void sub_20C5AB440()
{
  void *__p[2];
  char v1;

  sub_20C5ABF3C();
  sub_20BDDC0E4(__p, "AAPLBlendShape");
  sub_20C5AC05C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5AB48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::~UsdDeformersBlendShape(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D250;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdDeformers/blendShape.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdDeformersBlendShape pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D250;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5AB630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A138);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A138))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A130, "BlendShape");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A130, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A138);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A130, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D250;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdDeformers/blendShape.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdDeformersBlendShape pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Defi"
                            "ne(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D250;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5AB820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A138);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A148);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A148))
  {
    __cxa_guard_release(&qword_25498A148);
  }
  return &qword_25498A140;
}

void sub_20C5AB8C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A148);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A158);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *)__cxa_guard_acquire(&qword_25498A158);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(v3);
      byte_25498A150 = sub_20C35BD7C((char *)&qword_25498A140, v4, v5);
      __cxa_guard_release(&qword_25498A158);
    }
  }
  return byte_25498A150;
}

void sub_20C5AB940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A158);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(this);
  return &qword_25498A140;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ABA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::CreatePointsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 664), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ABB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::CreatePointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A178);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A178))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5)
      v5 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v6 = *((_QWORD *)v5 + 9);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v9)
      v9 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 8);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498A160, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A160, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A178);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A198);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A198))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C5ABE88((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A180, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A198);
  }
  if (v1)
    return &qword_25498A180;
  else
    return &qword_25498A160;
}

void sub_20C5ABE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498A178);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5ABE88(uint64_t **a1)
{
  qword_25498A188 = 0;
  unk_25498A190 = 0;
  qword_25498A180 = 0;
  sub_20BFC9A6C((char **)&qword_25498A180, ((unk_25498A168 - qword_25498A160) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A180, (_QWORD *)qword_25498A188, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A180, (_QWORD *)qword_25498A188, (uint64_t *)qword_25498A160, unk_25498A168, (unk_25498A168 - qword_25498A160) >> 3);
}

void sub_20C5ABF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5ABF3C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5AC010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5AC05C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5AC0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *sub_20C5AC110(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *result;
  void *v4;

  result = sub_20C5AC158();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C5AC198((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *sub_20C5AC158()
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)operator new(0xC8uLL);
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType::UsdDeformersTokensType(v0);
  return v0;
}

void sub_20C5AC184(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5AC198(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  void **v68;

  v68 = (void **)(a1 + 176);
  sub_20BEEB2B8(&v68);
  v2 = *(_QWORD *)(a1 + 168);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 160);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 152);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 144);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 136);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 128);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 120);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 112);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 104);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 96);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 88);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 80);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 72);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 64);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 56);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 48);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 40);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 32);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 24);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 16);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 8);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v65 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v66 = __ldxr(v65);
    while (__stlxr(v66 - 2, v65));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::~UsdDeformersMorphDeformerAPI(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D2A8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdDeformers/morphDeformerAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdDeformersMorphDeformerAPI pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDefor"
                            "merAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D2A8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5AC624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  return 5;
}

uint64_t sub_20C5AC64C(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A1A0, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdDeformersMorphDeformerAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5AC804(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D2A8;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D2A8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5AC7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5AC804(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A1A0, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdDeformersMorphDeformerAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A1A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A1A8))
  {
    __cxa_guard_release(&qword_25498A1A8);
  }
  return &qword_25498A1A0;
}

void sub_20C5AC920(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A1A8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A1B8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *)__cxa_guard_acquire(&qword_25498A1B8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(v3);
      byte_25498A1B0 = sub_20C35BD7C((char *)&qword_25498A1A0, v4, v5);
      __cxa_guard_release(&qword_25498A1B8);
    }
  }
  return byte_25498A1B0;
}

void sub_20C5AC99C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A1B8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(this);
  return &qword_25498A1A0;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 40), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ACA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 16), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ACBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 24), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ACD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 32), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ACE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 32), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ACF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A1D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A1D8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5)
      v5 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v6 = *((_QWORD *)v5 + 5);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v9)
      v9 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v10 = *((_QWORD *)v9 + 2);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v13)
      v13 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v14 = *((_QWORD *)v13 + 3);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498A1C0, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A1C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A1D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A1F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A1F8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5AD238((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A1E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A1F8);
  }
  if (v1)
    return &qword_25498A1E0;
  else
    return &qword_25498A1C0;
}

void sub_20C5AD1A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A1D8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5AD238(uint64_t **a1)
{
  qword_25498A1E8 = 0;
  unk_25498A1F0 = 0;
  qword_25498A1E0 = 0;
  sub_20BFC9A6C((char **)&qword_25498A1E0, ((unk_25498A1C8 - qword_25498A1C0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A1E0, (_QWORD *)qword_25498A1E8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A1E0, (_QWORD *)qword_25498A1E8, (uint64_t *)qword_25498A1C0, unk_25498A1C8, (unk_25498A1C8 - qword_25498A1C0) >> 3);
}

void sub_20C5AD2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5AD2EC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5AD3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::~UsdDeformersSkinDeformerAPI(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D300;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdDeformers/skinDeformerAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdDeformersSkinDeformerAPI pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeforme"
                            "rAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D300;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5AD5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return 5;
}

uint64_t sub_20C5AD5CC(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A200, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdDeformersSkinDeformerAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5AD784(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D300;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D300;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5AD770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5AD784(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A200, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdDeformersSkinDeformerAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A208);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A208))
  {
    __cxa_guard_release(&qword_25498A208);
  }
  return &qword_25498A200;
}

void sub_20C5AD8A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A208);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A218);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)__cxa_guard_acquire(&qword_25498A218);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(v3);
      byte_25498A210 = sub_20C35BD7C((char *)&qword_25498A200, v4, v5);
      __cxa_guard_release(&qword_25498A218);
    }
  }
  return byte_25498A210;
}

void sub_20C5AD91C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A218);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(this);
  return &qword_25498A200;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 104), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AD9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 112), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ADB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 120), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ADCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 96), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ADDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 128), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5ADF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 360), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 136), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AE16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *SchemaAttributeNames;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int)this;
  v36 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A238))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5)
      v5 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v6 = *((_QWORD *)v5 + 13);
    v31 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v9)
      v9 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v10 = *((_QWORD *)v9 + 14);
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v13)
      v13 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v14 = *((_QWORD *)v13 + 15);
    v33 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v17)
      v17 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v18 = *((_QWORD *)v17 + 12);
    v34 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v21)
      v21 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v22 = *((_QWORD *)v21 + 16);
    v35 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498A220, &v31, 5uLL);
    v25 = &v36;
    do
    {
      v27 = *--v25;
      v26 = v27;
      if ((v27 & 7) != 0)
      {
        v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    while (v25 != &v31);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A220, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A238);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A258);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A258))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5AE510((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A240, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A258);
  }
  if (v1)
    return &qword_25498A240;
  else
    return &qword_25498A220;
}

void sub_20C5AE480(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A238);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5AE510(uint64_t **a1)
{
  qword_25498A248 = 0;
  unk_25498A250 = 0;
  qword_25498A240 = 0;
  sub_20BFC9A6C((char **)&qword_25498A240, ((unk_25498A228 - qword_25498A220) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A240, (_QWORD *)qword_25498A248, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A240, (_QWORD *)qword_25498A248, (uint64_t *)qword_25498A220, unk_25498A228, (unk_25498A228 - qword_25498A220) >> 3);
}

void sub_20C5AE5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5AE5C4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5AE698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5AE6E8()
{
  void *__p[2];
  char v1;

  sub_20C5AFF10();
  sub_20BDDC0E4(__p, "DeformableMesh");
  sub_20C5B0030((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5AE734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::~UsdDeformersDeformableMesh(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D358;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdDeformers/deformableMesh.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdDeformersDeformableMesh pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMe"
                            "sh::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D358;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5AE8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A268);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A268))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A260, "DeformableMesh");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A260, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A268);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A260, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D358;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdDeformers/deformableMesh.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdDeformersDeformableMesh pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMe"
                            "sh::Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D358;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5AEAC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A268);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A278);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A278))
  {
    __cxa_guard_release(&qword_25498A278);
  }
  return &qword_25498A270;
}

void sub_20C5AEB6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A278);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A288);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)__cxa_guard_acquire(&qword_25498A288);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetStaticTfType(v3);
      byte_25498A280 = sub_20C35BD7C((char *)&qword_25498A270, v4, v5);
      __cxa_guard_release(&qword_25498A288);
    }
  }
  return byte_25498A280;
}

void sub_20C5AEBE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A288);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetStaticTfType(this);
  return &qword_25498A270;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 88), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AECC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AEE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 152), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AEF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 160), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 360), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 8), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8)
    v8 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 8), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 168), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 168), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3)
    v3 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 48), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5AF9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *SchemaAttributeNames;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = (int)this;
  v51 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A2A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A2A8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5)
      v5 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v6 = *((_QWORD *)v5 + 11);
    v43 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v43 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v9)
      v9 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v10 = *((_QWORD *)v9 + 18);
    v44 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v13)
      v13 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v14 = *((_QWORD *)v13 + 19);
    v45 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v17)
      v17 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v18 = *((_QWORD *)v17 + 10);
    v46 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v46 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v21)
      v21 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v22 = *((_QWORD *)v21 + 20);
    v47 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v25)
      v25 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v26 = *((_QWORD *)v25 + 7);
    v48 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v29)
      v29 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v30 = *(_QWORD *)v29;
    v49 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v33)
      v33 = sub_20C5AC110(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    v34 = *((_QWORD *)v33 + 1);
    v50 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498A290, &v43, 8uLL);
    v37 = &v51;
    do
    {
      v39 = *--v37;
      v38 = v39;
      if ((v39 & 7) != 0)
      {
        v40 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
    }
    while (v37 != &v43);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A290, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A2A8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A2C8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A2C8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)1);
    sub_20C5AFE5C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A2B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A2C8);
  }
  if (v1)
    return &qword_25498A2B0;
  else
    return &qword_25498A290;
}

void sub_20C5AFDCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A2A8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5AFE5C(uint64_t **a1)
{
  qword_25498A2B8 = 0;
  unk_25498A2C0 = 0;
  qword_25498A2B0 = 0;
  sub_20BFC9A6C((char **)&qword_25498A2B0, ((unk_25498A298 - qword_25498A290) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A2B0, (_QWORD *)qword_25498A2B8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A2B0, (_QWORD *)qword_25498A2B8, (uint64_t *)qword_25498A290, unk_25498A298, (unk_25498A298 - qword_25498A290) >> 3);
}

void sub_20C5AFEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5AFF10()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5B00E0((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5AFFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5B0030(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5B00C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5B00E0(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5B014C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType::UsdDeformersTokensType(pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v79 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "morphChannelTargetCounts", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v79, "morphChannelTargetWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "morphDeformer:channelTargetCounts", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "morphDeformer:channelTargetWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "morphDeformer:targetBlendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "morphDeformer:weights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "morphTargetBlendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "morphWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "pointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "points", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "skinBindTransforms", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "skinComponentsPerVertex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "skinDeformer:bindTransforms", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "skinDeformer:componentsPerVertex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "skinDeformer:jointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "skinDeformer:jointWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "skinDeformer:meshBindTransform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "skinDeformer:targetJoints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "skinJointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "skinJointWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "skinMeshBindTransform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "skinTargetJoints", 0);
  v2 = *(_QWORD *)this;
  v80 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v79;
  v81 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v82 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v83 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v84 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v85 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v86 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v87 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v88 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v89 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v90 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v91 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v92 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v93 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v94 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v95 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v96 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v97 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v98 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v99 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v100 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v101 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v68 = operator new(0xB0uLL);
  v69 = 0;
  *((_QWORD *)this + 22) = v68;
  *((_QWORD *)this + 23) = v68;
  *((_QWORD *)this + 24) = v68 + 22;
  do
  {
    v70 = *(&v80 + v69);
    *v68 = v70;
    if ((v70 & 7) != 0)
    {
      v71 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 2, v71));
      if ((v72 & 1) == 0)
        *v68 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v69;
    ++v68;
  }
  while (v69 != 22);
  v73 = &v102;
  *((_QWORD *)this + 23) = v68;
  do
  {
    v75 = *--v73;
    v74 = v75;
    if ((v75 & 7) != 0)
    {
      v76 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
  }
  while (v73 != &v80);
  return this;
}

void sub_20C5B093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,void **a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;

  sub_20BEEB2B8(&a23);
  v57 = (char *)&a47;
  while (1)
  {
    v59 = *((_QWORD *)v57 - 1);
    v57 -= 8;
    v58 = v59;
    if ((v59 & 7) != 0)
    {
      v60 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    if (v57 == &a25)
    {
      if ((*v50 & 7) != 0)
      {
        v62 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v49 & 7) != 0)
      {
        v64 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v48 & 7) != 0)
      {
        v66 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v56 & 7) != 0)
      {
        v68 = (unsigned int *)(*v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v55 & 7) != 0)
      {
        v70 = (unsigned int *)(*v55 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v54 & 7) != 0)
      {
        v72 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v53 & 7) != 0)
      {
        v74 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v52 & 7) != 0)
      {
        v76 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*v51 & 7) != 0)
      {
        v78 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a11 & 7) != 0)
      {
        v80 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a12 & 7) != 0)
      {
        v82 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a13 & 7) != 0)
      {
        v84 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a14 & 7) != 0)
      {
        v86 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a15 & 7) != 0)
      {
        v88 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a16 & 7) != 0)
      {
        v90 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a17 & 7) != 0)
      {
        v92 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a18 & 7) != 0)
      {
        v94 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a19 & 7) != 0)
      {
        v96 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a20 & 7) != 0)
      {
        v98 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a21 & 7) != 0)
      {
        v100 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a22 & 7) != 0)
      {
        v102 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*v47 & 7) != 0)
      {
        v104 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5B0CB0()
{
  JUMPOUT(0x20C5B0AD8);
}

void sub_20C5B0CB8()
{
  JUMPOUT(0x20C5B0AFCLL);
}

void sub_20C5B0CC0()
{
  JUMPOUT(0x20C5B0B20);
}

void sub_20C5B0CC8()
{
  JUMPOUT(0x20C5B0B44);
}

void sub_20C5B0CD0()
{
  JUMPOUT(0x20C5B0B68);
}

void sub_20C5B0CD8()
{
  JUMPOUT(0x20C5B0B8CLL);
}

void sub_20C5B0CE0()
{
  JUMPOUT(0x20C5B0BB0);
}

void sub_20C5B0CE8()
{
  JUMPOUT(0x20C5B0BD4);
}

void sub_20C5B0CF0()
{
  JUMPOUT(0x20C5B0BF8);
}

void sub_20C5B0CF8()
{
  JUMPOUT(0x20C5B0C1CLL);
}

void sub_20C5B0D00()
{
  JUMPOUT(0x20C5B0C40);
}

void sub_20C5B0D08()
{
  JUMPOUT(0x20C5B0C64);
}

void sub_20C5B0D10()
{
  JUMPOUT(0x20C5B0C88);
}

void sub_20C5B0D1C()
{
  void *__p[2];
  char v1;

  sub_20C5B2040();
  sub_20BDDC0E4(__p, "Volume");
  sub_20C5B2160((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5B0D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::~UsdVolVolume(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D3B0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdVol/volume.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdVolVolume pxrInternal__aapl__pxrReserved__::UsdVolVolume::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D3B0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B0F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A2D8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A2D8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A2D0, "Volume");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A2D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A2D8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A2D0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D3B0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdVol/volume.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdVolVolume pxrInternal__aapl__pxrReserved__::UsdVolVolume::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D3B0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5B10FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A2D8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A2E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A2E8))
  {
    __cxa_guard_release(&qword_25498A2E8);
  }
  return &qword_25498A2E0;
}

void sub_20C5B11A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A2E8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdVolVolume *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A2F8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdVolVolume *)__cxa_guard_acquire(&qword_25498A2F8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetStaticTfType(v3);
      byte_25498A2F0 = sub_20C35BD7C((char *)&qword_25498A2E0, v4, v5);
      __cxa_guard_release(&qword_25498A2F8);
    }
  }
  return byte_25498A2F0;
}

void sub_20C5B121C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A2F8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetStaticTfType(this);
  return &qword_25498A2E0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolVolume::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A318);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A318))
  {
    qword_25498A300 = 0;
    *(_QWORD *)algn_25498A308 = 0;
    qword_25498A310 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A300, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A318);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A338);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A338))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    qword_25498A320 = 0;
    *(_QWORD *)algn_25498A328 = 0;
    qword_25498A330 = 0;
    sub_20BFE538C(&qword_25498A320, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A320, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A338);
  }
  if (v1)
    return &qword_25498A320;
  else
    return &qword_25498A300;
}

void sub_20C5B134C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A338);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *v7;
  const char *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const char *v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  const void **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  void *__p;
  char v24;
  uint64_t v25;

  *a2 = 0;
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5B1544();
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    v7 = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  if (*((char *)v7 + 23) >= 0)
    v8 = (const char *)v7;
  else
    v8 = (const char *)*v7;
  v9 = *((char *)EmptyString + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)EmptyString + 23);
  else
    v10 = EmptyString[1];
  v11 = strlen(v8);
  if (v10 >= v11
    && ((v12 = v11, v9 >= 0) ? (v13 = (const char *)EmptyString) : (v13 = (const char *)*EmptyString),
        !strncmp(v13, v8, v12)))
  {
    sub_20BF32220(a2, this);
  }
  else
  {
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5B1544();
    if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v15 = (const void **)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      v15 = (const void **)v14;
    }
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
      v16 = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v15, (const void **)v16, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v25);
    v17 = *a2;
    v18 = *a2 & 7;
    if (&v25 == a2)
    {
      if (v18)
      {
        v21 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    else
    {
      if (v18)
      {
        v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      *a2 = v25;
      v25 = 0;
    }
    if (v24 < 0)
      operator delete(__p);
  }
}

void sub_20C5B1500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  unsigned int *v16;
  unsigned int v17;

  if (a14 < 0)
    operator delete(__p);
  if ((*v14 & 7) != 0)
  {
    v16 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C5B1544()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_25498A340);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "field:", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_25498A340))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A340))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A340);
  }
  return (unint64_t)v0;
}

void sub_20C5B168C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::GetFieldPaths(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this@<X0>, uint64_t a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  uint64_t v6;
  uint64_t i;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  sub_20C35C4F8((uint64_t)v25, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v25, v3))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5B1544();
    if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)v25, EmptyString, &v23);
    v6 = v23;
    for (i = v24; v6 != i; v6 += 32)
    {
      sub_20C3AD860(v6, (uint64_t)&v18);
      v15 = 0;
      v16 = 0;
      v17 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v18, v8))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v18, (uint64_t *)&v15))
        {
          if (v16 - (_QWORD)v15 == 8 && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v15))
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v18, (pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
            sub_20C5B2214((uint64_t **)a2, (uint64_t *)&v30, &v30, v15);
            if ((v30 & 7) != 0)
            {
              v9 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
              do
                v10 = __ldxr(v9);
              while (__stlxr(v10 - 2, v9));
            }
          }
        }
      }
      v30 = (unint64_t)&v15;
      sub_20BFD6F90((void ***)&v30);
      if ((v22 & 7) != 0)
      {
        v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (v19)
        sub_20C35C614(v19);
    }
    v18 = (void **)&v23;
    sub_20C37FA04(&v18);
  }
  if ((v29 & 7) != 0)
  {
    v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
}

void sub_20C5B18BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  uint64_t v20;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, void **);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  v5 = *(_QWORD *)(v3 - 56);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  *(_QWORD *)(v3 - 56) = va;
  sub_20BFD6F90((void ***)(v3 - 56));
  sub_20C377F1C((uint64_t)va1);
  va_copy((va_list)v12, va2);
  sub_20C37FA04((void ***)va1);
  sub_20C35C2E0((uint64_t)va3);
  sub_20C102F0C(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::HasFieldRelationship(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t HasRelationship;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, &v9);
  HasRelationship = pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0)
  {
    v4 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v14 & 7) != 0)
  {
    v6 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  return HasRelationship;
}

void sub_20C5B1A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::GetFieldPath(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  uint64_t IsDefined;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;

  sub_20C35C4F8((uint64_t)&v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, (uint64_t *)&v23);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23, (uint64_t)v18);
  if ((v23 & 7) != 0)
  {
    v5 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v18, v9);
  if ((_DWORD)IsDefined
    && (IsDefined = pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v18, (uint64_t *)&v14), (_DWORD)IsDefined)&& (IsDefined = (uint64_t)v14, v15 - v14 == 8)&& (IsDefined = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v14), (_DWORD)IsDefined))
  {
    v11 = (uint64_t *)v14;
  }
  else
  {
    v11 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsDefined);
  }
  sub_20BFD6E54(a3, v11);
  sub_20BFD6EA4(a3 + 1, (_DWORD *)v11 + 1);
  v23 = (unint64_t)&v14;
  sub_20BFD6F90((void ***)&v23);
  if ((v22 & 7) != 0)
  {
    v12 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
}

void sub_20C5B1BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::CreateFieldRelationship(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  char *v17;
  uint64_t v18;
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3)
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a3))
  {
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v15, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, (uint64_t *)&v24);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v19);
  if ((v24 & 7) != 0)
  {
    v6 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v18 & 7) != 0)
  {
    v8 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v19, v10))
  {
    sub_20BFD6E54(&v26, a3);
    sub_20BFD6EA4(&v27, (_DWORD *)a3 + 1);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v24 = (unint64_t)&v15;
    v25 = 0;
    v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
    v16 = v15;
    v17 = (char *)v15 + 8;
    v16 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BFD6DBC((uint64_t)&v17, &v26, &v28, v15);
    v11 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v19, &v15);
    v24 = (unint64_t)&v15;
    sub_20BFD6F90((void ***)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_20BFD265C(&v26);
  }
  else
  {
    v11 = 0;
  }
  if ((v23 & 7) != 0)
  {
    v12 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  return v11;
}

void sub_20C5B1E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::BlockFieldRelationship(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  uint64_t IsDefined;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;

  sub_20C35C4F8((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, (uint64_t *)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (uint64_t)v16);
  if ((v21 & 7) != 0)
  {
    v3 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((v15 & 7) != 0)
  {
    v5 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v7);
  if ((_DWORD)IsDefined)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16, &v12);
    v21 = (unint64_t)&v12;
    sub_20BFD6F90((void ***)&v21);
  }
  if ((v20 & 7) != 0)
  {
    v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  return IsDefined;
}

void sub_20C5B1FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v7 - 24) = v6;
  sub_20BFD6F90((void ***)(v7 - 24));
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B2040()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C556F18((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B2114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5B2160(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5B21F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C5B2214(uint64_t **a1, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    sub_20C5B22B4((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_20BDDE1B4(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20C102E78((uint64_t)v11, 0);
  }
  return v8;
}

_DWORD *sub_20C5B22B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  v8[4] = *a2;
  *a2 = 0;
  sub_20BFD6E54((_DWORD *)v8 + 10, a3);
  result = sub_20BFD6EA4((_DWORD *)v8 + 11, a3 + 1);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::~UsdVolFieldBase(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D408;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdVol/fieldBase.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdVolFieldBase pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D408;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B24B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A350);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A350))
  {
    __cxa_guard_release(&qword_25498A350);
  }
  return &qword_25498A348;
}

void sub_20C5B2540(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A350);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A360);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *)__cxa_guard_acquire(&qword_25498A360);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetStaticTfType(v3);
      byte_25498A358 = sub_20C35BD7C((char *)&qword_25498A348, v4, v5);
      __cxa_guard_release(&qword_25498A360);
    }
  }
  return byte_25498A358;
}

void sub_20C5B25BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A360);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetStaticTfType(this);
  return &qword_25498A348;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A380);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A380))
  {
    qword_25498A368 = 0;
    unk_25498A370 = 0;
    qword_25498A378 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A368, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A380);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A3A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A3A0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_25498A388 = 0;
    unk_25498A390 = 0;
    qword_25498A398 = 0;
    sub_20BFE538C(&qword_25498A388, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A388, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A3A0);
  }
  if (v1)
    return &qword_25498A388;
  else
    return &qword_25498A368;
}

void sub_20C5B26EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A3A0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B2704()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B27D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::~UsdVolFieldAsset(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::~UsdVolFieldBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D460;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdVol/fieldAsset.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdVolFieldAsset pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D460;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B29B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A3B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A3B0))
  {
    __cxa_guard_release(&qword_25498A3B0);
  }
  return &qword_25498A3A8;
}

void sub_20C5B2A40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A3B0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A3C0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *)__cxa_guard_acquire(&qword_25498A3C0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetStaticTfType(v3);
      byte_25498A3B8 = sub_20C35BD7C((char *)&qword_25498A3A8, v4, v5);
      __cxa_guard_release(&qword_25498A3C0);
    }
  }
  return byte_25498A3B8;
}

void sub_20C5B2ABC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A3C0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetStaticTfType(this);
  return &qword_25498A3A8;
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 88), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B2B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFieldNameAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFieldNameAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFieldIndexAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B2E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFieldIndexAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B2F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetVectorDataRoleHintAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 288), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B30F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateVectorDataRoleHintAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *SchemaAttributeNames;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int)this;
  v36 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A3E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A3E0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v5)
      v5 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v6 = *((_QWORD *)v5 + 11);
    v31 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v9)
      v9 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v10 = *((_QWORD *)v9 + 9);
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v13)
      v13 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v14 = *((_QWORD *)v13 + 8);
    v33 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v17)
      v17 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v18 = *((_QWORD *)v17 + 7);
    v34 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v21)
      v21 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v22 = *((_QWORD *)v21 + 36);
    v35 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498A3C8, &v31, 5uLL);
    v25 = &v36;
    do
    {
      v27 = *--v25;
      v26 = v27;
      if ((v27 & 7) != 0)
      {
        v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    while (v25 != &v31);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A3C8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A3E0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A400);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A400))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *)1);
    sub_20C5B3534((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A3E8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A400);
  }
  if (v1)
    return &qword_25498A3E8;
  else
    return &qword_25498A3C8;
}

void sub_20C5B34A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A3E0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5B3534(uint64_t **a1)
{
  qword_25498A3F0 = 0;
  unk_25498A3F8 = 0;
  qword_25498A3E8 = 0;
  sub_20BFC9A6C((char **)&qword_25498A3E8, ((*(_QWORD *)algn_25498A3D0 - qword_25498A3C8) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A3E8, (_QWORD *)qword_25498A3F0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A3E8, (_QWORD *)qword_25498A3F0, (uint64_t *)qword_25498A3C8, *(uint64_t **)algn_25498A3D0, (*(_QWORD *)algn_25498A3D0 - qword_25498A3C8) >> 3);
}

void sub_20C5B35C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B35E8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5B3708((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B36BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5B3708(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5B3774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdVolTokensType *sub_20C5B3798(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *result;
  void *v4;

  result = sub_20C5B37E0();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C5B3820((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdVolTokensType *sub_20C5B37E0()
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)operator new(0x168uLL);
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType::UsdVolTokensType(v0);
  return v0;
}

void sub_20C5B380C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5B3820(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  void **v128;

  v128 = (void **)(a1 + 336);
  sub_20BEEB2B8(&v128);
  v2 = *(_QWORD *)(a1 + 328);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 320);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 312);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 304);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 296);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 288);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 280);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 272);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 264);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 256);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 248);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 240);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 232);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 224);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 216);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 208);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 200);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 192);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 184);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 176);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 168);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 160);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 152);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 144);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 136);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 128);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 120);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 112);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 104);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 96);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 88);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 80);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 72);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 64);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 56);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 48);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 40);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *(_QWORD *)(a1 + 32);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *(_QWORD *)(a1 + 24);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *(_QWORD *)(a1 + 16);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *(_QWORD *)(a1 + 8);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v125 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v126 = __ldxr(v125);
    while (__stlxr(v126 - 2, v125));
  }
  return a1;
}

void sub_20C5B3D98()
{
  void *__p[2];
  char v1;

  sub_20C5B4894();
  sub_20BDDC0E4(__p, "Field3DAsset");
  sub_20C5B49B4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5B3DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::~UsdVolField3DAsset(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::~UsdVolFieldAsset(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D4B8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdVol/field3DAsset.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdVolField3DAsset pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D4B8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B3F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A410);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A410))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A408, "Field3DAsset");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A408, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A410);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A408, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D4B8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdVol/field3DAsset.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdVolField3DAsset pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Define(const"
                            " UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D4B8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5B4178(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A410);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A420);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A420))
  {
    __cxa_guard_release(&qword_25498A420);
  }
  return &qword_25498A418;
}

void sub_20C5B421C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A420);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A430);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *)__cxa_guard_acquire(&qword_25498A430);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetStaticTfType(v3);
      byte_25498A428 = sub_20C35BD7C((char *)&qword_25498A418, v4, v5);
      __cxa_guard_release(&qword_25498A430);
    }
  }
  return byte_25498A428;
}

void sub_20C5B4298(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A430);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetStaticTfType(this);
  return &qword_25498A418;
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::GetFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B4370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::CreateFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::GetFieldPurposeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B44C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::CreateFieldPurposeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A450);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A450))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v5)
      v5 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v6 = *((_QWORD *)v5 + 7);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v9)
      v9 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 10);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498A438, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A438, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A450);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A470);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A470))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *)1);
    sub_20C5B47E0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A458, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A470);
  }
  if (v1)
    return &qword_25498A458;
  else
    return &qword_25498A438;
}

void sub_20C5B475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498A450);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5B47E0(uint64_t **a1)
{
  qword_25498A460 = 0;
  unk_25498A468 = 0;
  qword_25498A458 = 0;
  sub_20BFC9A6C((char **)&qword_25498A458, ((unk_25498A440 - qword_25498A438) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A458, (_QWORD *)qword_25498A460, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A458, (_QWORD *)qword_25498A460, (uint64_t *)qword_25498A438, unk_25498A440, (unk_25498A440 - qword_25498A438) >> 3);
}

void sub_20C5B4874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B4894()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5B4A64((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B4968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5B49B4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5B4A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5B4A64(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5B4AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5B4AF4()
{
  void *__p[2];
  char v1;

  sub_20C5B55F0();
  sub_20BDDC0E4(__p, "OpenVDBAsset");
  sub_20C5B5710((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5B4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::~UsdVolOpenVDBAsset(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::~UsdVolFieldAsset(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D510;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdVol/openVDBAsset.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdVolOpenVDBAsset pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D510;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B4CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A480);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A480))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A478, "OpenVDBAsset");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A478, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A480);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A478, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D510;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdVol/openVDBAsset.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdVolOpenVDBAsset pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Define(const"
                            " UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D510;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5B4ED4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A480);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A490);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A490))
  {
    __cxa_guard_release(&qword_25498A490);
  }
  return &qword_25498A488;
}

void sub_20C5B4F78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A490);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A4A0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *)__cxa_guard_acquire(&qword_25498A4A0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetStaticTfType(v3);
      byte_25498A498 = sub_20C35BD7C((char *)&qword_25498A488, v4, v5);
      __cxa_guard_release(&qword_25498A4A0);
    }
  }
  return byte_25498A498;
}

void sub_20C5B4FF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A4A0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetStaticTfType(this);
  return &qword_25498A488;
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::GetFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B50CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::CreateFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::GetFieldClassAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3)
    v3 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B5224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::CreateFieldClassAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8)
    v8 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A4C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A4C0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v5)
      v5 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v6 = *((_QWORD *)v5 + 7);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v9)
      v9 = sub_20C5B3798(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 6);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498A4A8, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A4A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A4C0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A4E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A4E0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *)1);
    sub_20C5B553C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A4C8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A4E0);
  }
  if (v1)
    return &qword_25498A4C8;
  else
    return &qword_25498A4A8;
}

void sub_20C5B54B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498A4C0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5B553C(uint64_t **a1)
{
  qword_25498A4D0 = 0;
  unk_25498A4D8 = 0;
  qword_25498A4C8 = 0;
  sub_20BFC9A6C((char **)&qword_25498A4C8, ((*(_QWORD *)algn_25498A4B0 - qword_25498A4A8) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A4C8, (_QWORD *)qword_25498A4D0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A4C8, (_QWORD *)qword_25498A4D0, (uint64_t *)qword_25498A4A8, *(uint64_t **)algn_25498A4B0, (*(_QWORD *)algn_25498A4B0 - qword_25498A4A8) >> 3);
}

void sub_20C5B55D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B55F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5B4A64((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B56C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5B5710(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5B57A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdVolTokensType *pxrInternal__aapl__pxrReserved__::UsdVolTokensType::UsdVolTokensType(pxrInternal__aapl__pxrReserved__::UsdVolTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v139 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "BOOL", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v139, "Color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "double2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "double3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "double", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "field", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "fieldClass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "fieldDataType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "fieldIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "fieldName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "fieldPurpose", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "filePath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "float2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "float3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "float", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "fogVolume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "half", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "half2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "half3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "int2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "int3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "int64", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "int", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "levelSet", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "mask", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "matrix3d", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "matrix4d", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "None", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "Normal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "Point", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "quatd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "staggered", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "string", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "uint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "unknown", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "Vector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "vectorDataRoleHint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "Field3DAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "FieldAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "FieldBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "OpenVDBAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "Volume", 0);
  v2 = *(_QWORD *)this;
  v140 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v139;
  v141 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v142 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v143 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v144 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v145 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v146 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v147 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v148 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v149 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v150 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v151 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v152 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v153 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v154 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v155 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v156 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v157 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v158 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v159 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v160 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v161 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v162 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v163 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v164 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v165 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v166 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v167 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v168 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v169 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v170 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v171 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v172 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v173 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v174 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v175 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v175 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v176 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v177 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v178 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v178 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v179 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v179 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v180 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v180 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v181 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v181 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  v128 = operator new(0x150uLL);
  v129 = 0;
  *((_QWORD *)this + 42) = v128;
  *((_QWORD *)this + 43) = v128;
  *((_QWORD *)this + 44) = v128 + 42;
  do
  {
    v130 = *(&v140 + v129);
    *v128 = v130;
    if ((v130 & 7) != 0)
    {
      v131 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 2, v131));
      if ((v132 & 1) == 0)
        *v128 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v129;
    ++v128;
  }
  while (v129 != 42);
  v133 = &v182;
  *((_QWORD *)this + 43) = v128;
  do
  {
    v135 = *--v133;
    v134 = v135;
    if ((v135 & 7) != 0)
    {
      v136 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
      do
        v137 = __ldxr(v136);
      while (__stlxr(v137 - 2, v136));
    }
  }
  while (v133 != &v140);
  return this;
}

void sub_20C5B65D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,void **a43,uint64_t a44,char a45)
{
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;

  sub_20BEEB2B8(&a43);
  v55 = (char *)&STACK[0x270];
  while (1)
  {
    v57 = *((_QWORD *)v55 - 1);
    v55 -= 8;
    v56 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if (v55 == &a45)
    {
      if ((*v50 & 7) != 0)
      {
        v60 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v49 & 7) != 0)
      {
        v62 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v48 & 7) != 0)
      {
        v64 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v47 & 7) != 0)
      {
        v66 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v46 & 7) != 0)
      {
        v68 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v54 & 7) != 0)
      {
        v70 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v53 & 7) != 0)
      {
        v72 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v52 & 7) != 0)
      {
        v74 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v51 & 7) != 0)
      {
        v76 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a11 & 7) != 0)
      {
        v78 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a12 & 7) != 0)
      {
        v80 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a13 & 7) != 0)
      {
        v82 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a14 & 7) != 0)
      {
        v84 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a15 & 7) != 0)
      {
        v86 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a16 & 7) != 0)
      {
        v88 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a17 & 7) != 0)
      {
        v90 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a18 & 7) != 0)
      {
        v92 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a19 & 7) != 0)
      {
        v94 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a20 & 7) != 0)
      {
        v96 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a21 & 7) != 0)
      {
        v98 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a22 & 7) != 0)
      {
        v100 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a23 & 7) != 0)
      {
        v102 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a24 & 7) != 0)
      {
        v104 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a25 & 7) != 0)
      {
        v106 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a26 & 7) != 0)
      {
        v108 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a27 & 7) != 0)
      {
        v110 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a28 & 7) != 0)
      {
        v112 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a29 & 7) != 0)
      {
        v114 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a30 & 7) != 0)
      {
        v116 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a31 & 7) != 0)
      {
        v118 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a32 & 7) != 0)
      {
        v120 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a33 & 7) != 0)
      {
        v122 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a34 & 7) != 0)
      {
        v124 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a35 & 7) != 0)
      {
        v126 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a36 & 7) != 0)
      {
        v128 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a37 & 7) != 0)
      {
        v130 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a38 & 7) != 0)
      {
        v132 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a39 & 7) != 0)
      {
        v134 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*a40 & 7) != 0)
      {
        v136 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      if ((*a41 & 7) != 0)
      {
        v138 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      if ((*a42 & 7) != 0)
      {
        v140 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      if ((*v45 & 7) != 0)
      {
        v142 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5B6C14()
{
  JUMPOUT(0x20C5B676CLL);
}

void sub_20C5B6C1C()
{
  JUMPOUT(0x20C5B6790);
}

void sub_20C5B6C24()
{
  JUMPOUT(0x20C5B67B4);
}

void sub_20C5B6C2C()
{
  JUMPOUT(0x20C5B67D8);
}

void sub_20C5B6C34()
{
  JUMPOUT(0x20C5B67FCLL);
}

void sub_20C5B6C3C()
{
  JUMPOUT(0x20C5B6820);
}

void sub_20C5B6C44()
{
  JUMPOUT(0x20C5B6844);
}

void sub_20C5B6C4C()
{
  JUMPOUT(0x20C5B6868);
}

void sub_20C5B6C54()
{
  JUMPOUT(0x20C5B688CLL);
}

void sub_20C5B6C5C()
{
  JUMPOUT(0x20C5B68B0);
}

void sub_20C5B6C64()
{
  JUMPOUT(0x20C5B68D4);
}

void sub_20C5B6C6C()
{
  JUMPOUT(0x20C5B68F8);
}

void sub_20C5B6C74()
{
  JUMPOUT(0x20C5B691CLL);
}

void sub_20C5B6C7C()
{
  JUMPOUT(0x20C5B6940);
}

void sub_20C5B6C84()
{
  JUMPOUT(0x20C5B6964);
}

void sub_20C5B6C8C()
{
  JUMPOUT(0x20C5B6988);
}

void sub_20C5B6C94()
{
  JUMPOUT(0x20C5B69ACLL);
}

void sub_20C5B6C9C()
{
  JUMPOUT(0x20C5B69D0);
}

void sub_20C5B6CA4()
{
  JUMPOUT(0x20C5B69F4);
}

void sub_20C5B6CAC()
{
  JUMPOUT(0x20C5B6A18);
}

void sub_20C5B6CB4()
{
  JUMPOUT(0x20C5B6A3CLL);
}

void sub_20C5B6CBC()
{
  JUMPOUT(0x20C5B6A60);
}

void sub_20C5B6CC4()
{
  JUMPOUT(0x20C5B6A84);
}

void sub_20C5B6CCC()
{
  JUMPOUT(0x20C5B6AA8);
}

void sub_20C5B6CD4()
{
  JUMPOUT(0x20C5B6ACCLL);
}

void sub_20C5B6CDC()
{
  JUMPOUT(0x20C5B6AF0);
}

void sub_20C5B6CE4()
{
  JUMPOUT(0x20C5B6B14);
}

void sub_20C5B6CEC()
{
  JUMPOUT(0x20C5B6B38);
}

void sub_20C5B6CF4()
{
  JUMPOUT(0x20C5B6B5CLL);
}

void sub_20C5B6CFC()
{
  JUMPOUT(0x20C5B6B80);
}

void sub_20C5B6D04()
{
  JUMPOUT(0x20C5B6BA4);
}

void sub_20C5B6D0C()
{
  JUMPOUT(0x20C5B6BC8);
}

void sub_20C5B6D14()
{
  JUMPOUT(0x20C5B6BECLL);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::~UsdMediaAssetPreviewsAPI(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this)
{
  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)off_24C53D568;
  sub_20C455C74(this + 4);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)this);
}

{
  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)off_24C53D568;
  sub_20C455C74(this + 4);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)this);
}

{
  void *v2;

  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)off_24C53D568;
  sub_20C455C74(this + 4);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)this);
  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D568;
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdMedia/assetPreviewsAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdMediaAssetPreviewsAPI pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D568;
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B6F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  return 5;
}

uint64_t sub_20C5B6F54(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A4E8, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdMediaAssetPreviewsAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5B710C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *(_QWORD *)a2 = off_24C53D568;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *(_QWORD *)a2 = off_24C53D568;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5B70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5B710C(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A4E8, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdMediaAssetPreviewsAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A4F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A4F0))
  {
    __cxa_guard_release(&qword_25498A4F0);
  }
  return &qword_25498A4E8;
}

void sub_20C5B7228(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A4F0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A500);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *)__cxa_guard_acquire(&qword_25498A500);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(v3);
      byte_25498A4F8 = sub_20C35BD7C((char *)&qword_25498A4E8, v4, v5);
      __cxa_guard_release(&qword_25498A500);
    }
  }
  return byte_25498A4F8;
}

void sub_20C5B72A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A500);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(this);
  return &qword_25498A4E8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A520);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A520))
  {
    qword_25498A508 = 0;
    unk_25498A510 = 0;
    qword_25498A518 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A508, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A520);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A540);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A540))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498A528 = 0;
    unk_25498A530 = 0;
    qword_25498A538 = 0;
    sub_20BFE538C(&qword_25498A528, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A528, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A540);
  }
  if (v1)
    return &qword_25498A528;
  else
    return &qword_25498A508;
}

void sub_20C5B73D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A540);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails::Thumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(this, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)this = v4;
  }
  v5 = (char *)this + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return this;
}

void sub_20C5B7464(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetDefaultThumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this, std::string *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *v3;
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  const void **v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v11;
  std::string *EmptyString;
  uint64_t ValueAtPath;
  uint64_t v14;
  const std::string *v15;
  unsigned int *v16;
  unsigned int v17;
  char *v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *)sub_20C35C4F8((uint64_t)&v19, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(v3);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A4E8, v4);
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v19, SchemaInfo) & 1) != 0)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      if (!v6)
        v6 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v6 + 120), (pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
      if (!sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v24))
        goto LABEL_20;
      if ((v25 & 4) != 0)
        v7 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(&v24);
      else
        v7 = v24;
      v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      if (!v8)
        v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      v9 = (*((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) != 0
         ? (const void **)((*((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) + 16)
         : (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      if (sub_20C5B7714(v7, v9))
      {
        v11 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
        if (!v11)
          v11 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
        if ((*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (std::string *)((*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v7, EmptyString, ":");
        v14 = *(_QWORD *)(ValueAtPath + 8);
        if ((v14 & 4) != 0)
          v15 = (const std::string *)(*(uint64_t (**)(void))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))();
        else
          v15 = *(const std::string **)ValueAtPath;
        std::string::operator=(a2, v15);
        std::string::operator=(a2 + 1, v15 + 1);
        v10 = 1;
      }
      else
      {
LABEL_20:
        v10 = 0;
      }
      sub_20BF4C2D8((uint64_t)&v24);
    }
    else
    {
      v10 = 0;
    }
    if ((v22 & 7) != 0)
    {
      v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
  }
  else
  {
    v19 = "usdMedia/assetPreviewsAPI.cpp";
    v20 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetDefaultThumbnails";
    v21 = 147;
    v22 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetDefaultThumbnails(Thumbnails *) const";
    v23 = 0;
    return 0;
  }
  return v10;
}

void sub_20C5B76D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5B7714(uint64_t *a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = pxrInternal__aapl__pxrReserved__::VtDictionary::find(a1, a2);
  v5 = v4;
  v6 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)a1);
  if (v5 == v7 && (!v5 || v3 == v6))
    return 0;
  else
    return sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::SetDefaultThumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this, const pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  uint64_t *EmptyString;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD **v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int *v15[3];

  v15[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v9 = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if ((*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v9, (__int128 *)EmptyString);
  sub_20C1D1BCC((uint64_t)v5, (__int128 *)a2);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v6)
    v6 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v15[1] = (unsigned int *)&off_24C51D8C8;
  sub_20BF4D058(v15, (const void ****)&v9);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v10, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v6 + 120), (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  sub_20BF4C2D8((uint64_t)v15);
  sub_20BF49F14(&v9, 0);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C5B78C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::ClearDefaultThumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_20C35C4F8((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v1 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v1)
    v1 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdObject::ClearAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v1 + 120));
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  if (v5)
    sub_20C35C614(v5);
}

void sub_20C5B79A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetAssetDefaultPreviews(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD **v7;
  _QWORD *v8[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  uint64_t v10;
  uint64_t v11;

  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v7, &v9);
  sub_20C1034E8(&v10, (uint64_t *)&v9);
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetAssetDefaultPreviews(&v10, a2);
  v3 = v11;
  if (v11)
  {
    v4 = (unsigned int *)(v11 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20C103234(&v9);
  sub_20BDE9D48((uint64_t)&v7, v8[0]);
}

void sub_20C5B7A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v15 = a14;
  if (a14)
  {
    v16 = (unsigned int *)(a14 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  sub_20C103234(&a12);
  sub_20BDE9D48((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetAssetDefaultPreviews(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v6;
  uint64_t DefaultPrim;
  unsigned __int8 v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21[3];
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  void **v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  void **v29;
  uint64_t v30;
  void ***v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFD2F78(a1);
  if (v5 & 1 | (unint64_t)v4)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFCF650(a1);
    DefaultPrim = pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v6, (unsigned int **)&v26);
    if (v26)
    {
      v8 = atomic_load((unsigned __int8 *)&qword_25498A550);
      if ((v8 & 1) == 0)
      {
        DefaultPrim = __cxa_guard_acquire(&qword_25498A550);
        if ((_DWORD)DefaultPrim)
        {
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498A548, "__No_Such_Prim__");
          __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498A548, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498A550);
        }
      }
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)DefaultPrim);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, &v24);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498A548, &v22);
      sub_20BFD6E54(&v33, &v22);
      sub_20BFD6EA4(&v34, &v23);
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v31 = &v27;
      v32 = 0;
      v27 = (void **)operator new(8uLL);
      v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v27;
      v29 = v27 + 1;
      v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BFD6DBC((uint64_t)&v29, &v33, &v35, v27);
      pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::UsdStagePopulationMask(v21, &v27);
      v31 = &v27;
      sub_20BFD6F90((void ***)&v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_20BFD265C(&v33);
      pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(a1, v21, 0, (uint64_t *)&v31);
      if (v31)
      {
        v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v31);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(v10, (uint64_t)&v27);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27);
        *((_QWORD *)a2 + 3) = 0;
        *(_QWORD *)a2 = off_24C53D568;
        *((_QWORD *)a2 + 4) = v31;
        v31 = 0;
        sub_20BF1D8F4((_DWORD)a2 + 32, 0);
        if ((v30 & 7) != 0)
        {
          v11 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
        sub_20BFD265C(&v29);
        if (v28)
          sub_20C35C614(v28);
        sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v31);
      }
      else
      {
        sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v31);
        LODWORD(v27) = 1;
        v28 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
        v30 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27);
        *(_QWORD *)a2 = off_24C53D568;
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        if ((v30 & 7) != 0)
        {
          v17 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
        sub_20BFD265C(&v29);
        if (v28)
          sub_20C35C614(v28);
      }
      v27 = (void **)v21;
      sub_20BFD6F90(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_20BFD265C(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_20BFD265C(&v24);
    }
    else
    {
      LODWORD(v27) = 1;
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
      v30 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27);
      *(_QWORD *)a2 = off_24C53D568;
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      if ((v30 & 7) != 0)
      {
        v15 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
      sub_20BFD265C(&v29);
      if (v28)
        sub_20C35C614(v28);
    }
    if ((v26 & 7) != 0)
    {
      v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  else
  {
    LODWORD(v27) = 1;
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27);
    *(_QWORD *)a2 = off_24C53D568;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    if ((v30 & 7) != 0)
    {
      v13 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
    sub_20BFD265C(&v29);
    if (v28)
      sub_20C35C614(v28);
  }
}

void sub_20C5B7F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;

  __cxa_guard_abort(&qword_25498A550);
  if ((a14 & 7) != 0)
  {
    v15 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B805C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *sub_20C5B8180(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *result;
  void *v4;

  result = sub_20C5B81C8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C5B8208((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *sub_20C5B81C8()
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)operator new(0xC0uLL);
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::UsdMediaTokensType(v0);
  return v0;
}

void sub_20C5B81F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5B8208(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  void **v65;

  v65 = (void **)(a1 + 168);
  sub_20BEEB2B8(&v65);
  v2 = *(_QWORD *)(a1 + 160);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 152);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 144);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 136);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 128);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 120);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 112);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 104);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 96);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 88);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 80);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 72);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 64);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 56);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 48);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 40);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 32);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 24);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 16);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 8);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v62 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
  return a1;
}

void sub_20C5B84E0()
{
  void *__p[2];
  char v1;

  sub_20C5B9864();
  sub_20BDDC0E4(__p, "SpatialAudio");
  sub_20C5B9984((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5B852C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::~UsdMediaSpatialAudio(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D5C0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdMedia/spatialAudio.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdMediaSpatialAudio pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D5C0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5B86D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A560);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A560))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A558, "SpatialAudio");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A558, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A560);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A558, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D5C0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdMedia/spatialAudio.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdMediaSpatialAudio pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Define(c"
                            "onst UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D5C0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5B88C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A560);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A570);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A570))
  {
    __cxa_guard_release(&qword_25498A570);
  }
  return &qword_25498A568;
}

void sub_20C5B8964(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A570);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A580);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *)__cxa_guard_acquire(&qword_25498A580);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetStaticTfType(v3);
      byte_25498A578 = sub_20C35BD7C((char *)&qword_25498A568, v4, v5);
      __cxa_guard_release(&qword_25498A580);
    }
  }
  return byte_25498A578;
}

void sub_20C5B89E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A580);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetStaticTfType(this);
  return &qword_25498A568;
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 24), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B8AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetAuralModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B8C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateAuralModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetPlaybackModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 96), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B8D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreatePlaybackModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetStartTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B8EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateStartTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 72), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetEndTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 16), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B9018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateEndTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 72), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetMediaOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B9170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateMediaOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetGainAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3)
    v3 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 32), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5B92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateGainAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8)
    v8 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t *SchemaAttributeNames;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = (int)this;
  v46 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A5A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A5A0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v5)
      v5 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v6 = *((_QWORD *)v5 + 3);
    v39 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v9)
      v9 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v10 = *(_QWORD *)v9;
    v40 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v13)
      v13 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v14 = *((_QWORD *)v13 + 12);
    v41 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v41 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v17)
      v17 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v18 = *((_QWORD *)v17 + 17);
    v42 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v21)
      v21 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v22 = *((_QWORD *)v21 + 2);
    v43 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v43 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v25)
      v25 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v26 = *((_QWORD *)v25 + 8);
    v44 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v29)
      v29 = sub_20C5B8180(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    v30 = *((_QWORD *)v29 + 4);
    v45 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498A588, &v39, 7uLL);
    v33 = &v46;
    do
    {
      v35 = *--v33;
      v34 = v35;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    while (v33 != &v39);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A588, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A5A0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A5C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A5C0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    sub_20C5B97B0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A5A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A5C0);
  }
  if (v1)
    return &qword_25498A5A8;
  else
    return &qword_25498A588;
}

void sub_20C5B9720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A5A0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5B97B0(uint64_t **a1)
{
  qword_25498A5B0 = 0;
  unk_25498A5B8 = 0;
  qword_25498A5A8 = 0;
  sub_20BFC9A6C((char **)&qword_25498A5A8, ((*(_QWORD *)algn_25498A590 - qword_25498A588) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A5A8, (_QWORD *)qword_25498A5B0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A5A8, (_QWORD *)qword_25498A5B0, (uint64_t *)qword_25498A588, *(uint64_t **)algn_25498A590, (*(_QWORD *)algn_25498A590 - qword_25498A588) >> 3);
}

void sub_20C5B9844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5B9864()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5B9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5B9984(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5B9A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::UsdMediaTokensType(pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v76 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "auralMode", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v76, "defaultImage", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "endTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "filePath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "gain", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "loopFromStage", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "loopFromStart", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "loopFromStartToEnd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "mediaOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "nonSpatial", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "onceFromStart", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "onceFromStartToEnd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "playbackMode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "previews", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "previews:thumbnails", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "previews:thumbnails:default", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "spatial", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "startTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "thumbnails", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "AssetPreviewsAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "SpatialAudio", 0);
  v2 = *(_QWORD *)this;
  v77 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v76;
  v78 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v79 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v80 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v81 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v82 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v83 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v84 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v85 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v86 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v87 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v88 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v89 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v90 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v91 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v92 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v93 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v94 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v95 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v96 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v97 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v65 = operator new(0xA8uLL);
  v66 = 0;
  *((_QWORD *)this + 21) = v65;
  *((_QWORD *)this + 22) = v65;
  *((_QWORD *)this + 23) = v65 + 21;
  do
  {
    v67 = *(&v77 + v66);
    *v65 = v67;
    if ((v67 & 7) != 0)
    {
      v68 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 2, v68));
      if ((v69 & 1) == 0)
        *v65 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v66;
    ++v65;
  }
  while (v66 != 21);
  v70 = &v98;
  *((_QWORD *)this + 22) = v65;
  do
  {
    v72 = *--v70;
    v71 = v72;
    if ((v72 & 7) != 0)
    {
      v73 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
  }
  while (v70 != &v77);
  return this;
}

void sub_20C5BA1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,void **a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;

  sub_20BEEB2B8(&a22);
  v55 = (char *)&a45;
  while (1)
  {
    v57 = *((_QWORD *)v55 - 1);
    v55 -= 8;
    v56 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if (v55 == &a24)
    {
      if ((*v47 & 7) != 0)
      {
        v60 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v46 & 7) != 0)
      {
        v62 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v54 & 7) != 0)
      {
        v64 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v53 & 7) != 0)
      {
        v66 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v52 & 7) != 0)
      {
        v68 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v51 & 7) != 0)
      {
        v70 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v50 & 7) != 0)
      {
        v72 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v49 & 7) != 0)
      {
        v74 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v48 & 7) != 0)
      {
        v76 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a11 & 7) != 0)
      {
        v78 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a12 & 7) != 0)
      {
        v80 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a13 & 7) != 0)
      {
        v82 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a14 & 7) != 0)
      {
        v84 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a15 & 7) != 0)
      {
        v86 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a16 & 7) != 0)
      {
        v88 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a17 & 7) != 0)
      {
        v90 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a18 & 7) != 0)
      {
        v92 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a19 & 7) != 0)
      {
        v94 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a20 & 7) != 0)
      {
        v96 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a21 & 7) != 0)
      {
        v98 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*v45 & 7) != 0)
      {
        v100 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5BA504()
{
  JUMPOUT(0x20C5BA350);
}

void sub_20C5BA50C()
{
  JUMPOUT(0x20C5BA374);
}

void sub_20C5BA514()
{
  JUMPOUT(0x20C5BA398);
}

void sub_20C5BA51C()
{
  JUMPOUT(0x20C5BA3BCLL);
}

void sub_20C5BA524()
{
  JUMPOUT(0x20C5BA3E0);
}

void sub_20C5BA52C()
{
  JUMPOUT(0x20C5BA404);
}

void sub_20C5BA534()
{
  JUMPOUT(0x20C5BA428);
}

void sub_20C5BA53C()
{
  JUMPOUT(0x20C5BA44CLL);
}

void sub_20C5BA544()
{
  JUMPOUT(0x20C5BA470);
}

void sub_20C5BA54C()
{
  JUMPOUT(0x20C5BA494);
}

void sub_20C5BA554()
{
  JUMPOUT(0x20C5BA4B8);
}

void sub_20C5BA55C()
{
  JUMPOUT(0x20C5BA4DCLL);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D618;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdShade/connectableAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdShadeConnectableAPI pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D618;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5BA6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A5D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A5D0))
  {
    __cxa_guard_release(&qword_25498A5D0);
  }
  return &qword_25498A5C8;
}

void sub_20C5BA788(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A5D0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A5E0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__cxa_guard_acquire(&qword_25498A5E0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetStaticTfType(v3);
      byte_25498A5D8 = sub_20C35BD7C((char *)&qword_25498A5C8, v4, v5);
      __cxa_guard_release(&qword_25498A5E0);
    }
  }
  return byte_25498A5D8;
}

void sub_20C5BA804(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A5E0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetStaticTfType(this);
  return &qword_25498A5C8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A600);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A600))
  {
    qword_25498A5E8 = 0;
    unk_25498A5F0 = 0;
    qword_25498A5F8 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A5E8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A600);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A620);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A620))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498A608 = 0;
    unk_25498A610 = 0;
    qword_25498A618 = 0;
    sub_20BFE538C(&qword_25498A608, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A608, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A620);
  }
  if (v1)
    return &qword_25498A608;
  else
    return &qword_25498A5E8;
}

void sub_20C5BA934(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A620);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2, int a3)
{
  uint64_t TypeName;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  uint64_t v8;
  void **v9;
  const char *Text;
  const char *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  unsigned int *v15;
  unsigned int v16;
  void *__p;
  void *v19;
  char *v20;
  char *v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void **p_p;
  char v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if ((sub_20C5BD818(a2) & 1) != 0)
  {
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
    sub_20C5BACE8(a2, TypeName, (uint64_t)&v21);
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v21, v7) & 1) == 0)goto LABEL_12;
    switch(a3)
    {
      case 2:
        sub_20C348EEC((uint64_t)&v21, (int *)&__p);
        v8 = pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        break;
      case 1:
        sub_20C348EEC((uint64_t)&v21, (int *)&__p);
        v8 = pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        break;
      case 0:
        sub_20C348EEC((uint64_t)&v21, &v28);
        __p = 0;
        v19 = 0;
        v20 = 0;
        p_p = &__p;
        v27 = 0;
        __p = operator new(8uLL);
        v19 = __p;
        v20 = (char *)__p + 8;
        v19 = sub_20BFD6DBC((uint64_t)&v20, &v28, &v30, __p);
        v8 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)&__p);
        p_p = &__p;
        sub_20BFD6F90(&p_p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        v9 = (void **)&v28;
LABEL_20:
        sub_20BFD265C(v9);
        goto LABEL_21;
      default:
LABEL_12:
        v8 = 0;
LABEL_21:
        if ((v24 & 7) != 0)
        {
          v15 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
        sub_20BFD265C(&v23);
        if (v22)
          sub_20C35C614(v22);
        return v8;
    }
    v9 = &__p;
    goto LABEL_20;
  }
  v21 = "usdShade/connectableAPI.cpp";
  v22 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ConnectToSource";
  v23 = 170;
  v24 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(const Us"
                          "dAttribute &, const UsdShadeConnectionSourceInfo &, const ConnectionModification)";
  v25 = 0;
  sub_20C348EEC((uint64_t)a1, (int *)&p_p);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p);
  v11 = (const char *)&__p;
  pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(a2 + 40), (uint64_t)&__p);
  if (SHIBYTE(v20) < 0)
    v11 = (const char *)__p;
  v12 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0)
      v13 = *(const char **)v13;
  }
  else
  {
    v13 = "";
  }
  sub_20C3630C0(a2, &v28);
  v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed connecting shading attribute <%s> to attribute %s%s on prim %s. The given source information is not valid", Text, v11, v13, v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_p + 1);
  sub_20BFD265C(&p_p);
  return 0;
}

void sub_20C5BAC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20C5BACE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *PrefixForAttributeType;
  uint64_t *EmptyString;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  _BYTE v29[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  sub_20C35C4F8((uint64_t)v29, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  PrefixForAttributeType = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(a1 + 40), (uint64_t)v27);
  if ((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrefixForAttributeType);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v27, (const void **)EmptyString, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v29, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, a3);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v7) & 1) == 0)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 48);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(v8))
      v9 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v34;
    else
      v9 = v8;
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)v29, &v26, v9, 0, 0, (uint64_t)&__p);
    *(_DWORD *)a3 = (_DWORD)__p;
    v10 = v22;
    v22 = 0;
    v11 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v10;
    if (v11)
      sub_20C35C614(v11);
    sub_20BFD3EBC((int *)(a3 + 16), &v23);
    sub_20BFD3F10((int *)(a3 + 20), &v24);
    if (&__p == (void **)a3)
    {
      if ((v25 & 7) != 0)
      {
        v15 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      v12 = *(_QWORD *)(a3 + 24);
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      *(_QWORD *)(a3 + 24) = v25;
      v25 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    if (v22)
      sub_20C35C614(v22);
  }
  if ((v26 & 7) != 0)
  {
    v17 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (v28 < 0)
    operator delete(v27[0]);
  if ((v33 & 7) != 0)
  {
    v19 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
}

void sub_20C5BAEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;

  sub_20C372B54(v24);
  if ((a17 & 7) != 0)
  {
    v26 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if (a23 < 0)
    operator delete(__p);
  sub_20C35C2E0((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t *a3, int a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[32];
  uint64_t v11;

  sub_20C5BD8C8((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, a2, a3, a4, a5);
  v6 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(a1, (uint64_t)v10, 0);
  if ((v11 & 7) != 0)
  {
    v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v10);
  return v6;
}

void sub_20C5BAFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;

  if ((a14 & 7) != 0)
  {
    v15 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  uint64_t v16;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, a2, &v13);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo::UsdShadeConnectionSourceInfo((uint64_t)v15, &v13, a2);
  v5 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(this, (uint64_t)v15, 0);
  if ((v16 & 7) != 0)
  {
    v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v15);
  v8 = v14;
  if (v14)
  {
    v9 = (unsigned int *)(v14 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v5;
}

void sub_20C5BB0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a12);
  if (a11)
  {
    v19 = a11 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2)
{
  uint64_t TypeName;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v11;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD v17[4];

  sub_20C35C4F8((uint64_t)v12, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v17, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v12);
  v17[3] = 0;
  v17[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a2, (unsigned int **)&v11);
  TypeName = pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a2);
  v5 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(a1, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v17, (uint64_t *)&v11, 1, TypeName);
  if ((v11 & 7) != 0)
  {
    v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v17);
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  return v5;
}

{
  uint64_t TypeName;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD v17[4];

  sub_20C35C4F8((uint64_t)v12, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v17, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v12);
  v17[3] = 0;
  v17[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2, (uint64_t)&v11);
  TypeName = pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2);
  v5 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(a1, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v17, &v11, 2, TypeName);
  if ((v11 & 7) != 0)
  {
    v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v17);
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  return v5;
}

void sub_20C5BB224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va1);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5BB364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va1);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::SetConnectedSources(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TypeName;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int IsDefined;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  const char *Text;
  void **v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  int v20;
  int v21;
  void *__p[2];
  char v23;
  int v24;
  int v25;
  void **v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  _DWORD *v32;
  unint64_t v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20C0B8D74((uint64_t *)&v31, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_15:
    v13 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(a1, &v31);
  }
  else
  {
    while ((sub_20C5BD818(v4) & 1) != 0)
    {
      TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
      sub_20C5BACE8(v4, TypeName, (uint64_t)&v26);
      IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v26, v7);
      if ((IsDefined & 1) != 0)
      {
        sub_20C348EEC((uint64_t)&v26, (int *)__p);
        v9 = v32;
        if ((unint64_t)v32 >= v33)
        {
          v10 = (_DWORD *)sub_20C12C530((uint64_t *)&v31, __p);
        }
        else
        {
          sub_20BFD38A4(v32, __p);
          sub_20BFD38DC(v9 + 1, (_DWORD *)__p + 1);
          v10 = v9 + 2;
        }
        v32 = v10;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
      }
      if ((v29 & 7) != 0)
      {
        v11 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
      sub_20BFD265C(&v28);
      if (v27)
        sub_20C35C614(v27);
      if (!IsDefined)
        goto LABEL_25;
      v4 += 56;
      if (v4 == v5)
        goto LABEL_15;
    }
    v26 = (void **)"usdShade/connectableAPI.cpp";
    v27 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetConnectedSources";
    v28 = 265;
    v29 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::SetConnectedSources(co"
                            "nst UsdAttribute &, const std::vector<UsdShadeConnectionSourceInfo> &)";
    v30 = 0;
    sub_20C348EEC((uint64_t)a1, &v24);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
    v15 = __p;
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(v4 + 40), (uint64_t)__p);
    if (v23 < 0)
      v15 = (void **)__p[0];
    v16 = *(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(const char **)v17;
    }
    else
    {
      v17 = "";
    }
    sub_20C3630C0(v4, &v20);
    v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_20BFD265C(&v20);
    if (v23 < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_20BFD265C(&v24);
LABEL_25:
    v13 = 0;
  }
  v26 = (void **)&v31;
  sub_20BFD6F90(&v26);
  return v13;
}

void sub_20C5BB63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,uint64_t a22)
{
  uint64_t v22;

  if (a20 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a21);
  a22 = v22 - 88;
  sub_20BFD6F90((void ***)&a22);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  _BOOL8 v8;
  const char *Text;
  char *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  uint64_t *v18;
  _DWORD *v19;
  const char **v20;
  char *v21;
  int v23;
  int v24;
  _QWORD v25[4];
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  const char *v29;
  char v30;
  int v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a2 && a3 && a4)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(a1, 0, (uint64_t)v27);
    v8 = v31 != 0;
    if (v31)
    {
      if (v31 != 1)
      {
        v25[0] = "usdShade/connectableAPI.cpp";
        v25[1] = "GetConnectedSource";
        v25[2] = 308;
        v25[3] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(const UsdAttri"
                 "bute &, UsdShadeConnectableAPI *, TfToken *, UsdShadeAttributeType *)";
        v26 = 0;
        sub_20C348EEC((uint64_t)a1, &v23);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v25, (pxrInternal__aapl__pxrReserved__ *)"More than one connection for shading attribute %s. GetConnectedSource will only report the first one. Please use GetConnectedSources to retrieve all.", v10, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_20BFD265C(&v23);
      }
      v11 = v32;
      v12 = (_QWORD *)v27[0];
      v13 = v27;
      if (v32 >= 2)
        v13 = (_QWORD *)v27[0];
      v14 = v13[1];
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 48);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v14;
      if (v17)
        sub_20C35C614(v17);
      if (v11 >= 2)
        v18 = v12 + 2;
      else
        v18 = &v28;
      if (v11 >= 2)
        v19 = (_DWORD *)v12 + 5;
      else
        v19 = (_DWORD *)&v28 + 1;
      if (v11 >= 2)
        v20 = (const char **)(v12 + 3);
      else
        v20 = &v29;
      if (v11 >= 2)
        v21 = (char *)(v12 + 4);
      else
        v21 = &v30;
      if (v11 < 2)
        v12 = v27;
      sub_20C01A074((int *)(a2 + 16), v18);
      sub_20C01A0C8((int *)(a2 + 20), v19);
      sub_20BF32220((_QWORD *)(a2 + 24), v20);
      sub_20BF32220(a3, v21);
      *a4 = *((_DWORD *)v12 + 10);
    }
    sub_20C5BD988((uint64_t)v27);
  }
  else
  {
    v27[0] = "usdShade/connectableAPI.cpp";
    v27[1] = "GetConnectedSource";
    v28 = 295;
    v29 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(const UsdAttribute &,"
          " UsdShadeConnectableAPI *, TfToken *, UsdShadeAttributeType *)";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 1, (pxrInternal__aapl__pxrReserved__ *)"GetConnectedSource() requires non-NULL output-parameters.");
    return 0;
  }
  return v8;
}

void sub_20C5BB8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t TypeName;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  void (**v34)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  int v35;
  uint64_t v36;
  int v37;
  void (**v38)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  const pxrInternal__aapl__pxrReserved__::SdfPath **v39;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v46;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v47;
  uint64_t v48;

  v46 = 0;
  v47 = 0;
  v48 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections((uint64_t)a1, (uint64_t *)&v46);
  *(_QWORD *)(a3 + 56) = 0x100000000;
  if (v46 != v47)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v44);
    v7 = v46;
    v8 = v47;
    v9 = (unint64_t)(v47 - v46) >> 3;
    if (*(_DWORD *)(a3 + 60) < v9)
    {
      sub_20C5BDA30((unsigned int *)a3, v9);
      v7 = v46;
      v8 = v47;
    }
    for (; v7 != v8; v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v44);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(v10, v7, (uint64_t)&v39);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v39, v11) & 1) != 0)
      {
        v38 = 0;
        v37 = 0;
        NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(NameToken, (uint64_t)&v34);
        if ((v38 & 7) != 0)
        {
          v13 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        v38 = v34;
        v37 = v35;
        if (v35)
        {
          sub_20C35C4F8((uint64_t)&TypeName, (uint64_t *)&v40, &v41);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&TypeName);
          v36 = 0;
          v34 = off_24C53D618;
          if ((v33 & 7) != 0)
          {
            v15 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
          sub_20BFD265C(&v31);
          if (v30)
            sub_20C35C614(v30);
          TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v39);
          sub_20C5BBCE0((unsigned int *)a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, (uint64_t *)&v38, &v37, &TypeName);
          pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
        }
        else if (a2)
        {
          v19 = a2[1];
          if (v19 >= a2[2])
          {
            v20 = sub_20BFD7890(a2, v7);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)a2[1], v7);
            sub_20BFD6EA4((_DWORD *)(v19 + 4), (_DWORD *)v7 + 1);
            v20 = v19 + 8;
          }
          a2[1] = v20;
        }
        if ((v38 & 7) != 0)
        {
          v21 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
      }
      else if (a2)
      {
        v17 = a2[1];
        if (v17 >= a2[2])
        {
          v18 = sub_20BFD7890(a2, v7);
        }
        else
        {
          sub_20BFD6E54((_DWORD *)a2[1], v7);
          sub_20BFD6EA4((_DWORD *)(v17 + 4), (_DWORD *)v7 + 1);
          v18 = v17 + 8;
        }
        a2[1] = v18;
      }
      if ((v43 & 7) != 0)
      {
        v23 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
      sub_20BFD265C(&v41);
      if (v40)
        sub_20C35C614(v40);
    }
    v25 = v45;
    if (v45)
    {
      v26 = (unsigned int *)(v45 + 8);
      do
      {
        v27 = __ldxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  v39 = &v46;
  sub_20BFD6F90((void ***)&v39);
}

void sub_20C5BBC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v27 = a24;
  if (a24)
  {
    v28 = (unsigned int *)(a24 + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  sub_20C5BD988(v24);
  a19 = (void **)(v25 - 112);
  sub_20BFD6F90(&a19);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C5BBCE0(unsigned int *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t *a3, int *a4, uint64_t *a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v10 = a1[14];
  v11 = a1[15];
  if (v10 == v11)
  {
    sub_20C5BDA30(a1, v10 + (v10 >> 1) + 1);
    v11 = a1[15];
  }
  v12 = a1;
  if (v11 >= 2)
    v12 = *(unsigned int **)a1;
  return sub_20C5BD8C8((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[14 * a1[14]++], a2, a3, *a4, *a5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  _BOOL8 v2;
  _BYTE v4[56];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(this, 0, (uint64_t)v4);
  v2 = v5 != 0;
  sub_20C5BD988((uint64_t)v4);
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  const std::type_info *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  void **v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int **v10;
  void *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *Path;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  uint64_t *LayerStack;
  uint64_t v23;
  uint64_t **v24;
  _BOOL4 HasLayer;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  void *v32;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v47;
  unsigned int *v48;

  v48 = 0;
  pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack((pxrInternal__aapl__pxrReserved__ **)this, a2, (uint64_t)&v46, NAN);
  v4 = v46;
  v5 = v47;
  if (v46 != v47)
  {
    while (1)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(v4, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_24C527B18, v3))
      {
        v6 = (void **)*v4;
        v42 = v6;
        if (v6)
        {
          do
            v7 = __ldaxr((unsigned int *)v6);
          while (__stlxr(v7 + 1, (unsigned int *)v6));
          v6 = v42;
          *(_QWORD *)&v38 = v42;
          if (v42)
          {
            do
              v8 = __ldaxr((unsigned int *)v6);
            while (__stlxr(v8 + 1, (unsigned int *)v6));
          }
        }
        else
        {
          *(_QWORD *)&v38 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v6, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
      }
      else
      {
        *(_QWORD *)&v38 = 0;
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v38) & 1) == 0)
      {
        v10 = (unsigned int **)sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v38);
        if (pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasConnectionPaths(v10))
          break;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v38);
      if (++v4 == v5)
        goto LABEL_16;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v48, (unsigned int **)&v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v38);
  }
LABEL_16:
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v48) & 1) != 0)
    goto LABEL_41;
  sub_20C35C4F8((uint64_t)&v38, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v13 = (uint64_t *)sub_20C368FF0((uint64_t)&v38, v12);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v13, 6u, (uint64_t *)&v42);
  if ((v41 & 7) != 0)
  {
    v14 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
  sub_20BFD265C(&v39);
  if (*((_QWORD *)&v38 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v38 + 1));
  v16 = v42;
  v17 = v43;
  v18 = v44;
  v19 = v45;
  if (v42 == v44 && v43 == v45)
    goto LABEL_41;
  while (1)
  {
    *(_QWORD *)&v37 = v16;
    *((_QWORD *)&v37 + 1) = v17;
    Path = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v37);
    v21 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v48);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &v34);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v36);
    if (*Path == v36)
    {
      LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v37);
      v23 = sub_20C1FE500(LayerStack);
      v24 = (uint64_t **)sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v48);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v24, (uint64_t *)&v38);
      HasLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v23, (uint64_t *)&v38);
      v26 = *((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v27 = (unsigned int *)(*((_QWORD *)&v38 + 1) + 8);
        do
        {
          v28 = __ldxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
    }
    else
    {
      HasLayer = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
    sub_20BFD265C(&v34);
    if (HasLayer)
      break;
    ++v17;
    if (v16 == v18 && v17 == v19)
      goto LABEL_41;
  }
  v38 = v37;
  if (!(_QWORD)v37 || *((_QWORD *)&v38 + 1) == -1)
  {
LABEL_41:
    v30 = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      v30 |= pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v38) == 6;
      *(_QWORD *)&v38 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v38);
      *((_QWORD *)&v38 + 1) = v31;
    }
    while ((_QWORD)v38 && v31 != -1);
  }
  v42 = (void **)&v46;
  sub_20BFE69E4(&v42);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v32, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v48);
  return v30 & 1;
}

void sub_20C5BC0EC(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a7);
  a5 = (void **)&a15;
  sub_20BFE69E4(&a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 72));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::DisconnectSource(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7[3];
  pxrInternal__aapl__pxrReserved__::SdfPath **v8;

  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2))
  {
    sub_20C348EEC((uint64_t)a2, (int *)v7);
    v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
    sub_20BFD265C(v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(this, v7);
    v8 = v7;
    sub_20BFD6F90((void ***)&v8);
  }
  return v5;
}

void sub_20C5BC250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput(a4, &v9, a2, a3);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5BC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v7;
  uint64_t *v8;
  uint64_t *v9;
  _DWORD *v10;
  int HasAttribute;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE v20[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (const void **)((*((_QWORD *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v7 = (const void **)EmptyString;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v8, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v30);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  v9 = (uint64_t *)((char *)this + 8);
  v10 = (_DWORD *)((char *)this + 16);
  sub_20C35C4F8((uint64_t)&__p, v9, v10);
  HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
  if ((v29 & 7) != 0)
  {
    v12 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  if (HasAttribute)
  {
    sub_20C35C4F8((uint64_t)v20, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
    if ((v29 & 7) != 0)
    {
      v14 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
    if ((v24 & 7) != 0)
    {
      v16 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    if (v21)
      sub_20C35C614(v21);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
  }
  if ((v30 & 7) != 0)
  {
    v18 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
}

void sub_20C5BC558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  sub_20C372B54((uint64_t)&__p);
  sub_20C35C2E0((uint64_t)&a10);
  v21 = *(_QWORD *)(v19 - 56);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  _DWORD *v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t i;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void **v32;

  v30 = 0uLL;
  v31 = 0;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_20C35C4F8((uint64_t)&v25, v5, v6);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7)
      v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*((_QWORD *)v7 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v7 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v25, EmptyString, (uint64_t *)&v22);
    sub_20C5BE134((void **)&v30);
    v30 = v22;
    v31 = v23;
    v23 = 0;
    v22 = 0uLL;
    v32 = (void **)&v22;
    sub_20C37FA04(&v32);
    if ((v29 & 7) != 0)
    {
      v11 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v25, v5, v6);
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9)
      v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*((_QWORD *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      v10 = (uint64_t *)((*((_QWORD *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v25, v10, (uint64_t *)&v22);
    sub_20C5BE134((void **)&v30);
    v30 = v22;
    v31 = v23;
    v23 = 0;
    v22 = 0uLL;
    v32 = (void **)&v22;
    sub_20C37FA04(&v32);
    if ((v29 & 7) != 0)
    {
      v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20C5BC918(a3, (uint64_t)(*((_QWORD *)&v30 + 1) - v30) >> 5);
  v16 = *((_QWORD *)&v30 + 1);
  for (i = v30; i != v16; i += 32)
  {
    sub_20C3AD760(i, (uint64_t)&v25);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v25, v17))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v22, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v25);
      sub_20C5BC9A8(a3, (uint64_t)&v22);
      if ((v24 & 7) != 0)
      {
        v18 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
      if (*((_QWORD *)&v22 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v22 + 1));
    }
    if ((v29 & 7) != 0)
    {
      v20 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
  v25 = (void **)&v30;
  sub_20C37FA04(&v25);
}

void sub_20C5BC8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  sub_20C37FA04(&a13);
  _Unwind_Resume(a1);
}

void **sub_20C5BC918(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20C5BE288(a1, v7);
    return sub_20C5BE434(v7);
  }
  return result;
}

void sub_20C5BC994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5BE434((void **)va);
  _Unwind_Resume(a1);
}

void *sub_20C5BC9A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v10 = v4 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v9];
    v17 = &v13[32 * v12];
    sub_20C3AE790(v5, (uint64_t)v15, a2);
    v16 = v15 + 32;
    sub_20C5BE288(a1, &v14);
    v8 = a1[1];
    result = sub_20C5BE434(&v14);
  }
  else
  {
    result = sub_20C3AE790((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_20C5BCAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5BE434((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5BCAB8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput(a4, &v9, a2, a3);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5BCBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v7;
  uint64_t *v8;
  uint64_t *v9;
  _DWORD *v10;
  int HasAttribute;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE v20[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (const void **)((*((_QWORD *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v7 = (const void **)EmptyString;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v8, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v30);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  v9 = (uint64_t *)((char *)this + 8);
  v10 = (_DWORD *)((char *)this + 16);
  sub_20C35C4F8((uint64_t)&__p, v9, v10);
  HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
  if ((v29 & 7) != 0)
  {
    v12 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  if (HasAttribute)
  {
    sub_20C35C4F8((uint64_t)v20, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
    if ((v29 & 7) != 0)
    {
      v14 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
    if ((v24 & 7) != 0)
    {
      v16 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    if (v21)
      sub_20C35C614(v21);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
  }
  if ((v30 & 7) != 0)
  {
    v18 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
}

void sub_20C5BCDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  sub_20C372B54((uint64_t)&__p);
  sub_20C35C2E0((uint64_t)&a10);
  v21 = *(_QWORD *)(v19 - 56);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  _DWORD *v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t i;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void **v32;

  v30 = 0uLL;
  v31 = 0;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_20C35C4F8((uint64_t)&v25, v5, v6);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7)
      v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*((_QWORD *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v25, EmptyString, (uint64_t *)&v22);
    sub_20C5BE134((void **)&v30);
    v30 = v22;
    v31 = v23;
    v23 = 0;
    v22 = 0uLL;
    v32 = (void **)&v22;
    sub_20C37FA04(&v32);
    if ((v29 & 7) != 0)
    {
      v11 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v25, v5, v6);
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9)
      v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
      v10 = (uint64_t *)((*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v25, v10, (uint64_t *)&v22);
    sub_20C5BE134((void **)&v30);
    v30 = v22;
    v31 = v23;
    v23 = 0;
    v22 = 0uLL;
    v32 = (void **)&v22;
    sub_20C37FA04(&v32);
    if ((v29 & 7) != 0)
    {
      v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20C5BD1B0(a3, (uint64_t)(*((_QWORD *)&v30 + 1) - v30) >> 5);
  v16 = *((_QWORD *)&v30 + 1);
  for (i = v30; i != v16; i += 32)
  {
    sub_20C3AD760(i, (uint64_t)&v25);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v25, v17))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v22, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v25);
      sub_20C5BD240(a3, (uint64_t)&v22);
      if ((v24 & 7) != 0)
      {
        v18 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
      if (*((_QWORD *)&v22 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v22 + 1));
    }
    if ((v29 & 7) != 0)
    {
      v20 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
  v25 = (void **)&v30;
  sub_20C37FA04(&v25);
}

void sub_20C5BD138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  sub_20C37FA04(&a13);
  _Unwind_Resume(a1);
}

void **sub_20C5BD1B0(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20C5BE590(a1, v7);
    return sub_20C5BE73C(v7);
  }
  return result;
}

void sub_20C5BD22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5BE73C((void **)va);
  _Unwind_Resume(a1);
}

void *sub_20C5BD240(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v10 = v4 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v9];
    v17 = &v13[32 * v12];
    sub_20C3AE790(v5, (uint64_t)v15, a2);
    v16 = v15 + 32;
    sub_20C5BE590(a1, &v14);
    v8 = a1[1];
    result = sub_20C5BE73C(&v14);
  }
  else
  {
    result = sub_20C3AE790((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_20C5BD33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5BE73C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5BD350(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo::UsdShadeConnectionSourceInfo(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t *);
  char v10;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  unint64_t *v18;
  unint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  unsigned int *v23;
  unsigned int v24;
  int v26;
  int v27;
  char *v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  LODWORD(v28) = 1;
  v29 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v30 + 1);
  v31 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v28);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_24C53D618;
  if ((v31 & 7) != 0)
  {
    v6 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_20BFD265C(&v30);
  if (v29)
    sub_20C35C614(v29);
  *(_QWORD *)(a1 + 32) = 0;
  v8 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 48));
  v9 = sub_20C369024(a2);
  if (v10 & 1 | (unint64_t)v9)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3))
    {
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a3);
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(NameToken, (uint64_t)&v28);
      if (v8 == &v28)
      {
        v14 = v28;
      }
      else
      {
        if ((*v8 & 7) != 0)
        {
          v12 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        v14 = 0;
        *v8 = v28;
        v28 = 0;
      }
      *(_DWORD *)(a1 + 40) = (_DWORD)v29;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, &v26);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::Get(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v28);
      v17 = v29;
      if (v29)
      {
        v18 = (unint64_t *)((char *)v29 + 48);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v17;
      if (v20)
        sub_20C35C614(v20);
      sub_20C01A074((int *)(a1 + 16), &v30);
      sub_20C01A0C8((int *)(a1 + 20), (_DWORD *)&v30 + 1);
      sub_20BF32220((_QWORD *)(a1 + 24), &v31);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
      sub_20BFD265C(&v26);
      v21 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(v21, a3, (uint64_t)&v28);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, v22))*(_QWORD *)(a1 + 48) = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v28);
      if ((v31 & 7) != 0)
      {
        v23 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
      sub_20BFD265C(&v30);
      if (v29)
        sub_20C35C614(v29);
    }
  }
  else
  {
    v28 = "usdShade/connectableAPI.cpp";
    v29 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"UsdShadeConnectionSourceInfo";
    v30 = 593;
    v31 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo::UsdShadeConnectionSourceInfo"
                            "(const UsdStagePtr &, const SdfPath &)";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
  }
  return a1;
}

void sub_20C5BD670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *v2;
  _QWORD *v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20C372B54((uint64_t)va);
  if ((*v3 & 7) != 0)
  {
    v5 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5BD6F4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5BD7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5BD818(uint64_t a1)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v1;
  uint64_t IsDefined;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  if (!*(_DWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 32))
    return 0;
  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v6, v1);
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return IsDefined;
}

void sub_20C5BD8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C5BD8C8(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t *a3, int a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(_QWORD *)result = &unk_24C537498;
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)result + 3) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *((_QWORD *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)result = off_24C53D618;
  v13 = *a3;
  *((_QWORD *)result + 4) = *a3;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *((_QWORD *)result + 4) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 10) = a4;
  *((_QWORD *)result + 6) = a5;
  return result;
}

uint64_t sub_20C5BD988(uint64_t a1)
{
  sub_20C5BD9C4((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 60) >= 2u)
    free(*(void **)a1);
  return a1;
}

uint64_t *sub_20C5BD9C4(uint64_t *result)
{
  uint64_t *v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v1 = result;
  if (*((_DWORD *)result + 15) >= 2u)
    result = (uint64_t *)*result;
  v2 = *((_DWORD *)v1 + 14);
  if (v2)
  {
    v3 = &result[7 * v2];
    do
    {
      v4 = result[4];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)result);
      result = (uint64_t *)(v7 + 56);
    }
    while (result != v3);
  }
  return result;
}

void sub_20C5BDA30(unsigned int *a1, unsigned int a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v5;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)malloc(56 * a2);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a1;
  if (a1[15] >= 2)
    v5 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)a1;
  sub_20C5BDAB4(v5, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v5 + 56 * a1[14]), v4);
  sub_20C5BD9C4((uint64_t *)a1);
  if (a1[15] >= 2)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  a1[15] = a2;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C5BDAB4(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  if (a1 == a2)
    return this;
  v4 = a1;
  v5 = this;
  do
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v5, v4);
    *(_QWORD *)v5 = &unk_24C537498;
    v6 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v5 + 3) = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *((_QWORD *)v5 + 3) &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)v5 = off_24C53D618;
    *((_QWORD *)v5 + 4) = *((_QWORD *)v4 + 4);
    *((_QWORD *)v4 + 4) = 0;
    *(_OWORD *)((char *)v5 + 40) = *(_OWORD *)((char *)v4 + 40);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v4 + 56);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v5 + 56);
  }
  while (v4 != a2);
  return v5;
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *sub_20C5BDBB4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *result;
  void *v4;

  result = sub_20C5BDBFC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C5BDC3C((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *sub_20C5BDBFC()
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)operator new(0x148uLL);
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(v0);
  return v0;
}

void sub_20C5BDC28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5BDC3C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  void **v116;

  v116 = (void **)(a1 + 304);
  sub_20BEEB2B8(&v116);
  v2 = *(_QWORD *)(a1 + 296);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 288);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 280);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 272);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 264);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 256);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 248);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 240);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 232);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 224);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 216);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 208);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 200);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 192);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 184);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 176);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 168);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 160);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 152);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 144);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 136);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 128);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 120);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 112);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 104);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 96);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 88);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 80);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 72);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 64);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 56);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 48);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 40);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 32);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 24);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 16);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 8);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v113 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  return a1;
}

void sub_20C5BE134(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_20C37FA88((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20C5BE1A0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C5BE224((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C5BE224(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

uint64_t sub_20C5BE288(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C5BE2FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C5BE2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3AE790(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C5BE3B0((uint64_t)v13);
  return v11;
}

uint64_t sub_20C5BE3B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C5BE3E4((uint64_t *)a1);
  return a1;
}

void sub_20C5BE3E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C5BE224(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_20C5BE434(void **a1)
{
  sub_20C5BE464(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C5BE464(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_20C5BE224(v4, i - 32);
  }
}

void sub_20C5BE4A8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C5BE52C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C5BE52C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

uint64_t sub_20C5BE590(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C5BE604((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C5BE604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3AE790(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C5BE6B8((uint64_t)v13);
  return v11;
}

uint64_t sub_20C5BE6B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C5BE6EC((uint64_t *)a1);
  return a1;
}

void sub_20C5BE6EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C5BE52C(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_20C5BE73C(void **a1)
{
  sub_20C5BE76C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C5BE76C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_20C5BE52C(v4, i - 32);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::CanConnectInputToSource(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *this, uint64_t a3, uint64_t a4, int a5)
{
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  const char *v16;
  const char *Text;
  const char *v18;
  char *v19;
  const char *v21;
  const char *v22;
  char *v23;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v27;
  uint64_t *v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v36;
  char IsContainer;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  uint64_t v44;
  unint64_t v45;
  const char *v46;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v47;
  char v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v56;
  uint64_t v57;
  unint64_t v58;
  const char *v59;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  unsigned int *v64;
  unsigned int v65;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v66;
  uint64_t v67;
  unint64_t v68;
  const char *v69;
  const char *v70;
  const char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int v74;
  const char *v75;
  const char *v76;
  const char *v77;
  char *v78;
  unsigned int *v79;
  unsigned int v80;
  const char *v81;
  const char *v82;
  const char *v83;
  char *v84;
  unsigned int *v85;
  unsigned int v86;
  const char *v87;
  const char *v88;
  const char *v89;
  char *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t v95;
  _DWORD *v96[2];
  int v97;
  int v98;
  int v99;
  int v100;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v101;
  int v102;
  int v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, this)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(this, v10) & 1) == 0)
  {
    if (!a4)
      return a4;
    sub_20C348EEC((uint64_t)this, (int *)&v105);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v105);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid input: %s", v18, v19, Text);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
LABEL_15:
    *(_OWORD *)a4 = v110;
    *(_QWORD *)(a4 + 16) = v111;
    HIBYTE(v111) = 0;
    LOBYTE(v110) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 1);
    sub_20BFD265C(&v105);
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v11) & 1) == 0)
  {
    if (!a4)
      return a4;
    sub_20C348EEC(a3, (int *)&v105);
    v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v105);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid source: %s", v22, v23, v21);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    goto LABEL_15;
  }
  v96[0] = this;
  v96[1] = (_DWORD *)a3;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability(this, (unsigned int **)&v95);
  v13 = *(unsigned __int8 *)(a1 + 9);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v14)
    v14 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((v95 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, v12))
    {
      if (v13)
      {
        a4 = sub_20C5BF354(v96, a4);
        goto LABEL_137;
      }
      goto LABEL_61;
    }
    if (!v13)
    {
LABEL_61:
      a4 = 1;
      goto LABEL_137;
    }
    v28 = (uint64_t *)((char *)this + 8);
    v29 = (_DWORD *)((char *)this + 16);
    v30 = sub_20C35C4F8((uint64_t)&v110, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_20C348EEC(v30, (int *)&v113);
    if ((v112 & 7) != 0)
    {
      v31 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_20BFD265C(&v111);
    if (*((_QWORD *)&v110 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v110 + 1));
    v33 = sub_20C35C4F8((uint64_t)&v110, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
    sub_20C348EEC(v33, &v108);
    if ((v112 & 7) != 0)
    {
      v34 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_20BFD265C(&v111);
    if (*((_QWORD *)&v110 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v110 + 1));
    if (a5 == 1)
    {
      sub_20C35C4F8((uint64_t)&v105, (uint64_t *)this + 1, (_DWORD *)this + 4);
      v36 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v110, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v105);
      v112 = 0;
      *(_QWORD *)&v110 = off_24C53D618;
      IsContainer = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(v36);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v110);
      if ((v107 & 7) != 0)
      {
        v38 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v106 + 1);
      sub_20BFD265C(&v106);
      if (*((_QWORD *)&v105 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v105 + 1));
      if ((IsContainer & 1) == 0)
      {
        if (a4)
        {
          sub_20C35C4F8((uint64_t)&v110, (uint64_t *)this + 1, (_DWORD *)this + 4);
          v57 = *((_QWORD *)&v110 + 1);
          if (!*((_QWORD *)&v110 + 1) || (*(_BYTE *)(*((_QWORD *)&v110 + 1) + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v110 + 1), v56);
          v58 = **(_QWORD **)(v57 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v58)
          {
            v59 = (const char *)(v58 + 16);
            if (*(char *)(v58 + 39) < 0)
              v59 = *(const char **)v59;
          }
          else
          {
            v59 = "";
          }
          sub_20C348EEC((uint64_t)this, &v99);
          v70 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', prim owning the input '%s' is not a container.", v71, v72, v59, v70);
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = v105;
          *(_QWORD *)(a4 + 16) = v106;
          HIBYTE(v106) = 0;
          LOBYTE(v105) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v100);
          sub_20BFD265C(&v99);
          if ((v112 & 7) != 0)
          {
            v73 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
            do
              v74 = __ldxr(v73);
            while (__stlxr(v74 - 2, v73));
          }
          goto LABEL_133;
        }
LABEL_136:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v109);
        sub_20BFD265C(&v108);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v113 + 1);
        sub_20BFD265C(&v113);
        goto LABEL_137;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, &v110);
      v40 = v110;
      v41 = v113;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
      v42 = sub_20BFD265C(&v110);
      if (v40 != v41)
      {
        if (a4)
        {
          sub_20C35C4F8((uint64_t)v42, v28, v29);
          v44 = *((_QWORD *)&v110 + 1);
          if (!*((_QWORD *)&v110 + 1) || (*(_BYTE *)(*((_QWORD *)&v110 + 1) + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v110 + 1), v43);
          v45 = **(_QWORD **)(v44 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v45)
          {
            v46 = (const char *)(v45 + 16);
            if (*(char *)(v45 + 39) < 0)
              v46 = *(const char **)v46;
          }
          else
          {
            v46 = "";
          }
          v81 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108);
          v82 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v113);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', Output source's prim '%s' is not an immediate descendent of the input's prim '%s'.", v83, v84, v46, v81, v82);
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = v105;
          *(_QWORD *)(a4 + 16) = v106;
          HIBYTE(v106) = 0;
          LOBYTE(v105) = 0;
          if ((v112 & 7) != 0)
          {
            v85 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
LABEL_133:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
          sub_20BFD265C(&v111);
          if (*((_QWORD *)&v110 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v110 + 1));
          a4 = 0;
          goto LABEL_136;
        }
        goto LABEL_136;
      }
    }
    else
    {
      sub_20C35C4F8((uint64_t)&v99, (uint64_t *)this + 1, (_DWORD *)this + 4);
      sub_20C3AD22C((uint64_t)&v99, (uint64_t)&v105);
      v47 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v110, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v105);
      v112 = 0;
      *(_QWORD *)&v110 = off_24C53D618;
      v48 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(v47);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v110);
      if ((v107 & 7) != 0)
      {
        v49 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v106 + 1);
      sub_20BFD265C(&v106);
      if (*((_QWORD *)&v105 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v105 + 1));
      if ((v104 & 7) != 0)
      {
        v51 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v103);
      sub_20BFD265C(&v102);
      if (v101)
        sub_20C35C614(v101);
      if ((v48 & 1) == 0)
      {
        if (a4)
        {
          sub_20C35C4F8((uint64_t)&v110, v28, v29);
          v61 = *((_QWORD *)&v110 + 1);
          if (!*((_QWORD *)&v110 + 1) || (*(_BYTE *)(*((_QWORD *)&v110 + 1) + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v110 + 1), v60);
          v62 = **(_QWORD **)(v61 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v62)
          {
            v63 = (const char *)(v62 + 16);
            if (*(char *)(v62 + 39) < 0)
              v63 = *(const char **)v63;
          }
          else
          {
            v63 = "";
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, &v99);
          v75 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99);
          sub_20C348EEC(a3, &v97);
          v76 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v97);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', Immediate ancestor '%s' for the prim owning the output source '%s' is not a container.", v77, v78, v63, v75, v76);
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = v105;
          *(_QWORD *)(a4 + 16) = v106;
          HIBYTE(v106) = 0;
          LOBYTE(v105) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v98);
          sub_20BFD265C(&v97);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v100);
          sub_20BFD265C(&v99);
          if ((v112 & 7) != 0)
          {
            v79 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
            do
              v80 = __ldxr(v79);
            while (__stlxr(v80 - 2, v79));
          }
          goto LABEL_133;
        }
        goto LABEL_136;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v113, &v110);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, &v105);
      v53 = v110;
      v54 = v105;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 1);
      sub_20BFD265C(&v105);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
      v55 = sub_20BFD265C(&v110);
      if (v53 != v54)
      {
        if (a4)
        {
          sub_20C35C4F8((uint64_t)v55, v28, v29);
          v67 = *((_QWORD *)&v110 + 1);
          if (!*((_QWORD *)&v110 + 1) || (*(_BYTE *)(*((_QWORD *)&v110 + 1) + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v110 + 1), v66);
          v68 = **(_QWORD **)(v67 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v68)
          {
            v69 = (const char *)(v68 + 16);
            if (*(char *)(v68 + 39) < 0)
              v69 = *(const char **)v69;
          }
          else
          {
            v69 = "";
          }
          v87 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v113);
          v88 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', Input's prim '%s' and source's prim '%s' are not contained by the same container prim.", v89, v90, v69, v87, v88);
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = v105;
          *(_QWORD *)(a4 + 16) = v106;
          HIBYTE(v106) = 0;
          LOBYTE(v105) = 0;
          if ((v112 & 7) != 0)
          {
            v91 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
            do
              v92 = __ldxr(v91);
            while (__stlxr(v92 - 2, v91));
          }
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    a4 = 1;
    goto LABEL_136;
  }
  v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v15)
    v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((v95 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v15 + 11) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!a4)
      goto LABEL_137;
    v16 = "Input connectability is unspecified";
    goto LABEL_64;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, v12))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v110, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a3);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability(v24, (unsigned int **)&v105);
    if ((v112 & 7) != 0)
    {
      v25 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_20BFD265C(&v111);
    if (*((_QWORD *)&v110 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v110 + 1));
    v27 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v27)
      v27 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((v105 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 11) & 0xFFFFFFFFFFFFFFF8))
    {
      if (v13)
        a4 = sub_20C5BF354(v96, a4);
      else
        a4 = 1;
    }
    else if (a4)
    {
      MEMORY[0x212B929D0](a4, "Input connectability is 'interfaceOnly' and source does not have 'interfaceOnly' connectability.");
      a4 = 0;
    }
    if ((v105 & 7) != 0)
    {
      v64 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    goto LABEL_137;
  }
  if (a4)
  {
    v16 = "Input connectability is 'interfaceOnly' but source is not an input";
LABEL_64:
    MEMORY[0x212B929D0](a4, v16);
    a4 = 0;
  }
LABEL_137:
  if ((v95 & 7) != 0)
  {
    v93 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  return a4;
}

void sub_20C5BF188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;

  sub_20BFD1A18((_DWORD *)(v13 - 112));
  sub_20BFD1A18((_DWORD *)(v13 - 72));
  if ((a13 & 7) != 0)
  {
    v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::RequiresEncapsulation(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t sub_20C5BF354(_DWORD **a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  char IsContainer;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *Text;
  const char *v15;
  char *v16;
  unint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  char *v22;
  unint64_t v23;
  const char *v24;
  _BYTE v26[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)*a1 + 1, *a1 + 4);
  sub_20C348EEC((uint64_t)&v32, &v35);
  if ((v34 & 7) != 0)
  {
    v4 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (*((_QWORD *)&v32 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v32 + 1));
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)a1[1] + 1, a1[1] + 4);
  sub_20C348EEC((uint64_t)&v32, (int *)&v31);
  if ((v34 & 7) != 0)
  {
    v6 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (*((_QWORD *)&v32 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v32 + 1));
  sub_20C35C4F8((uint64_t)v26, (uint64_t *)a1[1] + 1, a1[1] + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v26);
  v34 = 0;
  *(_QWORD *)&v32 = off_24C53D618;
  IsContainer = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v32);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v32);
  if ((v30 & 7) != 0)
  {
    v9 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  if ((IsContainer & 1) == 0)
  {
    if (a2)
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
      v17 = *(_QWORD *)sub_20C398E78(a1[1]) & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0)
          v18 = *(const char **)v18;
      }
      else
      {
        v18 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - prim '%s' owning the input source '%s' is not a container.", v15, v16, Text, v18);
      goto LABEL_32;
    }
LABEL_27:
    v13 = 0;
    goto LABEL_35;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v32);
  v12 = v31;
  v11 = v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v11 == v12)
  {
    v13 = 1;
    goto LABEL_35;
  }
  if (!a2)
    goto LABEL_27;
  v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
  v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
  v23 = *(_QWORD *)sub_20C398E78(*a1) & 0xFFFFFFFFFFFFFFF8;
  if (v23)
  {
    v24 = (const char *)(v23 + 16);
    if (*(char *)(v23 + 39) < 0)
      v24 = *(const char **)v24;
  }
  else
  {
    v24 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - input source prim '%s' is not the closest ancestor container of the NodeGraph '%s' owning the input attribute '%s'.", v21, v22, v19, v20, v24);
LABEL_32:
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v13 = 0;
  *(_OWORD *)a2 = v32;
  *(_QWORD *)(a2 + 16) = v33;
LABEL_35:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_20BFD265C(&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  return v13;
}

void sub_20C5BF624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20BFD1A18((int *)va);
  sub_20BFD1A18((_DWORD *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_20C5BF67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20C35C2E0((uint64_t)va);
  JUMPOUT(0x20C5BF668);
}

void sub_20C5BF68C()
{
  JUMPOUT(0x20C5BF668);
}

void sub_20C5BF698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20C35C2E0((uint64_t)va);
  JUMPOUT(0x20C5BF670);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v16;
  int v17;
  const char *Text;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  char *v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  unint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  pxrInternal__aapl__pxrReserved__ *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  char *v35;
  unsigned int *v36;
  unsigned int v37;
  int v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__ *v43;
  pxrInternal__aapl__pxrReserved__ *v44[2];
  uint64_t v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__ *v47;

  if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a2) & 1) != 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v10) & 1) != 0)
    {
      sub_20C35C4F8((uint64_t)v44, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
      sub_20C348EEC((uint64_t)v44, (int *)&v47);
      if ((v46 & 7) != 0)
      {
        v12 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
      sub_20BFD265C(&v45);
      if (v44[1])
        sub_20C35C614(v44[1]);
      sub_20C35C4F8((uint64_t)v44, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
      sub_20C348EEC((uint64_t)v44, (int *)&v43);
      if ((v46 & 7) != 0)
      {
        v14 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
      sub_20BFD265C(&v45);
      if (v44[1])
        sub_20C35C614(v44[1]);
      v17 = *(unsigned __int8 *)(a1 + 9);
      if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, v16))
      {
        if (a5 == 1)
        {
          if (a4)
          {
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
            sub_20C35C4F8((uint64_t)v44, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
            v21 = v44[1];
            if (!v44[1] || (*((_BYTE *)v44[1] + 57) & 8) != 0)
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v44[1], v19);
            v22 = **((_QWORD **)v21 + 3) & 0xFFFFFFFFFFFFFFF8;
            if (v22)
            {
              v23 = (const char *)(v22 + 16);
              if (*(char *)(v22 + 39) < 0)
                v23 = *(const char **)v23;
            }
            else
            {
              v23 = "";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - passthrough usage is not allowed for output prim '%s' of type '%s'.", (const char *)v19, v20, Text, v23);
            if (*(char *)(a4 + 23) < 0)
              operator delete(*(void **)a4);
            *(_OWORD *)a4 = v41;
            *(_QWORD *)(a4 + 16) = v42;
            HIBYTE(v42) = 0;
            LOBYTE(v41) = 0;
            if ((v46 & 7) != 0)
            {
              v36 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
              do
                v37 = __ldxr(v36);
              while (__stlxr(v37 - 2, v36));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
            sub_20BFD265C(&v45);
            if (v44[1])
              sub_20C35C614(v44[1]);
          }
LABEL_50:
          v25 = 0;
          goto LABEL_51;
        }
        if (v47 != v43)
        {
          if (a4)
          {
            sub_20C348EEC(a2, (int *)&v41);
            v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
            sub_20C348EEC(a3, &v39);
            v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - output '%s' and input source '%s' must be encapsulated by the same container prim", v34, v35, v32, v33);
            if (*(char *)(a4 + 23) < 0)
              operator delete(*(void **)a4);
            *(_OWORD *)a4 = *(_OWORD *)v44;
            *(_QWORD *)(a4 + 16) = v45;
            HIBYTE(v45) = 0;
            LOBYTE(v44[0]) = 0;
            sub_20BFD1A18(&v39);
            sub_20BFD1A18(&v41);
          }
          goto LABEL_50;
        }
      }
      else if (v17)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v44);
        v27 = v43;
        v26 = v44[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v44 + 1);
        sub_20BFD265C(v44);
        if (v26 != v27)
        {
          if (a4)
          {
            sub_20C348EEC(a2, (int *)&v41);
            v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
            sub_20C348EEC(a3, &v39);
            v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - prim owning the output '%s' is not an immediate descendent  of the prim owning the output source '%s'.", v30, v31, v28, v29);
            if (*(char *)(a4 + 23) < 0)
              operator delete(*(void **)a4);
            *(_OWORD *)a4 = *(_OWORD *)v44;
            *(_QWORD *)(a4 + 16) = v45;
            HIBYTE(v45) = 0;
            LOBYTE(v44[0]) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
            sub_20BFD265C(&v39);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
            sub_20BFD265C(&v41);
          }
          goto LABEL_50;
        }
      }
      v25 = 1;
LABEL_51:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
      sub_20BFD265C(&v43);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
      sub_20BFD265C(&v47);
      return v25;
    }
    if (a4)
    {
      v24 = "Invalid source";
      goto LABEL_26;
    }
    return 0;
  }
  if (!a4)
    return 0;
  v24 = "Invalid output";
LABEL_26:
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v24, (const char *)v10, v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  v25 = 0;
  *(_OWORD *)a4 = *(_OWORD *)v44;
  *(_QWORD *)(a4 + 16) = v45;
  return v25;
}

void sub_20C5BFAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18(va1);
  sub_20BFD1A18((_DWORD *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_20C5BFB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35C2E0((uint64_t)va);
  JUMPOUT(0x20C5BFB44);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::CanConnectOutputToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::IsContainer(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *this)
{
  return *((unsigned __int8 *)this + 8);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(pxrInternal__aapl__pxrReserved__::TfType *this, _QWORD *a2)
{
  unint64_t v4;
  uint64_t TypeName;
  const char *v6;
  _QWORD v7[4];
  char v8;

  if (!*a2
    || (pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v7),
        *(_QWORD *)this == v7[0]))
  {
    v7[0] = "usdShade/connectableAPIBehavior.cpp";
    v7[1] = "UsdShadeRegisterConnectableAPIBehavior";
    v7[2] = 835;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(const TfType &, const SharedCo"
            "nnectableAPIBehaviorPtr &)";
    v8 = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
    if (*(char *)(TypeName + 23) >= 0)
      v6 = (const char *)TypeName;
    else
      v6 = *(const char **)TypeName;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid behavior registration for prim type '%s'", v6);
  }
  else
  {
    v4 = sub_20C5BFC24();
    sub_20C5C0064(v4, this, a2);
  }
}

unint64_t sub_20C5BFC24()
{
  unint64_t v0;
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  _OWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  pxrInternal__aapl__pxrReserved__::TfNotice *v13;
  char *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  std::string v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  char *v29;
  char v30[8];
  void *__p[2];
  uint64_t v32;
  const char *v33;
  char v34;
  int v35;

  v0 = atomic_load(&qword_25498A628);
  if (!v0)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117_BehaviorRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v25);
    v2 = std::string::insert(&v25, 0, "Create Singleton ");
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v32 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    sub_20BEB4C0C((uint64_t)&v26, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    do
      v4 = __ldaxr(byte_25498A630);
    while (__stlxr(1u, byte_25498A630));
    if ((v4 & 1) != 0)
    {
      while (!atomic_load(&qword_25498A628))
        sched_yield();
    }
    else
    {
      if (!atomic_load(&qword_25498A628))
      {
        v8 = operator new(0x40uLL);
        v10 = (unint64_t)v8;
        *(_QWORD *)v8 = 0;
        __dmb(0xBu);
        v8[1] = 0u;
        *((_QWORD *)v8 + 1) = 0;
        v8[2] = 0u;
        *((_DWORD *)v8 + 12) = 1065353216;
        *((_BYTE *)v8 + 56) = 0;
        do
          v11 = __ldaxr(&qword_25498A628);
        while (__stlxr((unint64_t)v8, &qword_25498A628));
        if (v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "SetInstanceConstructed";
          v32 = 56;
          v33 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                "amespace)::_BehaviorRegistry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::(anony"
                "mous namespace)::_BehaviorRegistry]";
          v34 = 0;
          v35 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v9);
        }
        Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v8);
        atomic_store(1u, (unsigned __int8 *)(v10 + 56));
        v28 = v10;
        sub_20BEB5AD8((unint64_t *)v10, __p);
        v29 = (char *)__p[0];
        v25.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20C5C08F4;
        v25.__r_.__value_.__l.__size_ = 0;
        v13 = (pxrInternal__aapl__pxrReserved__::TfNotice *)operator new(0x68uLL);
        __p[0] = off_24C51AF48;
        pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v30);
        sub_20C5C0AA4((uint64_t)v13, &v28, &v25, (uint64_t)__p);
        (*(void (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *__hidden))__p[0])((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *)__p);
        pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v13, (char **)__p);
        v15 = __p[1];
        if (__p[1])
        {
          v16 = (unsigned int *)((char *)__p[1] + 8);
          do
          {
            v17 = __ldxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
        }
        v19 = v29;
        if (v29)
        {
          v20 = (unsigned int *)(v29 + 8);
          do
          {
            v21 = __ldxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
        }
        v23 = atomic_load(&qword_25498A628);
        if (v23)
        {
          if (v10 != v23)
          {
            __p[0] = "tf/instantiateSingleton.h";
            __p[1] = "_CreateInstance";
            v32 = 84;
            v33 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                  "amespace)::_BehaviorRegistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved"
                  "__::(anonymous namespace)::_BehaviorRegistry]";
            v34 = 0;
            v35 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v14);
          }
        }
        else
        {
          do
            v24 = __ldaxr(&qword_25498A628);
          while (__stlxr(v10, &qword_25498A628));
          if (v24)
          {
            __p[0] = "tf/instantiateSingleton.h";
            __p[1] = "_CreateInstance";
            v32 = 88;
            v33 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                  "amespace)::_BehaviorRegistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved"
                  "__::(anonymous namespace)::_BehaviorRegistry]";
            v34 = 0;
            v35 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v14, "instance.exchange(newInst) == nullptr");
          }
        }
      }
      atomic_store(0, byte_25498A630);
    }
    v0 = atomic_load(&qword_25498A628);
    while (v27--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v26);
  }
  return v0;
}

void sub_20C5BFF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  while (a18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C5C0064(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, _QWORD *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  sub_20C5C10D8((uint64_t)&v7, a2);
  sub_20C5C118C(a1, &v7, a3);
  v9 = (void **)&v8;
  sub_20BEEB2B8(&v9);
  if ((v7 & 7) != 0)
  {
    v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

void sub_20C5C00E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;

  a14 = (void **)(v14 + 8);
  sub_20BEEB2B8(&a14);
  if ((a9 & 7) != 0)
  {
    v16 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unint64_t v2;
  _BOOL8 v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__ *v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (!pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible(this))
    return 0;
  v2 = sub_20C5BFC24();
  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = sub_20C5C01D8(v2, &v7) != 0;
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v3;
}

void sub_20C5C01C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *sub_20C5C01D8(uint64_t a1, pxrInternal__aapl__pxrReserved__ **a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  _QWORD v16[4];
  void **v17;
  char v18;

  sub_20C5C1918(a1);
  v5 = a2[1];
  if (v5 && (*((_BYTE *)v5 + 57) & 8) == 0)
  {
    v6 = (unsigned int **)(*((_QWORD *)v5 + 3) + 40);
    goto LABEL_6;
  }
  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v4);
  v6 = (unsigned int **)(*((_QWORD *)v5 + 3) + 40);
  if (a2[1])
  {
    v5 = a2[1];
LABEL_6:
    if ((*((_BYTE *)v5 + 57) & 8) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = 0;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v5, v4);
LABEL_10:
  v7 = *((_QWORD *)v5 + 3);
  v8 = *(_QWORD *)v7;
  v15 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v15 = (uint64_t)v9;
  }
  memset(v16, 0, 24);
  sub_20BFE538C(v16, *(uint64_t **)(v7 + 16), *(uint64_t **)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 3);
  v17 = 0;
  v18 = 0;
  sub_20C358448((uint64_t)&v17, &v15, (uint64_t)v16);
  v16[3] = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v17);
  v11 = sub_20C5C1948(a1, &v15, *v6, (pxrInternal__aapl__pxrReserved__::UsdPrim *)a2);
  v17 = (void **)v16;
  sub_20BEEB2B8(&v17);
  if ((v15 & 7) != 0)
  {
    v12 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return v11;
}

void sub_20C5C0330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a6);
  sub_20BEEB2B8((void ***)va);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CanConnect(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__ *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = sub_20C5BFC24();
  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v5 = sub_20C5C01D8(v4, &v9);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if (v5)
    LOBYTE(a2) = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *, uint64_t, uint64_t, void **))(*(_QWORD *)v5 + 16))(v5, a1, a2, __p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return (v5 != 0) & a2;
}

{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__ *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = sub_20C5BFC24();
  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v5 = sub_20C5C01D8(v4, &v9);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if (v5)
    LOBYTE(a2) = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *, uint64_t, uint64_t, void **))(*(_QWORD *)v5 + 24))(v5, a1, a2, __p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return (v5 != 0) & a2;
}

void sub_20C5C048C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20C35C2E0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20C5C05A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20C35C2E0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  unint64_t v3;
  unsigned int *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_20C5BFC24();
  sub_20C5C1918(v3);
  sub_20C5C10D8((uint64_t)&v16, this);
  v4 = *(unsigned int **)this;
  LODWORD(v11) = 1;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v14);
  v15 = 0;
  v5 = sub_20C5C1948(v3, &v16, v4, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
  if ((v15 & 7) != 0)
  {
    v6 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (v12)
    sub_20C35C614(v12);
  v11 = (void **)&v17;
  sub_20BEEB2B8(&v11);
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return v5 != 0;
}

void sub_20C5C06EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _DWORD *v15;
  _DWORD *v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  if ((a13 & 7) != 0)
  {
    v18 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
  sub_20BFD265C(v15);
  if (a11)
    sub_20C35C614(a11);
  a10 = (void **)&a15;
  sub_20BEEB2B8(&a10);
  if ((a14 & 7) != 0)
  {
    v20 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;
  pxrInternal__aapl__pxrReserved__ *v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  v2 = sub_20C5BFC24();
  sub_20C35C4F8((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = sub_20C5C01D8(v2, &v8);
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  if (v3)
    v6 = *((_BYTE *)v3 + 8) != 0;
  return (v3 != 0) & v6;
}

void sub_20C5C081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::RequiresEncapsulation(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;
  pxrInternal__aapl__pxrReserved__ *v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  v2 = sub_20C5BFC24();
  sub_20C35C4F8((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = sub_20C5C01D8(v2, &v8);
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  if (v3)
    v6 = *((_BYTE *)v3 + 9) != 0;
  return (v3 != 0) & v6;
}

void sub_20C5C08E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *sub_20C5C08F4(unint64_t *a1)
{
  unint64_t *v2;
  unint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[3];
  __int16 v16;
  _QWORD v17[2];
  char v18;

  v15[0] = 0;
  v16 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v15, a1 + 1, 1);
  v2 = (unint64_t *)a1[4];
  if (v2)
  {
    while (v2[7])
    {
      v3 = (unint64_t *)*v2;
LABEL_32:
      v2 = v3;
      if (!v3)
        return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v15);
    }
    v4 = (int8x8_t)a1[3];
    v5 = v2[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v3 = (unint64_t *)*v2;
    v7 = a1[2];
    v8 = *(unint64_t **)(v7 + 8 * v5);
    do
    {
      v9 = v8;
      v8 = (unint64_t *)*v8;
    }
    while (v8 != v2);
    if (v9 == a1 + 4)
      goto LABEL_36;
    v10 = v9[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v4)
        v10 %= *(_QWORD *)&v4;
    }
    else
    {
      v10 &= *(_QWORD *)&v4 - 1;
    }
    v11 = (_QWORD *)*v2;
    if (v10 != v5)
    {
LABEL_36:
      if (v3)
      {
        v12 = v3[1];
        if (v6.u32[0] > 1uLL)
        {
          v13 = v3[1];
          if (v12 >= *(_QWORD *)&v4)
            v13 = v12 % *(_QWORD *)&v4;
        }
        else
        {
          v13 = v12 & (*(_QWORD *)&v4 - 1);
        }
        v11 = (_QWORD *)*v2;
        if (v13 == v5)
          goto LABEL_25;
      }
      *(_QWORD *)(v7 + 8 * v5) = 0;
      v11 = (_QWORD *)*v2;
    }
    if (!v11)
    {
LABEL_31:
      *v9 = (unint64_t)v11;
      *v2 = 0;
      --a1[5];
      v17[0] = v2;
      v17[1] = a1 + 4;
      v18 = 1;
      sub_20C5C1038((uint64_t)v17);
      goto LABEL_32;
    }
    v12 = v11[1];
LABEL_25:
    if (v6.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v4)
        v12 %= *(_QWORD *)&v4;
    }
    else
    {
      v12 &= *(_QWORD *)&v4 - 1;
    }
    if (v12 != v5)
    {
      *(_QWORD *)(a1[2] + 8 * v12) = v9;
      v11 = (_QWORD *)*v2;
    }
    goto LABEL_31;
  }
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v15);
}

uint64_t sub_20C5C0AA4(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)a1 = off_24C53D6D8;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_20C5C0B1C(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
    sub_20C96B36C(v4);
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)v2, a2);
  _Unwind_Resume(a1);
}

void sub_20C5C0B3C(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = off_24C53D6D8;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)a1, v2);
}

void sub_20C5C0BA0(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  *(_QWORD *)a1 = off_24C53D6D8;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)a1, v2);
  operator delete(v7);
}

uint64_t sub_20C5C0C08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v18)(_QWORD *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a1[6];
  v8 = a1 + 6;
  if (!v9)
    return 0;
  v13 = v8 - 1;
  v14 = sub_20BEB47BC(v8);
  v15 = *v13;
  v16 = !*(_BYTE *)(v14 + 14) || v15 == 0;
  if (v16
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    v25 = v15;
    v21 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    v22 = sub_20C5C0F9C(v13);
    if (v21)
      v23 = a6;
    else
      v23 = MEMORY[0x24BEDB7C8];
    v24 = v21;
    v15 = v25;
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery((uint64_t)a1, a2, v24, v23, v22, (uint64_t)&unk_24C53D6B0, a7);
  }
  v18 = (void (*)(_QWORD *, uint64_t))a1[11];
  v19 = a1[12];
  v20 = (_QWORD *)(v15 + (v19 >> 1));
  if ((v19 & 1) != 0)
    v18 = *(void (**)(_QWORD *, uint64_t))(*v20 + v18);
  v18(v20, a2);
  if (*a7 != a7[1])
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery((uint64_t)a1, a7);
  return 1;
}

uint64_t sub_20C5C0D20(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  _QWORD v13[4];
  char v14;
  int v15;

  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v13);
  if (v13[0] == v3)
  {
    v13[0] = "tf/notice.h";
    v13[1] = "GetNoticeType";
    v13[2] = 563;
    v13[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::(an"
             "onymous namespace)::_BehaviorRegistry>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__"
             "aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry::*)(const pxrInternal__aapl__pxrReserved__::P"
             "lugNotice::DidRegisterPlugins &), pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins>>::GetNo"
             "ticeType() const [Derived = pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrRe"
             "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry>, pxrInterna"
             "l__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Behav"
             "iorRegistry::*)(const pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins &), pxrInternal__aap"
             "l__pxrReserved__::PlugNotice::DidRegisterPlugins>]";
    v14 = 0;
    v15 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10PlugNotice18DidRegisterPluginsE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v9);
    v4 = std::string::insert(&v9, 0, "notice type ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v10, " undefined in the TfType system");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v13, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_20C5C0E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5C0E88(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v9;
  char IsInvalid;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a2, v6, v7);
  if ((_DWORD)result)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v9);
    result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0)
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v9) == a3;
    }
  }
  return result;
}

uint64_t sub_20C5C0EFC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(a1 + 56))
    return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
  else
    return 0;
}

void *sub_20C5C0F38(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x68uLL);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_20C5C0AA4((uint64_t)v2, (_QWORD *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_20C5C0F88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C0F9C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry>::operator->() const [PtrTemplate = "
            "pxrInternal__aapl__pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
            ":_BehaviorRegistry]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9TfWeakPtrINS_12_GLOBAL__N_117_BehaviorRegistryEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20C5C1038(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C5C107C((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void sub_20C5C107C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 40));
  v4 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

uint64_t sub_20C5C10D8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this)
{
  uint64_t v4;
  char v5;

  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName(this, (unsigned int **)a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = 0;
  v5 = 0;
  sub_20C358448((uint64_t)&v4, (_QWORD *)a1, a1 + 8);
  *(_QWORD *)(a1 + 32) = bswap64(0x9E3779B97F4A7C55 * v4);
  return a1;
}

void sub_20C5C1150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  _QWORD *v12;
  void **v13;
  void **v14;
  unsigned int *v16;
  unsigned int v17;

  v14 = v13;
  a12 = v14;
  sub_20BEEB2B8(&a12);
  if ((*v12 & 7) != 0)
  {
    v16 = (unsigned int *)(*v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(a1);
}

void sub_20C5C118C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  unsigned __int8 v29;
  uint64_t *EmptyString;
  __int128 v31;
  _QWORD *v32;
  _QWORD *i;
  const std::string::value_type **v34;
  std::string::size_type v35;
  std::string *v36;
  uint64_t *v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *p_dst;
  _QWORD v42[3];
  const char *v43;
  char v44;
  std::string __dst;

  v42[0] = 0;
  *(_WORD *)((char *)&v43 + 1) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v42, (unint64_t *)(a1 + 8), 1);
  v7 = (_QWORD *)(a1 + 16);
  v8 = a2[4];
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = a2[4];
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*v7 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_20C5C160C(v13 + 2, a2))
            {
              v28 = sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v42);
              v42[0] = "usdShade/connectableAPIBehavior.cpp";
              v42[1] = "RegisterBehaviorForPrimTypeId";
              v42[2] = 469;
              v43 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry::RegisterBehaviorFor"
                    "PrimTypeId(const _PrimTypeId &, const SharedConnectableAPIBehaviorPtr &)";
              v44 = 0;
              v29 = atomic_load((unsigned __int8 *)&qword_25498A640);
              if ((v29 & 1) == 0)
              {
                v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)__cxa_guard_acquire(&qword_25498A640);
                if ((_DWORD)v28)
                {
                  sub_20BDDC0E4(&qword_25498A648, ";");
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25498A648, &dword_20BDBC000);
                  qword_25498A638 = (uint64_t)&qword_25498A648;
                  __cxa_guard_release(&qword_25498A640);
                }
              }
              if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
                EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
              if (*((char *)EmptyString + 23) < 0)
              {
                sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
              }
              else
              {
                v31 = *(_OWORD *)EmptyString;
                __dst.__r_.__value_.__r.__words[2] = EmptyString[2];
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
              }
              v32 = (_QWORD *)a2[1];
              for (i = (_QWORD *)a2[2]; v32 != i; ++v32)
              {
                if (byte_25498A65F >= 0)
                  v34 = (const std::string::value_type **)&qword_25498A638;
                else
                  v34 = (const std::string::value_type **)&qword_25498A648;
                if (byte_25498A65F >= 0)
                  v35 = byte_25498A65F;
                else
                  v35 = qword_25498A650;
                v36 = std::string::append(&__dst, *v34, v35);
                if ((*v32 & 0xFFFFFFFFFFFFFFF8) != 0)
                  v37 = (uint64_t *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 16);
                else
                  v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v36);
                v38 = *((char *)v37 + 23);
                if (v38 >= 0)
                  v39 = (const std::string::value_type *)v37;
                else
                  v39 = (const std::string::value_type *)*v37;
                if (v38 >= 0)
                  v40 = *((unsigned __int8 *)v37 + 23);
                else
                  v40 = v37[1];
                std::string::append(&__dst, v39, v40);
              }
              p_dst = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v42, 1, (pxrInternal__aapl__pxrReserved__ *)"UsdShade Connectable behavior already registered for primTypeId comprised of '%s' type and apischemas.", (const char *)p_dst);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              return;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = operator new(0x48uLL);
  v16 = (_QWORD *)(a1 + 32);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  __dst.__r_.__value_.__l.__size_ = a1 + 32;
  __dst.__r_.__value_.__s.__data_[16] = 0;
  *v15 = 0;
  v15[1] = v8;
  sub_20C5C1878(v15 + 2, a2);
  v17 = a3[1];
  v15[7] = *a3;
  v15[8] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v21 = *(float *)(a1 + 48);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_20C5C1680(a1 + 16, v25);
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v26 = *(_QWORD **)(*v7 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)__dst.__r_.__value_.__l.__data_ = *v26;
    *v26 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    *(_QWORD *)__dst.__r_.__value_.__l.__data_ = *v16;
    *v16 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(*v7 + 8 * v3) = v16;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v27 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v27 >= v9)
          v27 %= v9;
      }
      else
      {
        v27 &= v9 - 1;
      }
      *(_QWORD *)(*v7 + 8 * v27) = __dst.__r_.__value_.__r.__words[0];
    }
  }
  __dst.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a1 + 40);
  sub_20C5C1038((uint64_t)&__dst);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v42);
}

void sub_20C5C15B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_guard_abort(&qword_25498A640);
  _Unwind_Resume(a1);
}

BOOL sub_20C5C160C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    return 0;
  v3 = a1[1];
  v2 = a1[2];
  v4 = (uint64_t *)a2[1];
  if (v2 - v3 != a2[2] - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = (*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    v8 = (*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

void sub_20C5C1680(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_20BDDF5B4();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t *sub_20C5C1878(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_20BFE538C(a1 + 1, (uint64_t *)a2[1], (uint64_t *)a2[2], (a2[2] - a2[1]) >> 3);
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_20C5C1918(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;

  v1 = (unsigned __int8 *)(result + 56);
  while (1)
  {
    v2 = atomic_load(v1);
    if ((v2 & 1) != 0)
      break;
    result = sched_yield();
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *sub_20C5C1948(uint64_t a1, uint64_t *a2, unsigned int *a3, pxrInternal__aapl__pxrReserved__::UsdPrim *a4)
{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  const pxrInternal__aapl__pxrReserved__::TfType *v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v15;
  const std::type_info *v16;
  char *v17;
  char v18;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  void **v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v42;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v43;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  unint64_t Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v59;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v65;
  uint64_t *v66;
  void **v67;
  unint64_t v68;
  _QWORD v69[3];
  unint64_t v70;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v71;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v72;
  uint64_t v73;
  __int16 v74;
  void *__p;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v76;
  uint64_t v77;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v78;
  std::__shared_weak_count *v79;
  unsigned int *v80;
  void **v81[2];
  char v82;

  v80 = a3;
  v78 = 0;
  v79 = 0;
  if (sub_20C5C20F4((unint64_t *)a1, a2, &v78))
  {
    v8 = v78;
    goto LABEL_106;
  }
  v9 = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v68);
  if (v80 == (unsigned int *)v68)
  {
    v12 = (*a2 & 0xFFFFFFFFFFFFFFF8) != 0
        ? (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16)
        : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    v80 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)v12, v10, v11);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v68);
    if (v80 == (unsigned int *)v68 && a2[1] == a2[2])
    {
      v8 = 0;
      goto LABEL_106;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v68);
  v65 = a4;
  v66 = a2;
  if (v80 == (unsigned int *)v68)
  {
    v18 = 0;
LABEL_86:
    if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAbstract((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v80, v13))
    {
      v71 = 0;
      v72 = 0;
      v73 = 0;
    }
    else if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v65, v51))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(v65, v52, &v71);
    }
    else
    {
      Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
      if (!Instance)
        Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v80, (unsigned int **)&v68);
      if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsConcrete((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v80, v54))
      {
        v55 = sub_20BF2B2B4((_QWORD *)(Instance + 32), &v68);
      }
      else
      {
        v55 = sub_20BF2B2B4((_QWORD *)(Instance + 72), &v68);
      }
      v56 = v55[3];
      v72 = 0;
      v73 = 0;
      v71 = 0;
      sub_20BFE538C(&v71, *(uint64_t **)(v56 + 56), *(uint64_t **)(v56 + 64), (uint64_t)(*(_QWORD *)(v56 + 64) - *(_QWORD *)(v56 + 56)) >> 3);
      if ((v68 & 7) != 0)
      {
        v57 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
    }
    v60 = v71;
    v59 = v72;
    while (v60 != v59)
    {
      if (sub_20C5C2714((unint64_t *)a1, v60, &v78))
        goto LABEL_104;
      v60 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v60 + 8);
    }
    if (!v78
      || (v68 = (unint64_t)"usdShade/connectableAPIBehavior.cpp",
          v69[0] = "_GetBehaviorForPrimTypeId",
          v69[1] = 702,
          v69[2] = "const UsdShadeConnectableAPIBehavior *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Behav"
                   "iorRegistry::_GetBehaviorForPrimTypeId(const _PrimTypeId &, TfType, const UsdPrim &)",
          LOBYTE(v70) = 0,
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v68, "!behavior", 0)))
    {
      if ((v18 & 1) == 0)
LABEL_104:
        sub_20C5C118C(a1, v66, &v78);
    }
    v8 = v78;
    v68 = (unint64_t)&v71;
    sub_20BEEB2B8((void ***)&v68);
    goto LABEL_106;
  }
  __p = 0;
  v76 = 0;
  v77 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v80, &__p, v14);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__p;
  v15 = v76;
  while (1)
  {
    if (v8 == v15)
    {
      v18 = 0;
      goto LABEL_66;
    }
    if ((sub_20C5C2220((unint64_t *)a1, v8, &v78) & 1) != 0)
      break;
    if (sub_20C5C22E0((char *)v8, v16, v17))
    {
      if ((sub_20C5C2220((unint64_t *)a1, v8, &v78) & 1) == 0)
        sub_20C5C2510(a1, (uint64_t *)v8, &v78);
      break;
    }
    v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v8 + 8);
  }
  v71 = 0;
  v74 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)&v71, (unint64_t *)(a1 + 8), 1);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__p;
  if (v8 != __p)
  {
    v20 = (_QWORD *)(a1 + 16);
    v67 = (void **)(a1 + 32);
    do
    {
      sub_20C5C10D8((uint64_t)&v68, v19);
      v21 = v70;
      v22 = *(_QWORD *)(a1 + 24);
      if (v22)
      {
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
        v23.i16[0] = vaddlv_u8(v23);
        v24 = v23.u32[0];
        if (v23.u32[0] > 1uLL)
        {
          v4 = v70;
          if (v70 >= v22)
            v4 = v70 % v22;
        }
        else
        {
          v4 = (v22 - 1) & v70;
        }
        v25 = *(_QWORD **)(*v20 + 8 * v4);
        if (v25)
        {
          v26 = (_QWORD *)*v25;
          if (*v25)
          {
            do
            {
              v27 = v26[1];
              if (v27 == v21)
              {
                if (sub_20C5C160C(v26 + 2, &v68))
                  goto LABEL_61;
              }
              else
              {
                if (v24 > 1)
                {
                  if (v27 >= v22)
                    v27 %= v22;
                }
                else
                {
                  v27 &= v22 - 1;
                }
                if (v27 != v4)
                  break;
              }
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
        }
      }
      v28 = operator new(0x48uLL);
      v81[0] = (void **)v28;
      v81[1] = (void **)(a1 + 32);
      v82 = 0;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = v21;
      sub_20C5C1878((uint64_t *)v28 + 2, (uint64_t *)&v68);
      v29 = v79;
      *((_QWORD *)v28 + 7) = v78;
      *((_QWORD *)v28 + 8) = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      v82 = 1;
      v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
      v33 = *(float *)(a1 + 48);
      if (!v22 || (float)(v33 * (float)v22) < v32)
      {
        v34 = (v22 & (v22 - 1)) != 0;
        if (v22 < 3)
          v34 = 1;
        v35 = v34 | (2 * v22);
        v36 = vcvtps_u32_f32(v32 / v33);
        if (v35 <= v36)
          v37 = v36;
        else
          v37 = v35;
        sub_20C5C1680(a1 + 16, v37);
        v22 = *(_QWORD *)(a1 + 24);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v21 >= v22)
            v4 = v21 % v22;
          else
            v4 = v21;
        }
        else
        {
          v4 = (v22 - 1) & v21;
        }
      }
      v38 = *(void ***)(*v20 + 8 * v4);
      if (v38)
      {
        *v81[0] = *v38;
        *v38 = v81[0];
      }
      else
      {
        *v81[0] = *v67;
        *v67 = v81[0];
        *(_QWORD *)(*v20 + 8 * v4) = v67;
        if (*v81[0])
        {
          v39 = *((_QWORD *)*v81[0] + 1);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v39 >= v22)
              v39 %= v22;
          }
          else
          {
            v39 &= v22 - 1;
          }
          *(void ***)(*v20 + 8 * v39) = v81[0];
        }
      }
      v81[0] = 0;
      ++*(_QWORD *)(a1 + 40);
      sub_20C5C1038((uint64_t)v81);
LABEL_61:
      v81[0] = (void **)v69;
      sub_20BEEB2B8(v81);
      if ((v68 & 7) != 0)
      {
        v40 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      v19 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v19 + 8);
    }
    while (v8 != v19);
  }
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v71);
  v18 = 1;
LABEL_66:
  v42 = v78;
  if (v78)
  {
    v44 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v66[1];
    v43 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v66[2];
    while (v44 != v43)
    {
      v68 = 0;
      v69[0] = 0;
      if (sub_20C5C2714((unint64_t *)a1, v44, &v68))
      {
        sub_20BDE881C(&v78, (uint64_t *)&v68);
        sub_20C5C118C(a1, v66, &v78);
        v48 = (std::__shared_weak_count *)v69[0];
        if (v69[0])
        {
          v49 = (unint64_t *)(v69[0] + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        break;
      }
      v45 = (std::__shared_weak_count *)v69[0];
      if (v69[0])
      {
        v46 = (unint64_t *)(v69[0] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v44 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v44 + 8);
    }
    v8 = v78;
  }
  if (__p)
  {
    v76 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__p;
    operator delete(__p);
  }
  if (!v42)
    goto LABEL_86;
LABEL_106:
  v61 = v79;
  if (v79)
  {
    v62 = (unint64_t *)&v79->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v8;
}

void sub_20C5C1FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  a13 = &a18;
  sub_20BEEB2B8((void ***)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C20F4(unint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  __int16 v17;

  v16[0] = 0;
  v17 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v16, a1 + 1, 0);
  v6 = (int8x8_t)a1[3];
  if (!*(_QWORD *)&v6)
    goto LABEL_17;
  v7 = a2[4];
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = a2[4];
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(_QWORD **)(a1[2] + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_17:
    v15 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v12[1];
    if (v7 == v13)
      break;
    if (v9 > 1)
    {
      if (v13 >= *(_QWORD *)&v6)
        v13 %= *(_QWORD *)&v6;
    }
    else
    {
      v13 &= *(_QWORD *)&v6 - 1;
    }
    if (v13 != v10)
      goto LABEL_17;
LABEL_16:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_17;
  }
  if (!sub_20C5C160C(v12 + 2, a2))
    goto LABEL_16;
  sub_20BDE881C(a3, v12 + 7);
  v15 = 1;
LABEL_18:
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v16);
  return v15;
}

uint64_t sub_20C5C2220(unint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  sub_20C5C10D8((uint64_t)&v9, a2);
  v5 = sub_20C5C20F4(a1, &v9, a3);
  v11 = (void **)&v10;
  sub_20BEEB2B8(&v11);
  if ((v9 & 7) != 0)
  {
    v6 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return v5;
}

void sub_20C5C22A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;

  a14 = (void **)(v14 + 8);
  sub_20BEEB2B8(&a14);
  if ((a9 & 7) != 0)
  {
    v16 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C22E0(char *a1, const std::type_info *a2, char *a3)
{
  uint64_t *v4;
  char *v5;
  uint64_t IsA;
  const std::type_info *v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t *);
  char v13;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t TypeName;
  const char *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *__p[2];
  uint64_t v27;
  const char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  std::__shared_weak_count *v33;

  IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v4, v5);
  if ((IsA & 1) == 0)
  {
    IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v9, v10);
    if (!(_DWORD)IsA)
      return 0;
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance((pxrInternal__aapl__pxrReserved__::PlugRegistry *)IsA);
  v11 = *(_QWORD *)a1;
  sub_20BDDC0E4(__p, "providesUsdShadeConnectableAPIBehavior");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v11, (const void **)__p, (pxrInternal__aapl__pxrReserved__::JsValue *)v32);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v32)
    && pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v32))
  {
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(_QWORD *)a1, &v30);
    v12 = sub_20BF46110(&v30);
    if (v13 & 1 | (unint64_t)v12)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v30);
      v15 = pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v14);
    }
    else
    {
      __p[0] = "usdShade/connectableAPIBehavior.cpp";
      __p[1] = "_LoadPluginDefiningBehaviorForType";
      v27 = 738;
      v28 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry::_LoadPluginDefiningBehavior"
            "ForType(const TfType &) const";
      v29 = 0;
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
      if (*(char *)(TypeName + 23) >= 0)
        v21 = (const char *)TypeName;
      else
        v21 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not find plugin for '%s'", v21);
      v15 = 0;
    }
    v22 = v31;
    if (v31)
    {
      v23 = (unsigned int *)(v31 + 8);
      do
      {
        v24 = __ldxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_20C5C24A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19)
{
  uint64_t v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (a19)
  {
    v21 = a19 + 2;
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(unsigned int *))(*(_QWORD *)a19 + 8))(a19);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v19 - 48));
  _Unwind_Resume(a1);
}

void sub_20C5C2510(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v21;
  _BYTE v22[8];
  std::__shared_weak_count *v23;

  v6 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20BDDC0E4(__p, "isUsdShadeContainer");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v6);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(*a2, (const void **)__p, (pxrInternal__aapl__pxrReserved__::JsValue *)v22);
  v7 = pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v22)
    && pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v22);
  v8 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v11 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20BDDC0E4(__p, "requiresUsdShadeEncapsulation");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v11);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(*a2, (const void **)__p, (pxrInternal__aapl__pxrReserved__::JsValue *)v22);
  v12 = !pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v22)
     || pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v22);
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v16 = operator new(0x10uLL);
  *(_QWORD *)v16 = off_24C53D670;
  v16[8] = v7;
  v16[9] = v12;
  sub_20C5C2794(__p, (uint64_t)v16);
  sub_20BDE82DC((uint64_t)a3, (__int128 *)__p);
  v17 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_20C5C0064(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)a2, a3);
}

void sub_20C5C26E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C2714(unint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, _QWORD *a3)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t result;
  uint64_t APITypeFromSchemaTypeName;

  APITypeFromSchemaTypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPITypeFromSchemaTypeName(this, this);
  if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&APITypeFromSchemaTypeName, v5) != 5)return 0;
  result = sub_20C5C22E0((char *)&APITypeFromSchemaTypeName, v6, v7);
  if ((_DWORD)result)
  {
    if ((sub_20C5C2220(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&APITypeFromSchemaTypeName, a3) & 1) == 0)
      sub_20C5C2510((uint64_t)a1, &APITypeFromSchemaTypeName, a3);
    return 1;
  }
  return result;
}

_QWORD *sub_20C5C2794(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C53D750;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C5C27DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C5C2800(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5C2814(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5C282C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53D7A0))
    return a1 + 24;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::~UsdShadeCoordSysAPI(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  const char *Text;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v6 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    v24 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsCoordSysAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, v7) & 1) != 0)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v23);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (uint64_t)&v25);
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
      *(_QWORD *)a3 = off_24C53D7C8;
      if ((v28 & 7) != 0)
      {
        v10 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v25 = "usdShade/coordSysAPI.cpp";
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
      v27 = 63;
      v28 = (unint64_t)"static UsdShadeCoordSysAPI pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get(cons"
                              "t UsdStagePtr &, const SdfPath &)";
      v29 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid coordSys path <%s>.", Text);
      LODWORD(v25) = 1;
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
      v28 = 0;
      v23 = 0;
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v23);
      *(_QWORD *)a3 = off_24C53D7C8;
      if ((v23 & 7) != 0)
      {
        v17 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v28 & 7) != 0)
      {
        v19 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
    }
    if ((v24 & 7) != 0)
    {
      v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else
  {
    v25 = "usdShade/coordSysAPI.cpp";
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v27 = 58;
    v28 = (unint64_t)"static UsdShadeCoordSysAPI pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get(const "
                            "UsdStagePtr &, const SdfPath &)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v25) = 1;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
    v28 = 0;
    v24 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
    *(_QWORD *)a3 = off_24C53D7C8;
    if ((v24 & 7) != 0)
    {
      v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    if ((v28 & 7) != 0)
    {
      v14 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
}

void sub_20C5C2B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a4);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  if ((a4 & 7) != 0)
  {
    v7 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsCoordSysAPIPath(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *Name;
  __int128 v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __p;
  char v31;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
    return 0;
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v28);
  v9 = *(_QWORD *)(v29 - 8);
  v27 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
    {
      v27 = v9 & 0xFFFFFFFFFFFFFFF8;
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v27, v8)&& (v12 = v28, (unint64_t)(v29 - (_QWORD)v28) >= 9)&& (*v12 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)sub_20C5C3204() & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C3204();
    if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    if (*((char *)EmptyString + 23) < 0)
      v18 = EmptyString[1];
    else
      v18 = *((unsigned __int8 *)EmptyString + 23);
    std::string::basic_string(&v25, &__p, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)a2 & 7;
    if (&v26 == (uint64_t *)a2)
    {
      if (v20)
      {
        v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    else
    {
      if (v20)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      *(_QWORD *)a2 = v26;
      v26 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v7 = 1;
    v9 = v27;
  }
  else
  {
    v7 = 0;
  }
  if ((v9 & 7) != 0)
  {
    v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  sub_20BEEB2B8((void ***)&v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_20C5C2E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;

  if (a14 < 0)
    operator delete(__p);
  if ((v25 & 7) != 0)
  {
    v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  __p = &a17;
  sub_20BEEB2B8((void ***)&__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;

  result = sub_20C37A850(a3, this, (uint64_t *)a2);
  *(_QWORD *)result = off_24C53D7C8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_25498A688, (uint64_t)&v8);
  v5 = v8;
  v6 = v9;
  if (v8 != v9)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C5C7A30(a2, this, v5);
      }
      else
      {
        sub_20C37A850(v7, this, v5);
        *(_QWORD *)v7 = off_24C53D7C8;
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  v10 = (void **)&v8;
  sub_20BEEB2B8(&v10);
}

void sub_20C5C2FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C37B438((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A690);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A690))
  {
    __cxa_guard_release(&qword_25498A690);
  }
  return &qword_25498A688;
}

void sub_20C5C3048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A690);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  uint64_t *EmptyString;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A678);
  if ((v2 & 1) == 0)
  {
    v5 = this;
    v6 = __cxa_guard_acquire(&qword_25498A678);
    this = v5;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v7)
        v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*((_QWORD *)v7 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)v7 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, v11);
      sub_20C374970(qword_25498A660, v11, 1uLL);
      if ((v11[0] & 7) != 0)
      {
        v9 = (unsigned int *)(v11[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_25498A660, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498A678);
      this = v5;
    }
  }
  v3 = (_QWORD *)qword_25498A660[0];
  if (qword_25498A660[0] != unk_25498A668)
  {
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v3 == (_QWORD *)unk_25498A668)
      {
        v3 = (_QWORD *)unk_25498A668;
        return v3 != (_QWORD *)unk_25498A668;
      }
    }
  }
  return v3 != (_QWORD *)unk_25498A668;
}

void sub_20C5C31C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a9 & 7) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  __cxa_guard_abort(&qword_25498A678);
  _Unwind_Resume(a1);
}

unint64_t sub_20C5C3204()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_25498A680);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "coordSys", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_25498A680))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A680))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A680);
  }
  return (unint64_t)v0;
}

void sub_20C5C334C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  return 6;
}

uint64_t sub_20C5C33B8(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  uint64_t TypeName;
  const char *v13;
  _QWORD v14[4];
  char v15;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v6);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  v14[0] = "usd/prim.h";
  v14[1] = "CanApplyAPI";
  v14[2] = 1059;
  v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaType"
           " = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI]";
  v15 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
  if (*(char *)(TypeName + 23) >= 0)
    v13 = (const char *)TypeName;
  else
    v13 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  if (sub_20C5C35CC(this, a2))
  {
    sub_20C37A850(a3, this, (uint64_t *)a2);
    *(_QWORD *)a3 = off_24C53D7C8;
  }
  else
  {
    v12 = 1;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
    v16 = 0;
    v11 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, &v11);
    *(_QWORD *)a3 = off_24C53D7C8;
    if ((v11 & 7) != 0)
    {
      v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
  }
}

void sub_20C5C3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C35CC(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI((pxrInternal__aapl__pxrReserved__ **)a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "ApplyAPI";
  v12[2] = 1188;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__aa"
           "pl__pxrReserved__::UsdShadeCoordSysAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A6A0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_25498A6A0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v3);
      byte_25498A698 = sub_20C35BD7C((char *)&qword_25498A688, v4, v5);
      __cxa_guard_release(&qword_25498A6A0);
    }
  }
  return byte_25498A698;
}

void sub_20C5C36EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A6A0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(this);
  return &qword_25498A688;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v8 = *((_QWORD *)EmptyString + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C5C38B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CreateBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v8 = *((_QWORD *)EmptyString + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 0, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C5C3AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A6C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A6C0))
  {
    qword_25498A6A8 = 0;
    unk_25498A6B0 = 0;
    qword_25498A6B8 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A6A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A6C0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A6E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A6E0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498A6C8 = 0;
    unk_25498A6D0 = 0;
    qword_25498A6D8 = 0;
    sub_20BFE538C(&qword_25498A6C8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A6C8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A6E0);
  }
  if (v1)
    return &qword_25498A6C8;
  else
    return &qword_25498A6A8;
}

void sub_20C5C3C40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A6E0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **SchemaAttributeNames;
  uint64_t **v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetSchemaAttributeNames(this);
  v7 = SchemaAttributeNames;
  v8 = *a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC9A6C((char **)a3, SchemaAttributeNames[1] - *SchemaAttributeNames);
    v10 = *v7;
    v11 = v7[1];
    if (*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
          v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v36);
        v15 = *(_QWORD **)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_20BDDF694();
          v19 = v14 - *(_QWORD *)a3;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          v35 = a3 + 16;
          if (v21)
            v22 = (char *)sub_20BDDF6A8(a3 + 16, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          v24 = &v22[8 * v21];
          v34 = v24;
          *(_QWORD *)v23 = v36;
          v17 = v23 + 8;
          v36 = 0;
          v33.i64[1] = (uint64_t)(v23 + 8);
          v26 = *(char **)a3;
          v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v23 - 1) = v27;
              v23 -= 8;
              *(_QWORD *)v25 = 0;
            }
            while (v25 != v26);
            v28 = *(int64x2_t *)a3;
            v17 = (_QWORD *)v33.i64[1];
            v24 = v34;
          }
          *(_QWORD *)a3 = v23;
          *(_QWORD *)(a3 + 8) = v17;
          v33 = v28;
          v29 = *(char **)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v24;
          v34 = v29;
          v32 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1EE98((uint64_t)&v32);
          v16 = v36;
        }
        else
        {
          v16 = 0;
          *v15 = v36;
          v17 = v15 + 1;
          v36 = 0;
        }
        *(_QWORD *)(a3 + 8) = v17;
        if ((v16 & 7) != 0)
        {
          v30 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    sub_20BFE538C((_QWORD *)a3, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
  }
}

void sub_20C5C3E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5C3EA8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1;
  __int128 v2;
  unsigned __int8 v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;
  int v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t *v12;
  void *__p[2];
  uint64_t v14;

  v1 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY);
    v1 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY);
  }
  if (*(char *)(v1 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v1, *(_QWORD *)(v1 + 8));
  }
  else
  {
    v2 = *(_OWORD *)v1;
    v14 = *(_QWORD *)(v1 + 16);
    *(_OWORD *)__p = v2;
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A6F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A6F0))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C4074();
    if ((*((_QWORD *)v6 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v6 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    if (sub_20BF772F0((unsigned __int8 *)__p, (unsigned __int8 *)EmptyString))
    {
      v8 = 0;
    }
    else
    {
      v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C4074();
      if ((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        v10 = (uint64_t *)((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      if (sub_20BF772F0((unsigned __int8 *)__p, (unsigned __int8 *)v10))
      {
        v8 = 1;
      }
      else
      {
        v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C4074();
        if ((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) != 0)
          v12 = (uint64_t *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        if (sub_20BF772F0((unsigned __int8 *)__p, (unsigned __int8 *)v12))
          v8 = 2;
        else
          v8 = 1;
      }
    }
    dword_25498A6E8 = v8;
    __cxa_guard_release(&qword_25498A6F0);
  }
  v4 = dword_25498A6E8;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_20C5C404C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_25498A6F0);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_20C5C4074()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  void **v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A6F8);
  if (!v0)
  {
    v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "Warn", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "True", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "False", 0);
    v4 = *(void ***)v0;
    v30 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v30 = (void **)v5;
    }
    v7 = (unsigned int *)*v2;
    v31 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v31 = v8;
    }
    v10 = (unsigned int *)*v3;
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 = v11;
    }
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    v13 = operator new(0x18uLL);
    v14 = 0;
    *((_QWORD *)v0 + 3) = v13;
    *((_QWORD *)v0 + 4) = v13;
    *((_QWORD *)v0 + 5) = v13 + 3;
    do
    {
      v15 = (unint64_t)(&v30)[v14];
      *v13 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
      ++v13;
    }
    while (v14 != 3);
    v18 = (void ***)&v33;
    *((_QWORD *)v0 + 4) = v13;
    do
    {
      v20 = (uint64_t)*--v18;
      v19 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    while (v18 != &v30);
    while (!__ldaxr(&qword_25498A6F8))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A6F8))
        return (unint64_t)v0;
    }
    __clrex();
    v30 = (void **)(v0 + 24);
    sub_20BEEB2B8(&v30);
    if ((*v3 & 7) != 0)
    {
      v24 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if ((*v2 & 7) != 0)
    {
      v26 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v28 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A6F8);
  }
  return (unint64_t)v0;
}

void sub_20C5C42F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3)
{
  _QWORD v3[4];
  char v4;

  v3[0] = "usdShade/coordSysAPI.cpp";
  v3[1] = "_WarnOnUseOfDeprecatedNonAppliedAPI";
  v3[2] = 297;
  v3[3] = "void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", a3, this);
}

_DWORD *pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  const char *Text;
  char *v3;
  int v5;
  int v6;
  _QWORD v7[4];
  char v8;

  v7[0] = "usdShade/coordSysAPI.cpp";
  v7[1] = "_WarnOnDeprecatedAsset";
  v7[2] = 306;
  v7[3] = "void pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset(const UsdPrim &)";
  v8 = 0;
  sub_20C348EEC((uint64_t)this, &v5);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v7, (pxrInternal__aapl__pxrReserved__ *)"Prim at path (%s) is using old style non-applied UsdShadeCoordSysAPI coordSys bindings. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v3, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C5C448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindings(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t *EmptyString;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t i;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  _DWORD *j;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  unint64_t v37;
  void **v38;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  int v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;

  v46 = 0uLL;
  v47 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_25498A708);
  if ((v3 & 1) == 0)
  {
    v29 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_25498A708);
    if ((_DWORD)v29)
    {
      dword_25498A700 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(v29);
      __cxa_guard_release(&qword_25498A708);
    }
  }
  if (dword_25498A700 == 2)
  {
    sub_20C35C4F8((uint64_t)&v38, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindingsForPrim((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v38, (uint64_t *)&v36);
    sub_20C5C7DA4((void **)&v46);
    v46 = v36;
    v47 = v37;
    v37 = 0;
    v36 = 0uLL;
    v31 = (unint64_t)&v36;
    sub_20C5C7CBC((void ***)&v31);
    if ((v42 & 7) != 0)
    {
      v6 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_20BFD265C(&v40);
    if (v39)
      sub_20C35C614(v39);
    v9 = *((_QWORD *)&v46 + 1);
    v8 = v46;
    if ((_QWORD)v46 != *((_QWORD *)&v46 + 1))
      goto LABEL_50;
    goto LABEL_15;
  }
  if (dword_25498A700 != 1)
  {
LABEL_15:
    sub_20C35C4F8((uint64_t)&v38, (uint64_t *)this + 1, (_DWORD *)this + 4);
    v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C3204();
    if ((*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v38, EmptyString, (uint64_t *)&v36);
    if ((v42 & 7) != 0)
    {
      v12 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_20BFD265C(&v40);
    if (v39)
      sub_20C35C614(v39);
    v14 = *((_QWORD *)&v36 + 1);
    for (i = v36; i != v14; i += 32)
    {
      sub_20C3AD860(i, (uint64_t)&v38);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v38, v16))
      {
        v18 = v43;
        for (j = v44; j != v18; sub_20BFD6F64((uint64_t)&v45, j))
          j -= 2;
        v44 = v18;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38, (uint64_t *)&v43))
        {
          if (v43 != v44)
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v38, (pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
            sub_20C348EEC((uint64_t)&v38, &v32);
            v19 = v43;
            sub_20BFD6E54(&v34, v43);
            sub_20BFD6EA4(&v35, v19 + 1);
            v20 = *((_QWORD *)&v46 + 1);
            if (*((_QWORD *)&v46 + 1) >= v47)
            {
              v21 = sub_20C5C7E10((uint64_t *)&v46, (uint64_t *)&v31);
            }
            else
            {
              sub_20C5C7F18((uint64_t)&v47, *((uint64_t *)&v46 + 1), (uint64_t *)&v31);
              v21 = v20 + 24;
            }
            *((_QWORD *)&v46 + 1) = v21;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
            sub_20BFD265C(&v34);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
            sub_20BFD265C(&v32);
            if ((v31 & 7) != 0)
            {
              v22 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
              do
                v23 = __ldxr(v22);
              while (__stlxr(v23 - 2, v22));
            }
          }
        }
      }
      if ((v42 & 7) != 0)
      {
        v24 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_20BFD265C(&v40);
      if (v39)
        sub_20C35C614(v39);
    }
    v38 = (void **)&v36;
    sub_20C37FA04(&v38);
    v9 = *((_QWORD *)&v46 + 1);
    v8 = v46;
    if ((_QWORD)v46 != *((_QWORD *)&v46 + 1) && dword_25498A700 == 2)
    {
      sub_20C35C4F8((uint64_t)&v38, (uint64_t *)this + 1, (_DWORD *)this + 4);
      pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset((pxrInternal__aapl__pxrReserved__ *)&v38, v26);
      if ((v42 & 7) != 0)
      {
        v27 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_20BFD265C(&v40);
      if (v39)
        sub_20C35C614(v39);
      v9 = *((_QWORD *)&v46 + 1);
      v8 = v46;
    }
LABEL_50:
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v47;
    v47 = 0;
    v46 = 0uLL;
    goto LABEL_51;
  }
  sub_20C35C4F8((uint64_t)&v38, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindingsForPrim((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v38, a2);
  if ((v42 & 7) != 0)
  {
    v4 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_20BFD265C(&v40);
  if (v39)
    sub_20C35C614(v39);
LABEL_51:
  v38 = (void **)&v43;
  sub_20BFD6F90(&v38);
  v38 = (void **)&v46;
  sub_20C5C7CBC(&v38);
}

void sub_20C5C4904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  __cxa_guard_abort(&qword_25498A708);
  a20 = (void **)&a24;
  sub_20BFD6F90(&a20);
  a20 = (void **)(v24 - 112);
  sub_20C5C7CBC(&a20);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindingsForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetBindingsForPrim(this, a2, 0);
}

void sub_20C5C4A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5C7CBC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C4A3C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetBindingsForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *a1, uint64_t *a2, int a3)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *HasAPI;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t *v24;
  uint64_t *v25;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _DWORD *v30;
  _DWORD *i;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  void **v50;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v5);
  HasAPI = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a1, SchemaInfo);
  if ((_DWORD)HasAPI)
  {
    v43 = a2;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(HasAPI);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_25498A688, (uint64_t)&v56);
    v8 = v56;
    v9 = v57;
    if (v56 != v57)
    {
      v42 = (uint64_t)(a2 + 2);
      do
      {
        v10 = *v8;
        if ((*v8 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            v10 &= 0xFFFFFFFFFFFFFFF8;
        }
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!EmptyString)
          EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        v14 = *((_QWORD *)EmptyString + 3);
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            v14 &= 0xFFFFFFFFFFFFFFF8;
        }
        v17 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v18 = (uint64_t)(v17 + 4);
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v18 = (uint64_t)EmptyString;
        }
        v19 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
          v20 = (uint64_t *)(v19 + 4);
        else
          v20 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v18, (uint64_t)v20, (uint64_t)&v55);
        if ((v14 & 7) != 0)
        {
          do
            v21 = __ldxr(v17);
          while (__stlxr(v21 - 2, v17));
        }
        if ((v10 & 7) != 0)
        {
          do
            v22 = __ldxr(v19);
          while (__stlxr(v22 - 2, v19));
        }
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t)&v50);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v50, v23))
        {
          if (a3)
          {
            v24 = (uint64_t *)*v43;
            v25 = (uint64_t *)v43[1];
            while (v24 != v25)
            {
              v26 = sub_20C398E78(&v50);
              pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v26, (uint64_t)&v45);
              v27 = *v24;
              v28 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
              if ((v45 & 7) != 0)
              {
                do
                  v29 = __ldxr(v28);
                while (__stlxr(v29 - 2, v28));
              }
              if ((unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8) == v28)
                goto LABEL_45;
              v24 += 3;
            }
          }
          v30 = v58;
          for (i = v59; i != v30; sub_20BFD6F64((uint64_t)&v60, i))
            i -= 2;
          v59 = v30;
          if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, (uint64_t *)&v58)&& v58 != v59)
          {
            v32 = sub_20C398E78(&v50);
            pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v32, (uint64_t)&v45);
            sub_20C348EEC((uint64_t)&v50, &v46);
            v33 = v58;
            sub_20BFD6E54(&v48, v58);
            sub_20BFD6EA4(&v49, v33 + 1);
            v34 = v43[1];
            if (v34 >= v43[2])
            {
              v35 = sub_20C5C7E10(v43, &v45);
            }
            else
            {
              sub_20C5C7F18(v42, v43[1], &v45);
              v35 = v34 + 24;
            }
            v43[1] = v35;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
            sub_20BFD265C(&v48);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
            sub_20BFD265C(&v46);
            if ((v45 & 7) != 0)
            {
              v36 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
              do
                v37 = __ldxr(v36);
              while (__stlxr(v37 - 2, v36));
            }
          }
        }
LABEL_45:
        if ((v54 & 7) != 0)
        {
          v38 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
        sub_20BFD265C(&v52);
        if (v51)
          sub_20C35C614(v51);
        if ((v55 & 7) != 0)
        {
          v40 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        ++v8;
      }
      while (v8 != v9);
    }
    v50 = (void **)&v56;
    sub_20BEEB2B8(&v50);
    v50 = (void **)&v58;
    sub_20BFD6F90(&v50);
  }
}

void sub_20C5C4E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;

  if ((v26 & 7) != 0)
  {
    v29 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  a21 = (void **)&a26;
  sub_20BEEB2B8(&a21);
  a21 = (void **)(v27 - 112);
  sub_20BFD6F90(&a21);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  uint64_t *v6;
  std::string __p;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v6 = (uint64_t *)((*((_QWORD *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v6, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 3);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = *((_QWORD *)EmptyString + 3);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v11 = (uint64_t)(v10 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v11 = (uint64_t)EmptyString;
  }
  v12 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v13 = (uint64_t *)(v12 + 4);
  else
    v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v11, (uint64_t)v13, (uint64_t)&v18);
  if ((v7 & 7) != 0)
  {
    do
      v14 = __ldxr(v10);
    while (__stlxr(v14 - 2, v10));
  }
  if ((v3 & 7) != 0)
  {
    do
      v15 = __ldxr(v12);
    while (__stlxr(v15 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v18, a2);
  if ((v18 & 7) != 0)
  {
    v16 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
}

void sub_20C5C4FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  int *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void **v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;

  *(_QWORD *)a2 = 0;
  v4 = (int *)(a2 + 12);
  v5 = (int *)(a2 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  v25 = 0;
  v26 = 0;
  v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingRel(this, (uint64_t)&v20);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20, v6)&& pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20, (uint64_t *)&v25)&& v25 != v26)
  {
    v7 = sub_20C398E78(&v20);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v7, (uint64_t)&v15);
    sub_20C348EEC((uint64_t)&v20, &v16);
    v8 = v25;
    sub_20BFD6E54(&v18, v25);
    sub_20BFD6EA4(&v19, v8 + 1);
    if (&v15 != (uint64_t *)a2)
    {
      if ((*(_QWORD *)a2 & 7) != 0)
      {
        v9 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      *(_QWORD *)a2 = v15;
      v15 = 0;
    }
    sub_20BFD3EBC(v5, &v16);
    sub_20BFD3F10(v4, &v17);
    sub_20BFD3EBC((int *)(a2 + 16), &v18);
    sub_20BFD3F10((int *)(a2 + 20), &v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_20BFD265C(&v16);
    if ((v15 & 7) != 0)
    {
      v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  if ((v24 & 7) != 0)
  {
    v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (v21)
    sub_20C35C614(v21);
  v20 = (void **)&v25;
  sub_20BFD6F90(&v20);
}

void sub_20C5C5220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;

  if ((a9 & 7) != 0)
  {
    v18 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  sub_20C377F1C((uint64_t)&a12);
  a9 = (unint64_t)&a16;
  sub_20BFD6F90((void ***)&a9);
  sub_20C5C4A3C(v16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritance(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t *EmptyString;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  uint64_t *i;
  uint64_t *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _DWORD *j;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__ *v47;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v48;
  unsigned int *v49;
  unsigned int v50;
  pxrInternal__aapl__pxrReserved__ *v51;
  _DWORD *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void **v60;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v61;
  int v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68[3];
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  void **v72;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v73;
  int v74;
  int v75;
  uint64_t v76;
  _QWORD v77[3];
  __int128 v78;
  unint64_t v79;

  v78 = 0uLL;
  v79 = 0;
  memset(v77, 0, sizeof(v77));
  v4 = atomic_load((unsigned __int8 *)&qword_25498A718);
  if ((v4 & 1) == 0)
  {
    v51 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_25498A718);
    if ((_DWORD)v51)
    {
      dword_25498A710 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(v51);
      __cxa_guard_release(&qword_25498A718);
    }
  }
  if (dword_25498A710 == 2)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v72, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(v8, (uint64_t *)&v65);
    sub_20C5C7DA4((void **)&v78);
    v78 = v65;
    v79 = v66;
    v66 = 0;
    v65 = 0uLL;
    v60 = (void **)&v65;
    sub_20C5C7CBC(&v60);
    if ((v76 & 7) != 0)
    {
      v9 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
    sub_20BFD265C(&v74);
    if (v73)
      sub_20C35C614(v73);
    if ((_QWORD)v78 != *((_QWORD *)&v78 + 1))
    {
      *(_OWORD *)a2 = v78;
      a2[2] = v79;
LABEL_81:
      v79 = 0;
      v78 = 0uLL;
      goto LABEL_82;
    }
LABEL_16:
    v53 = (uint64_t *)((char *)this + 8);
    v54 = a2;
    v52 = (_DWORD *)((char *)this + 16);
    sub_20C35C4F8((uint64_t)&v72, (uint64_t *)this + 1, (_DWORD *)this + 4);
    while ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v72, v11) & 1) != 0)
    {
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C3204();
      if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v72, EmptyString, v68);
      v14 = v68[0];
      v15 = v68[1];
      while (v14 != v15)
      {
        LODWORD(v65) = *(_DWORD *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        *((_QWORD *)&v65 + 1) = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 48);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        sub_20BFD6E54(&v66, (_DWORD *)(v14 + 16));
        sub_20BFD6EA4((_DWORD *)&v66 + 1, (_DWORD *)(v14 + 20));
        v19 = *(_QWORD *)(v14 + 24);
        v67 = v19;
        if ((v19 & 7) != 0)
        {
          v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 2, v20));
          if ((v21 & 1) == 0)
            v67 &= 0xFFFFFFFFFFFFFFF8;
        }
        sub_20C3AD860((uint64_t)&v65, (uint64_t)&v60);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v60, v22))
        {
          v24 = (uint64_t *)*((_QWORD *)&v78 + 1);
          for (i = (uint64_t *)v78; i != v24; i += 3)
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v60, (pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
            v25 = *i;
            v26 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
            if ((v55 & 7) != 0)
            {
              do
                v27 = __ldxr(v26);
              while (__stlxr(v27 - 2, v26));
            }
            if ((unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8) == v26)
              goto LABEL_49;
          }
          v29 = v69;
          for (j = v70; j != v29; sub_20BFD6F64((uint64_t)&v71, j))
            j -= 2;
          v70 = v29;
          if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v60, (uint64_t *)&v69)&& v69 != v70)
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v60, (pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
            sub_20C348EEC((uint64_t)&v60, &v56);
            v30 = v69;
            sub_20BFD6E54(&v58, v69);
            sub_20BFD6EA4(&v59, v30 + 1);
            v31 = *((_QWORD *)&v78 + 1);
            if (*((_QWORD *)&v78 + 1) >= v79)
            {
              v32 = sub_20C5C7E10((uint64_t *)&v78, &v55);
            }
            else
            {
              sub_20C5C7F18((uint64_t)&v79, *((uint64_t *)&v78 + 1), &v55);
              v32 = v31 + 24;
            }
            *((_QWORD *)&v78 + 1) = v32;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
            sub_20BFD265C(&v58);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
            sub_20BFD265C(&v56);
            if ((v55 & 7) != 0)
            {
              v33 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
              do
                v34 = __ldxr(v33);
              while (__stlxr(v34 - 2, v33));
            }
          }
        }
LABEL_49:
        if ((v64 & 7) != 0)
        {
          v35 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
        sub_20BFD265C(&v62);
        if (v61)
          sub_20C35C614(v61);
        if ((v67 & 7) != 0)
        {
          v37 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
        sub_20BFD265C(&v66);
        if (*((_QWORD *)&v65 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v65 + 1));
        v14 += 32;
      }
      *(_QWORD *)&v65 = v68;
      sub_20C37FA04((void ***)&v65);
      *(_QWORD *)&v65 = &v69;
      sub_20BFD6F90((void ***)&v65);
      sub_20C3AD22C((uint64_t)&v72, (uint64_t)&v65);
      LODWORD(v72) = v65;
      v39 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)&v65 + 1);
      *((_QWORD *)&v65 + 1) = 0;
      v40 = v73;
      v73 = v39;
      if (v40)
        sub_20C35C614(v40);
      sub_20BFD3EBC(&v74, (int *)&v66);
      sub_20BFD3F10(&v75, (int *)&v66 + 1);
      if ((v76 & 7) != 0)
      {
        v41 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      v76 = v67;
      v67 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
      sub_20BFD265C(&v66);
      if (*((_QWORD *)&v65 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v65 + 1));
    }
    if ((v76 & 7) != 0)
    {
      v43 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
    sub_20BFD265C(&v74);
    if (v73)
      sub_20C35C614(v73);
    v46 = *((_QWORD *)&v78 + 1);
    v45 = v78;
    if ((_QWORD)v78 != *((_QWORD *)&v78 + 1) && dword_25498A710 == 2)
    {
      v47 = (pxrInternal__aapl__pxrReserved__ *)sub_20C35C4F8((uint64_t)&v72, v53, v52);
      pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset(v47, v48);
      if ((v76 & 7) != 0)
      {
        v49 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
      sub_20BFD265C(&v74);
      if (v73)
        sub_20C35C614(v73);
      v46 = *((_QWORD *)&v78 + 1);
      v45 = v78;
    }
    *v54 = v45;
    v54[1] = v46;
    v54[2] = v79;
    goto LABEL_81;
  }
  if (dword_25498A710 != 1)
    goto LABEL_16;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v72, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(v5, a2);
  if ((v76 & 7) != 0)
  {
    v6 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
  sub_20BFD265C(&v74);
  if (v73)
    sub_20C35C614(v73);
LABEL_82:
  v72 = (void **)v77;
  sub_20BFD6F90(&v72);
  v72 = (void **)&v78;
  sub_20C5C7CBC(&v72);
}

void sub_20C5C58BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25498A718);
  *(_QWORD *)(v1 - 168) = v1 - 136;
  sub_20BFD6F90((void ***)(v1 - 168));
  *(_QWORD *)(v1 - 168) = v1 - 112;
  sub_20C5C7CBC((void ***)(v1 - 168));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  unint64_t *v6;
  unint64_t v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v23 = *(_DWORD *)this;
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  v24 = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BFD6E54(&v25, (_DWORD *)this + 4);
  sub_20BFD6EA4(&v26, (_DWORD *)this + 5);
  v9 = *((_QWORD *)this + 3);
  v27 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  while ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v23, v8) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetBindingsForPrim((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v23, a2, 1);
    sub_20C3AD22C((uint64_t)&v23, (uint64_t)&v18);
    v23 = v18;
    v12 = v19;
    v19 = 0;
    v13 = v24;
    v24 = v12;
    if (v13)
      sub_20C35C614(v13);
    sub_20BFD3EBC(&v25, &v20);
    sub_20BFD3F10(&v26, &v21);
    if ((v27 & 7) != 0)
    {
      v14 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    v27 = v22;
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_20BFD265C(&v20);
    if (v19)
      sub_20C35C614(v19);
  }
  if ((v27 & 7) != 0)
  {
    v16 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
}

void sub_20C5C5B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  sub_20C5C7CBC((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingWithInheritance(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t IsDefined;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  const pxrInternal__aapl__pxrReserved__::TfType *v24;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  BOOL HasAPIInstance;
  unsigned int *v27;
  unsigned int v28;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v36;
  _DWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int *v53;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v54;
  int v55;
  int v56;
  uint64_t v57;
  void **v58;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)a2 = 0;
  v4 = (int *)(a2 + 12);
  v5 = (int *)(a2 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  v6 = *((_QWORD *)this + 3);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v10 = *((_QWORD *)EmptyString + 3);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = (uint64_t)(v13 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v14 = (uint64_t)EmptyString;
  }
  v15 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    v16 = (uint64_t *)(v15 + 4);
  else
    v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v14, (uint64_t)v16, (uint64_t)&v63);
  if ((v10 & 7) != 0)
  {
    do
      v17 = __ldxr(v13);
    while (__stlxr(v17 - 2, v13));
  }
  if ((v6 & 7) != 0)
  {
    do
      v18 = __ldxr(v15);
    while (__stlxr(v18 - 2, v15));
  }
  sub_20C35C4F8((uint64_t)&v58, (uint64_t *)this + 1, (_DWORD *)this + 4);
  while (1)
  {
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v58, v19);
    if ((IsDefined & 1) == 0)
      break;
    v21 = (unsigned int *)*((_QWORD *)this + 3);
    v53 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v53 = v22;
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)IsDefined);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v24);
    HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v58, SchemaInfo, (pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
    if ((v53 & 7) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    if (HasAPIInstance)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v58, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v63, (uint64_t)&v53);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v53, v29)&& pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, (uint64_t *)&v64)&& v64 != v65)
      {
        v36 = sub_20C398E78(&v53);
        pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v36, (uint64_t)&v48);
        sub_20C348EEC((uint64_t)&v53, &v49);
        v37 = v64;
        sub_20BFD6E54(&v51, v64);
        sub_20BFD6EA4(&v52, v37 + 1);
        if (&v48 != (uint64_t *)a2)
        {
          if ((*(_QWORD *)a2 & 7) != 0)
          {
            v38 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
            do
              v39 = __ldxr(v38);
            while (__stlxr(v39 - 2, v38));
          }
          *(_QWORD *)a2 = v48;
          v48 = 0;
        }
        sub_20BFD3EBC(v5, &v49);
        sub_20BFD3F10(v4, &v50);
        sub_20BFD3EBC((int *)(a2 + 16), &v51);
        sub_20BFD3F10((int *)(a2 + 20), &v52);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
        sub_20BFD265C(&v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
        sub_20BFD265C(&v49);
        if ((v48 & 7) != 0)
        {
          v40 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        if ((v57 & 7) != 0)
        {
          v42 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
        sub_20BFD265C(&v55);
        if (v54)
          sub_20C35C614(v54);
        break;
      }
      if ((v57 & 7) != 0)
      {
        v30 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_20BFD265C(&v55);
      if (v54)
        sub_20C35C614(v54);
    }
    sub_20C3AD22C((uint64_t)&v58, (uint64_t)&v53);
    LODWORD(v58) = (_DWORD)v53;
    v32 = v54;
    v54 = 0;
    v33 = v59;
    v59 = v32;
    if (v33)
      sub_20C35C614(v33);
    sub_20BFD3EBC(&v60, &v55);
    sub_20BFD3F10(&v61, &v56);
    if ((v62 & 7) != 0)
    {
      v34 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    v62 = v57;
    v57 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
    sub_20BFD265C(&v55);
    if (v54)
      sub_20C35C614(v54);
  }
  if ((v62 & 7) != 0)
  {
    v44 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
  sub_20BFD265C(&v60);
  if (v59)
    sub_20C35C614(v59);
  if ((v63 & 7) != 0)
  {
    v46 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  v58 = (void **)&v64;
  sub_20BFD6F90(&v58);
}

void sub_20C5C6084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;

  if ((v21 & 7) != 0)
  {
    v24 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20C5C4A3C(v20);
  a20 = (void **)(v22 - 112);
  sub_20BFD6F90(&a20);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::HasLocalBindings(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  unsigned __int8 v2;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v3;
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v9;
  const pxrInternal__aapl__pxrReserved__::TfType *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  char HasAPI;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  _DWORD *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t *EmptyString;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unsigned int *v25;
  unsigned int v26;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__ *v33;
  _BYTE v34[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v42;
  int v43;
  int v44;
  uint64_t v45;

  v2 = atomic_load((unsigned __int8 *)&qword_25498A728);
  if ((v2 & 1) == 0)
  {
    v33 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_25498A728);
    if ((_DWORD)v33)
    {
      dword_25498A720 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(v33);
      __cxa_guard_release(&qword_25498A728);
    }
  }
  if (dword_25498A720 == 2)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v41, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v9);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v10);
    HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v41, SchemaInfo);
    if ((v45 & 7) != 0)
    {
      v13 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_20BFD265C(&v43);
    if (v42)
      sub_20C35C614(v42);
    if ((HasAPI & 1) != 0)
      return 1;
  }
  else if (dword_25498A720 == 1)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v41, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v3);
    v5 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v4);
    v6 = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v41, v5);
    if ((v45 & 7) != 0)
    {
      v7 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_20BFD265C(&v43);
    if (v42)
      sub_20C35C614(v42);
    return v6;
  }
  v15 = (uint64_t *)((char *)this + 8);
  v16 = (_DWORD *)((char *)this + 16);
  sub_20C35C4F8((uint64_t)&v41, v15, v16);
  v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C3204();
  if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v41, EmptyString, &v39);
  if ((v45 & 7) != 0)
  {
    v19 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
  sub_20BFD265C(&v43);
  if (v42)
    sub_20C35C614(v42);
  v21 = v39;
  v22 = v40;
  if (v39 == v40)
  {
LABEL_33:
    v6 = 0;
  }
  else
  {
    while (1)
    {
      sub_20C3AD860(v21, (uint64_t)&v41);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v41, v23))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v41, v24))break;
      }
      if ((v45 & 7) != 0)
      {
        v25 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
      sub_20BFD265C(&v43);
      if (v42)
        sub_20C35C614(v42);
      v21 += 32;
      if (v21 == v22)
        goto LABEL_33;
    }
    if (dword_25498A720 == 2)
    {
      sub_20C35C4F8((uint64_t)v34, v15, v16);
      pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset((pxrInternal__aapl__pxrReserved__ *)v34, v27);
      if ((v38 & 7) != 0)
      {
        v28 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
      sub_20BFD265C(&v36);
      if (v35)
        sub_20C35C614(v35);
    }
    if ((v45 & 7) != 0)
    {
      v30 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_20BFD265C(&v43);
    if (v42)
      sub_20C35C614(v42);
    v6 = 1;
  }
  v41 = (void **)&v39;
  sub_20C37FA04(&v41);
  return v6;
}

void sub_20C5C64E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A728);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::HasLocalBindingsForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v3);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v10;
  const pxrInternal__aapl__pxrReserved__::TfType *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  _BOOL4 HasAPIInstance;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *EmptyString;
  unsigned int *v19;
  unsigned int v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v28;
  _BYTE v29[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  pxrInternal__aapl__pxrReserved__::SdfPath **v39;

  v5 = this;
  v6 = atomic_load((unsigned __int8 *)&qword_25498A738);
  if ((v6 & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_25498A738);
    if ((_DWORD)this)
    {
      dword_25498A730 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(this);
      __cxa_guard_release(&qword_25498A738);
    }
  }
  if (dword_25498A730 == 2)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v34, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v10);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v11);
    HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v34, SchemaInfo, a2);
    if ((v37 & 7) != 0)
    {
      v14 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    this = v35;
    if (v35)
      sub_20C35C614(v35);
    if (HasAPIInstance)
    {
      sub_20C35C4F8((uint64_t)v29, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v29, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34);
      v7 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v34, a3);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
      if ((v33 & 7) != 0)
      {
        v16 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_20BFD265C(&v31);
      this = v30;
      if (v30)
        sub_20C35C614(v30);
      goto LABEL_21;
    }
  }
  else if (dword_25498A730 == 1)
  {
    sub_20C35C4F8((uint64_t)v29, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v29, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34);
    v7 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v34, a3);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
    if ((v33 & 7) != 0)
    {
      v8 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20BFD265C(&v31);
    if (v30)
      sub_20C35C614(v30);
    return v7;
  }
  v7 = 0;
LABEL_21:
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName((uint64_t)EmptyString, (uint64_t)&v28);
  sub_20C35C4F8((uint64_t)&v34, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v29);
  if ((v37 & 7) != 0)
  {
    v19 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
  sub_20BFD265C(&v36);
  if (v35)
    sub_20C35C614(v35);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v29, v21))
  {
    if (dword_25498A730 == 2)
    {
      v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usdShade/coordSysAPI.cpp";
      v35 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_WarnOnUseOfDeprecatedNonAppliedAPI";
      v36 = 297;
      v37 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
      v38 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v22, "UsdShadeCoordSysAPI::Bind");
    }
    sub_20C105C98(&v34, 1uLL, a3);
    v7 = v7 | pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v29, &v34);
    v39 = &v34;
    sub_20BFD6F90((void ***)&v39);
  }
  if ((v33 & 7) != 0)
  {
    v23 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  if ((v28 & 7) != 0)
  {
    v25 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  return v7;
}

void sub_20C5C6920(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A738);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8[3];
  _BYTE v9[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfPath **v14;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CreateBindingRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v3))
  {
    sub_20C105C98(v8, 1uLL, a2);
    v4 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v9, v8);
    v14 = v8;
    sub_20BFD6F90((void ***)&v14);
  }
  else
  {
    v4 = 0;
  }
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return v4;
}

void sub_20C5C6A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v5 - 24) = v4;
  sub_20BFD6F90((void ***)(v5 - 24));
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C3204();
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  if (*((char *)EmptyString + 23) >= 0)
    v6 = *((unsigned __int8 *)EmptyString + 23);
  else
    v6 = EmptyString[1];
  v7 = &v14;
  sub_20BDF6BDC((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)EmptyString + 23) >= 0)
      v8 = EmptyString;
    else
      v8 = (const void *)*EmptyString;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 58;
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a1;
  else
    v10 = *(const std::string::value_type **)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v12 = std::string::append(&v14, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v16 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_20C5C6BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ApplyAndBind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[32];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v9, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14);
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  v7 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v14);
  return v7;
}

void sub_20C5C6CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v10;
  const pxrInternal__aapl__pxrReserved__::TfType *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  _BOOL4 HasAPIInstance;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *EmptyString;
  unsigned int *v19;
  unsigned int v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v28;
  _BYTE v29[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v5 = this;
  v6 = atomic_load((unsigned __int8 *)&qword_25498A748);
  if ((v6 & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_25498A748);
    if ((_DWORD)this)
    {
      dword_25498A740 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(this);
      __cxa_guard_release(&qword_25498A748);
    }
  }
  if (dword_25498A740 == 2)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v34, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v10);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v11);
    HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v34, SchemaInfo, a2);
    if ((v37 & 7) != 0)
    {
      v14 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    this = v35;
    if (v35)
      sub_20C35C614(v35);
    if (HasAPIInstance)
    {
      sub_20C35C4F8((uint64_t)v29, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v29, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34);
      v7 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v34, a3);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
      if ((v33 & 7) != 0)
      {
        v16 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_20BFD265C(&v31);
      this = v30;
      if (v30)
        sub_20C35C614(v30);
      goto LABEL_21;
    }
  }
  else if (dword_25498A740 == 1)
  {
    sub_20C35C4F8((uint64_t)v29, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v29, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34);
    v7 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v34, a3);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
    if ((v33 & 7) != 0)
    {
      v8 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20BFD265C(&v31);
    if (v30)
      sub_20C35C614(v30);
    return v7;
  }
  v7 = 0;
LABEL_21:
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName((uint64_t)EmptyString, (uint64_t)&v28);
  sub_20C35C4F8((uint64_t)&v34, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t)v29);
  if ((v37 & 7) != 0)
  {
    v19 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
  sub_20BFD265C(&v36);
  if (v35)
    sub_20C35C614(v35);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v29, v21))
  {
    if (dword_25498A740 == 2)
    {
      v34 = "usdShade/coordSysAPI.cpp";
      v35 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_WarnOnUseOfDeprecatedNonAppliedAPI";
      v36 = 297;
      v37 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
      v38 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v22, "UsdShadeCoordSysAPI::ClearBinding");
    }
    v7 = v7 | pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v29, a3);
  }
  if ((v33 & 7) != 0)
  {
    v23 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  if ((v28 & 7) != 0)
  {
    v25 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  return v7;
}

void sub_20C5C704C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A748);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, int a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingRel(this, (uint64_t)&v8);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v8, v3))v4 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v8, a2);
  else
    v4 = 0;
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return v4;
}

void sub_20C5C718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C377F1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *v8;
  const pxrInternal__aapl__pxrReserved__::TfType *v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  _BOOL4 HasAPIInstance;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *EmptyString;
  unsigned int *v17;
  unsigned int v18;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  int v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::SdfPath *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  pxrInternal__aapl__pxrReserved__::SdfPath **v37;

  v3 = this;
  v4 = atomic_load((unsigned __int8 *)&qword_25498A758);
  if ((v4 & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_25498A758);
    if ((_DWORD)this)
    {
      dword_25498A750 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(this);
      __cxa_guard_release(&qword_25498A758);
    }
  }
  if (dword_25498A750 == 2)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_20C35C4F8((uint64_t)&v32, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v8);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A688, v9);
    HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v32, SchemaInfo, a2);
    if ((v35 & 7) != 0)
    {
      v12 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_20BFD265C(&v34);
    this = v33;
    if (v33)
      sub_20C35C614(v33);
    if (HasAPIInstance)
    {
      sub_20C35C4F8((uint64_t)v27, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v27, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32);
      v5 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v32);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v32);
      if ((v31 & 7) != 0)
      {
        v14 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_20BFD265C(&v29);
      this = v28;
      if (v28)
        sub_20C35C614(v28);
      goto LABEL_21;
    }
  }
  else if (dword_25498A750 == 1)
  {
    sub_20C35C4F8((uint64_t)v27, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v27, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32);
    v5 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v32);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v32);
    if ((v31 & 7) != 0)
    {
      v6 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    if (v28)
      sub_20C35C614(v28);
    return v5;
  }
  v5 = 0;
LABEL_21:
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName((uint64_t)EmptyString, (uint64_t)&v26);
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v27);
  if ((v35 & 7) != 0)
  {
    v17 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v27, v19))
  {
    if (dword_25498A750 == 2)
    {
      v32 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usdShade/coordSysAPI.cpp";
      v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_WarnOnUseOfDeprecatedNonAppliedAPI";
      v34 = 297;
      v35 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
      v36 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v20, "UsdShadeCoordSysAPI::BlockBinding");
    }
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v5 = v5 | pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v27, &v32);
    v37 = &v32;
    sub_20BFD6F90((void ***)&v37);
  }
  if ((v31 & 7) != 0)
  {
    v21 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  if ((v26 & 7) != 0)
  {
    v23 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  return v5;
}

void sub_20C5C7510(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A758);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6[3];
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfPath **v12;

  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CreateBindingRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v7);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v7, v1))
  {
    memset(v6, 0, sizeof(v6));
    v2 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v7, v6);
    v12 = v6;
    sub_20BFD6F90((void ***)&v12);
  }
  else
  {
    v2 = 0;
  }
  if ((v11 & 7) != 0)
  {
    v3 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v2;
}

void sub_20C5C7674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v5 - 24) = v4;
  sub_20BFD6F90((void ***)(v5 - 24));
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)v4 + 23) >= 0)
    v5 = (const char *)v4;
  else
    v5 = (const char *)*v4;
  v6 = *((char *)EmptyString + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)EmptyString + 23);
  else
    v7 = EmptyString[1];
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)EmptyString;
  else
    v11 = (const char *)*EmptyString;
  return strncmp(v11, v5, v10) == 0;
}

void sub_20C5C78AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5C790C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5C79E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C7A30(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v16;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BED2F10(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  v17 = v16;
  v18 = &v12[32 * v11];
  *(_QWORD *)sub_20C37A850(v16, a2, a3) = off_24C53D7C8;
  v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_20C5C7B28(a1, &v15);
  v13 = a1[1];
  sub_20C37B750((uint64_t)&v15);
  return v13;
}

void sub_20C5C7B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B750((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C7B28(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C5C7B9C((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C5C7B9C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v13;

  v11 = 0;
  v12 = a7 - 32;
  while (a3 + v11 != a5)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v12 + v11);
    v11 -= 32;
    sub_20C5C7C44(a1, v13, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v11 + a3));
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C5C7C44(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(_QWORD *)result = &unk_24C537498;
  v5 = *((_QWORD *)a3 + 3);
  *((_QWORD *)result + 3) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)result = off_24C53D7C8;
  return result;
}

void sub_20C5C7CBC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_20C5C7D40((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C5C7D40(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  unsigned int *v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  result = sub_20BFD265C((_DWORD *)(a2 + 8));
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

void sub_20C5C7DA4(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 24;
        sub_20C5C7D40((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C5C7E10(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[24 * v3];
  v13 = &v7[24 * v6];
  sub_20C5C7F18((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 24;
  sub_20C5C7F98(a1, &v10);
  v8 = a1[1];
  sub_20C5C81B8(&v10);
  return v8;
}

void sub_20C5C7F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5C81B8((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C5C7F18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *a3;
  *(_QWORD *)a2 = *a3;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BFD6E54((_DWORD *)(a2 + 8), (_DWORD *)a3 + 2);
  sub_20BFD6EA4((_DWORD *)(a2 + 12), (_DWORD *)a3 + 3);
  sub_20BFD6E54((_DWORD *)(a2 + 16), (_DWORD *)a3 + 4);
  return sub_20BFD6EA4((_DWORD *)(a2 + 20), (_DWORD *)a3 + 5);
}

uint64_t sub_20C5C7F98(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C5C800C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C5C800C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 24;
      sub_20C5C80C0(a1, v7 - 24, v9);
      v7 = *((_QWORD *)&v16 + 1) - 24;
      *((_QWORD *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C5C8134((uint64_t)v13);
  return v11;
}

_DWORD *sub_20C5C80C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v5 = (_DWORD *)(a3 + 20);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v6 = (_DWORD *)(a2 + 12);
  *(_QWORD *)a3 = 0;
  v7 = (_DWORD *)(a3 + 12);
  sub_20BFD38A4((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_20BFD38DC(v6, v7);
  sub_20BFD38A4((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  return sub_20BFD38DC((_DWORD *)(a2 + 20), v5);
}

uint64_t sub_20C5C8134(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C5C8168((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C5C8168(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C5C7D40(v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C5C81B8(void **a1)
{
  sub_20C5C81E8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C5C81E8(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 24;
      result = sub_20C5C7D40(v4, v1 - 24);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  uint64_t *EmptyString;
  __int128 v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  uint64_t *v8;
  const char *v9;
  std::string::size_type size;
  size_t v11;
  size_t v12;
  std::string *p_str;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v18;
  uint64_t *v19;
  std::string::size_type v20;
  std::string v21;
  std::string __str;
  char v23;

  v4 = sub_20C398E78(this);
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(&__str, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v6 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = EmptyString[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v7)
    v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (uint64_t *)((*((_QWORD *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  if (*((char *)v8 + 23) >= 0)
    v9 = (const char *)v8;
  else
    v9 = (const char *)*v8;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v11 = strlen(v9);
  if (size >= v11
    && ((v12 = v11, (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (p_str = &__str)
      : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
        !strncmp((const char *)p_str, v9, v12)))
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v18)
      v18 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*((_QWORD *)v18 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
      v19 = (uint64_t *)((*((_QWORD *)v18 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    if (*((char *)v19 + 23) < 0)
      v20 = v19[1];
    else
      v20 = *((unsigned __int8 *)v19 + 23);
    std::string::basic_string(&v21, &__str, v20, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = sub_20C398E78(this);
    v15 = *(unsigned int **)v14;
    *a2 = *(unsigned int **)v14;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        *a2 = v16;
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20C5C848C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4)
{
  int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v13;
  unsigned int *v14;
  uint64_t *v15;
  unsigned int v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (int *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *a3;
  if ((*a3 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v13 = (const void **)((*((_QWORD *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v13 = (const void **)EmptyString;
  }
  v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    v15 = (uint64_t *)(v14 + 4);
  else
    v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v13, (const void **)v15, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v41);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if ((v9 & 7) != 0)
  {
    do
      v16 = __ldxr(v14);
    while (__stlxr(v16 - 2, v14));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41, (uint64_t)&__p);
    *(_DWORD *)a1 = (_DWORD)__p;
    v18 = v37;
    v37 = 0;
    v19 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
    if (v19)
      sub_20C35C614(v19);
    sub_20BFD3EBC(v8, &v38);
    sub_20BFD3F10((int *)(a1 + 20), &v39);
    if (&__p == (void **)a1)
    {
      v23 = v40;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 24);
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      v23 = 0;
      *(_QWORD *)(a1 + 24) = v40;
      v40 = 0;
    }
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    if (v37)
      sub_20C35C614(v37);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, v17) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)a2, &v41, a4, 0, 0, (uint64_t)&__p);
    *(_DWORD *)a1 = (_DWORD)__p;
    v26 = v37;
    v37 = 0;
    v27 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v26;
    if (v27)
      sub_20C35C614(v27);
    sub_20BFD3EBC(v8, &v38);
    sub_20BFD3F10((int *)(a1 + 20), &v39);
    if (&__p == (void **)a1)
    {
      if ((v40 & 7) != 0)
      {
        v31 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 24);
      if ((v28 & 7) != 0)
      {
        v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      *(_QWORD *)(a1 + 24) = v40;
      v40 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    if (v37)
      sub_20C35C614(v37);
  }
  if ((v41 & 7) != 0)
  {
    v33 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  return a1;
}

void sub_20C5C87E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;

  if ((a17 & 7) != 0)
  {
    v19 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  sub_20C372B54(v17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)a1, a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = sub_20C5C8920();
  v8 = 0;
  result = sub_20C361C9C((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v4 + 8), (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

unint64_t sub_20C5C8920()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A760);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "connectability", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "renderType", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498A760))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A760))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A760);
  }
  return (unint64_t)v0;
}

void sub_20C5C8B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetRenderType@<W0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v4 = sub_20C5C8920();
  v8 = 0;
  result = sub_20C361F00((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v4 + 8), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v2;

  v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(sub_20C5C8920() + 8);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, v2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  void *__p[2];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t *v27;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v26 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  __p[0] = 0;
  v5 = sub_20C3690B8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), (uint64_t)&v26, (uint64_t *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (v5)
  {
    v24 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v26);
    v25 = v8;
    v9 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v26);
    v11 = v10;
    while (1)
    {
      v12 = !v11 || v24 == v9;
      v13 = v12;
      if (v25 == v11 && v13)
        break;
      sub_20BF834B0(v24 + 56);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
      v27 = &v21;
      v15 = sub_20C5C9848(a2, &v21, (uint64_t)&unk_20CAC184C, &v27);
      v18 = (void **)(v15 + 3);
      if (*((char *)v15 + 47) < 0)
        operator delete(*v18);
      *(_OWORD *)v18 = *(_OWORD *)__p;
      v18[2] = v23;
      HIBYTE(v23) = 0;
      LOBYTE(__p[0]) = 0;
      if ((v21 & 7) != 0)
      {
        v19 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
      }
      sub_20BF4D354(&v24, v16, v17);
    }
  }
  sub_20BF49F14(&v26, 0);
}

void sub_20C5C8E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, _QWORD **a19)
{
  uint64_t v19;

  sub_20BF49F14(&a19, 0);
  sub_20C1E7FB4(v19);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  sub_20BF834B0((uint64_t)v6);
  return sub_20BF4C2D8((uint64_t)v6);
}

void sub_20C5C8F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetSdrMetadata(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    v3 = result;
    do
    {
      result = pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetSdrMetadataByKey(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 2), (uint64_t (**)(_QWORD, uint64_t))v2 + 3);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetSdrMetadataByKey(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return sub_20C369820(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 168), a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2)
    v2 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ClearSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2)
    v2 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ClearSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  uint64_t *v7;
  const char *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const char *v13;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this);
    if ((_DWORD)result)
    {
      v4 = sub_20C398E78(this);
      if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
      v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v6)
        v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*((_QWORD *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
        v7 = (uint64_t *)((*((_QWORD *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      if (*((char *)v7 + 23) >= 0)
        v8 = (const char *)v7;
      else
        v8 = (const char *)*v7;
      v9 = *((char *)EmptyString + 23);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)EmptyString + 23);
      else
        v10 = EmptyString[1];
      v11 = strlen(v8);
      if (v10 >= v11)
      {
        v12 = v11;
        if (v9 >= 0)
          v13 = (const char *)EmptyString;
        else
          v13 = (const char *)*EmptyString;
        return strncmp(v13, v8, v12) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInterfaceInputName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v2;
  uint64_t *EmptyString;
  const char *v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v9;
  const char *v10;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2)
    v2 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v2 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v2 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  if (*((char *)EmptyString + 23) >= 0)
    v4 = (const char *)EmptyString;
  else
    v4 = (const char *)*EmptyString;
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = strlen(v4);
  if (v6 < v7)
    return 0;
  v9 = v7;
  if (v5 >= 0)
    v10 = (const char *)a1;
  else
    v10 = *(const char **)a1;
  return strncmp(v10, v4, v9) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation((uint64_t)a1, (uint64_t (**)(_QWORD, uint64_t))a2);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2) & 1) != 0)
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetDocumentation(this, a3);
  else
    return sub_20BDDC0E4(a3, "");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDisplayGroup(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup((uint64_t)a1, (uint64_t (**)(_QWORD, uint64_t))a2);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2) & 1) != 0)
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetDisplayGroup(this, a3);
  else
    return sub_20BDDC0E4(a3, "");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetConnectability(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20C5C8920();
  v8 = 0;
  result = sub_20C361C9C((uint64_t)this, v4, (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, unsigned int **a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;

  v13 = 0;
  v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20C5C8920();
  v14 = 0;
  result = sub_20C361F00((uint64_t)this, v4, (uint64_t)&v13, &v14);
  if ((v14 & 7) != 0)
  {
    v6 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (v13)
  {
    *a2 = v13;
    v13 = 0;
  }
  else
  {
    result = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!result)
      result = (unint64_t)sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v10 = *(unsigned int **)(result + 48);
    *a2 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        *a2 = v11;
    }
  }
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

void sub_20C5C95A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ClearConnectability(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v2;

  v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5C8920();
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetValueProducingAttribute@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const char *Text;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v20;
  const pxrInternal__aapl__pxrReserved__::TfToken *v21;
  int v23;
  int v24;
  _QWORD v25[4];
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes(a1, 0, (uint64_t)v27);
  if (v29 != 1)
  {
    if (!v29)
    {
      if (a2)
        *a2 = 0;
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
      *(_QWORD *)(a3 + 24) = 0;
      return sub_20C5C9ACC((uint64_t)v27);
    }
    v25[0] = "usdShade/input.cpp";
    v25[1] = "GetValueProducingAttribute";
    v25[2] = 426;
    v25[3] = "UsdAttribute pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetValueProducingAttribute(UsdShadeAttributeType *) const";
    v26 = 0;
    sub_20C348EEC((uint64_t)a1, &v23);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v25, (pxrInternal__aapl__pxrReserved__ *)"More than one value producing attribute for shading input %s. GetValueProducingAttribute will only report the first one. Please use GetValueProducingAttributes to retrieve all.", v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
  }
  v8 = v30;
  v9 = v27[0];
  if (v30 >= 2)
    v10 = (_QWORD *)v27[0];
  else
    v10 = v27;
  *(_DWORD *)a3 = *(_DWORD *)v10;
  v11 = v10[1];
  *(_QWORD *)(a3 + 8) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 48);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v8 >= 2)
    v14 = (uint64_t *)(v9 + 16);
  else
    v14 = &v28;
  if (v8 >= 2)
    v15 = (_DWORD *)(v9 + 20);
  else
    v15 = (_DWORD *)&v28 + 1;
  if (v8 >= 2)
    v16 = (_QWORD *)v9;
  else
    v16 = v27;
  sub_20BFD6E54((_DWORD *)(a3 + 16), v14);
  sub_20BFD6EA4((_DWORD *)(a3 + 20), v15);
  v17 = v16[3];
  *(_QWORD *)(a3 + 24) = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (a2)
  {
    v20 = sub_20C398E78((_DWORD *)a3);
    *a2 = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetType(v20, v21);
  }
  return sub_20C5C9ACC((uint64_t)v27);
}

void sub_20C5C97FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C5C9848(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if ((v12[2] & 0xFFFFFFFFFFFFFFF8) == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x30uLL);
  v26[0] = v15;
  v26[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = *a4;
  v15[2] = **a4;
  *v16 = 0;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v26, 0);
  return v12;
}

void sub_20C5C9AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5C9ACC(uint64_t a1)
{
  sub_20C5C9B08((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 36) >= 2u)
    free(*(void **)a1);
  return a1;
}

void sub_20C5C9B08(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  v1 = a1;
  if (*((_DWORD *)a1 + 9) >= 2u)
    v1 = (uint64_t *)*a1;
  v2 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = &v1[4 * v2];
    do
    {
      v4 = v1[3];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v1 + 5);
      sub_20BFD265C((_DWORD *)v1 + 4);
      v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v1[1];
      if (v7)
        sub_20C35C614(v7);
      v1 += 4;
    }
    while (v1 != v3);
  }
}

void sub_20C5C9B8C()
{
  void *__p[2];
  char v1;

  sub_20C5CE1A0();
  sub_20BDDC0E4(__p, "Material");
  sub_20C5CE2C0((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5C9BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D820;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdShade/material.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdShadeMaterial pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53D820;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5C9D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A770);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A770))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A768, "Material");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A768, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A770);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A768, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D820;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdShade/material.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdShadeMaterial pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define(const Usd"
                            "StagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53D820;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5C9F6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A770);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A780);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A780))
  {
    __cxa_guard_release(&qword_25498A780);
  }
  return &qword_25498A778;
}

void sub_20C5CA010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A780);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A790);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)__cxa_guard_acquire(&qword_25498A790);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v3);
      byte_25498A788 = sub_20C35BD7C((char *)&qword_25498A778, v4, v5);
      __cxa_guard_release(&qword_25498A790);
    }
  }
  return byte_25498A788;
}

void sub_20C5CA08C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A790);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(this);
  return &qword_25498A778;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5CA164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8)
    v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5CA2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8)
    v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 152), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5CA414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8)
    v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A7B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A7B0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v5)
      v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v6 = *((_QWORD *)v5 + 18);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9)
      v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v10 = *((_QWORD *)v9 + 17);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v13)
      v13 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v14 = *((_QWORD *)v13 + 19);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498A798, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A798, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A7B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A7D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A7D0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)1);
    sub_20C5CA7AC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A7B8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A7D0);
  }
  if (v1)
    return &qword_25498A7B8;
  else
    return &qword_25498A798;
}

void sub_20C5CA71C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A7B0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5CA7AC(uint64_t **a1)
{
  qword_25498A7C0 = 0;
  unk_25498A7C8 = 0;
  qword_25498A7B8 = 0;
  sub_20BFC9A6C((char **)&qword_25498A7B8, ((unk_25498A7A0 - qword_25498A798) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A7B8, (_QWORD *)qword_25498A7C0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A7B8, (_QWORD *)qword_25498A7C0, (uint64_t *)qword_25498A798, unk_25498A7A0, (unk_25498A7A0 - qword_25498A798) >> 3);
}

void sub_20C5CA840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetEditContextForVariant(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  _DWORD *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  _QWORD *EditTarget;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::TfToken *v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  int v54;
  int v55;
  uint64_t v56;
  void *__p;
  char v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v62;
  int v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  _DWORD v72[10];
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 8);
  v8 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)v61, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v61, v9, &v59);
  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v10 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)v61, (__int128 *)EmptyString, (uint64_t)v52);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v59);
  EditTarget = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v12);
  v14 = EditTarget;
  v15 = EditTarget[1];
  *(_QWORD *)&v71 = *EditTarget;
  *((_QWORD *)&v71 + 1) = v15;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C20123C(v72, (uint64_t)(EditTarget + 2));
  v73 = *(_OWORD *)(v14 + 7);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v19 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
  v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v52, (__int128 *)v19, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1);
  if ((_DWORD)v20)
  {
    v21 = (*a2 & 0xFFFFFFFFFFFFFFF8) != 0
        ? (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16)
        : (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
    if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v52, v21))
    {
      pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditTarget((uint64_t)v52, a3, (uint64_t)&v66);
      v22 = (unsigned int *)*((_QWORD *)&v71 + 1);
      v71 = v66;
      *((_QWORD *)&v66 + 1) = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
      *(_QWORD *)&v66 = 0;
      v26 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v72);
      sub_20C201ECC(v26, (uint64_t)&v67);
      v73 = v70;
      sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v67);
      v27 = *((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1))
      {
        v28 = (unsigned int *)(*((_QWORD *)&v66 + 1) + 8);
        do
        {
          v29 = __ldxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
    }
  }
  sub_20C35C4F8((uint64_t)&v66, v7, v8);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v66, v31, &v50);
  sub_20C532E28(a4, (uint64_t)&v50, (uint64_t)&v71);
  v32 = v51;
  if (v51)
  {
    v33 = (unsigned int *)(v51 + 8);
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  if ((v69 & 7) != 0)
  {
    v36 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
  sub_20BFD265C(&v67);
  if (*((_QWORD *)&v66 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v66 + 1));
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v72);
  v38 = *((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v39 = (unsigned int *)(*((_QWORD *)&v71 + 1) + 8);
    do
    {
      v40 = __ldxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (v58 < 0)
    operator delete(__p);
  if ((v56 & 7) != 0)
  {
    v42 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
  sub_20BFD265C(&v54);
  if (v53)
    sub_20C35C614(v53);
  v44 = v60;
  if (v60)
  {
    v45 = (unsigned int *)(v60 + 8);
    do
    {
      v46 = __ldxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  if ((v65 & 7) != 0)
  {
    v48 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v64);
  sub_20BFD265C(&v63);
  if (v62)
    sub_20C35C614(v62);
}

void sub_20C5CAC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_20C38B7B4(v4 - 160);
  sub_20C532868((uint64_t)va);
  v6 = v19;
  if (v19)
  {
    v7 = (unsigned int *)(v19 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  sub_20C35C2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetMaterialVariant(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t *EmptyString;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v3 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)&v7, (__int128 *)EmptyString, a2);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5CADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVariant(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::Usd_PrimData **a2, uint64_t *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *Stage;
  uint64_t v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::UsdObject **v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v29;
  uint64_t *v30;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  _BOOL8 v40;
  uint64_t *v41;
  uint64_t *v42;
  const char *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__ ***v52;
  std::string *v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t *v58;
  const char *v59;
  uint64_t *v60;
  uint64_t *v61;
  const char *v62;
  uint64_t v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  char *v67;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  std::string::size_type size;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  std::string::size_type v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v83;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  _BOOL4 HasPrefix;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t *v99;
  pxrInternal__aapl__pxrReserved__::SdfPath *v100;
  _QWORD *v101;
  pxrInternal__aapl__pxrReserved__::UsdStage *v102;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v103;
  int IsDefined;
  char v105;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v106;
  uint64_t *v107;
  const char *Text;
  uint64_t v109;
  char *v110;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  const char *v121;
  const char **v122;
  uint64_t v123;
  char *v124;
  const char *v125;
  pxrInternal__aapl__pxrReserved__ ***v126;
  std::string *v127;
  unsigned int *v128;
  unsigned int v129;
  const char **v130;
  const char *v131;
  const char *v132;
  unint64_t v133;
  std::string v134;
  uint64_t v135;
  uint64_t v136;
  __int128 i;
  uint64_t v138[3];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v139;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v140;
  int v141;
  int v142;
  uint64_t v143;
  void *v144;
  char v145;
  __int128 v146;
  std::string::size_type v147;
  uint64_t v148;
  uint64_t v149;
  std::string __p;
  unint64_t v151;
  void *v152;
  char v153;
  std::string *p_p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2) & 1) != 0)
  {
    v7 = *a3;
    if (!*a3)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8)
        v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v7 = *((_QWORD *)v8 + 15);
    }
    if ((v7 & 7) != 0)
    {
      v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v7 &= 0xFFFFFFFFFFFFFFF8;
    }
    Stage = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v148);
    v146 = 0uLL;
    v147 = 0;
    v14 = a2[1];
    if (v14 == *a2)
    {
      p_p = (std::string *)"usdShade/material.cpp";
      v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
      v156 = 283;
      v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVaria"
                               "nt(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
      LOBYTE(v158) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"No material prims specified on which to operate.");
      goto LABEL_45;
    }
    v139 = *a2;
    v140 = v14;
    while (1)
    {
      if (v139 == v140)
      {
        v133 = v7 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((v7 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Stage);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)a1, (__int128 *)EmptyString, (uint64_t)&v139);
        *(_OWORD *)v138 = v146;
LABEL_66:
        v40 = v138[0] == v138[1];
        if (v138[0] != v138[1])
        {
          v65 = (__int128 *)sub_20BEC9C74(v138, v63, v64);
          if ((pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v139, v65, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1) & 1) != 0)
          {
            v68 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BEC9C74(v138, v66, v67);
            pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v139, v68);
            *(_OWORD *)&v134.__r_.__value_.__l.__data_ = 0uLL;
            pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, (uint64_t *)&v134, (uint64_t)&__p);
            pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(&p_p, &__p);
            sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v152);
            v71 = (const char *)v151;
            if (v151)
            {
              v72 = (unsigned int *)(v151 + 8);
              do
              {
                v73 = __ldxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
                (*(void (**)(const char *))(*(_QWORD *)v71 + 8))(v71);
            }
            size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v76 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
              do
              {
                v77 = __ldxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
                (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
            }
            v79 = v134.__r_.__value_.__l.__size_;
            if (v134.__r_.__value_.__l.__size_)
            {
              v80 = (unsigned int *)(v134.__r_.__value_.__l.__size_ + 8);
              do
              {
                v81 = __ldxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v79 + 8))(v79);
            }
            for (i = *(_OWORD *)a2; ; sub_20C5CBD14(&i))
            {
              if ((_QWORD)i == *((_QWORD *)&i + 1))
              {
                pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)&p_p);
                sub_20BEC9CF0(v138);
                goto LABEL_66;
              }
              v83 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C5CBC20((uint64_t *)&i, v69, v70);
              if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v83, v84) & 1) == 0)
                break;
              v87 = sub_20C5CBC9C(&i, v85, v86);
              sub_20C348EEC(*v87, (int *)&__p);
              sub_20C348EEC((uint64_t)a1, (int *)&v134);
              HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v134);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v134.__r_.__value_.__r.__words + 1);
              sub_20BFD265C(&v134);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
              sub_20BFD265C(&__p);
              if (HasPrefix)
              {
                v91 = *sub_20C5CBC9C(&i, v89, v90);
                v92 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v92)
                  v92 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if ((*((_QWORD *)v92 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
                  v93 = (uint64_t *)((*((_QWORD *)v92 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
                else
                  v93 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v92);
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet(v91, (__int128 *)v93, (uint64_t)&__p);
                v111 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BEC9C74(v138, v109, v110);
                pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&__p, v111);
                if (v153 < 0)
                  operator delete(v152);
                if ((v151 & 7) != 0)
                {
                  v112 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v113 = __ldxr(v112);
                  while (__stlxr(v113 - 2, v112));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
                sub_20BFD265C(&__p.__r_.__value_.__r.__words[2]);
                if (__p.__r_.__value_.__l.__size_)
                  sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p.__r_.__value_.__l.__size_);
              }
              else
              {
                v94 = sub_20C5CBC9C(&i, v89, v90);
                v95 = sub_20C3734F4(*v94);
                v98 = sub_20C5CBC20((uint64_t *)&i, v96, v97);
                v99 = sub_20C3734F4(v98);
                sub_20BFD6E54(&v134, v99);
                v100 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6EA4((_DWORD *)v134.__r_.__value_.__r.__words + 1, (_DWORD *)v99 + 1);
                v101 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v100);
                if (v134.__r_.__value_.__r.__words[0] != *v101)
                {
                  while ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v134) & 1) == 0)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v134, &__p);
                    sub_20BFD3EBC((int *)&v134, (int *)&__p);
                    sub_20BFD3F10((int *)v134.__r_.__value_.__r.__words + 1, (int *)__p.__r_.__value_.__r.__words + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
                    sub_20BFD265C(&__p);
                  }
                }
                sub_20C348EEC((uint64_t)a1, (int *)&__p);
                pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v136, (pxrInternal__aapl__pxrReserved__::SdfPath *)v95, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v134, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
                sub_20BFD265C(&__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v134.__r_.__value_.__r.__words + 1);
                sub_20BFD265C(&v134);
                v102 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v148);
                pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(v102, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v136, (uint64_t)&v134);
                IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v134, v103);
                v105 = IsDefined;
                if (IsDefined)
                {
                  v106 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  if (!v106)
                    v106 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  if ((*((_QWORD *)v106 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
                    v107 = (uint64_t *)((*((_QWORD *)v106 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
                  else
                    v107 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v106);
                  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)&v134, (__int128 *)v107, (uint64_t)&__p);
                  v116 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BEC9C74(v138, v114, v115);
                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&__p, v116);
                  if (v153 < 0)
                    operator delete(v152);
                  if ((v151 & 7) != 0)
                  {
                    v117 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v118 = __ldxr(v117);
                    while (__stlxr(v118 - 2, v117));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
                  sub_20BFD265C(&__p.__r_.__value_.__r.__words[2]);
                  if (__p.__r_.__value_.__l.__size_)
                    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p.__r_.__value_.__l.__size_);
                }
                else
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdShade/material.cpp";
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"CreateMasterMaterialVariant";
                  __p.__r_.__value_.__r.__words[2] = 368;
                  v151 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterM"
                                           "aterialVariant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
                  LOBYTE(v152) = 0;
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v136);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to create over for Material prim %s, so cannot set its materialVariant", Text);
                }
                if ((v135 & 7) != 0)
                {
                  v119 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v120 = __ldxr(v119);
                  while (__stlxr(v120 - 2, v119));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134.__r_.__value_.__r.__words[2] + 1);
                sub_20BFD265C(&v134.__r_.__value_.__r.__words[2]);
                if (v134.__r_.__value_.__l.__size_)
                  sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v134.__r_.__value_.__l.__size_);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v136 + 1);
                sub_20BFD265C(&v136);
                if ((v105 & 1) == 0)
                  goto LABEL_135;
              }
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdShade/material.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"CreateMasterMaterialVariant";
            __p.__r_.__value_.__r.__words[2] = 347;
            v151 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMateria"
                                     "lVariant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
            LOBYTE(v152) = 0;
            if (v133)
            {
              v121 = (const char *)(v133 + 16);
              if (*(char *)(v133 + 39) < 0)
                v121 = *(const char **)v121;
            }
            else
            {
              v121 = "";
            }
            v122 = (const char **)sub_20BEE7184(v138);
            v125 = *v122;
            if ((*v122)[23] < 0)
              v125 = *(const char **)v125;
            v126 = (pxrInternal__aapl__pxrReserved__ ***)sub_20C5CBC9C(&i, v123, v124);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(*v126, &v134);
            if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = &v134;
            else
              v127 = (std::string *)v134.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Switching master variant %s to %s caused one or more material prims to expire.  First such: %s.", v121, v125, (const char *)v127);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
LABEL_135:
            pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)&p_p);
          }
          else
          {
            p_p = (std::string *)"usdShade/material.cpp";
            v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
            v156 = 330;
            v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMateria"
                                     "lVariant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
            LOBYTE(v158) = 0;
            v130 = (const char **)sub_20BEE7184(v138);
            v131 = *v130;
            if ((*v130)[23] < 0)
              v131 = *(const char **)v131;
            sub_20C348EEC((uint64_t)a1, (int *)&__p);
            v132 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to create Material variant %s on prim %s. Aborting master materialVariant creation.", v131, v132);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&__p);
          }
        }
        if (v145 < 0)
          operator delete(v144);
        if ((v143 & 7) != 0)
        {
          v128 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
          do
            v129 = __ldxr(v128);
          while (__stlxr(v129 - 2, v128));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v142);
        sub_20BFD265C(&v141);
        if (v140)
          sub_20C35C614(v140);
        goto LABEL_46;
      }
      v15 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C5CBC20((uint64_t *)&v139, v12, v13);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v15, v16) & 1) == 0)
        break;
      v19 = (pxrInternal__aapl__pxrReserved__::UsdObject **)sub_20C5CBC9C(&v139, v17, v18);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*v19, v20, &p_p);
      v23 = sub_20BEB560C((uint64_t)&v148, (uint64_t)&p_p);
      v24 = v155;
      if (v155)
      {
        v25 = (unsigned int *)((char *)v155 + 8);
        do
        {
          v26 = __ldxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v24 + 8))(v24);
      }
      if (!v23)
      {
        p_p = (std::string *)"usdShade/material.cpp";
        v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
        v156 = 297;
        v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVar"
                                 "iant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
        LOBYTE(v158) = 0;
        sub_20C348EEC((uint64_t)a1, (int *)&__p);
        v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        v57 = sub_20C5CBC9C(&v139, v55, v56);
        v58 = sub_20C3734F4(*v57);
        v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"All material prims to be controlled by masterPrim %s must originate on the same UsdStage as masterPrim.  Prim %s does not.", v54, v59);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&__p);
        goto LABEL_45;
      }
      v28 = *sub_20C5CBC9C(&v139, v21, v22);
      v29 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v29)
        v29 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*((_QWORD *)v29 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
        v30 = (uint64_t *)((*((_QWORD *)v29 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet(v28, (__int128 *)v30, (uint64_t)&p_p);
      pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&p_p, v31, &__p);
      if (v159 < 0)
        operator delete(v158);
      if ((v157 & 7) != 0)
      {
        v32 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v156 + 1);
      sub_20BFD265C(&v156);
      if (v155)
        sub_20C35C614(v155);
      v36 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
      {
        p_p = (std::string *)"usdShade/material.cpp";
        v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
        v156 = 308;
        v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVar"
                                 "iant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
        LOBYTE(v158) = 0;
        v60 = sub_20C5CBC9C(&v139, v34, v35);
        v61 = sub_20C3734F4(*v60);
        v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v61);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"All Material prims to be switched by master materialVariant must actually possess a non-empty materialVariant themselves.  %s does not.", v62);
LABEL_43:
        p_p = &__p;
        sub_20BDE5038((void ***)&p_p);
        goto LABEL_45;
      }
      v38 = *((_QWORD *)&v146 + 1);
      v37 = (unsigned __int8 *)v146;
      if (*((_QWORD *)&v146 + 1) != (_QWORD)v146)
      {
        if (*((_QWORD *)&v146 + 1) - (_QWORD)v146 == __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0])
        {
          while (sub_20BEB4EF8((uint64_t)&p_p, v37, v36))
          {
            v37 += 24;
            v36 += 24;
            if (v37 == (unsigned __int8 *)v38)
              goto LABEL_40;
          }
        }
        p_p = (std::string *)"usdShade/material.cpp";
        v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
        v156 = 319;
        v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVar"
                                 "iant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
        LOBYTE(v158) = 0;
        v41 = sub_20C5CBC9C(&v139, v34, v35);
        v42 = sub_20C3734F4(*v41);
        v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v42);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"All Material prims to be switched by master materialVariant must possess the SAME material variants. %s has a different set of variants.", v43);
        goto LABEL_43;
      }
      v146 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[0] = v38;
      __p.__r_.__value_.__l.__size_ = v38;
      v39 = v147;
      v147 = __p.__r_.__value_.__r.__words[2];
      __p.__r_.__value_.__r.__words[2] = v39;
LABEL_40:
      p_p = &__p;
      sub_20BDE5038((void ***)&p_p);
      Stage = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5CBD14(&v139);
    }
    p_p = (std::string *)"usdShade/material.cpp";
    v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
    v156 = 289;
    v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVariant"
                             "(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
    LOBYTE(v158) = 0;
    v52 = (pxrInternal__aapl__pxrReserved__ ***)sub_20C5CBC9C(&v139, v17, v18);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(*v52, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__p;
    else
      v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to process invalid material: %s", (const char *)v53);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_45:
    v40 = 0;
LABEL_46:
    p_p = (std::string *)&v146;
    sub_20BDE5038((void ***)&p_p);
    v44 = v149;
    if (v149)
    {
      v45 = (unsigned int *)(v149 + 8);
      do
      {
        v46 = __ldxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    if ((v7 & 7) != 0)
    {
      v48 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
  }
  else
  {
    p_p = (std::string *)"usdShade/material.cpp";
    v155 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"CreateMasterMaterialVariant";
    v156 = 273;
    v157 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVariant"
                             "(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
    LOBYTE(v158) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"MasterPrim is not a valid UsdPrim.");
    return 0;
  }
  return v40;
}

void sub_20C5CB998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5CBC20(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::U"
            "sdPrim>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C5CBC94()
{
  JUMPOUT(0x20C5CBC44);
}

_QWORD *sub_20C5CBC9C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::U"
            "sdPrim>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C5CBD14(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::UsdPrim>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

_QWORD *sub_20C5CBD90(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 4));
  v2 = (unsigned int *)a1[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[1];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  int v7;
  _BYTE v8[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  sub_20C35C4F8((uint64_t)v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterialPath(this, &v6);
  sub_20C5CBEE4((pxrInternal__aapl__pxrReserved__::UsdProperty *)v8, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
}

void sub_20C5CBEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C35C2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20C5CBEE4(pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    goto LABEL_17;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v17);
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v17);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, a2, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19);
  *(_QWORD *)a3 = off_24C53D820;
  if ((v23 & 7) != 0)
  {
    v8 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  v10 = v18;
  if (v18)
  {
    v11 = (unsigned int *)(v18 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = *((_QWORD *)a3 + 1);
  if (!v14
    || (*(_BYTE *)(v14 + 57) & 8) != 0
    || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)a3 + 32))(a3) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(a3);
LABEL_17:
    v19 = 1;
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v22);
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19);
    *(_QWORD *)a3 = off_24C53D820;
    if ((v23 & 7) != 0)
    {
      v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
  }
}

void sub_20C5CC07C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterialPath(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, int *a2@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t *v7;
  uint64_t (***v8)();
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t (**v32)();
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  int v34;
  int v35;
  uint64_t (***v36)();
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (_DWORD *)((char *)this + 16);
  sub_20C35C4F8((uint64_t)v27, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v7 = (uint64_t *)sub_20C368FF0((uint64_t)v27, v6);
  v32 = &off_24C53D948;
  v33 = this;
  v36 = &v32;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::FindBaseMaterialPathInPrimIndex(v7, (uint64_t)&v32, a2);
  v8 = v36;
  if (v36 == &v32)
  {
    v9 = 4;
    v8 = &v32;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_6:
  if ((v31 & 7) != 0)
  {
    v10 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  v12 = v28;
  if (v28)
    sub_20C35C614(v28);
  if (*(_QWORD *)a2 != *pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v12))
  {
    sub_20C35C4F8((uint64_t)&v32, v4, v5);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v32, v13, &v25);
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v25);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)v27);
    v15 = v26;
    if (v26)
    {
      v16 = (unsigned int *)(v26 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    if ((v36 & 7) != 0)
    {
      v19 = (unsigned int *)((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
    sub_20BFD265C(&v34);
    if (v33)
      sub_20C35C614(v33);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29))
    {
      sub_20C5CC5EC((uint64_t)v27, (uint64_t)&v32);
      sub_20C348EEC((uint64_t)&v32, (int *)&v25);
      sub_20BFD3EBC(a2, (int *)&v25);
      sub_20BFD3F10(a2 + 1, (int *)&v25 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
      if ((v36 & 7) != 0)
      {
        v21 = (unsigned int *)((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
      sub_20BFD265C(&v34);
      if (v33)
        sub_20C35C614(v33);
    }
    if ((v31 & 7) != 0)
    {
      v23 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    if (v28)
      sub_20C35C614(v28);
  }
}

void sub_20C5CC384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::FindBaseMaterialPathInPrimIndex@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v5;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v6;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v7;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v9;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v10;
  uint64_t ParentNode;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *MapToParent;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const char *v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v20;
  _DWORD *Path;
  uint64_t v22;
  int v24;
  int v25;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v26[2];
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v27;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v28;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v30;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, (uint64_t *)&v27);
  v6 = v27;
  v5 = v28;
  v7 = v29;
  if (v27 == v29 && v28 == v30)
  {
LABEL_14:
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  else
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)((char *)v30 - 1);
    while (1)
    {
      v10 = v5;
      v26[0] = v6;
      v26[1] = v5;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26) == 6)
      {
        ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26);
        v13 = v12;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(v26);
        if (v13 == v15 && ParentNode == v14)
        {
          MapToParent = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26);
          v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(MapToParent);
          v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)MapToParent, v18, v19);
          pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v20, v17, &v24);
          LODWORD(MapToParent) = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
          sub_20BFD265C(&v24);
          if ((_DWORD)MapToParent)
          {
            Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26);
            v22 = *(_QWORD *)(a2 + 24);
            if (!v22)
              sub_20BE9E974();
            if (((*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v22 + 48))(v22, Path) & 1) != 0)
              break;
          }
        }
      }
      v5 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)((char *)v10 + 1);
      if (v6 == v7 && v9 == v10)
        goto LABEL_14;
    }
    sub_20BFD6E54(a3, Path);
    return sub_20BFD6EA4(a3 + 1, Path + 1);
  }
}

_DWORD *sub_20C5CC5EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *result;
  uint64_t v5;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16)))
  {
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v5 + 1);
    sub_20C35C4F8(a2, (uint64_t *)(a1 + 8), &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
    return sub_20BFD265C(&v5);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_20C5CC6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterialPath(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  _DWORD *v9;
  uint64_t v10;
  _BYTE v11[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7, (uint64_t)v11);
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    sub_20BFD6E54(&v18, a2);
    sub_20BFD6EA4(&v19, (_DWORD *)a2 + 1);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v16 = &v7;
    v17 = 0;
    v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)operator new(8uLL);
    v8 = v7;
    v9 = (_DWORD *)((char *)v7 + 8);
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BFD6DBC((uint64_t)&v9, &v18, &v20, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    pxrInternal__aapl__pxrReserved__::UsdSpecializes::SetSpecializes(v11, &v7);
    v16 = &v7;
    sub_20BFD6F90((void ***)&v16);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSpecializes::ClearSpecializes((pxrInternal__aapl__pxrReserved__::UsdSpecializes *)v11);
  }
  if ((v15 & 7) != 0)
  {
    v5 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (v12)
    sub_20C35C614(v12);
}

void sub_20C5CC854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C5CC8D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5CC8D8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)v7, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v7, v3))
  {
    sub_20C348EEC((uint64_t)v7, (int *)&v6);
  }
  else
  {
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterialPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_20BFD265C(&v6);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5CCA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C35C2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ClearBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  uint64_t v3;

  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v3 + 1);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterialPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v3 + 1);
  return sub_20BFD265C(&v3);
}

void sub_20C5CCAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::HasBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  _BOOL8 v1;
  int v3;
  int v4;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterialPath(this, &v3);
  v1 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  sub_20BFD265C(&v3);
  return v1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  char v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;
  BOOL v11;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v12;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v13;
  unsigned int v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  const char *v18;
  const char *Text;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v25;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  int v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  char v44[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    v9 = 0;
    do
    {
      v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v10)
        v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v11 = (*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 27) & 0xFFFFFFFFFFFFFFF8);
      sub_20C5CCFEC(a2, v7, (uint64_t)&v49);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v49, (uint64_t)v44);
      if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v44, v12))
      {
        v13 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v13)
          v13 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 27) & 0xFFFFFFFFFFFFFFF8)
          && (pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored((pxrInternal__aapl__pxrReserved__::UsdProperty *)v44) & 1) == 0)
        {
          *(_QWORD *)(a4 + 32) = 0x100000000;
LABEL_46:
          if ((v48 & 7) != 0)
          {
            v31 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
          sub_20BFD265C(&v46);
          if (v45)
            sub_20C35C614(v45);
          if ((v49 & 7) != 0)
          {
            v33 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
            do
              v34 = __ldxr(v33);
            while (__stlxr(v34 - 2, v33));
          }
          return;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)v44, (const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)1, a4);
        v14 = *(_DWORD *)(a4 + 32);
        if (v14 >= 2)
        {
          v39 = "usdShade/material.cpp";
          v40 = "_ComputeNamedOutputSources";
          v41 = 537;
          v42 = "UsdShadeAttributeVector pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(c"
                "onst TfToken &, const TfTokenVector &) const";
          v43 = 0;
          v15 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
          if (v15)
          {
            v16 = (const char *)(v15 + 16);
            if (*(char *)(v15 + 39) < 0)
              v16 = *(const char **)v16;
          }
          else
          {
            v16 = "";
          }
          v17 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v17)
          {
            v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0)
              v18 = *(const char **)v18;
          }
          else
          {
            v18 = "";
          }
          sub_20C3630C0((uint64_t)a1, &v37);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"Multiple connected sources for output %s:%s on material %s. Only the first will be consider as a terminal.", v20, v16, v18, Text);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_20BFD265C(&v37);
          v14 = *(_DWORD *)(a4 + 32);
        }
        if (v14)
          goto LABEL_46;
        sub_20C5C9ACC(a4);
      }
      if ((v48 & 7) != 0)
      {
        v21 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
      sub_20BFD265C(&v46);
      if (v45)
        sub_20C35C614(v45);
      if ((v49 & 7) != 0)
      {
        v23 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      v9 |= v11;
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    }
    while (v7 != v8);
    if ((v9 & 1) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
LABEL_33:
  v25 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v25)
    v25 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC(a2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v25 + 216), (uint64_t)&v49);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v49, (uint64_t)v44);
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v44, v26) & 1) == 0)
  {
    v39 = "usdShade/material.cpp";
    v40 = "_ComputeNamedOutputSources";
    v41 = 552;
    v42 = "UsdShadeAttributeVector pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(const T"
          "fToken &, const TfTokenVector &) const";
    v43 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "universalOutput", 0) & 1) == 0)
    {
      sub_20C5BCAB8((uint64_t)v44);
      if ((v49 & 7) != 0)
      {
        v35 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
LABEL_32:
      *(_QWORD *)(a4 + 32) = 0x100000000;
      return;
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)v44, (const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)1, a4);
  if ((v48 & 7) != 0)
  {
    v27 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  sub_20BFD265C(&v46);
  if (v45)
    sub_20C35C614(v45);
  if ((v49 & 7) != 0)
  {
    v29 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
}

void sub_20C5CCF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  va_list va;

  va_start(va, a12);
  sub_20C5BCAB8((uint64_t)va);
  v14 = *(_QWORD *)(v12 - 88);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

void sub_20C5CCFEC(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, uint64_t a3@<X8>)
{
  void *__p;
  char v5;

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, a1, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v5 < 0)
    operator delete(__p);
}

void sub_20C5CD040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a6@<X8>)
{
  _DWORD *v9;
  _DWORD *v10;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD v31[5];
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(a1, a2, a3, (uint64_t)&v29);
  if (v31[4])
  {
    v9 = v29;
    if (a4 | a5)
    {
      if (v32 >= 2)
        v10 = v29;
      else
        v10 = &v29;
      v11 = sub_20C398E78(v10);
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(v11, (uint64_t)&v24);
      v12 = (int)v25;
      v23 = v24;
      if (a4)
        sub_20BF32220((_QWORD *)a4, &v23);
      if (a5)
        *(_DWORD *)a5 = v12;
      if ((v23 & 7) != 0)
      {
        v13 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      v9 = v29;
    }
    if (v32 >= 2)
      v15 = (uint64_t *)(v9 + 2);
    else
      v15 = &v30;
    v16 = v9 + 4;
    if (v32 >= 2)
      v17 = v16;
    else
      v17 = v31;
    sub_20C35C4F8((uint64_t)&v24, v15, v17);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24);
    *(_QWORD *)a6 = off_24C53DB40;
    if ((v28 & 7) != 0)
    {
      v18 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  }
  else
  {
    LODWORD(v24) = 1;
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v27);
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24);
    *(_QWORD *)a6 = off_24C53DB40;
    if ((v28 & 7) != 0)
    {
      v20 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  }
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
  return sub_20C5C9ACC((uint64_t)&v29);
}

void sub_20C5CD24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput *v10;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput *i;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t *EmptyString;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput **v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput *v22;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput *v23;
  char v24[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC(a2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 216), (uint64_t)&v22);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (uint64_t)v24);
  if ((v22 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v24, v7))sub_20C5BC9A8(a3, (uint64_t)v24);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(this, 1, (uint64_t *)&v22);
  v10 = v22;
  for (i = v23; v10 != i; v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)((char *)v10 + 32))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(v10, (uint64_t)&v29);
    if ((v29 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v29 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier((unsigned __int8 *)EmptyString, (uint64_t *)&v20);
    if ((v29 & 7) != 0)
    {
      v14 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v21 - (uint64_t)v20) >> 3) >= 2
      && pxrInternal__aapl__pxrReserved__::TfToken::operator==(a2, (unsigned __int8 *)(v21 - 24)))
    {
      v16 = a3[1];
      if (v16 >= a3[2])
      {
        v17 = sub_20C5CE650(a3, (uint64_t)v10);
      }
      else
      {
        sub_20C37F2BC((uint64_t)(a3 + 2), a3[1], (uint64_t)v10);
        v17 = v16 + 32;
        a3[1] = v16 + 32;
      }
      a3[1] = v17;
    }
    v29 = (unint64_t)&v20;
    sub_20BDE5038((void ***)&v29);
  }
  v20 = &v22;
  sub_20C5BE1A0((void ***)&v20);
  if ((v28 & 7) != 0)
  {
    v18 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
}

void sub_20C5CD49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C5BCAB8((uint64_t)va);
  sub_20C5BE1A0((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 208), a2, (uint64_t)&v10);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 88), a3);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 208), a2, (uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a3);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 208), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  char *v21;
  pxrInternal__aapl__pxrReserved__::SdfPath **v22;
  char v23;

  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v11 = *a2;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = &v19;
  v23 = 0;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
  v19 = v14;
  v20 = v14;
  *(_QWORD *)v14 = v11;
  v21 = (char *)v14 + 8;
  if ((v11 & 7) != 0)
  {
    v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 208), &v19, a3, a4, a5);
  v22 = &v19;
  sub_20BEEB2B8((void ***)&v22);
  if ((v11 & 7) != 0)
  {
    v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

void sub_20C5CD868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a5);
  sub_20BEEB2B8((void ***)va);
  if (v6)
  {
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;

  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 208), a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 32), a2, (uint64_t)&v10);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 88), a3);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 32), a2, (uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a3);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 32), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeDisplacementSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  char *v21;
  pxrInternal__aapl__pxrReserved__::SdfPath **v22;
  char v23;

  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v11 = *a2;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = &v19;
  v23 = 0;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
  v19 = v14;
  v20 = v14;
  *(_QWORD *)v14 = v11;
  v21 = (char *)v14 + 8;
  if ((v11 & 7) != 0)
  {
    v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 32), &v19, a3, a4, a5);
  v22 = &v19;
  sub_20BEEB2B8((void ***)&v22);
  if ((v11 & 7) != 0)
  {
    v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

void sub_20C5CDC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a5);
  sub_20BEEB2B8((void ***)va);
  if (v6)
  {
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeDisplacementSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;

  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 32), a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 232), a2, (uint64_t)&v10);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 88), a3);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C5CCFEC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 232), a2, (uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a3);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 232), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeVolumeSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  char *v21;
  pxrInternal__aapl__pxrReserved__::SdfPath **v22;
  char v23;

  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v11 = *a2;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = &v19;
  v23 = 0;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
  v19 = v14;
  v20 = v14;
  *(_QWORD *)v14 = v11;
  v21 = (char *)v14 + 8;
  if ((v11 & 7) != 0)
  {
    v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 232), &v19, a3, a4, a5);
  v22 = &v19;
  sub_20BEEB2B8((void ***)&v22);
  if ((v11 & 7) != 0)
  {
    v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

void sub_20C5CE000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a5);
  sub_20BEEB2B8((void ***)va);
  if (v6)
  {
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeVolumeSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;

  v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10)
    v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 232), a2, a3, a4, a5);
}

void sub_20C5CE0B8(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  _WORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _WORD *v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x10uLL);
  v4[4] = 257;
  *(_QWORD *)v4 = &unk_24C53D878;
  v9 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53D8D0;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v10 = v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C5CE174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20C96BDF8(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C5CE1A0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5CE370((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5CE274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5CE2C0(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5CE350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5CE370(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5CE3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5CE404(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);
  operator delete(v1);
}

uint64_t sub_20C5CE418(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_20C5CE420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 1);
}

void sub_20C5CE42C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5CE440(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5CE458(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53D920))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C5CE4A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C53D948;
  result[1] = v3;
  return result;
}

uint64_t sub_20C5CE4D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C53D948;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C5CE4F0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_20C35C4F8((uint64_t)v7, (uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (_DWORD *)(*(_QWORD *)(a1 + 8) + 16));
  sub_20C5CBEE4((pxrInternal__aapl__pxrReserved__::UsdProperty *)v7, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12);
  if (!v13 || (*(_BYTE *)(v13 + 57) & 8) != 0)
    v3 = 0;
  else
    v3 = (*(uint64_t (**)(uint64_t *))(v12 + 32))(&v12);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v3;
}

void sub_20C5CE5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15)
{
  unsigned int *v16;
  unsigned int v17;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&a15);
  if ((a14 & 7) != 0)
  {
    v16 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_20C96BBBC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5CE608(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53D9A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C5CE644()
{
  return &unk_24C53D9A8;
}

uint64_t sub_20C5CE650(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C5BE288(a1, &v11);
  v9 = a1[1];
  sub_20C5BE434(&v11);
  return v9;
}

void sub_20C5CE728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5BE434((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D9C8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdShade/materialBindingAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdShadeMaterialBindingAPI pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingA"
                            "PI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53D9C8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5CE8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return 5;
}

uint64_t sub_20C5CE8F8(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A7D8, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdShadeMaterialBindingAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5CEAB0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D9C8;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53D9C8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5CEA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5CEAB0(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A7D8, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdShadeMaterialBindingAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A7E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A7E0))
  {
    __cxa_guard_release(&qword_25498A7E0);
  }
  return &qword_25498A7D8;
}

void sub_20C5CEBCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A7E0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A7F0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)__cxa_guard_acquire(&qword_25498A7F0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(v3);
      byte_25498A7E8 = sub_20C35BD7C((char *)&qword_25498A7D8, v4, v5);
      __cxa_guard_release(&qword_25498A7F0);
    }
  }
  return byte_25498A7E8;
}

void sub_20C5CEC48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A7F0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(this);
  return &qword_25498A7D8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A810);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A810))
  {
    qword_25498A7F8 = 0;
    unk_25498A800 = 0;
    qword_25498A808 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A7F8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A810);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A830);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A830))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498A818 = 0;
    unk_25498A820 = 0;
    qword_25498A828 = 0;
    sub_20BFE538C(&qword_25498A818, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A818, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A830);
  }
  if (v1)
    return &qword_25498A818;
  else
    return &qword_25498A7F8;
}

void sub_20C5CED78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A830);
  _Unwind_Resume(a1);
}

void sub_20C5CED90()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5CEEC8(a2, (unsigned int **)&v9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a3);
  if ((v9 & 7) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C5CEE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5CEEC8(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  unint64_t v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int **v14;
  unsigned int *v15;
  void *__p;
  char v17;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v5 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (v5 != v6)
  {
    if (!v7)
      v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 20) & 0xFFFFFFFFFFFFFFF8))
    {
      v13 = *(unsigned int **)(sub_20C5D4B1C() + 8);
      *a2 = v13;
      if ((v13 & 7) == 0)
        return;
      v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8)
        v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v8 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v9)
          v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v9 + 104), a1, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
        if (v17 < 0)
          operator delete(__p);
        return;
      }
      v14 = (unsigned int **)sub_20C5D4B1C();
      v15 = *v14;
      *a2 = *v14;
      if ((v15 & 7) == 0)
        return;
      v11 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
    }
    goto LABEL_27;
  }
  if (!v7)
    v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v10 = (unsigned int *)*((_QWORD *)v7 + 13);
  *a2 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
LABEL_27:
    if ((v12 & 1) == 0)
      *a2 = v11;
  }
}

void sub_20C5CF070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  sub_20C35C4F8((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5CF190(a2, a3, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a4);
  if ((v11 & 7) != 0)
  {
    v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
}

void sub_20C5CF154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5CF190(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string __p;
  void **v36;
  char v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8))
  {
    v29 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v29)
      v29 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v29 + 112), a1, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7)
      v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 20) & 0xFFFFFFFFFFFFFFF8))
    {
      v30 = sub_20C5D4B1C();
      pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::SdfPath *)(v30 + 24), a1, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8)
        v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v8 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v9)
          v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        v10 = (unsigned int *)*((_QWORD *)v9 + 14);
        v38 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            v38 = v11;
        }
        v13 = (unsigned int *)*a2;
        v39 = v13;
        if ((v13 & 7) != 0)
        {
          v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 2, v14));
          if ((v15 & 1) == 0)
            v39 = v14;
        }
        v16 = *(unsigned int **)a1;
        v40 = v16;
        if ((v16 & 7) != 0)
        {
          v17 = (unsigned int *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 2, v17));
          if ((v18 & 1) == 0)
            v40 = v17;
        }
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v36 = (void **)&v32;
        v37 = 0;
        v19 = operator new(0x18uLL);
        v20 = 0;
        v32 = v19;
        v33 = v19;
        v34 = v19 + 3;
        do
        {
          v21 = (&v38)[v20];
          *v19 = v21;
          if ((v21 & 7) != 0)
          {
            v22 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 2, v22));
            if ((v23 & 1) == 0)
              *v19 &= 0xFFFFFFFFFFFFFFF8;
          }
          ++v20;
          ++v19;
        }
        while (v20 != 3);
        v33 = v19;
        pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v32, &__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
        v24 = (unsigned int **)&v41;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v36 = (void **)&v32;
        sub_20BEEB2B8(&v36);
        do
        {
          v26 = (uint64_t)*--v24;
          v25 = v26;
          if ((v26 & 7) != 0)
          {
            v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
            do
              v28 = __ldxr(v27);
            while (__stlxr(v28 - 2, v27));
          }
        }
        while (v24 != &v38);
        return;
      }
      v31 = sub_20C5D4B1C();
      pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::SdfPath *)(v31 + 16), a1, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C5CF498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfPath **v16;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(this)
     + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  *((_DWORD *)this + 2) = *(_DWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BFD6E54((_DWORD *)this + 6, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 7, (_DWORD *)a2 + 5);
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *((_QWORD *)this + 4) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C5CF6C4(a2, (_QWORD *)this + 5);
  *((_BYTE *)this + 48) = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)this + 8), (uint64_t *)&v13);
  if (v14 - (_QWORD)v13 == 8 && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v13))
  {
    v11 = v13;
    sub_20C01A074((int *)this, v13);
    sub_20C01A0C8(v4, (_DWORD *)v11 + 1);
    *((_BYTE *)this + 48) = 1;
  }
  v16 = &v13;
  sub_20BFD6F90((void ***)&v16);
  return this;
}

void sub_20C5CF674(_Unwind_Exception *a1)
{
  _DWORD *v1;
  uint64_t v2;

  sub_20C377F1C(v2);
  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

void sub_20C5CF6C4(pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8[3];
  void **v9;

  pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(a1, v8);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((v8[1] - v8[0]) >> 3);
  if (v3 == 3 || v3 == 5)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v4)
      v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v5 = *(_QWORD *)v4;
    *a2 = *(_QWORD *)v4;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v9 = (void **)v8;
  sub_20BDE5038(&v9);
}

void sub_20C5CF79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BDE5038(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::GetMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)&v22, (uint64_t *)this + 2, (_DWORD *)this + 6);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v22, v4))
  {
    v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
    if ((v26 & 7) != 0)
    {
      v6 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_20BFD265C(&v24);
    if (v23)
      sub_20C35C614(v23);
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)this + 8), v8, &v20);
      v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v20);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, this, (uint64_t)&v22);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
      *(_QWORD *)a2 = off_24C53D820;
      if ((v26 & 7) != 0)
      {
        v10 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_20BFD265C(&v24);
      if (v23)
        sub_20C35C614(v23);
      v12 = v21;
      if (v21)
      {
        v13 = (unsigned int *)(v21 + 8);
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      return;
    }
  }
  else
  {
    if ((v26 & 7) != 0)
    {
      v16 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_20BFD265C(&v24);
    if (v23)
      sub_20C35C614(v23);
  }
  v22 = 1;
  v23 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
  *(_QWORD *)a2 = off_24C53D820;
  if ((v26 & 7) != 0)
  {
    v18 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C5CF9D4(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  if (a3)
  {
    v4 = a3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel(this, a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(a3, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v6);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5CFABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C377F1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *i;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  int v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;

  sub_20C35C4F8((uint64_t)&v28, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v27 = 0;
  sub_20C5CF190((pxrInternal__aapl__pxrReserved__::TfToken *)&v27, a2, (uint64_t)&v22);
  if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v22 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v28, EmptyString, (uint64_t *)&v33);
  if ((v22 & 7) != 0)
  {
    v7 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v27 & 7) != 0)
  {
    v9 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((v32 & 7) != 0)
  {
    v11 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_20BFD265C(&v30);
  if (v29)
    sub_20C35C614(v29);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = v33;
  for (i = v34; v13 != i; v13 += 8)
  {
    if (*v13 == 4)
    {
      sub_20C3AD860((uint64_t)v13, (uint64_t)&v28);
      sub_20C5CF6C4((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, &v22);
      v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      v16 = *(_QWORD *)a2;
      if ((v22 & 7) != 0)
      {
        do
          v17 = __ldxr(v15);
        while (__stlxr(v17 - 2, v15));
      }
      if (v15 == (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD860((uint64_t)v13, (uint64_t)&v22);
        sub_20C5CFDB8(a3, (uint64_t)&v22);
        if ((v26 & 7) != 0)
        {
          v18 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
        sub_20BFD265C(&v24);
        if (v23)
          sub_20C35C614(v23);
      }
      if ((v32 & 7) != 0)
      {
        v20 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      sub_20BFD265C(&v30);
      if (v29)
        sub_20C35C614(v29);
    }
  }
  v28 = (void **)&v33;
  sub_20C37FA04(&v28);
}

void sub_20C5CFD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a6);
  if ((a6 & 7) != 0)
  {
    v7 = (unsigned int *)(a6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20C5CFDB8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v10 = v4 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v9];
    v17 = &v13[32 * v12];
    sub_20C3AE790(v5, (uint64_t)v15, a2);
    v16 = v15 + 32;
    sub_20C3AF318(a1, &v14);
    v8 = a1[1];
    result = sub_20C3AF4C4(&v14);
  }
  else
  {
    result = sub_20C3AE790((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_20C5CFEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AF4C4((void **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _BOOL4 IsPrimPath;
  _DWORD *v12;
  _DWORD *v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  uint64_t v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfPath **v18;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(this)
     + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 3);
  *((_DWORD *)this + 4) = *(_DWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BFD6E54((_DWORD *)this + 8, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 9, (_DWORD *)a2 + 5);
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 5) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *((_QWORD *)this + 5) &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(a2, (uint64_t *)&v15);
  if (v16 - (_QWORD)v15 == 16)
  {
    IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v15);
    if (IsPrimPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 8)))
    {
      v12 = (_DWORD *)((char *)v15 + 8 * !IsPrimPath);
      sub_20C01A074((int *)this + 2, v12);
      sub_20C01A0C8((int *)this + 3, v12 + 1);
      v13 = (_DWORD *)((char *)v15 + 8 * IsPrimPath);
      sub_20C01A074((int *)this, v13);
      sub_20C01A0C8(v4, v13 + 1);
    }
  }
  v18 = &v15;
  sub_20BFD6F90((void ***)&v18);
  return this;
}

void sub_20C5D0048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;

  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  sub_20C377F1C(v14);
  sub_20BFD1A18(v13);
  sub_20BFD1A18(v12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)&v22, (uint64_t *)this + 3, (_DWORD *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v22, v4))
  {
    v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 2);
    if ((v26 & 7) != 0)
    {
      v6 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_20BFD265C(&v24);
    if (v23)
      sub_20C35C614(v23);
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)((char *)this + 16), v8, &v20);
      v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v20);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)((char *)this + 8), (uint64_t)&v22);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
      *(_QWORD *)a2 = off_24C53D820;
      if ((v26 & 7) != 0)
      {
        v10 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_20BFD265C(&v24);
      if (v23)
        sub_20C35C614(v23);
      v12 = v21;
      if (v21)
      {
        v13 = (unsigned int *)(v21 + 8);
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      return;
    }
  }
  else
  {
    if ((v26 & 7) != 0)
    {
      v16 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_20BFD265C(&v24);
    if (v23)
      sub_20C35C614(v23);
  }
  v22 = 1;
  v23 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
  *(_QWORD *)a2 = off_24C53D820;
  if ((v26 & 7) != 0)
  {
    v18 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C5D02AC(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  if (a3)
  {
    v4 = a3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;

  sub_20C35C4F8((uint64_t)&v21, (uint64_t *)this + 3, (_DWORD *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v21, v4))
  {
    v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
    if ((v25 & 7) != 0)
    {
      v6 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    if (v22)
      sub_20C35C614(v22);
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)((char *)this + 16), v8, &v21);
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection(this, &v21, v9, a2);
      v10 = v22;
      if (v22)
      {
        v11 = (unsigned int *)((char *)v22 + 8);
        do
        {
          v12 = __ldxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v10 + 8))(v10);
      }
      return;
    }
  }
  else
  {
    if ((v25 & 7) != 0)
    {
      v14 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    if (v22)
      sub_20C35C614(v22);
  }
  LODWORD(v21) = 1;
  v22 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
  v25 = 0;
  v20 = 0;
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21, &v20);
  *(_QWORD *)a2 = off_24C537740;
  if ((v20 & 7) != 0)
  {
    v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if ((v25 & 7) != 0)
  {
    v18 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
}

void sub_20C5D04F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (a12)
    sub_20C96B0D8(a12);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v2;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v6;
  const char *v7;
  int v8;
  void *v9;
  int v10;
  size_t v11;
  size_t v12;
  _BOOL8 v13;
  size_t v14;
  const char *v15;
  _QWORD v17[2];
  char v18;

  v2 = sub_20C398E78(this);
  if ((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 104);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v6)
    v6 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v7 = (const char *)v17;
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(v5, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v6 + 24), (uint64_t)v17);
  v8 = v18;
  v9 = (void *)v17[0];
  if (v18 < 0)
    v7 = (const char *)v17[0];
  v10 = *((char *)EmptyString + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)EmptyString + 23);
  else
    v11 = EmptyString[1];
  v12 = strlen(v7);
  if (v11 >= v12)
  {
    v14 = v12;
    if (v10 >= 0)
      v15 = (const char *)EmptyString;
    else
      v15 = (const char *)*EmptyString;
    v13 = strncmp(v15, v7, v14) == 0;
    if (v8 < 0)
      goto LABEL_20;
  }
  else
  {
    v13 = 0;
    if (v18 < 0)
LABEL_20:
      operator delete(v9);
  }
  return v13;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindings(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v4;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v5;
  unint64_t v6;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v7;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v9;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v10;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship **v11;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(this, a2, (uint64_t *)&v9);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20C5D0768(a3, (v10 - v9) >> 5);
  v4 = v9;
  v5 = v10;
  while (v4 != v5)
  {
    v6 = a3[1];
    if (v6 >= a3[2])
    {
      v8 = sub_20C5D5380(a3, v4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)a3[1], v4);
      v8 = v6 + 48;
      a3[1] = v6 + 48;
    }
    a3[1] = v8;
    if (!sub_20C5D0818(v8 - 48, v7))
      a3[1] = (uint64_t)sub_20C5D4EE8(a3[1] - 48);
    v4 = (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)((char *)v4 + 32);
  }
  v11 = &v9;
  sub_20C3AF230((void ***)&v11);
}

void sub_20C5D0730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_20C5D51A0(&a12);
  a12 = (void **)&a9;
  sub_20C3AF230(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5D0768(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE6D0B4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    sub_20C5D5210(a1, v7);
    return sub_20C5D5334((uint64_t)v7);
  }
  return result;
}

void sub_20C5D0804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5D5334((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C5D0818(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  _BOOL8 result;

  result = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a1 + 16), a2);
  if (result)
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8));
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetCollectionBindings(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  unint64_t v13;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20C5D0768(a3, (a2[1] - *a2) >> 3);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = (uint64_t *)(a1 + 8);
    v9 = (_DWORD *)(a1 + 16);
    do
    {
      sub_20C35C4F8((uint64_t)&v18, v8, v9);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, v6, (uint64_t)v23);
      if ((v22 & 7) != 0)
      {
        v10 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (v19)
        sub_20C35C614(v19);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v23, v12))
      {
        v13 = a3[1];
        if (v13 >= a3[2])
        {
          v15 = sub_20C5D5484(a3, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v23);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)a3[1], (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v23);
          v15 = v13 + 48;
          a3[1] = v13 + 48;
        }
        a3[1] = v15;
        if (!sub_20C5D0818(v15 - 48, v14))
          a3[1] = (uint64_t)sub_20C5D4EE8(a3[1] - 48);
      }
      if ((v27 & 7) != 0)
      {
        v16 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_20BFD265C(&v25);
      if (v24)
        sub_20C35C614(v24);
      v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
    }
    while (v6 != v7);
  }
}

void sub_20C5D09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C5D51A0((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  unint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;

  v14 = 0;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v15 = 0;
  result = sub_20C361F00((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v5 + 8), (uint64_t)&v14, &v15);
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = v14;
  if (!v14)
  {
    result = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!result)
      result = (unint64_t)sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v9 = *(unsigned int **)(result + 240);
  }
  *a2 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *a2 = v10;
  }
  if ((v14 & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return result;
}

void sub_20C5D0B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v21 = 0;
    v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v10)
      v10 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v22 = 0;
    sub_20C361F00((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 8), (uint64_t)&v21, &v22);
    if ((v22 & 7) != 0)
    {
      v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v13 = v21;
    if (!v21)
      goto LABEL_27;
    v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v14)
      v14 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v13 = v21;
    if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 30) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_27:
      result = 1;
    }
    else
    {
      v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v15)
        v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v16)
        v16 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v22 = 0;
      result = sub_20C361C9C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v15 + 8), (uint64_t (**)(_QWORD, uint64_t))v16 + 30, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
      if ((v22 & 7) != 0)
      {
        v17 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      v13 = v21;
    }
    if ((v13 & 7) != 0)
    {
      v19 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  else
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v6)
      v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v22 = 0;
    result = sub_20C361C9C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 8), (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
    if ((v22 & 7) != 0)
    {
      v8 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  return result;
}

void sub_20C5D0D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateDirectBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5CEEC8(a2, (unsigned int **)&v9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, 0, a3);
  if ((v9 & 7) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C5D0E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a4@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  sub_20C5CF190(a2, a3, (uint64_t)&v15);
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, 0, a4);
  if ((v14 & 7) != 0)
  {
    v6 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if ((v15 & 7) != 0)
  {
    v8 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C5D0F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  char *v14;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfPath **v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateDirectBindingRel(this, a4, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v15);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v15, v6))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v15, a3, v7);
    sub_20C3630C0((uint64_t)a2, &v22);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v20 = &v12;
    v21 = 0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
    v13 = v12;
    v14 = (char *)v12 + 8;
    v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6DBC((uint64_t)&v14, &v22, &v24, v12);
    v8 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v15, &v12);
    v20 = &v12;
    sub_20BFD6F90((void ***)&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
  }
  else
  {
    v8 = 0;
  }
  if ((v19 & 7) != 0)
  {
    v9 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v8;
}

void sub_20C5D111C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a2, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a3, char **a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, const pxrInternal__aapl__pxrReserved__::TfToken *a6)
{
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  const std::string *EmptyString;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  const char *v25;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  const pxrInternal__aapl__pxrReserved__::TfToken *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  const char *Text;
  const char *v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v37;
  _DWORD *v38;
  char *v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  void **v46;
  char v47;
  _BYTE v48[4];
  int v49[2];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v12 = *a4;
  v45 = (unint64_t)v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
    v12 = *a4;
  }
  if (v12)
  {
    v15 = (unint64_t)v12 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
      EmptyString = (const std::string *)(v15 + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    if (std::string::find(EmptyString, 58, 0) != -1)
    {
      v40 = "usdShade/materialBindingAPI.cpp";
      v41 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Bind";
      v42 = 464;
      v43 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(const UsdCollectio"
                              "nAPI &, const UsdShadeMaterial &, const TfToken &, const TfToken &, const TfToken &) const";
      v44 = 0;
      v24 = (unint64_t)*a4 & 0xFFFFFFFFFFFFFFF8;
      if (v24)
      {
        v25 = (const char *)(v24 + 16);
        if (*(char *)(v24 + 39) < 0)
          v25 = *(const char **)v25;
      }
      else
      {
        v25 = "";
      }
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a2, (int *)&v37);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
      sub_20C3630C0((uint64_t)a3, &v46);
      v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid bindingName '%s', as it contains namespaces. Not binding collection <%s> to material <%s>.", v25, Text, v33);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
      sub_20BFD265C(&v46);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      sub_20BFD265C(&v37);
      v28 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    v17 = *((_QWORD *)a2 + 3);
    v37 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v37 = (unint64_t)v18;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (uint64_t)&v40);
    if ((v45 & 7) != 0)
    {
      v20 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    v45 = (unint64_t)v40;
    v40 = 0;
    if ((v37 & 7) != 0)
    {
      v22 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateCollectionBindingRel(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, a6, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v40);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v40, v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v40, a5, v27);
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a2, v49);
    sub_20C3630C0((uint64_t)a3, &v50);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v46 = (void **)&v37;
    v47 = 0;
    v37 = (unint64_t)operator new(0x10uLL);
    v38 = (_DWORD *)v37;
    v39 = (char *)(v37 + 16);
    v38 = sub_20BFD6DBC((uint64_t)&v39, v49, &v51, (_DWORD *)v37);
    v28 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v40, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v37);
    v46 = (void **)&v37;
    sub_20BFD6F90(&v46);
    v29 = 4;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48[v29 * 4]);
      v29 -= 2;
      sub_20BFD265C(&v49[v29]);
    }
    while (v29 * 4);
  }
  else
  {
    v28 = 0;
  }
  if ((v43 & 7) != 0)
  {
    v30 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
  sub_20BFD265C(&v42);
  if (v41)
    sub_20C35C614(v41);
LABEL_39:
  if ((v45 & 7) != 0)
  {
    v34 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  return v28;
}

void sub_20C5D14E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  unsigned int *v21;
  unsigned int v22;

  if ((a21 & 7) != 0)
  {
    v21 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;

  sub_20C35C4F8((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5CEEC8(a2, (unsigned int **)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16);
  if ((v21 & 7) != 0)
  {
    v3 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((v15 & 7) != 0)
  {
    v5 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v7))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v8 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16, &v12);
    v21 = (unint64_t)&v12;
    sub_20BFD6F90((void ***)&v21);
  }
  else
  {
    v8 = 0;
  }
  if ((v20 & 7) != 0)
  {
    v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  return v8;
}

void sub_20C5D1720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v7 - 24) = v6;
  sub_20BFD6F90((void ***)(v7 - 24));
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindCollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;

  sub_20C35C4F8((uint64_t)&v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5CF190(a2, a3, (uint64_t)&v23);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v18);
  if ((v23 & 7) != 0)
  {
    v5 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v18, v9))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v10 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v18, &v14);
    v23 = (unint64_t)&v14;
    sub_20BFD6F90((void ***)&v23);
  }
  else
  {
    v10 = 0;
  }
  if ((v22 & 7) != 0)
  {
    v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
  return v10;
}

void sub_20C5D18C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v7 - 24) = v6;
  sub_20BFD6F90((void ***)(v7 - 24));
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindAllBindings(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  uint64_t *v1;
  _DWORD *v2;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t *EmptyString;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  unsigned int *v8;
  unsigned int v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::SdfPath *v22[3];
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  pxrInternal__aapl__pxrReserved__::SdfPath **v35;

  v1 = (uint64_t *)((char *)this + 8);
  v2 = (_DWORD *)((char *)this + 16);
  sub_20C35C4F8((uint64_t)&v27, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v27, EmptyString, &v32);
  if ((v31 & 7) != 0)
  {
    v5 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  sub_20C35C4F8((uint64_t)&v23, v1, v2);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v7)
    v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v7 + 104), (uint64_t)&v27);
  if ((v26 & 7) != 0)
  {
    v8 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v27, v10))
  {
    v11 = v33;
    if (v33 >= v34)
    {
      v12 = sub_20C5D5588(&v32, (uint64_t)&v27);
    }
    else
    {
      sub_20C37F2BC((uint64_t)&v34, v33, (uint64_t)&v27);
      v12 = v11 + 32;
    }
    v33 = v12;
  }
  if ((v31 & 7) != 0)
  {
    v13 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v15 = v32;
  v16 = v33;
  if (v32 == v33)
  {
    LOBYTE(v17) = 1;
  }
  else
  {
    v17 = 1;
    do
    {
      sub_20C3AD860(v15, (uint64_t)&v27);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v27, v18))
      {
        memset(v22, 0, sizeof(v22));
        v17 &= pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v27, v22);
        v35 = v22;
        sub_20BFD6F90((void ***)&v35);
      }
      if ((v31 & 7) != 0)
      {
        v19 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_20BFD265C(&v29);
      if (v28)
        sub_20C35C614(v28);
      v15 += 32;
    }
    while (v15 != v16);
  }
  v27 = (void **)&v23;
  sub_20C3AF230(&v27);
  v27 = (void **)&v32;
  sub_20C37FA04(&v27);
  return v17 & 1;
}

void sub_20C5D1BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 72) = v17;
  sub_20C377F1C((uint64_t)&a17);
  a17 = (void **)(v18 - 80);
  sub_20C37FA04(&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::RemovePrimFromBindingCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(this, a3, a4, (uint64_t)v15);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v15, v5))goto LABEL_8;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v14, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v14, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12);
  if (v13 && (*(_BYTE *)(v13 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v12 + 32))(&v12))
  {
    sub_20C348EEC((uint64_t)a2, &v10);
    LOBYTE(a2) = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ExcludePath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v12);
  sub_20C5D4EE8((uint64_t)v14);
  if ((v6 & 1) == 0)
LABEL_8:
    LOBYTE(a2) = 1;
  if ((v19 & 7) != 0)
  {
    v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return a2 & 1;
}

void sub_20C5D1D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)va1);
  sub_20C5D4EE8((uint64_t)va2);
  sub_20C377F1C(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::AddPrimToBindingCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(this, a3, a4, (uint64_t)v15);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v15, v5))goto LABEL_8;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v14, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v14, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12);
  if (v13 && (*(_BYTE *)(v13 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v12 + 32))(&v12))
  {
    sub_20C348EEC((uint64_t)a2, &v10);
    LOBYTE(a2) = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v12);
  sub_20C5D4EE8((uint64_t)v14);
  if ((v6 & 1) == 0)
LABEL_8:
    LOBYTE(a2) = 1;
  if ((v19 & 7) != 0)
  {
    v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return a2 & 1;
}

void sub_20C5D1EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)va1);
  sub_20C5D4EE8((uint64_t)va2);
  sub_20C377F1C(v2 - 48);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim::BindingsAtPrim(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  void **v8;
  void **v9;
  const pxrInternal__aapl__pxrReserved__::TfType *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  int HasAPI;
  char v13;
  void ***v14;
  uint64_t v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  uint64_t *v23;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v30;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v31;
  unsigned int *v33;
  unsigned int v34;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  void **v43;
  void **v44;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v45;
  int v46;
  int v47;
  void ***v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 2) = 0u;
  v8 = (void **)((char *)this + 32);
  *((_QWORD *)this + 6) = 0;
  v9 = (void **)((char *)this + 8);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A7D8, v10);
  HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a2, SchemaInfo);
  v13 = HasAPI;
  if (((a4 | HasAPI) & 1) == 0)
    return this;
  v44 = (void **)&off_24C53DA20;
  v48 = &v44;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames((uint64_t)a2, (uint64_t)&v44, &v41);
  v14 = v48;
  if (v48 == &v44)
  {
    v15 = 4;
    v14 = &v44;
    goto LABEL_6;
  }
  if (v48)
  {
    v15 = 5;
LABEL_6:
    ((void (*)(void))(*v14)[v15])();
  }
  if (v41 != v42)
  {
    sub_20C5CEEC8(a3, (unsigned int **)&v40);
    v16 = v41;
    if (v41 != v42)
    {
      while ((*v16 & 0xFFFFFFFFFFFFFFF8) != (v40 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v16 == v42)
        {
          v16 = v42;
          break;
        }
      }
    }
    if (v16 != v42)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t)&v44);
      v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)operator new(0x38uLL);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(v17, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v44);
      v18 = *(_QWORD *)this;
      *(_QWORD *)this = v17;
      if (v18)
        sub_20C5D57D0((uint64_t)this, v18);
      if ((v48 & 7) != 0)
      {
        v19 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
      sub_20BFD265C(&v46);
      if (v45)
        sub_20C35C614(v45);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v21)
      v21 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8)
      && (!*(_QWORD *)this
       || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(*(_DWORD **)this)))
    {
      v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v22)
        v22 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      sub_20C5CEEC8(v22, (unsigned int **)&v38);
      v23 = v41;
      if (v41 != v42)
      {
        while ((*v23 & 0xFFFFFFFFFFFFFFF8) != (v38 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v23 == v42)
          {
            v23 = v42;
            break;
          }
        }
      }
      if (v23 != v42)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v38, (uint64_t)&v44);
        v24 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)operator new(0x38uLL);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(v24, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v44);
        v25 = *(_QWORD *)this;
        *(_QWORD *)this = v24;
        if (v25)
          sub_20C5D57D0((uint64_t)this, v25);
        if ((v48 & 7) != 0)
        {
          v26 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        sub_20BFD265C(&v46);
        if (v45)
          sub_20C35C614(v45);
      }
      if ((v38 & 7) != 0)
      {
        v28 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    if (*(_QWORD *)this
      && !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(*(_DWORD **)this))
    {
      *(_QWORD *)this = 0;
    }
    v30 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v30)
      v30 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C5D259C(&v41, a3, (uint64_t)&v38);
      if ((unsigned int *)v38 != v39)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v44, a2);
        v48 = 0;
        v44 = (void **)off_24C53D9C8;
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetCollectionBindings((uint64_t)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken **)&v38, (uint64_t *)&v36);
        sub_20C5D5870(v9);
        *(_OWORD *)((char *)this + 8) = v36;
        *((_QWORD *)this + 3) = v37;
        v37 = 0;
        v36 = 0uLL;
        v43 = (void **)&v36;
        sub_20C5D51A0(&v43);
        pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v44);
      }
      v44 = (void **)&v38;
      sub_20BEEB2B8(&v44);
    }
    v31 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v31)
      v31 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    sub_20C5D259C(&v41, v31, (uint64_t)&v38);
    if ((unsigned int *)v38 != v39)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v44, a2);
      v48 = 0;
      v44 = (void **)off_24C53D9C8;
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetCollectionBindings((uint64_t)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken **)&v38, (uint64_t *)&v36);
      sub_20C5D5870(v8);
      *((_OWORD *)this + 2) = v36;
      *((_QWORD *)this + 6) = v37;
      v37 = 0;
      v36 = 0uLL;
      v43 = (void **)&v36;
      sub_20C5D51A0(&v43);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v44);
    }
    if ((v13 & 1) == 0
      && !atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API))
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API);
      atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API);
    }
    v44 = (void **)&v38;
    sub_20BEEB2B8(&v44);
    if ((v40 & 7) != 0)
    {
      v33 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
  }
  v44 = (void **)&v41;
  sub_20BEEB2B8(&v44);
  return this;
}

void sub_20C5D2428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t *v20;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;

  a20 = (void **)&a12;
  sub_20BEEB2B8(&a20);
  if ((a15 & 7) != 0)
  {
    v22 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  a20 = (void **)&a16;
  sub_20BEEB2B8(&a20);
  sub_20C5D51A0(&a20);
  sub_20C5D51A0(&a20);
  v24 = *v20;
  *v20 = 0;
  if (v24)
    sub_20C5D57D0((uint64_t)v20, v24);
  _Unwind_Resume(a1);
}

void sub_20C5D259C(uint64_t **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *EmptyString;
  const char *v21;
  int v22;
  size_t v23;
  size_t v24;
  const char *v25;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  const std::string *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = 0;
  sub_20C5CF190((pxrInternal__aapl__pxrReserved__::TfToken *)&v35, a2, (uint64_t)&v34);
  if ((v35 & 7) != 0)
  {
    v7 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v9 = v34;
  v10 = v34 & 0xFFFFFFFFFFFFFFF8;
  if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if (*(char *)(v10 + 39) < 0)
      v11 = *(_QWORD *)(v10 + 24);
    else
      v11 = *(unsigned __int8 *)(v10 + 39);
  }
  else
  {
    v11 = 0;
  }
  v12 = *a1;
  v13 = a1[1];
  if (*a1 != v13)
  {
    do
    {
      v14 = *v12 & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        v15 = *(char *)(v14 + 39);
        v16 = *(unsigned __int8 *)(v14 + 39);
        v17 = v15 < 0 ? *(_QWORD *)(v14 + 24) : *(unsigned __int8 *)(v14 + 39);
        if (v17 > v11)
        {
          v18 = (unint64_t *)(v14 + 16);
          v19 = v14 + 16;
          if (v15 < 0)
            v19 = *v18;
          if (*(_BYTE *)(v19 + v11) == 58)
          {
            if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              EmptyString = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else
            {
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v6);
              v16 = *(unsigned __int8 *)(v14 + 39);
            }
            v21 = *((char *)EmptyString + 23) >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
            v22 = (char)v16;
            v23 = (v16 & 0x80u) == 0 ? v16 : *(_QWORD *)(v14 + 24);
            v6 = strlen(v21);
            if (v23 >= v6)
            {
              v24 = v6;
              v25 = v22 >= 0 ? (const char *)v18 : (const char *)*v18;
              v6 = strncmp(v25, v21, v24);
              if (!(_DWORD)v6)
              {
                v26 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v26)
                  v26 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8)
                  || ((*v12 & 0xFFFFFFFFFFFFFFF8) == 0
                    ? (v31 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26))
                    : (v31 = (const std::string *)((*v12 & 0xFFFFFFFFFFFFFFF8) + 16)),
                      v6 = std::string::find(v31, 58, v11 + 1),
                      v6 == -1))
                {
                  v27 = *(uint64_t **)(a3 + 8);
                  if ((unint64_t)v27 >= *(_QWORD *)(a3 + 16))
                  {
                    v6 = (size_t)sub_20BFCA068((char **)a3, v12);
                  }
                  else
                  {
                    v28 = *v12;
                    *v27 = *v12;
                    if ((v28 & 7) != 0)
                    {
                      v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v30 = __ldxr(v29);
                      while (__stxr(v30 + 2, v29));
                      if ((v30 & 1) == 0)
                        *v27 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    v6 = (size_t)(v27 + 1);
                  }
                  *(_QWORD *)(a3 + 8) = v6;
                }
              }
            }
          }
        }
      }
      ++v12;
    }
    while (v12 != v13);
    v9 = v34;
  }
  if ((v9 & 7) != 0)
  {
    v32 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
}

void sub_20C5D27F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialPurposes@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v4 = *(_QWORD *)v3;
  v25 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v7)
    v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v8 = *((_QWORD *)v7 + 20);
  v26 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v11)
    v11 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v12 = *((_QWORD *)v11 + 6);
  v27 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  v16 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 3;
  do
  {
    v17 = *(&v25 + v16);
    *result = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *result &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    ++result;
  }
  while (v16 != 3);
  v20 = &v28;
  a1[1] = result;
  do
  {
    v22 = *--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v25);
  return result;
}

void sub_20C5D2A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  while (1)
  {
    v13 = *((_QWORD *)v11 - 1);
    v11 -= 8;
    v12 = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    if (v11 == &a11)
      _Unwind_Resume(exception_object);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetResolvedTargetPathFromBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X1>, _DWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v5;
  _BOOL4 IsCollectionBindingRel;
  _DWORD *v7;
  uint64_t v8[3];
  void **v9;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2) & 1) != 0)
  {
    memset(v8, 0, sizeof(v8));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(this, v8);
    IsCollectionBindingRel = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel(this, v5);
    v7 = (_DWORD *)(v8[0] + 8 * IsCollectionBindingRel);
    sub_20BFD6E54(a3, v7);
    sub_20BFD6EA4(a3 + 1, v7 + 1);
    v9 = (void **)v8;
    sub_20BFD6F90(&v9);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

void sub_20C5D2B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a7@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  char IsDefined;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__ *v23;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v24;
  void **v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding **v47;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *v48;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *v49;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v54;
  unint64_t *v55;
  unint64_t v56;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  unint64_t *v59;
  unint64_t v60;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v61;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v62;
  uint64_t v63;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding **v64;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *v65;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v76;
  unsigned int *v77;
  _BOOL4 v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v85;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v86;
  unint64_t *v87;
  unint64_t v88;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v89;
  void *v90;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v100;
  unint64_t *v101;
  unint64_t v102;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v103;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v104;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v105;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v109;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v111;
  uint64_t *SchemaInfo;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v120;
  char *v121;
  _DWORD *v122;
  uint64_t *v123;
  char *v127;
  _BYTE v128[24];
  uint64_t v129;
  int v130;
  int v131;
  char *v132;
  unint64_t v133;
  char *v134;
  char *v135;
  void *__p[2];
  int v137;
  int v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  void (**v142)(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v143;
  int v144;
  int v145;
  char *v146;
  char *v147;
  char *v148;
  int v149;
  __int128 v150;
  uint64_t v151;
  void **v152;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;

  v122 = (_DWORD *)(a1 + 16);
  v123 = (uint64_t *)(a1 + 8);
  v11 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)&v152, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v11, v12);
  if ((v155 & 7) != 0)
  {
    v14 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154 + 1);
  sub_20BFD265C(&v154);
  if (v153)
    sub_20C35C614(v153);
  if ((IsDefined & 1) == 0)
  {
    v152 = (void **)"usdShade/materialBindingAPI.cpp";
    v153 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeBoundMaterial";
    v154 = 728;
    v155 = (unint64_t)"UsdShadeMaterial pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBound"
                             "Material(BindingsCache *, CollectionQueryCache *, const TfToken &, UsdRelationship *, BOOL) const";
    v156 = 0;
    v23 = (pxrInternal__aapl__pxrReserved__ *)sub_20C35C4F8((uint64_t)&v149, v123, v122);
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, v23, v24);
    if (v138 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v152, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim (%s)", (const char *)v25);
    if (SHIBYTE(v138) < 0)
      operator delete(__p[0]);
    if ((v151 & 7) != 0)
    {
      v26 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v150 + 3);
    sub_20BFD265C((_DWORD *)&v150 + 2);
    if ((_QWORD)v150)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v150);
    LODWORD(v152) = 1;
    v153 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v154);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v154 + 1);
    v155 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a7, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v152);
    *(_QWORD *)a7 = off_24C53D820;
    if ((v155 & 7) != 0)
    {
      v28 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154 + 1);
    sub_20BFD265C(&v154);
    if (v153)
      sub_20C35C614(v153);
    return;
  }
  v16 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      v16 &= 0xFFFFFFFFFFFFFFF8;
  }
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v152 = (void **)&v146;
  LOBYTE(v153) = 0;
  v19 = (char *)operator new(8uLL);
  v146 = v19;
  v147 = v19;
  *(_QWORD *)v19 = v16;
  v148 = v19 + 8;
  if ((v16 & 7) != 0)
  {
    v20 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 2, v20));
    if ((v21 & 1) == 0)
      *(_QWORD *)v19 &= 0xFFFFFFFFFFFFFFF8;
    v147 = v19 + 8;
    do
      v22 = __ldxr(v20);
    while (__stlxr(v22 - 2, v20));
  }
  else
  {
    v147 = v19 + 8;
  }
  v30 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v30)
    v30 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v120 = a7;
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8))
  {
    v36 = v147;
  }
  else
  {
    v31 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v31)
      v31 = (uint64_t *)sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v32 = v147;
    if (v147 >= v148)
    {
      v36 = sub_20BFCA068(&v146, v31);
    }
    else
    {
      v33 = *v31;
      *(_QWORD *)v147 = *v31;
      if ((v33 & 7) != 0)
      {
        v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 2, v34));
        if ((v35 & 1) == 0)
          *(_QWORD *)v32 &= 0xFFFFFFFFFFFFFFF8;
      }
      v36 = v32 + 8;
    }
    v147 = v36;
  }
  v127 = v146;
  if (v146 == v36)
  {
LABEL_155:
    LODWORD(v152) = 1;
    v153 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v154);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v154 + 1);
    v155 = 0;
    *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v120, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v152) = off_24C53D820;
    if ((v155 & 7) != 0)
    {
      v98 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
      do
        v99 = __ldxr(v98);
      while (__stlxr(v99 - 2, v98));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154 + 1);
    sub_20BFD265C(&v154);
    if (v153)
      sub_20C35C614(v153);
    goto LABEL_192;
  }
  v121 = v36;
  while (2)
  {
    LODWORD(v152) = 1;
    v153 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v154);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v154 + 1);
    v155 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v142, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v152);
    v142 = off_24C53D820;
    if ((v155 & 7) != 0)
    {
      v37 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154 + 1);
    sub_20BFD265C(&v154);
    if (v153)
      sub_20C35C614(v153);
    LODWORD(v152) = 4;
    v153 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v154);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v154 + 1);
    v155 = 0;
    sub_20C35C4F8((uint64_t)&v149, v123, v122);
    v39 = 0;
    while (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v149))
    {
      sub_20C348EEC((uint64_t)&v149, (int *)__p);
      sub_20C5D58CC(a2, (unsigned int *)__p, &v141);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      v40 = v141;
      if (v141 == __PAIR128__(a2 + 16, 0))
      {
        v41 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *)operator new(0x38uLL);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim::BindingsAtPrim(v41, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v149, a4, a6);
        v133 = (unint64_t)v41;
        sub_20C348EEC((uint64_t)&v149, &v130);
        LODWORD(v140) = v130;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v130);
        DWORD1(v140) = v131;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v131);
        v42 = v133;
        v133 = 0;
        *((_QWORD *)&v140 + 1) = v42;
        *(_DWORD *)v128 = v140;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v140);
        *(_DWORD *)&v128[4] = DWORD1(v140);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v140 + 1);
        v43 = *((_QWORD *)&v140 + 1);
        *((_QWORD *)&v140 + 1) = 0;
        *(_QWORD *)&v128[8] = v43;
        sub_20C5D5C64(a2, (unsigned int *)v128, 0, (uint64_t)__p);
        v141 = *(_OWORD *)__p;
        v44 = *(char **)&v128[8];
        *(_QWORD *)&v128[8] = 0;
        if (v44)
          sub_20C5D5C00((uint64_t)&v128[8], v44);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v128[4]);
        sub_20BFD265C(v128);
        v45 = (char *)*((_QWORD *)&v140 + 1);
        *((_QWORD *)&v140 + 1) = 0;
        if (v45)
          sub_20C5D5C00((uint64_t)&v140 + 8, v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v140 + 1);
        sub_20BFD265C(&v140);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v131);
        sub_20BFD265C(&v130);
        v46 = (char *)v133;
        v133 = 0;
        if (v46)
          sub_20C5D5C00((uint64_t)&v133, v46);
        v40 = v141;
      }
      v47 = *(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding ***)(v40 + 16);
      v48 = *v47;
      if (!*v47 || (*((_QWORD *)v48 + 5) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v127 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_89;
      v49 = *v47;
      if (!v39)
        goto LABEL_78;
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)v48 + 8), (unsigned int **)__p);
      v50 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v50)
        v50 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v51 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      v52 = *((_QWORD *)v50 + 24);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        do
          v53 = __ldxr(v51);
        while (__stlxr(v53 - 2, v51));
      }
      if (v51 == (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8))
      {
        v49 = *v47;
LABEL_78:
        v39 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v49);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::GetMaterial(*v47, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p);
        v54 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1];
        if (__p[1])
        {
          v55 = (unint64_t *)((char *)__p[1] + 48);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v57 = v143;
        v143 = v54;
        if (v57)
          sub_20C35C614(v57);
        sub_20C01A074(&v144, &v137);
        sub_20C01A0C8(&v145, &v138);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)__p);
        LODWORD(v152) = *((_DWORD *)v48 + 2);
        v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)v48 + 2);
        if (v58)
        {
          v59 = (unint64_t *)((char *)v58 + 48);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v61 = v153;
        v153 = v58;
        if (v61)
          sub_20C35C614(v61);
        sub_20C01A074((int *)&v154, (_DWORD *)v48 + 6);
        sub_20C01A0C8((int *)&v154 + 1, (_DWORD *)v48 + 7);
        sub_20BF32220(&v155, (_QWORD *)v48 + 4);
        goto LABEL_89;
      }
      v39 = 1;
LABEL_89:
      v62 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v62)
        v62 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v63 = 1;
      if ((*(_QWORD *)v127 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFF8))
      {
        v63 = 4;
        v64 = v47 + 4;
      }
      else
      {
        v64 = v47 + 1;
      }
      v65 = v47[v63];
      v66 = v64[1];
      while (v65 != v66)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(v65, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p);
        if (__p[1]
          && (*((_BYTE *)__p[1] + 57) & 8) == 0
          && ((*((uint64_t (**)(void **))__p[0] + 4))(__p) & 1) != 0)
        {
          sub_20C5D5EE0(a3, (unsigned int *)v65, &v140);
          v67 = v140;
          if (v140 == __PAIR128__(a3 + 16, 0))
          {
            v68 = operator new(0x90uLL);
            v68[4] = 0;
            *(_OWORD *)v68 = 0u;
            *((_OWORD *)v68 + 1) = 0u;
            *((_DWORD *)v68 + 10) = 1065353216;
            v68[8] = 0;
            v68[7] = 0;
            v68[6] = v68 + 7;
            *((_BYTE *)v68 + 72) = 0;
            *((_OWORD *)v68 + 5) = 0u;
            *((_OWORD *)v68 + 6) = 0u;
            *((_OWORD *)v68 + 7) = 0u;
            *((_OWORD *)v68 + 8) = 0u;
            v135 = (char *)v68;
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery((uint64_t)__p, (uint64_t)v68);
            sub_20BFD6E54(&v130, v65);
            sub_20BFD6EA4(&v131, (_DWORD *)v65 + 1);
            v69 = v135;
            v135 = 0;
            v132 = v69;
            LODWORD(v133) = v130;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v130);
            HIDWORD(v133) = v131;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v131);
            v70 = v132;
            v132 = 0;
            v134 = v70;
            sub_20C5D62C4(a3, (unsigned int *)&v133, 0, (uint64_t)v128);
            v140 = *(_OWORD *)v128;
            v71 = v134;
            v134 = 0;
            if (v71)
              sub_20C5D6214((uint64_t)&v134, v71);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v133 + 1);
            sub_20BFD265C(&v133);
            v72 = v132;
            v132 = 0;
            if (v72)
              sub_20C5D6214((uint64_t)&v132, v72);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v131);
            sub_20BFD265C(&v130);
            v73 = v135;
            v135 = 0;
            if (v73)
              sub_20C5D6214((uint64_t)&v135, v73);
            v67 = v140;
          }
          v74 = *(_QWORD *)(v67 + 16);
          sub_20C3630C0(a1, v128);
          LOBYTE(v74) = sub_20C377DB0(v74, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v128, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v128[4]);
          sub_20BFD265C(v128);
          if ((_BYTE)v74)
          {
            if (!v39)
              goto LABEL_125;
            sub_20C35C4F8((uint64_t)v128, (uint64_t *)&v153, &v154);
            if (*(_DWORD *)v128 == v149
              && *(_OWORD *)&v128[8] == v150
              && (v75 = v129, (v129 & 0xFFFFFFFFFFFFFFF8) == (v151 & 0xFFFFFFFFFFFFFFF8)))
            {
              v78 = 1;
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)v65 + 16), (unsigned int **)&v133);
              v76 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
              if (!v76)
                v76 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
              v77 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
              v78 = (v133 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v76 + 24) & 0xFFFFFFFFFFFFFFF8);
              if ((v133 & 7) != 0)
              {
                do
                  v79 = __ldxr(v77);
                while (__stlxr(v79 - 2, v77));
              }
              v75 = v129;
            }
            if ((v75 & 7) != 0)
            {
              v80 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
              do
                v81 = __ldxr(v80);
              while (__stlxr(v81 - 2, v80));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v128[20]);
            sub_20BFD265C(&v128[16]);
            if (*(_QWORD *)&v128[8])
              sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v128[8]);
            if (v78)
            {
LABEL_125:
              v39 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v65 + 2);
              pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetMaterial(v65, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v128);
              v82 = *(_QWORD *)&v128[8];
              if (*(_QWORD *)&v128[8])
              {
                v83 = (unint64_t *)(*(_QWORD *)&v128[8] + 48);
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
              }
              v85 = v143;
              v143 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v82;
              if (v85)
                sub_20C35C614(v85);
              sub_20C01A074(&v144, &v128[16]);
              sub_20C01A0C8(&v145, &v128[20]);
              pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v128);
              LODWORD(v152) = *((_DWORD *)v65 + 4);
              v86 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)v65 + 3);
              if (v86)
              {
                v87 = (unint64_t *)((char *)v86 + 48);
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
              }
              v89 = v153;
              v153 = v86;
              if (v89)
                sub_20C35C614(v89);
              sub_20C01A074((int *)&v154, (_DWORD *)v65 + 8);
              sub_20C01A0C8((int *)&v154 + 1, (_DWORD *)v65 + 9);
              sub_20BF32220(&v155, (_QWORD *)v65 + 5);
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__p);
              break;
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__p);
        v65 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)v65 + 48);
      }
      sub_20C3AD22C((uint64_t)&v149, (uint64_t)__p);
      v149 = (int)__p[0];
      v90 = __p[1];
      __p[1] = 0;
      v91 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v150;
      *(_QWORD *)&v150 = v90;
      if (v91)
        sub_20C35C614(v91);
      sub_20BFD3EBC((int *)&v150 + 2, &v137);
      sub_20BFD3F10((int *)&v150 + 3, &v138);
      if ((v151 & 7) != 0)
      {
        v92 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      v151 = v139;
      v139 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v138);
      sub_20BFD265C(&v137);
      if (__p[1])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
    }
    if ((v151 & 7) != 0)
    {
      v94 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
      do
        v95 = __ldxr(v94);
      while (__stlxr(v95 - 2, v94));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v150 + 3);
    sub_20BFD265C((_DWORD *)&v150 + 2);
    if ((_QWORD)v150)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v150);
    if (!v39)
    {
      if ((v155 & 7) != 0)
      {
        v96 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154 + 1);
      sub_20BFD265C(&v154);
      if (v153)
        sub_20C35C614(v153);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v142);
      v127 += 8;
      if (v127 == v121)
        goto LABEL_155;
      continue;
    }
    break;
  }
  if (a5)
  {
    *(_DWORD *)a5 = (_DWORD)v152;
    v100 = v153;
    if (v153)
    {
      v101 = (unint64_t *)((char *)v153 + 48);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    v103 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v100;
    if (v103)
      sub_20C35C614(v103);
    sub_20C01A074((int *)(a5 + 16), &v154);
    sub_20C01A0C8((int *)(a5 + 20), (_DWORD *)&v154 + 1);
    sub_20BF32220((_QWORD *)(a5 + 24), &v155);
  }
  v104 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20C35C4F8((uint64_t)&v149, (uint64_t *)&v143, &v144);
  v106 = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v104, v105);
  if ((v151 & 7) != 0)
  {
    v107 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
    do
      v108 = __ldxr(v107);
    while (__stlxr(v108 - 2, v107));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v150 + 3);
  sub_20BFD265C((_DWORD *)&v150 + 2);
  if ((_QWORD)v150)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v150);
  if (v106)
  {
    v109 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)sub_20C35C4F8((uint64_t)&v149, (uint64_t *)&v143, &v144);
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v109);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v111);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v149, SchemaInfo, v113))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v120, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v142);
      *(_QWORD *)v120 = off_24C53D820;
    }
    else
    {
      LODWORD(__p[0]) = 1;
      __p[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v137);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v138);
      v139 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v120, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
      *(_QWORD *)v120 = off_24C53D820;
      if ((v139 & 7) != 0)
      {
        v114 = (unsigned int *)(v139 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v138);
      sub_20BFD265C(&v137);
      if (__p[1])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
    }
    if ((v151 & 7) != 0)
    {
      v116 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
      do
        v117 = __ldxr(v116);
      while (__stlxr(v117 - 2, v116));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v150 + 3);
    sub_20BFD265C((_DWORD *)&v150 + 2);
    if ((_QWORD)v150)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v150);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v120, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v142);
    *(_QWORD *)v120 = off_24C53D820;
  }
  if ((v155 & 7) != 0)
  {
    v118 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154 + 1);
  sub_20BFD265C(&v154);
  if (v153)
    sub_20C35C614(v153);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v142);
LABEL_192:
  v152 = (void **)&v146;
  sub_20BEEB2B8(&v152);
}

void sub_20C5D3B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_DWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_DWORD *a33,_DWORD *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_DWORD *a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t __p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v69;

  if ((__p & 7) != 0)
  {
    v60 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(v58 - 136);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a34);
  sub_20BFD265C(a33);
  v65 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v58 - 152);
  if (v65)
    sub_20C35C614(v65);
  v66 = *(_QWORD *)(v58 - 104);
  if ((v66 & 7) != 0)
  {
    v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a23);
  sub_20BFD265C(a42);
  v69 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v58 - 120);
  if (v69)
    sub_20C35C614(v69);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(v58 - 208));
  *(_QWORD *)(v58 - 128) = v58 - 184;
  sub_20BEEB2B8((void ***)(v58 - 128));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C5D3E60(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;

  v4 = *(char **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C5D5C00((uint64_t)v2, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_DWORD *sub_20C5D3E9C(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;

  v4 = *(char **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C5D5C00((uint64_t)v2, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_DWORD *sub_20C5D3ED8(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;

  v4 = *(char **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C5D6214((uint64_t)v2, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_DWORD *sub_20C5D3F14(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;

  v4 = *(char **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C5D6214((uint64_t)v2, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3@<X2>, int a4@<W3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  void *v10;
  void *v11;
  _WORD v13[280];
  _BYTE v14[566];
  __int16 v15;

  sub_20C5D64E0((uint64_t)v14, 8uLL, v13);
  sub_20C5D6634((uint64_t)v13, 8uLL, &v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((uint64_t)this, (uint64_t)v14, (uint64_t)v13, a2, (uint64_t)a3, a4, a5);
  sub_20C5D4F68((uint64_t)v13, v10);
  return sub_20C5D5084((uint64_t)v14, v11);
}

void sub_20C5D3FEC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;

  va_start(va, a3);
  sub_20C5D4F68((uint64_t)va, a2);
  sub_20C5D5084((uint64_t)&STACK[0x238], v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t initial_auto_partitioner_divisor;
  void *v21;
  _QWORD v23[7];
  _WORD v24[280];
  _BYTE v25[567];
  char v26;
  _QWORD *v27;
  tbb::task_group_context *v28;
  _DWORD v29[32];
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v27 = a3;
  v26 = a4;
  sub_20C5D6788(a5, (a1[1] - *a1) >> 5);
  if (a3)
  {
    v10 = *a3;
    v9 = a3[1];
    if (v9 != *a3)
    {
      do
      {
        v9 -= 32;
        sub_20C3AF2B4((uint64_t)(a3 + 2), v9);
      }
      while (v9 != v10);
    }
    a3[1] = v10;
    sub_20C5D4274(a3, (a1[1] - *a1) >> 5);
  }
  sub_20C5D64E0((uint64_t)v25, 8uLL, v24);
  v11 = (pxrInternal__aapl__pxrReserved__ *)sub_20C5D6634((uint64_t)v24, 8uLL, v29);
  v14 = *a1;
  v13 = a1[1];
  v23[0] = a1;
  v23[1] = &v27;
  v23[2] = a5;
  v23[3] = v25;
  v23[4] = v24;
  v23[5] = a2;
  v23[6] = &v26;
  if (v13 != v14)
  {
    v18 = (v13 - v14) >> 5;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v11))
    {
      v29[0] = 0;
      v30 = 65539;
      v31 = 55;
      tbb::task_group_context::init((uint64_t)v29, v15, v16, v17);
      v28 = (tbb::task_group_context *)v29;
      v19 = tbb::internal::allocate_root_with_context_proxy::allocate(&v28, 0x38uLL);
      *(_BYTE *)(v19 - 11) = 1;
      *(_QWORD *)v19 = &off_24C53DAA0;
      *(_QWORD *)(v19 + 8) = v18;
      *(_OWORD *)(v19 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v19 + 32) = v23;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v19);
      *(_DWORD *)(v19 + 48) = 0;
      *(_BYTE *)(v19 + 52) = 5;
      *(_QWORD *)(v19 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v19 - 40) + 16))(*(_QWORD *)(v19 - 40), v19, v19 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v29);
    }
    else
    {
      sub_20C5D6EC0((uint64_t)v23, 0, v18);
    }
  }
  sub_20C5D4F68((uint64_t)v24, v12);
  return sub_20C5D5084((uint64_t)v25, v21);
}

void sub_20C5D4204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  unint64_t v9;
  tbb::task *v10;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&STACK[0x4B0], v10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&STACK[0x4B8]);
  sub_20C5D4F68((uint64_t)va, v12);
  sub_20C5D5084((uint64_t)&STACK[0x270], v13);
  STACK[0x270] = v9;
  sub_20C599B38((void ***)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_20C5D4274(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != v5)
      {
        v3 -= 32;
        sub_20C3AF2B4((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_20C5D6930((uint64_t)a1, a2 - v4);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CreateMaterialBindSubset(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  unint64_t v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD v26[3];

  sub_20C35C4F8((uint64_t)&v21, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v26, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21);
  v26[0] = off_24C53C788;
  if ((v25 & 7) != 0)
  {
    v10 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v12)
    v12 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v21 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateGeomSubset((uint64_t)v26, a2, a4, a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v12 + 96), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a5);
  if ((v21 & 7) != 0)
  {
    v13 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v15)
    v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v26, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v15 + 96), (unsigned int **)&v21);
  if (!v21)
    goto LABEL_17;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16)
    v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v17 = v21;
  if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 146) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_17:
    v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v18)
      v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindSubsetsFamilyType((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 688));
    v17 = v21;
  }
  if ((v17 & 7) != 0)
  {
    v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)v26);
}

void sub_20C5D44C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindSubsetsFamilyType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  unsigned int *v5;
  unsigned int v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  uint64_t v9;
  const char *Text;
  _QWORD v12[3];
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4)
    v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 146) & 0xFFFFFFFFFFFFFFF8))
  {
    v13 = "usdShade/materialBindingAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetMaterialBindSubsetsFamilyType";
    v15 = 957;
    v16 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindSubsetsFam"
                            "ilyType(const TfToken &)";
    v17 = 0;
    sub_20C3630C0((uint64_t)this, v12);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to set invalid familyType 'unrestricted' forthe \"materialBind\" family of subsets on <%s>.", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v12 + 1);
    sub_20BFD265C(v12);
    return 0;
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    v12[0] = off_24C53C788;
    if ((v16 & 7) != 0)
    {
      v5 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_20BFD265C(&v15);
    if (v14)
      sub_20C35C614(v14);
    v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v8)
      v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v9 = pxrInternal__aapl__pxrReserved__::UsdGeomSubset::SetFamilyType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v12, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 96), a2, v7);
    pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)v12);
  }
  return v9;
}

void sub_20C5D46C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD v13[3];

  sub_20C35C4F8((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
  v13[0] = off_24C53C788;
  if ((v12 & 7) != 0)
  {
    v3 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  v8 = 0;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v13, (const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v8, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v5 + 96), a2);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)v13);
}

void sub_20C5D47F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsetsFamilyType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v11[3];

  sub_20C35C4F8((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6);
  v11[0] = off_24C53C788;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v11, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v5 + 96), a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)v11);
}

void sub_20C5D4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)v4 + 23) >= 0)
    v5 = (const char *)v4;
  else
    v5 = (const char *)*v4;
  v6 = *((char *)EmptyString + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)EmptyString + 23);
  else
    v7 = EmptyString[1];
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)EmptyString;
  else
    v11 = (const char *)*EmptyString;
  return strncmp(v11, v5, v10) == 0;
}

uint64_t *sub_20C5D49F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5D4ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_20C5D4B1C()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A838);
  if (!v0)
  {
    v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "material:binding:full", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "material:binding:preview", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "material:binding:collection:full", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "material:binding:collection:preview", 0);
    v5 = *(void ***)v0;
    v36 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v36 = (void **)v6;
    }
    v8 = (unsigned int *)*v2;
    v37 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v37 = v9;
    }
    v11 = (unsigned int *)*v3;
    v38 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 = v12;
    }
    v14 = (unsigned int *)*v4;
    v39 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v39 = v15;
    }
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 6) = 0;
    v17 = operator new(0x20uLL);
    v18 = 0;
    *((_QWORD *)v0 + 4) = v17;
    *((_QWORD *)v0 + 5) = v17;
    *((_QWORD *)v0 + 6) = v17 + 4;
    do
    {
      v19 = (unint64_t)(&v36)[v18];
      *v17 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v18;
      ++v17;
    }
    while (v18 != 4);
    v22 = (void ***)&v40;
    *((_QWORD *)v0 + 5) = v17;
    do
    {
      v24 = (uint64_t)*--v22;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &v36);
    while (!__ldaxr(&qword_25498A838))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A838))
        return (unint64_t)v0;
    }
    __clrex();
    v36 = (void **)(v0 + 32);
    sub_20BEEB2B8(&v36);
    if ((*v4 & 7) != 0)
    {
      v28 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((*v3 & 7) != 0)
    {
      v30 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((*v2 & 7) != 0)
    {
      v32 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v34 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A838);
  }
  return (unint64_t)v0;
}

void sub_20C5D4DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
  }
}

_DWORD *sub_20C5D4EE8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 24);
  if (v5)
    sub_20C35C614(v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C5D4F68(uint64_t a1, void *a2)
{
  sub_20BF776C4(a1, a2);
  sub_20C5D4F98(a1 + 16);
  return a1;
}

uint64_t sub_20C5D4F98(uint64_t a1)
{
  tbb::internal *v2;

  sub_20C5D4FD0(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C5D5014(a1, v2);
  return a1;
}

uint64_t sub_20C5D4FD0(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = sub_20C5D5014(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_20C5D5014(uint64_t a1, tbb::internal *this)
{
  if ((*((_BYTE *)this + 24) & 1) != 0)
    sub_20C5D5044(a1, (uint64_t)this);
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_20C5D5044(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;

  v3 = (_QWORD *)(a2 + 16);
  v4 = *(char **)(a2 + 16);
  *v3 = 0;
  if (v4)
    sub_20C5D6214((uint64_t)v3, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  return sub_20BFD265C((_DWORD *)(a2 + 8));
}

uint64_t sub_20C5D5084(uint64_t a1, void *a2)
{
  sub_20BF776C4(a1, a2);
  sub_20C5D50B4(a1 + 16);
  return a1;
}

uint64_t sub_20C5D50B4(uint64_t a1)
{
  tbb::internal *v2;

  sub_20C5D50EC(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C5D5130(a1, v2);
  return a1;
}

uint64_t sub_20C5D50EC(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = sub_20C5D5130(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_20C5D5130(uint64_t a1, tbb::internal *this)
{
  if ((*((_BYTE *)this + 24) & 1) != 0)
    sub_20C5D5160(a1, (uint64_t)this);
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_20C5D5160(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;

  v3 = (_QWORD *)(a2 + 16);
  v4 = *(char **)(a2 + 16);
  *v3 = 0;
  if (v4)
    sub_20C5D5C00((uint64_t)v3, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  return sub_20BFD265C((_DWORD *)(a2 + 8));
}

void sub_20C5D51A0(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C5D4EE8((uint64_t)(v4 - 12));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_20C5D5210(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 48;
      v4 -= 48;
      result = (uint64_t *)sub_20C5D52AC((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_20C5D52AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;

  sub_20BFD38A4((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD38DC((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  sub_20BFD38A4((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_20BFD38DC((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  sub_20BFD38A4((_DWORD *)(a2 + 32), (_DWORD *)(a3 + 32));
  result = sub_20BFD38DC((_DWORD *)(a2 + 36), (_DWORD *)(a3 + 36));
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_20C5D5334(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_20C5D4EE8(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C5D5380(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE6D0B4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v10[48 * v4];
  v16 = &v10[48 * v9];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding(v14, a2);
  v15 = (char *)v14 + 48;
  sub_20C5D5210(a1, &v13);
  v11 = a1[1];
  sub_20C5D5334((uint64_t)&v13);
  return v11;
}

void sub_20C5D5470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5D5334((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5D5484(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE6D0B4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v10[48 * v4];
  v16 = &v10[48 * v9];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding(v14, a2);
  v15 = (char *)v14 + 48;
  sub_20C5D5210(a1, &v13);
  v11 = a1[1];
  sub_20C5D5334((uint64_t)&v13);
  return v11;
}

void sub_20C5D5574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5D5334((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5D5588(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C3AE668(a1, &v11);
  v9 = a1[1];
  sub_20C3AE86C(&v11);
  return v9;
}

void sub_20C5D5660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AE86C((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5D567C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C53DA20;
  return result;
}

void sub_20C5D56A0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C53DA20;
}

BOOL sub_20C5D56B8(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)v4 + 23) >= 0)
    v5 = (const char *)v4;
  else
    v5 = (const char *)*v4;
  v6 = *((char *)EmptyString + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)EmptyString + 23);
  else
    v7 = EmptyString[1];
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)EmptyString;
  else
    v11 = (const char *)*EmptyString;
  return strncmp(v11, v5, v10) == 0;
}

uint64_t sub_20C5D5788(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53DA80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C5D57C4()
{
  return &unk_24C53DA80;
}

void sub_20C5D57D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  _DWORD *v10;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    v6 = *(_QWORD *)(a2 + 32);
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
    sub_20BFD265C((_DWORD *)(a2 + 24));
    v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 16);
    if (v9)
      sub_20C35C614(v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
    v10 = sub_20BFD265C((_DWORD *)a2);
    operator delete(v10);
  }
}

void sub_20C5D5870(void **a1)
{
  _DWORD *v1;
  _DWORD *v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = sub_20C5D4EE8((uint64_t)(v3 - 12));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20C5D58CC(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v14 = 0;
  v15 = (_QWORD *)v5;
  v6 = (unsigned __int8 *)&v15;
  for (i = 7; i != -1; --i)
  {
    v8 = *v6++;
    *((_BYTE *)&v14 + i) = byte_20CA9F1BD[v8];
  }
  v9 = v14;
  v10 = a1 + 16;
  sub_20C5D59AC(a1, v5, &v15);
  v11 = v15;
  if (v15)
  {
    v12 = v9 | 1;
    while (1)
    {
      v13 = v11[3];
      if (v13 > v12)
        break;
      if (v13 == v12 && v11[1] == *(_QWORD *)a2)
        goto LABEL_11;
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_9;
    }
    v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_20C5D59AC(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  __dmb(0xBu);
  v6 = a2 % v5;
  v7 = sub_20BEB4B94(a2 % v5);
  v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  v9 = a1 + 8 * v7;
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (v12 = *v10, __dmb(0xBu), !*(_QWORD *)(v12 + 8 * v8)))
    sub_20C5D5A40(a1, (unint64_t *)v6);
  v13 = *v10;
  __dmb(0xBu);
  *a3 = *(_QWORD *)(v13 + 8 * v8);
}

void sub_20C5D5A40(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t i;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;

  v4 = sub_20BF77DA0(a1, (unint64_t)a2);
  if (!sub_20BF77E2C(a1, v4))
    sub_20C5D5A40(a1, v4);
  v5 = sub_20BEB4B94(v4);
  v6 = *(_QWORD *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  v11 = *(unint64_t **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  v12 = 0;
  v13 = a2;
  v7 = &v13;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t **)((char *)v7 + 1);
    *((_BYTE *)&v12 + i) = byte_20CA9F1BD[v9];
  }
  sub_20C5D5B20(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  v10 = v13;
  sub_20BF6EE60(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_20C5D5B20@<X0>(uint64_t a1@<X0>, unint64_t **a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t *i;
  tbb::internal *result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  i = (unint64_t *)**a2;
  result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  *((_QWORD *)result + 3) = a3;
  *(_QWORD *)result = 0;
  if (i)
    goto LABEL_2;
LABEL_3:
  while (1)
  {
    v11 = *a2;
    *(_QWORD *)result = i;
    do
    {
      while (1)
      {
        v12 = __ldaxr(v11);
        if ((unint64_t *)v12 == i)
          break;
        __clrex();
        do
          v13 = __ldxr(v11);
        while (__stxr(v13, v11));
        if ((unint64_t *)v13 != i)
          goto LABEL_10;
      }
    }
    while (__stlxr((unint64_t)result, v11));
    v13 = (unint64_t)i;
LABEL_10:
    if (i == (unint64_t *)v13 || result == (tbb::internal *)v13)
      break;
    for (i = *a2; ; *a2 = i)
    {
      i = (unint64_t *)*i;
      if (!i)
        break;
LABEL_2:
      v10 = i[3];
      if (v10 > a3)
        goto LABEL_3;
      if (v10 == a3)
      {
        result = (tbb::internal *)sub_20C5D5130(a1, result);
        goto LABEL_21;
      }
    }
  }
  i = (unint64_t *)result;
LABEL_21:
  *a4 = i;
  return result;
}

void sub_20C5D5C00(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 32);
    sub_20C5D51A0(&v4);
    v4 = (void **)(a2 + 8);
    sub_20C5D51A0(&v4);
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    if (v3)
      sub_20C5D57D0((uint64_t)a2, v3);
    operator delete(a2);
  }
}

void sub_20C5D5C64(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t **v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;

  v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v29 = 0;
  v30 = (unint64_t *)v8;
  v9 = &v30;
  for (i = 7; i != -1; --i)
  {
    v11 = *(unsigned __int8 *)v9;
    v9 = (unint64_t **)((char *)v9 + 1);
    *((_BYTE *)&v29 + i) = byte_20CA9F1BD[v11];
  }
  v12 = v29 | 1;
  sub_20C5D59AC(a1, v8, &v30);
  v13 = a1 + 16;
  if (a3)
  {
    a3[3] = v12;
    *a3 = 0;
  }
  v14 = a2;
  while (1)
  {
    v15 = v30;
    v16 = (unint64_t *)*v30;
    if (*v30)
    {
      v17 = v16[3];
      while (1)
      {
        v18 = v16;
        if (v17 > v12)
          break;
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3)
            sub_20C5D5130(a1 + 16, (tbb::internal *)a3);
          *(_QWORD *)a4 = v16;
          *(_QWORD *)(a4 + 8) = v13;
          *(_BYTE *)(a4 + 16) = 0;
          return;
        }
        v30 = v16;
        v16 = (unint64_t *)*v16;
        if (!*v18)
        {
          v15 = v18;
          break;
        }
        v17 = v16[3];
        v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (_QWORD *)sub_20C5D5E80(a1 + 16, v12, (uint64_t)a2);
      v14 = a3 + 1;
      v15 = v30;
    }
    *a3 = v16;
    do
    {
      while (1)
      {
        v19 = __ldaxr(v15);
        if ((unint64_t *)v19 == v16)
          break;
        __clrex();
        do
          v20 = __ldxr(v15);
        while (__stxr(v20, v15));
        if ((unint64_t *)v20 != v16)
          goto LABEL_23;
      }
    }
    while (__stlxr((unint64_t)a3, v15));
    v20 = (unint64_t)v16;
LABEL_23:
    if (v16 == (unint64_t *)v20 || a3 == (_QWORD *)v20)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v13;
    *(_BYTE *)(a4 + 16) = 0;
  }
  v22 = (unint64_t *)(a1 + 24);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = 1;
  v26 = *(_QWORD *)(a1 + 8);
  v25 = a1 + 8;
  v24 = v26;
  __dmb(0xBu);
  if ((float)((float)v23 / (float)v26) > *(float *)(v25 + 36))
  {
    do
    {
      while (1)
      {
        v27 = __ldaxr((unint64_t *)v25);
        if (v27 != v24)
          break;
        if (!__stlxr(2 * v24, (unint64_t *)v25))
          return;
      }
      __clrex();
      do
        v28 = __ldxr((unint64_t *)v25);
      while (__stxr(v28, (unint64_t *)v25));
    }
    while (v28 == v24);
  }
}

uint64_t sub_20C5D5E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  sub_20BFD6E54((_DWORD *)(v5 + 8), (_DWORD *)a3);
  sub_20BFD6EA4((_DWORD *)(v5 + 12), (_DWORD *)(a3 + 4));
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)v5 = 0;
  return v5;
}

void sub_20C5D5EE0(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v14 = 0;
  v15 = (_QWORD *)v5;
  v6 = (unsigned __int8 *)&v15;
  for (i = 7; i != -1; --i)
  {
    v8 = *v6++;
    *((_BYTE *)&v14 + i) = byte_20CA9F1BD[v8];
  }
  v9 = v14;
  v10 = a1 + 16;
  sub_20C5D5FC0(a1, v5, &v15);
  v11 = v15;
  if (v15)
  {
    v12 = v9 | 1;
    while (1)
    {
      v13 = v11[3];
      if (v13 > v12)
        break;
      if (v13 == v12 && v11[1] == *(_QWORD *)a2)
        goto LABEL_11;
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_9;
    }
    v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_20C5D5FC0(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  __dmb(0xBu);
  v6 = a2 % v5;
  v7 = sub_20BEB4B94(a2 % v5);
  v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  v9 = a1 + 8 * v7;
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (v12 = *v10, __dmb(0xBu), !*(_QWORD *)(v12 + 8 * v8)))
    sub_20C5D6054(a1, (unint64_t *)v6);
  v13 = *v10;
  __dmb(0xBu);
  *a3 = *(_QWORD *)(v13 + 8 * v8);
}

void sub_20C5D6054(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t i;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;

  v4 = sub_20BF77DA0(a1, (unint64_t)a2);
  if (!sub_20BF77E2C(a1, v4))
    sub_20C5D6054(a1, v4);
  v5 = sub_20BEB4B94(v4);
  v6 = *(_QWORD *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  v11 = *(unint64_t **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  v12 = 0;
  v13 = a2;
  v7 = &v13;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t **)((char *)v7 + 1);
    *((_BYTE *)&v12 + i) = byte_20CA9F1BD[v9];
  }
  sub_20C5D6134(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  v10 = v13;
  sub_20BF6EE60(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_20C5D6134@<X0>(uint64_t a1@<X0>, unint64_t **a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t *i;
  tbb::internal *result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  i = (unint64_t *)**a2;
  result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  *((_QWORD *)result + 3) = a3;
  *(_QWORD *)result = 0;
  if (i)
    goto LABEL_2;
LABEL_3:
  while (1)
  {
    v11 = *a2;
    *(_QWORD *)result = i;
    do
    {
      while (1)
      {
        v12 = __ldaxr(v11);
        if ((unint64_t *)v12 == i)
          break;
        __clrex();
        do
          v13 = __ldxr(v11);
        while (__stxr(v13, v11));
        if ((unint64_t *)v13 != i)
          goto LABEL_10;
      }
    }
    while (__stlxr((unint64_t)result, v11));
    v13 = (unint64_t)i;
LABEL_10:
    if (i == (unint64_t *)v13 || result == (tbb::internal *)v13)
      break;
    for (i = *a2; ; *a2 = i)
    {
      i = (unint64_t *)*i;
      if (!i)
        break;
LABEL_2:
      v10 = i[3];
      if (v10 > a3)
        goto LABEL_3;
      if (v10 == a3)
      {
        result = (tbb::internal *)sub_20C5D5014(a1, result);
        goto LABEL_21;
      }
    }
  }
  i = (unint64_t *)result;
LABEL_21:
  *a4 = i;
  return result;
}

void sub_20C5D6214(uint64_t a1, char *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  if (a2)
  {
    v10 = (void **)(a2 + 120);
    sub_20C37B300(&v10);
    v3 = (void *)*((_QWORD *)a2 + 12);
    if (v3)
    {
      *((_QWORD *)a2 + 13) = v3;
      operator delete(v3);
    }
    v4 = (unsigned int *)*((_QWORD *)a2 + 11);
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    sub_20BFD7C28((uint64_t)(a2 + 48), *((_QWORD **)a2 + 7));
    sub_20C37B898((uint64_t)(a2 + 8));
    if ((*(_QWORD *)a2 & 7) != 0)
    {
      v8 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    operator delete(a2);
  }
}

void sub_20C5D62C4(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t **v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;

  v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v29 = 0;
  v30 = (unint64_t *)v8;
  v9 = &v30;
  for (i = 7; i != -1; --i)
  {
    v11 = *(unsigned __int8 *)v9;
    v9 = (unint64_t **)((char *)v9 + 1);
    *((_BYTE *)&v29 + i) = byte_20CA9F1BD[v11];
  }
  v12 = v29 | 1;
  sub_20C5D5FC0(a1, v8, &v30);
  v13 = a1 + 16;
  if (a3)
  {
    a3[3] = v12;
    *a3 = 0;
  }
  v14 = a2;
  while (1)
  {
    v15 = v30;
    v16 = (unint64_t *)*v30;
    if (*v30)
    {
      v17 = v16[3];
      while (1)
      {
        v18 = v16;
        if (v17 > v12)
          break;
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3)
            sub_20C5D5014(a1 + 16, (tbb::internal *)a3);
          *(_QWORD *)a4 = v16;
          *(_QWORD *)(a4 + 8) = v13;
          *(_BYTE *)(a4 + 16) = 0;
          return;
        }
        v30 = v16;
        v16 = (unint64_t *)*v16;
        if (!*v18)
        {
          v15 = v18;
          break;
        }
        v17 = v16[3];
        v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (_QWORD *)sub_20C5D5E80(a1 + 16, v12, (uint64_t)a2);
      v14 = a3 + 1;
      v15 = v30;
    }
    *a3 = v16;
    do
    {
      while (1)
      {
        v19 = __ldaxr(v15);
        if ((unint64_t *)v19 == v16)
          break;
        __clrex();
        do
          v20 = __ldxr(v15);
        while (__stxr(v20, v15));
        if ((unint64_t *)v20 != v16)
          goto LABEL_23;
      }
    }
    while (__stlxr((unint64_t)a3, v15));
    v20 = (unint64_t)v16;
LABEL_23:
    if (v16 == (unint64_t *)v20 || a3 == (_QWORD *)v20)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v13;
    *(_BYTE *)(a4 + 16) = 0;
  }
  v22 = (unint64_t *)(a1 + 24);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = 1;
  v26 = *(_QWORD *)(a1 + 8);
  v25 = a1 + 8;
  v24 = v26;
  __dmb(0xBu);
  if ((float)((float)v23 / (float)v26) > *(float *)(v25 + 36))
  {
    do
    {
      while (1)
      {
        v27 = __ldaxr((unint64_t *)v25);
        if (v27 != v24)
          break;
        if (!__stlxr(2 * v24, (unint64_t *)v25))
          return;
      }
      __clrex();
      do
        v28 = __ldxr((unint64_t *)v25);
      while (__stxr(v28, (unint64_t *)v25));
    }
    while (v28 == v24);
  }
}

uint64_t sub_20C5D64E0(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v5[3] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  sub_20BF6EE60(a1, 0, &v11);
  return a1;
}

void sub_20C5D6620(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5D50B4(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5D6634(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v5[3] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  sub_20BF6EE60(a1, 0, &v11);
  return a1;
}

void sub_20C5D6774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5D4F98(v1 + 16);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5D6788(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    sub_20C5D67F0((uint64_t)a1, a2);
  }
  return a1;
}

void sub_20C5D67DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C599B38(&a9);
  _Unwind_Resume(a1);
}

void sub_20C5D67F0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v3;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  uint64_t v5;

  v3 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8);
  if (a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24 * a2);
    v5 = 24 * a2;
    do
    {
      sub_20C5D6860(a1 + 16, v3);
      v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24);
      v5 -= 24;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3;
}

void sub_20C5D6858(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C5D6860(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v5 = 1;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *(_QWORD *)a2 = off_24C53D820;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5D691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_20C5D6930(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
    return (void **)sub_20C5D6A28((_DWORD *)a1, a2);
  v8 = v7 - *(_QWORD *)a1;
  v9 = a2 + (v8 >> 5);
  if (v9 >> 59)
    sub_20BDDF694();
  v10 = v8 >> 5;
  v11 = v5 - *(_QWORD *)a1;
  if (v11 >> 4 > v9)
    v9 = v11 >> 4;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
    v12 = 0x7FFFFFFFFFFFFFFLL;
  else
    v12 = v9;
  v19 = v4;
  if (v12)
    v13 = (char *)sub_20BED2F10(v4, v12);
  else
    v13 = 0;
  v15 = v13;
  v16 = &v13[32 * v10];
  v17 = v16;
  v18 = &v13[32 * v12];
  sub_20C5D6AA0(&v15, a2);
  sub_20C3AF318((uint64_t *)a1, &v15);
  return sub_20C3AF4C4(&v15);
}

void sub_20C5D6A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AF4C4((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C5D6A28(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = v3 + 32 * a2;
    v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 4;
      *(_QWORD *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(_QWORD *)(v5 + 8) = 0;
      v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    v4 = *((_QWORD *)result + 1);
  }
  *((_QWORD *)v2 + 1) = v4;
  return result;
}

_DWORD *sub_20C5D6AA0(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (a2)
  {
    v4 = v3 + 32 * a2;
    v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 4;
      *(_QWORD *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(_QWORD *)(v5 + 8) = 0;
      v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    v4 = *((_QWORD *)result + 2);
  }
  *((_QWORD *)v2 + 2) = v4;
  return result;
}

uint64_t sub_20C5D6B20(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53DAA0;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53DAA0;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C5D6EC0(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C5D6EC0(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C5D6EC0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  _QWORD v14[4];
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  int v18;

  if (a2 < a3)
  {
    v4 = a2;
    do
    {
      v6 = **(_QWORD ***)(a1 + 8);
      if (v6)
        v7 = *v6 + 32 * v4;
      else
        v7 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(**(_QWORD **)a1 + 32 * v4));
      v14[3] = 0;
      v14[0] = off_24C53D9C8;
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((uint64_t)v14, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 40), v7, **(unsigned __int8 **)(a1 + 48), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v15);
      v8 = **(_QWORD **)(a1 + 16);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)(v16 + 48);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = v8 + 24 * v4;
      v13 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v9;
      if (v13)
        sub_20C35C614(v13);
      sub_20C01A074((int *)(v12 + 16), &v17);
      sub_20C01A0C8((int *)(v12 + 20), &v18);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v15);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v14);
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20C5D6FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53DAE8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdShade/nodeDefAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdShadeNodeDefAPI pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53DAE8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5D718C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  return 5;
}

uint64_t sub_20C5D71B4(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A840, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdShadeNodeDefAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5D736C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53DAE8;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53DAE8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5D7358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5D736C(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A840, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdShadeNodeDefAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A848);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A848))
  {
    __cxa_guard_release(&qword_25498A848);
  }
  return &qword_25498A840;
}

void sub_20C5D7488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A848);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A858);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)__cxa_guard_acquire(&qword_25498A858);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(v3);
      byte_25498A850 = sub_20C35BD7C((char *)&qword_25498A840, v4, v5);
      __cxa_guard_release(&qword_25498A858);
    }
  }
  return byte_25498A850;
}

void sub_20C5D7504(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A858);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(this);
  return &qword_25498A840;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5D75DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8)
    v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5D7734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8)
    v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498A878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A878))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v5)
      v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v6 = *((_QWORD *)v5 + 9);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9)
      v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 8);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498A860, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A860, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A878);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A898);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A898))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5D7A4C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A880, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A898);
  }
  if (v1)
    return &qword_25498A880;
  else
    return &qword_25498A860;
}

void sub_20C5D79C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498A878);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5D7A4C(uint64_t **a1)
{
  qword_25498A888 = 0;
  unk_25498A890 = 0;
  qword_25498A880 = 0;
  sub_20BFC9A6C((char **)&qword_25498A880, ((unk_25498A868 - qword_25498A860) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498A880, (_QWORD *)qword_25498A888, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498A880, (_QWORD *)qword_25498A888, (uint64_t *)qword_25498A860, unk_25498A868, (unk_25498A868 - qword_25498A860) >> 3);
}

void sub_20C5D7AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *result;
  unsigned int *v7;
  unint64_t v8;
  const char *v9;
  unsigned int *v10;
  unsigned int v11;
  const char *Text;
  char *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  int v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unsigned int *v24;

  v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSourceAttr(this, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v19, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v24);
  if ((v22 & 7) != 0)
  {
    v4 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  result = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!result)
    result = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = v24;
  if (((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)result + 7) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_18;
  result = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!result)
    result = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = v24;
  if (((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)result + 22) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_18;
  result = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!result)
    result = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = v24;
  v8 = (unint64_t)v24 & 0xFFFFFFFFFFFFFFF8;
  if (((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)result + 23) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_18:
    *a2 = v7;
    v24 = 0;
  }
  else
  {
    v19 = "usdShade/nodeDefAPI.cpp";
    v20 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetImplementationSource";
    v21 = 206;
    v22 = (unint64_t)"TfToken pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource() const";
    v23 = 0;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    sub_20C3630C0((uint64_t)this, &v17);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"Found invalid info:implementationSource value '%s' on shader at path <%s>. Falling back to 'id'.", v13, v9, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_20BFD265C(&v17);
    result = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!result)
      result = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v14 = (unsigned int *)*((_QWORD *)result + 7);
    *a2 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *a2 = v15;
    }
  }
  if ((v24 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return result;
}

void sub_20C5D7D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  v17 = *(_QWORD *)(v16 - 40);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  std::type_info_vtbl *v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__ *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE v20[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  std::type_info v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v5 = (std::type_info_vtbl *)*((_QWORD *)v4 + 7);
  v25.__vftable = v5;
  v25.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v25.__vftable = (std::type_info_vtbl *)v6;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(this, &v25, 1, (uint64_t)v20);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v20, v8))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr(this, (uint64_t)&v15);
    v9 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(&v15, a2, NAN);
    if ((v19 & 7) != 0)
    {
      v10 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_20BFD265C(&v17);
    if (v16)
      sub_20C35C614(v16);
  }
  else
  {
    v9 = 0;
  }
  if ((v24 & 7) != 0)
  {
    v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (v21)
    sub_20C35C614(v21);
  sub_20BF4C2D8((uint64_t)&v25);
  return v9;
}

void sub_20C5D7EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE v13[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource(this, (unsigned int **)&v18);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v5 = v18;
  if ((v18 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr(this, (uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v13, a2);
    v6 = v7;
    if ((v17 & 7) != 0)
    {
      v8 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_20BFD265C(&v15);
    if (v14)
      sub_20C35C614(v14);
    v5 = v18;
  }
  else
  {
    v6 = 0;
  }
  if ((v5 & 7) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return v6;
}

void sub_20C5D8048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a14 & 7) != 0)
  {
    v14 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  std::type_info_vtbl *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  uint64_t IsDefined;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BYTE v25[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  std::type_info v31;
  std::type_info v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_20C5D8330((uint64_t *)a3, (unsigned int **)&v30);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v6 = (std::type_info_vtbl *)*((_QWORD *)v5 + 22);
  v32.__vftable = v6;
  v32.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v32.__vftable = (std::type_info_vtbl *)((unint64_t)v32.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(this, &v32, 0, (uint64_t)v25);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v25, v9))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10)
      v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v31.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5255B8;
    sub_20C00A0DC((char **)&v31, (__int128 *)a2);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v10 + 96), 0, 1, &v31, 0, (uint64_t)&v20);
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20, v11);
    if ((v24 & 7) != 0)
    {
      v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    if (v21)
      sub_20C35C614(v21);
    sub_20BF4C2D8((uint64_t)&v31);
  }
  else
  {
    IsDefined = 0;
  }
  if ((v29 & 7) != 0)
  {
    v15 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  sub_20BF4C2D8((uint64_t)&v32);
  if ((v30 & 7) != 0)
  {
    v17 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  return IsDefined;
}

void sub_20C5D82A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;

  sub_20C372B54((uint64_t)&a13);
  sub_20BF4C2D8(v17 - 56);
  if ((a17 & 7) != 0)
  {
    v19 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

void sub_20C5D8330(uint64_t *a1@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  std::string __p;
  void **v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 28) & 0xFFFFFFFFFFFFFFF8))
  {
    v25 = *(unsigned int **)(sub_20C5DA474() + 8);
    *a2 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 2, v26));
      if ((v27 & 1) == 0)
        *a2 = v26;
    }
  }
  else
  {
    v5 = *(_QWORD *)sub_20C5DA474();
    v34 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 = *a1;
    v35 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v11)
      v11 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v12 = *((_QWORD *)v11 + 22);
    v36 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v32 = (void **)&v28;
    v33 = 0;
    v15 = operator new(0x18uLL);
    v16 = 0;
    v28 = v15;
    v29 = v15;
    v30 = v15 + 3;
    do
    {
      v17 = *(&v34 + v16);
      *v15 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          *v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v16;
      ++v15;
    }
    while (v16 != 3);
    v29 = v15;
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v28, &__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    v20 = &v37;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = (void **)&v28;
    sub_20BEEB2B8(&v32);
    do
    {
      v22 = *--v20;
      v21 = v22;
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    while (v20 != &v34);
  }
}

void sub_20C5D859C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;

  while (1)
  {
    v22 = *((_QWORD *)v20 - 1);
    v20 -= 8;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    if (v20 == &a20)
      _Unwind_Resume(exception_object);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  char v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int IsDefined;
  char v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v34;
  _BYTE v35[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  int v42;
  int v43;
  uint64_t v44;
  _BYTE v45[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource(this, (unsigned int **)&v51);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = v51;
  if ((v51 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 22) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_20C5D8330((uint64_t *)a3, (unsigned int **)&v50);
    v9 = (uint64_t *)((char *)this + 8);
    v10 = (_DWORD *)((char *)this + 16);
    sub_20C35C4F8((uint64_t)v40, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, (uint64_t)v45);
    if ((v44 & 7) != 0)
    {
      v11 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
    sub_20BFD265C(&v42);
    if (v41)
      sub_20C35C614(v41);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v45, v13))
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v45, a2);
      LOBYTE(v8) = v14;
    }
    else
    {
      v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v15)
        v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 28) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_33;
      sub_20C35C4F8((uint64_t)v35, v9, v10);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v16)
        v16 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      sub_20C5D8330((uint64_t *)v16 + 28, (unsigned int **)&v34);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v35, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t)v40);
      if ((v34 & 7) != 0)
      {
        v17 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v39 & 7) != 0)
      {
        v19 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      v8 = v35;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
      sub_20BFD265C(&v37);
      if (v36)
        sub_20C35C614(v36);
      IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v40, v21);
      v23 = IsDefined;
      if (IsDefined)
      {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v40, a2);
        LOBYTE(v8) = v24;
      }
      if ((v44 & 7) != 0)
      {
        v25 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (v41)
        sub_20C35C614(v41);
      if ((v23 & 1) == 0)
LABEL_33:
        LOBYTE(v8) = 0;
    }
    if ((v49 & 7) != 0)
    {
      v27 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_20BFD265C(&v47);
    if (v46)
      sub_20C35C614(v46);
    if ((v50 & 7) != 0)
    {
      v29 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    v7 = v51;
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  if ((v7 & 7) != 0)
  {
    v31 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  return v8 & 1;
}

void sub_20C5D8924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  v20 = *(_QWORD *)(v19 - 56);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, std::type_info_vtbl **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  std::type_info_vtbl *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  std::type_info_vtbl *v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t IsDefined;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  _BYTE v28[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  std::type_info v34;
  std::type_info v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_20C5D8CA8((uint64_t *)a3, (unsigned int **)&v33);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v6 = (std::type_info_vtbl *)*((_QWORD *)v5 + 22);
  v35.__vftable = v6;
  v35.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v35.__vftable = (std::type_info_vtbl *)((unint64_t)v35.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(this, &v35, 0, (uint64_t)v28);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v28, v9))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10)
      v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v11 = *a2;
    v34.__vftable = v11;
    v34.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8
                    + 1;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v34.__vftable = (std::type_info_vtbl *)v12;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v33, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v10 + 88), 0, 1, &v34, 0, (uint64_t)&v23);
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v23, v14);
    if ((v27 & 7) != 0)
    {
      v16 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_20BFD265C(&v25);
    if (v24)
      sub_20C35C614(v24);
    sub_20BF4C2D8((uint64_t)&v34);
  }
  else
  {
    IsDefined = 0;
  }
  if ((v32 & 7) != 0)
  {
    v18 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_20BFD265C(&v30);
  if (v29)
    sub_20C35C614(v29);
  sub_20BF4C2D8((uint64_t)&v35);
  if ((v33 & 7) != 0)
  {
    v20 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  return IsDefined;
}

void sub_20C5D8C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;

  sub_20C372B54((uint64_t)&a13);
  sub_20BF4C2D8(v17 - 56);
  if ((a17 & 7) != 0)
  {
    v19 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

void sub_20C5D8CA8(uint64_t *a1@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string __p;
  void **v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 28) & 0xFFFFFFFFFFFFFFF8))
  {
    v29 = *(unsigned int **)(sub_20C5DA474() + 16);
    *a2 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        *a2 = v30;
    }
  }
  else
  {
    v5 = *(_QWORD *)sub_20C5DA474();
    v38 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 = *a1;
    v39 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v11)
      v11 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v12 = *((_QWORD *)v11 + 22);
    v40 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v15)
      v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v16 = *((_QWORD *)v15 + 25);
    v41 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v41 &= 0xFFFFFFFFFFFFFFF8;
    }
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v36 = (void **)&v32;
    v37 = 0;
    v19 = operator new(0x20uLL);
    v20 = 0;
    v32 = v19;
    v33 = v19;
    v34 = v19 + 4;
    do
    {
      v21 = *(&v38 + v20);
      *v19 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          *v19 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v20;
      ++v19;
    }
    while (v20 != 4);
    v33 = v19;
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v32, &__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    v24 = &v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v36 = (void **)&v32;
    sub_20BEEB2B8(&v36);
    do
    {
      v26 = *--v24;
      v25 = v26;
      if ((v26 & 7) != 0)
      {
        v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
    }
    while (v24 != &v38);
  }
}

void sub_20C5D8F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  while (1)
  {
    v23 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == &a21)
      _Unwind_Resume(exception_object);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  char v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int IsDefined;
  char v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v34;
  _BYTE v35[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  int v42;
  int v43;
  uint64_t v44;
  _BYTE v45[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource(this, (unsigned int **)&v51);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = v51;
  if ((v51 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 22) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_20C5D8CA8((uint64_t *)a3, (unsigned int **)&v50);
    v9 = (uint64_t *)((char *)this + 8);
    v10 = (_DWORD *)((char *)this + 16);
    sub_20C35C4F8((uint64_t)v40, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, (uint64_t)v45);
    if ((v44 & 7) != 0)
    {
      v11 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
    sub_20BFD265C(&v42);
    if (v41)
      sub_20C35C614(v41);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v45, v13))
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v45, a2);
      LOBYTE(v8) = v14;
    }
    else
    {
      v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v15)
        v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 28) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_33;
      sub_20C35C4F8((uint64_t)v35, v9, v10);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v16)
        v16 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      sub_20C5D8CA8((uint64_t *)v16 + 28, (unsigned int **)&v34);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v35, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t)v40);
      if ((v34 & 7) != 0)
      {
        v17 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v39 & 7) != 0)
      {
        v19 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      v8 = v35;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
      sub_20BFD265C(&v37);
      if (v36)
        sub_20C35C614(v36);
      IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v40, v21);
      v23 = IsDefined;
      if (IsDefined)
      {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v40, a2);
        LOBYTE(v8) = v24;
      }
      if ((v44 & 7) != 0)
      {
        v25 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (v41)
        sub_20C35C614(v41);
      if ((v23 & 1) == 0)
LABEL_33:
        LOBYTE(v8) = 0;
    }
    if ((v49 & 7) != 0)
    {
      v27 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_20BFD265C(&v47);
    if (v46)
      sub_20C35C614(v46);
    if ((v50 & 7) != 0)
    {
      v29 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    v7 = v51;
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  if ((v7 & 7) != 0)
  {
    v31 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  return v8 & 1;
}

void sub_20C5D92F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  v20 = *(_QWORD *)(v19 - 56);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceCode(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1, uint64_t a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  std::type_info_vtbl *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  uint64_t IsDefined;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BYTE v25[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  std::type_info v31;
  std::type_info v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_20C5D9664(a3, (unsigned int **)&v30);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v6 = (std::type_info_vtbl *)*((_QWORD *)v5 + 23);
  v32.__vftable = v6;
  v32.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v32.__vftable = (std::type_info_vtbl *)((unint64_t)v32.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(a1, &v32, 0, (uint64_t)v25);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v25, v9))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10)
      v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v31.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C520700;
    sub_20BF77444((unsigned int **)&v31, a2);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v10 + 80), 0, 1, &v31, 0, (uint64_t)&v20);
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20, v11);
    if ((v24 & 7) != 0)
    {
      v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    if (v21)
      sub_20C35C614(v21);
    sub_20BF4C2D8((uint64_t)&v31);
  }
  else
  {
    IsDefined = 0;
  }
  if ((v29 & 7) != 0)
  {
    v15 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  sub_20BF4C2D8((uint64_t)&v32);
  if ((v30 & 7) != 0)
  {
    v17 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  return IsDefined;
}

void sub_20C5D95D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;

  sub_20C372B54((uint64_t)&a13);
  sub_20BF4C2D8(v17 - 56);
  if ((a17 & 7) != 0)
  {
    v19 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

void sub_20C5D9664(uint64_t *a1@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  std::string __p;
  void **v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 28) & 0xFFFFFFFFFFFFFFF8))
  {
    v25 = *(unsigned int **)(sub_20C5DA474() + 24);
    *a2 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 2, v26));
      if ((v27 & 1) == 0)
        *a2 = v26;
    }
  }
  else
  {
    v5 = *(_QWORD *)sub_20C5DA474();
    v34 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 = *a1;
    v35 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v11)
      v11 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v12 = *((_QWORD *)v11 + 23);
    v36 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v32 = (void **)&v28;
    v33 = 0;
    v15 = operator new(0x18uLL);
    v16 = 0;
    v28 = v15;
    v29 = v15;
    v30 = v15 + 3;
    do
    {
      v17 = *(&v34 + v16);
      *v15 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          *v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v16;
      ++v15;
    }
    while (v16 != 3);
    v29 = v15;
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v28, &__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    v20 = &v37;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = (void **)&v28;
    sub_20BEEB2B8(&v32);
    do
    {
      v22 = *--v20;
      v21 = v22;
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    while (v20 != &v34);
  }
}

void sub_20C5D98D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;

  while (1)
  {
    v22 = *((_QWORD *)v20 - 1);
    v20 -= 8;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    if (v20 == &a20)
      _Unwind_Resume(exception_object);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceCode(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  char v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int IsDefined;
  char v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v34;
  _BYTE v35[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  int v42;
  int v43;
  uint64_t v44;
  _BYTE v45[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource(a1, (unsigned int **)&v51);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = v51;
  if ((v51 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 23) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_20C5D9664(a3, (unsigned int **)&v50);
    v9 = (uint64_t *)((char *)a1 + 8);
    v10 = (_DWORD *)((char *)a1 + 16);
    sub_20C35C4F8((uint64_t)v40, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, (uint64_t)v45);
    if ((v44 & 7) != 0)
    {
      v11 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
    sub_20BFD265C(&v42);
    if (v41)
      sub_20C35C614(v41);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v45, v13))
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v45, a2);
      LOBYTE(v8) = v14;
    }
    else
    {
      v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v15)
        v15 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 28) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_33;
      sub_20C35C4F8((uint64_t)v35, v9, v10);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v16)
        v16 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      sub_20C5D9664((uint64_t *)v16 + 28, (unsigned int **)&v34);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v35, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t)v40);
      if ((v34 & 7) != 0)
      {
        v17 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v39 & 7) != 0)
      {
        v19 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      v8 = v35;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
      sub_20BFD265C(&v37);
      if (v36)
        sub_20C35C614(v36);
      IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v40, v21);
      v23 = IsDefined;
      if (IsDefined)
      {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v40, a2);
        LOBYTE(v8) = v24;
      }
      if ((v44 & 7) != 0)
      {
        v25 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (v41)
        sub_20C35C614(v41);
      if ((v23 & 1) == 0)
LABEL_33:
        LOBYTE(v8) = 0;
    }
    if ((v49 & 7) != 0)
    {
      v27 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_20BFD265C(&v47);
    if (v46)
      sub_20C35C614(v46);
    if ((v50 & 7) != 0)
    {
      v29 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    v7 = v51;
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  if ((v7 & 7) != 0)
  {
    v31 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  return v8 & 1;
}

void sub_20C5D9C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  v20 = *(_QWORD *)(v19 - 56);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  _Unwind_Resume(exception_object);
}

unint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderNodeForSourceType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t *ShaderNodeFromAsset;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  pxrInternal__aapl__pxrReserved__::SdrRegistry *SourceCode;
  char v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  pxrInternal__aapl__pxrReserved__::SdrRegistry *ShaderId;
  char v15;
  pxrInternal__aapl__pxrReserved__::SdrRegistry *v16;
  unsigned int *v17;
  unsigned int v18;
  int SourceAsset;
  pxrInternal__aapl__pxrReserved__::SdrRegistry *SourceAssetSubIdentifier;
  unint64_t Instance;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void *v29;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  void *__p;
  char v42;
  unint64_t v43;

  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource(this, (unsigned int **)&v43);
  ShaderNodeFromAsset = &pxrInternal__aapl__pxrReserved__::UsdShadeTokens;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((v43 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v5 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v6)
      v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((v43 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 22) & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v39);
      SourceAsset = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAsset(this, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v39, a2);
      v9 = SourceAsset;
      if (SourceAsset)
      {
        v38 = 0;
        SourceAssetSubIdentifier = (pxrInternal__aapl__pxrReserved__::SdrRegistry *)pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAssetSubIdentifier(this, (pxrInternal__aapl__pxrReserved__::TfToken *)&v38, a2);
        Instance = pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(SourceAssetSubIdentifier);
        sub_20C35C4F8((uint64_t)&v29, (uint64_t *)this + 1, (_DWORD *)this + 4);
        sub_20C5DA124((uint64_t)&v29, (uint64_t)v33);
        ShaderNodeFromAsset = (unint64_t *)pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeFromAsset(Instance, (pxrInternal__aapl__pxrReserved__ *)v39, (uint64_t)v33, &v38, a2);
        sub_20C1E7FB4((uint64_t)v33);
        if ((v32 & 7) != 0)
        {
          v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
        sub_20BFD265C(&v31);
        if (v30)
          sub_20C35C614(v30);
        if ((v38 & 7) != 0)
        {
          v24 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
      }
      if (v42 < 0)
        operator delete(__p);
      if (v40 < 0)
      {
        v13 = v39[0];
        goto LABEL_38;
      }
LABEL_39:
      if ((v9 & 1) != 0)
        goto LABEL_41;
      goto LABEL_40;
    }
    v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7)
      v7 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((v43 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 23) & 0xFFFFFFFFFFFFFFF8))
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      SourceCode = (pxrInternal__aapl__pxrReserved__::SdrRegistry *)pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceCode(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v29, (uint64_t *)a2);
      v9 = (char)SourceCode;
      if ((_DWORD)SourceCode)
      {
        v10 = pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(SourceCode);
        sub_20C35C4F8((uint64_t)v33, (uint64_t *)this + 1, (_DWORD *)this + 4);
        sub_20C5DA124((uint64_t)v33, (uint64_t)v39);
        ShaderNodeFromAsset = (unint64_t *)pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeFromSourceCode(v10, (uint64_t)&v29, a2, (uint64_t)v39);
        sub_20C1E7FB4((uint64_t)v39);
        if ((v37 & 7) != 0)
        {
          v11 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
        sub_20BFD265C(&v35);
        if (v34)
          sub_20C35C614(v34);
      }
      if (SHIBYTE(v31) < 0)
      {
        v13 = v29;
LABEL_38:
        operator delete(v13);
        goto LABEL_39;
      }
      goto LABEL_39;
    }
LABEL_40:
    ShaderNodeFromAsset = 0;
    goto LABEL_41;
  }
  v39[0] = 0;
  ShaderId = (pxrInternal__aapl__pxrReserved__::SdrRegistry *)pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderId(this, (pxrInternal__aapl__pxrReserved__::TfToken *)v39);
  v15 = (char)ShaderId;
  if ((_DWORD)ShaderId)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::SdrRegistry *)pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(ShaderId);
    ShaderNodeFromAsset = (unint64_t *)pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByIdentifierAndType(v16, (const pxrInternal__aapl__pxrReserved__::TfToken *)v39, a2);
  }
  if (((uint64_t)v39[0] & 7) != 0)
  {
    v17 = (unsigned int *)((unint64_t)v39[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((v15 & 1) == 0)
    goto LABEL_40;
LABEL_41:
  if ((v43 & 7) != 0)
  {
    v26 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return ShaderNodeFromAsset;
}

void sub_20C5DA02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;

  v24 = *(_QWORD *)(v23 - 40);
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  _Unwind_Resume(exception_object);
}

void sub_20C5DA124(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  void *__p[2];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t *v27;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v26 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  __p[0] = 0;
  v5 = sub_20C3690B8(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), (uint64_t)&v26, (uint64_t *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (v5)
  {
    v24 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v26);
    v25 = v8;
    v9 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v26);
    v11 = v10;
    while (1)
    {
      v12 = !v11 || v24 == v9;
      v13 = v12;
      if (v25 == v11 && v13)
        break;
      sub_20BF834B0(v24 + 56);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
      v27 = &v21;
      v15 = sub_20C5C9848(a2, &v21, (uint64_t)&unk_20CAC184C, &v27);
      v18 = (void **)(v15 + 3);
      if (*((char *)v15 + 47) < 0)
        operator delete(*v18);
      *(_OWORD *)v18 = *(_OWORD *)__p;
      v18[2] = v23;
      HIBYTE(v23) = 0;
      LOBYTE(__p[0]) = 0;
      if ((v21 & 7) != 0)
      {
        v19 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
      }
      sub_20BF4D354(&v24, v16, v17);
    }
  }
  sub_20BF49F14(&v26, 0);
}

void sub_20C5DA2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, _QWORD **a19)
{
  uint64_t v19;

  sub_20BF49F14(&a19, 0);
  sub_20C1E7FB4(v19);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5DA350()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5DA424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_20C5DA474()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A8A0);
  if (!v0)
  {
    v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "info", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "info:sourceAsset", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "info:sourceAsset:subIdentifier", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "info:sourceCode", 0);
    v5 = *(void ***)v0;
    v36 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v36 = (void **)v6;
    }
    v8 = (unsigned int *)*v2;
    v37 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v37 = v9;
    }
    v11 = (unsigned int *)*v3;
    v38 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 = v12;
    }
    v14 = (unsigned int *)*v4;
    v39 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v39 = v15;
    }
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 6) = 0;
    v17 = operator new(0x20uLL);
    v18 = 0;
    *((_QWORD *)v0 + 4) = v17;
    *((_QWORD *)v0 + 5) = v17;
    *((_QWORD *)v0 + 6) = v17 + 4;
    do
    {
      v19 = (unint64_t)(&v36)[v18];
      *v17 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v18;
      ++v17;
    }
    while (v18 != 4);
    v22 = (void ***)&v40;
    *((_QWORD *)v0 + 5) = v17;
    do
    {
      v24 = (uint64_t)*--v22;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &v36);
    while (!__ldaxr(&qword_25498A8A0))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A8A0))
        return (unint64_t)v0;
    }
    __clrex();
    v36 = (void **)(v0 + 32);
    sub_20BEEB2B8(&v36);
    if ((*v4 & 7) != 0)
    {
      v28 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((*v3 & 7) != 0)
    {
      v30 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((*v2 & 7) != 0)
    {
      v32 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v34 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A8A0);
  }
  return (unint64_t)v0;
}

void sub_20C5DA754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v3;
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  uint64_t *v6;
  std::string __p;

  v3 = sub_20C398E78(this);
  if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v5 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
    v6 = (uint64_t *)((*((_QWORD *)v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v6, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C5DA984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4)
{
  int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v13;
  unsigned int *v14;
  uint64_t *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (int *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *a3;
  if ((*a3 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString)
    EmptyString = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v13 = (const void **)((*((_QWORD *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v13 = (const void **)EmptyString;
  }
  v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    v15 = (uint64_t *)(v14 + 4);
  else
    v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v13, (const void **)v15, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v40);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  if ((v9 & 7) != 0)
  {
    do
      v16 = __ldxr(v14);
    while (__stlxr(v16 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t)&__p);
  *(_DWORD *)a1 = (_DWORD)__p;
  v17 = v36;
  v36 = 0;
  v18 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v17;
  if (v18)
    sub_20C35C614(v18);
  sub_20BFD3EBC(v8, &v37);
  sub_20BFD3F10((int *)(a1 + 20), &v38);
  if (&__p == (void **)a1)
  {
    if ((v39 & 7) != 0)
    {
      v22 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    *(_QWORD *)(a1 + 24) = v39;
    v39 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_20BFD265C(&v37);
  if (v36)
    sub_20C35C614(v36);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, v24) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)a2, &v40, a4, 0, 0, (uint64_t)&__p);
    *(_DWORD *)a1 = (_DWORD)__p;
    v25 = v36;
    v36 = 0;
    v26 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v25;
    if (v26)
      sub_20C35C614(v26);
    sub_20BFD3EBC(v8, &v37);
    sub_20BFD3F10((int *)(a1 + 20), &v38);
    if (&__p == (void **)a1)
    {
      if ((v39 & 7) != 0)
      {
        v30 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 24);
      if ((v27 & 7) != 0)
      {
        v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      *(_QWORD *)(a1 + 24) = v39;
      v39 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
    sub_20BFD265C(&v37);
    if (v36)
      sub_20C35C614(v36);
  }
  if ((v40 & 7) != 0)
  {
    v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  return a1;
}

void sub_20C5DACA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;

  if ((a17 & 7) != 0)
  {
    v19 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  sub_20C372B54(v17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::Set(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  unsigned int v3;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unint64_t *v8;
  unint64_t v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int IsDefined;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__ *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;

  LODWORD(v18) = *(_DWORD *)a1;
  v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  v19 = v7;
  if (v7)
  {
    v8 = (unint64_t *)((char *)v7 + 48);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54(&v20, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v21, (_DWORD *)(a1 + 20));
  v11 = *(_QWORD *)(a1 + 24);
  v22 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v18, v10);
  if (IsDefined)
    v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(&v18, a2, a3);
  if ((v22 & 7) != 0)
  {
    v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
  return IsDefined & v3;
}

void sub_20C5DAE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20C5DAED4();
  v8 = 0;
  result = sub_20C361C9C((uint64_t)this, v4, (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

unint64_t sub_20C5DAED4()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_25498A8A8);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "renderType", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_25498A8A8))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A8A8))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A8A8);
  }
  return (unint64_t)v0;
}

void sub_20C5DB01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetRenderType@<W0>(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this@<X0>, _QWORD *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20C5DAED4();
  v8 = 0;
  result = sub_20C361F00((uint64_t)this, v4, (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v2;

  v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5DAED4();
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, v2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  void *__p[2];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t *v27;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v26 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  __p[0] = 0;
  v5 = sub_20C3690B8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), (uint64_t)&v26, (uint64_t *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (v5)
  {
    v24 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v26);
    v25 = v8;
    v9 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v26);
    v11 = v10;
    while (1)
    {
      v12 = !v11 || v24 == v9;
      v13 = v12;
      if (v25 == v11 && v13)
        break;
      sub_20BF834B0(v24 + 56);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
      v27 = &v21;
      v15 = sub_20C5C9848(a2, &v21, (uint64_t)&unk_20CAC184C, &v27);
      v18 = (void **)(v15 + 3);
      if (*((char *)v15 + 47) < 0)
        operator delete(*v18);
      *(_OWORD *)v18 = *(_OWORD *)__p;
      v18[2] = v23;
      HIBYTE(v23) = 0;
      LOBYTE(__p[0]) = 0;
      if ((v21 & 7) != 0)
      {
        v19 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
      }
      sub_20BF4D354(&v24, v16, v17);
    }
  }
  sub_20BF49F14(&v26, 0);
}

void sub_20C5DB2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, _QWORD **a19)
{
  uint64_t v19;

  sub_20BF49F14(&a19, 0);
  sub_20C1E7FB4(v19);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  sub_20BF834B0((uint64_t)v6);
  return sub_20BF4C2D8((uint64_t)v6);
}

void sub_20C5DB428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetSdrMetadata(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    v3 = result;
    do
    {
      result = pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetSdrMetadataByKey(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 2), (uint64_t (**)(_QWORD, uint64_t))v2 + 3);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetSdrMetadataByKey(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return sub_20C369820(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 168), a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2)
    v2 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ClearSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2)
    v2 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ClearSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  uint64_t *v7;
  const char *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const char *v13;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this);
    if ((_DWORD)result)
    {
      v4 = sub_20C398E78(this);
      if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
      v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v6)
        v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*((_QWORD *)v6 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
        v7 = (uint64_t *)((*((_QWORD *)v6 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      if (*((char *)v7 + 23) >= 0)
        v8 = (const char *)v7;
      else
        v8 = (const char *)*v7;
      v9 = *((char *)EmptyString + 23);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)EmptyString + 23);
      else
        v10 = EmptyString[1];
      v11 = strlen(v8);
      if (v10 >= v11)
      {
        v12 = v11;
        if (v9 >= 0)
          v13 = (const char *)EmptyString;
        else
          v13 = (const char *)*EmptyString;
        return strncmp(v13, v8, v12) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetConnectedSources(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C5DB79C(a1, (uint64_t)&v7);
  v3 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::SetConnectedSources((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7, a2);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v3;
}

void sub_20C5DB788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C5DB79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
  result = sub_20BFD6EA4((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_20C5DB854()
{
  void *__p[2];
  char v1;

  sub_20C5DDA68();
  sub_20BDDC0E4(__p, "Shader");
  sub_20C5DDB88((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5DB8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdShade/shader.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdShadeShader pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5DBA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A8B8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A8B8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A8B0, "Shader");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A8B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A8B8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A8B0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdShade/shader.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdShadeShader pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(const UsdStag"
                            "ePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5DBC34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A8B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A8C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A8C8))
  {
    __cxa_guard_release(&qword_25498A8C8);
  }
  return &qword_25498A8C0;
}

void sub_20C5DBCD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A8C8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A8D8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)__cxa_guard_acquire(&qword_25498A8D8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v3);
      byte_25498A8D0 = sub_20C35BD7C((char *)&qword_25498A8C0, v4, v5);
      __cxa_guard_release(&qword_25498A8D8);
    }
  }
  return byte_25498A8D0;
}

void sub_20C5DBD54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A8D8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(this);
  return &qword_25498A8C0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A8F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A8F8))
  {
    qword_25498A8E0 = 0;
    *(_QWORD *)algn_25498A8E8 = 0;
    qword_25498A8F0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A8E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A8F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498A918);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498A918))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    qword_25498A900 = 0;
    *(_QWORD *)algn_25498A908 = 0;
    qword_25498A910 = 0;
    sub_20BFE538C(&qword_25498A900, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A900, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A918);
  }
  if (v1)
    return &qword_25498A900;
  else
    return &qword_25498A8E0;
}

void sub_20C5DBE84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A918);
  _Unwind_Resume(a1);
}

void sub_20C5DBE9C(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  _WORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _WORD *v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x10uLL);
  v4[4] = 256;
  *(_QWORD *)v4 = &unk_24C53DB98;
  v9 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53DBF0;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v10 = v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C5DBF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20C96BDF8(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdShadeShader *pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53DB40;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53DB40;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C5DC01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C5DC0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5DC174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5DC24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5DC324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5DC3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5DC4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5DC5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5DC694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[4];

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_24C53DAE8;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSourceAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5DC764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5DC84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[4];

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_24C53DAE8;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5DC91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5DCA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSource(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[4];

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_24C53DAE8;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5DCAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53DAE8;
  v3 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v3;
}

void sub_20C5DCBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t ShaderId;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53DAE8;
  ShaderId = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return ShaderId;
}

void sub_20C5DCC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  v5 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAsset((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return v5;
}

void sub_20C5DCD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t SourceAsset;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  SourceAsset = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAsset((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return SourceAsset;
}

void sub_20C5DCE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, std::type_info_vtbl **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  v5 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAssetSubIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return v5;
}

void sub_20C5DCF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t SourceAssetSubIdentifier;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  SourceAssetSubIdentifier = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAssetSubIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return SourceAssetSubIdentifier;
}

void sub_20C5DD004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSourceCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  v5 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceCode((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return v5;
}

void sub_20C5DD0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceCode(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t *a3)
{
  uint64_t SourceCode;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53DAE8;
  SourceCode = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceCode((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return SourceCode;
}

void sub_20C5DD1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderNodeForSourceType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t *ShaderNodeForSourceType;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53DAE8;
  ShaderNodeForSourceType = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderNodeForSourceType((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return ShaderNodeForSourceType;
}

void sub_20C5DD29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  _BOOL4 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  void **v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  void *v26;
  uint64_t v27;
  _QWORD **v28;
  uint64_t *v29;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v28 = 0;
  sub_20C35C4F8((uint64_t)__p, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v23 = 0;
  v4 = sub_20C3690B8((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), (uint64_t)&v28, &v23);
  if ((v23 & 7) != 0)
  {
    v5 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v27 & 7) != 0)
  {
    v7 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_20BFD265C(&v26);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  if (v4)
  {
    v23 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v28);
    v24 = v9;
    v10 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v28);
    v12 = v11;
    while (1)
    {
      v13 = !v12 || v23 == v10;
      v14 = v13;
      if (v24 == v12 && v14)
        break;
      sub_20BF834B0(v23 + 56);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
      v29 = &v22;
      v16 = sub_20C5C9848(a2, &v22, (uint64_t)&unk_20CAC184C, &v29);
      v19 = (void **)(v16 + 3);
      if (*((char *)v16 + 47) < 0)
        operator delete(*v19);
      *(_OWORD *)v19 = *(_OWORD *)__p;
      v19[2] = v26;
      HIBYTE(v26) = 0;
      LOBYTE(__p[0]) = 0;
      if ((v22 & 7) != 0)
      {
        v20 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
        if (SHIBYTE(v26) < 0)
          operator delete(__p[0]);
      }
      sub_20BF4D354(&v23, v17, v18);
    }
  }
  sub_20BF49F14(&v28, 0);
}

void sub_20C5DD4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, _QWORD **a19)
{
  uint64_t v19;

  sub_20C35C2E0((uint64_t)&__p);
  sub_20BF49F14(&a19, 0);
  sub_20C1E7FB4(v19);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  sub_20C35C4F8((uint64_t)v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v7, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  sub_20BF834B0((uint64_t)v12);
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C5DD640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSdrMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSdrMetadataByKey(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(i + 2), (uint64_t (**)(_QWORD, uint64_t))i + 3);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSdrMetadataByKey(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  sub_20C35C4F8((uint64_t)&v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5)
    v5 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  sub_20C369820((uint64_t)&v8, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v5 + 168), a3, a2);
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
}

void sub_20C5DD760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::HasSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v1;
  uint64_t HasMetadata;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v1)
    v1 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v1 + 168));
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return HasMetadata;
}

void sub_20C5DD81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::HasSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t HasMetadataDictKey;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  sub_20C35C4F8((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  HasMetadataDictKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), a2);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return HasMetadataDictKey;
}

void sub_20C5DD8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::ClearSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_20C35C4F8((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v1)
    v1 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v1 + 168));
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  if (v5)
    sub_20C35C614(v5);
}

void sub_20C5DD994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::ClearSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3)
    v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5DDA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5DDA68()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5DDB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5DDB88(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5DDC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5DDC40(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);
  operator delete(v1);
}

uint64_t sub_20C5DDC54()
{
  return 0;
}

void sub_20C5DDC60(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5DDC74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5DDC8C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53DC40))
    return a1 + 24;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::_cache(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdStageCache *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A928);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A928))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStageCache *)operator new(0x48uLL);
    pxrInternal__aapl__pxrReserved__::UsdStageCache::UsdStageCache(v3);
    qword_25498A920 = (uint64_t)v3;
    __cxa_guard_release(&qword_25498A928);
  }
  return qword_25498A920;
}

void sub_20C5DDD30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25498A928);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::Parse@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  void ***v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  const pxrInternal__aapl__pxrReserved__::TfToken *v33;
  const pxrInternal__aapl__pxrReserved__::TfToken *v34;
  pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v36;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v38;
  unsigned int *v39;
  unsigned int v40;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  char IsDefined;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v46;
  _QWORD *v47;
  void **v48;
  unsigned int *v49;
  unsigned int v50;
  const char *v52;
  const char *v53;
  void *v54;
  __int128 *v55;
  _BYTE v56[40];
  _BYTE v57[32];
  char *v58[3];
  void *v59;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v60;
  uint64_t v61;
  __int128 __p;
  unsigned __int8 v63;
  void (**v64)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v65;
  pxrInternal__aapl__pxrReserved__::SdfPath *v66;
  pxrInternal__aapl__pxrReserved__::SdfPath *v67;
  char *v68;
  int v69;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v70;
  int v71;
  int v72;
  uint64_t v73;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v74;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v75;
  _BYTE v76[32];
  _QWORD v77[5];
  std::string v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD v82[2];
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v4 = (__int128 *)(a1 + 96);
  v60 = 0;
  v61 = 0;
  v59 = &v60;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1 + 96, &v59, &v75);
  sub_20BDE9D48((uint64_t)&v59, v60);
  v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::_cache(v5);
  sub_20C1034E8((uint64_t *)&v59, (uint64_t *)&v75);
  pxrInternal__aapl__pxrReserved__::UsdStageCache::FindOneMatching(v6, (uint64_t *)&v59, &v74);
  v7 = v60;
  if (v60)
  {
    v8 = (unsigned int *)((char *)v60 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (v74)
    goto LABEL_13;
  sub_20C1034E8((uint64_t *)&v59, (uint64_t *)&v75);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v59, 0, (pxrInternal__aapl__pxrReserved__ **)&v80);
  v11 = v74;
  v74 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v80;
  v80 = 0;
  sub_20BF1D8F4((int)&v74, v11);
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v80);
  v12 = v60;
  if (v60)
  {
    v13 = (unsigned int *)((char *)v60 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *))(*(_QWORD *)v12 + 8))(v12);
  }
  v16 = pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::_cache(v12);
  pxrInternal__aapl__pxrReserved__::UsdStageCache::Insert(v16, (uint64_t *)&v74);
  if (v74)
  {
LABEL_13:
    v69 = 1;
    v70 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v71);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v72);
    v73 = 0;
    v80 = *(_QWORD *)a1;
    if ((v80 & 7) != 0)
    {
      v17 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v80 &= 0xFFFFFFFFFFFFFFF8;
    }
    v19 = *(_QWORD *)(a1 + 208);
    v81 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v59 = &v66;
    LOBYTE(v60) = 0;
    v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x10uLL);
    v24 = 0;
    v66 = v22;
    v67 = v22;
    v68 = (char *)v22 + 16;
    do
    {
      v25 = *(&v80 + v24);
      *(_QWORD *)v22 = v25;
      if ((v25 & 7) != 0)
      {
        v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 2, v26));
        if ((v27 & 1) == 0)
          *(_QWORD *)v22 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v24;
      v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 8);
    }
    while (v24 != 2);
    v28 = (void ***)v82;
    v67 = v22;
    do
    {
      v30 = (uint64_t)*--v28;
      v29 = v30;
      if ((v30 & 7) != 0)
      {
        v31 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
    }
    while (v28 != (void ***)&v80);
    v55 = v4;
    v34 = v66;
    v33 = v67;
    if (v66 != v67)
    {
      do
      {
        v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v22);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v35, v34, &v80);
        v36 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8((uint64_t *)&v74);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v80, (uint64_t)&v59);
        v69 = (int)v59;
        v37 = v60;
        v60 = 0;
        v38 = v70;
        v70 = v37;
        if (v38)
          sub_20C35C614(v38);
        sub_20BFD3EBC(&v71, (int *)&v61);
        sub_20BFD3F10(&v72, (int *)&v61 + 1);
        if ((v73 & 7) != 0)
        {
          v39 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        v73 = __p;
        *(_QWORD *)&__p = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
        sub_20BFD265C(&v61);
        if (v60)
          sub_20C35C614(v60);
        IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69, v41);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
        v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v80);
        v34 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v34 + 8);
        if (v34 == v33)
          v43 = 1;
        else
          v43 = IsDefined;
      }
      while ((v43 & 1) == 0);
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69, v23) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v64, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v69);
      v64 = off_24C53DB40;
      if (v65
        && (*(_BYTE *)(v65 + 57) & 8) == 0
        && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v64) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v59);
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceAsset((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v64, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v59, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 64)) & 1) != 0)
        {
          v44 = v63;
          if ((v63 & 0x80u) != 0)
            v44 = *((_QWORD *)&__p + 1);
          if (v44)
          {
            v54 = operator new(0x220uLL);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v64, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v57);
            pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetShaderProperties((pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils *)v57, v58);
            sub_20C1E96B8((uint64_t)v56, a1 + 144);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSdrMetadata((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v64, (uint64_t)&v80);
            v45 = (_QWORD *)v82[0];
            if (v82[0])
            {
              do
              {
                sub_20C1E972C((uint64_t)v56, v45 + 2, v45 + 2);
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            sub_20C1E96B8((uint64_t)v77, (uint64_t)v56);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v64, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v76);
            pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString(v77, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v76, &v78);
            v46 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
            if (!v46)
              v46 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
            v79 = (uint64_t *)((char *)v46 + 48);
            v47 = sub_20C5DEC3C((uint64_t)v56, (_QWORD *)v46 + 6, (uint64_t)&unk_20CAC184C, &v79);
            v48 = (void **)(v47 + 3);
            if (*((char *)v47 + 47) < 0)
              operator delete(*v48);
            *(std::string *)v48 = v78;
            *((_BYTE *)&v78.__r_.__value_.__s + 23) = 0;
            v78.__r_.__value_.__s.__data_[0] = 0;
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v76);
            sub_20C1E7FB4((uint64_t)v77);
            sub_20C1E7FB4((uint64_t)&v80);
            *a2 = pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode((uint64_t)v54, (uint64_t *)a1, (uint64_t *)(a1 + 8), (__int128 *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 56), (uint64_t *)(a1 + 64), v55, &__p, (uint64_t)v58, (uint64_t)v56, (__int128 *)(a1 + 120));
            sub_20C1E7FB4((uint64_t)v56);
            v80 = (unint64_t)v58;
            sub_20C086448((void ***)&v80);
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v57);
          }
          else
          {
            v80 = (unint64_t)"usdShade/shaderDefParser.cpp";
            v81 = (unint64_t)"Parse";
            v82[0] = 120;
            v82[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::Parse(con"
                     "st NdrNodeDiscoveryResult &)";
            v83 = 0;
            if (v61 >= 0)
              v52 = (const char *)&v59;
            else
              v52 = (const char *)v59;
            v53 = (const char *)v55;
            if (*(char *)(a1 + 119) < 0)
              v53 = *(const char **)(a1 + 96);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v80, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to resolve path @%s@ in shader definition file '%s'", v52, v53);
            pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a2);
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a2);
        }
        if ((char)v63 < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v61) < 0)
          operator delete(v59);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a2);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v64);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a2);
    }
    v59 = &v66;
    sub_20BEEB2B8((void ***)&v59);
    if ((v73 & 7) != 0)
    {
      v49 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
    sub_20BFD265C(&v71);
    if (v70)
      sub_20C35C614(v70);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a2);
  }
  sub_20C455C74(&v74);
  return sub_20C103234(&v75);
}

void sub_20C5DE444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a44)
{
  uint64_t v44;

  sub_20BE930F8((uint64_t)&a28);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&a34);
  a28 = &a37;
  sub_20BEEB2B8((void ***)&a28);
  sub_20C35C2E0((uint64_t)&a40);
  sub_20C455C74(&a44);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v44 - 256));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::GetDiscoveryTypes(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25498A948);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A948))
  {
    v3 = *(_QWORD *)sub_20C5DE86C();
    v17 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v17 = (uint64_t)v4;
    }
    v6 = *(_QWORD *)(sub_20C5DE86C() + 8);
    v18 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = *(_QWORD *)(sub_20C5DE86C() + 16);
    v19 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(qword_25498A930, &v17, 3uLL);
    v12 = &v20;
    do
    {
      v14 = *--v12;
      v13 = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    while (v12 != &v17);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_25498A930, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A948);
  }
  return qword_25498A930;
}

void sub_20C5DE7F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = v1 + 24;
  while (1)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    if (v3 == v1)
    {
      __cxa_guard_abort(&qword_25498A948);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_20C5DE86C()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  void **v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A950);
  if (!v0)
  {
    v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "usda", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "usdc", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "usd", 0);
    v4 = *(void ***)v0;
    v30 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v30 = (void **)v5;
    }
    v7 = (unsigned int *)*v2;
    v31 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v31 = v8;
    }
    v10 = (unsigned int *)*v3;
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 = v11;
    }
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    v13 = operator new(0x18uLL);
    v14 = 0;
    *((_QWORD *)v0 + 3) = v13;
    *((_QWORD *)v0 + 4) = v13;
    *((_QWORD *)v0 + 5) = v13 + 3;
    do
    {
      v15 = (unint64_t)(&v30)[v14];
      *v13 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
      ++v13;
    }
    while (v14 != 3);
    v18 = (void ***)&v33;
    *((_QWORD *)v0 + 4) = v13;
    do
    {
      v20 = (uint64_t)*--v18;
      v19 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    while (v18 != &v30);
    while (!__ldaxr(&qword_25498A950))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A950))
        return (unint64_t)v0;
    }
    __clrex();
    v30 = (void **)(v0 + 24);
    sub_20BEEB2B8(&v30);
    if ((*v3 & 7) != 0)
    {
      v24 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if ((*v2 & 7) != 0)
    {
      v26 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v28 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A950);
  }
  return (unint64_t)v0;
}

void sub_20C5DEAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::GetSourceType(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A960);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A960))
  {
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498A958, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A960);
  }
  return &unk_25498A958;
}

uint64_t sub_20C5DEC10()
{
  uint64_t *v0;

  v0 = sub_20C5DEEA0();
  return sub_20C5DEFC0(v0);
}

void sub_20C5DEC28(unsigned int **a1, const void *a2)
{
  void *v2;

  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::~NdrParserPlugin(a1, a2);
  operator delete(v2);
}

_QWORD *sub_20C5DEC3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20BF23DDC(a1, v7, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v22, 0);
  return v11;
}

void sub_20C5DEE88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5DEEA0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5DF048((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5DEF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5DEFC0(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C53DCB8;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C5DF024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C5DF048(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5DF0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5DF0DC(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_QWORD *sub_20C5DF0F0()
{
  _QWORD *v0;

  v0 = operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(v0);
  *v0 = &off_24C53DC68;
  return v0;
}

void sub_20C5DF128(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetNodeDiscoveryResults(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  pxrInternal__aapl__pxrReserved__::NdrVersion *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t *Resolver;
  uint64_t v19;
  uint64_t i;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  unint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v24;
  uint64_t *EmptyString;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *Text;
  char *v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  int v43;
  void **v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  char v48;
  uint64_t v49[3];
  int v50;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  char v59;
  uint64_t v60;
  std::string v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int *v65[2];
  unsigned __int8 v66;
  unsigned int **v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSource((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1, v65);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v7 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
  v8 = *((_QWORD *)v6 + 22) & 0xFFFFFFFFFFFFFFF8;
  if (((uint64_t)v65[0] & 7) != 0)
  {
    do
      v9 = __ldxr(v7);
    while (__stlxr(v9 - 2, v7));
  }
  if (v7 == (unsigned int *)v8)
  {
    v10 = (_DWORD *)sub_20C35C4F8((uint64_t)&v61.__r_.__value_.__l.__size_, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    v11 = (uint64_t *)sub_20C398E78(v10);
    v61.__r_.__value_.__r.__words[0] = 0;
    v60 = 0;
    v59 = 0;
    v58 = 0;
    v12 = sub_20C398E78(&v61.__r_.__value_.__r.__words[1]);
    if ((pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier(v12, &v61, (pxrInternal__aapl__pxrReserved__::TfToken *)&v60, (pxrInternal__aapl__pxrReserved__::TfToken *)&v58, v13) & 1) == 0)
    {
LABEL_51:
      if ((v60 & 7) != 0)
      {
        v36 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((v61.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v38 = (unsigned int *)(v61.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((v64 & 7) != 0)
      {
        v40 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
      sub_20BFD265C(&v62);
      if (v61.__r_.__value_.__r.__words[2])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v61.__r_.__value_.__r.__words[2]);
      return;
    }
    v14 = atomic_load((unsigned __int8 *)&qword_25498A980);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25498A980))
    {
      sub_20BDDC0E4(&qword_25498A968, "info:");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25498A968, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498A980);
    }
    v15 = atomic_load((unsigned __int8 *)&qword_25498A9A0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25498A9A0))
    {
      sub_20BDDC0E4(&qword_25498A988, ":sourceAsset");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25498A988, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498A9A0);
    }
    v65[0] = (unsigned int *)&off_24C53DCF8;
    v67 = v65;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties((uint64_t)&v61.__r_.__value_.__l.__size_, (uint64_t)v65, &v56);
    v16 = v67;
    if (v67 == v65)
    {
      v17 = 4;
      v16 = v65;
    }
    else
    {
      if (!v67)
      {
LABEL_14:
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v16);
        pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v55);
        if ((char)v66 < 0)
          operator delete(v65[0]);
        v19 = v56;
        for (i = v57; v19 != i; v19 += 32)
        {
          sub_20C3AD760(v19, (uint64_t)&v50);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v50, v21) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v65);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)&v50, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v65);
            if (v22)
            {
              v23 = v66;
              if ((v66 & 0x80u) != 0)
                v23 = (unint64_t)v65[1];
              if (v23)
              {
                v24 = sub_20C398E78(&v50);
                if ((*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8) != 0)
                  EmptyString = (uint64_t *)((*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8) + 16);
                else
                  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
                pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)EmptyString, v49);
                if (v49[1] - v49[0] == 24)
                {
                  v26 = v69;
                  if ((v69 & 0x80u) != 0)
                    v26 = v68;
                  if (v26)
                  {
                    v44 = v58;
                    LODWORD(v45) = 1;
                    v27 = a3[1];
                    if (v27 >= a3[2])
                    {
                      v28 = sub_20C5E22E8(a3, v11, (uint64_t *)&v44, &v60, (uint64_t *)&v61, &v55, (uint64_t *)(v49[0] + 8), a2, a2);
                    }
                    else
                    {
                      sub_20C5E2460((pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 2), v27, v11, (uint64_t *)&v44, &v60, (uint64_t *)&v61, &v55, (uint64_t *)(v49[0] + 8), a2, a2);
                      v28 = v27 + 216;
                      a3[1] = v27 + 216;
                    }
                    a3[1] = v28;
                  }
                  else
                  {
                    v44 = (void **)"usdShade/shaderDefUtils.cpp";
                    v45 = "GetNodeDiscoveryResults";
                    v46 = 136;
                    v47 = "static NdrNodeDiscoveryResultVec pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::Get"
                          "NodeDiscoveryResults(const UsdShadeShader &, const std::string &)";
                    v48 = 0;
                    sub_20C348EEC((uint64_t)&v50, &v42);
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
                    v31 = v65;
                    if ((v66 & 0x80u) != 0)
                      v31 = (unsigned int **)v65[0];
                    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"Unable to resolve info:sourceAsset <%s> with value @%s@.", v30, Text, v31);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
                    sub_20BFD265C(&v42);
                  }
                }
                v44 = (void **)v49;
                sub_20BEEB2B8(&v44);
              }
            }
            if ((char)v69 < 0)
              operator delete(v67);
            if ((char)v66 < 0)
              operator delete(v65[0]);
          }
          if ((v54 & 7) != 0)
          {
            v32 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
          sub_20BFD265C(&v52);
          if (v51)
            sub_20C35C614(v51);
        }
        if ((v55 & 7) != 0)
        {
          v34 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        v65[0] = (unsigned int *)&v56;
        sub_20C37FA04((void ***)v65);
        goto LABEL_51;
      }
      v17 = 5;
    }
    v16 = (unsigned int **)(*(uint64_t (**)(void))&(*v16)[2 * v17])();
    goto LABEL_14;
  }
}

void sub_20C5DF67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;

  __cxa_guard_abort(&qword_25498A9A0);
  if ((a33 & 7) != 0)
  {
    v36 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(v34 - 184);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  sub_20C35C2E0(v34 - 176);
  *(_QWORD *)(v34 - 144) = v33;
  sub_20C1E7E2C((void ***)(v34 - 144));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetShaderProperties(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils *this@<X0>, char **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty *v4;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v6;
  _QWORD *v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  const char *v10;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  std::string *v16;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v17;
  std::string *v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t *EmptyString;
  __int128 v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v26;
  _QWORD *v27;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v29;
  std::string *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  uint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  pxrInternal__aapl__pxrReserved__::TfType *Type;
  const std::string *v55;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v56;
  std::string *v57;
  unsigned int *v58;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int64x2_t v77;
  char *v78;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput *v79;
  pxrInternal__aapl__pxrReserved__::TfToken *v80;
  uint64_t *v81;
  __int128 v82;
  unsigned int *v83;
  unsigned int v84;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v85;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v86;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v87;
  _QWORD *v88;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v89;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v90;
  std::string *v91;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v92;
  uint64_t v93;
  char *v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v113;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v114;
  pxrInternal__aapl__pxrReserved__::TfType *v115;
  const std::string *v116;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v117;
  std::string *v118;
  unsigned int *v119;
  void *v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  int64x2_t v138;
  char *v139;
  pxrInternal__aapl__pxrReserved__::UsdProperty *i;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput *j;
  _QWORD v143[5];
  pxrInternal__aapl__pxrReserved__::UsdProperty *v144;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v145;
  __int128 v146;
  __int128 v147;
  uint64_t *v148;
  _QWORD *TypeName;
  __int128 v150;
  _QWORD v151[2];
  __int128 v152;
  __int128 v153;
  int v154;
  unsigned int *v155[5];
  __int128 __dst;
  uint64_t v157;
  _BYTE v158[24];
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[5];

  v163[2] = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(this, 0, (uint64_t *)&v144);
  v4 = v144;
  for (i = v145; v4 != i; v4 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)v4 + 32))
  {
    v162 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get(v4, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v161, NAN);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadata(v4, (uint64_t)v143);
    v5 = sub_20C5E0AE0();
    if (sub_20BF2B388(v143, (_QWORD *)(v5 + 8)))
    {
      v6 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v6)
        v6 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      *(_QWORD *)v158 = (char *)v6 + 144;
      v7 = sub_20C5DEC3C((uint64_t)v143, (_QWORD *)v6 + 18, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
      MEMORY[0x212B929D0](v7 + 3, "1");
      v8 = sub_20C5E0AE0();
      sub_20C5E25B8(v143, (_QWORD *)(v8 + 8));
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability(v4, v155);
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9)
      v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (((unint64_t)v155[0] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 11) & 0xFFFFFFFFFFFFFFF8))
      v10 = "0";
    else
      v10 = "1";
    v11 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v11)
      v11 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    *(_QWORD *)v158 = (char *)v11 + 72;
    v12 = sub_20C5DEC3C((uint64_t)v143, (_QWORD *)v11 + 9, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
    MEMORY[0x212B929D0](v12 + 3, v10);
    if (((uint64_t)v155[0] & 7) != 0)
    {
      v13 = (unsigned int *)((unint64_t)v155[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    v15 = sub_20C5E0AE0();
    v16 = (std::string *)sub_20BF2B388(v143, (_QWORD *)(v15 + 16));
    if (v16)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v17)
        v17 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      *(_QWORD *)v158 = (char *)v17 + 128;
      v18 = (std::string *)sub_20C5DEC3C((uint64_t)v143, (_QWORD *)v17 + 16, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
      std::string::operator=(v18 + 1, v16 + 1);
      sub_20BEB587C(v143, v16, (uint64_t)v158);
      sub_20C1E9AAC((uint64_t)v158, 0);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v4, (unsigned int **)v158);
    if ((*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v21 = *(_OWORD *)EmptyString;
      v157 = EmptyString[2];
      __dst = v21;
    }
    if ((v158[0] & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    sub_20BF4C6D0(v163, &v161);
    sub_20C1E96B8((uint64_t)v155, (uint64_t)v143);
    v152 = 0u;
    v153 = 0u;
    v154 = 1065353216;
    v150 = 0uLL;
    v151[0] = 0;
    *(_QWORD *)v158 = pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v4);
    v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v24)
      v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v158, (_QWORD **)v24 + 12))
      goto LABEL_35;
    TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v4);
    v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25)
      v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v25 + 69))
    {
LABEL_35:
      v26 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v26)
        v26 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      *(_QWORD *)v158 = (char *)v26 + 120;
      v27 = sub_20C5DEC3C((uint64_t)v155, (_QWORD *)v26 + 15, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
      MEMORY[0x212B929D0](v27 + 3, "1");
    }
    v28 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v28)
      v28 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (sub_20BF2B2B4(v143, (_QWORD *)v28 + 7))
    {
      v29 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v29)
        v29 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      v30 = (std::string *)sub_20BF2B2B4(v143, (_QWORD *)v29 + 7);
      if (!v30)
        sub_20BEB9194("unordered_map::at: key not found");
      pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::OptionVecVal(v30 + 1, (uint64_t *)v158);
      sub_20C5E2604((uint64_t *)&v150);
      v150 = *(_OWORD *)v158;
      v151[0] = *(_QWORD *)&v158[16];
      memset(v158, 0, sizeof(v158));
      *(_QWORD *)&v146 = v158;
      sub_20C1F3690((void ***)&v146);
    }
    if ((_QWORD)v150 == *((_QWORD *)&v150 + 1))
    {
      v148 = 0;
      v146 = 0u;
      v147 = 0u;
      v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v31)
        v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      *(_QWORD *)v158 = 0;
      sub_20C5E263C((uint64_t)v4, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 8), (uint64_t)&v146, (uint64_t *)v158);
      if ((v158[0] & 7) != 0)
      {
        v34 = (unsigned int *)(*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v146, v32, v33);
      v36 = v148;
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v146, v37, v38);
      v39 = &v148[v146];
      while (v36 != v39)
      {
        v40 = *v36;
        if ((*v36 & 7) != 0)
        {
          v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 2, v41));
          if ((v42 & 1) == 0)
            v40 &= 0xFFFFFFFFFFFFFFF8;
        }
        v43 = *((_QWORD *)&v150 + 1);
        if (*((_QWORD *)&v150 + 1) >= v151[0])
        {
          v45 = (uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 4;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 60)
            sub_20BDDF694();
          v47 = v151[0] - v150;
          if ((uint64_t)(v151[0] - v150) >> 3 > v46)
            v46 = v47 >> 3;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          v160 = v151;
          v49 = (char *)sub_20BDEA2F0((uint64_t)v151, v48);
          v50 = &v49[16 * v45];
          *(_QWORD *)v158 = v49;
          *(_QWORD *)&v158[8] = v50;
          v159 = &v49[16 * v51];
          *(_QWORD *)v50 = v40;
          *((_QWORD *)v50 + 1) = 0;
          *(_QWORD *)&v158[16] = v50 + 16;
          sub_20C1F3728((uint64_t *)&v150, v158);
          v44 = *((_QWORD *)&v150 + 1);
          sub_20C1F38C8((uint64_t)v158);
        }
        else
        {
          **((_QWORD **)&v150 + 1) = v40;
          *(_QWORD *)(v43 + 8) = 0;
          v44 = v43 + 16;
        }
        *((_QWORD *)&v150 + 1) = v44;
        ++v36;
      }
      sub_20C00918C(&v146);
    }
    v52 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v52)
      v52 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!sub_20BF2B388(v155, (_QWORD *)v52 + 17))
    {
      TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v4);
      v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v53)
        v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v53))
      {
        Type = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
        v55 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(Type);
        v56 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        if (!v56)
          v56 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        *(_QWORD *)v158 = (char *)v56 + 136;
        v57 = (std::string *)sub_20C5DEC3C((uint64_t)v155, (_QWORD *)v56 + 17, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
        std::string::operator=(v57 + 1, v55);
      }
    }
    TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v4);
    sub_20C5E1300(&TypeName, v143, (pxrInternal__aapl__pxrReserved__::VtValue *)v163, (unint64_t *)v158);
    v58 = *(unsigned int **)&v158[8];
    *(_QWORD *)&v146 = *(_QWORD *)v158;
    v59 = operator new(0x108uLL);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v4, (unsigned int **)v158);
    pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty((uint64_t)v59, (uint64_t *)v158, (unsigned int **)&v146, v163, 0, v58, v155, (uint64_t)&v152, (uint64_t **)&v150);
    if ((v158[0] & 7) != 0)
    {
      v60 = (unsigned int *)(*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    if ((v146 & 7) != 0)
    {
      v62 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    *(_QWORD *)v158 = &v150;
    sub_20C1F3690((void ***)v158);
    sub_20C1E7FB4((uint64_t)&v152);
    sub_20C1E7FB4((uint64_t)v155);
    sub_20BF4C2D8((uint64_t)v163);
    if (SHIBYTE(v157) < 0)
      operator delete((void *)__dst);
    v65 = a2[1];
    v64 = (unint64_t)a2[2];
    if ((unint64_t)v65 >= v64)
    {
      v67 = (v65 - *a2) >> 3;
      if ((unint64_t)(v67 + 1) >> 61)
        sub_20BDDF694();
      v68 = v64 - (_QWORD)*a2;
      v69 = v68 >> 2;
      if (v68 >> 2 <= (unint64_t)(v67 + 1))
        v69 = v67 + 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      v160 = a2 + 2;
      if (v70)
        v71 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v70);
      else
        v71 = 0;
      v72 = &v71[8 * v67];
      v73 = &v71[8 * v70];
      v159 = v73;
      *(_QWORD *)v72 = v59;
      v66 = v72 + 8;
      *(_QWORD *)&v158[16] = v72 + 8;
      v75 = *a2;
      v74 = a2[1];
      if (v74 == *a2)
      {
        v77 = vdupq_n_s64((unint64_t)v74);
      }
      else
      {
        do
        {
          v76 = *((_QWORD *)v74 - 1);
          v74 -= 8;
          *(_QWORD *)v74 = 0;
          *((_QWORD *)v72 - 1) = v76;
          v72 -= 8;
        }
        while (v74 != v75);
        v77 = *(int64x2_t *)a2;
        v66 = *(char **)&v158[16];
        v73 = v159;
      }
      *a2 = v72;
      a2[1] = v66;
      *(int64x2_t *)&v158[8] = v77;
      v78 = a2[2];
      a2[2] = v73;
      v159 = v78;
      *(_QWORD *)v158 = v77.i64[0];
      sub_20C0A3EB4((uint64_t)v158);
    }
    else
    {
      *(_QWORD *)v65 = v59;
      v66 = v65 + 8;
    }
    a2[1] = v66;
    sub_20C1E7FB4((uint64_t)v143);
    sub_20BF4C2D8((uint64_t)&v161);
  }
  *(_QWORD *)v158 = &v144;
  sub_20C5BE4A8((void ***)v158);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs(this, 0, (uint64_t *)&v144);
  v79 = v144;
  for (j = v145; v79 != j; v79 = (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)((char *)v79 + 32))
  {
    v162 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetSdrMetadata(v79, (uint64_t)v143);
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(v79, (uint64_t)v158);
    if ((*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8) != 0)
      v81 = (uint64_t *)((*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v81 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v80);
    if (*((char *)v81 + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*v81, v81[1]);
    }
    else
    {
      v82 = *(_OWORD *)v81;
      v157 = v81[2];
      __dst = v82;
    }
    if ((v158[0] & 7) != 0)
    {
      v83 = (unsigned int *)(*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8);
      do
        v84 = __ldxr(v83);
      while (__stlxr(v84 - 2, v83));
    }
    sub_20BF4C6D0(v163, &v161);
    sub_20C1E96B8((uint64_t)v155, (uint64_t)v143);
    v152 = 0u;
    v153 = 0u;
    v154 = 1065353216;
    v150 = 0uLL;
    v151[0] = 0;
    *(_QWORD *)v158 = pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(v79);
    v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v85)
      v85 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v158, (_QWORD **)v85 + 12))
      goto LABEL_119;
    TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(v79);
    v86 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v86)
      v86 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v86 + 69))
    {
LABEL_119:
      v87 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v87)
        v87 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      *(_QWORD *)v158 = (char *)v87 + 120;
      v88 = sub_20C5DEC3C((uint64_t)v155, (_QWORD *)v87 + 15, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
      MEMORY[0x212B929D0](v88 + 3, "1");
    }
    v89 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v89)
      v89 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (sub_20BF2B2B4(v143, (_QWORD *)v89 + 7))
    {
      v90 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v90)
        v90 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      v91 = (std::string *)sub_20BF2B2B4(v143, (_QWORD *)v90 + 7);
      if (!v91)
        sub_20BEB9194("unordered_map::at: key not found");
      pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::OptionVecVal(v91 + 1, (uint64_t *)v158);
      sub_20C5E2604((uint64_t *)&v150);
      v150 = *(_OWORD *)v158;
      v151[0] = *(_QWORD *)&v158[16];
      memset(v158, 0, sizeof(v158));
      *(_QWORD *)&v146 = v158;
      sub_20C1F3690((void ***)&v146);
    }
    if ((_QWORD)v150 == *((_QWORD *)&v150 + 1))
    {
      v148 = 0;
      v146 = 0u;
      v147 = 0u;
      v92 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v92)
        v92 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      *(_QWORD *)v158 = 0;
      sub_20C5E263C((uint64_t)v79, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v92 + 8), (uint64_t)&v146, (uint64_t *)v158);
      if ((v158[0] & 7) != 0)
      {
        v95 = (unsigned int *)(*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v146, v93, v94);
      v97 = v148;
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v146, v98, v99);
      v100 = &v148[v146];
      while (v97 != v100)
      {
        v101 = *v97;
        if ((*v97 & 7) != 0)
        {
          v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 2, v102));
          if ((v103 & 1) == 0)
            v101 &= 0xFFFFFFFFFFFFFFF8;
        }
        v104 = *((_QWORD *)&v150 + 1);
        if (*((_QWORD *)&v150 + 1) >= v151[0])
        {
          v106 = (uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 4;
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 60)
            sub_20BDDF694();
          v108 = v151[0] - v150;
          if ((uint64_t)(v151[0] - v150) >> 3 > v107)
            v107 = v108 >> 3;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
            v109 = 0xFFFFFFFFFFFFFFFLL;
          else
            v109 = v107;
          v160 = v151;
          v110 = (char *)sub_20BDEA2F0((uint64_t)v151, v109);
          v111 = &v110[16 * v106];
          *(_QWORD *)v158 = v110;
          *(_QWORD *)&v158[8] = v111;
          v159 = &v110[16 * v112];
          *(_QWORD *)v111 = v101;
          *((_QWORD *)v111 + 1) = 0;
          *(_QWORD *)&v158[16] = v111 + 16;
          sub_20C1F3728((uint64_t *)&v150, v158);
          v105 = *((_QWORD *)&v150 + 1);
          sub_20C1F38C8((uint64_t)v158);
        }
        else
        {
          **((_QWORD **)&v150 + 1) = v101;
          *(_QWORD *)(v104 + 8) = 0;
          v105 = v104 + 16;
        }
        *((_QWORD *)&v150 + 1) = v105;
        ++v97;
      }
      sub_20C00918C(&v146);
    }
    v113 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v113)
      v113 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!sub_20BF2B388(v155, (_QWORD *)v113 + 17))
    {
      TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(v79);
      v114 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v114)
        v114 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (_QWORD **)v114))
      {
        v115 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
        v116 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v115);
        v117 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        if (!v117)
          v117 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        *(_QWORD *)v158 = (char *)v117 + 136;
        v118 = (std::string *)sub_20C5DEC3C((uint64_t)v155, (_QWORD *)v117 + 17, (uint64_t)&unk_20CAC184C, (uint64_t **)v158);
        std::string::operator=(v118 + 1, v116);
      }
    }
    TypeName = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(v79);
    sub_20C5E1300(&TypeName, v143, (pxrInternal__aapl__pxrReserved__::VtValue *)v163, (unint64_t *)v158);
    v119 = *(unsigned int **)&v158[8];
    *(_QWORD *)&v146 = *(_QWORD *)v158;
    v120 = operator new(0x108uLL);
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(v79, (uint64_t)v158);
    pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty((uint64_t)v120, (uint64_t *)v158, (unsigned int **)&v146, v163, 1, v119, v155, (uint64_t)&v152, (uint64_t **)&v150);
    if ((v158[0] & 7) != 0)
    {
      v121 = (unsigned int *)(*(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8);
      do
        v122 = __ldxr(v121);
      while (__stlxr(v122 - 2, v121));
    }
    if ((v146 & 7) != 0)
    {
      v123 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
      do
        v124 = __ldxr(v123);
      while (__stlxr(v124 - 2, v123));
    }
    *(_QWORD *)v158 = &v150;
    sub_20C1F3690((void ***)v158);
    sub_20C1E7FB4((uint64_t)&v152);
    sub_20C1E7FB4((uint64_t)v155);
    sub_20BF4C2D8((uint64_t)v163);
    if (SHIBYTE(v157) < 0)
      operator delete((void *)__dst);
    v126 = a2[1];
    v125 = (unint64_t)a2[2];
    if ((unint64_t)v126 >= v125)
    {
      v128 = (v126 - *a2) >> 3;
      if ((unint64_t)(v128 + 1) >> 61)
        sub_20BDDF694();
      v129 = v125 - (_QWORD)*a2;
      v130 = v129 >> 2;
      if (v129 >> 2 <= (unint64_t)(v128 + 1))
        v130 = v128 + 1;
      if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
        v131 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v131 = v130;
      v160 = a2 + 2;
      if (v131)
        v132 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v131);
      else
        v132 = 0;
      v133 = &v132[8 * v128];
      v134 = &v132[8 * v131];
      v159 = v134;
      *(_QWORD *)v133 = v120;
      v127 = v133 + 8;
      *(_QWORD *)&v158[16] = v133 + 8;
      v136 = *a2;
      v135 = a2[1];
      if (v135 == *a2)
      {
        v138 = vdupq_n_s64((unint64_t)v135);
      }
      else
      {
        do
        {
          v137 = *((_QWORD *)v135 - 1);
          v135 -= 8;
          *(_QWORD *)v135 = 0;
          *((_QWORD *)v133 - 1) = v137;
          v133 -= 8;
        }
        while (v135 != v136);
        v138 = *(int64x2_t *)a2;
        v127 = *(char **)&v158[16];
        v134 = v159;
      }
      *a2 = v133;
      a2[1] = v127;
      *(int64x2_t *)&v158[8] = v138;
      v139 = a2[2];
      a2[2] = v134;
      v159 = v139;
      *(_QWORD *)v158 = v138.i64[0];
      sub_20C0A3EB4((uint64_t)v158);
    }
    else
    {
      *(_QWORD *)v126 = v120;
      v127 = v126 + 8;
    }
    a2[1] = v127;
    sub_20C1E7FB4((uint64_t)v143);
    sub_20BF4C2D8((uint64_t)&v161);
  }
  *(_QWORD *)v158 = &v144;
  sub_20C5BE1A0((void ***)v158);
}

void sub_20C5E06E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  uint64_t v36;

  sub_20C00918C(&a21);
  a21 = (void **)&a27;
  sub_20C1F3690(&a21);
  sub_20C1E7FB4((uint64_t)&a31);
  sub_20C1E7FB4((uint64_t)&a36);
  sub_20BF4C2D8(v36 - 120);
  if (*(char *)(v36 - 185) < 0)
    operator delete(*(void **)(v36 - 208));
  sub_20C1E7FB4((uint64_t)&a13);
  sub_20BF4C2D8(v36 - 136);
  a36 = (void **)&a18;
  sub_20C5BE1A0(&a36);
  sub_20C086448(&a36);
  _Unwind_Resume(a1);
}

void sub_20C5E0ACC(uint64_t a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  JUMPOUT(0x20C5E0AC4);
}

unint64_t sub_20C5E0AE0()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  void **v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498A9A8);
  if (!v0)
  {
    v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "primvarProperty", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "defaultInput", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "implementationName", 0);
    v4 = *(void ***)v0;
    v30 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v30 = (void **)v5;
    }
    v7 = (unsigned int *)*v2;
    v31 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v31 = v8;
    }
    v10 = (unsigned int *)*v3;
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 = v11;
    }
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    v13 = operator new(0x18uLL);
    v14 = 0;
    *((_QWORD *)v0 + 3) = v13;
    *((_QWORD *)v0 + 4) = v13;
    *((_QWORD *)v0 + 5) = v13 + 3;
    do
    {
      v15 = (unint64_t)(&v30)[v14];
      *v13 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
      ++v13;
    }
    while (v14 != 3);
    v18 = (void ***)&v33;
    *((_QWORD *)v0 + 4) = v13;
    do
    {
      v20 = (uint64_t)*--v18;
      v19 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    while (v18 != &v30);
    while (!__ldaxr(&qword_25498A9A8))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498A9A8))
        return (unint64_t)v0;
    }
    __clrex();
    v30 = (void **)(v0 + 24);
    sub_20BEEB2B8(&v30);
    if ((*v3 & 7) != 0)
    {
      v24 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if ((*v2 & 7) != 0)
    {
      v26 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v28 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    operator delete(v0);
    return atomic_load(&qword_25498A9A8);
  }
  return (unint64_t)v0;
}

void sub_20C5E0D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2@<X1>, std::string *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *i;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  const char *Text;
  char *v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  _OWORD *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  void **v25;
  __int128 v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  void *__p[2];
  void *v32;
  unint64_t TypeName;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v34;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v35;
  std::string *v36;
  unint64_t v37;
  unint64_t v38;
  void **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  unint64_t *v43;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v5)
    v5 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (sub_20BF2B2B4(a1, (_QWORD *)v5 + 6))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v6)
      v6 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    v7 = sub_20BF2B2B4(a1, (_QWORD *)v6 + 6);
    if (!v7)
      sub_20BEB9194("unordered_map::at: key not found");
    if (*((char *)v7 + 47) < 0)
    {
      if (!v7[4])
        goto LABEL_12;
    }
    else if (!*((_BYTE *)v7 + 47))
    {
      goto LABEL_12;
    }
    v37 = sub_20BE4EE50((uint64_t *)&v36, (__int128 *)(v7 + 3));
  }
LABEL_12:
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(a2, 0, (uint64_t *)&v34);
  v8 = v34;
  for (i = v35; v8 != i; v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v8 + 32))
  {
    v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C5E0AE0();
    if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasSdrMetadataByKey(v8, v10))
    {
      TypeName = pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v8);
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadata(v8, (uint64_t)&v39);
      sub_20C5E1300((_QWORD **)&TypeName, &v39, 0, (unint64_t *)__p);
      v11 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v11)
        v11 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      v12 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      v13 = *((_QWORD *)v11 + 1);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        do
          v14 = __ldxr(v12);
        while (__stlxr(v14 - 2, v12));
      }
      v15 = v13 & 0xFFFFFFFFFFFFFFF8;
      sub_20C1E7FB4((uint64_t)&v39);
      if (v12 != (unsigned int *)v15)
      {
        v39 = (void **)"usdShade/shaderDefUtils.cpp";
        v40 = "GetPrimvarNamesMetadataString";
        v41 = 461;
        v42 = "static std::string pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString"
              "(const NdrTokenMap, const UsdShadeConnectableAPI &)";
        LOBYTE(v43) = 0;
        sub_20C348EEC((uint64_t)v8, (int *)__p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"Shader input <%s> is tagged as a primvarProperty, but isn't string-valued.", v17, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v8, (unsigned int **)&TypeName);
      if ((TypeName & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      std::operator+<char>();
      v19 = (_OWORD *)v37;
      if (v37 >= v38)
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v36) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        if (0x5555555555555556 * ((uint64_t)(v38 - (_QWORD)v36) >> 3) > v22)
          v22 = 0x5555555555555556 * ((uint64_t)(v38 - (_QWORD)v36) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v36) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v22;
        v43 = &v38;
        if (v23)
          v24 = (void **)sub_20BDE4FF4((uint64_t)&v38, v23);
        else
          v24 = 0;
        v25 = &v24[3 * v21];
        v39 = v24;
        v40 = (const char *)v25;
        v42 = (const char *)&v24[3 * v23];
        v26 = *(_OWORD *)__p;
        v25[2] = v32;
        *(_OWORD *)v25 = v26;
        __p[1] = 0;
        v32 = 0;
        __p[0] = 0;
        v41 = (uint64_t)(v25 + 3);
        sub_20BDF34C0((uint64_t *)&v36, &v39);
        v27 = v37;
        sub_20BDF3648((uint64_t)&v39);
        v37 = v27;
        if (SHIBYTE(v32) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v20 = *(_OWORD *)__p;
        *(_QWORD *)(v37 + 16) = v32;
        *v19 = v20;
        __p[1] = 0;
        v32 = 0;
        __p[0] = 0;
        v37 = (unint64_t)v19 + 24;
      }
      if ((TypeName & 7) != 0)
      {
        v28 = (unsigned int *)(TypeName & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
  }
  v39 = (void **)&v34;
  sub_20C5BE4A8(&v39);
  pxrInternal__aapl__pxrReserved__::TfStringJoin("|", &v36, a3);
  v39 = (void **)&v36;
  sub_20BDE5038(&v39);
}

void sub_20C5E1208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  unsigned int *v26;
  unsigned int v27;

  if ((__p & 7) != 0)
  {
    v26 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20C1E7FB4((uint64_t)&a25);
  __p = &a19;
  sub_20C5BE4A8((void ***)&__p);
  __p = &a22;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E1300@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, unint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  unsigned __int32 v19;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v25;
  unint64_t v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v35;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v37;
  uint64_t v38;
  unint64_t *v39;
  pxrInternal__aapl__pxrReserved__::TfToken *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v45;
  unint64_t v46;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v49;
  unint64_t v50;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v51;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v52;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v57;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v58;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v63;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v64;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v69;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v70;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v71;
  unint64_t v72;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v73;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v74;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v75;
  unint64_t v76;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v77;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v78;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v79;
  unint64_t v80;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v82;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v83;
  unint64_t v84;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v85;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v86;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v87;
  unint64_t v88;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v89;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v90;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unsigned int *v95;
  unsigned int v96;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100[2];
  __n128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsPropertyATerminal(a2))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v7)
      v7 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v9 = *((_QWORD *)v7 + 11);
    *a4 = v9;
    if ((v9 & 7) == 0)
      goto LABEL_46;
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v12)
    v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v12 + 2))
    goto LABEL_241;
  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13)
    v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v13 + 58))
    goto LABEL_241;
  v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v14)
    v14 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v14))
    goto LABEL_241;
  v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15)
    v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v15 + 56))
  {
LABEL_241:
    if (a3 && *((_QWORD *)a3 + 1))
    {
      v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v16)
        v16 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v16))
      {
        if (sub_20BFB1AC0(a3))
        {
          v17 = *((_QWORD *)a3 + 1);
          v18 = a3;
          if ((v17 & 4) != 0)
            v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
          v19 = *(unsigned __int8 *)v18;
          v101.n128_u64[1] = (unint64_t)&unk_24C52008B;
          v101.n128_u32[0] = v19;
          sub_20BF4B5D8(a3, &v101);
          sub_20BF4C2D8((uint64_t)&v101);
        }
      }
      else
      {
        v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v20)
          v20 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v20 + 56)
          && sub_20C07FEB8(a3))
        {
          v21 = *((_QWORD *)a3 + 1);
          if ((v21 & 4) != 0)
            v22 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
          else
            v22 = *(unint64_t **)a3;
          v103 = 0;
          v101 = 0u;
          v102 = 0u;
          sub_20C596AB8(v101.n128_u64, *v22);
          v23 = *v22;
          if (*v22)
          {
            v24 = (unsigned __int8 *)v22[4];
            do
            {
              LODWORD(v100[0]) = *v24;
              sub_20C59A0AC((uint64_t)&v101, v100);
              ++v24;
              --v23;
            }
            while (v23);
          }
          sub_20BF64D34(&v101, (pxrInternal__aapl__pxrReserved__::VtValue *)v100);
          sub_20BF4B5D8(a3, v100);
          sub_20BF4C2D8((uint64_t)v100);
          sub_20BF5618C((uint64_t)&v101);
        }
      }
    }
    v25 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v25)
      v25 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v26 = *(_QWORD *)v25;
    *a4 = *(_QWORD *)v25;
    if ((v26 & 7) == 0)
      goto LABEL_46;
    v10 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v27 + 10))
    goto LABEL_242;
  v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v28)
    v28 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v28 + 11))
    goto LABEL_242;
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v29 + 12))
    goto LABEL_242;
  v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v30)
    v30 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v30 + 67))
    goto LABEL_242;
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v31 + 68))
    goto LABEL_242;
  v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v32)
    v32 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v32 + 69))
  {
LABEL_242:
    if (a3 && *((_QWORD *)a3 + 1))
    {
      v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v33)
        v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v33 + 11))
      {
        if (sub_20BFB5E50(a3))
        {
          v34 = *((_QWORD *)a3 + 1);
          v35 = a3;
          if ((v34 & 4) != 0)
            v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
          if ((*(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (uint64_t *)((*(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
          v101.n128_u64[1] = (unint64_t)&off_24C520700;
          sub_20BF77444((unsigned int **)&v101, (uint64_t)EmptyString);
          sub_20BF4B5D8(a3, &v101);
          sub_20BF4C2D8((uint64_t)&v101);
        }
      }
      else
      {
        v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v37)
          v37 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v37 + 68)
          && sub_20BFED450(a3))
        {
          v38 = *((_QWORD *)a3 + 1);
          if ((v38 & 4) != 0)
            v39 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
          else
            v39 = *(unint64_t **)a3;
          v103 = 0;
          v101 = 0u;
          v102 = 0u;
          sub_20C5E20F4(v101.n128_u64, *v39);
          v41 = *v39;
          if (*v39)
          {
            v42 = (_QWORD *)v39[4];
            v43 = 8 * v41;
            do
            {
              if ((*v42 & 0xFFFFFFFFFFFFFFF8) != 0)
                v44 = (uint64_t *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
              sub_20C58D66C((uint64_t)&v101, (__int128 *)v44);
              ++v42;
              v43 -= 8;
            }
            while (v43);
          }
          sub_20C58C09C(&v101, (pxrInternal__aapl__pxrReserved__::VtValue *)v100);
          sub_20BF4B5D8(a3, v100);
          sub_20BF4C2D8((uint64_t)v100);
          sub_20C008280(&v101);
        }
      }
    }
    v45 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v45)
      v45 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v46 = *((_QWORD *)v45 + 1);
    *a4 = v46;
    if ((v46 & 7) == 0)
      goto LABEL_46;
    v10 = v46 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v47)
    v47 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v47 + 7))
    goto LABEL_102;
  v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v48)
    v48 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v48 + 64))
  {
LABEL_102:
    v49 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v49)
      v49 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v50 = *((_QWORD *)v49 + 2);
    *a4 = v50;
    if ((v50 & 7) == 0)
      goto LABEL_46;
    v10 = v50 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v51 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v51)
    v51 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v51 + 19))
    goto LABEL_114;
  v52 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v52)
    v52 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v52 + 76))
  {
LABEL_114:
    v53 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v53)
      v53 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v54 = *((_QWORD *)v53 + 2);
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 2, v55));
      if ((v56 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    *a4 = v54;
    result = 2;
    goto LABEL_46;
  }
  v57 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v57)
    v57 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v57 + 20))
    goto LABEL_128;
  v58 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v58)
    v58 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v58 + 77))
  {
LABEL_128:
    v59 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v59)
      v59 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v60 = *((_QWORD *)v59 + 2);
    if ((v60 & 7) != 0)
    {
      v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 2, v61));
      if ((v62 & 1) == 0)
        v60 &= 0xFFFFFFFFFFFFFFF8;
    }
    *a4 = v60;
    result = 3;
    goto LABEL_46;
  }
  v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v63)
    v63 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v63 + 21))
    goto LABEL_143;
  v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v64)
    v64 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v64 + 78))
  {
LABEL_143:
    v65 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v65)
      v65 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v66 = *((_QWORD *)v65 + 2);
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 2, v67));
      if ((v68 & 1) == 0)
        v66 &= 0xFFFFFFFFFFFFFFF8;
    }
    *a4 = v66;
    result = 4;
    goto LABEL_46;
  }
  v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v69)
    v69 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v69 + 35))
    goto LABEL_157;
  v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v70)
    v70 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v70 + 92))
  {
LABEL_157:
    v71 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v71)
      v71 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v72 = *((_QWORD *)v71 + 4);
    *a4 = v72;
    if ((v72 & 7) == 0)
      goto LABEL_46;
    v10 = v72 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v73)
    v73 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v73 + 38))
    goto LABEL_170;
  v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v74)
    v74 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v74 + 95))
  {
LABEL_170:
    v75 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v75)
      v75 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v76 = *((_QWORD *)v75 + 5);
    *a4 = v76;
    if ((v76 & 7) == 0)
      goto LABEL_46;
    v10 = v76 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v77 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v77)
    v77 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v77 + 26))
    goto LABEL_182;
  v78 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v78)
    v78 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v78 + 83))
  {
LABEL_182:
    v79 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v79)
      v79 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v80 = *((_QWORD *)v79 + 6);
    *a4 = v80;
    if ((v80 & 7) == 0)
      goto LABEL_46;
    v10 = v80 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v81 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v81)
    v81 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v81 + 29))
    goto LABEL_194;
  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v82)
    v82 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v82 + 86))
  {
LABEL_194:
    v83 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v83)
      v83 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v84 = *((_QWORD *)v83 + 8);
    *a4 = v84;
    if ((v84 & 7) == 0)
      goto LABEL_46;
    v10 = v84 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v85)
    v85 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v85 + 32))
    goto LABEL_206;
  v86 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v86)
    v86 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v86 + 89))
  {
LABEL_206:
    v87 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v87)
      v87 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    result = sub_20C5E20AC(a3);
    v88 = *((_QWORD *)v87 + 7);
    *a4 = v88;
    if ((v88 & 7) == 0)
      goto LABEL_46;
    v10 = v88 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
    goto LABEL_44;
  }
  v89 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v89)
    v89 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v89 + 45))
  {
    v90 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v90)
      v90 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (_QWORD **)v90 + 102))
    {
      v101.n128_u64[0] = (unint64_t)"usdShade/shaderDefUtils.cpp";
      v101.n128_u64[1] = (unint64_t)"_GetShaderPropertyTypeAndArraySize";
      *(_QWORD *)&v102 = 302;
      *((_QWORD *)&v102 + 1) = "std::pair<TfToken, size_t> pxrInternal__aapl__pxrReserved__::_GetShaderPropertyTypeAndArr"
                               "aySize(const SdfValueTypeName &, const NdrTokenMap &, VtValue *)";
      LOBYTE(v103) = 0;
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, v100);
      v93 = (unint64_t)v100[0] & 0xFFFFFFFFFFFFFFF8;
      if (((unint64_t)v100[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v94 = (const char *)(v93 + 16);
        if (*(char *)(v93 + 39) < 0)
          v94 = *(const char **)v94;
      }
      else
      {
        v94 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v101, 3, (pxrInternal__aapl__pxrReserved__ *)"Shader property has unsupported type '%s'", v94);
      if (((uint64_t)v100[0] & 7) != 0)
      {
        v95 = (unsigned int *)((unint64_t)v100[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      v97 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v97)
        v97 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      v10 = *((_QWORD *)v97 + 13);
      if ((v10 & 7) != 0)
      {
        v98 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 2, v98));
        if ((v99 & 1) == 0)
          v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      result = 0;
      goto LABEL_45;
    }
  }
  v91 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v91)
    v91 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  result = sub_20C5E20AC(a3);
  v92 = *((_QWORD *)v91 + 9);
  *a4 = v92;
  if ((v92 & 7) != 0)
  {
    v10 = v92 & 0xFFFFFFFFFFFFFFF8;
    do
      v11 = __ldxr((unsigned int *)v10);
    while (__stxr(v11 + 2, (unsigned int *)v10));
LABEL_44:
    if ((v11 & 1) == 0)
LABEL_45:
      *a4 = v10;
  }
LABEL_46:
  a4[1] = result;
  return result;
}

void sub_20C5E202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a11 & 7) != 0)
  {
    v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5E20AC(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  if (this && *((_QWORD *)this + 1) && pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this))
    return pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(this);
  else
    return 0;
}

void sub_20C5E20F4(unint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v6 = sub_20C008558((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20C008558((uint64_t)a1, a2);
    sub_20C0086AC(v3, v3 + 24 * v5, (uint64_t)v6);
LABEL_9:
    sub_20C008280(a1);
    a1[4] = (unint64_t)v6;
  }
}

_QWORD *sub_20C5E2188()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C53DCF8;
  return result;
}

void sub_20C5E21AC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C53DCF8;
}

BOOL sub_20C5E21C4(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  const char *v3;
  int v4;
  size_t v5;
  size_t v6;
  const char *v7;
  size_t v8;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (byte_25498A97F >= 0)
    v3 = (const char *)&qword_25498A968;
  else
    v3 = (const char *)qword_25498A968;
  v4 = *((char *)EmptyString + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)EmptyString + 23);
  else
    v5 = EmptyString[1];
  v6 = strlen(v3);
  if (v5 < v6)
    return 0;
  if (v4 < 0)
    EmptyString = (uint64_t *)*EmptyString;
  if (!strncmp((const char *)EmptyString, v3, v6)
    && (byte_25498A99F >= 0 ? (v7 = (const char *)&qword_25498A988) : (v7 = (const char *)qword_25498A988),
        v8 = strlen(v7),
        v5 >= v8))
  {
    return strcmp((const char *)EmptyString + v5 - v8, v7) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20C5E22A0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53DD58))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C5E22DC()
{
  return &unk_24C53DD58;
}

uint64_t sub_20C5E22E8(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;

  v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684)
    sub_20BDDF694();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11)
    v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v19 = 0x12F684BDA12F684;
  else
    v19 = v11;
  v28 = a1 + 2;
  if (v19)
  {
    v23 = v10;
    v20 = (char *)sub_20C1E9B8C((uint64_t)(a1 + 2), v19);
    v10 = v23;
  }
  else
  {
    v20 = 0;
  }
  v24 = v20;
  v25 = &v20[216 * v10];
  v27 = &v20[216 * v19];
  sub_20C5E2460((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  v26 = v25 + 216;
  sub_20C1E9AF0(a1, &v24);
  v21 = a1[1];
  sub_20C1E9CC4((uint64_t)&v24);
  return v21;
}

void sub_20C5E244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1E9CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5E2460(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, __int128 *a9, __int128 *a10)
{
  uint64_t *EmptyString;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 __p;
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  __int128 v24;
  uint64_t v25;

  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v24 = 0uLL;
  v25 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  __p = 0uLL;
  v21 = 0;
  v19 = 0;
  sub_20C1E936C(a2, a3, a4, (__int128 *)EmptyString, a6, a7, a8, a9, a10, &v24, (uint64_t)v22, &__p, &v19);
  if ((v19 & 7) != 0)
  {
    v17 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  sub_20C1E7FB4((uint64_t)v22);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

void sub_20C5E2578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  sub_20C96B794((uint64_t)va, (uint64_t)va1, (uint64_t)va2, v7 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E25B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20BF2B388(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C1E9AAC((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_20C5E2604(uint64_t *a1)
{
  if (*a1)
  {
    sub_20C1F36D0((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL sub_20C5E263C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = &stru_24C51DDE0;
  v12 = 0;
  v11[0] = &unk_24C52D970;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_20C5E26D0()
{
  void *__p[2];
  char v1;

  sub_20C5E4978();
  sub_20BDDC0E4(__p, "NodeGraph");
  sub_20C5E4A98((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5E271C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53DD78;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdShade/nodeGraph.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdShadeNodeGraph pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53DD78;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5E28C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498A9B8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498A9B8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498A9B0, "NodeGraph");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498A9B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A9B8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498A9B0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53DD78;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdShade/nodeGraph.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdShadeNodeGraph pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53DD78;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5E2AB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A9B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A9C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498A9C8))
  {
    __cxa_guard_release(&qword_25498A9C8);
  }
  return &qword_25498A9C0;
}

void sub_20C5E2B54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A9C8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498A9D8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)__cxa_guard_acquire(&qword_25498A9D8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(v3);
      byte_25498A9D0 = sub_20C35BD7C((char *)&qword_25498A9C0, v4, v5);
      __cxa_guard_release(&qword_25498A9D8);
    }
  }
  return byte_25498A9D0;
}

void sub_20C5E2BD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498A9D8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(this);
  return &qword_25498A9C0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498A9F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498A9F8))
  {
    qword_25498A9E0 = 0;
    *(_QWORD *)algn_25498A9E8 = 0;
    qword_25498A9F0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498A9E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498A9F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AA18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AA18))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    qword_25498AA00 = 0;
    *(_QWORD *)algn_25498AA08 = 0;
    qword_25498AA10 = 0;
    sub_20BFE538C(&qword_25498AA00, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AA00, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AA18);
  }
  if (v1)
    return &qword_25498AA00;
  else
    return &qword_25498A9E0;
}

void sub_20C5E2D00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AA18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53DD78;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53DD78;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C5E2DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C5E2E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5E2F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5E2FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5E30B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5E3190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeOutputSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  const char *v16;
  const char *Text;
  char *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  unint64_t *v23;
  unint64_t v24;
  int *v25;
  int *v26;
  _QWORD *v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  int v47;
  int v48;
  uint64_t v49;
  void (**v50)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v51;
  char *v52;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  int v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(a1, a2, (uint64_t)v57);
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v57, v10) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)v57, 0, (uint64_t)&v62);
    if (v67 != 1)
    {
      if (!v67)
      {
        LODWORD(v52) = 1;
        v53 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v54);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v54 + 1);
        v55 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v52);
        *(_QWORD *)a5 = off_24C53DB40;
        if ((v55 & 7) != 0)
        {
          v11 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
LABEL_65:
        sub_20BFD265C(&v54);
        if (v53)
          sub_20C35C614(v53);
        sub_20C5C9ACC((uint64_t)&v62);
        goto LABEL_68;
      }
      v52 = "usdShade/nodeGraph.cpp";
      v53 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeOutputSource";
      v54 = 190;
      v55 = (unint64_t)"UsdShadeShader pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeOutputSource(co"
                              "nst TfToken &, TfToken *, UsdShadeAttributeType *) const";
      v56 = 0;
      v15 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        v16 = (const char *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0)
          v16 = *(const char **)v16;
      }
      else
      {
        v16 = "";
      }
      sub_20C3630C0((uint64_t)a1, &v45);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v52, (pxrInternal__aapl__pxrReserved__ *)"Found multiple upstream attributes for output %s on NodeGraph %s. ComputeOutputSource will only report the first upsteam UsdShadeShader. Please use GetValueProducingAttributes to retrieve all.", v18, v16, Text);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
      sub_20BFD265C(&v45);
    }
    v19 = v68;
    v20 = v62;
    if (v68 >= 2)
      v21 = v62;
    else
      v21 = &v62;
    LODWORD(v52) = *(_DWORD *)v21;
    v22 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21[1];
    v53 = v22;
    if (v22)
    {
      v23 = (unint64_t *)((char *)v22 + 48);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v19 >= 2)
      v25 = (int *)(v20 + 2);
    else
      v25 = &v64;
    if (v19 >= 2)
      v26 = (int *)v20 + 5;
    else
      v26 = &v65;
    if (v19 >= 2)
      v27 = v20;
    else
      v27 = &v62;
    sub_20BFD6E54(&v54, v25);
    sub_20BFD6EA4((_DWORD *)&v54 + 1, v26);
    v28 = v27[3];
    v55 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if ((v30 & 1) == 0)
        v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    v31 = sub_20C398E78(&v52);
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(v31, (uint64_t)&v45);
    v32 = *a3;
    if (&v45 != a3)
    {
      if ((v32 & 7) != 0)
      {
        v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      v32 = 0;
      *a3 = v45;
      v45 = 0;
    }
    *a4 = (_DWORD)v46;
    if ((v32 & 7) != 0)
    {
      v35 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
    sub_20C35C4F8((uint64_t)&v45, (uint64_t *)&v53, &v54);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v50, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45);
    v50 = off_24C53DB40;
    if ((v49 & 7) != 0)
    {
      v37 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_20BFD265C(&v47);
    if (v46)
      sub_20C35C614(v46);
    if (*a4 == 2
      && v51
      && (*(_BYTE *)(v51 + 57) & 8) == 0
      && (((uint64_t (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v50[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v50) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v50);
      *(_QWORD *)a5 = off_24C53DB40;
    }
    else
    {
      LODWORD(v45) = 1;
      v46 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v47);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v48);
      v49 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45);
      *(_QWORD *)a5 = off_24C53DB40;
      if ((v49 & 7) != 0)
      {
        v39 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
      sub_20BFD265C(&v47);
      if (v46)
        sub_20C35C614(v46);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v50);
    if ((v55 & 7) != 0)
    {
      v41 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
    goto LABEL_65;
  }
  LODWORD(v62) = 1;
  v63 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v65);
  v66 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
  *(_QWORD *)a5 = off_24C53DB40;
  if ((v66 & 7) != 0)
  {
    v13 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
  sub_20BFD265C(&v64);
  if (v63)
    sub_20C35C614(v63);
LABEL_68:
  if ((v61 & 7) != 0)
  {
    v43 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
  sub_20BFD265C(&v59);
  if (v58)
    sub_20C35C614(v58);
}

void sub_20C5E36E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)va);
  sub_20C372B54((uint64_t)va1);
  sub_20C5C9ACC(v7 - 128);
  sub_20C5BCAB8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20C5E37AC()
{
  JUMPOUT(0x20C5E37A4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5E3878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5E3950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5E3A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInterfaceInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(this, 1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeInterfaceInputConsumersMap@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19[2];
  uint64_t *v20;
  void ***v21;

  sub_20C5E3C18((uint64_t)this, (uint64_t)v19);
  if ((a2 & 1) != 0)
  {
    v16 = 0u;
    v17 = 0u;
    v18 = 1065353216;
    sub_20C5E43D0((uint64_t)v19, &v16);
    if (*((_QWORD *)&v17 + 1))
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 32) = 1065353216;
      for (i = v20; i; i = (uint64_t *)*i)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v6 = i[6];
        v7 = i[7];
        while (v6 != v7)
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
          sub_20C5E4680(v6, &v16, (uint64_t *)&v10);
          sub_20C5E65BC(&v13, v14, (uint64_t)v10, v11, (v11 - (uint64_t)v10) >> 5);
          v21 = &v10;
          sub_20C5BE4A8((void ***)&v21);
          v6 += 32;
        }
        v21 = (void ***)(i + 2);
        v8 = sub_20C5E614C(a3, (uint64_t)(i + 2), (uint64_t)&unk_20CAC184C, (uint64_t *)&v21) + 6;
        if (v8 != &v13)
          sub_20C5E6A18((uint64_t)v8, v13, v14, (v14 - v13) >> 5);
        v10 = (void **)&v13;
        sub_20C5BE4A8(&v10);
      }
    }
    else
    {
      sub_20BF20A20(a3, v19);
    }
    sub_20C5E6534((uint64_t)&v16);
  }
  else
  {
    sub_20BF20A20(a3, v19);
  }
  return sub_20C5E6114((uint64_t)v19);
}

void sub_20C5E3BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20C5E6534((uint64_t)va);
  sub_20C5E6114((uint64_t)va1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C5E3C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void ***v14;
  void ***v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (**v48)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  uint64_t v49;
  uint64_t v50;
  char v51[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  void **v73;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)a1, 1, &v64);
  v2 = v64;
  for (i = v65; v2 != i; v2 += 32)
  {
    v60 = v2;
    v4 = sub_20C5E614C(a2, v2, (uint64_t)&unk_20CAC184C, &v60);
    sub_20C5E4B4C((uint64_t)(v4 + 6), 0, 0, 0);
  }
  v73 = (void **)&v64;
  sub_20C5BE4A8(&v73);
  v5 = (pxrInternal__aapl__pxrReserved__ *)sub_20C35C4F8((uint64_t)&v73, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v5);
  v8 = *UsdPrimDefaultPredicate;
  v7 = UsdPrimDefaultPredicate[1];
  v9 = UsdPrimDefaultPredicate[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v75)
    && ((v8 & 0x2000) != 0 || (v7 & 0x2000) == 0))
  {
    v8 |= 0x2000uLL;
    v7 &= ~0x2000uLL;
  }
  v60 = v8;
  v61 = v7;
  *(_QWORD *)&v62 = v9;
  sub_20C39E344((uint64_t)&v73, &v60, (uint64_t)&v64);
  if ((v77 & 7) != 0)
  {
    v10 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
  sub_20BFD265C(&v75);
  if (v74)
    sub_20C35C614(v74);
  v60 = v64;
  sub_20BFD6E54(&v61, &v65);
  sub_20BFD6EA4((_DWORD *)&v61 + 1, (_DWORD *)&v65 + 1);
  v62 = v66;
  v63 = v67;
  v56 = v68;
  sub_20BFD6E54(&v57, &v69);
  sub_20BFD6EA4((_DWORD *)&v57 + 1, &v70);
  v58 = v71;
  v59 = v72;
  while (v60 != v56 || v61 != v57 || !sub_20C39FA44((uint64_t)&v62, (uint64_t)&v58))
  {
    sub_20C3A048C((uint64_t)&v60, (uint64_t)v51);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v48, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v51);
    v50 = 0;
    v48 = off_24C53D618;
    if (v49
      && (*(_BYTE *)(v49 + 57) & 8) == 0
      && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v48))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v48, 1, &v46);
      v13 = v46;
      v12 = v47;
      v36 = v47;
      while (v13 != v12)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(&v73, v13, 0);
        if (v79 >= 2)
          v14 = (void ***)v73;
        else
          v14 = &v73;
        if (v78)
        {
          v15 = &v14[7 * v78];
          v37 = v13;
          do
          {
            sub_20C35C4F8((uint64_t)&v42, (uint64_t *)v14 + 1, (_DWORD *)v14 + 4);
            sub_20C35C4F8((uint64_t)&v38, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
            if (v42 == (_DWORD)v38
              && v43 == v39
              && v44 == v40
              && (v16 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8),
                  (v45 & 0xFFFFFFFFFFFFFFF8) == (v41 & 0xFFFFFFFFFFFFFFF8)))
            {
              v21 = *((_DWORD *)v14 + 10);
              if ((v41 & 7) != 0)
              {
                do
                  v22 = __ldxr(v16);
                while (__stlxr(v22 - 2, v16));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
              sub_20BFD265C(&v40);
              if (v39)
                sub_20C35C614(v39);
              if ((v45 & 7) != 0)
              {
                v23 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
                do
                  v24 = __ldxr(v23);
                while (__stlxr(v24 - 2, v23));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
              sub_20BFD265C(&v44);
              if (v43)
                sub_20C35C614(v43);
              v25 = v21 == 1;
              v13 = v37;
              if (!v25)
                goto LABEL_40;
              pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 4), (uint64_t)&v42);
              v38 = &v42;
              v26 = sub_20C5E4EDC(a2, (uint64_t)&v42, (uint64_t)&unk_20CAC184C, (uint64_t *)&v38);
              v27 = v26[7];
              if (v27 >= v26[8])
              {
                v13 = v37;
                v28 = sub_20C5E52C4(v26 + 6, v37);
              }
              else
              {
                sub_20C37F2BC((uint64_t)(v26 + 8), v27, v37);
                v28 = v27 + 32;
                v26[7] = v27 + 32;
                v13 = v37;
              }
              v26[7] = v28;
              if ((v45 & 7) != 0)
              {
                v29 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
            }
            else
            {
              if ((v41 & 7) != 0)
              {
                v17 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
                do
                  v18 = __ldxr(v17);
                while (__stlxr(v18 - 2, v17));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
              sub_20BFD265C(&v40);
              if (v39)
                sub_20C35C614(v39);
              if ((v45 & 7) != 0)
              {
                v19 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
                do
                  v20 = __ldxr(v19);
                while (__stlxr(v20 - 2, v19));
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            if (v43)
              sub_20C35C614(v43);
LABEL_40:
            v14 += 7;
          }
          while (v14 != v15);
        }
        sub_20C5BD988((uint64_t)&v73);
        v13 += 32;
        v12 = v36;
      }
      v73 = (void **)&v46;
      sub_20C5BE4A8(&v73);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v48);
    if ((v55 & 7) != 0)
    {
      v31 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
    sub_20BFD265C(&v53);
    if (v52)
      sub_20C35C614(v52);
    sub_20C3A016C((uint64_t)&v60);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
  sub_20BFD265C(&v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
  sub_20BFD265C(&v69);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
  return sub_20BFD265C(&v65);
}

void sub_20C5E4208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

void sub_20C5E43D0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v8;
  const pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t *SchemaInfo;
  char *v11;
  int IsA;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  void (**v24)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  uint64_t v25;
  int v26;
  uint64_t v27;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v28;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v4 = v2[6];
      v5 = v2[7];
      v17 = v2;
      while (v4 != v5)
      {
        sub_20C35C4F8((uint64_t)v19, (uint64_t *)(v4 + 8), (_DWORD *)(v4 + 16));
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v24, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v19);
        v27 = 0;
        v24 = off_24C53D618;
        if ((v22 & 7) != 0)
        {
          v6 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
        sub_20BFD265C(&v21);
        if (v20)
          sub_20C35C614(v20);
        v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)sub_20C35C4F8((uint64_t)v19, &v25, &v26);
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(v8);
        SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498A9C0, v9);
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v19, SchemaInfo, v11);
        if ((v22 & 7) != 0)
        {
          v13 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
        sub_20BFD265C(&v21);
        if (v20)
          sub_20C35C614(v20);
        if (IsA)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v19, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v24);
          v15 = sub_20C5E53B0(a2, (uint64_t)v19);
          pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v19);
          if (!v15)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v18, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v24);
            sub_20C5E3C18((uint64_t)v18, (uint64_t)v19);
            pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v18);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v18, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v24);
            v28 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18;
            v16 = sub_20C5E56B4((uint64_t)a2, (uint64_t)v18, (uint64_t)&unk_20CAC184C, &v28);
            if (v16 + 5 != (_QWORD *)v19)
            {
              *((_DWORD *)v16 + 18) = v23;
              sub_20C5E5A38(v16 + 5, v21, 0);
            }
            pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v18);
            sub_20C5E43D0(v19, a2);
            sub_20C5E6114((uint64_t)v19);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v24);
        v4 += 32;
      }
      v2 = (_QWORD *)*v17;
    }
    while (*v17);
  }
}

void sub_20C5E45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20C5E6114((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)va1);
  _Unwind_Resume(a1);
}

void sub_20C5E4680(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  void (**v20)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  uint64_t v21;

  sub_20C35C4F8((uint64_t)v15, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v20, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v15);
  v20 = off_24C53DD78;
  if ((v19 & 7) != 0)
  {
    v6 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  if (!v21
    || (*(_BYTE *)(v21 + 57) & 8) != 0
    || (((uint64_t (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v20[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v20) & 1) == 0)
  {
    v12 = (uint64_t)(a3 + 2);
    v13 = a3[1];
    if (v13 < a3[2])
      goto LABEL_15;
LABEL_16:
    v14 = sub_20C5E52C4(a3, a1);
    goto LABEL_17;
  }
  v8 = sub_20C5E53B0(a2, (uint64_t)&v20);
  if (!v8)
  {
    v12 = (uint64_t)(a3 + 2);
    v13 = a3[1];
    if (v13 < a3[2])
      goto LABEL_15;
    goto LABEL_16;
  }
  v9 = sub_20C5E5F40(v8 + 5, a1);
  if (!v9)
    goto LABEL_18;
  v10 = v9[6];
  v11 = v9[7];
  if (v10 == v11)
  {
    v12 = (uint64_t)(a3 + 2);
    v13 = a3[1];
    if (v13 >= a3[2])
      goto LABEL_16;
LABEL_15:
    sub_20C37F2BC(v12, a3[1], a1);
    v14 = v13 + 32;
    a3[1] = v13 + 32;
LABEL_17:
    a3[1] = v14;
    goto LABEL_18;
  }
  do
  {
    sub_20C5E4680(v10, a2, a3);
    v10 += 32;
  }
  while (v10 != v11);
LABEL_18:
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v20);
}

void sub_20C5E4840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)va);
  _Unwind_Resume(a1);
}

void sub_20C5E4890(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  _WORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _WORD *v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x10uLL);
  v4[4] = 257;
  *(_QWORD *)v4 = &unk_24C53DDD0;
  v9 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53DE28;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v10 = v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C5E494C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20C96BDF8(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C5E4978()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5E4A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5E4A98(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5E4B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5E4B4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_20C5E4C9C((void **)a1);
    if (a4 >> 59)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BF25370((_QWORD *)a1, v12);
    v13 = sub_20C5E4D08(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    sub_20C5E4E34((uint64_t)&v19, a2, v15, (uint64_t)v9);
    v13 = sub_20C5E4D08(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  sub_20C5E4E34((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      sub_20C5BE52C(v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20C5E4C8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C5E4C94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C5E4C9C(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_20C5BE52C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C5E4D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C37F2BC(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C5E4DB0((uint64_t)v9);
  return v4;
}

void sub_20C5E4D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C5E4DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E4DB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C5E4DE4((uint64_t *)a1);
  return a1;
}

void sub_20C5E4DE4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 32;
      sub_20C5BE52C(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20C5E4E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      v7 = *(_QWORD *)(v5 + 8);
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 48);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v7;
      if (v10)
        sub_20C35C614(v10);
      sub_20C01A074((int *)(a4 + 16), (_DWORD *)(v5 + 16));
      sub_20C01A0C8((int *)(a4 + 20), (_DWORD *)(v5 + 20));
      sub_20BF32220((_QWORD *)(a4 + 24), (_QWORD *)(v5 + 24));
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_20C5E4EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  char v26;

  v24 = 0;
  LOBYTE(v25) = 0;
  sub_20C3B0C60((uint64_t)&v24, (unsigned int *)a2, (_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16), (_QWORD *)(a2 + 24));
  v8 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v24);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == *(_DWORD *)a2
              && v12[3] == *(_QWORD *)(a2 + 8)
              && v12[4] == *(_QWORD *)(a2 + 16)
              && (v12[5] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
            {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x48uLL);
  v24 = v14;
  v25 = a1 + 16;
  *v14 = 0;
  v14[1] = v8;
  sub_20C5E51A8((uint64_t)(v14 + 2), *a4);
  v26 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v24 = *v21;
    *v21 = v24;
  }
  else
  {
    *v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v24)
    {
      v22 = *(_QWORD *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24;
    }
  }
  v12 = v24;
  v24 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C5E520C((uint64_t)&v24, 0);
  return v12;
}

void sub_20C5E5190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5E520C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E51A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20C5E520C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C5E5250((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C5E5250(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  void **v6;

  v6 = (void **)(a1 + 32);
  sub_20C5BE4A8(&v6);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

uint64_t sub_20C5E52C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C5BE590(a1, &v11);
  v9 = a1[1];
  sub_20C5BE73C(&v11);
  return v9;
}

void sub_20C5E539C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5BE73C((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5E53B0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_20C5E54B0((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v6 == v13)
      {
        if (sub_20C5E557C(v12, (uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_20C5E54B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  v11 = 0;
  v12 = 0;
  sub_20C3B0C60((uint64_t)&v11, &v6, &v7, &v8, &v10);
  v2 = v11;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

void sub_20C5E5568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C5E557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  int v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  uint64_t v17;

  sub_20C35C4F8((uint64_t)&v14, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C35C4F8((uint64_t)&v10, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  v4 = v14 == v10 && v15 == v11 && v16 == v12 && (v17 & 0xFFFFFFFFFFFFFFF8) == (v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  return v4;
}

void sub_20C5E56A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5E56B4(uint64_t a1, uint64_t a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20C5E54B0(a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_20C5E557C(a1 + 32, (uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_20C5E5948(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v24 = *(_QWORD *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  v15 = v26;
  ++*v8;
  return v15;
}

void sub_20C5E5924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13)
{
  if (__p)
    sub_20C5E59EC((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

double sub_20C5E5948@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v8 + 16), *a3);
  *((_QWORD *)v8 + 2) = off_24C53DD78;
  result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C5E59D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C5E59EC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C5E59EC(uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_20C5E6114((uint64_t)(__p + 40));
    pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)(__p + 16));
  }
  if (__p)
    operator delete(__p);
}

void sub_20C5E5A38(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD v12[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 6;
        sub_20C5E5B80(v12, (uint64_t)(v4 + 2));
        v10 = (_QWORD *)*v8;
        sub_20C543F00(a1, (uint64_t)v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    sub_20C5E5B44((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20C5E5C28(a1, (uint64_t)(v4 + 2));
    v4 = (_QWORD *)*v4;
  }
}

void sub_20C5E5B14(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_20C5E5B44(v1, v2);
  __cxa_rethrow();
}

void sub_20C5E5B30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C5E5B44(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C5E5250((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20C5E5B80(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;

  v4 = (_DWORD *)*a1;
  *(_DWORD *)*a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)v4 + 1);
  *((_QWORD *)v4 + 1) = v5;
  if (v8)
    sub_20C35C614(v8);
  sub_20C01A074(v4 + 4, (_DWORD *)(a2 + 16));
  sub_20C01A0C8(v4 + 5, (_DWORD *)(a2 + 20));
  sub_20BF32220((_QWORD *)v4 + 3, (_QWORD *)(a2 + 24));
  v9 = a1[1];
  if (v9 != a2 + 32)
    sub_20C5E6A18(v9, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5);
  return a1;
}

uint64_t sub_20C5E5C28(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5[3];

  sub_20C5E5C90((uint64_t)a1, a2, (uint64_t)v5);
  v3 = sub_20C543F00(a1, v5[0]);
  v5[0] = 0;
  sub_20C5E520C((uint64_t)v5, 0);
  return v3;
}

void sub_20C5E5C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5E520C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E5C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v5 = a1 + 16;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  sub_20C5E5D4C((uint64_t)v6 + 16, a2);
  *(_BYTE *)(a3 + 16) = 1;
  v8 = 0;
  v9 = 0;
  result = sub_20C3B0C60((uint64_t)&v8, (unsigned int *)v6 + 4, (_QWORD *)v6 + 3, (unsigned int *)v6 + 8, (_QWORD *)v6 + 5);
  *((_QWORD *)v6 + 1) = bswap64(0x9E3779B97F4A7C55 * v8);
  return result;
}

void sub_20C5E5D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5E520C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E5D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20C5E5E14((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5);
  return a1;
}

void sub_20C5E5E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5BD350(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5E5E14(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = (_QWORD *)sub_20C5E5E98((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C5E5E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C5BE4A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E5E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C37F2BC(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C5E4DB0((uint64_t)v9);
  return v4;
}

void sub_20C5E5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C5E4DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5E5F40(_QWORD *a1, uint64_t a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  uint64_t v11;
  char v12;

  v11 = 0;
  v12 = 0;
  sub_20C3B0C60((uint64_t)&v11, (unsigned int *)a2, (_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16), (_QWORD *)(a2 + 24));
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = bswap64(0x9E3779B97F4A7C55 * v11);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v4)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (*(_QWORD *)&v4 - 1) & v5;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v5 == v10)
    {
      if (*((_DWORD *)result + 4) == *(_DWORD *)a2
        && result[3] == *(_QWORD *)(a2 + 8)
        && result[4] == *(_QWORD *)(a2 + 16)
        && (result[5] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

void sub_20C5E6088(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);
  operator delete(v1);
}

uint64_t sub_20C5E609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 0);
}

void sub_20C5E60A8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5E60BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5E60D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53DE78))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C5E6114(uint64_t a1)
{
  void *v2;

  sub_20C5E5B44(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t *sub_20C5E614C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v23;
  char v24;

  v23 = 0;
  v24 = 0;
  sub_20C3B0C60((uint64_t)&v23, (unsigned int *)a2, (_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16), (_QWORD *)(a2 + 24));
  v8 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v23);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (*((_DWORD *)i + 4) == *(_DWORD *)a2
            && i[3] == *(_QWORD *)(a2 + 8)
            && i[4] == *(_QWORD *)(a2 + 16)
            && (i[5] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
          {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  sub_20C5E6428(a1, v8, a4, (uint64_t)&v23);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v23 = *v20;
    *v20 = (uint64_t)v23;
  }
  else
  {
    *v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v23)
    {
      v21 = *(_QWORD *)(*v23 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9)
          v21 %= v9;
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23;
    }
  }
  i = v23;
  v23 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C5E520C((uint64_t)&v23, 0);
  return i;
}

void sub_20C5E6410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C5E520C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E6428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C5E6494((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C5E647C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C5E520C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E6494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_20C5E6534(uint64_t a1)
{
  void *v2;

  sub_20C5E656C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C5E656C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C5E6114((uint64_t)(v2 + 5));
      pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C5E65BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      v19 = v12 - a2;
      v20 = (uint64_t)(v12 - a2) >> 5;
      if (v20 >= a5)
      {
        v21 = a3 + 32 * a5;
      }
      else
      {
        v21 = a3 + 32 * v20;
        a1[1] = sub_20C5E5E98(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_20C5E6764((uint64_t)a1, v5, v12, v5 + 32 * a5);
      sub_20C5E4E34((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59)
        sub_20BDDF694();
      v15 = (a2 - v13) >> 5;
      v16 = v10 - v13;
      if (v16 >> 4 > v14)
        v14 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v29 = v9;
      if (v17)
        v18 = (char *)sub_20BED2F10(v9, v17);
      else
        v18 = 0;
      v22 = &v18[32 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v27 = v22;
      v28 = &v18[32 * v17];
      v23 = 32 * a5;
      v24 = &v22[32 * a5];
      do
      {
        sub_20C37F2BC(v29, (uint64_t)v22, v7);
        v22 += 32;
        v7 += 32;
        v23 -= 32;
      }
      while (v23);
      v27 = v24;
      v5 = sub_20C5E6804(a1, v26, v5);
      sub_20C5BE73C(v26);
    }
  }
  return v5;
}

void sub_20C5E6738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5E6764(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      sub_20C3AE790(a1 + 16, v8, v10);
      v10 += 32;
      v8 += 32;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C5E68B4((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_20C5E6804(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C5BE604((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C5E6988(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C5E68B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  v4 = a4;
  if (a3 != a2)
  {
    v7 = a3;
    v8 = a3;
    v9 = a4;
    do
    {
      v10 = *(_DWORD *)(v8 - 32);
      v8 -= 32;
      *(_DWORD *)(v9 - 32) = v10;
      v9 -= 32;
      v11 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      v12 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v11;
      if (v12)
        sub_20C35C614(v12);
      sub_20BFD3EBC((int *)(v4 - 16), (int *)(v7 - 16));
      sub_20BFD3F10((int *)(v4 - 12), (int *)(v7 - 12));
      if (v7 != v4)
      {
        v13 = *(_QWORD *)(v4 - 8);
        if ((v13 & 7) != 0)
        {
          v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        *(_QWORD *)(v4 - 8) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(v7 - 8) = 0;
      }
      v4 = v9;
      v7 = v8;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t sub_20C5E6988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C3AE790(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C5E4DB0((uint64_t)v9);
  return v4;
}

void sub_20C5E6A18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_20C5E4C9C((void **)a1);
    if (a4 >> 59)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BF25370((_QWORD *)a1, v12);
    v13 = sub_20C5E5E98(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    sub_20C5E4E34((uint64_t)&v19, a2, v15, (uint64_t)v9);
    v13 = sub_20C5E5E98(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  sub_20C5E4E34((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      sub_20C5BE52C(v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20C5E6B58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C5E6B60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v127 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v127, "bindMaterialAs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "coordSys", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "coordSys:__INSTANCE_NAME__:binding", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "fallbackStrength", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "full", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "id", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "info:id", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "info:implementationSource", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "inputs:", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "interfaceOnly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "materialBind", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "material:binding", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "material:binding:collection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "materialVariant", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "outputs:", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "outputs:displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "outputs:surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "outputs:volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "preview", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "sdrMetadata", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "sourceAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "sourceCode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "strongerThanDescendants", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "subIdentifier", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "weakerThanDescendants", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "ConnectableAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "CoordSysAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "Material", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "MaterialBindingAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "NodeDefAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "NodeGraph", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "Shader", 0);
  v2 = *(_QWORD *)this;
  v128 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v127;
  v129 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v130 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v131 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v132 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v133 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v134 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v134 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v135 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v135 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v136 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v136 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v137 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v138 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v139 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v140 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v141 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v142 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v143 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v144 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v145 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v146 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v147 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v148 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v149 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v150 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v151 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v152 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v153 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v154 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v155 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v156 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v157 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v158 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v159 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v160 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v161 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v162 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v163 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v164 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v165 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  v116 = operator new(0x130uLL);
  v117 = 0;
  *((_QWORD *)this + 38) = v116;
  *((_QWORD *)this + 39) = v116;
  *((_QWORD *)this + 40) = v116 + 38;
  do
  {
    v118 = *(&v128 + v117);
    *v116 = v118;
    if ((v118 & 7) != 0)
    {
      v119 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 2, v119));
      if ((v120 & 1) == 0)
        *v116 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v117;
    ++v116;
  }
  while (v117 != 38);
  v121 = &v166;
  *((_QWORD *)this + 39) = v116;
  do
  {
    v123 = *--v121;
    v122 = v123;
    if ((v123 & 7) != 0)
    {
      v124 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
      do
        v125 = __ldxr(v124);
      while (__stlxr(v125 - 2, v124));
    }
  }
  while (v121 != &v128);
  return this;
}

void sub_20C5E7834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,void **a39,uint64_t a40,char a41)
{
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;

  sub_20BEEB2B8(&a39);
  v51 = (char *)&STACK[0x230];
  while (1)
  {
    v53 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v52 = v53;
    if ((v53 & 7) != 0)
    {
      v54 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if (v51 == &a41)
    {
      if ((*v42 & 7) != 0)
      {
        v56 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v50 & 7) != 0)
      {
        v58 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v49 & 7) != 0)
      {
        v60 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v48 & 7) != 0)
      {
        v62 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v47 & 7) != 0)
      {
        v64 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v46 & 7) != 0)
      {
        v66 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v45 & 7) != 0)
      {
        v68 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v44 & 7) != 0)
      {
        v70 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v43 & 7) != 0)
      {
        v72 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a11 & 7) != 0)
      {
        v74 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a12 & 7) != 0)
      {
        v76 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a13 & 7) != 0)
      {
        v78 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a14 & 7) != 0)
      {
        v80 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a15 & 7) != 0)
      {
        v82 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a16 & 7) != 0)
      {
        v84 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a17 & 7) != 0)
      {
        v86 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a18 & 7) != 0)
      {
        v88 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a19 & 7) != 0)
      {
        v90 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a20 & 7) != 0)
      {
        v92 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a21 & 7) != 0)
      {
        v94 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a22 & 7) != 0)
      {
        v96 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a23 & 7) != 0)
      {
        v98 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a24 & 7) != 0)
      {
        v100 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a25 & 7) != 0)
      {
        v102 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a26 & 7) != 0)
      {
        v104 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a27 & 7) != 0)
      {
        v106 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a28 & 7) != 0)
      {
        v108 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a29 & 7) != 0)
      {
        v110 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a30 & 7) != 0)
      {
        v112 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a31 & 7) != 0)
      {
        v114 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a32 & 7) != 0)
      {
        v116 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a33 & 7) != 0)
      {
        v118 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a34 & 7) != 0)
      {
        v120 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a35 & 7) != 0)
      {
        v122 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a36 & 7) != 0)
      {
        v124 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a37 & 7) != 0)
      {
        v126 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a38 & 7) != 0)
      {
        v128 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*v41 & 7) != 0)
      {
        v130 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5E7DE8()
{
  JUMPOUT(0x20C5E79D0);
}

void sub_20C5E7DF0()
{
  JUMPOUT(0x20C5E79F4);
}

void sub_20C5E7DF8()
{
  JUMPOUT(0x20C5E7A18);
}

void sub_20C5E7E00()
{
  JUMPOUT(0x20C5E7A3CLL);
}

void sub_20C5E7E08()
{
  JUMPOUT(0x20C5E7A60);
}

void sub_20C5E7E10()
{
  JUMPOUT(0x20C5E7A84);
}

void sub_20C5E7E18()
{
  JUMPOUT(0x20C5E7AA8);
}

void sub_20C5E7E20()
{
  JUMPOUT(0x20C5E7ACCLL);
}

void sub_20C5E7E28()
{
  JUMPOUT(0x20C5E7AF0);
}

void sub_20C5E7E30()
{
  JUMPOUT(0x20C5E7B14);
}

void sub_20C5E7E38()
{
  JUMPOUT(0x20C5E7B38);
}

void sub_20C5E7E40()
{
  JUMPOUT(0x20C5E7B5CLL);
}

void sub_20C5E7E48()
{
  JUMPOUT(0x20C5E7B80);
}

void sub_20C5E7E50()
{
  JUMPOUT(0x20C5E7BA4);
}

void sub_20C5E7E58()
{
  JUMPOUT(0x20C5E7BC8);
}

void sub_20C5E7E60()
{
  JUMPOUT(0x20C5E7BECLL);
}

void sub_20C5E7E68()
{
  JUMPOUT(0x20C5E7C10);
}

void sub_20C5E7E70()
{
  JUMPOUT(0x20C5E7C34);
}

void sub_20C5E7E78()
{
  JUMPOUT(0x20C5E7C58);
}

void sub_20C5E7E80()
{
  JUMPOUT(0x20C5E7C7CLL);
}

void sub_20C5E7E88()
{
  JUMPOUT(0x20C5E7CA0);
}

void sub_20C5E7E90()
{
  JUMPOUT(0x20C5E7CC4);
}

void sub_20C5E7E98()
{
  JUMPOUT(0x20C5E7CE8);
}

void sub_20C5E7EA0()
{
  JUMPOUT(0x20C5E7D0CLL);
}

void sub_20C5E7EA8()
{
  JUMPOUT(0x20C5E7D30);
}

void sub_20C5E7EB0()
{
  JUMPOUT(0x20C5E7D54);
}

void sub_20C5E7EB8()
{
  JUMPOUT(0x20C5E7D78);
}

void sub_20C5E7EC0()
{
  JUMPOUT(0x20C5E7D9CLL);
}

void sub_20C5E7EC8()
{
  JUMPOUT(0x20C5E7DC0);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::IsUdimIdentifier(const std::string *a1)
{
  std::string::size_type v1;
  std::string::size_type size;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string v7;
  void *__p;
  uint64_t v9;
  unsigned __int8 v10;

  sub_20C5E7F54(a1, &v7);
  v1 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  size = v7.__r_.__value_.__l.__size_;
  v3 = v10;
  v4 = v9;
  if ((char)v10 < 0)
  {
    operator delete(__p);
    if ((v1 & 0x80) == 0)
      goto LABEL_3;
  }
  else if ((*((_BYTE *)&v7.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v7.__r_.__value_.__l.__data_);
  v1 = size;
LABEL_3:
  if ((v3 & 0x80u) == 0)
    v5 = v3;
  else
    v5 = v4;
  return (v1 | v5) != 0;
}

double sub_20C5E7F54@<D0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string *v7;
  int64_t size;
  char *v9;
  int v10;
  char *v11;
  int64_t v12;
  int v13;
  int64_t v14;
  std::string *v15;
  int64_t v16;
  char *v17;
  double result;
  char *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string v23;
  char v24;
  std::string v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_25498AA38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AA38))
  {
    sub_20BDDC0E4(&v25, "<UDIM>");
    sub_20C088980((uint64_t)&qword_25498AA20, (__int128 *)&v25, 1uLL);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))sub_20BFBB378, &qword_25498AA20, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AA38);
  }
  v4 = qword_25498AA20;
  v5 = unk_25498AA28;
  if (qword_25498AA20 == unk_25498AA28)
  {
LABEL_29:
    a2->__r_.__value_.__r.__words[2] = 0;
    a2[1].__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2[1].__r_.__value_.__l.__size_ = 0;
    a2[1].__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v6 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v6 >= 0)
      v7 = a1;
    else
      v7 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      size = a1->__r_.__value_.__l.__size_;
    v9 = (char *)v7 + size;
    while (1)
    {
      v10 = *(char *)(v4 + 23);
      v11 = v10 >= 0 ? (char *)v4 : *(char **)v4;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 23) : *(_QWORD *)(v4 + 8);
      if (!v12)
        break;
      if (size >= v12)
      {
        v13 = *v11;
        v14 = size;
        v15 = (std::string *)v7;
        do
        {
          v16 = v14 - v12;
          if (v16 == -1)
            break;
          v17 = (char *)memchr(v15, v13, v16 + 1);
          if (!v17)
            break;
          v19 = v17;
          if (!memcmp(v17, v11, v12))
          {
            if (v19 == v9)
              break;
            v20 = v19 - (char *)v7;
            if (v19 - (char *)v7 == -1)
              break;
            goto LABEL_31;
          }
          v15 = (std::string *)(v19 + 1);
          v14 = v9 - (v19 + 1);
        }
        while (v14 >= v12);
      }
      v4 += 24;
      if (v4 == v5)
        goto LABEL_29;
    }
    v20 = 0;
LABEL_31:
    std::string::basic_string(&v25, a1, 0, v20, (std::allocator<char> *)&v23);
    if (*(char *)(v4 + 23) < 0)
      v21 = *(_QWORD *)(v4 + 8);
    else
      v21 = *(unsigned __int8 *)(v4 + 23);
    std::string::basic_string(&v23, a1, v21 + v20, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
    *a2 = v25;
    result = *(double *)&v23.__r_.__value_.__l.__data_;
    a2[1] = v23;
  }
  return result;
}

void sub_20C5E8190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25498AA38);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimTilePaths(const std::string *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_20C5E81E8(a1, a2, 0, a3);
}

void sub_20C5E81E8(const std::string *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v7;
  std::string::size_type size;
  std::string::size_type v9;
  uint64_t *Resolver;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  char v17;
  std::string::size_type v18;
  int v19;
  std::string __p;
  void *v21;
  char v22;
  std::string v23;
  std::string v24;
  std::string v25;
  void *v26;
  std::string::size_type v27;
  unsigned __int8 v28;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20C5E7F54(a1, &v25);
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_7;
  v9 = v28;
  if ((v28 & 0x80u) != 0)
    v9 = v27;
  if (v9)
  {
LABEL_7:
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v7);
    v11 = 1001;
    while (1)
    {
      std::to_string(&v24, v11);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v25.__r_.__value_.__l.__data_, (const void **)&v24.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if ((v28 & 0x80u) == 0)
        v12 = (const std::string::value_type *)&v26;
      else
        v12 = (const std::string::value_type *)v26;
      if ((v28 & 0x80u) == 0)
        v13 = v28;
      else
        v13 = v27;
      v14 = std::string::append(&__p, v12, v13);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v16 = sub_20BFD2F78(a2);
      if (v17 & 1 | (unint64_t)v16)
      {
        pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a2, (uint64_t)&v23, (uint64_t)&__p);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        v23 = __p;
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
      std::string::operator=(&v23, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      v19 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = v23.__r_.__value_.__l.__size_;
      if (v18)
      {
        sub_20C5E8A54((char *)&__p, (__int128 *)&v23, (__int128 *)&v24);
        sub_20BE94920(a4, (__int128 *)&__p);
        if (v22 < 0)
          operator delete(v21);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v19 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
        if ((a3 & 1) != 0)
          break;
      }
      if (v19 < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (++v11 == 1101)
        goto LABEL_40;
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
LABEL_40:
  if ((char)v28 < 0)
    operator delete(v26);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

