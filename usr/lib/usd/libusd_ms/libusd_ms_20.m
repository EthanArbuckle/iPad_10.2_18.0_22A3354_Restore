void sub_20C6571DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6571F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20C625430(a3 + v6, a1 + v6);
      v6 += 400;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C657250(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 400)
  {
    sub_20C625CE0(v1);
    v1 += 400;
  }
  __cxa_rethrow();
}

void sub_20C657274(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C657288(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v14;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v14, a2) = off_24C53F7D0;
  v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 24);
  sub_20C65739C(a1, &v13);
  v11 = a1[1];
  sub_20C599DF8((uint64_t)&v13);
  return v11;
}

void sub_20C657388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C599DF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C65739C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C657410((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C657410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 - 24 + v11), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 24)) = off_24C53F7D0;
      v11 -= 24;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_20C65749C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 24)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6574C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C64A218((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C657538(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, __int128 *a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = *(_QWORD *)(a1 + 8);
  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v5, a2);
  *(_QWORD *)v5 = off_24C53F7D0;
  v7 = *a3;
  *(_OWORD *)(v5 + 40) = a3[1];
  *(_OWORD *)(v5 + 24) = v7;
  v8 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(v5 + 56) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*(_QWORD *)(v5 + 48))
      v9 = *(unint64_t **)(v5 + 48);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 8) = v5 + 64;
  return result;
}

void sub_20C6575BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C6575C4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v20;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v21;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v22;
  char *v23;
  uint64_t *v24;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 6;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 5 > v6)
    v6 = v10 >> 5;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
    v11 = 0x3FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v24 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20C00D6F0(v9, v11);
  else
    v12 = 0;
  v20 = v12;
  v21 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[64 * v5];
  v22 = v21;
  v23 = &v12[64 * v11];
  v13 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v21, a2);
  *(_QWORD *)v13 = off_24C53F7D0;
  v14 = *a3;
  *(_OWORD *)((char *)v13 + 40) = a3[1];
  *(_OWORD *)((char *)v13 + 24) = v14;
  v15 = *((_QWORD *)a3 + 4);
  *((_QWORD *)v13 + 7) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*(_QWORD *)&v12[64 * v5 + 48])
      v16 = *(unint64_t **)&v12[64 * v5 + 48];
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v22 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v22 + 64);
  sub_20C6574C4(a1, &v20);
  v18 = a1[1];
  sub_20C64A498(&v20);
  return v18;
}

void sub_20C6576EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C64A498((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C657700()
{
  uint64_t v0;
  uint64_t v1;
  void *__p;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;

  sub_20BDDC0E4(v5, "USDSKEL_CACHE");
  __p = 0;
  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53F758, 0, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  v0 = sub_20C628798();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USDSKEL_CACHE", "UsdSkel cache population.");
  sub_20BDDC0E4(v5, "USDSKEL_BAKESKINNING");
  __p = 0;
  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53F758, 1, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  v1 = sub_20C628798();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "USDSKEL_BAKESKINNING", "UsdSkelBakeSkinningLBS() method.");
}

void sub_20C6577F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_Create(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  if (((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2) & 1) != 0
     || (v13 = "usdSkel/inbetweenShape.cpp",
         v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_Create",
         v15 = 47,
         v16 = (unint64_t)"static UsdSkelInbetweenShape pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_"
                                 "Create(const UsdPrim &, const TfToken &)",
         v17 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "prim", 0) & 1) != 0))
    && (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced(a2, 0, &v12), v12))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v7)
      v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)this, &v12, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 664), 0, 1, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape(a3, (uint64_t)&v13);
    if ((v16 & 7) != 0)
    {
      v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_20BFD265C(&v15);
    if (v14)
      sub_20C35C614(v14);
    if ((v12 & 7) != 0)
    {
      v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced@<W0>(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL8 IsNamespaced;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  const void **v8;
  uint64_t *EmptyString;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  _BOOL8 result;
  unsigned int *v18;
  unsigned int v19;
  void *__p;
  char v21;
  uint64_t v22;

  *a3 = 0;
  IsNamespaced = pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsNamespaced(this, a2);
  if (IsNamespaced)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF32220(a3, this);
  }
  else
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)IsNamespaced);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v8 = (const void **)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
      v8 = (const void **)NamespacePrefix;
    }
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v8, (const void **)EmptyString, (uint64_t)&__p);
    v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
    v10 = *a3;
    v11 = *a3 & 7;
    if (&v22 == a3)
    {
      if (v11)
      {
        v14 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
    }
    else
    {
      if (v11)
      {
        v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      *a3 = v22;
      v22 = 0;
    }
    if (v21 < 0)
      operator delete(__p);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v16 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  result = pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsValidInbetweenName((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v16);
  if (!result)
  {
    if ((*a3 & 7) != 0)
    {
      v18 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    *a3 = 0;
  }
  return result;
}

void sub_20C657BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  unsigned int *v16;
  unsigned int v17;

  if (a14 < 0)
    operator delete(__p);
  if ((*v14 & 7) != 0)
  {
    v16 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::IsInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  uint64_t *EmptyString;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if ((_DWORD)result)
  {
    v4 = sub_20C398E78(this);
    if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    return pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsValidInbetweenName((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)EmptyString);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsValidInbetweenName(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  const char *v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v8;
  const char *v9;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t *v13;
  const char *v14;
  int v15;
  size_t v16;
  size_t v17;
  const char *v18;

  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(a1);
  if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  if (*((char *)EmptyString + 23) >= 0)
    v4 = (const char *)EmptyString;
  else
    v4 = (const char *)*EmptyString;
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = strlen(v4);
  if (v6 < v7)
    return 0;
  v8 = v7;
  v9 = v5 >= 0 ? (const char *)a1 : *(const char **)a1;
  v10 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)strncmp(v9, v4, v8);
  if ((_DWORD)v10)
    return 0;
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(v10);
  if ((*((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v13 = (uint64_t *)((*((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  if (*((char *)v13 + 23) >= 0)
    v14 = (const char *)v13;
  else
    v14 = (const char *)*v13;
  v15 = *((char *)a1 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a1 + 23);
  else
    v16 = *((_QWORD *)a1 + 1);
  v17 = strlen(v14);
  if (v16 < v17)
    return 1;
  v18 = *(const char **)a1;
  if (v15 >= 0)
    v18 = (const char *)a1;
  return strcmp(&v18[v16 - v17], v14) != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this)
{
  char *v1;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  void **v25;
  char v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)atomic_load(&qword_25498BB58);
  if (!v1)
  {
    v1 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1, "inbetweens:", 0);
    v3 = v1 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 8, ":normalOffsets", 0);
    v4 = *(unsigned int **)v1;
    v27 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v27 = v5;
    }
    v7 = (unsigned int *)*v3;
    v28 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v28 = v8;
    }
    *((_QWORD *)v1 + 2) = 0;
    *((_QWORD *)v1 + 3) = 0;
    *((_QWORD *)v1 + 4) = 0;
    v25 = (void **)(v1 + 16);
    v26 = 0;
    v10 = operator new(0x10uLL);
    v11 = 0;
    *((_QWORD *)v1 + 2) = v10;
    *((_QWORD *)v1 + 3) = v10;
    *((_QWORD *)v1 + 4) = v10 + 2;
    do
    {
      v12 = (&v27)[v11];
      *v10 = v12;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
      ++v10;
    }
    while (v11 != 2);
    v15 = (unsigned int **)&v29;
    *((_QWORD *)v1 + 3) = v10;
    do
    {
      v17 = (uint64_t)*--v15;
      v16 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    while (v15 != &v27);
    while (!__ldaxr(&qword_25498BB58))
    {
      if (!__stlxr((unint64_t)v1, &qword_25498BB58))
        return (unint64_t)v1;
    }
    __clrex();
    v25 = (void **)(v1 + 16);
    sub_20BEEB2B8(&v25);
    if ((*v3 & 7) != 0)
    {
      v21 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if ((*(_QWORD *)v1 & 7) != 0)
    {
      v23 = (unsigned int *)(*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    operator delete(v1);
    return atomic_load(&qword_25498BB58);
  }
  return (unint64_t)v1;
}

void sub_20C657F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsNamespaced(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *v2;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    v2 = this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(this);
  if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  if (*((char *)EmptyString + 23) >= 0)
    v5 = (const char *)EmptyString;
  else
    v5 = (const char *)*EmptyString;
  v6 = *((char *)v2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)v2 + 23);
  else
    v7 = *((_QWORD *)v2 + 1);
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)v2;
  else
    v11 = *(const char **)v2;
  return strncmp(v11, v5, v10) == 0;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const void **v7;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *v9;
  uint64_t *v10;
  _DWORD *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  EmptyString = sub_20C398E78(this);
  if ((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (const void **)((*(_QWORD *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v7 = (const void **)EmptyString;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(EmptyString);
  if ((*((_QWORD *)NamespacePrefix + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v9 = (uint64_t *)((*((_QWORD *)NamespacePrefix + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v9, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v24);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  v10 = (uint64_t *)((char *)this + 8);
  v11 = (_DWORD *)((char *)this + 16);
  if ((a2 & 1) != 0)
  {
    sub_20C35C4F8((uint64_t)&__p, v10, v11);
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v12)
      v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&__p, &v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 688), 0, 0, a3);
    if ((v23 & 7) != 0)
    {
      v13 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&__p, v10, v11);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, a3);
    if ((v23 & 7) != 0)
    {
      v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  if ((v24 & 7) != 0)
  {
    v17 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

void sub_20C658244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  unsigned int *v18;
  unsigned int v19;

  sub_20C35C2E0((uint64_t)&__p);
  if ((a17 & 7) != 0)
  {
    v18 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(this, 0, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::CreateNormalOffsetsAttr@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdProperty *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t result;
  int v7;

  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(this, 1, (uint64_t)a3);
  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v5);
  if (*((_QWORD *)a2 + 1))
    v7 = result;
  else
    v7 = 0;
  if (v7 == 1)
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a3, a2, NAN);
  return result;
}

void sub_20C658308(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, float *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v4)
    v4 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v8 = 0;
  result = sub_20C658638((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v4 + 184), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::SetWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, float a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  float v7;
  uint64_t v8;

  v7 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v8 = 0;
  result = sub_20C6586CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 184), (uint64_t (**)(_QWORD, uint64_t))&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::HasAuthoredWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v2)
    v2 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v2 + 184));
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetOffsets(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::SetOffsets(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, a2, NAN);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetNormalOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unsigned int v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  int IsDefined;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(a1, 0, (uint64_t)&v10);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v10, v4);
  if (IsDefined)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v10, a2);
    v2 = v6;
  }
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  return IsDefined & v2;
}

void sub_20C658568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::SetNormalOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unsigned int v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  int IsDefined;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__ *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(a1, 1, (uint64_t)&v9);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v9, v4);
  if (IsDefined)
    v2 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(&v9, a2, NAN);
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return IsDefined & v2;
}

void sub_20C658624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C658638(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = MEMORY[0x24BEDB788];
  v12 = 0;
  v11[0] = &unk_24C52D7E8;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C6586CC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB788];
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C53A480;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

void sub_20C658758()
{
  void *__p[2];
  char v1;

  sub_20C659074();
  sub_20BDDC0E4(__p, "SkelRoot");
  sub_20C659194((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C6587A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F778;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdSkel/root.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdSkelRoot pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F778;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C658948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498BB68);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498BB68))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498BB60, "SkelRoot");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498BB60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BB68);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498BB60, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F778;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdSkel/root.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdSkelRoot pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Define(const UsdStagePtr &"
                            ", const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F778;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C658B38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BB68);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BB78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BB78))
  {
    __cxa_guard_release(&qword_25498BB78);
  }
  return &qword_25498BB70;
}

void sub_20C658BDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BB78);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BB88);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)__cxa_guard_acquire(&qword_25498BB88);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v3);
      byte_25498BB80 = sub_20C35BD7C((char *)&qword_25498BB70, v4, v5);
      __cxa_guard_release(&qword_25498BB88);
    }
  }
  return byte_25498BB80;
}

void sub_20C658C58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BB88);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(this);
  return &qword_25498BB70;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelRoot::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498BBA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BBA8))
  {
    qword_25498BB90 = 0;
    *(_QWORD *)algn_25498BB98 = 0;
    qword_25498BBA0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BB90, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BBA8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BBC8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BBC8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    qword_25498BBB0 = 0;
    *(_QWORD *)algn_25498BBB8 = 0;
    qword_25498BBC0 = 0;
    sub_20BFE538C(&qword_25498BBB0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BBB0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BBC8);
  }
  if (v1)
    return &qword_25498BBB0;
  else
    return &qword_25498BB90;
}

void sub_20C658D88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BBC8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  unint64_t *v6;
  unint64_t v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t IsDefined;
  char v13;
  const pxrInternal__aapl__pxrReserved__::TfType *v14;
  uint64_t *SchemaInfo;
  char *v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;

  v30 = *(_DWORD *)this;
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BFD6E54(&v32, (_DWORD *)this + 4);
  sub_20BFD6EA4(&v33, (_DWORD *)this + 5);
  v9 = *((_QWORD *)this + 3);
  v34 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v30, v8);
    v13 = IsDefined;
    if ((IsDefined & 1) == 0)
      break;
    pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)IsDefined);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BB70, v14);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v30, SchemaInfo, v16))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v30);
      *(_QWORD *)a2 = off_24C53F778;
      break;
    }
    sub_20C3AD22C((uint64_t)&v30, (uint64_t)&v25);
    v30 = v25;
    v17 = v26;
    v26 = 0;
    v18 = v31;
    v31 = v17;
    if (v18)
      sub_20C35C614(v18);
    sub_20BFD3EBC(&v32, &v27);
    sub_20BFD3F10(&v33, &v28);
    if ((v34 & 7) != 0)
    {
      v19 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    v34 = v29;
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
  if ((v34 & 7) != 0)
  {
    v21 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_20BFD265C(&v32);
  if (v31)
    sub_20C35C614(v31);
  if ((v13 & 1) == 0)
  {
    v30 = 1;
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v33);
    v34 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v30);
    *(_QWORD *)a2 = off_24C53F778;
    if ((v34 & 7) != 0)
    {
      v23 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
    if (v31)
      sub_20C35C614(v31);
  }
}

void sub_20C659014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C65903C(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C659248;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C659074()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C565A28((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C659148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C659194(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C659224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C659248(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v9;
  int8x16_t v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  int8x16_t *v12;
  uint64_t v13;
  int8x16_t v14;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v15;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  int8x16_t *v18;
  uint64_t v19;
  int8x16_t v20;
  unsigned int *v21;
  unsigned int v22;
  char v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  float32_t v32;
  float32x2_t *v33;
  double v34;
  uint64_t v35;
  char *v36;
  float v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  float64x2_t v43;
  float64x2_t v44;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **v45;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void (**v50)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *__hidden);
  uint64_t v51;
  char v52[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  int8x16_t v61;
  uint64_t v62;
  int v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t *v66[2];
  int v67;
  _DWORD v68[9];
  int8x16_t v69;
  uint64_t v70;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v71;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v72;
  uint64_t v73;
  _QWORD v74[7];
  _BYTE v75[32];
  uint64_t v76;
  int64x2_t v77;
  _BYTE v78[32];
  _BYTE v79[48];
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void (**v84)(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *__hidden);
  uint64_t v85;
  int v86;
  uint64_t v87;

  v87 = a3;
  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v84, a1);
  v84 = off_24C53F778;
  if (v85
    && (*(_BYTE *)(v85 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) != 0
    || (v45 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)"usdSkel/root.cpp",
        v46 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ComputeExtent",
        v47 = 165,
        v48 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const Us"
                                "dTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        v49 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v45, "skelRoot", 0) & 1) != 0))
  {
    v7 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v82);
    UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v7);
    v9 = UsdPrimDefaultPredicate[1].i64[0];
    v10.i64[0] = -8193;
    v10.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v10).u64[0];
    v10.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
    v80 = v10;
    v81 = v9;
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(&v82, (uint64_t)&v84, (__int128 *)v80.i8);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v79);
    v77 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
    *(_OWORD *)v78 = xmmword_20CA5AAF0;
    *(int64x2_t *)&v78[16] = vdupq_n_s64(0xC7EFFFFFE0000000);
    v76 = 0;
    memset(v75, 0, sizeof(v75));
    v74[0] = &v82;
    v74[1] = a2;
    v74[2] = v79;
    v74[3] = &v84;
    v74[4] = &v87;
    v74[5] = v75;
    v74[6] = &v77;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v12 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v11);
    v13 = v12[1].i64[0];
    v14.i64[0] = -8193;
    v14.i64[0] = vandq_s8(*v12, v14).u64[0];
    v14.i64[1] = vorrq_s8(*v12, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
    v69 = v14;
    v70 = v13;
    if (!pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v82, (uint64_t)&v84, (uint64_t)&v71, &v69)|| (v15 = v71, v16 = v72, v72 == v71))
    {
      v17 = (pxrInternal__aapl__pxrReserved__ *)sub_20C35C4F8((uint64_t)&v45, &v85, &v86);
      v18 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v17);
      v19 = v18[1].i64[0];
      v20.i64[0] = -8193;
      v20.i64[0] = vandq_s8(*v18, v20).u64[0];
      v20.i64[1] = vorrq_s8(*v18, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      v61 = v20;
      v62 = v19;
      sub_20C37F5FC((uint64_t)v66, (uint64_t)&v45, &v61);
      if ((v48 & 7) != 0)
      {
        v21 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
      sub_20BFD265C(&v47);
      if (v46)
        sub_20C35C614(v46);
      sub_20C37ECB8((uint64_t *)v66, (uint64_t)&v61);
      *(uint64_t **)&v57 = v66[1];
      *((_QWORD *)&v57 + 1) = v66;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v58 + 1);
      v59 = 0;
      v60 = 0;
      while (*(_OWORD *)&v61 != v57 || v62 != v58 || v63 != v59 || v64 != v60 || v65 != HIBYTE(v60))
      {
        sub_20C37ED84((uint64_t)&v61, (uint64_t)v52);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v50, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v52);
        v50 = off_24C53F7D0;
        if (v51)
        {
          if ((*(_BYTE *)(v51 + 57) & 8) == 0)
          {
            if (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v50))
            {
              sub_20C659D0C((uint64_t)&v45);
              v23 = sub_20C65990C((uint64_t)v74, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v50, (uint64_t)&v45);
              sub_20C649A14(&v48);
              pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v45);
              if ((v23 & 1) == 0)
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v50);
                if ((v56 & 7) != 0)
                {
                  v26 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v27 = __ldxr(v26);
                  while (__stlxr(v27 - 2, v26));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
                sub_20BFD265C(&v54);
                if (v53)
                  sub_20C35C614(v53);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
                sub_20BFD265C(&v58);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
                sub_20BFD265C(&v62);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
                sub_20BFD265C(&v67);
                goto LABEL_36;
              }
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v50);
        if ((v56 & 7) != 0)
        {
          v24 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
        sub_20BFD265C(&v54);
        if (v53)
          sub_20C35C614(v53);
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v61);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_20BFD265C(&v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
      sub_20BFD265C(&v62);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
      sub_20BFD265C(&v67);
LABEL_38:
      LODWORD(v46) = 0;
      v45 = 0;
      v66[0] = (uint64_t *)&v45;
      sub_20BF5AD04(a4, 2uLL, v66);
      v43 = (float64x2_t)v77;
      v29 = *(double *)v78;
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      v32 = v29;
      v33 = (float32x2_t *)a4[4];
      *v33 = vcvt_f32_f64(v43);
      v33[1].f32[0] = v32;
      v44 = *(float64x2_t *)&v78[8];
      v34 = *(double *)&v78[24];
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v35, v36);
      v37 = v34;
      v38 = a4[4];
      *(float32x2_t *)(v38 + 12) = vcvt_f32_f64(v44);
      *(float *)(v38 + 20) = v37;
      v28 = 1;
    }
    else
    {
      while ((sub_20C65990C((uint64_t)v74, v15, (uint64_t)v15) & 1) != 0)
      {
        v15 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v15 + 64);
        if (v15 == v16)
          goto LABEL_38;
      }
LABEL_36:
      v28 = 0;
    }
    v45 = &v71;
    sub_20C649964((void ***)&v45);
    sub_20BF5618C((uint64_t)v75);
    sub_20C543484((uint64_t)v79);
    v39 = v83;
    if (v83)
    {
      p_shared_owners = (unint64_t *)&v83->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  else
  {
    v28 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v84);
  return v28;
}

void sub_20C659804(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_20C65990C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2, uint64_t a3)
{
  float v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v8;
  uint64_t v9;
  float v10;
  uint64_t *v11;
  _DWORD *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  double v18;
  double *v19;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v20;
  uint64_t v21;
  char *v22;
  float32x2_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  float64x2_t v35;
  double v36;
  uint64_t v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  BOOL v46;
  _OWORD v47[2];
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v51;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v52;
  uint64_t v53;

  pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(*(pxrInternal__aapl__pxrReserved__::UsdSkelCache **)a1, a2, (uint64_t)&v51);
  if (v51
    || (*(_QWORD *)&v38.f64[0] = "usdSkel/root.cpp",
        *(_QWORD *)&v38.f64[1] = "operator()",
        *(_QWORD *)&v39 = 182,
        *((_QWORD *)&v39 + 1) = "auto pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const Us"
                                "dTimeCode &, const GfMatrix4d *, VtVec3fArray *)::(anonymous class)::operator()(const Us"
                                "dSkelSkeleton &, const UsdSkelBinding &) const",
        LOBYTE(v40) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "skelQuery", 0) & 1) != 0))
  {
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    if ((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t *)&v51, (const char *)v49, 0, **(double **)(a1 + 8)) & 1) != 0)
    {
      v48 = 0;
      memset(v47, 0, sizeof(v47));
      v6 = 0.0;
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t *)&v51, (const char *)v47, (char *)1, **(double **)(a1 + 8)))
      {
        v7 = *(_QWORD *)(a3 + 24);
        if (v7)
        {
          v8 = *(const pxrInternal__aapl__pxrReserved__::UsdPrim **)(a3 + 56);
          v9 = 400 * v7;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v38, v8);
            *(_QWORD *)&v38.f64[0] = off_24C53C378;
            v10 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeExtentsPadding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t)v8, (uint64_t *)v47, (pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v38);
            pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v38);
            if (v6 < v10)
              v6 = v10;
            v8 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v8 + 400);
            v9 -= 400;
          }
          while (v9);
        }
      }
      v46 = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v11 = (uint64_t *)((char *)a2 + 8);
      v12 = (_DWORD *)((char *)a2 + 16);
      v13 = *(pxrInternal__aapl__pxrReserved__::UsdGeomXformCache **)(a1 + 16);
      sub_20C35C4F8((uint64_t)&v35, v11, v12);
      sub_20C35C4F8((uint64_t)&v30, (uint64_t *)(*(_QWORD *)(a1 + 24) + 8), (_DWORD *)(*(_QWORD *)(a1 + 24) + 16));
      pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::ComputeRelativeTransform(v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v35, &v30, &v46, v38.f64);
      if ((v34 & 7) != 0)
      {
        v14 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_20BFD265C(&v32);
      if (v31)
        sub_20C35C614(v31);
      if ((v37 & 7) != 0)
      {
        v16 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
      sub_20BFD265C(&v36);
      if (*(_QWORD *)&v35.f64[1])
        sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v35.f64[1]);
      if (!v46)
      {
        v19 = **(double ***)(a1 + 32);
        if (v19)
          v18 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v38.f64, v19);
      }
      *(float *)&v18 = v6;
      pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent((uint64_t *)v49, *(unint64_t **)(a1 + 40), &v38, *(int32x2_t *)&v18);
      v20 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 40);
      sub_20BF5AFC0(v20, v21, v22);
      v23 = (float32x2_t *)*((_QWORD *)v20 + 4);
      sub_20BF5AFC0(v20, v24, v25);
      v26 = *((_QWORD *)v20 + 4) + 12 * *(_QWORD *)v20;
      while (v23 != (float32x2_t *)v26)
      {
        v27 = *(_QWORD *)(a1 + 48);
        v35 = vcvtq_f64_f32(*v23);
        v36 = v23[1].f32[0];
        sub_20C659C90(v27, (uint64_t)&v35);
        v23 = (float32x2_t *)((char *)v23 + 12);
      }
      sub_20BF5618C((uint64_t)v47);
    }
    sub_20BF5618C((uint64_t)v49);
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  sub_20BF5618C((uint64_t)&v53);
  sub_20C626160(&v52);
  sub_20C62618C(&v51);
  return v28;
}

void sub_20C659BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6236C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_20C659C90(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  if (*(double *)a2 < *(double *)result)
    *(_QWORD *)result = *(_QWORD *)a2;
  v2 = *(double *)(a2 + 8);
  if (v2 < *(double *)(result + 8))
    *(double *)(result + 8) = v2;
  v3 = *(double *)(a2 + 16);
  if (v3 < *(double *)(result + 16))
    *(double *)(result + 16) = v3;
  if (*(double *)a2 > *(double *)(result + 24))
    *(_QWORD *)(result + 24) = *(_QWORD *)a2;
  v4 = *(double *)(a2 + 8);
  if (v4 > *(double *)(result + 32))
    *(double *)(result + 32) = v4;
  v5 = *(double *)(a2 + 16);
  if (v5 > *(double *)(result + 40))
    *(double *)(result + 40) = v5;
  return result;
}

uint64_t sub_20C659D0C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v5 = 1;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *(_QWORD *)a1 = off_24C53F7D0;
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void sub_20C659DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C659DF0()
{
  void *__p[2];
  char v1;

  sub_20C65ACA8();
  sub_20BDDC0E4(__p, "Skeleton");
  sub_20C65ADC8((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C659E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F7D0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdSkel/skeleton.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdSkelSkeleton pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F7D0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C659FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498BBD8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498BBD8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498BBD0, "Skeleton");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498BBD0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BBD8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498BBD0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F7D0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdSkel/skeleton.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdSkelSkeleton pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F7D0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C65A1D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BBD8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BBE8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BBE8))
  {
    __cxa_guard_release(&qword_25498BBE8);
  }
  return &qword_25498BBE0;
}

void sub_20C65A274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BBE8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BBF8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)__cxa_guard_acquire(&qword_25498BBF8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v3);
      byte_25498BBF0 = sub_20C35BD7C((char *)&qword_25498BBE0, v4, v5);
      __cxa_guard_release(&qword_25498BBF8);
    }
  }
  return byte_25498BBF0;
}

void sub_20C65A2F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BBF8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(this);
  return &qword_25498BBE0;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C65A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointNamesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 40), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C65A520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateJointNamesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C65A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 112), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C65A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *SchemaAttributeNames;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int)this;
  v31 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BC18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BC18))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5)
      v5 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v6 = *((_QWORD *)v5 + 6);
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9)
      v9 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v10 = *((_QWORD *)v9 + 5);
    v28 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v13)
      v13 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v14 = *(_QWORD *)v13;
    v29 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *((_QWORD *)v17 + 14);
    v30 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498BC00, &v27, 4uLL);
    v21 = &v31;
    do
    {
      v23 = *--v21;
      v22 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
    }
    while (v21 != &v27);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BC00, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BC18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BC38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BC38))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    sub_20C65ABBC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BC20, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BC38);
  }
  if (v1)
    return &qword_25498BC20;
  else
    return &qword_25498BC00;
}

void sub_20C65AB2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BC18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C65ABBC(uint64_t **a1)
{
  qword_25498BC28 = 0;
  unk_25498BC30 = 0;
  qword_25498BC20 = 0;
  sub_20BFC9A6C((char **)&qword_25498BC20, ((unk_25498BC08 - qword_25498BC00) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BC20, (_QWORD *)qword_25498BC28, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BC20, (_QWORD *)qword_25498BC28, (uint64_t *)qword_25498BC00, unk_25498BC08, (unk_25498BC08 - qword_25498BC00) >> 3);
}

void sub_20C65AC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C65AC70(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C65AE7C;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C65ACA8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C565A28((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C65AD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C65ADC8(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C65AE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C65AE7C(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, double *a2, float64x2_t *a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  int32x2_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v23[3];
  _BYTE v24[48];
  _BYTE v25[8];
  std::__shared_weak_count *v26;
  void (**v27)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *__hidden);
  uint64_t v28;

  v8 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v27, a1);
  v27 = off_24C53F7D0;
  if (v28
    && (*(_BYTE *)(v28 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v8) & 1) != 0
    || (v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"usdSkel/skeleton.cpp",
        v23[0] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_ComputeExtent",
        v23[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)239,
        v23[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"BOOL pxrInternal__aapl__pxrReserved"
                                                                                     "__::_ComputeExtent(const UsdGeomBou"
                                                                                     "ndable &, const UsdTimeCode &, cons"
                                                                                     "t GfMatrix4d *, VtVec3fArray *)",
        v24[0] = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v22, "skel", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v25);
    sub_20C35C4F8((uint64_t)&v18, (uint64_t *)a1 + 1, (_DWORD *)a1 + 4);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v21, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
    v21[0] = off_24C53F7D0;
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v25, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v21, (uint64_t)&v22);
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v21);
    if ((BYTE8(v19) & 7) != 0)
    {
      v9 = (unsigned int *)(*((_QWORD *)&v19 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_20BFD265C(&v19);
    if (*((_QWORD *)&v18 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v18 + 1));
    if (!v22)
    {
      *(_QWORD *)&v18 = "usdSkel/skeleton.cpp";
      *((_QWORD *)&v18 + 1) = "_ComputeExtent";
      *(_QWORD *)&v19 = 248;
      *((_QWORD *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdT"
                              "imeCode &, const GfMatrix4d *, VtVec3fArray *)";
      LOBYTE(v20) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "skelQuery", 0) & 1) == 0)
        goto LABEL_13;
    }
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v11 = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t *)&v22, (const char *)&v18, 0, *a2);
    v13 = v11;
    if (v11)
    {
      v12.i32[0] = 0;
      LOBYTE(a2) = pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent((uint64_t *)&v18, a4, a3, v12);
    }
    sub_20BF5618C((uint64_t)&v18);
    if ((v13 & 1) == 0)
LABEL_13:
      LOBYTE(a2) = 1;
    sub_20BF5618C((uint64_t)v24);
    sub_20C626160(v23);
    sub_20C62618C(&v22);
    v14 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    LOBYTE(a2) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v27);
  return a2 & 1;
}

void sub_20C65B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_20C6236C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v10 - 88));
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)(v10 - 72));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  char v4;
  int v8;
  uint64_t result;
  char *v10;
  char v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;

  if (a2)
  {
    v4 = (char)a3;
    if (*a1)
      goto LABEL_12;
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointLocalTransforms";
    v14 = 91;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v16 = 0;
    v10 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    v11 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "IsValid()", v10);
    result = 0;
    if ((v11 & 1) != 0)
    {
LABEL_12:
      v8 = (v4 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_20C65B270(a1, (uint64_t)a2, v8, a4);
    }
  }
  else
  {
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointLocalTransforms";
    v14 = 87;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__20UsdSkelSkeletonQuery27ComputeJointLocalTransformsINS_10GfMatrix4dEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeEb(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_HasMappableAnim(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return *((_QWORD *)this + 1)
      && !pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)this + 16));
}

uint64_t sub_20C65B270(uint64_t *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v6;
  char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *Skeleton;
  const char *Text;
  const char *v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  _BYTE v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  if (a3)
  {
    v6 = sub_20C629474(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v6, a2);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2)))
  {
    v10 = sub_20C629474(a1);
    if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v10, a2) & 1) == 0)
    {
      *(_QWORD *)&v37 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v37 + 1) = "_ComputeJointLocalTransforms";
      *(_QWORD *)&v38 = 127;
      *((_QWORD *)&v38 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointLocalTransforms("
                              "VtArray<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v39) = 0;
      Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v11, v9);
      sub_20C35C4F8((uint64_t)v30, Skeleton + 1, (_DWORD *)Skeleton + 4);
      sub_20C348EEC((uint64_t)v30, &v35);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)(a1 + 1), (uint64_t)v23);
      sub_20C348EEC((uint64_t)v23, &v28);
      v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing local space transforms: the the animation source (<%s>) is sparse, but the 'restTransforms' of the Skeleton are either unset, or do not match the number of joints.", v17, Text, v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_20BFD265C(&v28);
      if ((v27 & 7) != 0)
      {
        v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_20BFD265C(&v25);
      if (v24)
        sub_20C35C614(v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_20BFD265C(&v35);
      if ((v34 & 7) != 0)
      {
        v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_20BFD265C(&v32);
      if (v31)
        sub_20C35C614(v31);
      return 0;
    }
  }
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1 + 1, (const char *)&v37, v9, a4))
  {
    v12 = pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1 + 2, &v37, a2, 1);
LABEL_21:
    v13 = v12;
    goto LABEL_22;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2)))
  {
    v22 = sub_20C629474(a1);
    v12 = pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v22, a2);
    goto LABEL_21;
  }
  v13 = 1;
LABEL_22:
  sub_20BF5618C((uint64_t)&v37);
  return v13;
}

void sub_20C65B4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BFD1A18(va2);
  sub_20C35C2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, char *a2, char *a3, double a4)
{
  char v4;
  int v8;
  uint64_t result;
  char *v10;
  char v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;

  if (a2)
  {
    v4 = (char)a3;
    if (*a1)
      goto LABEL_12;
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointLocalTransforms";
    v14 = 91;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v16 = 0;
    v10 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    v11 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "IsValid()", v10);
    result = 0;
    if ((v11 & 1) != 0)
    {
LABEL_12:
      v8 = (v4 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_20C65B628(a1, (unint64_t *)a2, v8, a4);
    }
  }
  else
  {
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointLocalTransforms";
    v14 = 87;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__20UsdSkelSkeletonQuery27ComputeJointLocalTransformsINS_10GfMatrix4fEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeEb(a1, a2, a3, a4);
}

uint64_t sub_20C65B628(uint64_t *a1, unint64_t *a2, int a3, double a4)
{
  uint64_t v6;
  char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *Skeleton;
  const char *Text;
  const char *v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  _BYTE v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  if (a3)
  {
    v6 = sub_20C629474(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v6, a2);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2)))
  {
    v10 = sub_20C629474(a1);
    if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v10, a2) & 1) == 0)
    {
      *(_QWORD *)&v37 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v37 + 1) = "_ComputeJointLocalTransforms";
      *(_QWORD *)&v38 = 127;
      *((_QWORD *)&v38 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointLocalTransforms("
                              "VtArray<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      LOBYTE(v39) = 0;
      Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v11, v9);
      sub_20C35C4F8((uint64_t)v30, Skeleton + 1, (_DWORD *)Skeleton + 4);
      sub_20C348EEC((uint64_t)v30, &v35);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)(a1 + 1), (uint64_t)v23);
      sub_20C348EEC((uint64_t)v23, &v28);
      v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing local space transforms: the the animation source (<%s>) is sparse, but the 'restTransforms' of the Skeleton are either unset, or do not match the number of joints.", v17, Text, v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_20BFD265C(&v28);
      if ((v27 & 7) != 0)
      {
        v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_20BFD265C(&v25);
      if (v24)
        sub_20C35C614(v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_20BFD265C(&v35);
      if ((v34 & 7) != 0)
      {
        v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_20BFD265C(&v32);
      if (v31)
        sub_20C35C614(v31);
      return 0;
    }
  }
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1 + 1, (const char *)&v37, v9, a4))
  {
    v12 = pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1 + 2, &v37, (uint64_t)a2, 1);
LABEL_21:
    v13 = v12;
    goto LABEL_22;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2)))
  {
    v22 = sub_20C629474(a1);
    v12 = pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v22, a2);
    goto LABEL_21;
  }
  v13 = 1;
LABEL_22:
  sub_20BF5618C((uint64_t)&v37);
  return v13;
}

void sub_20C65B868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BFD1A18(va2);
  sub_20C35C2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  char v4;
  int v8;
  uint64_t result;
  char *v10;
  char v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;

  if (a2)
  {
    v4 = (char)a3;
    if (*a1)
      goto LABEL_12;
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointSkelTransforms";
    v14 = 161;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v16 = 0;
    v10 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    v11 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "IsValid()", v10);
    result = 0;
    if ((v11 & 1) != 0)
    {
LABEL_12:
      v8 = (v4 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_20C65B9E0(a1, (uint64_t)a2, v8, a4);
    }
  }
  else
  {
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointSkelTransforms";
    v14 = 157;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__20UsdSkelSkeletonQuery26ComputeJointSkelTransformsINS_10GfMatrix4dEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeEb(a1, a2, a3, a4);
}

uint64_t sub_20C65B9E0(uint64_t *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  char *v8;
  char **v9;
  __int128 *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _OWORD v14[2];
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;

  v4 = a2;
  if (a3)
  {
    v6 = sub_20C629474(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointSkelRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v6, v4);
  }
  else
  {
    if (a2)
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      if (sub_20C65B270(a1, (uint64_t)v14, 0, a4))
      {
        v9 = (char **)(sub_20C629474(a1) + 88);
        v8 = *v9;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v24 = &v16;
        sub_20BF5F980((unint64_t *)v4, (unint64_t)v8, &v24);
        v10 = v15;
        v11 = *(char **)&v14[0];
        sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v4, v12, v13);
        v4 = pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(v9, v10, v11, *(_QWORD *)(v4 + 32), *(char **)v4, 0);
      }
      else
      {
        v4 = 0;
      }
      sub_20BF5618C((uint64_t)v14);
    }
    else
    {
      *(_QWORD *)&v16 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v16 + 1) = "_ComputeJointSkelTransforms";
      *(_QWORD *)&v17 = 190;
      *((_QWORD *)&v17 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointSkelTransforms(V"
                              "tArray<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v18) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
    }
    return v4;
  }
}

void sub_20C65BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  char v4;
  int v8;
  uint64_t result;
  char *v10;
  char v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;

  if (a2)
  {
    v4 = (char)a3;
    if (*a1)
      goto LABEL_12;
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointSkelTransforms";
    v14 = 161;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v16 = 0;
    v10 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    v11 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "IsValid()", v10);
    result = 0;
    if ((v11 & 1) != 0)
    {
LABEL_12:
      v8 = (v4 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_20C65BC4C(a1, (uint64_t)a2, v8, a4);
    }
  }
  else
  {
    v12 = "usdSkel/skeletonQuery.cpp";
    v13 = "ComputeJointSkelTransforms";
    v14 = 157;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__20UsdSkelSkeletonQuery26ComputeJointSkelTransformsINS_10GfMatrix4fEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeEb(a1, a2, a3, a4);
}

uint64_t sub_20C65BC4C(uint64_t *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  char *v8;
  char **v9;
  __int128 *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _OWORD v14[2];
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;

  v4 = a2;
  if (a3)
  {
    v6 = sub_20C629474(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointSkelRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v6, v4);
  }
  else
  {
    if (a2)
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      if (sub_20C65B628(a1, (unint64_t *)v14, 0, a4))
      {
        v9 = (char **)(sub_20C629474(a1) + 88);
        v8 = *v9;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v20 = &v16;
        sub_20BF60580((unint64_t *)v4, (unint64_t)v8, &v20);
        v10 = v15;
        v11 = *(char **)&v14[0];
        sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v4, v12, v13);
        v4 = pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(v9, v10, v11, *(_QWORD *)(v4 + 32), *(char **)v4, 0);
      }
      else
      {
        v4 = 0;
      }
      sub_20BF5618C((uint64_t)v14);
    }
    else
    {
      *(_QWORD *)&v16 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v16 + 1) = "_ComputeJointSkelTransforms";
      *(_QWORD *)&v17 = 190;
      *((_QWORD *)&v17 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointSkelTransforms(V"
                              "tArray<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      LOBYTE(v18) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
    }
    return v4;
  }
}

void sub_20C65BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(_QWORD *a1, char *a2, char *a3, double a4)
{
  unint64_t v7;
  uint64_t v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  __int128 *v13;
  double *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t *Skeleton;
  const char *Text;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  _OWORD v41[2];
  double *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  if (!a2)
  {
    *(_QWORD *)&v44 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v44 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v45 = 232;
    *((_QWORD *)&v45 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v46) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if (!*a1)
  {
    *(_QWORD *)&v44 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v44 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v45 = 236;
    *((_QWORD *)&v45 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v46) = 0;
    v37 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "IsValid()", v37) & 1) == 0)
      return 0;
  }
  if (!a1[1]
    || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2)))
  {
    v7 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, a2, a3);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v44, 1.0);
    sub_20BF56210(a2);
    *(_QWORD *)&v41[0] = &v44;
    sub_20BF5F980((unint64_t *)a2, v7, (__int128 **)v41);
    return 1;
  }
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v9 = sub_20C629474(a1);
  if (!pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalInverseRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v9, v41))
  {
    *(_QWORD *)&v44 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v44 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v45 = 263;
    *((_QWORD *)&v45 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v46) = 0;
    Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v10, v11);
    sub_20C35C4F8((uint64_t)&v38, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_20C348EEC((uint64_t)&v38, (int *)&v43);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing rest-relative transforms: the 'restTransforms' of the Skeleton are either unset, or do not have a matching number of joints.", v34, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_20BFD265C(&v43);
    if ((BYTE8(v39) & 7) != 0)
    {
      v35 = (unsigned int *)(*((_QWORD *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_20BFD265C(&v39);
    if (*((_QWORD *)&v38 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v38 + 1));
    goto LABEL_25;
  }
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  if (!sub_20C65B270(a1, (uint64_t)&v38, 0, a4))
  {
LABEL_24:
    sub_20BF5618C((uint64_t)&v38);
LABEL_25:
    v31 = 1;
    goto LABEL_26;
  }
  v12 = v38;
  if ((_QWORD)v38 != *(_QWORD *)&v41[0])
  {
    *(_QWORD *)&v44 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v44 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v45 = 250;
    *((_QWORD *)&v45 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v46) = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "localXforms.size() == invRestXforms.size()", 0))
    {
      v12 = v38;
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_11:
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v43 = &v44;
  sub_20BF5F980((unint64_t *)a2, v12, &v43);
  v13 = v40;
  v14 = v42;
  sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v15, v16);
  v17 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v18 = (_OWORD *)*((_QWORD *)a2 + 4);
    do
    {
      v19 = *v13;
      v20 = v13[1];
      v21 = v13[3];
      v46 = v13[2];
      v47 = v21;
      v44 = v19;
      v45 = v20;
      v22 = v13[4];
      v23 = v13[5];
      v24 = v13[7];
      v50 = v13[6];
      v51 = v24;
      v48 = v22;
      v49 = v23;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v44, v14);
      v25 = v44;
      v26 = v45;
      v27 = v47;
      v18[2] = v46;
      v18[3] = v27;
      *v18 = v25;
      v18[1] = v26;
      v28 = v48;
      v29 = v49;
      v30 = v51;
      v18[6] = v50;
      v18[7] = v30;
      v18[4] = v28;
      v18[5] = v29;
      v18 += 8;
      v14 += 16;
      v13 += 8;
      --v17;
    }
    while (v17);
  }
  sub_20BF5618C((uint64_t)&v38);
  v31 = 0;
LABEL_26:
  sub_20BF5618C((uint64_t)v41);
  return (v31 & 1) == 0;
}

void sub_20C65C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this, const char *a2, char *a3)
{
  char *v5;
  unsigned __int8 v6;
  _QWORD v7[4];
  char v8;

  if (*(_QWORD *)this)
    return (uint64_t *)(sub_20C629474((uint64_t *)this) + 24);
  v7[0] = "usdSkel/skeletonQuery.cpp";
  v7[1] = "GetSkeleton";
  v7[2] = 420;
  v7[3] = "const UsdSkelSkeleton &pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton() const";
  v8 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", v5) & 1) != 0)
    return (uint64_t *)(sub_20C629474((uint64_t *)this) + 24);
  v6 = atomic_load((unsigned __int8 *)&qword_25498BC58);
  if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_25498BC58))
    return qword_25498BC40;
  sub_20C65D670((uint64_t)v7);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)qword_25498BC40, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v7);
  qword_25498BC40[0] = (uint64_t)off_24C53F7D0;
  sub_20C35C2E0((uint64_t)v7);
  __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton, qword_25498BC40, &dword_20BDBC000);
  __cxa_guard_release(&qword_25498BC58);
  return qword_25498BC40;
}

void sub_20C65C274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  __cxa_guard_abort(&qword_25498BC58);
  _Unwind_Resume(a1);
}

__int128 *pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this, const char *a2, char *a3)
{
  char *v5;
  unsigned __int8 v6;
  _QWORD v7[4];
  char v8;

  if (*(_QWORD *)this)
    return (__int128 *)(sub_20C629474((uint64_t *)this) + 88);
  v7[0] = "usdSkel/skeletonQuery.cpp";
  v7[1] = "GetTopology";
  v7[2] = 438;
  v7[3] = "const UsdSkelTopology &pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology() const";
  v8 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", v5) & 1) != 0)
    return (__int128 *)(sub_20C629474((uint64_t *)this) + 88);
  v6 = atomic_load((unsigned __int8 *)&qword_25498BC88);
  if ((v6 & 1) != 0)
    return &xmmword_25498BC60;
  if (__cxa_guard_acquire(&qword_25498BC88))
  {
    qword_25498BC80 = 0;
    xmmword_25498BC60 = 0u;
    *(_OWORD *)algn_25498BC70 = 0u;
    __cxa_atexit((void (*)(void *))sub_20C65D6C0, &xmmword_25498BC60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BC88);
  }
  return &xmmword_25498BC60;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this, char *a2, char *a3, double a4)
{
  unint64_t v7;
  uint64_t v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  __int128 *v13;
  float *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t *Skeleton;
  const char *Text;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  _OWORD v35[2];
  float *v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (!a2)
  {
    *(_QWORD *)&v38 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v38 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v39 = 232;
    *((_QWORD *)&v39 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v40) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v38, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if (!*(_QWORD *)this)
  {
    *(_QWORD *)&v38 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v38 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v39 = 236;
    *((_QWORD *)&v39 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v40) = 0;
    v31 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "IsValid()", v31) & 1) == 0)
      return 0;
  }
  if (!*((_QWORD *)this + 1)
    || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)this + 16)))
  {
    v7 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology(this, a2, a3);
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((uint64_t)&v38, 1.0);
    sub_20BF56210(a2);
    *(_QWORD *)&v35[0] = &v38;
    sub_20BF60580((unint64_t *)a2, v7, (__int128 **)v35);
    return 1;
  }
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v9 = sub_20C629474((uint64_t *)this);
  if (!pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalInverseRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v9, v35))
  {
    *(_QWORD *)&v38 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v38 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v39 = 263;
    *((_QWORD *)&v39 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v40) = 0;
    Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(this, v10, v11);
    sub_20C35C4F8((uint64_t)&v32, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_20C348EEC((uint64_t)&v32, (int *)&v37);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v38, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing rest-relative transforms: the 'restTransforms' of the Skeleton are either unset, or do not have a matching number of joints.", v28, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_20BFD265C(&v37);
    if ((BYTE8(v33) & 7) != 0)
    {
      v29 = (unsigned int *)(*((_QWORD *)&v33 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    if (*((_QWORD *)&v32 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v32 + 1));
    goto LABEL_25;
  }
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  if (!sub_20C65B628((uint64_t *)this, (unint64_t *)&v32, 0, a4))
  {
LABEL_24:
    sub_20BF5618C((uint64_t)&v32);
LABEL_25:
    v25 = 1;
    goto LABEL_26;
  }
  v12 = v32;
  if ((_QWORD)v32 != *(_QWORD *)&v35[0])
  {
    *(_QWORD *)&v38 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v38 + 1) = "ComputeJointRestRelativeTransforms";
    *(_QWORD *)&v39 = 250;
    *((_QWORD *)&v39 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v40) = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "localXforms.size() == invRestXforms.size()", 0))
    {
      v12 = v32;
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_11:
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = &v38;
  sub_20BF60580((unint64_t *)a2, v12, &v37);
  v13 = v34;
  v14 = v36;
  sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v15, v16);
  v17 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v18 = (_OWORD *)*((_QWORD *)a2 + 4);
    do
    {
      v19 = *v13;
      v20 = v13[1];
      v21 = v13[3];
      v40 = v13[2];
      v41 = v21;
      v38 = v19;
      v39 = v20;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v38, v14);
      v22 = v38;
      v23 = v39;
      v24 = v41;
      v18[2] = v40;
      v18[3] = v24;
      *v18 = v22;
      v18[1] = v23;
      v18 += 4;
      v14 += 16;
      v13 += 4;
      --v17;
    }
    while (v17);
  }
  sub_20BF5618C((uint64_t)&v32);
  v25 = 0;
LABEL_26:
  sub_20BF5618C((uint64_t)v35);
  return (v25 & 1) == 0;
}

void sub_20C65C6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, uint64_t a2, double *a3, char *a4)
{
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t *Skeleton;
  unsigned int *v11;
  unsigned int v12;
  char **v13;
  char *v14;
  __int128 *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _OWORD v20[8];
  _OWORD v21[2];
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;

  v4 = a2;
  if (a2)
  {
    if (a3)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, (const char *)v21, a4, a3[5]))
      {
        v7 = sub_20C629474(a1);
        memset(v20, 0, sizeof(v20));
        Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v8, v9);
        sub_20C35C4F8((uint64_t)&v23, Skeleton + 1, (_DWORD *)Skeleton + 4);
        pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23, (uint64_t)v20);
        if ((BYTE8(v24) & 7) != 0)
        {
          v11 = (unsigned int *)(*((_QWORD *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        v13 = (char **)(v7 + 88);
        sub_20BFD265C(&v24);
        if (*((_QWORD *)&v23 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v23 + 1));
        v14 = *v13;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v31 = &v23;
        sub_20BF5F980((unint64_t *)v4, (unint64_t)v14, &v31);
        v15 = v22;
        v16 = *(char **)&v21[0];
        sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v4, v17, v18);
        v4 = pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(v13, v15, v16, *(_QWORD *)(v4 + 32), *(char **)v4, (double *)v20);
      }
      else
      {
        v4 = 0;
      }
      sub_20BF5618C((uint64_t)v21);
    }
    else
    {
      *(_QWORD *)&v23 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v23 + 1) = "ComputeJointWorldTransforms";
      *(_QWORD *)&v24 = 298;
      *((_QWORD *)&v24 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(V"
                              "tArray<Matrix4> *, UsdGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReser"
                              "ved__::GfMatrix4d]";
      LOBYTE(v25) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"'xfCache' is null.");
      return 0;
    }
  }
  else
  {
    *(_QWORD *)&v23 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v23 + 1) = "ComputeJointWorldTransforms";
    *(_QWORD *)&v24 = 293;
    *((_QWORD *)&v24 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(VtA"
                            "rray<Matrix4> *, UsdGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v25) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  }
  return v4;
}

void sub_20C65C90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20C35C2E0((uint64_t)&a31);
  sub_20BF5618C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *Skeleton;

  Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(this, a2, a3);
  return sub_20C35C4F8(a4, Skeleton + 1, (_DWORD *)Skeleton + 4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, uint64_t a2, double *a3, char *a4)
{
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t *Skeleton;
  unsigned int *v11;
  unsigned int v12;
  char **v13;
  char *v14;
  __int128 *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 *v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[4];
  _OWORD v30[2];
  __int128 *v31;

  v4 = a2;
  if (a2)
  {
    if (a3)
    {
      v31 = 0;
      memset(v30, 0, sizeof(v30));
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (char *)v30, a4, a3[5]))
      {
        v7 = sub_20C629474(a1);
        memset(v29, 0, sizeof(v29));
        Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v8, v9);
        sub_20C35C4F8((uint64_t)&v20, Skeleton + 1, (_DWORD *)Skeleton + 4);
        pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20, (uint64_t)&v25);
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v29, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v25);
        if ((v24 & 7) != 0)
        {
          v11 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
        v13 = (char **)(v7 + 88);
        sub_20BFD265C(&v22);
        if (v21)
          sub_20C35C614(v21);
        v14 = *v13;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v20 = &v25;
        sub_20BF60580((unint64_t *)v4, (unint64_t)v14, &v20);
        v15 = v31;
        v16 = *(char **)&v30[0];
        sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v4, v17, v18);
        v4 = pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(v13, v15, v16, *(_QWORD *)(v4 + 32), *(char **)v4, (float *)v29);
      }
      else
      {
        v4 = 0;
      }
      sub_20BF5618C((uint64_t)v30);
    }
    else
    {
      *(_QWORD *)&v25 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v25 + 1) = "ComputeJointWorldTransforms";
      *(_QWORD *)&v26 = 298;
      *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(V"
                              "tArray<Matrix4> *, UsdGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReser"
                              "ved__::GfMatrix4f]";
      LOBYTE(v27) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"'xfCache' is null.");
      return 0;
    }
  }
  else
  {
    *(_QWORD *)&v25 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v25 + 1) = "ComputeJointWorldTransforms";
    *(_QWORD *)&v26 = 293;
    *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(VtA"
                            "rray<Matrix4> *, UsdGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v27) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  }
  return v4;
}

void sub_20C65CB54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, char *a2, char *a3, double a4)
{
  uint64_t result;
  char *v8;
  char v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  if (a2)
  {
    if (*a1)
      return sub_20C65CC78(a1, a2, a4);
    v10 = "usdSkel/skeletonQuery.cpp";
    v11 = "ComputeSkinningTransforms";
    v12 = 337;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, Usd"
          "TimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v14 = 0;
    v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "IsValid()", v8);
    result = 0;
    if ((v9 & 1) != 0)
      return sub_20C65CC78(a1, a2, a4);
  }
  else
  {
    v10 = "usdSkel/skeletonQuery.cpp";
    v11 = "ComputeSkinningTransforms";
    v12 = 333;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, Usd"
          "TimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__20UsdSkelSkeletonQuery25ComputeSkinningTransformsINS_10GfMatrix4dEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeE(a1, a2, a3, a4);
}

uint64_t sub_20C65CC78(uint64_t *a1, char *a2, double a3)
{
  uint64_t *v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  __int128 *v8;
  double *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t *v25;
  const char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *Skeleton;
  const char *Text;
  char *v32;
  unsigned int *v33;
  unsigned int v34;
  _BYTE v36[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  _OWORD v43[2];
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = a1;
  if (!pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, a2, 0, a3))goto LABEL_21;
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v5 = sub_20C629474(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldInverseBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v5, v43) & 1) != 0)
  {
    if (*(_QWORD *)a2 == *(_QWORD *)&v43[0])
    {
      v8 = v44;
      v9 = (double *)*((_QWORD *)a2 + 4);
      sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, (uint64_t)v6, v7);
      v10 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v11 = (_OWORD *)*((_QWORD *)a2 + 4);
        do
        {
          v12 = *v8;
          v13 = v8[1];
          v14 = v8[2];
          v48 = v8[3];
          v46 = v13;
          v47 = v14;
          v45 = v12;
          v15 = v8[4];
          v16 = v8[5];
          v17 = v8[7];
          v51 = v8[6];
          v52 = v17;
          v49 = v15;
          v50 = v16;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v45, v9);
          v18 = v45;
          v19 = v46;
          v20 = v48;
          v11[2] = v47;
          v11[3] = v20;
          *v11 = v18;
          v11[1] = v19;
          v21 = v49;
          v22 = v50;
          v23 = v52;
          v11[6] = v51;
          v11[7] = v23;
          v11[4] = v21;
          v11[5] = v22;
          v11 += 8;
          v9 += 16;
          v8 += 8;
          --v10;
        }
        while (v10);
      }
      v24 = 0;
      LOBYTE(v4) = 1;
    }
    else
    {
      *(_QWORD *)&v45 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v45 + 1) = "_ComputeSkinningTransforms";
      *(_QWORD *)&v46 = 382;
      *((_QWORD *)&v46 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeSkinningTransforms(Vt"
                              "Array<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v47) = 0;
      Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v4, v6, v7);
      sub_20C35C4F8((uint64_t)v36, Skeleton + 1, (_DWORD *)Skeleton + 4);
      sub_20C348EEC((uint64_t)v36, &v41);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- Size of computed joints transforms [%zu] does not match the number of elements in the 'bindTransforms' attr [%zu].", v32, Text, *(_QWORD *)a2, *(_QWORD *)&v43[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
      sub_20BFD265C(&v41);
      if ((v40 & 7) != 0)
      {
        v33 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_20BFD265C(&v38);
      if (v37)
        sub_20C35C614(v37);
      v24 = 1;
    }
  }
  else
  {
    *(_QWORD *)&v45 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v45 + 1) = "_ComputeSkinningTransforms";
    *(_QWORD *)&v46 = 370;
    *((_QWORD *)&v46 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeSkinningTransforms(VtAr"
                            "ray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v47) = 0;
    v25 = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v4, v6, v7);
    sub_20C35C4F8((uint64_t)v36, v25 + 1, (_DWORD *)v25 + 4);
    sub_20C348EEC((uint64_t)v36, &v41);
    v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed fetching bind transforms. The 'bindTransforms' attribute may be unauthored, or may not match the number of joints.", v27, v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_20BFD265C(&v41);
    if ((v40 & 7) != 0)
    {
      v28 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    if (v37)
      sub_20C35C614(v37);
    LOBYTE(v4) = 0;
    v24 = 0;
  }
  sub_20BF5618C((uint64_t)v43);
  if ((v24 & 1) != 0)
LABEL_21:
    LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_20C65CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, char *a2, char *a3, double a4)
{
  uint64_t result;
  char *v8;
  char v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  if (a2)
  {
    if (*a1)
      return sub_20C65D074(a1, a2, a4);
    v10 = "usdSkel/skeletonQuery.cpp";
    v11 = "ComputeSkinningTransforms";
    v12 = 337;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, Usd"
          "TimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v14 = 0;
    v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "IsValid()", v8);
    result = 0;
    if ((v9 & 1) != 0)
      return sub_20C65D074(a1, a2, a4);
  }
  else
  {
    v10 = "usdSkel/skeletonQuery.cpp";
    v11 = "ComputeSkinningTransforms";
    v12 = 333;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, Usd"
          "TimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

uint64_t sub_20C65D074(uint64_t *a1, char *a2, double a3)
{
  uint64_t *v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  __int128 *v8;
  float *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  const char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t *Skeleton;
  const char *Text;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  _BYTE v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  _OWORD v37[2];
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = a1;
  if (!pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, a2, 0, a3))goto LABEL_21;
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  v5 = sub_20C629474(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldInverseBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v5, v37) & 1) != 0)
  {
    if (*(_QWORD *)a2 == *(_QWORD *)&v37[0])
    {
      v8 = v38;
      v9 = (float *)*((_QWORD *)a2 + 4);
      sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, (uint64_t)v6, v7);
      v10 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v11 = (_OWORD *)*((_QWORD *)a2 + 4);
        do
        {
          v12 = *v8;
          v13 = v8[1];
          v14 = v8[2];
          v42 = v8[3];
          v40 = v13;
          v41 = v14;
          v39 = v12;
          pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v39, v9);
          v15 = v39;
          v16 = v40;
          v17 = v42;
          v11[2] = v41;
          v11[3] = v17;
          *v11 = v15;
          v11[1] = v16;
          v11 += 4;
          v9 += 16;
          v8 += 4;
          --v10;
        }
        while (v10);
      }
      v18 = 0;
      LOBYTE(v4) = 1;
    }
    else
    {
      *(_QWORD *)&v39 = "usdSkel/skeletonQuery.cpp";
      *((_QWORD *)&v39 + 1) = "_ComputeSkinningTransforms";
      *(_QWORD *)&v40 = 382;
      *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeSkinningTransforms(Vt"
                              "Array<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      LOBYTE(v41) = 0;
      Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v4, v6, v7);
      sub_20C35C4F8((uint64_t)v30, Skeleton + 1, (_DWORD *)Skeleton + 4);
      sub_20C348EEC((uint64_t)v30, &v35);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"%s -- Size of computed joints transforms [%zu] does not match the number of elements in the 'bindTransforms' attr [%zu].", v26, Text, *(_QWORD *)a2, *(_QWORD *)&v37[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_20BFD265C(&v35);
      if ((v34 & 7) != 0)
      {
        v27 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_20BFD265C(&v32);
      if (v31)
        sub_20C35C614(v31);
      v18 = 1;
    }
  }
  else
  {
    *(_QWORD *)&v39 = "usdSkel/skeletonQuery.cpp";
    *((_QWORD *)&v39 + 1) = "_ComputeSkinningTransforms";
    *(_QWORD *)&v40 = 370;
    *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeSkinningTransforms(VtAr"
                            "ray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v41) = 0;
    v19 = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v4, v6, v7);
    sub_20C35C4F8((uint64_t)v30, v19 + 1, (_DWORD *)v19 + 4);
    sub_20C348EEC((uint64_t)v30, &v35);
    v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed fetching bind transforms. The 'bindTransforms' attribute may be unauthored, or may not match the number of joints.", v21, v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    if ((v34 & 7) != 0)
    {
      v22 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
    if (v31)
      sub_20C35C614(v31);
    LOBYTE(v4) = 0;
    v18 = 0;
  }
  sub_20BF5618C((uint64_t)v37);
  if ((v18 & 1) != 0)
LABEL_21:
    LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_20C65D308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v5;
  uint64_t result;
  char *v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (*a1)
    goto LABEL_2;
  v9[0] = "usdSkel/skeletonQuery.cpp";
  v9[1] = "GetJointWorldBindTransforms";
  v9[2] = 394;
  v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms(VtArray<Matrix4> *) c"
          "onst [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v10 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  result = 0;
  if ((v8 & 1) != 0)
  {
LABEL_2:
    v5 = sub_20C629474(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v5, (uint64_t)a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, char *a2, char *a3)
{
  uint64_t v5;
  uint64_t result;
  char *v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (*a1)
    goto LABEL_2;
  v9[0] = "usdSkel/skeletonQuery.cpp";
  v9[1] = "GetJointWorldBindTransforms";
  v9[2] = 394;
  v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms(VtArray<Matrix4> *) c"
          "onst [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
  v10 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  result = 0;
  if ((v8 & 1) != 0)
  {
LABEL_2:
    v5 = sub_20C629474(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v5, (unint64_t *)a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::UsdSkelSkeletonQuery(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a3)
{
  __int128 *v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  *(_QWORD *)a1 = *a2;
  sub_20BF1DD04((uint64_t *)a1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  sub_20BF1DD04((uint64_t *)(a1 + 8));
  v6 = (__int128 *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 16));
  if (*a2 && *(_QWORD *)a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder(a3, v7, v8, (uint64_t)v12);
    v9 = sub_20C629474(a2);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)&v13, (uint64_t)v12, v9 + 48);
    *v6 = v13;
    if (v6 != &v13)
    {
      sub_20BF5618C(a1 + 32);
      v10 = v15;
      *(_OWORD *)(a1 + 32) = v14;
      *(_OWORD *)(a1 + 48) = v10;
      v14 = 0u;
      v15 = 0u;
      *(_QWORD *)(a1 + 64) = v16;
      v16 = 0;
    }
    *(_DWORD *)(a1 + 72) = v17;
    sub_20BF5618C((uint64_t)&v14);
    sub_20C00918C(v12);
  }
  return a1;
}

void sub_20C65D590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  sub_20BF5618C(v4);
  sub_20C00918C((uint64_t *)va);
  sub_20BF5618C((uint64_t)(v2 + 4));
  sub_20C626160(v3);
  sub_20C62618C(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::HasBindPose(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)sub_20C629474((uint64_t *)this);
  return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasBindPose(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::HasRestPose(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)sub_20C629474((uint64_t *)this);
  return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasRestPose(v1);
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  sub_20C65D970((uint64_t)&v3, (uint64_t *)this, (pxrInternal__aapl__pxrReserved__ *)((char *)this + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_20C65D670(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return (uint64_t)this + 8;
}

uint64_t sub_20C65D6C0(uint64_t a1)
{
  sub_20BF5618C(a1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetMapper(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return (uint64_t)this + 16;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder@<D0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[4];
  char v15;

  if (*(_QWORD *)this
    || (v14[0] = "usdSkel/skeletonQuery.cpp",
        v14[1] = "GetJointOrder",
        v14[2] = 456,
        v14[3] = "VtTokenArray pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder() const",
        v15 = 0,
        v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "IsValid()", v12) & 1) != 0))
  {
    v6 = sub_20C629474((uint64_t *)this);
    v7 = *(_OWORD *)(v6 + 48);
    v8 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    v9 = *(_QWORD *)(v6 + 80);
    *(_QWORD *)(a4 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 - 16);
      if (*(_QWORD *)(a4 + 24))
        v10 = *(unint64_t **)(a4 + 24);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)&v7 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return *(double *)&v7;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetDescription(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *Skeleton;
  const char *Text;
  const char *v7;
  const char *v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE v21[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;

  if (*(_QWORD *)this)
  {
    Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(this, a2, a3);
    sub_20C35C4F8((uint64_t)v21, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_20C348EEC((uint64_t)v21, &v26);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)this + 8), (uint64_t)v14);
    sub_20C348EEC((uint64_t)v14, &v19);
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelSkeletonQuery (skel = <%s>, anim = <%s>)", v8, v9, Text, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if ((v18 & 7) != 0)
    {
      v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_20BFD265C(&v16);
    if (v15)
      sub_20C35C614(v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_20BFD265C(&v26);
    if ((v25 & 7) != 0)
    {
      v12 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    if (v22)
      sub_20C35C614(v22);
  }
  else
  {
    sub_20BDDC0E4(a4, "invalid UsdSkelSkeletonQuery");
  }
}

void sub_20C65D928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BFD1A18((_DWORD *)(v3 - 40));
  sub_20C35C2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_20C65D970(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C65D9A4(a1, a3);
}

unint64_t sub_20C65D9A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a2)
{
  unint64_t result;

  result = sub_20C65D9F0(a2);
  if (*(_BYTE *)(a1 + 8))
    result += (*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

unint64_t sub_20C65D9F0(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim(a1, (uint64_t)&v5);
  v10 = 0;
  v11 = 0;
  sub_20C3B0C60((uint64_t)&v10, &v5, &v6, &v7, &v9);
  v1 = v10;
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return bswap64(0x9E3779B97F4A7C55 * v1);
}

void sub_20C65DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  tbb::task_group_context **v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  __int128 v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  unint64_t v37[4];
  uint64_t v38;
  _QWORD v39[4];
  uint64_t v40;

  v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    v40 = 0;
    memset(v39, 0, sizeof(v39));
    v38 = 0;
    memset(v37, 0, sizeof(v37));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v39, v37))
    {
      v7 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      v35 = v7;
      v8 = *(char **)(a2 + 32);
      v36 = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 - 16);
        if (*((_QWORD *)&v35 + 1))
          v9 = (unint64_t *)*((_QWORD *)&v35 + 1);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(uint64_t **)(a1 + 272);
      if (v11
        && (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v11, (__int128 *)a2, (uint64_t)&v34, 1) & 1) == 0)
      {
        v3 = 0;
      }
      else
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v6, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v26);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v25);
        v13 = v36;
        v14 = v34;
        v15 = v40;
        v16 = v39[0];
        v17 = v38;
        v18 = v37[0];
        v19 = *(_DWORD *)(a1 + 32);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v20, v21);
        v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(&v25, (uint64_t)&v26, v13, v14, v15, v16, v17, v18, v19, v3[4], (unint64_t)*v3, 0);
        if ((v25 & 7) != 0)
        {
          v22 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
      }
      sub_20BF5618C((uint64_t)&v34);
    }
    else
    {
      v3 = 0;
    }
    sub_20BF5618C((uint64_t)v37);
    sub_20BF5618C((uint64_t)v39);
  }
  else
  {
    *(_QWORD *)&v26 = "usdSkel/skinningQuery.cpp";
    *((_QWORD *)&v26 + 1) = "ComputeSkinnedPoints";
    *(_QWORD *)&v27 = 350;
    *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtAr"
                            "ray<Matrix4> &, VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"'points' pointer is null.");
  }
  return v3;
}

void sub_20C65DCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20BF5618C((uint64_t)&a31);
  sub_20BF5618C(v31 - 192);
  sub_20BF5618C(v31 - 144);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, unint64_t *a4)
{
  uint64_t result;
  char *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  result = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(a1, a3, a4);
  if ((_DWORD)result)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10)
      v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v10 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      v11 = *(_QWORD *)a3;
      v12 = *(int *)(a1 + 32);
      if (*(_QWORD *)a3 != v12 * a2)
      {
        v14 = "usdSkel/skinningQuery.cpp";
        v15 = "ComputeVaryingJointInfluences";
        v16 = 332;
        v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(size_t, VtIntAr"
              "ray *, VtFloatArray *, UsdTimeCode) const";
        v18 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Unexpected size of jointIndices and jointWeights arrays [%zu]: varying influences should be sized to numPoints [%zu] * numInfluencesPerComponent [%d].", v9, v11, a2, v12);
        return 0;
      }
      return 1;
    }
    result = pxrInternal__aapl__pxrReserved__::UsdSkelExpandConstantInfluencesToVarying((unint64_t *)a3, a2);
    if ((_DWORD)result)
    {
      result = pxrInternal__aapl__pxrReserved__::UsdSkelExpandConstantInfluencesToVarying(a4, a2);
      if ((_DWORD)result)
      {
        if (*(_QWORD *)a3 == *a4)
          return 1;
        v14 = "usdSkel/skinningQuery.cpp";
        v15 = "ComputeVaryingJointInfluences";
        v16 = 326;
        v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(size_t, VtIntAr"
              "ray *, VtFloatArray *, UsdTimeCode) const";
        v18 = 0;
        v13 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "indices->size() == weights->size()", 0);
        result = 0;
        if ((v13 & 1) != 0)
          return 1;
      }
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X8>)
{
  uint64_t v4;
  char v5;

  v4 = a1 + 176;
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)(a1 + 176), a2)|| (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v4, a3), (v5 & 1) == 0))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a3, 1.0);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X8>)
{
  char *v4;
  char v5;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v6;

  *(_QWORD *)a3 = 0;
  v4 = (char *)this + 144;
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 144), a2)|| (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v4, a3), (v5 & 1) == 0))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v6)
      v6 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    sub_20BF32220(a3, (_QWORD *)v6 + 3);
  }
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  tbb::task_group_context **v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  __int128 v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v25[4];
  char v26;
  _OWORD v27[4];
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v33, (unint64_t *)v31))
    {
      v7 = *(_OWORD *)(a2 + 16);
      v28 = *(_OWORD *)a2;
      v29 = v7;
      v8 = *(char **)(a2 + 32);
      v30 = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 - 16);
        if (*((_QWORD *)&v29 + 1))
          v9 = (unint64_t *)*((_QWORD *)&v29 + 1);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(uint64_t **)(a1 + 272);
      if (v11
        && (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v11, (__int128 *)a2, (uint64_t)&v28, 1) & 1) == 0)
      {
        v3 = 0;
      }
      else
      {
        memset(v27, 0, sizeof(v27));
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v6, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v25);
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v27, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v25);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v25);
        v13 = v30;
        v14 = v28;
        v15 = v34;
        v16 = *(_QWORD *)&v33[0];
        v17 = v32;
        v18 = *(_QWORD *)&v31[0];
        v19 = *(_DWORD *)(a1 + 32);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v20, v21);
        v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(v25, (uint64_t)v27, v13, v14, v15, v16, v17, v18, v19, v3[4], (unint64_t)*v3, 0);
        if ((v25[0] & 7) != 0)
        {
          v22 = (unsigned int *)(v25[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
      }
      sub_20BF5618C((uint64_t)&v28);
    }
    else
    {
      v3 = 0;
    }
    sub_20BF5618C((uint64_t)v31);
    sub_20BF5618C((uint64_t)v33);
  }
  else
  {
    v25[0] = "usdSkel/skinningQuery.cpp";
    v25[1] = "ComputeSkinnedPoints";
    v25[2] = 350;
    v25[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtArray<Matrix4> &,"
             " VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"'points' pointer is null.");
  }
  return v3;
}

void sub_20C65E174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20BF5618C((uint64_t)&a37);
  sub_20BF5618C(v37 - 192);
  sub_20BF5618C(v37 - 144);
  _Unwind_Resume(a1);
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  tbb::task_group_context **v3;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  double v34[9];
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43[9];
  _BYTE v44[64];
  uint64_t v45;
  _QWORD v46[4];
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51[4];
  uint64_t v52;
  _QWORD v53[4];
  uint64_t v54;

  v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    v54 = 0;
    memset(v53, 0, sizeof(v53));
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v53, v51))
    {
      v6 = *(_OWORD *)(a2 + 16);
      v48 = *(_OWORD *)a2;
      v49 = v6;
      v7 = *(_QWORD *)(a2 + 32);
      v50 = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 - 16);
        if (*((_QWORD *)&v49 + 1))
          v8 = (unint64_t *)*((_QWORD *)&v49 + 1);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(uint64_t **)(a1 + 272);
      if (v10
        && (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v10, (__int128 *)a2, (uint64_t)&v48, 1) & 1) == 0)
      {
        v3 = 0;
      }
      else
      {
        sub_20C016D64((uint64_t)v46, v48);
        sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v11, v12);
        v15 = v46[0];
        if (v46[0])
        {
          v16 = 0;
          v17 = v47;
          do
          {
            sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48, (uint64_t)v13, v14);
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix((__n128 *)(v50 + v16), (uint64_t)v43);
            pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v43, 0, 0.0, (uint64_t)v44);
            pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v44, (uint64_t)&v35);
            *(__n128 *)v17 = v35;
            v18 = v36;
            v19 = v37;
            v20 = v38;
            *((_QWORD *)v17 + 8) = v39;
            *((_OWORD *)v17 + 2) = v19;
            *((_OWORD *)v17 + 3) = v20;
            *((_OWORD *)v17 + 1) = v18;
            v16 += 128;
            v17 += 72;
            --v15;
          }
          while (v15);
        }
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v13, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v35);
        v45 = 0;
        memset(v44, 0, sizeof(v44));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(&v35, (uint64_t)v34);
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v34, 0, 0.0, (uint64_t)v43);
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v43, (uint64_t)v44);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v21, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v43);
        v22 = v47;
        v23 = v46[0];
        v24 = v54;
        v25 = v53[0];
        v26 = v52;
        v27 = v51[0];
        v28 = *(_DWORD *)(a1 + 32);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v29, v30);
        v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(v43, (uint64_t)v44, v22, v23, v24, v25, v26, v27, v28, v3[4], (unint64_t)*v3, 0);
        if ((LOBYTE(v43[0]) & 7) != 0)
        {
          v31 = (unsigned int *)(*(_QWORD *)&v43[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stlxr(v32 - 2, v31));
        }
        sub_20BF5618C((uint64_t)v46);
      }
      sub_20BF5618C((uint64_t)&v48);
    }
    else
    {
      v3 = 0;
    }
    sub_20BF5618C((uint64_t)v51);
    sub_20BF5618C((uint64_t)v53);
  }
  else
  {
    v35.n128_u64[0] = (unint64_t)"usdSkel/skinningQuery.cpp";
    v35.n128_u64[1] = (unint64_t)"ComputeSkinnedNormals";
    *(_QWORD *)&v36 = 416;
    *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals(const VtA"
                            "rray<Matrix4> &, VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserve"
                            "d__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"'normals' pointer is null.");
  }
  return v3;
}

void sub_20C65E4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  sub_20BF5618C((uint64_t)&a58);
  sub_20BF5618C(v58 - 240);
  sub_20BF5618C(v58 - 192);
  sub_20BF5618C(v58 - 144);
  _Unwind_Resume(a1);
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  tbb::task_group_context **v3;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  unsigned int *v36;
  unsigned int v37;
  float v39[9];
  __int128 v40;
  __int128 v41;
  int v42;
  float v43[16];
  float v44[10];
  _QWORD v45[4];
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50[4];
  uint64_t v51;
  _QWORD v52[4];
  uint64_t v53;

  v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    v53 = 0;
    memset(v52, 0, sizeof(v52));
    v51 = 0;
    memset(v50, 0, sizeof(v50));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v52, v50))
    {
      v6 = *(_OWORD *)(a2 + 16);
      v47 = *(_OWORD *)a2;
      v48 = v6;
      v7 = *(_QWORD *)(a2 + 32);
      v49 = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 - 16);
        if (*((_QWORD *)&v48 + 1))
          v8 = (unint64_t *)*((_QWORD *)&v48 + 1);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(uint64_t **)(a1 + 272);
      if (v10
        && (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v10, (__int128 *)a2, (uint64_t)&v47, 1) & 1) == 0)
      {
        v3 = 0;
      }
      else
      {
        sub_20C65E898((uint64_t)v45, v47);
        sub_20C6610A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v45, v11, v12);
        v15 = v45[0];
        if (v45[0])
        {
          v16 = 0;
          v17 = v46;
          do
          {
            sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v47, (uint64_t)v13, v14);
            pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationMatrix((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)(v49 + v16), (uint64_t)v44);
            pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetInverse(v44, 0, 0.0, v43);
            pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v43, (uint64_t)&v40);
            v18 = v40;
            v19 = v41;
            *((_DWORD *)v17 + 8) = v42;
            *(_OWORD *)v17 = v18;
            *((_OWORD *)v17 + 1) = v19;
            v16 += 64;
            v17 += 36;
            --v15;
          }
          while (v15);
        }
        memset(v43, 0, sizeof(v43));
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v13, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v40);
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v43, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v40);
        v42 = 0;
        v40 = 0u;
        v41 = 0u;
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationMatrix((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v43, (uint64_t)v39);
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetInverse(v39, 0, 0.0, v44);
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v44, (uint64_t)&v40);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v20, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v44);
        v21 = v46;
        v22 = v45[0];
        v23 = v53;
        v24 = v52[0];
        v25 = v51;
        v26 = v50[0];
        v27 = *(_DWORD *)(a1 + 32);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v28, v29);
        v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(v44, (uint64_t)&v40, v21, v22, v23, v24, v25, v26, v30, v31, v32, v33, v34, v35, v27, v3[4], (unint64_t)*v3, 0);
        if ((LOBYTE(v44[0]) & 7) != 0)
        {
          v36 = (unsigned int *)(*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stlxr(v37 - 2, v36));
        }
        sub_20BF5618C((uint64_t)v45);
      }
      sub_20BF5618C((uint64_t)&v47);
    }
    else
    {
      v3 = 0;
    }
    sub_20BF5618C((uint64_t)v50);
    sub_20BF5618C((uint64_t)v52);
  }
  else
  {
    *(_QWORD *)&v40 = "usdSkel/skinningQuery.cpp";
    *((_QWORD *)&v40 + 1) = "ComputeSkinnedNormals";
    *(_QWORD *)&v41 = 416;
    *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals(const VtA"
                            "rray<Matrix4> &, VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserve"
                            "d__::GfMatrix4f]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'normals' pointer is null.");
  }
  return v3;
}

void sub_20C65E804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  sub_20BF5618C((uint64_t)&a46);
  sub_20BF5618C(v46 - 240);
  sub_20BF5618C(v46 - 192);
  sub_20BF5618C(v46 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20C65E898(uint64_t a1, unint64_t a2)
{
  _OWORD v5[2];
  int v6;
  __int128 *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v7 = v5;
  sub_20C660DDC((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20C65E8F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a1, uint64_t a2, _BOOL8 a3)
{
  _BOOL8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  __int128 v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  float64x2_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  unint64_t v29[4];
  float *v30;
  unint64_t v31[4];
  unsigned int *v32;

  v3 = a3;
  if (a3)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6)
      v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*((_QWORD *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      v32 = 0;
      memset(v31, 0, sizeof(v31));
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v31, v29))
      {
        v8 = *(_OWORD *)(a2 + 16);
        v26 = *(_OWORD *)a2;
        v27 = v8;
        v9 = *(char **)(a2 + 32);
        v28 = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 - 16);
          if (*((_QWORD *)&v27 + 1))
            v10 = (unint64_t *)*((_QWORD *)&v27 + 1);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = (uint64_t *)*((_QWORD *)a1 + 34);
        if (v12 && (sub_20C62CB24(v12, (__int128 *)a2, (uint64_t)&v26, 1, 0) & 1) == 0)
        {
          v3 = 0;
        }
        else
        {
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform((uint64_t)a1, v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v18);
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod(a1, v13, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v17);
          v3 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(&v17, &v18, v28, v26, v32, v31[0], v30, v29[0], v3);
          if ((v17 & 7) != 0)
          {
            v14 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stlxr(v15 - 2, v14));
          }
        }
        sub_20BF5618C((uint64_t)&v26);
      }
      else
      {
        v3 = 0;
      }
      sub_20BF5618C((uint64_t)v29);
      sub_20BF5618C((uint64_t)v31);
    }
    else
    {
      *(_QWORD *)&v18.f64[0] = "usdSkel/skinningQuery.cpp";
      *(_QWORD *)&v18.f64[1] = "ComputeSkinnedTransform";
      *(_QWORD *)&v19 = 485;
      *((_QWORD *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const"
                              " VtArray<Matrix4> &, Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserv"
                              "ed__::GfMatrix4d]";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to skin a transform, but joint influences are not constant.");
      return 0;
    }
  }
  else
  {
    *(_QWORD *)&v18.f64[0] = "usdSkel/skinningQuery.cpp";
    *(_QWORD *)&v18.f64[1] = "ComputeSkinnedTransform";
    *(_QWORD *)&v19 = 479;
    *((_QWORD *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const V"
                            "tArray<Matrix4> &, Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v20) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' pointer is null.");
  }
  return v3;
}

void sub_20C65EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20BF5618C((uint64_t)&a27);
  sub_20BF5618C(v27 - 160);
  sub_20BF5618C(v27 - 112);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::IsRigidlyDeformed(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  return (*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v2 + 17) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unint64_t *a3)
{
  const char *v6;
  char *v7;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v8;
  uint64_t result;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  int v19;
  _QWORD v20[4];
  char v21;
  _QWORD v22[4];
  char v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, a2) & 1) == 0)
  {
    v24 = "usdSkel/skinningQuery.cpp";
    v25 = "ComputeJointInfluences";
    v26 = 268;
    v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatArray"
          " *, UsdTimeCode) const";
    v28 = 0;
    v17 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skinning query", v6, v7);
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "IsValid()", v17))
      return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v6) & 1) == 0)
  {
    v22[0] = "usdSkel/skinningQuery.cpp";
    v22[1] = "ComputeJointInfluences";
    v22[2] = 269;
    v22[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatAr"
             "ray *, UsdTimeCode) const";
    v23 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v22, "_jointIndicesPrimvar", 0))return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), v8) & 1) != 0|| (v20[0] = "usdSkel/skinningQuery.cpp", v20[1] = "ComputeJointInfluences", v20[2] = 270, v20[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatArray *, UsdTimeCode) const", v21 = 0, v18 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "_jointWeightsPrimvar", 0), result = 0, (v18 & 1) != 0))
  {
    result = sub_20C660738((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), (unint64_t *)a2);
    if ((_DWORD)result)
    {
      result = sub_20C6609B8((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), a3);
      if ((_DWORD)result)
      {
        v11 = *(_QWORD *)a2;
        v12 = *a3;
        if (*(_QWORD *)a2 != *a3)
        {
          v24 = "usdSkel/skinningQuery.cpp";
          v25 = "ComputeJointInfluences";
          v26 = 279;
          v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloa"
                "tArray *, UsdTimeCode) const";
          v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu].", v10, v11, v12);
          return 0;
        }
        v13 = *(unsigned int *)(a1 + 32);
        if ((int)v13 > 0)
        {
LABEL_8:
          if (v11 % (int)v13)
          {
            v24 = "usdSkel/skinningQuery.cpp";
            v25 = "ComputeJointInfluences";
            v26 = 291;
            v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFl"
                  "oatArray *, UsdTimeCode) const";
            v28 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"unexpected size of jointIndices and jointWeights arrays [%zu]: size must be a multiple of the number of influences per component (%d).", v10, v11, v13);
          }
          else
          {
            v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v14)
              v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if ((*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v14 + 17) & 0xFFFFFFFFFFFFFFF8))
              return 1;
            v15 = *(_QWORD *)a2;
            v16 = *(int *)(a1 + 32);
            if (*(_QWORD *)a2 == v16)
              return 1;
            v24 = "usdSkel/skinningQuery.cpp";
            v25 = "ComputeJointInfluences";
            v26 = 302;
            v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFl"
                  "oatArray *, UsdTimeCode) const";
            v28 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Unexpected size of jointIndices and jointWeights arrays [%zu]: joint influences are defined with 'constant' interpolation, so the array size must be equal to the element size (%d).", v10, v15, v16);
          }
          return 0;
        }
        v24 = "usdSkel/skinningQuery.cpp";
        v25 = "ComputeJointInfluences";
        v26 = 283;
        v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatA"
              "rray *, UsdTimeCode) const";
        v28 = 0;
        v19 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "_numInfluencesPerComponent > 0", 0);
        result = 0;
        if (v19)
        {
          v11 = *(_QWORD *)a2;
          v13 = *(unsigned int *)(a1 + 32);
          goto LABEL_8;
        }
      }
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a1, uint64_t a2, _BOOL8 a3)
{
  _BOOL8 v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  __int128 v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int8x16_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  char *v26;
  _OWORD v27[2];
  float *v28;
  _OWORD v29[2];
  unsigned int *v30;

  v3 = a3;
  if (a3)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6)
      v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*((_QWORD *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      v28 = 0;
      memset(v27, 0, sizeof(v27));
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v29, (unint64_t *)v27))
      {
        v8 = *(_OWORD *)(a2 + 16);
        v24 = *(_OWORD *)a2;
        v25 = v8;
        v9 = *(char **)(a2 + 32);
        v26 = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 - 16);
          if (*((_QWORD *)&v25 + 1))
            v10 = (unint64_t *)*((_QWORD *)&v25 + 1);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = (uint64_t *)*((_QWORD *)a1 + 34);
        if (v12 && (sub_20C62CDF4(v12, (__int128 *)a2, (uint64_t)&v24, 1, 0) & 1) == 0)
        {
          v3 = 0;
        }
        else
        {
          memset(v23, 0, sizeof(v23));
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform((uint64_t)a1, v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v18);
          pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v23, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v18);
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod(a1, v13, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v18);
          v3 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(&v18, (uint64_t)v23, v26, v24, v30, *(unint64_t *)&v29[0], v28, *(uint64_t *)&v27[0], v14, v3);
          if ((v18 & 7) != 0)
          {
            v15 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
        }
        sub_20BF5618C((uint64_t)&v24);
      }
      else
      {
        v3 = 0;
      }
      sub_20BF5618C((uint64_t)v27);
      sub_20BF5618C((uint64_t)v29);
    }
    else
    {
      v18 = (unint64_t)"usdSkel/skinningQuery.cpp";
      v19 = "ComputeSkinnedTransform";
      v20 = 485;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const VtArray<Matrix4> "
            "&, Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to skin a transform, but joint influences are not constant.");
      return 0;
    }
  }
  else
  {
    v18 = (unint64_t)"usdSkel/skinningQuery.cpp";
    v19 = "ComputeSkinnedTransform";
    v20 = 479;
    v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const VtArray<Matrix4> &,"
          " Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' pointer is null.");
  }
  return v3;
}

void sub_20C65F12C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 192);
  sub_20BF5618C(v1 - 144);
  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeExtentsPadding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *a3)
{
  uint64_t v3;
  float v4;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  float32x2_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  float32x2_t v18;
  float v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v26;
  float v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  double v31;
  char v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  double v36;
  _BYTE v37[24];
  _OWORD v38[2];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v3 = *((_QWORD *)a3 + 1);
  v4 = 0.0;
  if (v3
    && (*(_BYTE *)(v3 + 57) & 8) == 0
    && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *))(*(_QWORD *)a3 + 32))(a3))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr(a3, (uint64_t)&v28);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v28, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v38);
    if (*(_QWORD *)&v38[0] == 2)
      v9 = v8;
    else
      v9 = 0;
    if ((LOBYTE(v30.f64[0]) & 7) != 0)
    {
      v10 = (unsigned int *)(*(_QWORD *)&v30.f64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
    sub_20BFD265C(&v29);
    if (*(_QWORD *)&v28.f64[1])
      sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v28.f64[1]);
    if (v9)
    {
      *(_OWORD *)v37 = xmmword_20CA9EF60;
      *(_QWORD *)&v37[16] = 0x80000000800000;
      if (pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a2[4], *a2, (uint64_t)v37, 0, (int32x2_t)0x80000000000000))
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38, v12, v13);
        v14 = *(float32x2_t *)v39;
        v15 = *(float *)(v39 + 8);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38, v16, v17);
        v18 = *(float32x2_t *)(v39 + 12);
        v19 = *(float *)(v39 + 20);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v20, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v26);
        v28 = vcvtq_f64_f32(v14);
        v29 = v15;
        v30 = vcvtq_f64_f32(v18);
        v31 = v19;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v28, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v26);
        v32 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v28, (uint64_t)&v33);
        v21 = 0;
        v22 = v34;
        *(float32x2_t *)&v28.f64[0] = vsub_f32(*(float32x2_t *)v37, vcvt_f32_f64(v33));
        *(float *)&v28.f64[1] = *(float *)&v37[8] - v22;
        v23 = v36;
        v26 = vsub_f32(vcvt_f32_f64(v35), *(float32x2_t *)&v37[12]);
        v27 = v23 - *(float *)&v37[20];
        v4 = 0.0;
        do
        {
          v24 = *(float *)((char *)v28.f64 + v21 * 4);
          if (v4 >= v24)
            v24 = v4;
          if (v24 >= v26.f32[v21])
            v4 = v24;
          else
            v4 = v26.f32[v21];
          ++v21;
        }
        while (v21 != 3);
      }
      else
      {
        v4 = 0.0;
      }
    }
  }
  sub_20BF5618C((uint64_t)v38);
  return v4;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__20UsdSkelSkinningQuery21ComputeExtentsPaddingINS_10GfMatrix4dEEEfRKNS_7VtArrayIT_EERKNS_16UsdGeomBoundableE(a1, a2, a3);
}

void sub_20C65F3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 128);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeExtentsPadding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *a3)
{
  uint64_t v3;
  float v4;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  float32x2_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  float32x2_t v18;
  float v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v26;
  float v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  double v31;
  char v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  double v36;
  _BYTE v37[24];
  _OWORD v38[2];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v3 = *((_QWORD *)a3 + 1);
  v4 = 0.0;
  if (v3
    && (*(_BYTE *)(v3 + 57) & 8) == 0
    && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *))(*(_QWORD *)a3 + 32))(a3))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr(a3, (uint64_t)&v28);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v28, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v38);
    if (*(_QWORD *)&v38[0] == 2)
      v9 = v8;
    else
      v9 = 0;
    if ((LOBYTE(v30.f64[0]) & 7) != 0)
    {
      v10 = (unsigned int *)(*(_QWORD *)&v30.f64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
    sub_20BFD265C(&v29);
    if (*(_QWORD *)&v28.f64[1])
      sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v28.f64[1]);
    if (v9)
    {
      *(_OWORD *)v37 = xmmword_20CA9EF60;
      *(_QWORD *)&v37[16] = 0x80000000800000;
      if (pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a2[4], *a2, (uint64_t)v37, 0, (int32x2_t)0x80000000000000))
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38, v12, v13);
        v14 = *(float32x2_t *)v39;
        v15 = *(float *)(v39 + 8);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38, v16, v17);
        v18 = *(float32x2_t *)(v39 + 12);
        v19 = *(float *)(v39 + 20);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v20, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v26);
        v28 = vcvtq_f64_f32(v14);
        v29 = v15;
        v30 = vcvtq_f64_f32(v18);
        v31 = v19;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v28, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v26);
        v32 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v28, (uint64_t)&v33);
        v21 = 0;
        v22 = v34;
        *(float32x2_t *)&v28.f64[0] = vsub_f32(*(float32x2_t *)v37, vcvt_f32_f64(v33));
        *(float *)&v28.f64[1] = *(float *)&v37[8] - v22;
        v23 = v36;
        v26 = vsub_f32(vcvt_f32_f64(v35), *(float32x2_t *)&v37[12]);
        v27 = v23 - *(float *)&v37[20];
        v4 = 0.0;
        do
        {
          v24 = *(float *)((char *)v28.f64 + v21 * 4);
          if (v4 >= v24)
            v24 = v4;
          if (v24 >= v26.f32[v21])
            v4 = v24;
          else
            v4 = v26.f32[v21];
          ++v21;
        }
        while (v21 != 3);
      }
      else
      {
        v4 = 0.0;
      }
    }
  }
  sub_20BF5618C((uint64_t)v38);
  return v4;
}

void sub_20C65F644(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 128);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 1;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 3;
  *((_QWORD *)this + 7) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 17);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 24) = 3;
  *((_QWORD *)this + 13) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 29);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 36) = 3;
  *((_QWORD *)this + 19) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 41);
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 3;
  *((_QWORD *)this + 23) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 49);
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 3;
  *((_QWORD *)this + 27) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 57);
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 4;
  *((_QWORD *)this + 31) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 65);
  *((_BYTE *)this + 344) = 0;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 392) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 289) = 0u;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a5, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a6, uint64_t a7, pxrInternal__aapl__pxrReserved__::UsdProperty *a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v16;
  unsigned int v17;
  int v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;

  v21 = 3;
  v22 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a1, a2, a3, a4, a5, a6, (uint64_t)&v21, a7, a8, a9, a10);
  if ((v25 & 7) != 0)
  {
    v16 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  return a1;
}

{
  unsigned int *v16;
  unsigned int v17;
  int v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;

  v21 = 3;
  v22 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a1, a2, a3, a4, a5, a6, (uint64_t)&v21, a7, a8, a9, a10);
  if ((v25 & 7) != 0)
  {
    v16 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  return a1;
}

void sub_20C65F8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a5, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::UsdProperty *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v64;
  _OWORD v65[2];
  uint64_t v66;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v19 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 48);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v22 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v22;
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 1;
  v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v25)
    v25 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v26 = *((_QWORD *)v25 + 17);
  *(_QWORD *)(a1 + 40) = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), a5);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), a6);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)a7;
  v29 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(a1 + 152) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 48);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 160), (_DWORD *)(a7 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 164), (_DWORD *)(a7 + 20));
  v32 = *(_QWORD *)(a7 + 24);
  *(_QWORD *)(a1 + 168) = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      *(_QWORD *)(a1 + 168) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)a8;
  v35 = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(a1 + 184) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 48);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 192), (_DWORD *)(a8 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 196), (_DWORD *)(a8 + 20));
  v38 = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(a1 + 200) = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      *(_QWORD *)(a1 + 200) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)a10;
  v41 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a1 + 216) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 48);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 224), (_DWORD *)(a10 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 228), (_DWORD *)(a10 + 20));
  v44 = *(_QWORD *)(a10 + 24);
  *(_QWORD *)(a1 + 232) = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      *(_QWORD *)(a1 + 232) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)a11;
  v47 = *(_QWORD *)(a11 + 8);
  *(_QWORD *)(a1 + 248) = v47;
  if (v47)
  {
    v48 = (unint64_t *)(v47 + 48);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 256), (_DWORD *)(a11 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 260), (_DWORD *)(a11 + 20));
  v51 = *(_QWORD *)(a11 + 24);
  *(_QWORD *)(a1 + 264) = v51;
  if ((v51 & 7) != 0)
  {
    v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 2, v52));
    if ((v53 & 1) == 0)
      *(_QWORD *)(a1 + 264) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_BYTE *)(a1 + 304) = 0;
  v66 = 0;
  memset(v65, 0, sizeof(v65));
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a9, v50))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)a9, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v65);
    if (v55)
    {
      sub_20C65FF98(a1 + 304, (uint64_t)v65);
      sub_20C660CD8(a3, (uint64_t)v65, &v64);
      sub_20BDE82DC(a1 + 272, &v64);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a10, v54))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(a10, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v65);
    if (v59)
    {
      sub_20C65FF98(a1 + 352, (uint64_t)v65);
      sub_20C660CD8(a4, (uint64_t)v65, &v64);
      sub_20BDE82DC(a1 + 288, &v64);
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, a5, a6);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeBlendShapeBindings((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a10, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)a11);
  sub_20C00918C(v65);
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_20C65FDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_20C35C2E0(v19);
  _Unwind_Resume(a1);
}

void sub_20C65FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C65FF98(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 40))
  {
    sub_20C034C28(a1, (__int128 *)a2);
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*(_QWORD *)(a1 + 24))
        v5 = *(unint64_t **)(a1 + 24);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t ElementSize;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  unint64_t v15;
  const char *v16;
  const char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2)
    && pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v5))
  {
    ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 48));
    v7 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 96));
    if ((_DWORD)ElementSize == (_DWORD)v7)
    {
      if ((int)ElementSize <= 0)
      {
        v24 = "usdSkel/skinningQuery.cpp";
        v25 = "_InitializeJointInfluenceBindings";
        v26 = 132;
        v27 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const UsdAt"
              "tribute &, const UsdAttribute &)";
        v28 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Invalid element size [%d]: element size must be greater than zero.", v8, ElementSize);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 48), &v23);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 96), &v22);
        v10 = v23 & 0xFFFFFFFFFFFFFFF8;
        v11 = v22 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 0xFFFFFFFFFFFFFFF8) == (v22 & 0xFFFFFFFFFFFFFFF8))
        {
          v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v13)
            v13 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if ((v23 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 17) & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_26;
          v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v14)
            v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v15 = v23 & 0xFFFFFFFFFFFFFFF8;
          if ((v23 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 153) & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_26:
            *((_DWORD *)this + 8) = ElementSize;
            sub_20BF32220((_QWORD *)this + 5, &v23);
            *((_DWORD *)this + 9) |= 1u;
          }
          else
          {
            v24 = "usdSkel/skinningQuery.cpp";
            v25 = "_InitializeJointInfluenceBindings";
            v26 = 150;
            v27 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const U"
                  "sdAttribute &, const UsdAttribute &)";
            v28 = 0;
            if (v15)
            {
              v16 = (const char *)(v15 + 16);
              if (*(char *)(v15 + 39) < 0)
                v16 = *(const char **)v16;
            }
            else
            {
              v16 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Invalid interpolation (%s) for joint influences: interpolation must be either 'constant' or 'vertex'.", v9, v16);
          }
        }
        else
        {
          v24 = "usdSkel/skinningQuery.cpp";
          v25 = "_InitializeJointInfluenceBindings";
          v26 = 142;
          v27 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const Usd"
                "Attribute &, const UsdAttribute &)";
          v28 = 0;
          if (v10)
          {
            v12 = (const char *)(v10 + 16);
            if (*(char *)(v10 + 39) < 0)
              v12 = *(const char **)v12;
          }
          else
          {
            v12 = "";
          }
          if (v11)
          {
            v17 = (const char *)(v11 + 16);
            if (*(char *)(v11 + 39) < 0)
              v17 = *(const char **)v17;
          }
          else
          {
            v17 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"jointIndices interpolation (%s) != jointWeights interpolation (%s).", v9, v12, v17);
        }
        if ((v22 & 7) != 0)
        {
          v18 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        if ((v23 & 7) != 0)
        {
          v20 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stlxr(v21 - 2, v20));
        }
      }
    }
    else
    {
      v24 = "usdSkel/skinningQuery.cpp";
      v25 = "_InitializeJointInfluenceBindings";
      v26 = 126;
      v27 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const UsdAttr"
            "ibute &, const UsdAttribute &)";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"jointIndices element size (%d) != jointWeights element size (%d).", v8, ElementSize, v7);
    }
  }
}

void sub_20C6602C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((a13 & 7) != 0)
  {
    v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeBlendShapeBindings(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a3)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v6);
    if ((_DWORD)result)
    {
      if (*((_QWORD *)this + 36))
        *((_DWORD *)this + 9) |= 2u;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasBlendShapes(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return (*((unsigned __int8 *)this + 36) >> 1) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return *((_DWORD *)this + 9) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetJointOrder(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 344))
    {
      sub_20C034C28(a2, (__int128 *)(a1 + 304));
      return 1;
    }
  }
  else
  {
    v3[0] = "usdSkel/skinningQuery.cpp";
    v3[1] = "GetJointOrder";
    v3[2] = 206;
    v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetJointOrder(VtTokenArray *) const";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"'jointOrder' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetBlendShapeOrder(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 392))
    {
      sub_20C034C28(a2, (__int128 *)(a1 + 352));
      return 1;
    }
  }
  else
  {
    v3[0] = "usdSkel/skinningQuery.cpp";
    v3[1] = "GetBlendShapeOrder";
    v3[2] = 221;
    v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetBlendShapeOrder(VtTokenArray *) const";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"'blendShapeOrder' pointer is null.");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamples(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  double *v15;
  void *__p;
  char *v18;
  uint64_t v19;
  _QWORD v20[4];
  char v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    __p = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v20, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48));
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v22, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96));
    v6 = 0;
    v7 = &v23;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval((uint64_t)&v20[v6], a2, (uint64_t)&__p))sub_20C643478(a3, *(_QWORD *)(a3 + 8), (char *)__p, v18, (v18 - (_BYTE *)__p) >> 3);
      v6 += 6;
    }
    while (v6 != 12);
    do
    {
      v8 = *(v7 - 2);
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      v11 = *(v7 - 3);
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 - 7);
      sub_20BFD265C((_DWORD *)v7 - 8);
      v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*(v7 - 5);
      if (v14)
        sub_20C35C614(v14);
      v7 -= 6;
    }
    while (v7 != v20);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(a1 + 176, a2, (uint64_t)&__p))sub_20C643478(a3, *(_QWORD *)(a3 + 8), (char *)__p, v18, (v18 - (_BYTE *)__p) >> 3);
    std::__sort<std::__less<double,double> &,double *>();
    v15 = sub_20C27E94C(*(double **)a3, *(double **)(a3 + 8));
    if (*(double **)(a3 + 8) != v15)
      *(_QWORD *)(a3 + 8) = v15;
    if (__p)
    {
      v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v20[0] = "usdSkel/skinningQuery.cpp";
    v20[1] = "GetTimeSamplesInInterval";
    v20[2] = 239;
    v20[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamplesInInterval(const GfInterval &, s"
             "td::vector<double> *) const";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"'times' pointer is null.");
  }
  return a3 != 0;
}

void sub_20C6606C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C660738(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, unint64_t *a2)
{
  char v4;
  uint64_t ElementSize;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  uint64_t v7;
  std::string::size_type size;
  char v9;
  char *v10;
  void **v11;
  std::string *v12;
  const char *Text;
  char *v14;
  void *__p[2];
  char v17;
  std::string v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26[2];
  uint64_t v27;

  v27 = 0;
  memset(v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v26);
  if ((v4 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1))
    {
      v25 = 0;
      memset(v24, 0, sizeof(v24));
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v24) & 1) != 0)
      {
        if (*(_QWORD *)&v26[0])
        {
          memset(&v18, 0, sizeof(v18));
          ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(a1);
          v7 = sub_20C58C538(v26, (unint64_t *)v24, ElementSize, a2, &v18);
          size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v18.__r_.__value_.__l.__size_;
          if (size)
          {
            v19 = "usdGeom/primvar.h";
            v20 = "ComputeFlattened";
            v21 = 849;
            v22 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTime"
                  "Code) const [ScalarType = int]";
            v23 = 0;
            pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, a1, v6);
            if (v17 >= 0)
              v11 = __p;
            else
              v11 = (void **)__p[0];
            v12 = &v18;
            if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"For primvar %s: %s", v10, v11, v12);
            if (v17 < 0)
              operator delete(__p[0]);
            v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          }
          if (v9 < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
          goto LABEL_22;
        }
      }
      else
      {
        v19 = "usdGeom/primvar.h";
        v20 = "ComputeFlattened";
        v21 = 837;
        v22 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTimeCode"
              ") const [ScalarType = int]";
        v23 = 0;
        sub_20C348EEC((uint64_t)a1, (int *)&v18);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"No indices authored for indexed primvar <%s>.", v14, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v18.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&v18);
      }
      v7 = 0;
LABEL_22:
      sub_20BF5618C((uint64_t)v24);
      goto LABEL_23;
    }
    sub_20C03150C((uint64_t)a2, v26);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
LABEL_23:
  sub_20BF5618C((uint64_t)v26);
  return v7;
}

void sub_20C660938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_20BF5618C((uint64_t)&a29);
  sub_20BF5618C(v29 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6609B8(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, unint64_t *a2)
{
  char v4;
  uint64_t ElementSize;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  uint64_t v7;
  std::string::size_type size;
  char v9;
  char *v10;
  void **v11;
  std::string *v12;
  const char *Text;
  char *v14;
  void *__p[2];
  char v17;
  std::string v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26[2];
  uint64_t v27;

  v27 = 0;
  memset(v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v26);
  if ((v4 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1))
    {
      v25 = 0;
      memset(v24, 0, sizeof(v24));
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v24) & 1) != 0)
      {
        if (*(_QWORD *)&v26[0])
        {
          memset(&v18, 0, sizeof(v18));
          ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(a1);
          v7 = sub_20C58CDC8(v26, (unint64_t *)v24, ElementSize, a2, &v18);
          size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v18.__r_.__value_.__l.__size_;
          if (size)
          {
            v19 = "usdGeom/primvar.h";
            v20 = "ComputeFlattened";
            v21 = 849;
            v22 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTime"
                  "Code) const [ScalarType = float]";
            v23 = 0;
            pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, a1, v6);
            if (v17 >= 0)
              v11 = __p;
            else
              v11 = (void **)__p[0];
            v12 = &v18;
            if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"For primvar %s: %s", v10, v11, v12);
            if (v17 < 0)
              operator delete(__p[0]);
            v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          }
          if (v9 < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
          goto LABEL_22;
        }
      }
      else
      {
        v19 = "usdGeom/primvar.h";
        v20 = "ComputeFlattened";
        v21 = 837;
        v22 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTimeCode"
              ") const [ScalarType = float]";
        v23 = 0;
        sub_20C348EEC((uint64_t)a1, (int *)&v18);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"No indices authored for indexed primvar <%s>.", v14, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v18.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&v18);
      }
      v7 = 0;
LABEL_22:
      sub_20BF5618C((uint64_t)v24);
      goto LABEL_23;
    }
    sub_20BF9B1F8((uint64_t)a2, v26);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
LABEL_23:
  sub_20BF5618C((uint64_t)v26);
  return v7;
}

void sub_20C660BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_20BF5618C((uint64_t)&a29);
  sub_20BF5618C(v29 - 96);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetDescription@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *Text;
  const char *v6;
  char *v7;
  int v9;
  int v10;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
    return sub_20BDDC0E4(a3, "invalid UsdSkelSkinningQuery");
  sub_20C348EEC((uint64_t)this, &v9);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelSkinningQuery <%s>", v6, v7, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_20BFD265C(&v9);
}

void sub_20C660CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C660CD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = sub_20C660D38(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20C660D24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C660D38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  *a1 = &unk_24C53F828;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 3), a2, a3);
  return a1;
}

void sub_20C660D70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20C660D84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53F828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C660D98(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53F828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C660DBC(uint64_t a1)
{
  sub_20BF5618C(a1 + 40);
}

void sub_20C660DDC(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C660FFC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                *((_DWORD *)v12 + 8) = *(_DWORD *)(v9 + v11 + 32);
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v11 += 36;
              }
              while (36 * v3 != v11);
            }
          }
          v15 = *a3;
          v16 = 36 * v3;
          do
          {
            v17 = (char *)v7 + v16;
            v18 = *v15;
            v19 = v15[1];
            *((_DWORD *)v17 + 8) = *((_DWORD *)v15 + 8);
            *(_OWORD *)v17 = v18;
            *((_OWORD *)v17 + 1) = v19;
            v16 += 36;
          }
          while (36 * a2 != v16);
        }
        v20 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v27 = a2;
    else
      v27 = *a1;
    v28 = sub_20C660FFC((uint64_t)a1, a2);
    v20 = v28;
    if (v27)
    {
      v29 = 36 * v27;
      v30 = v28;
      do
      {
        v31 = *(_OWORD *)v7;
        v32 = *((_OWORD *)v7 + 1);
        *((_DWORD *)v30 + 8) = *((_DWORD *)v7 + 8);
        *(_OWORD *)v30 = v31;
        *((_OWORD *)v30 + 1) = v32;
        v7 = (_QWORD *)((char *)v7 + 36);
        v30 = (_QWORD *)((char *)v30 + 36);
        v29 -= 36;
      }
      while (v29);
    }
    if (v3 < a2)
    {
      v33 = *a3;
      v34 = 36 * v3;
      do
      {
        v35 = (char *)v28 + v34;
        v36 = *v33;
        v37 = v33[1];
        *((_DWORD *)v35 + 8) = *((_DWORD *)v33 + 8);
        *(_OWORD *)v35 = v36;
        *((_OWORD *)v35 + 1) = v37;
        v34 += 36;
      }
      while (36 * a2 != v34);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x71C71C71C71C71DLL)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v21 = sub_20C660FFC((uint64_t)a1, a2);
  v20 = v21;
  v22 = 0;
  v23 = *a3;
  do
  {
    v24 = (char *)v21 + v22;
    v25 = *v23;
    v26 = v23[1];
    *((_DWORD *)v24 + 8) = *((_DWORD *)v23 + 8);
    *(_OWORD *)v24 = v25;
    *((_OWORD *)v24 + 1) = v26;
    v22 += 36;
  }
  while (36 * a2 != v22);
LABEL_29:
  if (v20 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v20;
  }
  *a1 = a2;
}

_QWORD *sub_20C660FFC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3f]");
  if (a2 > 0x71C71C71C71C71BLL)
    v3 = -1;
  else
    v3 = 36 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C66108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6610A4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix3f]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C660FFC((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 36 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          *((_DWORD *)v11 + 8) = *((_DWORD *)v6 + 8);
          *(_OWORD *)v11 = v12;
          *((_OWORD *)v11 + 1) = v13;
          v6 = (__int128 *)((char *)v6 + 36);
          v11 = (_QWORD *)((char *)v11 + 36);
          v10 -= 36;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::UsdSkelTokensType(pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v100 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "bindTransforms", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v100, "blendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "blendShapeWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "classicLinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "dualQuaternion", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "jointNames", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "joints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "normalOffsets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "offsets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "pointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "primvars:skel:geomBindTransform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "primvars:skel:jointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "primvars:skel:jointWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "primvars:skel:skinningMethod", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "restTransforms", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "rotations", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "scales", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "skel:animationSource", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "skel:blendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "skel:blendShapeTargets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "skel:joints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "skel:skeleton", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "translations", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "weight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "BlendShape", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "SkelAnimation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "SkelBindingAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "Skeleton", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "SkelRoot", 0);
  v2 = *(_QWORD *)this;
  v101 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v100;
  v102 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v103 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v103 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v104 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v105 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v106 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v107 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v108 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v109 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v110 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v111 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v112 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v113 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v114 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v115 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v116 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v117 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v118 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v119 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v120 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v121 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v122 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v123 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v124 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v125 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v126 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v127 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v128 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v129 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  v89 = operator new(0xE8uLL);
  v90 = 0;
  *((_QWORD *)this + 29) = v89;
  *((_QWORD *)this + 30) = v89;
  *((_QWORD *)this + 31) = v89 + 29;
  do
  {
    v91 = *(&v101 + v90);
    *v89 = v91;
    if ((v91 & 7) != 0)
    {
      v92 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 2, v92));
      if ((v93 & 1) == 0)
        *v89 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v90;
    ++v89;
  }
  while (v90 != 29);
  v94 = &v130;
  *((_QWORD *)this + 30) = v89;
  do
  {
    v96 = *--v94;
    v95 = v96;
    if ((v96 & 7) != 0)
    {
      v97 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
      do
        v98 = __ldxr(v97);
      while (__stlxr(v98 - 2, v97));
    }
  }
  while (v94 != &v101);
  return this;
}

void sub_20C661B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,void **a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;

  sub_20BEEB2B8(&a30);
  v71 = (char *)&a61;
  while (1)
  {
    v73 = *((_QWORD *)v71 - 1);
    v71 -= 8;
    v72 = v73;
    if ((v73 & 7) != 0)
    {
      v74 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stlxr(v75 - 2, v74));
    }
    if (v71 == &a32)
    {
      if ((*v62 & 7) != 0)
      {
        v76 = (unsigned int *)(*v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*v70 & 7) != 0)
      {
        v78 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v69 & 7) != 0)
      {
        v80 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*v68 & 7) != 0)
      {
        v82 = (unsigned int *)(*v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v67 & 7) != 0)
      {
        v84 = (unsigned int *)(*v67 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*v66 & 7) != 0)
      {
        v86 = (unsigned int *)(*v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v65 & 7) != 0)
      {
        v88 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*v64 & 7) != 0)
      {
        v90 = (unsigned int *)(*v64 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v63 & 7) != 0)
      {
        v92 = (unsigned int *)(*v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a11 & 7) != 0)
      {
        v94 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a12 & 7) != 0)
      {
        v96 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a13 & 7) != 0)
      {
        v98 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a14 & 7) != 0)
      {
        v100 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a15 & 7) != 0)
      {
        v102 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a16 & 7) != 0)
      {
        v104 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a17 & 7) != 0)
      {
        v106 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a18 & 7) != 0)
      {
        v108 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a19 & 7) != 0)
      {
        v110 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a20 & 7) != 0)
      {
        v112 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a21 & 7) != 0)
      {
        v114 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a22 & 7) != 0)
      {
        v116 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a23 & 7) != 0)
      {
        v118 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a24 & 7) != 0)
      {
        v120 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a25 & 7) != 0)
      {
        v122 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a26 & 7) != 0)
      {
        v124 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a27 & 7) != 0)
      {
        v126 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a28 & 7) != 0)
      {
        v128 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a29 & 7) != 0)
      {
        v130 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*v61 & 7) != 0)
      {
        v132 = (unsigned int *)(*v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C661FB8()
{
  JUMPOUT(0x20C661CE4);
}

void sub_20C661FC0()
{
  JUMPOUT(0x20C661D08);
}

void sub_20C661FC8()
{
  JUMPOUT(0x20C661D2CLL);
}

void sub_20C661FD0()
{
  JUMPOUT(0x20C661D50);
}

void sub_20C661FD8()
{
  JUMPOUT(0x20C661D74);
}

void sub_20C661FE0()
{
  JUMPOUT(0x20C661D98);
}

void sub_20C661FE8()
{
  JUMPOUT(0x20C661DBCLL);
}

void sub_20C661FF0()
{
  JUMPOUT(0x20C661DE0);
}

void sub_20C661FF8()
{
  JUMPOUT(0x20C661E04);
}

void sub_20C662000()
{
  JUMPOUT(0x20C661E28);
}

void sub_20C662008()
{
  JUMPOUT(0x20C661E4CLL);
}

void sub_20C662010()
{
  JUMPOUT(0x20C661E70);
}

void sub_20C662018()
{
  JUMPOUT(0x20C661E94);
}

void sub_20C662020()
{
  JUMPOUT(0x20C661EB8);
}

void sub_20C662028()
{
  JUMPOUT(0x20C661EDCLL);
}

void sub_20C662030()
{
  JUMPOUT(0x20C661F00);
}

void sub_20C662038()
{
  JUMPOUT(0x20C661F24);
}

void sub_20C662040()
{
  JUMPOUT(0x20C661F48);
}

void sub_20C662048()
{
  JUMPOUT(0x20C661F6CLL);
}

void sub_20C662050()
{
  JUMPOUT(0x20C661F90);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  sub_20C6620D8(a2, a3, (uint64_t)v9);
  v4 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v4;
  v5 = v10;
  *(_QWORD *)(a1 + 32) = v10;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*(_QWORD *)(a1 + 24))
      v6 = *(unint64_t **)(a1 + 24);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BF5618C((uint64_t)v9);
  return a1;
}

{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  sub_20C6620D8(a2, a3, (uint64_t)v9);
  v4 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v4;
  v5 = v10;
  *(_QWORD *)(a1 + 32) = v10;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*(_QWORD *)(a1 + 24))
      v6 = *(unint64_t **)(a1 + 24);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BF5618C((uint64_t)v9);
  return a1;
}

void sub_20C6620D8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t v7;
  uint64_t *EmptyString;
  uint64_t *v9;
  uint64_t *v10[3];
  void **v11;

  v3 = a2;
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C019C58(v10, a2);
  if (v3)
  {
    v7 = 0;
    do
    {
      if ((*(_QWORD *)(a1 + v7 * 8) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)(a1 + v7 * 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v11, EmptyString);
      v9 = &v10[0][v7];
      sub_20BFD3EBC((int *)&v10[0][v7], (int *)&v11);
      sub_20BFD3F10((int *)v9 + 1, (int *)&v11 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
      v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFD265C(&v11);
      ++v7;
      --v3;
    }
    while (v3);
  }
  sub_20C66233C(v10[0], v10[1] - v10[0], a3);
  v11 = (void **)v10;
  sub_20BFD6F90(&v11);
}

void sub_20C6621B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 - 16);
    if (*(_QWORD *)(result + 24))
      v4 = *(unint64_t **)(result + 24);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 - 16);
    if (*(_QWORD *)(result + 24))
      v4 = *(unint64_t **)(result + 24);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  sub_20C66233C(a2, a3, (uint64_t)v9);
  v4 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v4;
  v5 = v10;
  *(_QWORD *)(a1 + 32) = v10;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*(_QWORD *)(a1 + 24))
      v6 = *(unint64_t **)(a1 + 24);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BF5618C((uint64_t)v9);
  return a1;
}

{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  sub_20C66233C(a2, a3, (uint64_t)v9);
  v4 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v4;
  v5 = v10;
  *(_QWORD *)(a1 + 32) = v10;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*(_QWORD *)(a1 + 24))
      v6 = *(unint64_t **)(a1 + 24);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BF5618C((uint64_t)v9);
  return a1;
}

uint64_t sub_20C66233C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  memset(v18, 0, sizeof(v18));
  v19 = 1065353216;
  if (a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v22 = v6;
      *((_DWORD *)sub_20C6626D0((uint64_t)v18, (unsigned int *)v6++, (uint64_t)&unk_20CAC184C, (_DWORD **)&v22) + 6) = v5++;
    }
    while (a2 != v5);
  }
  v7 = a3;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  LODWORD(v21) = -1;
  sub_20BF56210((_QWORD *)a3);
  v22 = &v21;
  sub_20BF64D74((unint64_t *)a3, a2, (_DWORD **)&v22);
  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v8, v9);
  if (a2)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a3 + 32);
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v10]))
        goto LABEL_13;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAncestorsRange((pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v10], &v22);
      sub_20BFD6E54(&v21, &v22);
      sub_20BFD6EA4((_DWORD *)&v21 + 1, (_DWORD *)&v22 + 1);
      pxrInternal__aapl__pxrReserved__::SdfPathAncestorsRange::iterator::operator++((int *)&v21);
      while (1)
      {
        v20 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v20);
        v12 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v20 + 1);
        v14 = v20;
        v13 = v21;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
        sub_20BFD265C(&v20);
        if (v13 == v14)
          break;
        v15 = sub_20C0E70D0(v18, (unsigned int *)&v21);
        if (v15)
        {
          v7 = *((_DWORD *)v15 + 6);
          break;
        }
        pxrInternal__aapl__pxrReserved__::SdfPathAncestorsRange::iterator::operator++((int *)&v21);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_20BFD265C(&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
      sub_20BFD265C(&v22);
      if (v13 == v14)
LABEL_13:
        v7 = -1;
      *(_DWORD *)(v11 + 4 * v10++) = v7;
    }
    while (v10 != a2);
  }
  return sub_20C662A48((uint64_t)v18);
}

void sub_20C662518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF5618C(a3);
  sub_20C662A48((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::Validate(unint64_t *a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  _BOOL8 v10;
  __int128 v12;
  uint64_t v13;

  v3 = *a1;
  if (!*a1)
    return 1;
  v5 = (unsigned int *)a1[4];
  v6 = *v5;
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 0;
    v8 = v5 + 1;
    while (v3 - 1 != v7)
    {
      v9 = v7;
      v6 = v8[v7++];
      if ((v6 & 0x80000000) == 0 && v9 < v6)
      {
        v10 = v7 >= v3;
        goto LABEL_8;
      }
    }
    return 1;
  }
  v10 = 0;
  v7 = 0;
LABEL_8:
  if (v7 == v6)
  {
    if (!a2)
      return v10;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", (const char *)a2, a3, v7);
  }
  else
  {
    if (!a2)
      return v10;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", (const char *)a2, a3, v7, v6);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return v10;
}

_QWORD *sub_20C6626D0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C66293C(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C6629AC((uint64_t)v21, 0);
  return v10;
}

void sub_20C662924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6629AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C66293C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  sub_20BFD6E54((_DWORD *)v8 + 4, v9);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, v9 + 1);
  *((_DWORD *)v8 + 6) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C6629AC(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C22D15C(v2 + 4);
    operator delete(v2);
  }
}

_DWORD *sub_20C6629F0(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_DWORD *sub_20C662A1C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C662A48(uint64_t a1)
{
  void *v2;

  sub_20C662A80(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C662A80(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20C22D15C(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, float32x2_t *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  if (!a2)
  {
    v10 = "usdSkel/utils.cpp";
    v11 = "UsdSkelDecomposeTransform";
    v12 = 476;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    v10 = "usdSkel/utils.cpp";
    v11 = "UsdSkelDecomposeTransform";
    v12 = 480;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    v10 = "usdSkel/utils.cpp";
    v11 = "UsdSkelDecomposeTransform";
    v12 = 484;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  v5 = sub_20C662BBC(a1, a2, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v10, a4);
  if ((_DWORD)v5)
  {
    *(double *)a3 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v10);
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = v8;
  }
  return v5;
}

uint64_t sub_20C662BBC(uint64_t a1, float32x2_t *a2, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, _WORD *a4)
{
  uint64_t result;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  float32_t v14;
  float64x2_t v15;
  double v16;
  double v17[3];
  _BYTE v18[128];
  __int128 v19[8];

  result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor(a1, v19, (uint64_t)v17, a3, (uint64_t)&v15, (uint64_t)v18, 1.0e-10);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(a3, 1);
    if ((_DWORD)result)
    {
      v8 = v17[0];
      if (v8 == 0.0)
      {
        v9 = HIWORD(LODWORD(v8));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
      {
        v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
           + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
      }
      v10 = v17[1];
      if (v10 == 0.0)
      {
        v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      v12 = v17[2];
      if (v12 == 0.0)
      {
        v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      *a4 = v9;
      a4[1] = v11;
      a4[2] = v13;
      v14 = v16;
      *a2 = vcvt_f32_f64(v15);
      a2[1].f32[0] = v14;
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v10;
  uint64_t v11;
  const char *v12;
  char v13;

  if (!a2)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    v11 = 476;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    v11 = 480;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    v11 = 484;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  v5 = sub_20C662E40(a1, a2, &v10, a4);
  if ((_DWORD)v5)
  {
    *(double *)a3 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v10);
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = v8;
  }
  return v5;
}

{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  float32x4_t v10;
  uint64_t v11;
  const char *v12;
  char v13;

  if (!a2)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    v11 = 515;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    v11 = 519;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    v11 = 523;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  v5 = sub_20C662E40(a1, a2, &v10, a4);
  if ((_DWORD)v5)
  {
    *(float *)a3 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v10);
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v8;
  }
  return v5;
}

uint64_t sub_20C662E40(uint64_t a1, uint64_t a2, float32x4_t *a3, _WORD *a4)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  float v15;
  _BYTE v16[64];
  float32x4_t v17[4];

  result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::Factor(a1, v17, (uint64_t)&v13, a3, (uint64_t)&v11, (uint64_t)v16, 0.00001);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize((float32x2_t *)a3, 1);
    if ((_DWORD)result)
    {
      if (v13 == 0.0)
      {
        v8 = HIWORD(LODWORD(v13));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23])
      {
        v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23]
           + (((LODWORD(v13) & 0x7FFFFF) + ((LODWORD(v13) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v13));
      }
      if (v14 == 0.0)
      {
        v9 = HIWORD(LODWORD(v14));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
      {
        v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
           + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      }
      if (v15 == 0.0)
      {
        v10 = HIWORD(LODWORD(v15));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23])
      {
        v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23]
            + (((LODWORD(v15) & 0x7FFFFF) + ((LODWORD(v15) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v15));
      }
      *a4 = v8;
      a4[1] = v9;
      a4[2] = v10;
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, float32x2_t *a2, float32x4_t *a3, _WORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  if (!a2)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkelDecomposeTransform";
    v16 = 515;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkelDecomposeTransform";
    v16 = 519;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkelDecomposeTransform";
    v16 = 523;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  v5 = sub_20C662BBC(a1, a2, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v14, a4);
  if ((_DWORD)v5)
  {
    v10.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v14);
    v10.n128_u64[1] = v6;
    v11 = v7;
    v12 = v8;
    pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v13, &v10);
    *a3 = v13;
  }
  return v5;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(float32x2_t *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  _QWORD v14[4];
  char v15;

  if (a4)
  {
    v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a3];
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[1]];
    v6 = (float)(v4 * *(float *)(a2 + 8));
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[2]];
    v8 = (float)(v5 * *(float *)(a2 + 20));
    v9 = (float)(v7 * *(float *)(a2 + 32));
    v10 = a1[1].f32[0];
    v11 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 12), v5));
    v12 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 24), v7));
    v13 = vcvtq_f64_f32(*a1);
    *(float64x2_t *)a4 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)a2, v4));
    *(double *)(a4 + 16) = v6;
    *(_QWORD *)(a4 + 24) = 0;
    *(float64x2_t *)(a4 + 32) = v11;
    *(double *)(a4 + 48) = v8;
    *(_QWORD *)(a4 + 56) = 0;
    *(float64x2_t *)(a4 + 64) = v12;
    *(double *)(a4 + 80) = v9;
    *(_QWORD *)(a4 + 88) = 0;
    *(float64x2_t *)(a4 + 96) = v13;
    *(double *)(a4 + 112) = v10;
    *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  }
  else
  {
    v14[0] = "usdSkel/utils.cpp";
    v14[1] = "UsdSkelMakeTransform";
    v14[2] = 690;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform(const GfVec3f &, const GfMatrix3f &, const GfVe"
             "c3h &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__20UsdSkelMakeTransformINS_10GfMatrix4dEEEvRKNS_7GfVec3fERKNS_10GfMatrix3fERKNS_7GfVec3hEPT_(a1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(float32x2_t *a1, uint64_t a2, unsigned __int16 *a3, float32x2_t *a4)
{
  float v4;
  float32_t v5;
  float v6;
  float v7;
  float32_t v8;
  float32_t v9;
  __int32 v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  _QWORD v14[4];
  char v15;

  if (a4)
  {
    v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a3];
    v5 = v4 * *(float *)(a2 + 8);
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[1]];
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[2]];
    v8 = v6 * *(float *)(a2 + 20);
    v9 = v7 * *(float *)(a2 + 32);
    v10 = a1[1].i32[0];
    v11 = vmul_n_f32(*(float32x2_t *)(a2 + 12), v6);
    v12 = vmul_n_f32(*(float32x2_t *)(a2 + 24), v7);
    v13 = *a1;
    *a4 = vmul_n_f32(*(float32x2_t *)a2, v4);
    a4[1].f32[0] = v5;
    a4[1].i32[1] = 0;
    a4[2] = v11;
    a4[3].f32[0] = v8;
    a4[3].i32[1] = 0;
    a4[4] = v12;
    a4[5].f32[0] = v9;
    a4[5].i32[1] = 0;
    a4[6] = v13;
    a4[7].i32[0] = v10;
    a4[7].i32[1] = 1065353216;
  }
  else
  {
    v14[0] = "usdSkel/utils.cpp";
    v14[1] = "UsdSkelMakeTransform";
    v14[2] = 690;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform(const GfVec3f &, const GfMatrix3f &, const GfVe"
             "c3h &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__20UsdSkelMakeTransformINS_10GfMatrix4fEEEvRKNS_7GfVec3fERKNS_10GfMatrix3fERKNS_7GfVec3hEPT_(a1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(float32x2_t *a1, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2, unsigned __int16 *a3, uint64_t a4)
{
  _BYTE v7[36];

  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v7, a2);
  pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, (uint64_t)v7, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(float32x2_t *a1, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2, unsigned __int16 *a3, float32x2_t *a4)
{
  _BYTE v7[36];

  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v7, a2);
  pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (uint64_t)v7, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, int32x2_t a5)
{
  uint64_t v6;
  double *v8;
  double v9;
  int v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  char *v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if (a3)
  {
    v6 = a2;
    if (a2)
    {
      v8 = (double *)(a1 + 112);
      do
      {
        v9 = *v8;
        v18 = (char *)vcvt_f32_f64(*(float64x2_t *)(v8 - 2));
        *(float *)&v9 = v9;
        LODWORD(v19) = LODWORD(v9);
        if (a4)
        {
          LODWORD(v16) = sub_20C6635D8(a4, (float *)&v18).u32[0];
          HIDWORD(v16) = v10;
          v17 = v11;
        }
        else
        {
          v16 = v18;
          v17 = (int)v19;
        }
        sub_20C66355C(a3, (uint64_t)&v16);
        v8 += 16;
        --v6;
      }
      while (v6);
    }
    v12 = (float32x4_t)vdupq_lane_s32(a5, 0);
    v13 = vsubq_f32(*(float32x4_t *)a3, v12);
    v13.i32[3] = vaddq_f32(*(float32x4_t *)a3, v12).i32[3];
    *(float32x4_t *)a3 = v13;
    *(float32x2_t *)(a3 + 16) = vadd_f32(*(float32x2_t *)(a3 + 16), *(float32x2_t *)v12.f32);
  }
  else
  {
    v18 = "usdSkel/utils.cpp";
    v19 = "UsdSkelComputeJointsExtent";
    v20 = 828;
    v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent(TfSpan<const Matrix4>, GfRange3f *, float, c"
          "onst Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'extent' pointer is null.");
  }
  return a3 != 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__26UsdSkelComputeJointsExtentINS_10GfMatrix4dEEEbNS_6TfSpanIKT_EEPNS_9GfRange3fEfPS4_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C66355C(uint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  if (*(float *)a2 < *(float *)result)
    *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(float *)(a2 + 4);
  if (v2 < *(float *)(result + 4))
    *(float *)(result + 4) = v2;
  v3 = *(float *)(a2 + 8);
  if (v3 < *(float *)(result + 8))
    *(float *)(result + 8) = v3;
  if (*(float *)a2 > *(float *)(result + 12))
    *(_DWORD *)(result + 12) = *(_DWORD *)a2;
  v4 = *(float *)(a2 + 4);
  if (v4 > *(float *)(result + 16))
    *(float *)(result + 16) = v4;
  v5 = *(float *)(a2 + 8);
  if (v5 > *(float *)(result + 20))
    *(float *)(result + 20) = v5;
  return result;
}

float32x2_t sub_20C6635D8(float64x2_t *a1, float *a2)
{
  return vcvt_f32_f64(vaddq_f64(a1[6], vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, *a2), vmulq_n_f64(a1[2], a2[1])), vmulq_n_f64(a1[4], a2[2]))));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, int32x2_t a5)
{
  uint64_t v6;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  char *v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if (a3)
  {
    v6 = a2;
    if (a2)
    {
      v8 = (_DWORD *)(a1 + 56);
      do
      {
        v9 = *v8;
        v18 = (char *)*((_QWORD *)v8 - 1);
        LODWORD(v19) = v9;
        if (a4)
        {
          LODWORD(v16) = sub_20C663754(a4, (float *)&v18).u32[0];
          HIDWORD(v16) = v10;
          v17 = v11;
        }
        else
        {
          v16 = v18;
          v17 = (int)v19;
        }
        sub_20C66355C(a3, (uint64_t)&v16);
        v8 += 16;
        --v6;
      }
      while (v6);
    }
    v12 = (float32x4_t)vdupq_lane_s32(a5, 0);
    v13 = vsubq_f32(*(float32x4_t *)a3, v12);
    v13.i32[3] = vaddq_f32(*(float32x4_t *)a3, v12).i32[3];
    *(float32x4_t *)a3 = v13;
    *(float32x2_t *)(a3 + 16) = vadd_f32(*(float32x2_t *)(a3 + 16), *(float32x2_t *)v12.f32);
  }
  else
  {
    v18 = "usdSkel/utils.cpp";
    v19 = "UsdSkelComputeJointsExtent";
    v20 = 828;
    v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent(TfSpan<const Matrix4>, GfRange3f *, float, c"
          "onst Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'extent' pointer is null.");
  }
  return a3 != 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__26UsdSkelComputeJointsExtentINS_10GfMatrix4fEEEbNS_6TfSpanIKT_EEPNS_9GfRange3fEfPS4_(a1, a2, a3, a4, a5);
}

float32x2_t sub_20C663754(float32x2_t *a1, float *a2)
{
  return vadd_f32(a1[6], vadd_f32(vadd_f32(vmul_n_f32(*a1, *a2), vmul_n_f32(a1[2], a2[1])), vmul_n_f32(a1[4], a2[2])));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelIsSkelAnimationPrim(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  uint64_t *SchemaInfo;
  char *v6;

  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(this);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v4);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v6);
}

pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *pxrInternal__aapl__pxrReserved__::UsdSkelIsSkinnablePrim(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  uint64_t *SchemaInfo;
  char *v6;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *result;
  uint64_t *v8;
  const pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t *v10;
  char *v11;
  uint64_t IsA;
  uint64_t *v13;
  const pxrInternal__aapl__pxrReserved__::TfType *v14;
  uint64_t *v15;
  char *v16;

  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(this);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v4);
  result = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v6);
  if ((_DWORD)result)
  {
    v8 = pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(result);
    v10 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v8, v9);
    IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, v10, v11);
    if ((IsA & 1) != 0)
    {
      return 0;
    }
    else
    {
      v13 = pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)IsA);
      v15 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v13, v14);
      return (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, v15, v16) ^ 1);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, __int128 *a2, char *a3, uint64_t a4, char *a5, double *a6)
{
  char *v6;
  unint64_t v11;
  uint64_t i;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v6 = *a1;
  if (a3 != *a1)
  {
    *(_QWORD *)&v33 = "usdSkel/utils.cpp";
    *((_QWORD *)&v33 + 1) = "UsdSkel_ConcatJointTransforms";
    *(_QWORD *)&v34 = 125;
    *((_QWORD *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a3, v6);
    return 0;
  }
  if (a5 != a3)
  {
    *(_QWORD *)&v33 = "usdSkel/utils.cpp";
    *((_QWORD *)&v33 + 1) = "UsdSkel_ConcatJointTransforms";
    *(_QWORD *)&v34 = 130;
    *((_QWORD *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (!a5)
    return 1;
  v11 = 0;
  for (i = a4; ; i += 128)
  {
    v13 = *(unsigned int *)&a1[4][4 * v11];
    if ((v13 & 0x80000000) != 0)
    {
      v26 = *a2;
      v27 = a2[1];
      v28 = a2[3];
      *(_OWORD *)(i + 32) = a2[2];
      *(_OWORD *)(i + 48) = v28;
      *(_OWORD *)i = v26;
      *(_OWORD *)(i + 16) = v27;
      v29 = a2[4];
      v30 = a2[5];
      v31 = a2[7];
      *(_OWORD *)(i + 96) = a2[6];
      *(_OWORD *)(i + 112) = v31;
      *(_OWORD *)(i + 64) = v29;
      *(_OWORD *)(i + 80) = v30;
      if (a6)
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)i, a6);
      goto LABEL_10;
    }
    if (v11 <= v13)
      break;
    v14 = *a2;
    v15 = a2[1];
    v16 = a2[3];
    v35 = a2[2];
    v36 = v16;
    v33 = v14;
    v34 = v15;
    v17 = a2[4];
    v18 = a2[5];
    v19 = a2[7];
    v39 = a2[6];
    v40 = v19;
    v37 = v17;
    v38 = v18;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v33, (double *)(a4 + (v13 << 7)));
    v20 = v36;
    v22 = v33;
    v21 = v34;
    *(_OWORD *)(i + 32) = v35;
    *(_OWORD *)(i + 48) = v20;
    *(_OWORD *)i = v22;
    *(_OWORD *)(i + 16) = v21;
    v23 = v40;
    v25 = v37;
    v24 = v38;
    *(_OWORD *)(i + 96) = v39;
    *(_OWORD *)(i + 112) = v23;
    *(_OWORD *)(i + 64) = v25;
    *(_OWORD *)(i + 80) = v24;
LABEL_10:
    ++v11;
    a2 += 8;
    if (v11 >= (unint64_t)*a1)
      return 1;
  }
  *(_QWORD *)&v33 = "usdSkel/utils.cpp";
  *((_QWORD *)&v33 + 1) = "UsdSkel_ConcatJointTransforms";
  if (v11 == v13)
  {
    *(_QWORD *)&v34 = 141;
    *((_QWORD *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v11);
  }
  else
  {
    *(_QWORD *)&v34 = 145;
    *((_QWORD *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v11, v13);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, __int128 *a2, char *a3, uint64_t a4, char *a5, float *a6)
{
  char *v6;
  unint64_t v11;
  uint64_t i;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v6 = *a1;
  if (a3 != *a1)
  {
    *(_QWORD *)&v24 = "usdSkel/utils.cpp";
    *((_QWORD *)&v24 + 1) = "UsdSkel_ConcatJointTransforms";
    *(_QWORD *)&v25 = 125;
    *((_QWORD *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a3, v6);
    return 0;
  }
  if (a5 != a3)
  {
    *(_QWORD *)&v24 = "usdSkel/utils.cpp";
    *((_QWORD *)&v24 + 1) = "UsdSkel_ConcatJointTransforms";
    *(_QWORD *)&v25 = 130;
    *((_QWORD *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (!a5)
    return 1;
  v11 = 0;
  for (i = a4; ; i += 64)
  {
    v13 = *(unsigned int *)&a1[4][4 * v11];
    if ((v13 & 0x80000000) != 0)
    {
      v20 = *a2;
      v21 = a2[1];
      v22 = a2[3];
      *(_OWORD *)(i + 32) = a2[2];
      *(_OWORD *)(i + 48) = v22;
      *(_OWORD *)i = v20;
      *(_OWORD *)(i + 16) = v21;
      if (a6)
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)i, a6);
      goto LABEL_10;
    }
    if (v11 <= v13)
      break;
    v14 = *a2;
    v15 = a2[1];
    v16 = a2[3];
    v26 = a2[2];
    v27 = v16;
    v24 = v14;
    v25 = v15;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v24, (float *)(a4 + (v13 << 6)));
    v17 = v27;
    v19 = v24;
    v18 = v25;
    *(_OWORD *)(i + 32) = v26;
    *(_OWORD *)(i + 48) = v17;
    *(_OWORD *)i = v19;
    *(_OWORD *)(i + 16) = v18;
LABEL_10:
    ++v11;
    a2 += 4;
    if (v11 >= (unint64_t)*a1)
      return 1;
  }
  *(_QWORD *)&v24 = "usdSkel/utils.cpp";
  *((_QWORD *)&v24 + 1) = "UsdSkel_ConcatJointTransforms";
  if (v11 == v13)
  {
    *(_QWORD *)&v25 = 141;
    *((_QWORD *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v11);
  }
  else
  {
    *(_QWORD *)&v25 = 145;
    *((_QWORD *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v11, v13);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, uint64_t a2, uint64_t a3, double *a4)
{
  char *v8;
  __int128 *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;

  if (a3)
  {
    v8 = *a1;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v22 = &v14;
    sub_20BF5F980((unint64_t *)a3, (unint64_t)v8, &v22);
    v9 = *(__int128 **)(a2 + 32);
    v10 = *(char **)a2;
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
    return pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(a1, v9, v10, *(_QWORD *)(a3 + 32), *(char **)a3, a4);
  }
  else
  {
    *(_QWORD *)&v14 = "usdSkel/utils.cpp";
    *((_QWORD *)&v14 + 1) = "UsdSkelConcatJointTransforms";
    *(_QWORD *)&v15 = 194;
    *((_QWORD *)&v15 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(const UsdSkelTopology &,"
                            " const VtMatrix4dArray &, VtMatrix4dArray *, const GfMatrix4d *)";
    LOBYTE(v16) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, __int128 *a2, uint64_t a3, double *a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(a1, a2, *a1, a3, *a1, a4);
}

uint64_t sub_20C663D14(char **a1, __int128 *a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, double *a8)
{
  char *v8;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v8 = *a1;
  if (a3 != *a1)
  {
    *(_QWORD *)&v35 = "usdSkel/utils.cpp";
    *((_QWORD *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(_QWORD *)&v36 = 233;
    *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a3, v8);
    return 0;
  }
  if (a5 != a3)
  {
    *(_QWORD *)&v35 = "usdSkel/utils.cpp";
    *((_QWORD *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(_QWORD *)&v36 = 238;
    *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Size of inverseXforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (a7 != a3)
  {
    *(_QWORD *)&v35 = "usdSkel/utils.cpp";
    *((_QWORD *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(_QWORD *)&v36 = 243;
    *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a7, a3);
    return 0;
  }
  if (!a3)
    return 1;
  v14 = 0;
  while (1)
  {
    v15 = *(unsigned int *)&a1[4][4 * v14];
    if ((v15 & 0x80000000) != 0)
    {
      v28 = *a2;
      v29 = a2[1];
      v30 = a2[3];
      *(_OWORD *)(a6 + 32) = a2[2];
      *(_OWORD *)(a6 + 48) = v30;
      *(_OWORD *)a6 = v28;
      *(_OWORD *)(a6 + 16) = v29;
      v31 = a2[4];
      v32 = a2[5];
      v33 = a2[7];
      *(_OWORD *)(a6 + 96) = a2[6];
      *(_OWORD *)(a6 + 112) = v33;
      *(_OWORD *)(a6 + 64) = v31;
      *(_OWORD *)(a6 + 80) = v32;
      if (a8)
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a6, a8);
      goto LABEL_11;
    }
    if (v14 <= v15)
      break;
    v16 = *a2;
    v17 = a2[1];
    v18 = a2[3];
    v37 = a2[2];
    v38 = v18;
    v35 = v16;
    v36 = v17;
    v19 = a2[4];
    v20 = a2[5];
    v21 = a2[7];
    v41 = a2[6];
    v42 = v21;
    v39 = v19;
    v40 = v20;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v35, (double *)(a4 + (v15 << 7)));
    v22 = v38;
    v24 = v35;
    v23 = v36;
    *(_OWORD *)(a6 + 32) = v37;
    *(_OWORD *)(a6 + 48) = v22;
    *(_OWORD *)a6 = v24;
    *(_OWORD *)(a6 + 16) = v23;
    v25 = v42;
    v27 = v39;
    v26 = v40;
    *(_OWORD *)(a6 + 96) = v41;
    *(_OWORD *)(a6 + 112) = v25;
    *(_OWORD *)(a6 + 64) = v27;
    *(_OWORD *)(a6 + 80) = v26;
LABEL_11:
    ++v14;
    a2 += 8;
    a6 += 128;
    if (v14 >= (unint64_t)*a1)
      return 1;
  }
  *(_QWORD *)&v35 = "usdSkel/utils.cpp";
  *((_QWORD *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
  if (v14 == v15)
  {
    *(_QWORD *)&v36 = 259;
    *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v14);
  }
  else
  {
    *(_QWORD *)&v36 = 264;
    *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v14, v15);
  }
  return 0;
}

uint64_t sub_20C663F58(char **a1, __int128 *a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, float *a8)
{
  char *v8;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v8 = *a1;
  if (a3 != *a1)
  {
    *(_QWORD *)&v26 = "usdSkel/utils.cpp";
    *((_QWORD *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(_QWORD *)&v27 = 233;
    *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a3, v8);
    return 0;
  }
  if (a5 != a3)
  {
    *(_QWORD *)&v26 = "usdSkel/utils.cpp";
    *((_QWORD *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(_QWORD *)&v27 = 238;
    *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Size of inverseXforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (a7 != a3)
  {
    *(_QWORD *)&v26 = "usdSkel/utils.cpp";
    *((_QWORD *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(_QWORD *)&v27 = 243;
    *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a7, a3);
    return 0;
  }
  if (!a3)
    return 1;
  v14 = 0;
  while (1)
  {
    v15 = *(unsigned int *)&a1[4][4 * v14];
    if ((v15 & 0x80000000) != 0)
    {
      v22 = *a2;
      v23 = a2[1];
      v24 = a2[3];
      *(_OWORD *)(a6 + 32) = a2[2];
      *(_OWORD *)(a6 + 48) = v24;
      *(_OWORD *)a6 = v22;
      *(_OWORD *)(a6 + 16) = v23;
      if (a8)
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)a6, a8);
      goto LABEL_11;
    }
    if (v14 <= v15)
      break;
    v16 = *a2;
    v17 = a2[1];
    v18 = a2[3];
    v28 = a2[2];
    v29 = v18;
    v26 = v16;
    v27 = v17;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v26, (float *)(a4 + (v15 << 6)));
    v19 = v29;
    v21 = v26;
    v20 = v27;
    *(_OWORD *)(a6 + 32) = v28;
    *(_OWORD *)(a6 + 48) = v19;
    *(_OWORD *)a6 = v21;
    *(_OWORD *)(a6 + 16) = v20;
LABEL_11:
    ++v14;
    a2 += 4;
    a6 += 64;
    if (v14 >= (unint64_t)*a1)
      return 1;
  }
  *(_QWORD *)&v26 = "usdSkel/utils.cpp";
  *((_QWORD *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
  if (v14 == v15)
  {
    *(_QWORD *)&v27 = 259;
    *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v14);
  }
  else
  {
    *(_QWORD *)&v27 = 264;
    *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v14, v15);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, __int128 *a2, char *a3, uint64_t a4, char *a5, double *a6)
{
  pxrInternal__aapl__pxrReserved__ *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *__p;
  _BYTE *v30;
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  tbb::task_group_context *v34;
  _OWORD v35[8];
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v12 = (pxrInternal__aapl__pxrReserved__ *)sub_20C66D770(&__p, (unint64_t)a3);
  v33[0] = a2;
  v33[1] = a3;
  v32[0] = __p;
  v32[1] = (v30 - (_BYTE *)__p) >> 7;
  v31[0] = v32;
  v31[1] = v33;
  if ((unint64_t)a3 >= 0x3E8)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v12))
    {
      LODWORD(v35[0]) = 0;
      v36 = 65539;
      v37 = 55;
      tbb::task_group_context::init((uint64_t)v35, v13, v14, v15);
      v34 = (tbb::task_group_context *)v35;
      v16 = tbb::internal::allocate_root_with_context_proxy::allocate(&v34, 0x38uLL);
      *(_BYTE *)(v16 - 11) = 1;
      *(_QWORD *)v16 = &off_24C53F908;
      *(_QWORD *)(v16 + 8) = a3;
      *(_OWORD *)(v16 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v16 + 32) = v31;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v16);
      *(_DWORD *)(v16 + 48) = 0;
      *(_BYTE *)(v16 + 52) = 5;
      *(_QWORD *)(v16 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v16 - 40) + 16))(*(_QWORD *)(v16 - 40), v16, v16 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v35);
      goto LABEL_8;
    }
  }
  else if (!a3)
  {
    goto LABEL_8;
  }
  v18 = 0;
  v19 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(v33[0] + v18), 0, 0.0, (uint64_t)v35);
    v20 = (_OWORD *)(v32[0] + v18);
    v21 = v35[0];
    v22 = v35[1];
    v23 = v35[3];
    v20[2] = v35[2];
    v20[3] = v23;
    v20[1] = v22;
    v24 = v35[7];
    v25 = v35[5];
    v26 = v35[4];
    v20[6] = v35[6];
    v20[7] = v24;
    v20[4] = v26;
    v20[5] = v25;
    *v20 = v21;
    v18 += 128;
    --v19;
  }
  while (v19);
LABEL_8:
  v27 = sub_20C663D14(a1, a2, a3, (uint64_t)__p, (char *)((v30 - (_BYTE *)__p) >> 7), a4, a5, a6);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  return v27;
}

void sub_20C664378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::task *v23;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, __int128 *a2, char *a3, uint64_t a4, char *a5, float *a6)
{
  pxrInternal__aapl__pxrReserved__ *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p;
  _BYTE *v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  tbb::task_group_context *v31;
  _OWORD v32[8];
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v12 = (pxrInternal__aapl__pxrReserved__ *)sub_20C66DC1C(&__p, (unint64_t)a3);
  v30[0] = a2;
  v30[1] = a3;
  v29[0] = __p;
  v29[1] = (v27 - (_BYTE *)__p) >> 6;
  v28[0] = v29;
  v28[1] = v30;
  if ((unint64_t)a3 >= 0x3E8)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v12))
    {
      LODWORD(v32[0]) = 0;
      v33 = 65539;
      v34 = 55;
      tbb::task_group_context::init((uint64_t)v32, v13, v14, v15);
      v31 = (tbb::task_group_context *)v32;
      v16 = tbb::internal::allocate_root_with_context_proxy::allocate(&v31, 0x38uLL);
      *(_BYTE *)(v16 - 11) = 1;
      *(_QWORD *)v16 = &off_24C53F950;
      *(_QWORD *)(v16 + 8) = a3;
      *(_OWORD *)(v16 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v16 + 32) = v28;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v16);
      *(_DWORD *)(v16 + 48) = 0;
      *(_BYTE *)(v16 + 52) = 5;
      *(_QWORD *)(v16 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v16 - 40) + 16))(*(_QWORD *)(v16 - 40), v16, v16 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v32);
      goto LABEL_8;
    }
  }
  else if (!a3)
  {
    goto LABEL_8;
  }
  v18 = 0;
  v19 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse((float *)(v30[0] + v18), 0, 0.0, (uint64_t)v32);
    v20 = (_OWORD *)(v29[0] + v18);
    v21 = v32[0];
    v22 = v32[1];
    v23 = v32[3];
    v20[2] = v32[2];
    v20[3] = v23;
    *v20 = v21;
    v20[1] = v22;
    v18 += 64;
    --v19;
  }
  while (v19);
LABEL_8:
  v24 = sub_20C663F58(a1, a2, a3, (uint64_t)__p, (char *)((v27 - (_BYTE *)__p) >> 6), a4, a5, a6);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  return v24;
}

void sub_20C6645C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::task *v23;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  char *v10;
  __int128 *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;

  if (a4)
  {
    v10 = *a1;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v26 = &v18;
    sub_20BF5F980((unint64_t *)a4, (unint64_t)v10, &v26);
    v11 = *(__int128 **)(a2 + 32);
    v12 = *(char **)a2;
    v13 = *(_QWORD *)(a3 + 32);
    v14 = *(char **)a3;
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
    return sub_20C663D14(a1, v11, v12, v13, v14, *(_QWORD *)(a4 + 32), *(char **)a4, a5);
  }
  else
  {
    *(_QWORD *)&v18 = "usdSkel/utils.cpp";
    *((_QWORD *)&v18 + 1) = "UsdSkelComputeJointLocalTransforms";
    *(_QWORD *)&v19 = 353;
    *((_QWORD *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(const UsdSkelTopol"
                            "ogy &, const VtMatrix4dArray &, const VtMatrix4dArray &, VtMatrix4dArray *, const GfMatrix4d *)";
    LOBYTE(v20) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'jointLocalXforms' is null");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, uint64_t a2, uint64_t a3, double *a4)
{
  char *v8;
  __int128 *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;

  if (a3)
  {
    v8 = *a1;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v22 = &v14;
    sub_20BF5F980((unint64_t *)a3, (unint64_t)v8, &v22);
    v9 = *(__int128 **)(a2 + 32);
    v10 = *(char **)a2;
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
    return pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(a1, v9, v10, *(_QWORD *)(a3 + 32), *(char **)a3, a4);
  }
  else
  {
    *(_QWORD *)&v14 = "usdSkel/utils.cpp";
    *((_QWORD *)&v14 + 1) = "UsdSkelComputeJointLocalTransforms";
    *(_QWORD *)&v15 = 370;
    *((_QWORD *)&v15 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(const UsdSkelTopol"
                            "ogy &, const VtMatrix4dArray &, VtMatrix4dArray *, const GfMatrix4d *)";
    LOBYTE(v16) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'jointLocalXforms' is null");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, __int128 *a2, uint64_t a3, uint64_t a4, double *a5)
{
  return sub_20C663D14(a1, a2, *a1, a3, *a1, a4, *a1, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t initial_auto_partitioner_divisor;
  unsigned __int8 v15;
  _QWORD v16[5];
  unsigned __int8 v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  char **v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v21[0] = a1;
  v21[1] = a2;
  v20[0] = a3;
  v20[1] = a4;
  v19[0] = a5;
  v19[1] = a6;
  v18[0] = a7;
  v18[1] = a8;
  if (a4 != a2)
  {
    v23 = "usdSkel/utils.cpp";
    v24 = "UsdSkel_DecomposeTransforms";
    v25 = 558;
    v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", a3, a4, a2);
    return 0;
  }
  if (a6 != a4)
  {
    v23 = "usdSkel/utils.cpp";
    v24 = "UsdSkel_DecomposeTransforms";
    v25 = 563;
    v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", a3, a6, a4);
    return 0;
  }
  if (a8 != a4)
  {
    v23 = "usdSkel/utils.cpp";
    v24 = "UsdSkel_DecomposeTransforms";
    v25 = 568;
    v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", a3, a8, a4);
    return 0;
  }
  v17 = 0;
  v16[0] = v21;
  v16[1] = v20;
  v16[2] = v18;
  v16[3] = v19;
  v16[4] = &v17;
  if (a4 > 0x3E7)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      LODWORD(v23) = 0;
      v28 = 65539;
      v29 = 55;
      tbb::task_group_context::init((uint64_t)&v23, v10, v11, v12);
      v22 = &v23;
      v13 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v22, 0x38uLL);
      *(_BYTE *)(v13 - 11) = 1;
      *(_QWORD *)v13 = &off_24C53F998;
      *(_QWORD *)(v13 + 8) = a4;
      *(_OWORD *)(v13 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v13 + 32) = v16;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(_BYTE *)(v13 + 52) = 5;
      *(_QWORD *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v13 - 40) + 16))(*(_QWORD *)(v13 - 40), v13, v13 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v23);
    }
    else
    {
      sub_20C66E0B8(a4, (uint64_t)v16);
    }
  }
  else
  {
    sub_20C66E0B8(a4, (uint64_t)v16);
  }
  v15 = atomic_load(&v17);
  return (v15 & 1) == 0;
}

{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t initial_auto_partitioner_divisor;
  unsigned __int8 v15;
  _QWORD v16[5];
  unsigned __int8 v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  char **v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v21[0] = a1;
  v21[1] = a2;
  v20[0] = a3;
  v20[1] = a4;
  v19[0] = a5;
  v19[1] = a6;
  v18[0] = a7;
  v18[1] = a8;
  if (a4 != a2)
  {
    v23 = "usdSkel/utils.cpp";
    v24 = "UsdSkel_DecomposeTransforms";
    v25 = 558;
    v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", a3, a4, a2);
    return 0;
  }
  if (a6 != a4)
  {
    v23 = "usdSkel/utils.cpp";
    v24 = "UsdSkel_DecomposeTransforms";
    v25 = 563;
    v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", a3, a6, a4);
    return 0;
  }
  if (a8 != a4)
  {
    v23 = "usdSkel/utils.cpp";
    v24 = "UsdSkel_DecomposeTransforms";
    v25 = 568;
    v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", a3, a8, a4);
    return 0;
  }
  v17 = 0;
  v16[0] = v21;
  v16[1] = v20;
  v16[2] = v18;
  v16[3] = v19;
  v16[4] = &v17;
  if (a4 > 0x3E7)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      LODWORD(v23) = 0;
      v28 = 65539;
      v29 = 55;
      tbb::task_group_context::init((uint64_t)&v23, v10, v11, v12);
      v22 = &v23;
      v13 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v22, 0x38uLL);
      *(_BYTE *)(v13 - 11) = 1;
      *(_QWORD *)v13 = &off_24C53F9E0;
      *(_QWORD *)(v13 + 8) = a4;
      *(_OWORD *)(v13 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v13 + 32) = v16;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(_BYTE *)(v13 + 52) = 5;
      *(_QWORD *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v13 - 40) + 16))(*(_QWORD *)(v13 - 40), v13, v13 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v23);
    }
    else
    {
      sub_20C66E694(a4, (uint64_t)v16);
    }
  }
  else
  {
    sub_20C66E694(a4, (uint64_t)v16);
  }
  v15 = atomic_load(&v17);
  return (v15 & 1) == 0;
}

void sub_20C664A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  tbb::task *v29;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a25, v29);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a27);
  _Unwind_Resume(a1);
}

void sub_20C664CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  tbb::task *v29;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a25, v29);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a27);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(pxrInternal__aapl__pxrReserved__ *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(a1, a5, a2, a5, a3, a5, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;
  int **v29;

  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        v8 = *a1;
        LODWORD(v25) = 0;
        v24 = 0;
        v29 = (int **)&v24;
        sub_20BF5AD04(a2, v8, (uint64_t **)&v29);
        v9 = *a1;
        v29 = (int **)&v24;
        sub_20BF61270(a3, v9, (_OWORD **)&v29);
        v10 = *a1;
        WORD2(v29) = 0;
        LODWORD(v29) = 0;
        v24 = (char *)&v29;
        sub_20BF5B820((unint64_t *)a4, v10, (int **)&v24);
        v11 = (pxrInternal__aapl__pxrReserved__ *)a1[4];
        v12 = *a1;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
        v15 = (char *)a2[4];
        v16 = *a2;
        sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v17, v18);
        v19 = a3[4];
        v20 = *a3;
        sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v21, v22);
        return pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(v11, v12, v15, v16, v19, v20, *(_QWORD *)(a4 + 32), *(_QWORD *)a4);
      }
      v24 = "usdSkel/utils.cpp";
      v25 = "UsdSkelDecomposeTransforms";
      v26 = 654;
      v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(const VtMatrix4dArray &, VtVec3fArray *, V"
            "tQuatfArray *, VtVec3hArray *)";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'scales' pointer is null.");
    }
    else
    {
      v24 = "usdSkel/utils.cpp";
      v25 = "UsdSkelDecomposeTransforms";
      v26 = 650;
      v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(const VtMatrix4dArray &, VtVec3fArray *, V"
            "tQuatfArray *, VtVec3hArray *)";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotations' pointer is null.");
    }
  }
  else
  {
    v24 = "usdSkel/utils.cpp";
    v25 = "UsdSkelDecomposeTransforms";
    v26 = 646;
    v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(const VtMatrix4dArray &, VtVec3fArray *, VtQ"
          "uatfArray *, VtVec3hArray *)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'translations' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(float32x2_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::GfQuatf *a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v11;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  v8 = a8;
  if (a2 != a8)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkel_MakeTransforms";
    v16 = 738;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", (char *)a3, a2, a8);
    return 0;
  }
  if (a4 != a8)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkel_MakeTransforms";
    v16 = 743;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", (char *)a3, a4, a8);
    return 0;
  }
  if (a6 != a8)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkel_MakeTransforms";
    v16 = 748;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", (char *)a3, a6, a8);
    return 0;
  }
  if (a8)
  {
    v11 = a3;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v14, v11);
      pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, (uint64_t)&v14, a5, a7);
      a7 += 128;
      a5 += 3;
      v11 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v11 + 16);
      a1 = (float32x2_t *)((char *)a1 + 12);
      --v8;
    }
    while (v8);
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(float32x2_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::GfQuatf *a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, float32x2_t *a7, uint64_t a8)
{
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v11;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  v8 = a8;
  if (a2 != a8)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkel_MakeTransforms";
    v16 = 738;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", (char *)a3, a2, a8);
    return 0;
  }
  if (a4 != a8)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkel_MakeTransforms";
    v16 = 743;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", (char *)a3, a4, a8);
    return 0;
  }
  if (a6 != a8)
  {
    v14 = "usdSkel/utils.cpp";
    v15 = "UsdSkel_MakeTransforms";
    v16 = 748;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", (char *)a3, a6, a8);
    return 0;
  }
  if (a8)
  {
    v11 = a3;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v14, v11);
      pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (uint64_t)&v14, a5, a7);
      a7 += 8;
      a5 += 3;
      v11 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v11 + 16);
      a1 = (float32x2_t *)((char *)a1 + 12);
      --v8;
    }
    while (v8);
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(float32x2_t *a1, pxrInternal__aapl__pxrReserved__::GfQuatf *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(a1, a5, a2, a5, a3, a5, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::GfQuatf *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;

  if (a4)
  {
    v8 = *a1;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v26 = &v18;
    sub_20BF5F980((unint64_t *)a4, v8, &v26);
    v9 = (float32x2_t *)a1[4];
    v10 = *a1;
    v11 = (pxrInternal__aapl__pxrReserved__::GfQuatf *)a2[4];
    v12 = *a2;
    v13 = (unsigned __int16 *)a3[4];
    v14 = *a3;
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
    return pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(v9, v10, v11, v12, v13, v14, *(_QWORD *)(a4 + 32), *(_QWORD *)a4);
  }
  else
  {
    *(_QWORD *)&v18 = "usdSkel/utils.cpp";
    *((_QWORD *)&v18 + 1) = "UsdSkelMakeTransforms";
    *(_QWORD *)&v19 = 808;
    *((_QWORD *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(const VtVec3fArray &, const VtQ"
                            "uatfArray &, const VtVec3hArray &, VtMatrix4dArray *)";
    LOBYTE(v20) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent(uint64_t *a1, unint64_t *a2, float64x2_t *a3, int32x2_t a4)
{
  _BOOL8 v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  uint64_t v16;
  int v17;
  uint64_t *v18;

  *(_OWORD *)v15 = xmmword_20CA9EF60;
  *(_QWORD *)&v15[16] = 0x80000000800000;
  v5 = pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1[4], *a1, (uint64_t)v15, a3, a4);
  if (v5)
  {
    v17 = 0;
    v16 = 0;
    v18 = &v16;
    sub_20BF5AD04(a2, 2uLL, &v18);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v6, v7);
    v8 = a2[4];
    v9 = *(_QWORD *)v15;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)&v15[8];
    *(_QWORD *)v8 = v9;
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v10, v11);
    v12 = a2[4];
    v13 = *(_QWORD *)&v15[12];
    *(_DWORD *)(v12 + 20) = *(_DWORD *)&v15[20];
    *(_QWORD *)(v12 + 12) = v13;
  }
  return v5;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent(uint64_t a1, uint64_t a2, unint64_t *a3, float64x2_t *a4, int32x2_t a5)
{
  _BOOL8 v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;
  int v18;
  uint64_t *v19;

  *(_OWORD *)v16 = xmmword_20CA9EF60;
  *(_QWORD *)&v16[16] = 0x80000000800000;
  v6 = pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, a2, (uint64_t)v16, a4, a5);
  if (v6)
  {
    v18 = 0;
    v17 = 0;
    v19 = &v17;
    sub_20BF5AD04(a3, 2uLL, &v19);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    v9 = a3[4];
    v10 = *(_QWORD *)v16;
    *(_DWORD *)(v9 + 8) = *(_DWORD *)&v16[8];
    *(_QWORD *)v9 = v10;
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
    v13 = a3[4];
    v14 = *(_QWORD *)&v16[12];
    *(_DWORD *)(v13 + 20) = *(_DWORD *)&v16[20];
    *(_QWORD *)(v13 + 12) = v14;
  }
  return v6;
}

pxrInternal__aapl__pxrReserved__ *pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(uint64_t a1, unint64_t a2, char *a3, float a4)
{
  int v4;
  pxrInternal__aapl__pxrReserved__ *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t initial_auto_partitioner_divisor;
  _QWORD v15[3];
  float v16;
  int v17;
  _QWORD v18[2];
  tbb::task_group_context *v19;
  _DWORD v20[32];
  uint64_t v21;
  int v22;
  uint64_t v23;

  v4 = (int)a3;
  v23 = *MEMORY[0x24BDAC8D0];
  v18[0] = a1;
  v18[1] = a2;
  v17 = (int)a3;
  v16 = a4;
  v6 = (pxrInternal__aapl__pxrReserved__ *)sub_20C66559C(a2, (uint64_t)a3, a3);
  v7 = v6;
  if ((_DWORD)v6)
  {
    v8 = a2 / v4;
    v15[0] = v18;
    v15[1] = &v17;
    v15[2] = &v16;
    if (v8 > 0x3E7 && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      v20[0] = 0;
      v21 = 65539;
      v22 = 55;
      tbb::task_group_context::init((uint64_t)v20, v9, v10, v11);
      v19 = (tbb::task_group_context *)v20;
      v12 = tbb::internal::allocate_root_with_context_proxy::allocate(&v19, 0x38uLL);
      *(_BYTE *)(v12 - 11) = 1;
      *(_QWORD *)v12 = &off_24C53FA28;
      *(_QWORD *)(v12 + 8) = v8;
      *(_OWORD *)(v12 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v12 + 32) = v15;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v12);
      *(_DWORD *)(v12 + 48) = 0;
      *(_BYTE *)(v12 + 52) = 5;
      *(_QWORD *)(v12 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v12 - 40) + 16))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v20);
    }
    else
    {
      sub_20C66EC50(v8, (uint64_t)v15);
    }
  }
  return v7;
}

void sub_20C66555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  tbb::task *v19;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a15, v19);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C66559C(unint64_t a1, uint64_t a2, char *a3)
{
  char *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  char v8;

  if ((int)a2 < 1)
  {
    v4 = "usdSkel/utils.cpp";
    v5 = "_ValidateArrayShape";
    v6 = 914;
    v7 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateArrayShape(size_t, int)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v4, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of influences per component (%d): number of influences must be greater than zero.", a3, a2);
    return 0;
  }
  if (a1 % a2)
  {
    v4 = "usdSkel/utils.cpp";
    v5 = "_ValidateArrayShape";
    v6 = 909;
    v7 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateArrayShape(size_t, int)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v4, (pxrInternal__aapl__pxrReserved__ *)"Unexpected array size [%zu]: Size must be a multiple of the number of influences per component [%d].", a3, a1, a2);
    return 0;
  }
  return 1;
}

pxrInternal__aapl__pxrReserved__ *pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(uint64_t *a1, char *a2, char *a3)
{
  _QWORD v6[4];
  char v7;

  if (a1)
  {
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, (uint64_t)a2, a3);
    return pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(a1[4], *a1, a2, 0.00000011921);
  }
  else
  {
    v6[0] = "usdSkel/utils.cpp";
    v6[1] = "UsdSkelNormalizeWeights";
    v6[2] = 969;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(VtFloatArray *, int)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'weights' pointer is null.");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t initial_auto_partitioner_divisor;
  int *v14[3];
  int v15;
  _QWORD v16[2];
  _QWORD v17[2];
  tbb::task_group_context *v18;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v17[0] = a1;
  v17[1] = a2;
  v16[0] = a3;
  v16[1] = a4;
  v15 = a5;
  if (a2 == a4)
  {
    v6 = a5;
    result = sub_20C66559C(a2, a5, a3);
    if ((_DWORD)result)
    {
      if (v6 >= 2)
      {
        v8 = a2 / v6;
        v14[0] = &v15;
        v14[1] = (int *)v16;
        v14[2] = (int *)v17;
        if (v8 > 0x3E7
          && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)result))
        {
          LODWORD(v19[0]) = 0;
          v21 = 65539;
          v22 = 55;
          tbb::task_group_context::init((uint64_t)v19, v9, v10, v11);
          v18 = (tbb::task_group_context *)v19;
          v12 = tbb::internal::allocate_root_with_context_proxy::allocate(&v18, 0x38uLL);
          *(_BYTE *)(v12 - 11) = 1;
          *(_QWORD *)v12 = &off_24C53FA70;
          *(_QWORD *)(v12 + 8) = v8;
          *(_OWORD *)(v12 + 16) = xmmword_20CAF2950;
          *(_QWORD *)(v12 + 32) = v14;
          initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v12);
          *(_DWORD *)(v12 + 48) = 0;
          *(_BYTE *)(v12 + 52) = 5;
          *(_QWORD *)(v12 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v12 - 40) + 16))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
          tbb::task_group_context::~task_group_context((tbb::task_group_context *)v19);
        }
        else
        {
          sub_20C66F1A8(v14, 0, v8);
        }
      }
      return 1;
    }
  }
  else
  {
    v19[0] = "usdSkel/utils.cpp";
    v19[1] = "UsdSkelSortInfluences";
    v19[2] = 985;
    v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(TfSpan<int>, TfSpan<float>, int)";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v19, (pxrInternal__aapl__pxrReserved__ *)"Size of 'indices' [%zu] != size of 'weights' [%zu].", a3, a2, a4);
    return 0;
  }
  return result;
}

void sub_20C66589C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::task *v23;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, char **a2, char *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  if (a1)
  {
    if (a2)
    {
      sub_20BF64FC4(a1, (uint64_t)a2, a3);
      v6 = *((_QWORD *)a1 + 4);
      v7 = *(_QWORD *)a1;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v8, v9);
      return pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(v6, v7, a2[4], (uint64_t)*a2, (uint64_t)a3);
    }
    v11 = "usdSkel/utils.cpp";
    v12 = "UsdSkelSortInfluences";
    v13 = 1038;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(VtIntArray *, VtFloatArray *, int)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"'weights' pointer is null.");
  }
  else
  {
    v11 = "usdSkel/utils.cpp";
    v12 = "UsdSkelSortInfluences";
    v13 = 1034;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(VtIntArray *, VtFloatArray *, int)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"'indices' pointer is null.");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelExpandConstantInfluencesToVarying(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v12[4];
  char v13;
  int v14;

  if (a1)
  {
    if (a2)
    {
      v4 = *a1;
      v5 = *a1 * a2;
      v14 = 0;
      v12[0] = &v14;
      sub_20BF64D74(a1, v5, v12);
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v6, v7);
      v8 = a2 - 1;
      if (a2 != 1)
      {
        v9 = (char *)a1[4];
        v10 = 4 * v4;
        do
        {
          if (v4)
            memmove(&v9[v10], v9, 4 * v4);
          v10 += 4 * v4;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      sub_20BF56210(a1);
    }
  }
  else
  {
    v12[0] = "usdSkel/utils.cpp";
    v12[1] = "_ExpandConstantArray";
    v12[2] = (_DWORD *)1053;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExpandConstantArray(T *, size_t) [T = pxrInt"
             "ernal__aapl__pxrReserved__::VtArray<int>]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
  }
  return a1 != 0;
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v12[4];
  char v13;
  int v14;

  if (a1)
  {
    if (a2)
    {
      v4 = *a1;
      v5 = *a1 * a2;
      v14 = 0;
      v12[0] = &v14;
      sub_20BF56258(a1, v5, v12);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v6, v7);
      v8 = a2 - 1;
      if (a2 != 1)
      {
        v9 = (char *)a1[4];
        v10 = 4 * v4;
        do
        {
          if (v4)
            memmove(&v9[v10], v9, 4 * v4);
          v10 += 4 * v4;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      sub_20BF56210(a1);
    }
  }
  else
  {
    v12[0] = "usdSkel/utils.cpp";
    v12[1] = "_ExpandConstantArray";
    v12[2] = (_DWORD *)1053;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExpandConstantArray(T *, size_t) [T = pxrInt"
             "ernal__aapl__pxrReserved__::VtArray<float>]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
  }
  return a1 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelResizeInfluences(unint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26[4];
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  if ((_DWORD)a2 == (_DWORD)a3)
    return 1;
  v29 = v3;
  v30 = v4;
  if (a1)
  {
    v7 = (int)a3;
    v8 = a2;
    result = sub_20C66559C(*a1, a2, a3);
    if ((_DWORD)result)
    {
      if (*a1 >= v8)
      {
        v11 = *a1 / v8;
        if (v7 >= v8)
        {
          v28 = 0;
          v26[0] = &v28;
          sub_20BF64D74(a1, v11 * v7, v26);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v16, v17);
          v18 = 0;
          v19 = a1[4];
          v20 = v7 - (uint64_t)v8;
          if (v11 <= 1)
            v21 = 1;
          else
            v21 = v11;
          do
          {
            v22 = v11 + ~v18;
            if (v8 <= 0)
            {
              v25 = v22 * v7;
            }
            else
            {
              v23 = v22 * v8;
              v24 = v8 + 1;
              v25 = v22 * v7;
              do
              {
                *(_DWORD *)(v19 + 4 * ((v24 - 2) + v25)) = *(_DWORD *)(v19
                                                                                   + 4 * ((v24 - 2) + v23));
                --v24;
              }
              while (v24 > 1);
            }
            if (v20 >= 1)
              bzero((void *)(v19 + 4 * v8 + 4 * v25), 4 * (v20 - ((v20 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
            ++v18;
          }
          while (v18 != v21);
        }
        else
        {
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v9, v10);
          if (v11 >= 2)
          {
            v12 = a1[4];
            v13 = v11 - 1;
            v14 = (char *)(v12 + 4 * v8);
            v15 = (char *)(v12 + 4 * v7);
            do
            {
              if (v7)
                memmove(v15, v14, 4 * v7);
              v14 += 4 * v8;
              v15 += 4 * v7;
              --v13;
            }
            while (v13);
          }
          v28 = 0;
          v26[0] = &v28;
          sub_20BF64D74(a1, v11 * v7, v26);
        }
      }
      return 1;
    }
  }
  else
  {
    v26[0] = "usdSkel/utils.cpp";
    v26[1] = "_ResizeInfluences";
    v26[2] = (_DWORD *)1100;
    v26[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ResizeInfluences(VtArray<T> *, int, int, T) [T = int]";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v26, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
    return 0;
  }
  return result;
}

{
  int v4;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26[4];
  char v27;
  int v28;

  v4 = a2;
  if ((_DWORD)a2 != (_DWORD)a3)
  {
    if (!a1)
    {
      v26[0] = "usdSkel/utils.cpp";
      v26[1] = "_ResizeInfluences";
      v26[2] = (_DWORD *)1100;
      v26[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ResizeInfluences(VtArray<T> *, int, int, T) [T = float]";
      v27 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v26, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
      return 0;
    }
    result = sub_20C66559C(*a1, a2, a3);
    if (!(_DWORD)result)
      return result;
    v8 = *a1;
    if (*a1 >= v4)
    {
      v25 = v8 / v4;
      if ((int)a3 >= v4)
      {
        v28 = 0;
        v26[0] = &v28;
        sub_20BF56258(a1, v8 / v4 * (int)a3, v26);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v14, v15);
        v16 = v25;
        v17 = 0;
        v18 = a1[4];
        v19 = (int)a3 - (uint64_t)v4;
        if (v25 <= 1)
          v20 = 1;
        else
          v20 = v25;
        do
        {
          v21 = v16 + ~v17;
          if (v4 <= 0)
          {
            v24 = v21 * (int)a3;
          }
          else
          {
            v22 = v21 * v4;
            v23 = v4 + 1;
            v24 = v21 * (int)a3;
            do
            {
              *(_DWORD *)(v18 + 4 * ((v23 - 2) + v24)) = *(_DWORD *)(v18
                                                                                 + 4 * ((v23 - 2) + v22));
              --v23;
            }
            while (v23 > 1);
          }
          if (v19 >= 1)
          {
            bzero((void *)(v18 + 4 * v4 + 4 * v24), 4 * (v19 - ((v19 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
            v16 = v25;
          }
          ++v17;
        }
        while (v17 != v20);
      }
      else
      {
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, a3);
        v9 = v25;
        if (v25 >= 2)
        {
          v10 = a1[4];
          v11 = v25 - 1;
          v12 = (char *)(v10 + 4 * v4);
          v13 = (char *)(v10 + 4 * (int)a3);
          do
          {
            if ((_DWORD)a3)
            {
              memmove(v13, v12, 4 * (int)a3);
              v9 = v25;
            }
            v12 += 4 * v4;
            v13 += 4 * (int)a3;
            --v11;
          }
          while (v11);
        }
        v28 = 0;
        v26[0] = &v28;
        sub_20BF56258(a1, v9 * (int)a3, v26);
      }
    }
  }
  if ((int)a3 >= v4)
    return 1;
  else
    return (uint64_t)pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights((uint64_t *)a1, a3, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInterleaveInfluences(_QWORD *a1, _QWORD *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  int v8;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  v4 = a2[1];
  v5 = a1[1];
  if (v4 != v5)
  {
    v10 = "usdSkel/utils.cpp";
    v11 = "UsdSkelInterleaveInfluences";
    v12 = 1196;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInterleaveInfluences(const TfSpan<const int> &, const TfSpan<con"
          "st float> &, TfSpan<GfVec2f>)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v10, (pxrInternal__aapl__pxrReserved__ *)"Size of weights [%zu] != size of indices [%zu]", a3, v4, v5);
    return 0;
  }
  if (a4 != v4)
  {
    v10 = "usdSkel/utils.cpp";
    v11 = "UsdSkelInterleaveInfluences";
    v12 = 1202;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInterleaveInfluences(const TfSpan<const int> &, const TfSpan<con"
          "st float> &, TfSpan<GfVec2f>)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v10, (pxrInternal__aapl__pxrReserved__ *)"Size of interleavedInfluences [%zu] != size of indices [%zu]", a3, a4, v4);
    return 0;
  }
  if (a4)
  {
    v6 = 0;
    v7 = (float *)(a3 + 4);
    do
    {
      v8 = *(_DWORD *)(*a2 + 4 * v6);
      *(v7 - 1) = (float)*(int *)(*a1 + 4 * v6);
      *(_DWORD *)v7 = v8;
      v7 += 2;
      ++v6;
    }
    while (v6 < a1[1]);
  }
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, tbb::task_group_context *a10, unint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  tbb::task_group_context *v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v35;
  _QWORD v36[4];
  uint64_t v37;
  void **p_p;
  void **v39;
  _QWORD *v40;
  void **v41;
  int *v42;
  void **v43;
  unsigned __int8 *v44;
  char v45;
  void *__p;
  _BYTE *v47;
  void *v48;
  _BYTE *v49;
  unsigned __int8 v50;
  unsigned int v51;
  tbb::task_group_context *v52[2];
  char **v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    v54 = "usdSkel/utils.cpp";
    v55 = "_NonInterleavedSkinPoints";
    v56 = 1590;
    v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a11 * (int)a9)
  {
    v54 = "usdSkel/utils.cpp";
    v55 = "_NonInterleavedSkinPoints";
    v56 = 1597;
    v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a11, a9);
    return 0;
  }
  v36[0] = a5;
  v36[1] = a6;
  v36[2] = a7;
  v36[3] = a6;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v17 = a10;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v48 = a3;
    v49 = (_BYTE *)a4;
    __p = a10;
    v47 = (_BYTE *)a11;
    LODWORD(v53) = a9;
    LOBYTE(v51) = 0;
    v37 = a2;
    p_p = &__p;
    v39 = (void **)&v53;
    v40 = v36;
    v41 = &v48;
    v42 = (int *)&v51;
    if (a11 < 0x3E8 || a12 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_20C67083C((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      v59 = 65539;
      v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v21, v22, v23);
      v52[0] = (tbb::task_group_context *)&v54;
      v24 = tbb::internal::allocate_root_with_context_proxy::allocate(v52, 0x38uLL);
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53FAB8;
      *(_QWORD *)(v24 + 8) = a11;
      *(_OWORD *)(v24 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v24 + 32) = &v37;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v24);
      *(_DWORD *)(v24 + 48) = 0;
      *(_BYTE *)(v24 + 52) = 5;
      *(_QWORD *)(v24 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v24 - 40) + 16))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    v35 = atomic_load((unsigned __int8 *)&v51);
    return (v35 & 1) == 0;
  }
  else
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
    {
      v18 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      v17 = a10;
    }
    v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((_QWORD *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v54 = "usdSkel/utils.cpp";
      v55 = "_NonInterleavedSkinPoints";
      v56 = 1609;
      v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, con"
            "st Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, con"
            "st BOOL) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      v58 = 0;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    v52[0] = v17;
    v52[1] = (tbb::task_group_context *)a11;
    v51 = a9;
    v50 = 0;
    sub_20C670FB0(&v48, a4);
    sub_20C671010(&__p, a4);
    v45 = 0;
    v26 = (pxrInternal__aapl__pxrReserved__ *)sub_20C670D80((uint64_t)a3, a4, (__n128 *)v48, (v49 - (_BYTE *)v48) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v47 - (_BYTE *)__p) >> 2), &v45);
    v37 = a2;
    p_p = (void **)v52;
    v39 = &v48;
    v40 = v36;
    v41 = (void **)&v51;
    v42 = (int *)&v45;
    v43 = &__p;
    v44 = &v50;
    if (a11 < 0x3E8 || (a12 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v26))
    {
      sub_20C67114C((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      v59 = 65539;
      v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v27, v28, v29);
      v53 = &v54;
      v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v53, 0x38uLL);
      *(_BYTE *)(v30 - 11) = 1;
      *(_QWORD *)v30 = &off_24C53FB00;
      *(_QWORD *)(v30 + 8) = a11;
      *(_OWORD *)(v30 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v30 + 32) = &v37;
      v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(_BYTE *)(v30 + 52) = 5;
      *(_QWORD *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v30 - 40) + 16))(*(_QWORD *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    v32 = atomic_load(&v50);
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    return (v32 & 1) == 0;
  }
}

{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  tbb::task_group_context *v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v35;
  _QWORD v36[4];
  uint64_t v37;
  void **p_p;
  void **v39;
  _QWORD *v40;
  void **v41;
  int *v42;
  void **v43;
  unsigned __int8 *v44;
  char v45;
  void *__p;
  _BYTE *v47;
  void *v48;
  _BYTE *v49;
  unsigned __int8 v50;
  unsigned int v51;
  tbb::task_group_context *v52[2];
  char **v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    v54 = "usdSkel/utils.cpp";
    v55 = "_NonInterleavedSkinPoints";
    v56 = 1590;
    v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a11 * (int)a9)
  {
    v54 = "usdSkel/utils.cpp";
    v55 = "_NonInterleavedSkinPoints";
    v56 = 1597;
    v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a11, a9);
    return 0;
  }
  v36[0] = a5;
  v36[1] = a6;
  v36[2] = a7;
  v36[3] = a6;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v17 = a10;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v48 = a3;
    v49 = (_BYTE *)a4;
    __p = a10;
    v47 = (_BYTE *)a11;
    LODWORD(v53) = a9;
    LOBYTE(v51) = 0;
    v37 = a2;
    p_p = &__p;
    v39 = (void **)&v53;
    v40 = v36;
    v41 = &v48;
    v42 = (int *)&v51;
    if (a11 < 0x3E8 || a12 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_20C671848((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      v59 = 65539;
      v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v21, v22, v23);
      v52[0] = (tbb::task_group_context *)&v54;
      v24 = tbb::internal::allocate_root_with_context_proxy::allocate(v52, 0x38uLL);
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53FB48;
      *(_QWORD *)(v24 + 8) = a11;
      *(_OWORD *)(v24 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v24 + 32) = &v37;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v24);
      *(_DWORD *)(v24 + 48) = 0;
      *(_BYTE *)(v24 + 52) = 5;
      *(_QWORD *)(v24 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v24 - 40) + 16))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    v35 = atomic_load((unsigned __int8 *)&v51);
    return (v35 & 1) == 0;
  }
  else
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
    {
      v18 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      v17 = a10;
    }
    v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((_QWORD *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v54 = "usdSkel/utils.cpp";
      v55 = "_NonInterleavedSkinPoints";
      v56 = 1609;
      v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, con"
            "st Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, con"
            "st BOOL) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      v58 = 0;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    v52[0] = v17;
    v52[1] = (tbb::task_group_context *)a11;
    v51 = a9;
    v50 = 0;
    sub_20C670FB0(&v48, a4);
    sub_20C671010(&__p, a4);
    v45 = 0;
    v26 = (pxrInternal__aapl__pxrReserved__ *)sub_20C671E1C((uint64_t)a3, a4, (__n128 *)v48, (v49 - (_BYTE *)v48) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v47 - (_BYTE *)__p) >> 2), &v45);
    v37 = a2;
    p_p = (void **)v52;
    v39 = &v48;
    v40 = v36;
    v41 = (void **)&v51;
    v42 = (int *)&v45;
    v43 = &__p;
    v44 = &v50;
    if (a11 < 0x3E8 || (a12 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v26))
    {
      sub_20C672054((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      v59 = 65539;
      v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v27, v28, v29);
      v53 = &v54;
      v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v53, 0x38uLL);
      *(_BYTE *)(v30 - 11) = 1;
      *(_QWORD *)v30 = &off_24C53FB90;
      *(_QWORD *)(v30 + 8) = a11;
      *(_OWORD *)(v30 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v30 + 32) = &v37;
      v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(_BYTE *)(v30 + 52) = 5;
      *(_QWORD *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v30 - 40) + 16))(*(_QWORD *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    v32 = atomic_load(&v50);
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    return (v32 & 1) == 0;
  }
}

void sub_20C666578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  tbb::task *v39;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a35, v39);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a37);
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_20C666AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  tbb::task *v39;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a35, v39);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a37);
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, unint64_t a10, char a11)
{
  int v11;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v34;
  _QWORD v35[2];
  uint64_t v36;
  void **p_p;
  void **v38;
  _QWORD *v39;
  void **v40;
  int *v41;
  void **v42;
  unsigned __int8 *v43;
  char v44;
  void *__p;
  _BYTE *v46;
  void *v47;
  _BYTE *v48;
  unsigned __int8 v49;
  int v50;
  tbb::task_group_context *v51[2];
  char **v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;

  v11 = a7;
  v60 = *MEMORY[0x24BDAC8D0];
  if (a6 != a10 * (int)a7)
  {
    v53 = "usdSkel/utils.cpp";
    v54 = "_InterleavedSkinPoints";
    v55 = 1559;
    v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const Ma"
          "trix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = pxrI"
          "nternal__aapl__pxrReserved__::GfMatrix4d]";
    v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a10, a7);
    return 0;
  }
  v35[0] = a5;
  v35[1] = a6;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v47 = a3;
    v48 = (_BYTE *)a4;
    __p = a9;
    v46 = (_BYTE *)a10;
    LODWORD(v52) = v11;
    LOBYTE(v50) = 0;
    v36 = a2;
    p_p = &__p;
    v38 = (void **)&v52;
    v39 = v35;
    v40 = &v47;
    v41 = &v50;
    if (a10 < 0x3E8 || a11 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_20C6726E4((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      v58 = 65539;
      v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v20, v21, v22);
      v51[0] = (tbb::task_group_context *)&v53;
      v23 = tbb::internal::allocate_root_with_context_proxy::allocate(v51, 0x38uLL);
      *(_BYTE *)(v23 - 11) = 1;
      *(_QWORD *)v23 = &off_24C53FBD8;
      *(_QWORD *)(v23 + 8) = a10;
      *(_OWORD *)(v23 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v23 + 32) = &v36;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v23);
      *(_DWORD *)(v23 + 48) = 0;
      *(_BYTE *)(v23 + 52) = 5;
      *(_QWORD *)(v23 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v23 - 40) + 16))(*(_QWORD *)(v23 - 40), v23, v23 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    v34 = atomic_load((unsigned __int8 *)&v50);
    return (v34 & 1) == 0;
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((_QWORD *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v53 = "usdSkel/utils.cpp";
      v54 = "_InterleavedSkinPoints";
      v55 = 1571;
      v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const "
            "Matrix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = "
            "pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      v57 = 0;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    v51[0] = (tbb::task_group_context *)a9;
    v51[1] = (tbb::task_group_context *)a10;
    v50 = v11;
    v49 = 0;
    sub_20C670FB0(&v47, a4);
    sub_20C671010(&__p, a4);
    v44 = 0;
    v25 = (pxrInternal__aapl__pxrReserved__ *)sub_20C670D80((uint64_t)a3, a4, (__n128 *)v47, (v48 - (_BYTE *)v47) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v46 - (_BYTE *)__p) >> 2), &v44);
    v36 = a2;
    p_p = (void **)v51;
    v38 = &v47;
    v39 = v35;
    v40 = (void **)&v50;
    v41 = (int *)&v44;
    v42 = &__p;
    v43 = &v49;
    if (a10 < 0x3E8 || (a11 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v25))
    {
      sub_20C672C30((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      v58 = 65539;
      v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v26, v27, v28);
      v52 = &v53;
      v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v52, 0x38uLL);
      *(_BYTE *)(v29 - 11) = 1;
      *(_QWORD *)v29 = &off_24C53FC20;
      *(_QWORD *)(v29 + 8) = a10;
      *(_OWORD *)(v29 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v29 + 32) = &v36;
      v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(_BYTE *)(v29 + 52) = 5;
      *(_QWORD *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v29 - 40) + 16))(*(_QWORD *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    v31 = atomic_load(&v49);
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    return (v31 & 1) == 0;
  }
}

{
  int v11;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v34;
  _QWORD v35[2];
  uint64_t v36;
  void **p_p;
  void **v38;
  _QWORD *v39;
  void **v40;
  int *v41;
  void **v42;
  unsigned __int8 *v43;
  char v44;
  void *__p;
  _BYTE *v46;
  void *v47;
  _BYTE *v48;
  unsigned __int8 v49;
  int v50;
  tbb::task_group_context *v51[2];
  char **v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;

  v11 = a7;
  v60 = *MEMORY[0x24BDAC8D0];
  if (a6 != a10 * (int)a7)
  {
    v53 = "usdSkel/utils.cpp";
    v54 = "_InterleavedSkinPoints";
    v55 = 1559;
    v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const Ma"
          "trix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = pxrI"
          "nternal__aapl__pxrReserved__::GfMatrix4f]";
    v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a10, a7);
    return 0;
  }
  v35[0] = a5;
  v35[1] = a6;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v47 = a3;
    v48 = (_BYTE *)a4;
    __p = a9;
    v46 = (_BYTE *)a10;
    LODWORD(v52) = v11;
    LOBYTE(v50) = 0;
    v36 = a2;
    p_p = &__p;
    v38 = (void **)&v52;
    v39 = v35;
    v40 = &v47;
    v41 = &v50;
    if (a10 < 0x3E8 || a11 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_20C673340((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      v58 = 65539;
      v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v20, v21, v22);
      v51[0] = (tbb::task_group_context *)&v53;
      v23 = tbb::internal::allocate_root_with_context_proxy::allocate(v51, 0x38uLL);
      *(_BYTE *)(v23 - 11) = 1;
      *(_QWORD *)v23 = &off_24C53FC68;
      *(_QWORD *)(v23 + 8) = a10;
      *(_OWORD *)(v23 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v23 + 32) = &v36;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v23);
      *(_DWORD *)(v23 + 48) = 0;
      *(_BYTE *)(v23 + 52) = 5;
      *(_QWORD *)(v23 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v23 - 40) + 16))(*(_QWORD *)(v23 - 40), v23, v23 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    v34 = atomic_load((unsigned __int8 *)&v50);
    return (v34 & 1) == 0;
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((_QWORD *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v53 = "usdSkel/utils.cpp";
      v54 = "_InterleavedSkinPoints";
      v55 = 1571;
      v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const "
            "Matrix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = "
            "pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      v57 = 0;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    v51[0] = (tbb::task_group_context *)a9;
    v51[1] = (tbb::task_group_context *)a10;
    v50 = v11;
    v49 = 0;
    sub_20C670FB0(&v47, a4);
    sub_20C671010(&__p, a4);
    v44 = 0;
    v25 = (pxrInternal__aapl__pxrReserved__ *)sub_20C671E1C((uint64_t)a3, a4, (__n128 *)v47, (v48 - (_BYTE *)v47) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v46 - (_BYTE *)__p) >> 2), &v44);
    v36 = a2;
    p_p = (void **)v51;
    v38 = &v47;
    v39 = v35;
    v40 = (void **)&v50;
    v41 = (int *)&v44;
    v42 = &__p;
    v43 = &v49;
    if (a10 < 0x3E8 || (a11 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v25))
    {
      sub_20C67388C((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      v58 = 65539;
      v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v26, v27, v28);
      v52 = &v53;
      v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v52, 0x38uLL);
      *(_BYTE *)(v29 - 11) = 1;
      *(_QWORD *)v29 = &off_24C53FCB0;
      *(_QWORD *)(v29 + 8) = a10;
      *(_OWORD *)(v29 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v29 + 32) = &v36;
      v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(_BYTE *)(v29 + 52) = 5;
      *(_QWORD *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v29 - 40) + 16))(*(_QWORD *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    v31 = atomic_load(&v49);
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    return (v31 & 1) == 0;
  }
}

void sub_20C666FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  tbb::task *v37;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a33, v37);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a35);
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void sub_20C66748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  tbb::task *v37;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a33, v37);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a35);
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, tbb::task_group_context *a9, unint64_t a10, char a11)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(a1, a2, a3, a4, a5, a7, a6, a7, a8, a9, a10, a11);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unsigned int a6, tbb::task_group_context **this)
{
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  char v19;

  if (this)
  {
    v11 = *(char **)(a3 + 32);
    v12 = *(_QWORD *)a3;
    v13 = a4[4];
    v14 = *a4;
    v15 = a5[4];
    v16 = *a5;
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)this, a2, (char *)a3);
    return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(a1, a2, v11, v12, v13, v14, v15, v16, a6, this[4], (unint64_t)*this, 0);
  }
  else
  {
    v18[0] = "usdSkel/utils.cpp";
    v18[1] = "UsdSkelSkinPoints";
    v18[2] = 1718;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(const TfToken &, const GfMatrix4d &, const VtMatri"
             "x4dArray &, const VtIntArray &, const VtFloatArray &, const int, VtVec3fArray *)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'points' pointer is null.");
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, tbb::task_group_context *a9, unint64_t a10, char a11)
{
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v19;

  v12 = a7;
  v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    v19 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v12 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)v19 + 3, a1, a2, a3, a4, a5, a6, v12, a8, a9, a10, a11);
}

{
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v19;

  v12 = a7;
  v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    v19 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v12 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)v19 + 3, a1, a2, a3, a4, a5, a6, v12, a8, a9, a10, a11);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, char a9)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;

  v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17)
    v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)v17 + 3, a1, a2, a3, a4, a5, a6, a8, a7, a8, a9);
}

{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;

  v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17)
    v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)v17 + 3, a1, a2, a3, a4, a5, a6, a8, a7, a8, a9);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, tbb::task_group_context *a8, unint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v18;

  v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v18)
    v18 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)v18 + 3, a1, a2, a3, a4, a6, a5, a6, a7, a8, a9, a10);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int a5, tbb::task_group_context **this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v12;

  v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v12)
    v12 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)v12 + 3, a1, a2, a3, a4, a5, this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, tbb::task_group_context *a10, unint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  tbb::task_group_context *v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v35;
  char v36;
  _QWORD v37[4];
  void **p_p;
  uint64_t v39;
  unsigned __int8 *v40;
  void **v41;
  _QWORD *v42;
  void **v43;
  int *v44;
  void **v45;
  unsigned __int8 *v46;
  char v47;
  void *__p;
  _BYTE *v49;
  char *v50;
  _BYTE *v51;
  unsigned __int8 v52;
  unsigned int v53;
  tbb::task_group_context *v54[2];
  char **v55;
  char *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  char v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    v56 = "usdSkel/utils.cpp";
    v57 = "_NonInterleavedSkinNormals";
    v58 = 2110;
    v59 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v60 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a11 * (int)a9)
  {
    v56 = "usdSkel/utils.cpp";
    v57 = "_NonInterleavedSkinNormals";
    v58 = 2117;
    v59 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v60 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a11, a9);
    return 0;
  }
  v37[0] = a5;
  v37[1] = a6;
  v37[2] = a7;
  v37[3] = a6;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v17 = a10;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v50 = a3;
    v51 = (_BYTE *)a4;
    __p = a10;
    v49 = (_BYTE *)a11;
    LODWORD(v55) = a9;
    LOBYTE(v53) = 0;
    p_p = &__p;
    v39 = a2;
    v40 = &v52;
    v41 = (void **)&v55;
    v42 = v37;
    v43 = (void **)&v50;
    v44 = (int *)&v53;
    if (a11 < 0x3E8 || a12 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_20C673F30((uint64_t)&p_p, 0, a11);
    }
    else
    {
      LODWORD(v56) = 0;
      v61 = 65539;
      v62 = 55;
      tbb::task_group_context::init((uint64_t)&v56, v21, v22, v23);
      v54[0] = (tbb::task_group_context *)&v56;
      v24 = tbb::internal::allocate_root_with_context_proxy::allocate(v54, 0x38uLL);
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53FCF8;
      *(_QWORD *)(v24 + 8) = a11;
      *(_OWORD *)(v24 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v24 + 32) = &p_p;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v24);
      *(_DWORD *)(v24 + 48) = 0;
      *(_BYTE *)(v24 + 52) = 5;
      *(_QWORD *)(v24 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v24 - 40) + 16))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v56);
    }
    v35 = atomic_load((unsigned __int8 *)&v53);
    return (v35 & 1) == 0;
  }
  else
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
    {
      v18 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      v17 = a10;
    }
    v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((_QWORD *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v56 = "usdSkel/utils.cpp";
      v57 = "_NonInterleavedSkinNormals";
      v58 = 2131;
      v59 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, co"
            "nst Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, co"
            "nst BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      v60 = 0;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    v54[0] = v17;
    v54[1] = (tbb::task_group_context *)a11;
    v53 = a9;
    v52 = 0;
    sub_20C674630(&v50, a4);
    sub_20C674690(&__p, a4);
    v47 = 0;
    sub_20C6744D4((__int128 *)a3, a4, (uint64_t)v50, (v51 - v50) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v49 - (_BYTE *)__p) >> 3), &v47);
    p_p = (void **)v54;
    v39 = a2;
    v40 = (unsigned __int8 *)&v36;
    v41 = (void **)&v50;
    v42 = v37;
    v43 = (void **)&v53;
    v44 = (int *)&v47;
    v45 = &__p;
    v46 = &v52;
    if (a11 < 0x3E8 || (a12 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v26))
    {
      sub_20C674730((uint64_t)&p_p, 0, a11);
    }
    else
    {
      LODWORD(v56) = 0;
      v61 = 65539;
      v62 = 55;
      tbb::task_group_context::init((uint64_t)&v56, v27, v28, v29);
      v55 = &v56;
      v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v55, 0x38uLL);
      *(_BYTE *)(v30 - 11) = 1;
      *(_QWORD *)v30 = &off_24C53FD40;
      *(_QWORD *)(v30 + 8) = a11;
      *(_OWORD *)(v30 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v30 + 32) = &p_p;
      v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(_BYTE *)(v30 + 52) = 5;
      *(_QWORD *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v30 - 40) + 16))(*(_QWORD *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v56);
    }
    v32 = atomic_load(&v52);
    if (__p)
    {
      v49 = __p;
      operator delete(__p);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    return (v32 & 1) == 0;
  }
}

void sub_20C667F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  tbb::task *v41;
  uint64_t v42;
  void *v44;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a37, v41);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a39);
  if (__p)
    operator delete(__p);
  v44 = *(void **)v42;
  if (*(_QWORD *)v42)
  {
    *(_QWORD *)(v42 + 8) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, unsigned int a15, tbb::task_group_context *a16, unint64_t a17, char a18)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v22;
  tbb::task_group_context *v23;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v42;
  char v43;
  _QWORD v44[4];
  void **p_p;
  uint64_t v46;
  unsigned __int8 *v47;
  void **v48;
  _QWORD *v49;
  void **v50;
  int *v51;
  void **v52;
  unsigned __int8 *v53;
  char v54;
  void *__p;
  _BYTE *v56;
  char *v57;
  _BYTE *v58;
  unsigned __int8 v59;
  unsigned int v60;
  tbb::task_group_context *v61[2];
  char **v62;
  char *v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  char v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    v63 = "usdSkel/utils.cpp";
    v64 = "_NonInterleavedSkinNormals";
    v65 = 2110;
    v66 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v63, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a17 * (int)a15)
  {
    v63 = "usdSkel/utils.cpp";
    v64 = "_NonInterleavedSkinNormals";
    v65 = 2117;
    v66 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v63, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a17, a15);
    return 0;
  }
  v44[0] = a5;
  v44[1] = a6;
  v44[2] = a7;
  v44[3] = a6;
  v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v22)
    v22 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v23 = a16;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v57 = a3;
    v58 = (_BYTE *)a4;
    __p = a16;
    v56 = (_BYTE *)a17;
    LODWORD(v62) = a15;
    LOBYTE(v60) = 0;
    p_p = &__p;
    v46 = a2;
    v47 = &v59;
    v48 = (void **)&v62;
    v49 = v44;
    v50 = (void **)&v57;
    v51 = (int *)&v60;
    if (a17 < 0x3E8 || a18 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v22))
    {
      sub_20C674E28((uint64_t)&p_p, 0, (char *)a17, a9, a10, a11, a12, a13, a14);
    }
    else
    {
      LODWORD(v63) = 0;
      v68 = 65539;
      v69 = 55;
      tbb::task_group_context::init((uint64_t)&v63, v27, v28, v29);
      v61[0] = (tbb::task_group_context *)&v63;
      v30 = tbb::internal::allocate_root_with_context_proxy::allocate(v61, 0x38uLL);
      *(_BYTE *)(v30 - 11) = 1;
      *(_QWORD *)v30 = &off_24C53FD88;
      *(_QWORD *)(v30 + 8) = a17;
      *(_OWORD *)(v30 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v30 + 32) = &p_p;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(_BYTE *)(v30 + 52) = 5;
      *(_QWORD *)(v30 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v30 - 40) + 16))(*(_QWORD *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v63);
    }
    v42 = atomic_load((unsigned __int8 *)&v60);
    return (v42 & 1) == 0;
  }
  else
  {
    v24 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v24)
    {
      v24 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      v23 = a16;
    }
    v25 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v25 != (*((_QWORD *)v24 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v63 = "usdSkel/utils.cpp";
      v64 = "_NonInterleavedSkinNormals";
      v65 = 2131;
      v66 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, co"
            "nst Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, co"
            "nst BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
      v67 = 0;
      if (v25)
      {
        v26 = (const char *)(v25 + 16);
        if (*(char *)(v25 + 39) < 0)
          v26 = *(const char **)v26;
      }
      else
      {
        v26 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v63, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v26);
      return 0;
    }
    v61[0] = v23;
    v61[1] = (tbb::task_group_context *)a17;
    v60 = a15;
    v59 = 0;
    sub_20C674630(&v57, a4);
    sub_20C671010(&__p, a4);
    v54 = 0;
    v32 = sub_20C6753D4((const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a4, (uint64_t)v57, (v58 - v57) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v56 - (_BYTE *)__p) >> 2), &v54);
    p_p = (void **)v61;
    v46 = a2;
    v47 = (unsigned __int8 *)&v43;
    v48 = (void **)&v57;
    v49 = v44;
    v50 = (void **)&v60;
    v51 = (int *)&v54;
    v52 = &__p;
    v53 = &v59;
    if (a17 < 0x3E8 || (a18 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v32))
    {
      sub_20C67553C((uint64_t)&p_p, 0, a17, v33);
    }
    else
    {
      LODWORD(v63) = 0;
      v68 = 65539;
      v69 = 55;
      tbb::task_group_context::init((uint64_t)&v63, v34, v35, v36);
      v62 = &v63;
      v37 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v62, 0x38uLL);
      *(_BYTE *)(v37 - 11) = 1;
      *(_QWORD *)v37 = &off_24C53FDD0;
      *(_QWORD *)(v37 + 8) = a17;
      *(_OWORD *)(v37 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v37 + 32) = &p_p;
      v38 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v37);
      *(_DWORD *)(v37 + 48) = 0;
      *(_BYTE *)(v37 + 52) = 5;
      *(_QWORD *)(v37 + 40) = (v38 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v37 - 40) + 16))(*(_QWORD *)(v37 - 40), v37, v37 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v63);
    }
    v39 = atomic_load(&v59);
    if (__p)
    {
      v56 = __p;
      operator delete(__p);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    return (v39 & 1) == 0;
  }
}

void sub_20C668470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  tbb::task *v41;
  uint64_t v42;
  void *v44;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a37, v41);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a39);
  if (__p)
    operator delete(__p);
  v44 = *(void **)v42;
  if (*(_QWORD *)v42)
  {
    *(_QWORD *)(v42 + 8) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, unint64_t a10, char a11)
{
  int v11;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v34;
  char v35;
  _QWORD v36[2];
  void **p_p;
  uint64_t v38;
  unsigned __int8 *v39;
  void **v40;
  _QWORD *v41;
  void **v42;
  int *v43;
  void **v44;
  unsigned __int8 *v45;
  char v46;
  void *__p;
  _BYTE *v48;
  void *v49;
  _BYTE *v50;
  unsigned __int8 v51;
  int v52;
  tbb::task_group_context *v53[2];
  char **v54;
  char *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  v11 = a7;
  v62 = *MEMORY[0x24BDAC8D0];
  if (a6 != a10 * (int)a7)
  {
    v55 = "usdSkel/utils.cpp";
    v56 = "_InterleavedSkinNormals";
    v57 = 2077;
    v58 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 = pxr"
          "Internal__aapl__pxrReserved__::GfMatrix3d]";
    v59 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v55, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a10, a7);
    return 0;
  }
  v36[0] = a5;
  v36[1] = a6;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v49 = a3;
    v50 = (_BYTE *)a4;
    __p = a9;
    v48 = (_BYTE *)a10;
    LODWORD(v54) = v11;
    LOBYTE(v52) = 0;
    p_p = &__p;
    v38 = a2;
    v39 = &v51;
    v40 = (void **)&v54;
    v41 = v36;
    v42 = &v49;
    v43 = &v52;
    if (a10 < 0x3E8 || a11 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_20C675C48((uint64_t)&p_p, 0, a10);
    }
    else
    {
      LODWORD(v55) = 0;
      v60 = 65539;
      v61 = 55;
      tbb::task_group_context::init((uint64_t)&v55, v20, v21, v22);
      v53[0] = (tbb::task_group_context *)&v55;
      v23 = tbb::internal::allocate_root_with_context_proxy::allocate(v53, 0x38uLL);
      *(_BYTE *)(v23 - 11) = 1;
      *(_QWORD *)v23 = &off_24C53FE18;
      *(_QWORD *)(v23 + 8) = a10;
      *(_OWORD *)(v23 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v23 + 32) = &p_p;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v23);
      *(_DWORD *)(v23 + 48) = 0;
      *(_BYTE *)(v23 + 52) = 5;
      *(_QWORD *)(v23 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v23 - 40) + 16))(*(_QWORD *)(v23 - 40), v23, v23 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v55);
    }
    v34 = atomic_load((unsigned __int8 *)&v52);
    return (v34 & 1) == 0;
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((_QWORD *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v55 = "usdSkel/utils.cpp";
      v56 = "_InterleavedSkinNormals";
      v57 = 2091;
      v58 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 ="
            " pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      v59 = 0;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v55, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    v53[0] = (tbb::task_group_context *)a9;
    v53[1] = (tbb::task_group_context *)a10;
    v52 = v11;
    v51 = 0;
    sub_20C674630(&v49, a4);
    sub_20C674690(&__p, a4);
    v46 = 0;
    sub_20C6744D4((__int128 *)a3, a4, (uint64_t)v49, (v50 - (_BYTE *)v49) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v48 - (_BYTE *)__p) >> 3), &v46);
    p_p = (void **)v53;
    v38 = a2;
    v39 = (unsigned __int8 *)&v35;
    v40 = &v49;
    v41 = v36;
    v42 = (void **)&v52;
    v43 = (int *)&v46;
    v44 = &__p;
    v45 = &v51;
    if (a10 < 0x3E8 || (a11 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v25))
    {
      sub_20C6761F4((uint64_t)&p_p, 0, a10);
    }
    else
    {
      LODWORD(v55) = 0;
      v60 = 65539;
      v61 = 55;
      tbb::task_group_context::init((uint64_t)&v55, v26, v27, v28);
      v54 = &v55;
      v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v54, 0x38uLL);
      *(_BYTE *)(v29 - 11) = 1;
      *(_QWORD *)v29 = &off_24C53FE60;
      *(_QWORD *)(v29 + 8) = a10;
      *(_OWORD *)(v29 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v29 + 32) = &p_p;
      v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(_BYTE *)(v29 + 52) = 5;
      *(_QWORD *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v29 - 40) + 16))(*(_QWORD *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v55);
    }
    v31 = atomic_load(&v51);
    if (__p)
    {
      v48 = __p;
      operator delete(__p);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    return (v31 & 1) == 0;
  }
}

void sub_20C668978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  tbb::task *v38;
  uint64_t v39;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a34, v38);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a36);
  if (__p)
    operator delete(__p);
  if (a28)
  {
    *(_QWORD *)(v39 + 8) = a28;
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, void *a15, unint64_t a16, char a17)
{
  int v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v22;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v41;
  char v42;
  _QWORD v43[2];
  void **p_p;
  uint64_t v45;
  unsigned __int8 *v46;
  void **v47;
  _QWORD *v48;
  void **v49;
  int *v50;
  void **v51;
  unsigned __int8 *v52;
  char v53;
  void *__p;
  _BYTE *v55;
  void *v56;
  _BYTE *v57;
  unsigned __int8 v58;
  int v59;
  tbb::task_group_context *v60[2];
  char **v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  char v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  v17 = a7;
  v69 = *MEMORY[0x24BDAC8D0];
  if (a6 != a16 * (int)a7)
  {
    v62 = "usdSkel/utils.cpp";
    v63 = "_InterleavedSkinNormals";
    v64 = 2077;
    v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 = pxr"
          "Internal__aapl__pxrReserved__::GfMatrix3f]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a16, a7);
    return 0;
  }
  v43[0] = a5;
  v43[1] = a6;
  v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v22)
    v22 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v56 = a3;
    v57 = (_BYTE *)a4;
    __p = a15;
    v55 = (_BYTE *)a16;
    LODWORD(v61) = v17;
    LOBYTE(v59) = 0;
    p_p = &__p;
    v45 = a2;
    v46 = &v58;
    v47 = (void **)&v61;
    v48 = v43;
    v49 = &v56;
    v50 = &v59;
    if (a16 < 0x3E8 || a17 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v22))
    {
      sub_20C6768F4((uint64_t)&p_p, 0, (char *)a16, a8, a9, a10, a11, a12, a13);
    }
    else
    {
      LODWORD(v62) = 0;
      v67 = 65539;
      v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v26, v27, v28);
      v60[0] = (tbb::task_group_context *)&v62;
      v29 = tbb::internal::allocate_root_with_context_proxy::allocate(v60, 0x38uLL);
      *(_BYTE *)(v29 - 11) = 1;
      *(_QWORD *)v29 = &off_24C53FEA8;
      *(_QWORD *)(v29 + 8) = a16;
      *(_OWORD *)(v29 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v29 + 32) = &p_p;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(_BYTE *)(v29 + 52) = 5;
      *(_QWORD *)(v29 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v29 - 40) + 16))(*(_QWORD *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    v41 = atomic_load((unsigned __int8 *)&v59);
    return (v41 & 1) == 0;
  }
  else
  {
    v23 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v23)
      v23 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v24 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v24 != (*((_QWORD *)v23 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v62 = "usdSkel/utils.cpp";
      v63 = "_InterleavedSkinNormals";
      v64 = 2091;
      v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 ="
            " pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
      v66 = 0;
      if (v24)
      {
        v25 = (const char *)(v24 + 16);
        if (*(char *)(v24 + 39) < 0)
          v25 = *(const char **)v25;
      }
      else
      {
        v25 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v25);
      return 0;
    }
    v60[0] = (tbb::task_group_context *)a15;
    v60[1] = (tbb::task_group_context *)a16;
    v59 = v17;
    v58 = 0;
    sub_20C674630(&v56, a4);
    sub_20C671010(&__p, a4);
    v53 = 0;
    v31 = sub_20C6753D4((const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a4, (uint64_t)v56, (v57 - (_BYTE *)v56) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v55 - (_BYTE *)__p) >> 2), &v53);
    p_p = (void **)v60;
    v45 = a2;
    v46 = (unsigned __int8 *)&v42;
    v47 = &v56;
    v48 = v43;
    v49 = (void **)&v59;
    v50 = (int *)&v53;
    v51 = &__p;
    v52 = &v58;
    if (a16 < 0x3E8 || (a17 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v31))
    {
      sub_20C676EB4((uint64_t)&p_p, 0, a16, v32);
    }
    else
    {
      LODWORD(v62) = 0;
      v67 = 65539;
      v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v33, v34, v35);
      v61 = &v62;
      v36 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v61, 0x38uLL);
      *(_BYTE *)(v36 - 11) = 1;
      *(_QWORD *)v36 = &off_24C53FEF0;
      *(_QWORD *)(v36 + 8) = a16;
      *(_OWORD *)(v36 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v36 + 32) = &p_p;
      v37 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v36);
      *(_DWORD *)(v36 + 48) = 0;
      *(_BYTE *)(v36 + 52) = 5;
      *(_QWORD *)(v36 + 40) = (v37 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v36 - 40) + 16))(*(_QWORD *)(v36 - 40), v36, v36 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    v38 = atomic_load(&v58);
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    return (v38 & 1) == 0;
  }
}

void sub_20C668E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  tbb::task *v38;
  uint64_t v39;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a34, v38);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a36);
  if (__p)
    operator delete(__p);
  if (a28)
  {
    *(_QWORD *)(v39 + 8) = a28;
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormals(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, tbb::task_group_context *a11, void *a12, tbb::task_group_context *a13, char a14)
{
  return sub_20C668F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

BOOL sub_20C668F40(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, tbb::task_group_context *a11, void *a12, tbb::task_group_context *a13, char a14)
{
  unsigned int v14;
  unint64_t v19;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v36;
  pxrInternal__aapl__pxrReserved__ *v37;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  _QWORD v41[2];
  int v42;
  _QWORD v43[4];
  void **p_p;
  uint64_t v45;
  _QWORD *v46;
  void **v47;
  _QWORD *v48;
  void **v49;
  int *v50;
  void **v51;
  unsigned __int8 *v52;
  char v53;
  void *__p;
  _BYTE *v55;
  void *v56;
  _BYTE *v57;
  unsigned __int8 v58;
  unsigned int v59;
  tbb::task_group_context *v60[2];
  char **v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  char v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    v62 = "usdSkel/utils.cpp";
    v63 = "_SkinFaceVaryingNormals";
    v64 = 2152;
    v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  v14 = a9;
  if (a6 % (int)a9)
  {
    v62 = "usdSkel/utils.cpp";
    v63 = "_SkinFaceVaryingNormals";
    v64 = 2159;
    v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] is not a multiple of numInfluencesPerPoint [%d]", a3, a6, a9);
    return 0;
  }
  if (a11 != a13)
  {
    v62 = "usdSkel/utils.cpp";
    v63 = "_SkinFaceVaryingNormals";
    v64 = 2165;
    v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of faceVertexIndices [%zu] != size of normals [%zu]", a3, a11, a13);
    return 0;
  }
  v43[0] = a5;
  v43[1] = a6;
  v43[2] = a7;
  v43[3] = a6;
  v41[0] = a10;
  v41[1] = a11;
  v42 = a6 / (int)a9;
  v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    v37 = a1;
    v38 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v14 = a9;
    v19 = (unint64_t)v38;
    a1 = v37;
  }
  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v19 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    v56 = a3;
    v57 = (_BYTE *)a4;
    __p = a12;
    v55 = a11;
    LODWORD(v61) = v14;
    LOBYTE(v59) = 0;
    p_p = &__p;
    v45 = a2;
    v46 = v41;
    v47 = (void **)&v61;
    v48 = v43;
    v49 = &v56;
    v50 = (int *)&v59;
    if ((unint64_t)a11 < 0x3E8 || a14 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      sub_20C6775D4((uint64_t)&p_p, 0, (unint64_t)a11);
    }
    else
    {
      LODWORD(v62) = 0;
      v67 = 65539;
      v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v23, v24, v25);
      v60[0] = (tbb::task_group_context *)&v62;
      v26 = tbb::internal::allocate_root_with_context_proxy::allocate(v60, 0x38uLL);
      *(_BYTE *)(v26 - 11) = 1;
      *(_QWORD *)v26 = &off_24C53FF38;
      *(_QWORD *)(v26 + 8) = a11;
      *(_OWORD *)(v26 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v26 + 32) = &p_p;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v26);
      *(_DWORD *)(v26 + 48) = 0;
      *(_BYTE *)(v26 + 52) = 5;
      *(_QWORD *)(v26 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v26 - 40) + 16))(*(_QWORD *)(v26 - 40), v26, v26 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    v36 = atomic_load((unsigned __int8 *)&v59);
    return (v36 & 1) == 0;
  }
  else
  {
    v20 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v20)
    {
      v39 = v14;
      v40 = a1;
      v20 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      v14 = v39;
      a1 = v40;
    }
    v21 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v21 != (*((_QWORD *)v20 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v62 = "usdSkel/utils.cpp";
      v63 = "_SkinFaceVaryingNormals";
      v64 = 2181;
      v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfS"
            "pan<GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      v66 = 0;
      if (v21)
      {
        v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0)
          v22 = *(const char **)v22;
      }
      else
      {
        v22 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v22);
      return 0;
    }
    v60[0] = (tbb::task_group_context *)a12;
    v60[1] = a11;
    v59 = v14;
    v58 = 0;
    sub_20C674630(&v56, a4);
    sub_20C674690(&__p, a4);
    v53 = 0;
    sub_20C6744D4((__int128 *)a3, a4, (uint64_t)v56, (v57 - (_BYTE *)v56) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v55 - (_BYTE *)__p) >> 3), &v53);
    p_p = (void **)v60;
    v45 = a2;
    v46 = v41;
    v47 = &v56;
    v48 = v43;
    v49 = (void **)&v59;
    v50 = (int *)&v53;
    v51 = &__p;
    v52 = &v58;
    if ((unint64_t)a11 < 0x3E8 || (a14 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v28))
    {
      sub_20C677C04((uint64_t)&p_p, 0, (unint64_t)a11);
    }
    else
    {
      LODWORD(v62) = 0;
      v67 = 65539;
      v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v29, v30, v31);
      v61 = &v62;
      v32 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v61, 0x38uLL);
      *(_BYTE *)(v32 - 11) = 1;
      *(_QWORD *)v32 = &off_24C53FF80;
      *(_QWORD *)(v32 + 8) = a11;
      *(_OWORD *)(v32 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v32 + 32) = &p_p;
      v33 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v32);
      *(_DWORD *)(v32 + 48) = 0;
      *(_BYTE *)(v32 + 52) = 5;
      *(_QWORD *)(v32 + 40) = (v33 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v32 - 40) + 16))(*(_QWORD *)(v32 - 40), v32, v32 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    v34 = atomic_load(&v58);
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    return (v34 & 1) == 0;
  }
}

void sub_20C669460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  tbb::task *v43;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a39, v43);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a41);
  if (__p)
    operator delete(__p);
  if (a33)
    operator delete(a33);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormals(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, char *a11, void *a12, char *a13, char a14)
{
  return sub_20C669520(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a10, a9, a10, a11, a12, a13, a14);
}

BOOL sub_20C669520(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9, unsigned int a10, uint64_t a11, char *a12, void *a13, char *a14, char a15)
{
  unsigned int v15;
  unint64_t v20;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v38;
  pxrInternal__aapl__pxrReserved__ *v39;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__ *v42;
  _QWORD v43[2];
  int v44;
  _QWORD v45[4];
  void **p_p;
  uint64_t v47;
  _QWORD *v48;
  void **v49;
  _QWORD *v50;
  void **v51;
  int *v52;
  void **v53;
  unsigned __int8 *v54;
  char v55;
  void *__p;
  _BYTE *v57;
  void *v58;
  _BYTE *v59;
  unsigned __int8 v60;
  unsigned int v61;
  tbb::task_group_context *v62[2];
  char **v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  char v68;
  uint64_t v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    v64 = "usdSkel/utils.cpp";
    v65 = "_SkinFaceVaryingNormals";
    v66 = 2152;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  v15 = a10;
  if (a6 % (int)a10)
  {
    v64 = "usdSkel/utils.cpp";
    v65 = "_SkinFaceVaryingNormals";
    v66 = 2159;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] is not a multiple of numInfluencesPerPoint [%d]", a3, a6, a10);
    return 0;
  }
  if (a12 != a14)
  {
    v64 = "usdSkel/utils.cpp";
    v65 = "_SkinFaceVaryingNormals";
    v66 = 2165;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Size of faceVertexIndices [%zu] != size of normals [%zu]", a3, a12, a14);
    return 0;
  }
  v45[0] = a5;
  v45[1] = a6;
  v45[2] = a7;
  v45[3] = a6;
  v43[0] = a11;
  v43[1] = a12;
  v44 = a6 / (int)a10;
  v20 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v20)
  {
    v39 = a1;
    v40 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v15 = a10;
    v20 = (unint64_t)v40;
    a1 = v39;
  }
  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v20 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    v58 = a3;
    v59 = (_BYTE *)a4;
    __p = a13;
    v57 = a12;
    LODWORD(v63) = v15;
    LOBYTE(v61) = 0;
    p_p = &__p;
    v47 = a2;
    v48 = v43;
    v49 = (void **)&v63;
    v50 = v45;
    v51 = &v58;
    v52 = (int *)&v61;
    if ((unint64_t)a12 < 0x3E8 || a15 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      sub_20C6782FC((uint64_t)&p_p, 0, a12, a9);
    }
    else
    {
      LODWORD(v64) = 0;
      v69 = 65539;
      v70 = 55;
      tbb::task_group_context::init((uint64_t)&v64, v24, v25, v26);
      v62[0] = (tbb::task_group_context *)&v64;
      v27 = tbb::internal::allocate_root_with_context_proxy::allocate(v62, 0x38uLL);
      *(_BYTE *)(v27 - 11) = 1;
      *(_QWORD *)v27 = &off_24C53FFC8;
      *(_QWORD *)(v27 + 8) = a12;
      *(_OWORD *)(v27 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v27 + 32) = &p_p;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v27);
      *(_DWORD *)(v27 + 48) = 0;
      *(_BYTE *)(v27 + 52) = 5;
      *(_QWORD *)(v27 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v27 - 40) + 16))(*(_QWORD *)(v27 - 40), v27, v27 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v64);
    }
    v38 = atomic_load((unsigned __int8 *)&v61);
    return (v38 & 1) == 0;
  }
  else
  {
    v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v21)
    {
      v41 = v15;
      v42 = a1;
      v21 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      v15 = v41;
      a1 = v42;
    }
    v22 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v22 != (*((_QWORD *)v21 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      v64 = "usdSkel/utils.cpp";
      v65 = "_SkinFaceVaryingNormals";
      v66 = 2181;
      v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfS"
            "pan<GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
      v68 = 0;
      if (v22)
      {
        v23 = (const char *)(v22 + 16);
        if (*(char *)(v22 + 39) < 0)
          v23 = *(const char **)v23;
      }
      else
      {
        v23 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v23);
      return 0;
    }
    v62[0] = (tbb::task_group_context *)a13;
    v62[1] = (tbb::task_group_context *)a12;
    v61 = v15;
    v60 = 0;
    sub_20C674630(&v58, a4);
    sub_20C671010(&__p, a4);
    v55 = 0;
    v29 = sub_20C6753D4((const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a4, (uint64_t)v58, (v59 - (_BYTE *)v58) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v57 - (_BYTE *)__p) >> 2), &v55);
    p_p = (void **)v62;
    v47 = a2;
    v48 = v43;
    v49 = &v58;
    v50 = v45;
    v51 = (void **)&v61;
    v52 = (int *)&v55;
    v53 = &__p;
    v54 = &v60;
    if ((unint64_t)a12 < 0x3E8 || (a15 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v29))
    {
      sub_20C67890C((uint64_t)&p_p, 0, a12, v30);
    }
    else
    {
      LODWORD(v64) = 0;
      v69 = 65539;
      v70 = 55;
      tbb::task_group_context::init((uint64_t)&v64, v31, v32, v33);
      v63 = &v64;
      v34 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v63, 0x38uLL);
      *(_BYTE *)(v34 - 11) = 1;
      *(_QWORD *)v34 = &off_24C540010;
      *(_QWORD *)(v34 + 8) = a12;
      *(_OWORD *)(v34 + 16) = xmmword_20CAF2950;
      *(_QWORD *)(v34 + 32) = &p_p;
      v35 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v34);
      *(_DWORD *)(v34 + 48) = 0;
      *(_BYTE *)(v34 + 52) = 5;
      *(_QWORD *)(v34 + 40) = (v35 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v34 - 40) + 16))(*(_QWORD *)(v34 - 40), v34, v34 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v64);
    }
    v36 = atomic_load(&v60);
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    return (v36 & 1) == 0;
  }
}

void sub_20C669A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  tbb::task *v43;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a39, v43);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a41);
  if (__p)
    operator delete(__p);
  if (a33)
    operator delete(a33);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, tbb::task_group_context *a9, unint64_t a10, char a11)
{
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v19;

  v12 = a7;
  v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    v19 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v12 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((_QWORD *)v19 + 3, a1, a2, a3, a4, a5, a6, v12, a8, a9, a10, a11);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, double a10, double a11, double a12, double a13, double a14, tbb::task_group_context *a15, unint64_t a16, char a17)
{
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v25;

  v18 = a7;
  v25 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v25)
  {
    v25 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((_QWORD *)v25 + 3, a1, a2, a3, a4, a5, a6, v18, a9, a10, a11, a12, a13, a14, a8, a15, a16, a17);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, char a9)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;

  v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17)
    v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((_QWORD *)v17 + 3, a1, a2, a3, a4, a5, a6, a8, a7, a8, a9);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v23;

  v23 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v23)
    v23 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((_QWORD *)v23 + 3, a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a8, a7, a8, a15);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, tbb::task_group_context *a10, void *a11, tbb::task_group_context *a12, char a13)
{
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v21;
  uint64_t v24;
  uint64_t v25;

  v16 = a5;
  v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v21)
  {
    v24 = a6;
    v25 = a7;
    v21 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v16 = a5;
    a6 = v24;
    a7 = v25;
  }
  return sub_20C668F40((pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v21 + 24), a1, a2, a3, a4, v16, a6, a7, a8, a9, a10, a11, a12, a13);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, uint64_t a10, char *a11, void *a12, char *a13, char a14)
{
  unint64_t v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v22;
  uint64_t v25;
  uint64_t v26;

  v17 = a5;
  v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v22)
  {
    v25 = a6;
    v26 = a7;
    v22 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v17 = a5;
    a6 = v25;
    a7 = v26;
  }
  return sub_20C669520((pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v22 + 24), a1, a2, a3, a4, v17, a6, a7, a9, a8, a10, a11, a12, a13, a14);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(_QWORD *a1, float64x2_t *a2, char *a3, unint64_t a4, unsigned int *a5, unint64_t a6, float *a7, uint64_t a8, uint64_t a9)
{
  return sub_20C669F40(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_20C669F40(_QWORD *a1, float64x2_t *a2, char *a3, unint64_t a4, unsigned int *a5, unint64_t a6, float *a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  BOOL v29;
  unint64_t v30;
  float v31;
  float v32;
  float32x2_t v33;
  float v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v47;
  float v48;
  uint64_t v49;
  double *v50;
  double v51;
  float v52;
  float v53;
  float32x2_t v54;
  float v55;
  float v56;
  float64x2_t v57;
  uint64_t v58;
  int v59;
  float v60;
  unsigned int *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  float64x2_t v68;
  float64x2_t *v69;
  char *v70;
  float64x2_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  char *v77;
  float64x2_t v78;
  char *v79;
  float64x2_t v80;
  float64x2_t v81;
  float v82;
  uint64_t v83;
  char *v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  uint64_t i;
  _BYTE *v97;
  _BYTE *v98;
  float *v99;
  float v100;
  double v101;
  double v102;
  float32x2_t v103;
  float v104;
  uint64_t v105;
  double *v106;
  double v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  uint64_t v112;
  const char *v113;
  char v114;
  void *__p[3];
  unsigned __int8 v116;
  void *v117;
  _BYTE *v118;
  void *v119;
  _BYTE *v120;
  _BYTE v121[24];
  const char *v122;
  float v123;
  float32x2_t v124;
  float v125;
  float64x2_t v126[2];
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    *(_QWORD *)&v126[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v126[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
    *(_QWORD *)&v126[1].f64[0] = 2612;
    *(_QWORD *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedSki"
                                 "nTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, "
                                 "TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v127.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((_QWORD *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_QWORD *)&v126[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v126[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
      *(_QWORD *)&v126[1].f64[0] = 2624;
      *(_QWORD *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedS"
                                   "kinTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const in"
                                   "t>, TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v127.f64[0]) = 0;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    if (!a9)
    {
      *(_QWORD *)&v126[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v126[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v126[1].f64[0] = 2494;
      *(_QWORD *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v127.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v126, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(*a7 + -1.0) < 0.000001)
    {
      v20 = *a5;
      if ((v20 & 0x80000000) == 0 && a4 > v20)
        goto LABEL_23;
      *(_QWORD *)&v126[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v126[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v126[1].f64[0] = 2509;
      *(_QWORD *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v127.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v20, a4);
      return 0;
    }
    sub_20C670FB0(&v119, a4);
    sub_20C671010(&v117, a4);
    v116 = 0;
    sub_20C670D80((uint64_t)a3, a4, (__n128 *)v119, (v120 - (_BYTE *)v119) >> 6, (uint64_t)v117, 0x8E38E38E38E38E39 * ((v118 - (_BYTE *)v117) >> 2), &v116);
    v52 = a2[7].f64[0];
    v53 = a2[1].f64[0];
    v54 = vcvt_f32_f64(a2[6]);
    *(float32x2_t *)v121 = vadd_f32(v54, vcvt_f32_f64(*a2));
    *(float32x2_t *)&v121[12] = vadd_f32(v54, vcvt_f32_f64(a2[2]));
    v55 = a2[3].f64[0];
    *(float *)&v121[8] = v52 + v53;
    *(float *)&v121[20] = v52 + v55;
    v56 = a2[5].f64[0];
    v122 = (const char *)vadd_f32(v54, vcvt_f32_f64(a2[4]));
    v124 = v54;
    v123 = v52 + v56;
    v125 = v52;
    v57 = 0uLL;
    if ((int)a6 < 1)
    {
      v68 = 0uLL;
      v63 = a9;
    }
    else
    {
      v58 = a6;
      v59 = -1;
      v60 = -1.0;
      v61 = a5;
      v62 = a7;
      v63 = a9;
      do
      {
        v65 = *v61++;
        v64 = v65;
        if ((v65 & 0x80000000) == 0 && (v120 - (_BYTE *)v119) >> 6 > v64 && (v60 < *v62 || v59 < 0))
        {
          v59 = v64;
          v60 = *v62;
        }
        ++v62;
        --v58;
      }
      while (v58);
      v68 = 0uLL;
      if ((v59 & 0x80000000) == 0)
      {
        v69 = (float64x2_t *)((char *)v119 + 64 * (unint64_t)v59);
        v68 = *v69;
        v57 = v69[1];
      }
    }
    v109 = v68;
    v110 = v57;
    v126[0].f64[0] = 0.0;
    LODWORD(v126[0].f64[1]) = 0;
    sub_20C679024(__p, 4uLL, (uint64_t *)v126);
    v71 = 0uLL;
    v127 = 0u;
    v128 = 0u;
    memset(v126, 0, sizeof(v126));
    if (a6)
    {
      v72 = 0;
      v29 = 0;
      v73 = (char *)v119;
      v74 = (v120 - (_BYTE *)v119) >> 6;
      v75 = *a5;
      if ((v75 & 0x80000000) != 0 || v74 <= v75)
      {
LABEL_78:
        *(_QWORD *)&v111.f64[0] = "usdSkel/utils.cpp";
        *(_QWORD *)&v111.f64[1] = "UsdSkel_SkinTransformDQS";
        v112 = 2581;
        v113 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4d, InfluencesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
        v114 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v111, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v70, v75, v72, v74);
LABEL_89:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v117)
        {
          v118 = v117;
          operator delete(v117);
        }
        if (v119)
        {
          v120 = v119;
          operator delete(v119);
        }
        return v29;
      }
      v72 = 0;
      v76 = v116;
      v77 = (char *)v117;
      v78 = 0uLL;
      v79 = (char *)__p[0];
      v80 = 0uLL;
      v81 = 0uLL;
      while (1)
      {
        v82 = a7[v72];
        if (v82 != 0.0)
        {
          if (v76)
          {
            v83 = 0;
            v84 = &v77[36 * v75];
            do
            {
              v85 = *(float *)&v121[v83];
              v86 = *(float *)&v121[v83 + 4];
              v87 = *(float *)&v121[v83 + 8];
              v88 = v82
                  * (float)((float)((float)(v85 * *((float *)v84 + 2)) + (float)(v86 * *((float *)v84 + 5)))
                          + (float)(v87 * *((float *)v84 + 8)));
              v89 = (float32x2_t *)&v79[v83];
              *v89 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v84, v85), vmul_n_f32(*(float32x2_t *)(v84 + 12), v86)), vmul_n_f32(*(float32x2_t *)(v84 + 24), v87)), v82), *(float32x2_t *)&v79[v83]);
              v89[1].f32[0] = v88 + *(float *)&v79[v83 + 8];
              v83 += 12;
            }
            while (v83 != 48);
          }
          v90 = (float64x2_t *)&v73[64 * v75];
          v91 = v90[1];
          v92 = vmulq_f64(v109, *v90);
          v93 = vmulq_f64(v110, v91);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v92, (float64x2_t)vdupq_laneq_s64((int64x2_t)v92, 1)), v93), (float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1)).f64[0] < 0.0)v82 = -v82;
          v94 = v82;
          v71 = vaddq_f64(v71, vmulq_n_f64(*v90, v94));
          v78 = vaddq_f64(v78, vmulq_n_f64(v91, v94));
          v80 = vaddq_f64(v80, vmulq_n_f64(v90[2], v94));
          v95 = vmulq_n_f64(v90[3], v94);
          v126[0] = v71;
          v126[1] = v78;
          v81 = vaddq_f64(v81, v95);
          v127 = v80;
          v128 = v81;
        }
        if (++v72 == a6)
          break;
        v75 = a5[v72];
        if ((v75 & 0x80000000) != 0 || v74 <= v75)
        {
          v29 = v72 >= a6;
          goto LABEL_78;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v126, 1.0e-10);
    for (i = 0; i != 48; i += 12)
    {
      if (v116)
        v97 = __p[0];
      else
        v97 = v121;
      v111.f64[0] = *(float *)&v97[i];
      v98 = &v121[i];
      v99 = (float *)((char *)__p[0] + i);
      if (!v116)
        v99 = (float *)&v121[i];
      v111.f64[1] = v99[1];
      *(double *)&v112 = v99[2];
      v100 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v126[0].f64, v111.f64);
      *(float *)&v101 = v101;
      *(float *)&v102 = v102;
      *(float *)&v121[i] = v100;
      *((_DWORD *)v98 + 1) = LODWORD(v101);
      *((_DWORD *)v98 + 2) = LODWORD(v102);
    }
    v103 = v124;
    v104 = v125;
    v111 = vcvtq_f64_f32(v124);
    *(double *)&v112 = v125;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(v63, (uint64_t)&v111);
    v105 = 0;
    v106 = (double *)(v63 + 16);
    do
    {
      v107 = (float)(*(float *)&v121[v105 + 8] - v104);
      *((float64x2_t *)v106 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)&v121[v105], v103));
      *v106 = v107;
      v106 += 4;
      v105 += 12;
    }
    while (v105 != 36);
    v29 = 1;
    goto LABEL_89;
  }
  if (!a9)
  {
    *(_QWORD *)&v126[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v126[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(_QWORD *)&v126[1].f64[0] = 2409;
    *(_QWORD *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
    LOBYTE(v127.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v126, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1 && fabs(*a7 + -1.0) < 0.000001)
  {
    v20 = *a5;
    if ((v20 & 0x80000000) == 0 && a4 > v20)
    {
LABEL_23:
      v21 = a2[5];
      v129 = a2[4];
      v130 = v21;
      v22 = a2[7];
      v131 = a2[6];
      v132 = v22;
      v23 = a2[1];
      v126[0] = *a2;
      v126[1] = v23;
      v24 = a2[3];
      v127 = a2[2];
      v128 = v24;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v126[0].f64, (double *)&a3[128 * v20]);
      v25 = v130;
      *(float64x2_t *)(a9 + 64) = v129;
      *(float64x2_t *)(a9 + 80) = v25;
      v26 = v132;
      *(float64x2_t *)(a9 + 96) = v131;
      *(float64x2_t *)(a9 + 112) = v26;
      v27 = v126[1];
      *(float64x2_t *)a9 = v126[0];
      *(float64x2_t *)(a9 + 16) = v27;
      v28 = v128;
      *(float64x2_t *)(a9 + 32) = v127;
      *(float64x2_t *)(a9 + 48) = v28;
      return 1;
    }
    *(_QWORD *)&v126[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v126[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(_QWORD *)&v126[1].f64[0] = 2424;
    *(_QWORD *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
    LOBYTE(v127.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v20, a4);
    return 0;
  }
  v30 = 0;
  v29 = 0;
  v31 = a2[7].f64[0];
  v32 = a2[1].f64[0];
  v33 = vcvt_f32_f64(a2[6]);
  *(float32x2_t *)&v126[0].f64[0] = vadd_f32(v33, vcvt_f32_f64(*a2));
  *(float32x2_t *)((char *)&v126[0].f64[1] + 4) = vadd_f32(v33, vcvt_f32_f64(a2[2]));
  v34 = a2[3].f64[0];
  *(float *)&v126[0].f64[1] = v31 + v32;
  *((float *)v126[1].f64 + 1) = v31 + v34;
  v35 = a2[5].f64[0];
  *(float32x2_t *)&v126[1].f64[1] = vadd_f32(v33, vcvt_f32_f64(a2[4]));
  *(float32x2_t *)((char *)v127.f64 + 4) = v33;
  *(float *)v127.f64 = v31 + v35;
  *((float *)&v127.f64[1] + 1) = v31;
  if (a6 <= 1)
    v36 = 1;
  else
    v36 = a6;
  v37 = a6;
  while (1)
  {
    v38 = (char *)v126 + 12 * v30;
    v111.f64[0] = *(float64_t *)v38;
    LODWORD(v111.f64[1]) = *((_DWORD *)v38 + 2);
    if (v37)
      break;
    v42 = 0.0;
    v41 = 0.0;
    v40 = 0.0;
LABEL_38:
    *(float *)v38 = v40;
    *((float *)v38 + 1) = v41;
    *((float *)v38 + 2) = v42;
    v29 = v30++ > 2;
    if (v30 == 4)
    {
      v47 = *(float32x2_t *)((char *)v127.f64 + 4);
      v48 = *((float *)&v127.f64[1] + 1);
      *(float64x2_t *)v121 = vcvtq_f64_f32(*(float32x2_t *)((char *)v127.f64 + 4));
      *(double *)&v121[16] = *((float *)&v127.f64[1] + 1);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(a9, (uint64_t)v121);
      v49 = 0;
      v50 = (double *)(a9 + 16);
      do
      {
        v51 = (float)(*(float *)((char *)&v126[0].f64[1] + v49) - v48);
        *((float64x2_t *)v50 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)((char *)v126[0].f64 + v49), v47));
        *v50 = v51;
        v50 += 4;
        v49 += 12;
      }
      while (v49 != 36);
      return 1;
    }
  }
  v39 = 0;
  v40 = 0.0;
  v41 = 0.0;
  v42 = 0.0;
  while (1)
  {
    v43 = a5[v39];
    if ((v43 & 0x80000000) != 0 || a4 <= v43)
      break;
    v44 = a7[v39];
    if (v44 != 0.0)
    {
      v40 = v40 + (float)(v44 * sub_20C6635D8((float64x2_t *)&a3[128 * v43], (float *)&v111).f32[0]);
      v41 = v41 + (float)(v44 * v45);
      v42 = v42 + (float)(v44 * v46);
    }
    if (v36 == ++v39)
    {
      v37 = a6;
      goto LABEL_38;
    }
  }
  *(_QWORD *)v121 = "usdSkel/utils.cpp";
  *(_QWORD *)&v121[8] = "UsdSkel_SkinTransformLBS";
  *(_QWORD *)&v121[16] = 2468;
  v122 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Matrix4 &, TfSpan<"
         "const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d, Influ"
         "encesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
  LOBYTE(v123) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v121, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, v43, v39, a4);
  return v29;
}

void sub_20C66A93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, unsigned int *a5, unint64_t a6, float *a7, uint64_t a8, int8x16_t a9, uint64_t a10)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  BOOL v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  unint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float32x2_t v46;
  float v47;
  float *v48;
  float v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float64x2_t v57;
  uint64_t v58;
  int v59;
  float v60;
  unsigned int *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  float64x2_t v68;
  float64x2_t *v69;
  char *v70;
  float64x2_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  char *v77;
  float64x2_t v78;
  char *v79;
  float64x2_t v80;
  float64x2_t v81;
  float v82;
  uint64_t v83;
  char *v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  uint64_t i;
  _BYTE *v97;
  _BYTE *v98;
  float *v99;
  float v100;
  double v101;
  double v102;
  uint64_t v103;
  float32x2_t v104;
  float v105;
  float *v106;
  float v107;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  double v112;
  uint64_t v113;
  const char *v114;
  char v115;
  void *__p[3];
  unsigned __int8 v117;
  void *v118;
  _BYTE *v119;
  void *v120;
  _BYTE *v121;
  _BYTE v122[36];
  double v123;
  __int32 v124;
  float64x2_t v125[3];
  float64x2_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  if (a6 != a8)
  {
    *(_QWORD *)&v125[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v125[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
    *(_QWORD *)&v125[1].f64[0] = 2612;
    *(_QWORD *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedSki"
                                 "nTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, "
                                 "TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v125[2].f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17)
    v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v17 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
      v18 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((_QWORD *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_QWORD *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v125[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
      *(_QWORD *)&v125[1].f64[0] = 2624;
      *(_QWORD *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedS"
                                   "kinTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const in"
                                   "t>, TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      LOBYTE(v125[2].f64[0]) = 0;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    if (!a10)
    {
      *(_QWORD *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v125[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v125[1].f64[0] = 2494;
      *(_QWORD *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v125[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v125, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(*a7 + -1.0) < 0.000001)
    {
      v21 = *a5;
      if ((v21 & 0x80000000) == 0 && a4 > v21)
        goto LABEL_23;
      *(_QWORD *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v125[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v125[1].f64[0] = 2509;
      *(_QWORD *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v125[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v21, a4);
      return 0;
    }
    sub_20C670FB0(&v120, a4);
    sub_20C671010(&v118, a4);
    v117 = 0;
    sub_20C671E1C((uint64_t)a3, a4, (__n128 *)v120, (v121 - (_BYTE *)v120) >> 6, (uint64_t)v118, 0x8E38E38E38E38E39 * ((v119 - (_BYTE *)v118) >> 2), &v117);
    v50.i32[0] = *(_DWORD *)(a2 + 56);
    v51 = *(float32x4_t *)(a2 + 4);
    v52 = *(float32x4_t *)(a2 + 24);
    v51.i64[1] = *(_QWORD *)(a2 + 16);
    v53 = *(int32x4_t *)(a2 + 36);
    v52.i32[1] = *(_DWORD *)(a2 + 32);
    v52.i64[1] = *(_QWORD *)(a2 + 36);
    v53.i64[0] = *(_QWORD *)(a2 + 48);
    *(float *)v122 = *(float *)v53.i32 + *(float *)a2;
    v54 = vuzp2q_s32(v53, vzip1q_s32(v53, v53));
    v55 = (float32x4_t)v54;
    v55.i32[1] = v50.i32[0];
    v55.i32[3] = v54.i32[0];
    *(float32x4_t *)&v122[4] = vaddq_f32(v55, v51);
    v56 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 4uLL), (int8x16_t)v53, 0xCuLL);
    v56.i32[3] = v56.i32[0];
    *(float32x4_t *)&v122[20] = vaddq_f32(v56, v52);
    v123 = *(double *)v53.i64;
    v124 = v50.i32[0];
    v57 = 0uLL;
    if ((int)a6 < 1)
    {
      v68 = 0uLL;
      v63 = a10;
    }
    else
    {
      v58 = a6;
      v59 = -1;
      v60 = -1.0;
      v61 = a5;
      v62 = a7;
      v63 = a10;
      do
      {
        v65 = *v61++;
        v64 = v65;
        if ((v65 & 0x80000000) == 0 && (v121 - (_BYTE *)v120) >> 6 > v64 && (v60 < *v62 || v59 < 0))
        {
          v59 = v64;
          v60 = *v62;
        }
        ++v62;
        --v58;
      }
      while (v58);
      v68 = 0uLL;
      if ((v59 & 0x80000000) == 0)
      {
        v69 = (float64x2_t *)((char *)v120 + 64 * (unint64_t)v59);
        v68 = *v69;
        v57 = v69[1];
      }
    }
    v109 = v68;
    v110 = v57;
    v125[0].f64[0] = 0.0;
    LODWORD(v125[0].f64[1]) = 0;
    sub_20C679024(__p, 4uLL, (uint64_t *)v125);
    v71 = 0uLL;
    v126 = 0u;
    memset(v125, 0, sizeof(v125));
    if (a6)
    {
      v72 = 0;
      v26 = 0;
      v73 = (char *)v120;
      v74 = (v121 - (_BYTE *)v120) >> 6;
      v75 = *a5;
      if ((v75 & 0x80000000) != 0 || v74 <= v75)
      {
LABEL_78:
        v111 = COERCE_DOUBLE("usdSkel/utils.cpp");
        v112 = COERCE_DOUBLE("UsdSkel_SkinTransformDQS");
        v113 = 2581;
        v114 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4f, InfluencesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
        v115 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v111, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v70, v75, v72, v74);
LABEL_89:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v118)
        {
          v119 = v118;
          operator delete(v118);
        }
        if (v120)
        {
          v121 = v120;
          operator delete(v120);
        }
        return v26;
      }
      v72 = 0;
      v76 = v117;
      v77 = (char *)v118;
      v78 = 0uLL;
      v79 = (char *)__p[0];
      v80 = 0uLL;
      v81 = 0uLL;
      while (1)
      {
        v82 = a7[v72];
        if (v82 != 0.0)
        {
          if (v76)
          {
            v83 = 0;
            v84 = &v77[36 * v75];
            do
            {
              v85 = *(float *)&v122[v83];
              v86 = *(float *)&v122[v83 + 4];
              v87 = *(float *)&v122[v83 + 8];
              v88 = v82
                  * (float)((float)((float)(v85 * *((float *)v84 + 2)) + (float)(v86 * *((float *)v84 + 5)))
                          + (float)(v87 * *((float *)v84 + 8)));
              v89 = (float32x2_t *)&v79[v83];
              *v89 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v84, v85), vmul_n_f32(*(float32x2_t *)(v84 + 12), v86)), vmul_n_f32(*(float32x2_t *)(v84 + 24), v87)), v82), *(float32x2_t *)&v79[v83]);
              v89[1].f32[0] = v88 + *(float *)&v79[v83 + 8];
              v83 += 12;
            }
            while (v83 != 48);
          }
          v90 = (float64x2_t *)&v73[64 * v75];
          v91 = v90[1];
          v92 = vmulq_f64(v109, *v90);
          v93 = vmulq_f64(v110, v91);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v92, (float64x2_t)vdupq_laneq_s64((int64x2_t)v92, 1)), v93), (float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1)).f64[0] < 0.0)v82 = -v82;
          v94 = v82;
          v71 = vaddq_f64(v71, vmulq_n_f64(*v90, v94));
          v78 = vaddq_f64(v78, vmulq_n_f64(v91, v94));
          v80 = vaddq_f64(v80, vmulq_n_f64(v90[2], v94));
          v95 = vmulq_n_f64(v90[3], v94);
          v125[0] = v71;
          v125[1] = v78;
          v81 = vaddq_f64(v81, v95);
          v125[2] = v80;
          v126 = v81;
        }
        if (++v72 == a6)
          break;
        v75 = a5[v72];
        if ((v75 & 0x80000000) != 0 || v74 <= v75)
        {
          v26 = v72 >= a6;
          goto LABEL_78;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v125, 1.0e-10);
    for (i = 0; i != 48; i += 12)
    {
      if (v117)
        v97 = __p[0];
      else
        v97 = v122;
      v111 = *(float *)&v97[i];
      v98 = &v122[i];
      v99 = (float *)((char *)__p[0] + i);
      if (!v117)
        v99 = (float *)&v122[i];
      v112 = v99[1];
      *(double *)&v113 = v99[2];
      v100 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v125[0].f64, &v111);
      *(float *)&v101 = v101;
      *(float *)&v102 = v102;
      *(float *)&v122[i] = v100;
      *((_DWORD *)v98 + 1) = LODWORD(v101);
      *((_DWORD *)v98 + 2) = LODWORD(v102);
    }
    v111 = v123;
    LODWORD(v112) = v124;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(v63, (uint64_t)&v111);
    v103 = 0;
    v104 = *(float32x2_t *)&v111;
    v105 = *(float *)&v112;
    v106 = (float *)(v63 + 8);
    do
    {
      v107 = *(float *)&v122[v103 + 8] - v105;
      *((float32x2_t *)v106 - 1) = vsub_f32(*(float32x2_t *)&v122[v103], v104);
      *v106 = v107;
      v106 += 4;
      v103 += 12;
    }
    while (v103 != 36);
    v26 = 1;
    goto LABEL_89;
  }
  if (!a10)
  {
    *(_QWORD *)&v125[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v125[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(_QWORD *)&v125[1].f64[0] = 2409;
    *(_QWORD *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
    LOBYTE(v125[2].f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v125, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1)
  {
    *(double *)a9.i64 = fabs(*a7 + -1.0);
    if (*(double *)a9.i64 < 0.000001)
    {
      v21 = *a5;
      if ((v21 & 0x80000000) == 0 && a4 > v21)
      {
LABEL_23:
        v22 = *(float64x2_t *)(a2 + 16);
        v125[0] = *(float64x2_t *)a2;
        v125[1] = v22;
        v23 = *(float64x2_t *)(a2 + 48);
        v125[2] = *(float64x2_t *)(a2 + 32);
        v126 = v23;
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)v125, (float *)&a3[64 * v21]);
        v24 = v125[1];
        *(float64x2_t *)a10 = v125[0];
        *(float64x2_t *)(a10 + 16) = v24;
        v25 = v126;
        *(float64x2_t *)(a10 + 32) = v125[2];
        *(float64x2_t *)(a10 + 48) = v25;
        return 1;
      }
      *(_QWORD *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v125[0].f64[1] = "UsdSkel_SkinTransformLBS";
      *(_QWORD *)&v125[1].f64[0] = 2424;
      *(_QWORD *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLB"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v125[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v21, a4);
      return 0;
    }
  }
  v27 = 0;
  v26 = 0;
  a9.i32[0] = *(_DWORD *)(a2 + 56);
  v28 = *(float32x4_t *)(a2 + 4);
  v29 = *(float32x4_t *)(a2 + 24);
  v28.i64[1] = *(_QWORD *)(a2 + 16);
  v29.i32[1] = *(_DWORD *)(a2 + 32);
  v30 = *(int32x4_t *)(a2 + 36);
  v29.i64[1] = *(_QWORD *)(a2 + 36);
  v30.i64[0] = *(_QWORD *)(a2 + 48);
  v31 = vuzp2q_s32(v30, vzip1q_s32(v30, v30));
  v32 = (float32x4_t)v31;
  v32.i32[1] = a9.i32[0];
  v32.i32[3] = v31.i32[0];
  *(float *)v31.i32 = *(float *)v30.i32 + *(float *)a2;
  *(float32x4_t *)((char *)v125 + 4) = vaddq_f32(v32, v28);
  v33 = (float32x4_t)vextq_s8(vextq_s8(a9, a9, 4uLL), (int8x16_t)v30, 0xCuLL);
  v33.i32[3] = v33.i32[0];
  *(float32x4_t *)((char *)&v125[1] + 4) = vaddq_f32(v33, v29);
  *(_QWORD *)((char *)v125[2].f64 + 4) = v30.i64[0];
  LODWORD(v125[0].f64[0]) = v31.i32[0];
  HIDWORD(v125[2].f64[1]) = a9.i32[0];
  if (a6 <= 1)
    v34 = 1;
  else
    v34 = a6;
  v35 = a6;
  while (1)
  {
    v36 = (char *)v125 + 12 * v27;
    v111 = *(double *)v36;
    LODWORD(v112) = *((_DWORD *)v36 + 2);
    if (v35)
      break;
    v40 = 0.0;
    v39 = 0.0;
    v38 = 0.0;
LABEL_38:
    *(float *)v36 = v38;
    *((float *)v36 + 1) = v39;
    *((float *)v36 + 2) = v40;
    v26 = v27++ > 2;
    if (v27 == 4)
    {
      *(float64_t *)v122 = *(float64_t *)((char *)v125[2].f64 + 4);
      *(_DWORD *)&v122[8] = HIDWORD(v125[2].f64[1]);
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(a10, (uint64_t)v122);
      v45 = 0;
      v46 = *(float32x2_t *)v122;
      v47 = *(float *)&v122[8];
      v48 = (float *)(a10 + 8);
      do
      {
        v49 = *(float *)((char *)&v125[0].f64[1] + v45) - v47;
        *((float32x2_t *)v48 - 1) = vsub_f32(*(float32x2_t *)((char *)v125[0].f64 + v45), v46);
        *v48 = v49;
        v48 += 4;
        v45 += 12;
      }
      while (v45 != 36);
      return 1;
    }
  }
  v37 = 0;
  v38 = 0.0;
  v39 = 0.0;
  v40 = 0.0;
  while (1)
  {
    v41 = a5[v37];
    if ((v41 & 0x80000000) != 0 || a4 <= v41)
      break;
    v42 = a7[v37];
    if (v42 != 0.0)
    {
      v38 = v38 + (float)(v42 * sub_20C663754((float32x2_t *)&a3[64 * v41], (float *)&v111).f32[0]);
      v39 = v39 + (float)(v42 * v43);
      v40 = v40 + (float)(v42 * v44);
    }
    if (v34 == ++v37)
    {
      v35 = a6;
      goto LABEL_38;
    }
  }
  *(_QWORD *)v122 = "usdSkel/utils.cpp";
  *(_QWORD *)&v122[8] = "UsdSkel_SkinTransformLBS";
  *(_QWORD *)&v122[16] = 2468;
  *(_QWORD *)&v122[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Ma"
                         "trix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__"
                         "pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespac"
                         "e)::_NonInterleavedInfluencesFn]";
  v122[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v122, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, v41, v37, a4);
  return v26;
}

void sub_20C66B350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(_QWORD *a1, float64x2_t *a2, char *a3, unint64_t a4, float *a5, unint64_t a6, uint64_t a7)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v14;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  BOOL v25;
  unint64_t v26;
  float v27;
  float v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v47;
  float v48;
  uint64_t v49;
  double *v50;
  double v51;
  float v52;
  float v53;
  float32x2_t v54;
  float v55;
  float v56;
  float64x2_t v57;
  uint64_t v58;
  float *v59;
  int v60;
  float v61;
  unint64_t v62;
  float64x2_t v65;
  float64x2_t *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  char *v73;
  float64x2_t v74;
  float64x2_t v75;
  char *v76;
  float64x2_t v77;
  float64x2_t v78;
  float v79;
  uint64_t v80;
  char *v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float32x2_t *v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  uint64_t i;
  _BYTE *v94;
  _BYTE *v95;
  float *v96;
  float v97;
  double v98;
  double v99;
  float32x2_t v100;
  float v101;
  uint64_t v102;
  double *v103;
  double v104;
  float64x2_t v106;
  uint64_t v107;
  float64x2_t v108;
  float64x2_t v109;
  uint64_t v110;
  const char *v111;
  char v112;
  void *__p[3];
  unsigned __int8 v114;
  void *v115;
  _BYTE *v116;
  void *v117;
  _BYTE *v118;
  _BYTE v119[24];
  const char *v120;
  float v121;
  float32x2_t v122;
  float v123;
  float64x2_t v124[2];
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v14 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v14)
    v14 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v14 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v15)
      v15 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v15 + 4) & 0xFFFFFFFFFFFFFFF8))
      return 0;
    if (!a7)
    {
      *(_QWORD *)&v124[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v124[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v124[1].f64[0] = 2494;
      *(_QWORD *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v125.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v124, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(a5[1] + -1.0) < 0.000001)
    {
      v16 = (int)*a5;
      if ((v16 & 0x80000000) == 0 && a4 > v16)
        goto LABEL_18;
      *(_QWORD *)&v124[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v124[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v124[1].f64[0] = 2509;
      *(_QWORD *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v125.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v124, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v16, a4);
      return 0;
    }
    sub_20C670FB0(&v117, a4);
    sub_20C671010(&v115, a4);
    v114 = 0;
    sub_20C670D80((uint64_t)a3, a4, (__n128 *)v117, (v118 - (_BYTE *)v117) >> 6, (uint64_t)v115, 0x8E38E38E38E38E39 * ((v116 - (_BYTE *)v115) >> 2), &v114);
    v52 = a2[7].f64[0];
    v53 = a2[1].f64[0];
    v54 = vcvt_f32_f64(a2[6]);
    *(float32x2_t *)v119 = vadd_f32(v54, vcvt_f32_f64(*a2));
    *(float32x2_t *)&v119[12] = vadd_f32(v54, vcvt_f32_f64(a2[2]));
    v55 = a2[3].f64[0];
    *(float *)&v119[8] = v52 + v53;
    *(float *)&v119[20] = v52 + v55;
    v56 = a2[5].f64[0];
    v120 = (const char *)vadd_f32(v54, vcvt_f32_f64(a2[4]));
    v122 = v54;
    v121 = v52 + v56;
    v123 = v52;
    v57 = 0uLL;
    if ((int)a6 < 1)
    {
      v65 = 0uLL;
    }
    else
    {
      v58 = a6;
      v59 = a5 + 1;
      v60 = -1;
      v61 = -1.0;
      do
      {
        v62 = (int)*(v59 - 1);
        if ((v62 & 0x80000000) == 0 && (v118 - (_BYTE *)v117) >> 6 > v62 && (v61 < *v59 || v60 < 0))
        {
          v60 = (int)*(v59 - 1);
          v61 = *v59;
        }
        v59 += 2;
        --v58;
      }
      while (v58);
      v65 = 0uLL;
      if ((v60 & 0x80000000) == 0)
      {
        v66 = (float64x2_t *)((char *)v117 + 64 * (unint64_t)v60);
        v65 = *v66;
        v57 = v66[1];
      }
    }
    v106 = v65;
    v108 = v57;
    v124[0].f64[0] = 0.0;
    LODWORD(v124[0].f64[1]) = 0;
    sub_20C679024(__p, 4uLL, (uint64_t *)v124);
    v125 = 0u;
    v126 = 0u;
    memset(v124, 0, sizeof(v124));
    if (a6)
    {
      v68 = 0;
      v25 = 0;
      v69 = (char *)v117;
      v70 = (v118 - (_BYTE *)v117) >> 6;
      v71 = (int)*a5;
      if ((v71 & 0x80000000) != 0 || v70 <= v71)
      {
LABEL_71:
        *(_QWORD *)&v109.f64[0] = "usdSkel/utils.cpp";
        *(_QWORD *)&v109.f64[1] = "UsdSkel_SkinTransformDQS";
        v110 = 2581;
        v111 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4d, InfluencesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
        v112 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v109, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v67, v71, v68, v70);
LABEL_82:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v115)
        {
          v116 = v115;
          operator delete(v115);
        }
        if (v117)
        {
          v118 = v117;
          operator delete(v117);
        }
        return v25;
      }
      v68 = 0;
      v72 = v114;
      v73 = (char *)v115;
      v74 = 0uLL;
      v75 = 0uLL;
      v76 = (char *)__p[0];
      v77 = 0uLL;
      v78 = 0uLL;
      while (1)
      {
        v79 = a5[2 * v68 + 1];
        if (v79 != 0.0)
        {
          if (v72)
          {
            v80 = 0;
            v81 = &v73[36 * v71];
            do
            {
              v82 = *(float *)&v119[v80];
              v83 = *(float *)&v119[v80 + 4];
              v84 = *(float *)&v119[v80 + 8];
              v85 = v79
                  * (float)((float)((float)(v82 * *((float *)v81 + 2)) + (float)(v83 * *((float *)v81 + 5)))
                          + (float)(v84 * *((float *)v81 + 8)));
              v86 = (float32x2_t *)&v76[v80];
              *v86 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v81, v82), vmul_n_f32(*(float32x2_t *)(v81 + 12), v83)), vmul_n_f32(*(float32x2_t *)(v81 + 24), v84)), v79), *(float32x2_t *)&v76[v80]);
              v86[1].f32[0] = v85 + *(float *)&v76[v80 + 8];
              v80 += 12;
            }
            while (v80 != 48);
          }
          v87 = (float64x2_t *)&v69[64 * v71];
          v88 = v87[1];
          v89 = vmulq_f64(v106, *v87);
          v90 = vmulq_f64(v108, v88);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v89, (float64x2_t)vdupq_laneq_s64((int64x2_t)v89, 1)), v90), (float64x2_t)vdupq_laneq_s64((int64x2_t)v90, 1)).f64[0] < 0.0)v79 = -v79;
          v91 = v79;
          v74 = vaddq_f64(v74, vmulq_n_f64(*v87, v91));
          v75 = vaddq_f64(v75, vmulq_n_f64(v88, v91));
          v77 = vaddq_f64(v77, vmulq_n_f64(v87[2], v91));
          v92 = vmulq_n_f64(v87[3], v91);
          v124[0] = v74;
          v124[1] = v75;
          v78 = vaddq_f64(v78, v92);
          v125 = v77;
          v126 = v78;
        }
        if (++v68 == a6)
          break;
        v71 = (int)a5[2 * v68];
        if ((v71 & 0x80000000) != 0 || v70 <= v71)
        {
          v25 = v68 >= a6;
          goto LABEL_71;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v124, 1.0e-10);
    for (i = 0; i != 48; i += 12)
    {
      if (v114)
        v94 = __p[0];
      else
        v94 = v119;
      v109.f64[0] = *(float *)&v94[i];
      v95 = &v119[i];
      v96 = (float *)((char *)__p[0] + i);
      if (!v114)
        v96 = (float *)&v119[i];
      v109.f64[1] = v96[1];
      *(double *)&v110 = v96[2];
      v97 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v124[0].f64, v109.f64);
      *(float *)&v98 = v98;
      *(float *)&v99 = v99;
      *(float *)&v119[i] = v97;
      *((_DWORD *)v95 + 1) = LODWORD(v98);
      *((_DWORD *)v95 + 2) = LODWORD(v99);
    }
    v100 = v122;
    v101 = v123;
    v109 = vcvtq_f64_f32(v122);
    *(double *)&v110 = v123;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(a7, (uint64_t)&v109);
    v102 = 0;
    v103 = (double *)(a7 + 16);
    do
    {
      v104 = (float)(*(float *)&v119[v102 + 8] - v101);
      *((float64x2_t *)v103 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)&v119[v102], v100));
      *v103 = v104;
      v103 += 4;
      v102 += 12;
    }
    while (v102 != 36);
    v25 = 1;
    goto LABEL_82;
  }
  if (!a7)
  {
    *(_QWORD *)&v124[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v124[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(_QWORD *)&v124[1].f64[0] = 2409;
    *(_QWORD *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_InterleavedInfluencesFn]";
    LOBYTE(v125.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v124, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1 && fabs(a5[1] + -1.0) < 0.000001)
  {
    v16 = (int)*a5;
    if ((v16 & 0x80000000) == 0 && a4 > v16)
    {
LABEL_18:
      v17 = a2[5];
      v127 = a2[4];
      v128 = v17;
      v18 = a2[7];
      v129 = a2[6];
      v130 = v18;
      v19 = a2[1];
      v124[0] = *a2;
      v124[1] = v19;
      v20 = a2[3];
      v125 = a2[2];
      v126 = v20;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v124[0].f64, (double *)&a3[128 * v16]);
      v21 = v128;
      *(float64x2_t *)(a7 + 64) = v127;
      *(float64x2_t *)(a7 + 80) = v21;
      v22 = v130;
      *(float64x2_t *)(a7 + 96) = v129;
      *(float64x2_t *)(a7 + 112) = v22;
      v23 = v124[1];
      *(float64x2_t *)a7 = v124[0];
      *(float64x2_t *)(a7 + 16) = v23;
      v24 = v126;
      *(float64x2_t *)(a7 + 32) = v125;
      *(float64x2_t *)(a7 + 48) = v24;
      return 1;
    }
    *(_QWORD *)&v124[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v124[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(_QWORD *)&v124[1].f64[0] = 2424;
    *(_QWORD *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFn = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_InterleavedInfluencesFn]";
    LOBYTE(v125.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v124, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v16, a4);
    return 0;
  }
  v107 = a7;
  v26 = 0;
  v25 = 0;
  v27 = a2[7].f64[0];
  v28 = a2[1].f64[0];
  v29 = vcvt_f32_f64(a2[6]);
  *(float32x2_t *)&v124[0].f64[0] = vadd_f32(v29, vcvt_f32_f64(*a2));
  *(float32x2_t *)((char *)&v124[0].f64[1] + 4) = vadd_f32(v29, vcvt_f32_f64(a2[2]));
  v30 = a2[3].f64[0];
  *(float *)&v124[0].f64[1] = v27 + v28;
  *((float *)v124[1].f64 + 1) = v27 + v30;
  v31 = a2[5].f64[0];
  v32 = v27 + v31;
  *(float32x2_t *)&v124[1].f64[1] = vadd_f32(v29, vcvt_f32_f64(a2[4]));
  *(float32x2_t *)((char *)v125.f64 + 4) = v29;
  if (a6 <= 1)
    v33 = 1;
  else
    v33 = a6;
  *(float *)v125.f64 = v32;
  *((float *)&v125.f64[1] + 1) = v27;
  v34 = a5 + 1;
  v35 = a6;
  while (1)
  {
    v36 = (char *)v124 + 12 * v26;
    v109.f64[0] = *(float64_t *)v36;
    LODWORD(v109.f64[1]) = *((_DWORD *)v36 + 2);
    if (v35)
      break;
    v41 = 0.0;
    v40 = 0.0;
    v38 = 0.0;
LABEL_33:
    *(float *)v36 = v38;
    *((float *)v36 + 1) = v40;
    *((float *)v36 + 2) = v41;
    v25 = v26++ > 2;
    if (v26 == 4)
    {
      v47 = *(float32x2_t *)((char *)v125.f64 + 4);
      v48 = *((float *)&v125.f64[1] + 1);
      *(float64x2_t *)v119 = vcvtq_f64_f32(*(float32x2_t *)((char *)v125.f64 + 4));
      *(double *)&v119[16] = *((float *)&v125.f64[1] + 1);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(v107, (uint64_t)v119);
      v49 = 0;
      v50 = (double *)(v107 + 16);
      do
      {
        v51 = (float)(*(float *)((char *)&v124[0].f64[1] + v49) - v48);
        *((float64x2_t *)v50 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)((char *)v124[0].f64 + v49), v47));
        *v50 = v51;
        v50 += 4;
        v49 += 12;
      }
      while (v49 != 36);
      return 1;
    }
  }
  v37 = 0;
  v38 = 0.0;
  v39 = v34;
  v40 = 0.0;
  v41 = 0.0;
  while (1)
  {
    v42 = *(v39 - 1);
    v43 = (int)v42;
    if ((v43 & 0x80000000) != 0 || a4 <= v43)
      break;
    v44 = *v39;
    if (*v39 != 0.0)
    {
      v38 = v38 + (float)(v44 * sub_20C6635D8((float64x2_t *)&a3[128 * v43], (float *)&v109).f32[0]);
      v40 = v40 + (float)(v44 * v45);
      v41 = v41 + (float)(v44 * v46);
    }
    ++v37;
    v39 += 2;
    if (v33 == v37)
    {
      v35 = a6;
      goto LABEL_33;
    }
  }
  *(_QWORD *)v119 = "usdSkel/utils.cpp";
  *(_QWORD *)&v119[8] = "UsdSkel_SkinTransformLBS";
  *(_QWORD *)&v119[16] = 2468;
  v120 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Matrix4 &, TfSpan<"
         "const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d, Influ"
         "encesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
  LOBYTE(v121) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v119, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, (int)v42, v37, a4);
  return v25;
}

void sub_20C66BD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, float *a5, unint64_t a6, uint64_t a7, int8x16_t a8)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v15;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  BOOL v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float32x2_t v45;
  float v46;
  float *v47;
  float v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float64x2_t v56;
  uint64_t v57;
  float *v58;
  int v59;
  float v60;
  unint64_t v61;
  float64x2_t v64;
  float64x2_t *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  char *v72;
  float64x2_t v73;
  float64x2_t v74;
  char *v75;
  float64x2_t v76;
  float64x2_t v77;
  float v78;
  uint64_t v79;
  char *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float32x2_t *v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  uint64_t i;
  _BYTE *v93;
  _BYTE *v94;
  float *v95;
  float v96;
  double v97;
  double v98;
  uint64_t v99;
  float32x2_t v100;
  float v101;
  float *v102;
  float v103;
  float64x2_t v105;
  uint64_t v106;
  float64x2_t v107;
  double v108;
  double v109;
  uint64_t v110;
  const char *v111;
  char v112;
  void *__p[3];
  unsigned __int8 v114;
  void *v115;
  _BYTE *v116;
  void *v117;
  _BYTE *v118;
  _BYTE v119[36];
  double v120;
  __int32 v121;
  float64x2_t v122[3];
  float64x2_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v15)
    v15 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v15 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v16)
      v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v16 + 4) & 0xFFFFFFFFFFFFFFF8))
      return 0;
    if (!a7)
    {
      *(_QWORD *)&v122[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v122[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v122[1].f64[0] = 2494;
      *(_QWORD *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v122[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v122, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(a5[1] + -1.0) < 0.000001)
    {
      v17 = (int)*a5;
      if ((v17 & 0x80000000) == 0 && a4 > v17)
        goto LABEL_18;
      *(_QWORD *)&v122[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v122[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(_QWORD *)&v122[1].f64[0] = 2509;
      *(_QWORD *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v122[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v122, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v17, a4);
      return 0;
    }
    sub_20C670FB0(&v117, a4);
    sub_20C671010(&v115, a4);
    v114 = 0;
    sub_20C671E1C((uint64_t)a3, a4, (__n128 *)v117, (v118 - (_BYTE *)v117) >> 6, (uint64_t)v115, 0x8E38E38E38E38E39 * ((v116 - (_BYTE *)v115) >> 2), &v114);
    v49.i32[0] = *(_DWORD *)(a2 + 56);
    v50 = *(float32x4_t *)(a2 + 4);
    v51 = *(float32x4_t *)(a2 + 24);
    v50.i64[1] = *(_QWORD *)(a2 + 16);
    v52 = *(int32x4_t *)(a2 + 36);
    v51.i32[1] = *(_DWORD *)(a2 + 32);
    v51.i64[1] = *(_QWORD *)(a2 + 36);
    v52.i64[0] = *(_QWORD *)(a2 + 48);
    *(float *)v119 = *(float *)v52.i32 + *(float *)a2;
    v53 = vuzp2q_s32(v52, vzip1q_s32(v52, v52));
    v54 = (float32x4_t)v53;
    v54.i32[1] = v49.i32[0];
    v54.i32[3] = v53.i32[0];
    *(float32x4_t *)&v119[4] = vaddq_f32(v54, v50);
    v55 = (float32x4_t)vextq_s8(vextq_s8(v49, v49, 4uLL), (int8x16_t)v52, 0xCuLL);
    v55.i32[3] = v55.i32[0];
    *(float32x4_t *)&v119[20] = vaddq_f32(v55, v51);
    v120 = *(double *)v52.i64;
    v121 = v49.i32[0];
    v56 = 0uLL;
    if ((int)a6 < 1)
    {
      v64 = 0uLL;
    }
    else
    {
      v57 = a6;
      v58 = a5 + 1;
      v59 = -1;
      v60 = -1.0;
      do
      {
        v61 = (int)*(v58 - 1);
        if ((v61 & 0x80000000) == 0 && (v118 - (_BYTE *)v117) >> 6 > v61 && (v60 < *v58 || v59 < 0))
        {
          v59 = (int)*(v58 - 1);
          v60 = *v58;
        }
        v58 += 2;
        --v57;
      }
      while (v57);
      v64 = 0uLL;
      if ((v59 & 0x80000000) == 0)
      {
        v65 = (float64x2_t *)((char *)v117 + 64 * (unint64_t)v59);
        v64 = *v65;
        v56 = v65[1];
      }
    }
    v105 = v64;
    v107 = v56;
    v122[0].f64[0] = 0.0;
    LODWORD(v122[0].f64[1]) = 0;
    sub_20C679024(__p, 4uLL, (uint64_t *)v122);
    v123 = 0u;
    memset(v122, 0, sizeof(v122));
    if (a6)
    {
      v67 = 0;
      v22 = 0;
      v68 = (char *)v117;
      v69 = (v118 - (_BYTE *)v117) >> 6;
      v70 = (int)*a5;
      if ((v70 & 0x80000000) != 0 || v69 <= v70)
      {
LABEL_71:
        v108 = COERCE_DOUBLE("usdSkel/utils.cpp");
        v109 = COERCE_DOUBLE("UsdSkel_SkinTransformDQS");
        v110 = 2581;
        v111 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4f, InfluencesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
        v112 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v108, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v66, v70, v67, v69);
LABEL_82:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v115)
        {
          v116 = v115;
          operator delete(v115);
        }
        if (v117)
        {
          v118 = v117;
          operator delete(v117);
        }
        return v22;
      }
      v67 = 0;
      v71 = v114;
      v72 = (char *)v115;
      v73 = 0uLL;
      v74 = 0uLL;
      v75 = (char *)__p[0];
      v76 = 0uLL;
      v77 = 0uLL;
      while (1)
      {
        v78 = a5[2 * v67 + 1];
        if (v78 != 0.0)
        {
          if (v71)
          {
            v79 = 0;
            v80 = &v72[36 * v70];
            do
            {
              v81 = *(float *)&v119[v79];
              v82 = *(float *)&v119[v79 + 4];
              v83 = *(float *)&v119[v79 + 8];
              v84 = v78
                  * (float)((float)((float)(v81 * *((float *)v80 + 2)) + (float)(v82 * *((float *)v80 + 5)))
                          + (float)(v83 * *((float *)v80 + 8)));
              v85 = (float32x2_t *)&v75[v79];
              *v85 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v80, v81), vmul_n_f32(*(float32x2_t *)(v80 + 12), v82)), vmul_n_f32(*(float32x2_t *)(v80 + 24), v83)), v78), *(float32x2_t *)&v75[v79]);
              v85[1].f32[0] = v84 + *(float *)&v75[v79 + 8];
              v79 += 12;
            }
            while (v79 != 48);
          }
          v86 = (float64x2_t *)&v68[64 * v70];
          v87 = v86[1];
          v88 = vmulq_f64(v105, *v86);
          v89 = vmulq_f64(v107, v87);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v88, (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1)), v89), (float64x2_t)vdupq_laneq_s64((int64x2_t)v89, 1)).f64[0] < 0.0)v78 = -v78;
          v90 = v78;
          v73 = vaddq_f64(v73, vmulq_n_f64(*v86, v90));
          v74 = vaddq_f64(v74, vmulq_n_f64(v87, v90));
          v76 = vaddq_f64(v76, vmulq_n_f64(v86[2], v90));
          v91 = vmulq_n_f64(v86[3], v90);
          v122[0] = v73;
          v122[1] = v74;
          v77 = vaddq_f64(v77, v91);
          v122[2] = v76;
          v123 = v77;
        }
        if (++v67 == a6)
          break;
        v70 = (int)a5[2 * v67];
        if ((v70 & 0x80000000) != 0 || v69 <= v70)
        {
          v22 = v67 >= a6;
          goto LABEL_71;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v122, 1.0e-10);
    for (i = 0; i != 48; i += 12)
    {
      if (v114)
        v93 = __p[0];
      else
        v93 = v119;
      v108 = *(float *)&v93[i];
      v94 = &v119[i];
      v95 = (float *)((char *)__p[0] + i);
      if (!v114)
        v95 = (float *)&v119[i];
      v109 = v95[1];
      *(double *)&v110 = v95[2];
      v96 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v122[0].f64, &v108);
      *(float *)&v97 = v97;
      *(float *)&v98 = v98;
      *(float *)&v119[i] = v96;
      *((_DWORD *)v94 + 1) = LODWORD(v97);
      *((_DWORD *)v94 + 2) = LODWORD(v98);
    }
    v108 = v120;
    LODWORD(v109) = v121;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(a7, (uint64_t)&v108);
    v99 = 0;
    v100 = *(float32x2_t *)&v108;
    v101 = *(float *)&v109;
    v102 = (float *)(a7 + 8);
    do
    {
      v103 = *(float *)&v119[v99 + 8] - v101;
      *((float32x2_t *)v102 - 1) = vsub_f32(*(float32x2_t *)&v119[v99], v100);
      *v102 = v103;
      v102 += 4;
      v99 += 12;
    }
    while (v99 != 36);
    v22 = 1;
    goto LABEL_82;
  }
  if (!a7)
  {
    *(_QWORD *)&v122[0].f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v122[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(_QWORD *)&v122[1].f64[0] = 2409;
    *(_QWORD *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_InterleavedInfluencesFn]";
    LOBYTE(v122[2].f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v122, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1)
  {
    *(double *)a8.i64 = fabs(a5[1] + -1.0);
    if (*(double *)a8.i64 < 0.000001)
    {
      v17 = (int)*a5;
      if ((v17 & 0x80000000) == 0 && a4 > v17)
      {
LABEL_18:
        v18 = *(float64x2_t *)(a2 + 16);
        v122[0] = *(float64x2_t *)a2;
        v122[1] = v18;
        v19 = *(float64x2_t *)(a2 + 48);
        v122[2] = *(float64x2_t *)(a2 + 32);
        v123 = v19;
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)v122, (float *)&a3[64 * v17]);
        v20 = v122[1];
        *(float64x2_t *)a7 = v122[0];
        *(float64x2_t *)(a7 + 16) = v20;
        v21 = v123;
        *(float64x2_t *)(a7 + 32) = v122[2];
        *(float64x2_t *)(a7 + 48) = v21;
        return 1;
      }
      *(_QWORD *)&v122[0].f64[0] = "usdSkel/utils.cpp";
      *(_QWORD *)&v122[0].f64[1] = "UsdSkel_SkinTransformLBS";
      *(_QWORD *)&v122[1].f64[0] = 2424;
      *(_QWORD *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLB"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v122[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v122, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v17, a4);
      return 0;
    }
  }
  v106 = a7;
  v23 = 0;
  v22 = 0;
  a8.i32[0] = *(_DWORD *)(a2 + 56);
  v24 = *(float32x4_t *)(a2 + 4);
  v25 = *(float32x4_t *)(a2 + 24);
  v24.i64[1] = *(_QWORD *)(a2 + 16);
  v26 = *(int32x4_t *)(a2 + 36);
  v25.i32[1] = *(_DWORD *)(a2 + 32);
  v25.i64[1] = *(_QWORD *)(a2 + 36);
  v26.i64[0] = *(_QWORD *)(a2 + 48);
  v27 = vuzp2q_s32(v26, vzip1q_s32(v26, v26));
  v28 = (float32x4_t)v27;
  v28.i32[1] = a8.i32[0];
  v28.i32[3] = v27.i32[0];
  *(float *)v27.i32 = *(float *)v26.i32 + *(float *)a2;
  *(float32x4_t *)((char *)v122 + 4) = vaddq_f32(v28, v24);
  v29 = (float32x4_t)vextq_s8(vextq_s8(a8, a8, 4uLL), (int8x16_t)v26, 0xCuLL);
  v29.i32[3] = v29.i32[0];
  *(float32x4_t *)((char *)&v122[1] + 4) = vaddq_f32(v29, v25);
  *(_QWORD *)((char *)v122[2].f64 + 4) = v26.i64[0];
  LODWORD(v122[0].f64[0]) = v27.i32[0];
  HIDWORD(v122[2].f64[1]) = a8.i32[0];
  if (a6 <= 1)
    v30 = 1;
  else
    v30 = a6;
  v31 = a5 + 1;
  v32 = a6;
  while (1)
  {
    v33 = (char *)v122 + 12 * v23;
    v108 = *(double *)v33;
    LODWORD(v109) = *((_DWORD *)v33 + 2);
    if (v32)
      break;
    v38 = 0.0;
    v37 = 0.0;
    v35 = 0.0;
LABEL_33:
    *(float *)v33 = v35;
    *((float *)v33 + 1) = v37;
    *((float *)v33 + 2) = v38;
    v22 = v23++ > 2;
    if (v23 == 4)
    {
      *(float64_t *)v119 = *(float64_t *)((char *)v122[2].f64 + 4);
      *(_DWORD *)&v119[8] = HIDWORD(v122[2].f64[1]);
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(v106, (uint64_t)v119);
      v44 = 0;
      v45 = *(float32x2_t *)v119;
      v46 = *(float *)&v119[8];
      v47 = (float *)(v106 + 8);
      do
      {
        v48 = *(float *)((char *)&v122[0].f64[1] + v44) - v46;
        *((float32x2_t *)v47 - 1) = vsub_f32(*(float32x2_t *)((char *)v122[0].f64 + v44), v45);
        *v47 = v48;
        v47 += 4;
        v44 += 12;
      }
      while (v44 != 36);
      return 1;
    }
  }
  v34 = 0;
  v35 = 0.0;
  v36 = v31;
  v37 = 0.0;
  v38 = 0.0;
  while (1)
  {
    v39 = *(v36 - 1);
    v40 = (int)v39;
    if ((v40 & 0x80000000) != 0 || a4 <= v40)
      break;
    v41 = *v36;
    if (*v36 != 0.0)
    {
      v35 = v35 + (float)(v41 * sub_20C663754((float32x2_t *)&a3[64 * v40], (float *)&v108).f32[0]);
      v37 = v37 + (float)(v41 * v42);
      v38 = v38 + (float)(v41 * v43);
    }
    ++v34;
    v36 += 2;
    if (v30 == v34)
    {
      v32 = a6;
      goto LABEL_33;
    }
  }
  *(_QWORD *)v119 = "usdSkel/utils.cpp";
  *(_QWORD *)&v119[8] = "UsdSkel_SkinTransformLBS";
  *(_QWORD *)&v119[16] = 2468;
  *(_QWORD *)&v119[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Ma"
                         "trix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__"
                         "pxrReserved__::GfMatrix4f, InfluencesFn = pxrInternal__aapl__pxrReserved__::(anonymous namespac"
                         "e)::_InterleavedInfluencesFn]";
  v119[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v119, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, (int)v39, v34, a4);
  return v22;
}

void sub_20C66C6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(pxrInternal__aapl__pxrReserved__ *this, float64x2_t *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a4, unsigned int *a5, float *a6, const float *a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a9)
{
  return sub_20C669F40(this, a2, (char *)a3, (unint64_t)a4, a5, (unint64_t)a7, a6, (uint64_t)a7, a8);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(float64x2_t *a1, char *a2, unint64_t a3, unsigned int *a4, unint64_t a5, float *a6, uint64_t a7, uint64_t a8)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;

  v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16)
    v16 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return sub_20C669F40((_QWORD *)v16 + 3, a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(uint64_t a1, char *a2, unint64_t a3, unsigned int *a4, unint64_t a5, float *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;

  v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17)
    v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform((_QWORD *)v17 + 3, a1, a2, a3, a4, a5, a6, a7, a9, a8);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(float64x2_t *a1, char *a2, unint64_t a3, float *a4, unint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v12;

  v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v12)
    v12 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform((_QWORD *)v12 + 3, a1, a2, a3, a4, a5, a6);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(uint64_t a1, char *a2, unint64_t a3, float *a4, unint64_t a5, uint64_t a6, int8x16_t a7)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;

  v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v13)
    v13 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform((_QWORD *)v13 + 3, a1, a2, a3, a4, a5, a6, a7);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(float64x2_t *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unsigned int *a4, float *a5, const float *a6, uint64_t a7, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a8)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v15;

  v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v15)
    v15 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  return sub_20C669F40((_QWORD *)v15 + 3, this, (char *)a2, (unint64_t)a3, a4, (unint64_t)a6, a5, (uint64_t)a6, a7);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(pxrInternal__aapl__pxrReserved__ *a1, unint64_t a2, char *a3, uint64_t a4, tbb::task_group_context *a5, tbb::task_group_context *a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  void **v19;
  tbb::task_group_context **v20;
  char ***v21;
  float *v22;
  unsigned __int8 *v23;
  unsigned __int8 v24;
  float v25;
  tbb::task_group_context *v26[2];
  void *v27;
  unint64_t v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  unint64_t v30;
  char **v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (fabsf(a7) < 0.000001)
    return 1;
  if (!a4)
  {
    if ((tbb::task_group_context *)a2 == a6)
    {
      v29 = a1;
      v30 = a2;
      v27 = a5;
      v28 = a2;
      *(float *)&v31 = a7;
      v19 = &v27;
      v20 = &v29;
      v21 = &v31;
      if (a2 > 0x3E7 && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
      {
        LODWORD(v32) = 0;
        v37 = 65539;
        v38 = 55;
        tbb::task_group_context::init((uint64_t)&v32, v9, v10, v11);
        v26[0] = (tbb::task_group_context *)&v32;
        v12 = tbb::internal::allocate_root_with_context_proxy::allocate(v26, 0x38uLL);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &off_24C53F878;
        *(_QWORD *)(v12 + 8) = a2;
        *(_OWORD *)(v12 + 16) = xmmword_20CAF2950;
        *(_QWORD *)(v12 + 32) = &v19;
        initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v12);
        *(_DWORD *)(v12 + 48) = 0;
        *(_BYTE *)(v12 + 52) = 5;
        *(_QWORD *)(v12 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v12 - 40) + 16))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v32);
      }
      else
      {
        sub_20C66CD78(a2, (uint64_t)&v19);
      }
      return 1;
    }
    v32 = "usdSkel/utils.cpp";
    v33 = "UsdSkelApplyBlendShape";
    v34 = 2879;
    v35 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(const float, const TfSpan<const GfVec3f>, const "
          "TfSpan<const int>, TfSpan<GfVec3f>)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"Size of non-indexed offsets [%zu] != size of points [%zu]", a3, a2, a6);
    return 0;
  }
  if (a2 != a4)
  {
    v32 = "usdSkel/utils.cpp";
    v33 = "UsdSkelApplyBlendShape";
    v34 = 2891;
    v35 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(const float, const TfSpan<const GfVec3f>, const "
          "TfSpan<const int>, TfSpan<GfVec3f>)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"Size of indexed offsets [%zu] != size of indices [%zu]", a3, a2, a4);
    return 0;
  }
  v29 = a1;
  v30 = a2;
  v27 = a3;
  v28 = a2;
  v26[0] = a5;
  v26[1] = a6;
  v25 = a7;
  v24 = 0;
  v19 = &v27;
  v20 = v26;
  v21 = (char ***)&v29;
  v22 = &v25;
  v23 = &v24;
  if (a2 > 0x3E7 && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
  {
    LODWORD(v32) = 0;
    v37 = 65539;
    v38 = 55;
    tbb::task_group_context::init((uint64_t)&v32, v14, (uint64_t)a3, v15);
    v31 = &v32;
    v16 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v31, 0x38uLL);
    *(_BYTE *)(v16 - 11) = 1;
    *(_QWORD *)v16 = &off_24C53F8C0;
    *(_QWORD *)(v16 + 8) = a2;
    *(_OWORD *)(v16 + 16) = xmmword_20CAF2950;
    *(_QWORD *)(v16 + 32) = &v19;
    v17 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v16);
    *(_DWORD *)(v16 + 48) = 0;
    *(_BYTE *)(v16 + 52) = 5;
    *(_QWORD *)(v16 + 40) = (v17 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v16 - 40) + 16))(*(_QWORD *)(v16 - 40), v16, v16 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v32);
  }
  else
  {
    sub_20C66D1E8(a2, (uint64_t)&v19, a3);
  }
  v18 = atomic_load(&v24);
  return (v18 & 1) == 0;
}

void sub_20C66CD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  tbb::task *v27;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a17, v27);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20C66CD78(uint64_t result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v5;

  if (result)
  {
    v2 = *(float **)(a2 + 16);
    v3 = (float *)(**(_QWORD **)a2 + 8);
    v4 = (float *)(**(_QWORD **)(a2 + 8) + 8);
    do
    {
      v5 = *v2 * *v4;
      *((float32x2_t *)v3 - 1) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v4 - 2), *v2), *(float32x2_t *)(v3 - 2));
      *v3 = v5 + *v3;
      v3 += 3;
      v4 += 3;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20C66CDD8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F878;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) != 0)
      {
        v15 = *((_BYTE *)this + 52) + 1;
        *((_BYTE *)this + 52) = v15;
        v16 = v25[2];
        if (v25[2] >= 2u)
        {
          v17 = v25[1];
          v18 = v25[v25[1] + 3];
          v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v19 - 11) = 1;
          *(_QWORD *)v19 = &unk_24C520F68;
          __dmb(0xBu);
          v19[8] = 0;
          *((_QWORD *)this - 4) = v19;
          *((_QWORD *)v19 - 3) = 2;
          v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
          v21 = (char *)&v26 + 24 * v17;
          *(_BYTE *)(v20 - 11) = 1;
          *(_QWORD *)v20 = &off_24C53F878;
          v22 = *(_OWORD *)v21;
          *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
          *(_OWORD *)(v20 + 8) = v22;
          *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
          v23 = *((_QWORD *)this + 5) >> 1;
          *((_QWORD *)this + 5) = v23;
          *(_QWORD *)(v20 + 40) = v23;
          *(_DWORD *)(v20 + 48) = 2;
          *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
          (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
          v16 = --v25[2];
          v25[1] = (v25[1] + 1) & 7;
          goto LABEL_27;
        }
        v14 = v25[0];
        if (v25[v25[0] + 3] < v15
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
      }
      else
      {
        v14 = v25[0];
      }
      sub_20C66D178((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
      v16 = --v25[2];
      v25[0] = (v25[0] - 1) & 7;
LABEL_27:
      if (!v16 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
  }
  sub_20C66D178((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

float sub_20C66D178(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float result;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD **)v4;
    v6 = **(_QWORD **)(v4 + 8);
    v7 = *(float **)(v4 + 16);
    v8 = 12 * v2 + 8;
    v9 = (float *)(*v5 + v8);
    v10 = (float *)(v6 + v8);
    do
    {
      v11 = *v7 * *v10;
      *((float32x2_t *)v9 - 1) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v10 - 2), *v7), *(float32x2_t *)(v9 - 2));
      result = v11 + *v9;
      *v9 = result;
      v9 += 3;
      v10 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_20C66D1E8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;
  float *v8;
  unint64_t v9;
  unsigned int v10;
  float32x2_t *v11;
  float v12;
  float32x2_t *v13;
  _QWORD v14[4];
  char v15;

  if (a1)
  {
    v4 = 0;
    v5 = *(_QWORD **)(a2 + 8);
    v6 = **(unsigned int ***)a2;
    v7 = *(_QWORD **)(a2 + 16);
    v8 = *(float **)(a2 + 24);
    while (1)
    {
      v10 = *v6++;
      v9 = v10;
      if ((v10 & 0x80000000) != 0 || v5[1] <= v9)
        break;
      v11 = (float32x2_t *)(*v7 + v4);
      v12 = *v8 * v11[1].f32[0];
      v13 = (float32x2_t *)(*v5 + 12 * v9);
      *v13 = vadd_f32(vmul_n_f32(*v11, *v8), *v13);
      v13[1].f32[0] = v12 + v13[1].f32[0];
      v4 += 12;
      if (!--a1)
        return;
    }
    v14[0] = "usdSkel/utils.cpp";
    v14[1] = "operator()";
    v14[2] = 2829;
    v14[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ApplyIndexedBlendShape(const float, c"
             "onst TfSpan<const GfVec3f>, const TfSpan<const int>, TfSpan<GfVec3f>)::(anonymous class)::operator()(size_t, size_t) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"Out of range point index %d (num points = %zu).", a3, v9, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a2 + 32));
  }
}

uint64_t sub_20C66D2DC(tbb::internal::allocate_continuation_proxy *this, uint64_t a2, char *a3)
{
  uint64_t v4;
  unsigned int v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned __int8 v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  unsigned __int8 v28[16];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v4 = *((_QWORD *)this - 4);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *((unsigned __int8 *)this + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *((_BYTE *)this + 52) = v5 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v7 < v8)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F8C0;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v7 = *((_QWORD *)this + 3);
        v8 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v7 >= v8)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v28 = 0x10000;
    v29 = *v6;
    v30 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v28, *((unsigned __int8 *)this + 52));
      v16 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v16 & 1) == 0)
        break;
      v19 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v19;
      v18 = v28[2];
      if (v28[2] < 2u)
      {
        v17 = v28[0];
        if (v28[v28[0] + 3] < v19
          && *((_QWORD *)&v29 + 3 * v28[0] + 2) < *((_QWORD *)&v29 + 3 * v28[0]) - *((_QWORD *)&v29 + 3 * v28[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v20 = v28[1];
      v21 = v28[v28[1] + 3];
      v22 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v22 - 11) = 1;
      *(_QWORD *)v22 = &unk_24C520F68;
      __dmb(0xBu);
      v22[8] = 0;
      *((_QWORD *)this - 4) = v22;
      *((_QWORD *)v22 - 3) = 2;
      v23 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v22, 0x38uLL);
      v24 = (char *)&v29 + 24 * v20;
      *(_BYTE *)(v23 - 11) = 1;
      *(_QWORD *)v23 = &off_24C53F8C0;
      v25 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 24) = *((_QWORD *)v24 + 2);
      *(_OWORD *)(v23 + 8) = v25;
      *(_QWORD *)(v23 + 32) = *((_QWORD *)this + 4);
      v26 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v26;
      *(_QWORD *)(v23 + 40) = v26;
      *(_DWORD *)(v23 + 48) = 2;
      *(_BYTE *)(v23 + 52) = *((_BYTE *)this + 52) - v21;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v23 - 40))(*(_QWORD *)(v23 - 40), v23, v23 - 8);
      v18 = --v28[2];
      v28[1] = (v28[1] + 1) & 7;
LABEL_27:
      if (!v18 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v17 = v28[0];
LABEL_22:
    sub_20C66D67C((uint64_t)this, (_QWORD *)&v29 + 3 * v17, v15);
    v18 = --v28[2];
    v28[0] = (v28[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C66D67C((uint64_t)this, (_QWORD *)this + 1, a3);
  return 0;
}

void sub_20C66D67C(uint64_t a1, _QWORD *a2, char *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;
  float32x2_t *v12;
  float v13;
  float v14;
  float32x2_t *v15;
  _QWORD v16[4];
  char v17;

  v3 = a2[1];
  v4 = *a2 - v3;
  if (*a2 > v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD **)(v5 + 8);
    v7 = v6[1];
    v8 = 12 * v3;
    v9 = (unsigned int *)(**(_QWORD **)v5 + 4 * v3);
    while (1)
    {
      v11 = *v9++;
      v10 = v11;
      if ((v11 & 0x80000000) != 0 || v7 <= v10)
        break;
      v12 = (float32x2_t *)(**(_QWORD **)(v5 + 16) + v8);
      v13 = **(float **)(v5 + 24);
      v14 = v13 * v12[1].f32[0];
      v15 = (float32x2_t *)(*v6 + 12 * v10);
      *v15 = vadd_f32(vmul_n_f32(*v12, v13), *v15);
      v15[1].f32[0] = v14 + v15[1].f32[0];
      v8 += 12;
      if (!--v4)
        return;
    }
    v16[0] = "usdSkel/utils.cpp";
    v16[1] = "operator()";
    v16[2] = 2829;
    v16[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ApplyIndexedBlendShape(const float, c"
             "onst TfSpan<const GfVec3f>, const TfSpan<const int>, TfSpan<GfVec3f>)::(anonymous class)::operator()(size_t, size_t) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v16, (pxrInternal__aapl__pxrReserved__ *)"Out of range point index %d (num points = %zu).", a3, v10, v7);
    atomic_store(1u, *(unsigned __int8 **)(v5 + 32));
  }
}

_QWORD *sub_20C66D770(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C57FAB4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, a2 << 7);
    a1[1] = &v4[128 * a2];
  }
  return a1;
}

void sub_20C66D7C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C66D7EC(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F908;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F908;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C66DB8C((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C66DB8C((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

__n128 sub_20C66DB8C(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = *(_QWORD ***)(a1 + 32);
    v5 = v2 << 7;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(*v4[1] + v5), 0, 0.0, (uint64_t)v13);
      v6 = **v4 + v5;
      v7 = v13[7];
      v9 = v13[4];
      v8 = v13[5];
      *(_OWORD *)(v6 + 96) = v13[6];
      *(_OWORD *)(v6 + 112) = v7;
      *(_OWORD *)(v6 + 64) = v9;
      *(_OWORD *)(v6 + 80) = v8;
      result = (__n128)v13[0];
      v11 = v13[1];
      v12 = v13[3];
      *(_OWORD *)(v6 + 32) = v13[2];
      *(_OWORD *)(v6 + 48) = v12;
      *(__n128 *)v6 = result;
      *(_OWORD *)(v6 + 16) = v11;
      v5 += 128;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_20C66DC1C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C00D6B0(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, a2 << 6);
    a1[1] = &v4[64 * a2];
  }
  return a1;
}

void sub_20C66DC74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C66DC98(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F950;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F950;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C66E038((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C66E038((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

__n128 sub_20C66E038(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[4];

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = *(_QWORD ***)(a1 + 32);
    v5 = v2 << 6;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse((float *)(*v4[1] + v5), 0, 0.0, (uint64_t)v10);
      v6 = **v4 + v5;
      result = (__n128)v10[0];
      v8 = v10[1];
      v9 = v10[3];
      *(_OWORD *)(v6 + 32) = v10[2];
      *(_OWORD *)(v6 + 48) = v9;
      *(__n128 *)v6 = result;
      *(_OWORD *)(v6 + 16) = v8;
      v5 += 64;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_20C66E0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  __n128 v13;
  uint64_t v14;
  const char *v15;
  char v16;
  float32x4_t v17;
  _BYTE v18[128];

  if (a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (sub_20C662BBC(**(_QWORD **)a2 + v4, (float32x2_t *)(**(_QWORD **)(a2 + 8) + v5), (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18, (_WORD *)(**(_QWORD **)(a2 + 16) + v6)))
    {
      v13.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18);
      v13.n128_u64[1] = v10;
      v14 = v11;
      v15 = v12;
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v17, &v13);
      *(float32x4_t *)(**(_QWORD **)(a2 + 24) + v7) = v17;
      ++v8;
      v7 += 16;
      v6 += 6;
      v5 += 12;
      v4 += 128;
      if (a1 == v8)
        return;
    }
    v13.n128_u64[0] = (unint64_t)"usdSkel/utils.cpp";
    v13.n128_u64[1] = (unint64_t)"operator()";
    v14 = 587;
    v15 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMatri"
          "x4d>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v8);
    atomic_store(1u, *(unsigned __int8 **)(a2 + 32));
  }
}

uint64_t sub_20C66E1D8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F998;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F998;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C66E578((uint64_t)this, (unint64_t *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C66E578((uint64_t)this, (unint64_t *)this + 1);
  return 0;
}

void sub_20C66E578(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  __n128 v13;
  uint64_t v14;
  const char *v15;
  char v16;
  float32x4_t v17;
  _BYTE v18[128];

  v3 = *a2;
  v2 = a2[1];
  if (v2 < *a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 16 * v2;
    v6 = 6 * v2;
    v7 = 12 * v2;
    for (i = v2 << 7;
          sub_20C662BBC(**(_QWORD **)v4 + i, (float32x2_t *)(**(_QWORD **)(v4 + 8) + v7), (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18, (_WORD *)(**(_QWORD **)(v4 + 16) + v6));
          i += 128)
    {
      v13.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18);
      v13.n128_u64[1] = v10;
      v14 = v11;
      v15 = v12;
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v17, &v13);
      *(float32x4_t *)(**(_QWORD **)(v4 + 24) + v5) = v17;
      ++v2;
      v5 += 16;
      v6 += 6;
      v7 += 12;
      if (v3 == v2)
        return;
    }
    v13.n128_u64[0] = (unint64_t)"usdSkel/utils.cpp";
    v13.n128_u64[1] = (unint64_t)"operator()";
    v14 = 587;
    v15 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMatri"
          "x4d>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v2);
    atomic_store(1u, *(unsigned __int8 **)(v4 + 32));
  }
}

void sub_20C66E694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float RotationQuat;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v15[4];
  char v16;
  float32x4_t v17[4];

  if (a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (sub_20C662E40(**(_QWORD **)a2 + v4, **(_QWORD **)(a2 + 8) + v5, v17, (_WORD *)(**(_QWORD **)(a2 + 16) + v6)))
    {
      RotationQuat = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v17);
      v11 = **(_QWORD **)(a2 + 24) + v7;
      *(float *)v11 = RotationQuat;
      *(_DWORD *)(v11 + 4) = v12;
      ++v8;
      v7 += 16;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      v6 += 6;
      v5 += 12;
      v4 += 64;
      if (a1 == v8)
        return;
    }
    v15[0] = "usdSkel/utils.cpp";
    v15[1] = "operator()";
    v15[2] = 587;
    v15[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMa"
             "trix4f>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v8);
    atomic_store(1u, *(unsigned __int8 **)(a2 + 32));
  }
}

uint64_t sub_20C66E7A4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F9E0;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F9E0;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C66EB44((uint64_t)this, (unint64_t *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C66EB44((uint64_t)this, (unint64_t *)this + 1);
  return 0;
}

void sub_20C66EB44(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  char *v9;
  float RotationQuat;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v15[4];
  char v16;
  float32x4_t v17[4];

  v3 = *a2;
  v2 = a2[1];
  if (v2 < *a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 16 * v2;
    v6 = v2 << 6;
    v7 = 6 * v2;
    for (i = 12 * v2;
          sub_20C662E40(**(_QWORD **)v4 + v6, **(_QWORD **)(v4 + 8) + i, v17, (_WORD *)(**(_QWORD **)(v4 + 16) + v7));
          i += 12)
    {
      RotationQuat = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v17);
      v11 = **(_QWORD **)(v4 + 24) + v5;
      *(float *)v11 = RotationQuat;
      *(_DWORD *)(v11 + 4) = v12;
      ++v2;
      v5 += 16;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      v6 += 64;
      v7 += 6;
      if (v3 == v2)
        return;
    }
    v15[0] = "usdSkel/utils.cpp";
    v15[1] = "operator()";
    v15[2] = 587;
    v15[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMa"
             "trix4f>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v2);
    atomic_store(1u, *(unsigned __int8 **)(v4 + 32));
  }
}

void sub_20C66EC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  uint64_t v11;
  float v12;
  uint64_t i;

  if (a1)
  {
    v3 = 0;
    v4 = **(float ***)a2;
    v5 = **(unsigned int **)(a2 + 8);
    v6 = *(float **)(a2 + 16);
    v7 = 4 * (int)v5;
    v8 = v4;
    do
    {
      if ((int)v5 >= 1)
      {
        v9 = 0.0;
        v10 = v8;
        v11 = v5;
        do
        {
          v12 = *v10++;
          v9 = v9 + v12;
          --v11;
        }
        while (v11);
        if (fabsf(v9) <= *v6)
        {
          bzero((char *)v4 + v7 * v3, 4 * v5);
        }
        else
        {
          for (i = 0; i != v5; ++i)
            v8[i] = v8[i] / v9;
        }
      }
      ++v3;
      v8 = (float *)((char *)v8 + v7);
    }
    while (v3 != a1);
  }
}

uint64_t sub_20C66ED24(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53FA28;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) != 0)
      {
        v15 = *((_BYTE *)this + 52) + 1;
        *((_BYTE *)this + 52) = v15;
        v16 = v25[2];
        if (v25[2] >= 2u)
        {
          v17 = v25[1];
          v18 = v25[v25[1] + 3];
          v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v19 - 11) = 1;
          *(_QWORD *)v19 = &unk_24C520F68;
          __dmb(0xBu);
          v19[8] = 0;
          *((_QWORD *)this - 4) = v19;
          *((_QWORD *)v19 - 3) = 2;
          v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
          v21 = (char *)&v26 + 24 * v17;
          *(_BYTE *)(v20 - 11) = 1;
          *(_QWORD *)v20 = &off_24C53FA28;
          v22 = *(_OWORD *)v21;
          *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
          *(_OWORD *)(v20 + 8) = v22;
          *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
          v23 = *((_QWORD *)this + 5) >> 1;
          *((_QWORD *)this + 5) = v23;
          *(_QWORD *)(v20 + 40) = v23;
          *(_DWORD *)(v20 + 48) = 2;
          *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
          (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
          v16 = --v25[2];
          v25[1] = (v25[1] + 1) & 7;
          goto LABEL_27;
        }
        v14 = v25[0];
        if (v25[v25[0] + 3] < v15
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
      }
      else
      {
        v14 = v25[0];
      }
      sub_20C66F0C4((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
      v16 = --v25[2];
      v25[0] = (v25[0] - 1) & 7;
LABEL_27:
      if (!v16 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
  }
  sub_20C66F0C4((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

void sub_20C66F0C4(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  float v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t i;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = 0;
    v5 = *(uint64_t ***)(a1 + 32);
    v6 = **v5;
    v7 = *(unsigned int *)v5[1];
    v8 = (float *)v5[2];
    v9 = 4 * (int)v7;
    v10 = (float *)(v6 + 4 * v2 * (int)v7);
    do
    {
      if ((int)v7 >= 1)
      {
        v11 = 0.0;
        v12 = v10;
        v13 = v7;
        do
        {
          v14 = *v12++;
          v11 = v11 + v14;
          --v13;
        }
        while (v13);
        if (fabsf(v11) <= *v8)
        {
          bzero((void *)(v6 + v9 * (v4 + v2)), 4 * v7);
        }
        else
        {
          for (i = 0; i != v7; ++i)
            v10[i] = v10[i] / v11;
        }
      }
      ++v4;
      v10 = (float *)((char *)v10 + v9);
    }
    while (v4 != v3);
  }
}

void sub_20C66F1A8(int **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  char v26;

  __p = 0;
  v24 = 0;
  v25 = 0;
  if (a2 < a3)
  {
    v4 = a2;
    v6 = **a1;
    v7 = 4 * a2;
    do
    {
      v8 = v6;
      v9 = *(_QWORD *)a1[1];
      v10 = *(_QWORD *)a1[2];
      sub_20C29B2B8((uint64_t)&__p, v6);
      v11 = *a1;
      v12 = __p;
      v13 = v7 * v8;
      if (**a1 >= 1)
      {
        v14 = 0;
        v15 = (char *)__p + 4;
        do
        {
          v16 = *(_DWORD *)(v10 + v13 + 4 * v14);
          *(v15 - 1) = *(_DWORD *)(v9 + v13 + 4 * v14);
          *v15 = v16;
          v15 += 2;
          ++v14;
        }
        while (v14 < *v11);
      }
      v17 = 126 - 2 * __clz((v24 - v12) >> 3);
      if (v24 == v12)
        v18 = 0;
      else
        v18 = v17;
      sub_20C66F31C((uint64_t)v12, (unint64_t)v24, (uint64_t)&v26, v18, 1);
      v19 = *a1;
      v6 = **a1;
      if (v6 >= 1)
      {
        v20 = 0;
        v21 = (int *)((char *)__p + 4);
        do
        {
          *(_DWORD *)(v9 + v13 + 4 * v20) = *(v21 - 1);
          v22 = *v21;
          v21 += 2;
          *(_DWORD *)(v10 + v13 + 4 * v20++) = v22;
        }
        while (v20 < *v19);
        v6 = *v19;
      }
      ++v4;
      v7 += 4;
    }
    while (v4 != a3);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C66F300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C66F31C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  float v16;
  int v17;
  float v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  float v22;
  float v23;
  int v24;
  int v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (uint64_t)(a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(float *)v9;
        v23 = *(float *)(a2 - 8);
        if (*(float *)v9 < v23)
        {
          v24 = *(_DWORD *)(v9 + 4);
          v25 = *(_DWORD *)(a2 - 4);
LABEL_34:
          *(float *)v9 = v23;
          *(float *)(a2 - 8) = v22;
          *(_DWORD *)(v9 + 4) = v25;
          *(_DWORD *)(a2 - 4) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v24 = *(_DWORD *)(v9 + 4);
          v25 = *(_DWORD *)(a2 - 4);
          if (v24 < v25)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return sub_20C66F824(v9, v9 + 8, a2 - 8);
      case 4uLL:
        return sub_20C66FE1C(v9, v9 + 8, v9 + 16, a2 - 8);
      case 5uLL:
        return sub_20C66FF20(v9, v9 + 8, v9 + 16, v9 + 24, a2 - 8);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_20C66F6A0(v9, a2);
          else
            return sub_20C66F780(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (_DWORD *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            sub_20C66F824(v9 + 8 * (v13 >> 1), v9, a2 - 8);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_20C66F824(v9, v9 + 8 * (v13 >> 1), a2 - 8);
            sub_20C66F824(v9 + 8, (uint64_t)(v15 - 2), a2 - 16);
            sub_20C66F824(v9 + 16, v9 + 8 + 8 * v14, a2 - 24);
            sub_20C66F824((uint64_t)(v15 - 2), (uint64_t)v15, v9 + 8 + 8 * v14);
            v16 = *(float *)v9;
            *(_DWORD *)v9 = *v15;
            *(float *)v15 = v16;
            v17 = *(_DWORD *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = v15[1];
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(float *)(v9 - 8);
          if (*(float *)v9 >= v18 && (v18 < *(float *)v9 || *(_DWORD *)(v9 + 4) >= *(_DWORD *)(v9 - 4)))
          {
            result = sub_20C66F974(v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = sub_20C66FAC8(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = sub_20C66FC14(v9, v19);
          v9 = v19 + 8;
          result = sub_20C66FC14(v19 + 8, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = sub_20C66F31C(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 8;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return sub_20C670074(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_20C66F6A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t v14;

  if (result == a2)
    return result;
  v2 = result + 8;
  if (result + 8 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *(float *)v5;
    v7 = *(float *)(v5 + 8);
    if (*(float *)v5 >= v7)
    {
      if (v7 < v6)
        goto LABEL_19;
      v9 = *(_DWORD *)(v5 + 4);
      v8 = *(_DWORD *)(v5 + 12);
      if (v9 >= v8)
        goto LABEL_19;
    }
    else
    {
      v8 = *(_DWORD *)(v5 + 12);
      v9 = *(_DWORD *)(v5 + 4);
    }
    *(float *)(v5 + 8) = v6;
    *(_DWORD *)(v4 + 4) = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(float *)(result + v11 - 8);
      if (v12 >= v7)
        break;
      v13 = *(_DWORD *)(result + v11 - 4);
LABEL_12:
      v5 -= 8;
      v14 = result + v11;
      *(float *)v14 = v12;
      *(_DWORD *)(v14 + 4) = v13;
      v11 -= 8;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v7 >= v12)
    {
      v10 = result + v11;
      v13 = *(_DWORD *)(result + v11 - 4);
      if (v13 >= v8)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *(float *)v10 = v7;
    *(_DWORD *)(v10 + 4) = v8;
LABEL_19:
    v2 = v4 + 8;
    v3 += 8;
  }
  while (v4 + 8 != a2);
  return result;
}

uint64_t sub_20C66F780(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  float v5;
  float v6;
  int v7;
  uint64_t j;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      for (i = result + 4; ; i += 8)
      {
        v4 = result;
        result = v2;
        v5 = *(float *)v4;
        v6 = *(float *)(v4 + 8);
        if (*(float *)v4 < v6)
          break;
        if (v6 >= v5)
        {
          v7 = *(_DWORD *)(v4 + 12);
          if (*(_DWORD *)(v4 + 4) < v7)
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 8;
        if (result + 8 == a2)
          return result;
      }
      v7 = *(_DWORD *)(v4 + 12);
LABEL_6:
      for (j = i; ; j -= 8)
      {
        *(float *)(j + 4) = v5;
        *(_DWORD *)(j + 8) = *(_DWORD *)j;
        v5 = *(float *)(j - 12);
        if (v5 >= v6 && (v6 < v5 || *(_DWORD *)(j - 8) >= v7))
          break;
      }
      *(float *)(j - 4) = v6;
      *(_DWORD *)j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_20C66F824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  int v7;
  uint64_t result;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  int v19;

  v3 = *(float *)a1;
  v4 = *(float *)a2;
  if (*(float *)a1 >= *(float *)a2 && (v4 < v3 || *(_DWORD *)(a1 + 4) >= *(_DWORD *)(a2 + 4)))
  {
    v9 = *(float *)a3;
    if (v4 >= *(float *)a3)
    {
      if (v9 < v4)
        return 0;
      v10 = *(_DWORD *)(a2 + 4);
      v11 = *(_DWORD *)(a3 + 4);
      if (v10 >= v11)
        return 0;
    }
    else
    {
      v10 = *(_DWORD *)(a2 + 4);
      v11 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a3 + 4) = v10;
    v12 = *(float *)a1;
    v13 = *(float *)a2;
    if (*(float *)a1 >= *(float *)a2)
    {
      if (v13 < v12)
        return 1;
      v14 = *(_DWORD *)(a1 + 4);
      v15 = *(_DWORD *)(a2 + 4);
      if (v14 >= v15)
        return 1;
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 4);
      v15 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v13;
    *(float *)a2 = v12;
    *(_DWORD *)(a1 + 4) = v15;
    result = 2;
    *(_DWORD *)(a2 + 4) = v14;
  }
  else
  {
    v5 = *(float *)a3;
    if (v4 < *(float *)a3)
    {
      v6 = *(_DWORD *)(a3 + 4);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v3;
      v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v6;
      *(_DWORD *)(a3 + 4) = v7;
      return 1;
    }
    v16 = *(_DWORD *)(a2 + 4);
    if (v5 >= v4)
    {
      v6 = *(_DWORD *)(a3 + 4);
      if (v16 < v6)
        goto LABEL_6;
    }
    *(float *)a1 = v4;
    *(float *)a2 = v3;
    v17 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v16;
    *(_DWORD *)(a2 + 4) = v17;
    v18 = *(float *)a3;
    if (v3 >= *(float *)a3)
    {
      if (v18 < v3)
        return 1;
      v19 = *(_DWORD *)(a3 + 4);
      if (v17 >= v19)
        return 1;
    }
    else
    {
      v19 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v19;
    result = 2;
    *(_DWORD *)(a3 + 4) = v17;
  }
  return result;
}

unint64_t sub_20C66F974(unint64_t a1, unint64_t a2)
{
  float v2;
  int v3;
  float v4;
  unint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;

  v2 = *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(float *)(a2 - 8);
  if (v4 >= *(float *)a1 && (v2 < v4 || *(_DWORD *)(a2 - 4) >= v3))
  {
    for (i = a1 + 8; i < a2 && *(float *)i >= v2 && (v2 < *(float *)i || *(_DWORD *)(i + 4) >= v3); i += 8)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(float *)(i + 8);
      i += 8;
      v7 = v6;
    }
    while (v6 >= v2 && (v2 < v7 || *(_DWORD *)(i + 4) >= v3));
  }
  if (i < a2)
  {
    for (a2 -= 8; v4 < v2 || v2 >= v4 && *(_DWORD *)(a2 + 4) < v3; a2 -= 8)
    {
      v8 = *(float *)(a2 - 8);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(float *)i;
    v10 = *(float *)a2;
    do
    {
      *(float *)i = v10;
      *(float *)a2 = v9;
      v11 = *(float *)(i + 8);
      i += 8;
      v9 = v11;
      v12 = *(_DWORD *)(i - 4);
      *(_DWORD *)(i - 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v12;
      while (v9 >= v2 && (v2 < v9 || *(_DWORD *)(i + 4) >= v3))
      {
        v13 = *(float *)(i + 8);
        i += 8;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(float *)(a2 - 8);
          a2 -= 8;
          v10 = v14;
        }
        while (v14 < v2);
      }
      while (v2 >= v10 && *(_DWORD *)(a2 + 4) < v3);
    }
    while (i < a2);
  }
  if (i - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(i - 4);
  }
  *(float *)(i - 8) = v2;
  *(_DWORD *)(i - 4) = v3;
  return i;
}

unint64_t sub_20C66FAC8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  int v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  float v16;
  float v17;

  v2 = 0;
  v3 = *(float *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  while (1)
  {
    v5 = *(float *)(a1 + v2 + 8);
    if (v3 >= v5 && (v5 < v3 || v4 >= *(_DWORD *)(a1 + v2 + 12)))
      break;
    v2 += 8;
  }
  v6 = a1 + v2 + 8;
  if (v2)
  {
    do
    {
      v7 = *(float *)(a2 - 8);
      a2 -= 8;
      v8 = v7;
    }
    while (v3 >= v7 && (v8 < v3 || v4 >= *(_DWORD *)(a2 + 4)));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(float *)(a2 - 8);
        a2 -= 8;
        v10 = v9;
        if (v3 < v9)
          break;
        if (v10 < v3)
          goto LABEL_19;
      }
      while (v4 >= *(_DWORD *)(a2 + 4) && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 8;
  }
  else
  {
    v12 = *(float *)a2;
    v13 = a1 + v2 + 8;
    v14 = a2;
    do
    {
      *(float *)v13 = v12;
      *(float *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = v15;
      do
      {
        do
        {
          v16 = *(float *)(v13 + 8);
          v13 += 8;
          v5 = v16;
        }
        while (v3 < v16);
      }
      while (v5 >= v3 && v4 < *(_DWORD *)(v13 + 4));
      do
      {
        v17 = *(float *)(v14 - 8);
        v14 -= 8;
        v12 = v17;
      }
      while (v3 >= v17 && (v12 < v3 || v4 >= *(_DWORD *)(v14 + 4)));
    }
    while (v13 < v14);
  }
  if (v13 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v13 - 4);
  }
  *(float *)(v13 - 8) = v3;
  *(_DWORD *)(v13 - 4) = v4;
  return v13 - 8;
}

BOOL sub_20C66FC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int v22;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)a1;
      v7 = *(float *)(a2 - 8);
      if (*(float *)a1 < v7)
      {
        v8 = *(_DWORD *)(a1 + 4);
        v9 = *(_DWORD *)(a2 - 4);
LABEL_30:
        *(float *)a1 = v7;
        *(float *)(a2 - 8) = v6;
        *(_DWORD *)(a1 + 4) = v9;
        *(_DWORD *)(a2 - 4) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v8 = *(_DWORD *)(a1 + 4);
        v9 = *(_DWORD *)(a2 - 4);
        if (v8 < v9)
          goto LABEL_30;
      }
      return result;
    case 3:
      sub_20C66F824(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      sub_20C66FE1C(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_20C66FF20(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v10 = a1 + 16;
      sub_20C66F824(a1, a1 + 8, a1 + 16);
      v11 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(float *)v10;
  v15 = *(float *)v11;
  if (*(float *)v10 >= *(float *)v11)
  {
    if (v15 < v14)
      goto LABEL_21;
    v17 = *(_DWORD *)(v10 + 4);
    v16 = *(_DWORD *)(v11 + 4);
    if (v17 >= v16)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_DWORD *)(v11 + 4);
    v17 = *(_DWORD *)(v10 + 4);
  }
  *(float *)v11 = v14;
  *(_DWORD *)(v11 + 4) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(float *)(a1 + v19 + 8);
    if (v21 >= v15)
    {
      if (v15 < v21)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(_DWORD *)(a1 + v19 + 12);
      if (v22 >= v16)
      {
        v18 = a1 + v19 + 16;
LABEL_20:
        *(float *)v18 = v15;
        *(_DWORD *)(v18 + 4) = v16;
        if (++v13 == 8)
          return v11 + 8 == a2;
LABEL_21:
        v10 = v11;
        v12 += 8;
        v11 += 8;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v20 + 12);
    }
    v10 -= 8;
    *(float *)(v20 + 16) = v21;
    *(_DWORD *)(a1 + v19 + 20) = v22;
    v19 -= 8;
    if (v19 == -16)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t sub_20C66FE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;

  result = sub_20C66F824(a1, a2, a3);
  v9 = *(float *)a3;
  v10 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v10 < v9)
      return result;
    v11 = *(_DWORD *)(a3 + 4);
    v12 = *(_DWORD *)(a4 + 4);
    if (v11 >= v12)
      return result;
  }
  else
  {
    v11 = *(_DWORD *)(a3 + 4);
    v12 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v10;
  *(float *)a4 = v9;
  *(_DWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a4 + 4) = v11;
  v13 = *(float *)a2;
  v14 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v14 < v13)
      return result;
    v15 = *(_DWORD *)(a2 + 4);
    v16 = *(_DWORD *)(a3 + 4);
    if (v15 >= v16)
      return result;
  }
  else
  {
    v15 = *(_DWORD *)(a2 + 4);
    v16 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v14;
  *(float *)a3 = v13;
  *(_DWORD *)(a2 + 4) = v16;
  *(_DWORD *)(a3 + 4) = v15;
  v17 = *(float *)a1;
  v18 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    v19 = *(_DWORD *)(a1 + 4);
    v20 = *(_DWORD *)(a2 + 4);
LABEL_15:
    *(float *)a1 = v18;
    *(float *)a2 = v17;
    *(_DWORD *)(a1 + 4) = v20;
    *(_DWORD *)(a2 + 4) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v19 = *(_DWORD *)(a1 + 4);
    v20 = *(_DWORD *)(a2 + 4);
    if (v19 < v20)
      goto LABEL_15;
  }
  return result;
}

uint64_t sub_20C66FF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;

  result = sub_20C66FE1C(a1, a2, a3, a4);
  v11 = *(float *)a4;
  v12 = *(float *)a5;
  if (*(float *)a4 >= *(float *)a5)
  {
    if (v12 < v11)
      return result;
    v13 = *(_DWORD *)(a4 + 4);
    v14 = *(_DWORD *)(a5 + 4);
    if (v13 >= v14)
      return result;
  }
  else
  {
    v13 = *(_DWORD *)(a4 + 4);
    v14 = *(_DWORD *)(a5 + 4);
  }
  *(float *)a4 = v12;
  *(float *)a5 = v11;
  *(_DWORD *)(a4 + 4) = v14;
  *(_DWORD *)(a5 + 4) = v13;
  v15 = *(float *)a3;
  v16 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v16 < v15)
      return result;
    v17 = *(_DWORD *)(a3 + 4);
    v18 = *(_DWORD *)(a4 + 4);
    if (v17 >= v18)
      return result;
  }
  else
  {
    v17 = *(_DWORD *)(a3 + 4);
    v18 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v16;
  *(float *)a4 = v15;
  *(_DWORD *)(a3 + 4) = v18;
  *(_DWORD *)(a4 + 4) = v17;
  v19 = *(float *)a2;
  v20 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v20 < v19)
      return result;
    v21 = *(_DWORD *)(a2 + 4);
    v22 = *(_DWORD *)(a3 + 4);
    if (v21 >= v22)
      return result;
  }
  else
  {
    v21 = *(_DWORD *)(a2 + 4);
    v22 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v20;
  *(float *)a3 = v19;
  *(_DWORD *)(a2 + 4) = v22;
  *(_DWORD *)(a3 + 4) = v21;
  v23 = *(float *)a1;
  v24 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    v25 = *(_DWORD *)(a1 + 4);
    v26 = *(_DWORD *)(a2 + 4);
LABEL_9:
    *(float *)a1 = v24;
    *(float *)a2 = v23;
    *(_DWORD *)(a1 + 4) = v26;
    *(_DWORD *)(a2 + 4) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v25 = *(_DWORD *)(a1 + 4);
    v26 = *(_DWORD *)(a2 + 4);
    if (v25 < v26)
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_20C670074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  int v18;
  uint64_t v19;
  float *v20;
  float v21;
  int v22;
  float *v23;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 8 * v10;
      do
      {
        sub_20C670204(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(float *)a1;
        v16 = *(float *)v14;
        if (*(float *)a1 >= *(float *)v14)
        {
          if (v16 < v15)
            goto LABEL_12;
          v18 = *(_DWORD *)(a1 + 4);
          v17 = *(_DWORD *)(v14 + 4);
          if (v18 >= v17)
            goto LABEL_12;
        }
        else
        {
          v17 = *(_DWORD *)(v14 + 4);
          v18 = *(_DWORD *)(a1 + 4);
        }
        *(float *)v14 = v15;
        *(float *)a1 = v16;
        *(_DWORD *)(v14 + 4) = v18;
        *(_DWORD *)(a1 + 4) = v17;
        sub_20C670204(a1, a4, v9, a1);
LABEL_12:
        v14 += 8;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 9)
    {
      v19 = (unint64_t)v8 >> 3;
      v20 = (float *)(a2 - 8);
      do
      {
        v21 = *(float *)a1;
        v22 = *(_DWORD *)(a1 + 4);
        sub_20C670348(a1, a4, v19);
        if (v20 == v23)
        {
          *v23 = v21;
          *((_DWORD *)v23 + 1) = v22;
        }
        else
        {
          *v23 = *v20;
          v23[1] = v20[1];
          *v20 = v21;
          *((_DWORD *)v20 + 1) = v22;
          sub_20C6703DC(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 8) >> 3);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20C670204(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = result + 8 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(float *)(v8 + 8);
        if (v10 < *(float *)v8 || *(float *)v8 >= v10 && *(_DWORD *)(v8 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
        {
          v8 += 8;
          v7 = v9;
        }
      }
      v11 = *(float *)a4;
      v12 = *(float *)v8;
      if (*(float *)a4 >= *(float *)v8)
      {
        v13 = *(_DWORD *)(v8 + 4);
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(a4 + 4);
          if (v14 < v13)
            return result;
        }
        else
        {
          v14 = *(_DWORD *)(a4 + 4);
        }
        *(float *)a4 = v12;
        *(_DWORD *)(a4 + 4) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 8 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(float *)(v15 + 8);
              if (v18 < *(float *)v15
                || *(float *)v15 >= v18 && *(_DWORD *)(v15 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
              {
                v15 += 8;
                v7 = v17;
              }
            }
            v19 = *(float *)v15;
            if (v11 < *(float *)v15)
              break;
            v20 = *(_DWORD *)(v15 + 4);
            if (v19 >= v11 && v14 < v20)
              break;
            *(float *)v8 = v19;
            *(_DWORD *)(v8 + 4) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(float *)v15 = v11;
        *(_DWORD *)(v15 + 4) = v14;
      }
    }
  }
  return result;
}

float sub_20C670348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = (_DWORD *)a1;
    v7 = v3 + 1;
    a1 += 8 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(float *)(a1 + 8);
      if (v10 < *(float *)a1 || *(float *)a1 >= v10 && *(_DWORD *)(a1 + 12) < v6[2 * v7 + 1])
      {
        a1 += 8;
        v3 = v9;
      }
    }
    result = *(float *)a1;
    *v6 = *(_DWORD *)a1;
    v6[1] = *(_DWORD *)(a1 + 4);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_20C6703DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 8 * (v4 >> 1);
    v7 = *(float *)(a2 - 8);
    v8 = *(float *)v6;
    if (v7 >= *(float *)v6)
    {
      if (v8 < v7)
        return result;
      v9 = *(_DWORD *)(a2 - 4);
      v10 = *(_DWORD *)(result + 8 * v5 + 4);
      if (v9 >= v10)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 4);
      v10 = *(_DWORD *)(v6 + 4);
    }
    *(float *)(a2 - 8) = v8;
    *(_DWORD *)(a2 - 4) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = result + 8 * v5;
        v13 = *(float *)v11;
        if (v7 >= *(float *)v11)
        {
          if (v13 < v7)
            break;
          v14 = *(_DWORD *)(result + 8 * v5 + 4);
          if (v9 >= v14)
            break;
        }
        else
        {
          v14 = *(_DWORD *)(v11 + 4);
        }
        *(float *)v6 = v13;
        *(_DWORD *)(v6 + 4) = v14;
        v6 = result + 8 * v5;
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *(float *)v11 = v7;
    *(_DWORD *)(v11 + 4) = v9;
  }
  return result;
}

uint64_t sub_20C67049C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FA70;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FA70;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C66F1A8(*((int ***)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C66F1A8(*((int ***)this + 4), v6, v4);
  return 0;
}

void sub_20C67083C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v12;
  float32x2_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  _QWORD v28[4];
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a2 < a3)
  {
    v32 = v8;
    v33 = v7;
    v34 = v6;
    v35 = v5;
    v36 = v3;
    v37 = v4;
    v10 = a2;
    while (1)
    {
      v31 = 0;
      v30 = 0;
      LODWORD(v30) = sub_20C575548(*(float64x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v30) = v12;
      v31 = v14;
      v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1)
        break;
      v19 = 0.0;
      v18 = 0.0;
      v17 = 0.0;
LABEL_12:
      v27 = (float *)(**(_QWORD **)(a1 + 8) + 12 * v10);
      *v27 = v17;
      v27[1] = v18;
      v27[2] = v19;
      if (++v10 == a3)
        return;
    }
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    while (1)
    {
      v20 = v16 + v10 * v15;
      v21 = *(_QWORD **)(a1 + 24);
      v22 = *(unsigned int *)(*v21 + 4 * v20);
      if ((v22 & 0x80000000) != 0)
        break;
      v23 = *(_QWORD **)(a1 + 32);
      if (v23[1] <= v22)
        break;
      v24 = *(float *)(v21[2] + 4 * v20);
      if (v24 != 0.0)
      {
        v17 = v17 + (float)(v24 * sub_20C6635D8((float64x2_t *)(*v23 + (v22 << 7)), (float *)&v30).f32[0]);
        v18 = v18 + (float)(v24 * v25);
        v19 = v19 + (float)(v24 * v26);
        v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15)
        goto LABEL_12;
    }
    v28[0] = "usdSkel/utils.cpp";
    v28[1] = "operator()";
    v28[2] = 1418;
    v28[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()"
             "(size_t, size_t) const";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v28, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, v22, v16 + v10 * v15, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

uint64_t sub_20C6709E0(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FAB8;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FAB8;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C67083C(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C67083C(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

uint64_t sub_20C670D80(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  double RotationQuaternion;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  double *v25;
  __int128 v26;
  __int128 v27;
  const pxrInternal__aapl__pxrReserved__::GfMatrix3f *v28;
  unsigned __int32 v29;
  __n128 v30;
  double v31[16];
  _BYTE v32[76];
  _OWORD v33[2];
  int v34;
  __n128 v35[8];
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  float64x2_t v52;
  char v53[24];
  char v54[128];
  __n128 v55[8];
  __int128 v56[8];

  v10 = a2;
  v11 = (__n128 *)result;
  if (a7)
    *a7 = 0;
  if (a2)
  {
    do
    {
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[3];
      v46 = v11[2];
      v47 = v14;
      v44 = v12;
      v45 = v13;
      v15 = v11[4];
      v16 = v11[5];
      v17 = v11[7];
      v50 = v11[6];
      v51 = v17;
      v48 = v15;
      v49 = v16;
      if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)&v44, v56, (uint64_t)v53, v55, (uint64_t)&v52, (uint64_t)v54, 1.0e-10))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v55, 1);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v55, (uint64_t)&v36);
        RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v36);
        v36.n128_u64[0] = v19;
        v36.n128_u64[1] = v20;
        v37.n128_u64[0] = v21;
        v37.n128_f64[1] = RotationQuaternion;
        pxrInternal__aapl__pxrReserved__::GfDualQuatd::SetTranslation((uint64_t)&v36, &v52);
        v22 = v36;
        v23 = v37;
        v24 = v39;
        a3[2] = v38;
        a3[3] = v24;
        *a3 = v22;
        a3[1] = v23;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v35, 1.0);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v35, (uint64_t)&v52);
        v40 = v55[4];
        v41 = v55[5];
        v42 = v55[6];
        v43 = v55[7];
        v36 = v55[0];
        v37 = v55[1];
        v38 = v55[2];
        v39 = v55[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v36.n128_f64, v25);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v36.n128_f64, 0, 0.0, (uint64_t)v31);
        v35[4] = v48;
        v35[5] = v49;
        v35[6] = v50;
        v35[7] = v51;
        v35[0] = v44;
        v35[1] = v45;
        v35[2] = v46;
        v35[3] = v47;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v35[0].n128_f64, v31);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v35, (uint64_t)v32);
        result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v33, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v32);
        v26 = v33[0];
        v27 = v33[1];
        *(_DWORD *)(a5 + 32) = v34;
        *(_OWORD *)a5 = v26;
        *(_OWORD *)(a5 + 16) = v27;
        if (a7 && !*a7)
        {
          pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v35, 1.0);
          result = pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v35, v28, 0.000001);
          if ((result & 1) == 0)
            *a7 = 1;
        }
      }
      else
      {
        a3[2] = 0u;
        a3[3] = 0u;
        *a3 = 0u;
        a3[1] = 0u;
        result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v36, 1.0);
        v29 = v38.n128_u32[0];
        v30 = v37;
        *(__n128 *)a5 = v36;
        *(__n128 *)(a5 + 16) = v30;
        *(_DWORD *)(a5 + 32) = v29;
      }
      v11 += 8;
      a3 += 4;
      a5 += 36;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *sub_20C670FB0(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C00D6B0(a1, a2);
    a1[1] += a2 << 6;
  }
  return a1;
}

void sub_20C670FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C671010(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C6710B0(a1, a2);
    v4 = (char *)a1[1];
    v5 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20C671094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20C6710B0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x71C71C71C71C71DLL)
    sub_20BDDF694();
  result = (char *)sub_20C671104((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[36 * v4];
  return result;
}

void *sub_20C671104(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL)
    sub_20BDDF5B4();
  return operator new(36 * a2);
}

void sub_20C67114C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  char *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  float32x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  unsigned int v40;
  float v41;
  float v42;
  double v43;
  double v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float64x2_t v49;
  uint64_t v50;
  const char *v51;
  char v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a2 < a3)
  {
    v57 = v6;
    v58 = v5;
    v59 = v3;
    v60 = v4;
    v8 = a2;
    while (1)
    {
      LODWORD(v48) = sub_20C575548(*(float64x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v8)).u32[0];
      v47 = v10;
      v46 = v11;
      v13 = *(uint64_t **)(a1 + 16);
      v12 = *(uint64_t **)(a1 + 24);
      v14 = *v13;
      v15 = *(int **)(a1 + 32);
      v16 = sub_20C671434(v8, (v13[1] - *v13) >> 6, v12, *v15);
      v18 = 0uLL;
      v19 = 0uLL;
      if ((v16 & 0x80000000) == 0)
      {
        v20 = (float64x2_t *)(v14 + ((unint64_t)v16 << 6));
        v19 = *v20;
        v18 = v20[1];
      }
      HIDWORD(v21) = 0;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v22 = *v15;
      if ((int)v22 >= 1)
        break;
      v26 = 0;
      LODWORD(v21) = 0;
      v30 = v46;
LABEL_18:
      v40 = **(_BYTE **)(a1 + 40) == 0;
      if (**(_BYTE **)(a1 + 40))
        v41 = *(float *)&v21;
      else
        v41 = v30;
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v53, 1.0e-10);
      v49 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v40), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v47), LODWORD(v48)), (int8x8_t)v26));
      *(double *)&v50 = v41;
      v42 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v53.f64, v49.f64);
      *(float *)&v43 = v43;
      *(float *)&v44 = v44;
      v45 = **(_QWORD **)(a1 + 8) + 12 * v8;
      *(float *)v45 = v42;
      *(_DWORD *)(v45 + 4) = LODWORD(v43);
      *(_DWORD *)(v45 + 8) = LODWORD(v44);
      if (++v8 == a3)
        return;
    }
    v23 = *v12;
    v24 = v8 * v22;
    v25 = 0uLL;
    v26 = 0;
    LODWORD(v21) = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = v46;
    while (1)
    {
      v31 = *(unsigned int *)(v23 + 4 * v24);
      if ((v31 & 0x80000000) != 0 || v31 >= (v13[1] - *v13) >> 6)
        break;
      v32 = *(float *)(v12[2] + 4 * v24);
      if (v32 != 0.0)
      {
        if (**(_BYTE **)(a1 + 40))
        {
          v33 = **(_QWORD **)(a1 + 48) + 36 * v31;
          v26 = vadd_f32(v26, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v33, v48), vmul_n_f32(*(float32x2_t *)(v33 + 12), v47)), vmul_n_f32(*(float32x2_t *)(v33 + 24), v46)), v32));
          *(float *)&v21 = *(float *)&v21
                         + (float)(v32
                                 * (float)((float)((float)(v48 * *(float *)(v33 + 8))
                                                 + (float)(v47 * *(float *)(v33 + 20)))
                                         + (float)(v46 * *(float *)(v33 + 32))));
        }
        v34 = (float64x2_t *)(*v13 + (v31 << 6));
        v35 = v34[1];
        v36 = vmulq_f64(v19, *v34);
        v37 = vmulq_f64(v18, v35);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v37), (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)).f64[0] < 0.0)v32 = -v32;
        v38 = v32;
        v25 = vaddq_f64(vmulq_n_f64(*v34, v38), v25);
        v27 = vaddq_f64(vmulq_n_f64(v35, v38), v27);
        v28 = vaddq_f64(vmulq_n_f64(v34[2], v38), v28);
        v39 = vmulq_n_f64(v34[3], v38);
        v53 = v25;
        v54 = v27;
        v29 = vaddq_f64(v39, v29);
        v55 = v28;
        v56 = v29;
      }
      ++v24;
      if (!--v22)
        goto LABEL_18;
    }
    *(_QWORD *)&v49.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v49.f64[1] = "operator()";
    v50 = 1527;
    v51 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v49, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v17, v18.f64[0], v19.f64[0], v21, v25.f64[0], v27.f64[0], v28.f64[0], v29.f64[0], v31, v24, (v13[1] - *v13) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_20C671434(uint64_t a1, unint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  unsigned int *v7;
  uint64_t result;
  float v9;
  unint64_t v10;
  unsigned int v11;
  _BOOL4 v13;

  if (a4 < 1)
    return 0xFFFFFFFFLL;
  v4 = a4;
  v5 = a1 * a4;
  v6 = (float *)(a3[2] + 4 * v5);
  v7 = (unsigned int *)(*a3 + 4 * v5);
  result = 0xFFFFFFFFLL;
  v9 = -1.0;
  do
  {
    v11 = *v7++;
    v10 = v11;
    if ((v11 & 0x80000000) == 0 && v10 < a2)
    {
      v13 = v9 < *v6 || (int)result < 0;
      if (v13)
        result = v10;
      else
        result = result;
      if (v13)
        v9 = *v6;
    }
    ++v6;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_20C6714A8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FB00;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FB00;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C67114C(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C67114C(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C671848(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v12;
  float32x2_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  _QWORD v28[4];
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a2 < a3)
  {
    v32 = v8;
    v33 = v7;
    v34 = v6;
    v35 = v5;
    v36 = v3;
    v37 = v4;
    v10 = a2;
    while (1)
    {
      v31 = 0;
      v30 = 0;
      LODWORD(v30) = sub_20C6719E4(*(float32x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v30) = v12;
      v31 = v14;
      v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1)
        break;
      v19 = 0.0;
      v18 = 0.0;
      v17 = 0.0;
LABEL_12:
      v27 = (float *)(**(_QWORD **)(a1 + 8) + 12 * v10);
      *v27 = v17;
      v27[1] = v18;
      v27[2] = v19;
      if (++v10 == a3)
        return;
    }
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    while (1)
    {
      v20 = v16 + v10 * v15;
      v21 = *(_QWORD **)(a1 + 24);
      v22 = *(unsigned int *)(*v21 + 4 * v20);
      if ((v22 & 0x80000000) != 0)
        break;
      v23 = *(_QWORD **)(a1 + 32);
      if (v23[1] <= v22)
        break;
      v24 = *(float *)(v21[2] + 4 * v20);
      if (v24 != 0.0)
      {
        v17 = v17 + (float)(v24 * sub_20C663754((float32x2_t *)(*v23 + (v22 << 6)), (float *)&v30).f32[0]);
        v18 = v18 + (float)(v24 * v25);
        v19 = v19 + (float)(v24 * v26);
        v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15)
        goto LABEL_12;
    }
    v28[0] = "usdSkel/utils.cpp";
    v28[1] = "operator()";
    v28[2] = 1418;
    v28[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()"
             "(size_t, size_t) const";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v28, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, v22, v16 + v10 * v15, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

float32x2_t sub_20C6719E4(float32x2_t *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  v2 = a2[1];
  v3 = a2[2];
  v4 = a1[7].f32[1]
     + (float)((float)((float)(*a2 * a1[1].f32[1]) + (float)(v2 * a1[3].f32[1])) + (float)(v3 * a1[5].f32[1]));
  if (v4 == 0.0)
    v5 = 1.0;
  else
    v5 = 1.0 / v4;
  return vmul_n_f32(vadd_f32(a1[6], vadd_f32(vadd_f32(vmul_n_f32(*a1, *a2), vmul_n_f32(a1[2], v2)), vmul_n_f32(a1[4], v3))), v5);
}

uint64_t sub_20C671A7C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FB48;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FB48;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C671848(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C671848(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

uint64_t sub_20C671E1C(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::GfMatrix4f *v11;
  __n128 v12;
  double RotationQuaternion;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  double *v20;
  __int128 v21;
  __int128 v22;
  const pxrInternal__aapl__pxrReserved__::GfMatrix3f *v23;
  unsigned __int32 v24;
  __n128 v25;
  double v26[16];
  _BYTE v27[76];
  _OWORD v28[2];
  int v29;
  __n128 v30[8];
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  float64x2_t v47;
  char v48[24];
  char v49[128];
  __n128 v50[8];
  __int128 v51[8];

  v10 = a2;
  v11 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)result;
  if (a7)
    *a7 = 0;
  if (a2)
  {
    v12 = 0uLL;
    do
    {
      v45 = v12;
      v46 = v12;
      v43 = v12;
      v44 = v12;
      v41 = v12;
      v42 = v12;
      v39 = v12;
      v40 = v12;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v39, v11);
      if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)&v39, v51, (uint64_t)v48, v50, (uint64_t)&v47, (uint64_t)v49, 1.0e-10))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v50, 1);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v50, (uint64_t)&v31);
        RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v31);
        v31.n128_u64[0] = v14;
        v31.n128_u64[1] = v15;
        v32.n128_u64[0] = v16;
        v32.n128_f64[1] = RotationQuaternion;
        pxrInternal__aapl__pxrReserved__::GfDualQuatd::SetTranslation((uint64_t)&v31, &v47);
        v17 = v31;
        v18 = v32;
        v19 = v34;
        a3[2] = v33;
        a3[3] = v19;
        *a3 = v17;
        a3[1] = v18;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v30, 1.0);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v30, (uint64_t)&v47);
        v35 = v50[4];
        v36 = v50[5];
        v37 = v50[6];
        v38 = v50[7];
        v31 = v50[0];
        v32 = v50[1];
        v33 = v50[2];
        v34 = v50[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v31.n128_f64, v20);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v31.n128_f64, 0, 0.0, (uint64_t)v26);
        v30[4] = v43;
        v30[5] = v44;
        v30[6] = v45;
        v30[7] = v46;
        v30[0] = v39;
        v30[1] = v40;
        v30[2] = v41;
        v30[3] = v42;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v30[0].n128_f64, v26);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v30, (uint64_t)v27);
        result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v28, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v27);
        v21 = v28[0];
        v22 = v28[1];
        *(_DWORD *)(a5 + 32) = v29;
        *(_OWORD *)a5 = v21;
        *(_OWORD *)(a5 + 16) = v22;
        if (a7 && !*a7)
        {
          pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v30, 1.0);
          result = pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v30, v23, 0.000001);
          v12 = 0uLL;
          if ((result & 1) == 0)
            *a7 = 1;
          goto LABEL_12;
        }
      }
      else
      {
        a3[2] = 0u;
        a3[3] = 0u;
        *a3 = 0u;
        a3[1] = 0u;
        result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v31, 1.0);
        v24 = v33.n128_u32[0];
        v25 = v32;
        *(__n128 *)a5 = v31;
        *(__n128 *)(a5 + 16) = v25;
        *(_DWORD *)(a5 + 32) = v24;
      }
      v12 = 0uLL;
LABEL_12:
      v11 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)((char *)v11 + 64);
      a3 += 4;
      a5 += 36;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_20C672054(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  char *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  float32x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  unsigned int v40;
  float v41;
  float v42;
  double v43;
  double v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float64x2_t v49;
  uint64_t v50;
  const char *v51;
  char v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a2 < a3)
  {
    v57 = v6;
    v58 = v5;
    v59 = v3;
    v60 = v4;
    v8 = a2;
    while (1)
    {
      LODWORD(v48) = sub_20C6719E4(*(float32x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v8)).u32[0];
      v47 = v10;
      v46 = v11;
      v13 = *(uint64_t **)(a1 + 16);
      v12 = *(uint64_t **)(a1 + 24);
      v14 = *v13;
      v15 = *(int **)(a1 + 32);
      v16 = sub_20C671434(v8, (v13[1] - *v13) >> 6, v12, *v15);
      v18 = 0uLL;
      v19 = 0uLL;
      if ((v16 & 0x80000000) == 0)
      {
        v20 = (float64x2_t *)(v14 + ((unint64_t)v16 << 6));
        v19 = *v20;
        v18 = v20[1];
      }
      HIDWORD(v21) = 0;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v22 = *v15;
      if ((int)v22 >= 1)
        break;
      v26 = 0;
      LODWORD(v21) = 0;
      v30 = v46;
LABEL_18:
      v40 = **(_BYTE **)(a1 + 40) == 0;
      if (**(_BYTE **)(a1 + 40))
        v41 = *(float *)&v21;
      else
        v41 = v30;
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v53, 1.0e-10);
      v49 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v40), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v47), LODWORD(v48)), (int8x8_t)v26));
      *(double *)&v50 = v41;
      v42 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v53.f64, v49.f64);
      *(float *)&v43 = v43;
      *(float *)&v44 = v44;
      v45 = **(_QWORD **)(a1 + 8) + 12 * v8;
      *(float *)v45 = v42;
      *(_DWORD *)(v45 + 4) = LODWORD(v43);
      *(_DWORD *)(v45 + 8) = LODWORD(v44);
      if (++v8 == a3)
        return;
    }
    v23 = *v12;
    v24 = v8 * v22;
    v25 = 0uLL;
    v26 = 0;
    LODWORD(v21) = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = v46;
    while (1)
    {
      v31 = *(unsigned int *)(v23 + 4 * v24);
      if ((v31 & 0x80000000) != 0 || v31 >= (v13[1] - *v13) >> 6)
        break;
      v32 = *(float *)(v12[2] + 4 * v24);
      if (v32 != 0.0)
      {
        if (**(_BYTE **)(a1 + 40))
        {
          v33 = **(_QWORD **)(a1 + 48) + 36 * v31;
          v26 = vadd_f32(v26, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v33, v48), vmul_n_f32(*(float32x2_t *)(v33 + 12), v47)), vmul_n_f32(*(float32x2_t *)(v33 + 24), v46)), v32));
          *(float *)&v21 = *(float *)&v21
                         + (float)(v32
                                 * (float)((float)((float)(v48 * *(float *)(v33 + 8))
                                                 + (float)(v47 * *(float *)(v33 + 20)))
                                         + (float)(v46 * *(float *)(v33 + 32))));
        }
        v34 = (float64x2_t *)(*v13 + (v31 << 6));
        v35 = v34[1];
        v36 = vmulq_f64(v19, *v34);
        v37 = vmulq_f64(v18, v35);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v37), (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)).f64[0] < 0.0)v32 = -v32;
        v38 = v32;
        v25 = vaddq_f64(vmulq_n_f64(*v34, v38), v25);
        v27 = vaddq_f64(vmulq_n_f64(v35, v38), v27);
        v28 = vaddq_f64(vmulq_n_f64(v34[2], v38), v28);
        v39 = vmulq_n_f64(v34[3], v38);
        v53 = v25;
        v54 = v27;
        v29 = vaddq_f64(v39, v29);
        v55 = v28;
        v56 = v29;
      }
      ++v24;
      if (!--v22)
        goto LABEL_18;
    }
    *(_QWORD *)&v49.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v49.f64[1] = "operator()";
    v50 = 1527;
    v51 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v49, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v17, v18.f64[0], v19.f64[0], v21, v25.f64[0], v27.f64[0], v28.f64[0], v29.f64[0], v31, v24, (v13[1] - *v13) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_20C672344(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FB90;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FB90;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C672054(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C672054(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C6726E4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v12;
  float32x2_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  _QWORD v29[4];
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a2 < a3)
  {
    v33 = v8;
    v34 = v7;
    v35 = v6;
    v36 = v5;
    v37 = v3;
    v38 = v4;
    v10 = a2;
    while (1)
    {
      v32 = 0;
      v31 = 0;
      LODWORD(v31) = sub_20C575548(*(float64x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v31) = v12;
      v32 = v14;
      v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1)
        break;
      v19 = 0.0;
      v18 = 0.0;
      v17 = 0.0;
LABEL_12:
      v28 = (float *)(**(_QWORD **)(a1 + 8) + 12 * v10);
      *v28 = v17;
      v28[1] = v18;
      v28[2] = v19;
      if (++v10 == a3)
        return;
    }
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    while (1)
    {
      v20 = v16 + v10 * v15;
      v21 = **(_QWORD **)(a1 + 24);
      v22 = *(float *)(v21 + 8 * v20);
      v23 = (int)v22;
      if ((v23 & 0x80000000) != 0)
        break;
      v24 = *(_QWORD **)(a1 + 32);
      if (v24[1] <= (unint64_t)v23)
        break;
      v25 = *(float *)(v21 + 8 * v20 + 4);
      if (v25 != 0.0)
      {
        v17 = v17 + (float)(v25 * sub_20C6635D8((float64x2_t *)(*v24 + (v23 << 7)), (float *)&v31).f32[0]);
        v18 = v18 + (float)(v25 * v26);
        v19 = v19 + (float)(v25 * v27);
        v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15)
        goto LABEL_12;
    }
    v29[0] = "usdSkel/utils.cpp";
    v29[1] = "operator()";
    v29[2] = 1418;
    v29[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(si"
             "ze_t, size_t) const";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, (int)v22, v16 + v10 * v15, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

uint64_t sub_20C672890(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FBD8;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FBD8;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C6726E4(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6726E4(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C672C30(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  float v11;
  float v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  char *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float64x2_t v26;
  float32x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float v31;
  float v32;
  unint64_t v33;
  float v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  unsigned int v42;
  float v43;
  float v44;
  double v45;
  double v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float64x2_t v51;
  uint64_t v52;
  const char *v53;
  char v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if (a2 < a3)
  {
    v59 = v6;
    v60 = v5;
    v61 = v3;
    v62 = v4;
    v8 = a2;
    for (i = 8 * a2; ; i += 8)
    {
      LODWORD(v50) = sub_20C575548(*(float64x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v8)).u32[0];
      v49 = v11;
      v48 = v12;
      v14 = *(uint64_t **)(a1 + 16);
      v13 = *(_QWORD **)(a1 + 24);
      v15 = *v14;
      v16 = *(int **)(a1 + 32);
      v17 = sub_20C672F2C(v8, (v14[1] - *v14) >> 6, v13, *v16);
      v19 = 0uLL;
      v20 = 0uLL;
      if ((v17 & 0x80000000) == 0)
      {
        v21 = (float64x2_t *)(v15 + ((unint64_t)v17 << 6));
        v20 = *v21;
        v19 = v21[1];
      }
      HIDWORD(v22) = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v23 = *v16;
      if ((int)v23 >= 1)
        break;
      v27 = 0;
      LODWORD(v22) = 0;
      v31 = v48;
LABEL_18:
      v42 = **(_BYTE **)(a1 + 40) == 0;
      if (**(_BYTE **)(a1 + 40))
        v43 = *(float *)&v22;
      else
        v43 = v31;
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v55, 1.0e-10);
      v51 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v42), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v49), LODWORD(v50)), (int8x8_t)v27));
      *(double *)&v52 = v43;
      v44 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v55.f64, v51.f64);
      *(float *)&v45 = v45;
      *(float *)&v46 = v46;
      v47 = **(_QWORD **)(a1 + 8) + 12 * v8;
      *(float *)v47 = v44;
      *(_DWORD *)(v47 + 4) = LODWORD(v45);
      *(_DWORD *)(v47 + 8) = LODWORD(v46);
      if (++v8 == a3)
        return;
    }
    v24 = v8 * v23;
    v25 = (float *)(*v13 + i * v23 + 4);
    v26 = 0uLL;
    v27 = 0;
    LODWORD(v22) = 0;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = v48;
    while (1)
    {
      v32 = *(v25 - 1);
      v33 = (int)v32;
      if ((v33 & 0x80000000) != 0 || v33 >= (v14[1] - *v14) >> 6)
        break;
      v34 = *v25;
      if (*v25 != 0.0)
      {
        if (**(_BYTE **)(a1 + 40))
        {
          v35 = **(_QWORD **)(a1 + 48) + 36 * v33;
          v27 = vadd_f32(v27, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v35, v50), vmul_n_f32(*(float32x2_t *)(v35 + 12), v49)), vmul_n_f32(*(float32x2_t *)(v35 + 24), v48)), v34));
          *(float *)&v22 = *(float *)&v22
                         + (float)(v34
                                 * (float)((float)((float)(v50 * *(float *)(v35 + 8))
                                                 + (float)(v49 * *(float *)(v35 + 20)))
                                         + (float)(v48 * *(float *)(v35 + 32))));
        }
        v36 = (float64x2_t *)(*v14 + (v33 << 6));
        v37 = v36[1];
        v38 = vmulq_f64(v20, *v36);
        v39 = vmulq_f64(v19, v37);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1)), v39), (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1)).f64[0] < 0.0)v34 = -v34;
        v40 = v34;
        v26 = vaddq_f64(vmulq_n_f64(*v36, v40), v26);
        v28 = vaddq_f64(vmulq_n_f64(v37, v40), v28);
        v29 = vaddq_f64(vmulq_n_f64(v36[2], v40), v29);
        v41 = vmulq_n_f64(v36[3], v40);
        v55 = v26;
        v56 = v28;
        v30 = vaddq_f64(v41, v30);
        v57 = v29;
        v58 = v30;
      }
      ++v24;
      v25 += 2;
      if (!--v23)
        goto LABEL_18;
    }
    *(_QWORD *)&v51.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v51.f64[1] = "operator()";
    v52 = 1527;
    v53 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v18, v19.f64[0], v20.f64[0], v22, v26.f64[0], v28.f64[0], v29.f64[0], v30.f64[0], (int)v32, v24, (v14[1] - *v14) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_20C672F2C(uint64_t a1, unint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  float *v5;
  uint64_t result;
  float v7;
  unint64_t v8;
  _BOOL4 v10;

  if (a4 < 1)
    return 0xFFFFFFFFLL;
  v4 = a4;
  v5 = (float *)(*a3 + 8 * a1 * a4 + 4);
  result = 0xFFFFFFFFLL;
  v7 = -1.0;
  do
  {
    v8 = (int)*(v5 - 1);
    if ((v8 & 0x80000000) == 0 && v8 < a2)
    {
      v10 = v7 < *v5 || (int)result < 0;
      if (v10)
        result = v8;
      else
        result = result;
      if (v10)
        v7 = *v5;
    }
    v5 += 2;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_20C672FA0(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FC20;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FC20;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C672C30(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C672C30(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C673340(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v12;
  float32x2_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  _QWORD v29[4];
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a2 < a3)
  {
    v33 = v8;
    v34 = v7;
    v35 = v6;
    v36 = v5;
    v37 = v3;
    v38 = v4;
    v10 = a2;
    while (1)
    {
      v32 = 0;
      v31 = 0;
      LODWORD(v31) = sub_20C6719E4(*(float32x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v31) = v12;
      v32 = v14;
      v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1)
        break;
      v19 = 0.0;
      v18 = 0.0;
      v17 = 0.0;
LABEL_12:
      v28 = (float *)(**(_QWORD **)(a1 + 8) + 12 * v10);
      *v28 = v17;
      v28[1] = v18;
      v28[2] = v19;
      if (++v10 == a3)
        return;
    }
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    while (1)
    {
      v20 = v16 + v10 * v15;
      v21 = **(_QWORD **)(a1 + 24);
      v22 = *(float *)(v21 + 8 * v20);
      v23 = (int)v22;
      if ((v23 & 0x80000000) != 0)
        break;
      v24 = *(_QWORD **)(a1 + 32);
      if (v24[1] <= (unint64_t)v23)
        break;
      v25 = *(float *)(v21 + 8 * v20 + 4);
      if (v25 != 0.0)
      {
        v17 = v17 + (float)(v25 * sub_20C663754((float32x2_t *)(*v24 + (v23 << 6)), (float *)&v31).f32[0]);
        v18 = v18 + (float)(v25 * v26);
        v19 = v19 + (float)(v25 * v27);
        v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15)
        goto LABEL_12;
    }
    v29[0] = "usdSkel/utils.cpp";
    v29[1] = "operator()";
    v29[2] = 1418;
    v29[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(si"
             "ze_t, size_t) const";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, (int)v22, v16 + v10 * v15, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

uint64_t sub_20C6734EC(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FC68;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FC68;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C673340(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C673340(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C67388C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  float v11;
  float v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  char *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float64x2_t v26;
  float32x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float v31;
  float v32;
  unint64_t v33;
  float v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  unsigned int v42;
  float v43;
  float v44;
  double v45;
  double v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float64x2_t v51;
  uint64_t v52;
  const char *v53;
  char v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if (a2 < a3)
  {
    v59 = v6;
    v60 = v5;
    v61 = v3;
    v62 = v4;
    v8 = a2;
    for (i = 8 * a2; ; i += 8)
    {
      LODWORD(v50) = sub_20C6719E4(*(float32x2_t **)a1, (float *)(**(_QWORD **)(a1 + 8) + 12 * v8)).u32[0];
      v49 = v11;
      v48 = v12;
      v14 = *(uint64_t **)(a1 + 16);
      v13 = *(_QWORD **)(a1 + 24);
      v15 = *v14;
      v16 = *(int **)(a1 + 32);
      v17 = sub_20C672F2C(v8, (v14[1] - *v14) >> 6, v13, *v16);
      v19 = 0uLL;
      v20 = 0uLL;
      if ((v17 & 0x80000000) == 0)
      {
        v21 = (float64x2_t *)(v15 + ((unint64_t)v17 << 6));
        v20 = *v21;
        v19 = v21[1];
      }
      HIDWORD(v22) = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v23 = *v16;
      if ((int)v23 >= 1)
        break;
      v27 = 0;
      LODWORD(v22) = 0;
      v31 = v48;
LABEL_18:
      v42 = **(_BYTE **)(a1 + 40) == 0;
      if (**(_BYTE **)(a1 + 40))
        v43 = *(float *)&v22;
      else
        v43 = v31;
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v55, 1.0e-10);
      v51 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v42), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v49), LODWORD(v50)), (int8x8_t)v27));
      *(double *)&v52 = v43;
      v44 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v55.f64, v51.f64);
      *(float *)&v45 = v45;
      *(float *)&v46 = v46;
      v47 = **(_QWORD **)(a1 + 8) + 12 * v8;
      *(float *)v47 = v44;
      *(_DWORD *)(v47 + 4) = LODWORD(v45);
      *(_DWORD *)(v47 + 8) = LODWORD(v46);
      if (++v8 == a3)
        return;
    }
    v24 = v8 * v23;
    v25 = (float *)(*v13 + i * v23 + 4);
    v26 = 0uLL;
    v27 = 0;
    LODWORD(v22) = 0;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = v48;
    while (1)
    {
      v32 = *(v25 - 1);
      v33 = (int)v32;
      if ((v33 & 0x80000000) != 0 || v33 >= (v14[1] - *v14) >> 6)
        break;
      v34 = *v25;
      if (*v25 != 0.0)
      {
        if (**(_BYTE **)(a1 + 40))
        {
          v35 = **(_QWORD **)(a1 + 48) + 36 * v33;
          v27 = vadd_f32(v27, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v35, v50), vmul_n_f32(*(float32x2_t *)(v35 + 12), v49)), vmul_n_f32(*(float32x2_t *)(v35 + 24), v48)), v34));
          *(float *)&v22 = *(float *)&v22
                         + (float)(v34
                                 * (float)((float)((float)(v50 * *(float *)(v35 + 8))
                                                 + (float)(v49 * *(float *)(v35 + 20)))
                                         + (float)(v48 * *(float *)(v35 + 32))));
        }
        v36 = (float64x2_t *)(*v14 + (v33 << 6));
        v37 = v36[1];
        v38 = vmulq_f64(v20, *v36);
        v39 = vmulq_f64(v19, v37);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1)), v39), (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1)).f64[0] < 0.0)v34 = -v34;
        v40 = v34;
        v26 = vaddq_f64(vmulq_n_f64(*v36, v40), v26);
        v28 = vaddq_f64(vmulq_n_f64(v37, v40), v28);
        v29 = vaddq_f64(vmulq_n_f64(v36[2], v40), v29);
        v41 = vmulq_n_f64(v36[3], v40);
        v55 = v26;
        v56 = v28;
        v30 = vaddq_f64(v41, v30);
        v57 = v29;
        v58 = v30;
      }
      ++v24;
      v25 += 2;
      if (!--v23)
        goto LABEL_18;
    }
    *(_QWORD *)&v51.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v51.f64[1] = "operator()";
    v52 = 1527;
    v53 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v18, v19.f64[0], v20.f64[0], v22, v26.f64[0], v28.f64[0], v29.f64[0], v30.f64[0], (int)v32, v24, (v14[1] - *v14) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_20C673B90(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FCB0;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FCB0;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C67388C(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C67388C(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C673F30(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v14;
  float32x2_t v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  float v28;
  double v29;
  float v30;
  float v31;
  uint64_t v32;
  _QWORD v33[4];
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a2 < a3)
  {
    v37 = v10;
    v38 = v9;
    v39 = v8;
    v40 = v7;
    v41 = v6;
    v42 = v5;
    v43 = v3;
    v44 = v4;
    v12 = a2;
    while (1)
    {
      v36 = 0;
      v35 = 0;
      LODWORD(v35) = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(_QWORD **)a1 + 12 * v12), *(_QWORD *)(a1 + 8)).u32[0];
      HIDWORD(v35) = v14;
      v36 = v16;
      v17 = **(_DWORD **)(a1 + 24);
      if (v17 >= 1)
        break;
      v21 = 0.0;
      v20 = 0.0;
      v19 = 0.0;
LABEL_12:
      v29 = 1.0 / fmaxf(sqrtf((float)(v21 * v21) + (float)((float)(v20 * v20) + (float)(v19 * v19))), 1.0e-10);
      v30 = v29 * v19;
      v31 = v29 * v20;
      *(float *)&v29 = v29 * v21;
      v32 = **(_QWORD **)a1 + 12 * v12;
      *(float *)v32 = v30;
      *(float *)(v32 + 4) = v31;
      *(_DWORD *)(v32 + 8) = LODWORD(v29);
      if (++v12 == a3)
        return;
    }
    v18 = 0;
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    while (1)
    {
      v22 = v18 + v12 * v17;
      v23 = *(_QWORD **)(a1 + 32);
      v24 = *(unsigned int *)(*v23 + 4 * v22);
      if ((v24 & 0x80000000) != 0)
        break;
      v25 = *(_QWORD **)(a1 + 40);
      if (v25[1] <= v24)
        break;
      v26 = *(float *)(v23[2] + 4 * v22);
      if (v26 != 0.0)
      {
        v19 = v19
            + (float)(v26
                    * pxrInternal__aapl__pxrReserved__::operator*((float *)&v35, *v25 + 72 * v24).f32[0]);
        v20 = v20 + (float)(v26 * v27);
        v21 = v21 + (float)(v26 * v28);
        v17 = **(_DWORD **)(a1 + 24);
      }
      if (++v18 >= v17)
        goto LABEL_12;
    }
    v33[0] = "usdSkel/utils.cpp";
    v33[1] = "operator()";
    v33[2] = 1945;
    v33[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Ident"
             "ityPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v34 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v33, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v15, v24, v18 + v12 * v17, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_20C674134(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FCF8;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FCF8;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C673F30(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C673F30(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C6744D4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double RotationQuaternion;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const pxrInternal__aapl__pxrReserved__::GfMatrix3d *v22;
  double v23[9];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double v29[10];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v9 = a2;
  if (a7)
    *a7 = 0;
  if (a2)
  {
    v11 = a3 + 16;
    do
    {
      v30 = *a1;
      v12 = a1[1];
      v13 = a1[2];
      v14 = a1[3];
      v34 = *((_QWORD *)a1 + 8);
      v32 = v13;
      v33 = v14;
      v31 = v12;
      memset(v29, 0, 72);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetOrthonormalized((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v30, 1, (uint64_t)v29);
      RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v29);
      *(_QWORD *)(v11 - 16) = v16;
      *(_QWORD *)(v11 - 8) = v17;
      *(_QWORD *)v11 = v18;
      *(double *)(v11 + 8) = RotationQuaternion;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v29, 0, 0.0, (uint64_t)v23);
      v26 = v32;
      v27 = v33;
      v28 = v34;
      v24 = v30;
      v25 = v31;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=((double *)&v24, v23);
      *(_OWORD *)a5 = v24;
      v20 = v26;
      v19 = v27;
      v21 = v25;
      *(_QWORD *)(a5 + 64) = v28;
      *(_OWORD *)(a5 + 32) = v20;
      *(_OWORD *)(a5 + 48) = v19;
      *(_OWORD *)(a5 + 16) = v21;
      if (a7 && !*a7)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)&v24, 1.0);
        if (!pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v24, v22, 0.000001))*a7 = 1;
      }
      a1 = (__int128 *)((char *)a1 + 72);
      v11 += 32;
      a5 += 72;
      --v9;
    }
    while (v9);
  }
}

_QWORD *sub_20C674630(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BF25370(a1, a2);
    a1[1] += 32 * a2;
  }
  return a1;
}

void sub_20C674674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C674690(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BED5B44(a1, a2);
    v4 = (char *)a1[1];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20C674714(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C674730(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int32 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  char *v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  uint64_t v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  double v40;
  double v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  float v45;
  float v46;
  float v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  float v52;
  double v53;
  float v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  double v66;
  double v67;
  uint64_t v68;
  const char *v69;
  char v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  if (a2 < a3)
  {
    v75 = v12;
    v76 = v11;
    v77 = v10;
    v78 = v9;
    v79 = v8;
    v80 = v7;
    v81 = v6;
    v82 = v5;
    v83 = v3;
    v84 = v4;
    v14 = a2;
    while (1)
    {
      v74 = 0.0;
      v73 = 0;
      v16 = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(_QWORD **)a1 + 12 * v14), *(_QWORD *)(a1 + 8)).u32[0];
      v18 = v17;
      v20 = v19;
      v73 = __PAIR64__(LODWORD(v17), v16);
      v74 = v19;
      v21 = *(uint64_t **)(a1 + 24);
      v22 = *v21;
      v23 = *(int **)(a1 + 40);
      v24 = sub_20C671434(v14, (v21[1] - *v21) >> 5, *(_QWORD **)(a1 + 32), *v23);
      if ((v24 & 0x80000000) != 0)
      {
        v29 = 0.0;
        v30 = 0.0;
        v28 = 0.0;
        v27 = 0.0;
      }
      else
      {
        v26 = (double *)(v22 + 32 * v24);
        v27 = *v26;
        v28 = v26[1];
        v30 = v26[2];
        v29 = v26[3];
      }
      v71 = 0u;
      v72 = 0u;
      v31 = *v23;
      if (*v23 >= 1)
        break;
      v39 = 0.0;
      v38 = 0.0;
      v33 = 0.0;
LABEL_20:
      if (**(_BYTE **)(a1 + 48))
      {
        v20 = v39;
        v18 = v38;
        v54 = v33;
      }
      else
      {
        v54 = *(float *)&v16;
      }
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize((double *)&v71, 1.0e-10);
      v66 = v54;
      v67 = v18;
      *(double *)&v68 = v20;
      v55 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform((double *)&v71, &v66);
      v58 = sqrt(v57 * v57 + v55 * v55 + v56 * v56);
      v59 = 1.0 / v58;
      v60 = v58 <= 1.0e-10;
      v61 = 1.0e10;
      if (!v60)
        v61 = v59;
      v62 = v55 * v61;
      v63 = v56 * v61;
      v64 = v57 * v61;
      v65 = (float *)(**(_QWORD **)a1 + 12 * v14);
      *v65 = v62;
      v65[1] = v63;
      v65[2] = v64;
      if (++v14 == a3)
        return;
    }
    v32 = 0;
    v33 = 0.0;
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    v39 = 0.0;
    v40 = v29;
    v41 = v27;
    while (1)
    {
      v42 = v32 + v14 * v31;
      v43 = *(_QWORD **)(a1 + 32);
      v44 = *(unsigned int *)(*v43 + 4 * v42);
      if ((v44 & 0x80000000) != 0 || v44 >= (v21[1] - *v21) >> 5)
        break;
      v45 = *(float *)(v43[2] + 4 * v42);
      if (v45 != 0.0)
      {
        if (**(_BYTE **)(a1 + 48))
        {
          v33 = v33
              + (float)(v45
                      * pxrInternal__aapl__pxrReserved__::operator*((float *)&v73, **(_QWORD **)(a1 + 56) + 72 * v44).f32[0]);
          v38 = v38 + (float)(v45 * v46);
          v39 = v39 + (float)(v45 * v47);
          v21 = *(uint64_t **)(a1 + 24);
          v35 = *((double *)&v71 + 1);
          v36 = *(double *)&v71;
          v37 = *((double *)&v72 + 1);
          v34 = *(double *)&v72;
          v31 = **(_DWORD **)(a1 + 40);
        }
        v48 = (double *)(*v21 + 32 * v44);
        v49 = v48[1];
        v50 = v48[2];
        v51 = v48[3];
        if (v41 * *v48 + v28 * v49 + v30 * v50 + v40 * v51 >= 0.0)
          v52 = v45;
        else
          v52 = -v45;
        v53 = v52;
        v37 = v37 + v51 * v53;
        v36 = *v48 * v53 + v36;
        v35 = v49 * v53 + v35;
        *(double *)&v71 = v36;
        *((double *)&v71 + 1) = v35;
        v34 = v50 * v53 + v34;
        *(double *)&v72 = v34;
        *((double *)&v72 + 1) = v37;
      }
      if (++v32 >= v31)
      {
        v18 = *((float *)&v73 + 1);
        v16 = v73;
        v20 = v74;
        goto LABEL_20;
      }
    }
    v66 = COERCE_DOUBLE("usdSkel/utils.cpp");
    v67 = COERCE_DOUBLE("operator()");
    v68 = 2046;
    v69 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointI"
          "ndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v70 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v66, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v25, v34, v35, v36, v37, v44, v32 + v14 * v31, (v21[1] - *v21) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_20C674A88(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FD40;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FD40;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C674730(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C674730(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C674E28(uint64_t a1, unint64_t a2, char *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  _QWORD *v18;
  unint64_t v19;
  float32x2_t v20;
  unint64_t v21;
  _QWORD *v22;
  float v23;
  uint64_t v24;
  float32x2_t v25;
  double v26;
  _QWORD v27[4];
  char v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 < (unint64_t)a3)
  {
    v29 = v9;
    v30 = v10;
    LODWORD(a4) = 786163455;
    while (1)
    {
      v12 = **(_QWORD **)a1 + 12 * a2;
      v13 = **(unsigned int **)(a1 + 24);
      if ((int)v13 >= 1)
        break;
      v20 = 0;
      LODWORD(a7) = 0;
LABEL_12:
      a9 = COERCE_DOUBLE(vmul_f32((float32x2_t)__PAIR64__(v20.u32[1], LODWORD(a7)), (float32x2_t)__PAIR64__(v20.u32[1], LODWORD(a7))));
      v26 = 1.0
          / fmaxf(sqrtf(vadd_f32(*(float32x2_t *)&a9, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 1), vmul_f32(v20, v20))).f32[0]), 1.0e-10);
      a7 = v26 * *(float *)&a7;
      *(float *)&a7 = a7;
      *(float32x2_t *)v12 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v20), v26));
      *(_DWORD *)(v12 + 8) = LODWORD(a7);
      if ((char *)++a2 == a3)
        return;
    }
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(float *)(v12 + 4);
    v16 = *(float *)(v12 + 8);
    v17 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v14, *(float *)v12), vmul_n_f32(*(float32x2_t *)(v14 + 12), v15)), vmul_n_f32(*(float32x2_t *)(v14 + 24), v16));
    *(float *)&a9 = (float)((float)(*(float *)v12 * *(float *)(v14 + 8)) + (float)(v15 * *(float *)(v14 + 20)))
                  + (float)(v16 * *(float *)(v14 + 32));
    v18 = *(_QWORD **)(a1 + 32);
    v19 = a2 * v13;
    v20 = 0;
    LODWORD(a7) = 0;
    while (1)
    {
      v21 = *(unsigned int *)(*v18 + 4 * v19);
      if ((v21 & 0x80000000) != 0)
        break;
      v22 = *(_QWORD **)(a1 + 40);
      if (v22[1] <= v21)
        break;
      v23 = *(float *)(v18[2] + 4 * v19);
      if (v23 != 0.0)
      {
        v24 = *v22 + 36 * v21;
        v25.i32[0] = *(_DWORD *)(v24 + 8);
        v25.i32[1] = *(_DWORD *)(v24 + 20);
        v20 = vadd_f32(v20, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v24, v17.f32[0]), vmul_lane_f32(*(float32x2_t *)(v24 + 12), v17, 1)), vmul_n_f32(*(float32x2_t *)(v24 + 24), *(float *)&a9)), v23));
        *(float *)&a7 = *(float *)&a7
                      + (float)(v23
                              * (float)(vaddv_f32(vmul_f32(v17, v25)) + (float)(*(float *)&a9 * *(float *)(v24 + 32))));
      }
      ++v19;
      if (!--v13)
        goto LABEL_12;
    }
    v27[0] = "usdSkel/utils.cpp";
    v27[1] = "operator()";
    v27[2] = 1945;
    v27[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Ident"
             "ityPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v27, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, a4, 1.0, *(double *)&v20, a7, *(double *)&v17, a9, v21, v19, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_20C675034(tbb::internal::allocate_continuation_proxy *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8;
  unsigned int v9;
  char *v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  char v27;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned __int8 v32;
  _BYTE *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  unsigned __int8 v39[16];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v8 = *((_QWORD *)this - 4);
      if (*(int *)(v8 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v8 + 8) = 1;
        v9 = *((unsigned __int8 *)this + 52);
        if (v9 <= 1)
          LOBYTE(v9) = 1;
        *((_BYTE *)this + 52) = v9 + 1;
      }
    }
  }
  v11 = (__int128 *)((char *)this + 8);
  v10 = (char *)*((_QWORD *)this + 1);
  v12 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3);
  v14 = &v10[-v12];
  if (v13 < (unint64_t)&v10[-v12])
  {
    v15 = *((_QWORD *)this + 5);
    if (v15 > 1)
      goto LABEL_12;
    if (v15 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v16 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v16 - 11) = 1;
        *(_QWORD *)v16 = &unk_24C520F68;
        __dmb(0xBu);
        v16[8] = 0;
        *((_QWORD *)this - 4) = v16;
        *((_QWORD *)v16 - 3) = 2;
        v17 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v16, 0x38uLL);
        *(_BYTE *)(v17 - 11) = 1;
        *(_QWORD *)v17 = &off_24C53FD88;
        *(_QWORD *)(v17 + 8) = *((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v18;
        *(_QWORD *)(v17 + 16) = v18;
        *(_OWORD *)(v17 + 24) = *(_OWORD *)((char *)this + 24);
        v19 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v19;
        *(_QWORD *)(v17 + 40) = v19;
        *(_DWORD *)(v17 + 48) = 2;
        *(_BYTE *)(v17 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v17 - 40))(*(_QWORD *)(v17 - 40), v17, v17 - 8);
        v12 = *((_QWORD *)this + 2);
        v13 = *((_QWORD *)this + 3);
        v10 = (char *)*((_QWORD *)this + 1);
        v14 = &v10[-v12];
        if (v13 >= (unint64_t)&v10[-v12])
          break;
        v20 = *((_QWORD *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v13 < (unint64_t)v14 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v39 = 0x10000;
    v40 = *v11;
    v41 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v21 = sub_20C15C670(v39, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v27 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v27 & 1) == 0)
        break;
      v30 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v30;
      v29 = v39[2];
      if (v39[2] < 2u)
      {
        v28 = v39[0];
        if (v39[v39[0] + 3] < v30
          && *((_QWORD *)&v40 + 3 * v39[0] + 2) < *((_QWORD *)&v40 + 3 * v39[0]) - *((_QWORD *)&v40 + 3 * v39[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v31 = v39[1];
      v32 = v39[v39[1] + 3];
      v33 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v33 - 11) = 1;
      *(_QWORD *)v33 = &unk_24C520F68;
      __dmb(0xBu);
      v33[8] = 0;
      *((_QWORD *)this - 4) = v33;
      *((_QWORD *)v33 - 3) = 2;
      v34 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v33, 0x38uLL);
      v35 = (char *)&v40 + 24 * v31;
      *(_BYTE *)(v34 - 11) = 1;
      *(_QWORD *)v34 = &off_24C53FD88;
      v36 = *(_OWORD *)v35;
      *(_QWORD *)(v34 + 24) = *((_QWORD *)v35 + 2);
      *(_OWORD *)(v34 + 8) = v36;
      *(_QWORD *)(v34 + 32) = *((_QWORD *)this + 4);
      v37 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v37;
      *(_QWORD *)(v34 + 40) = v37;
      *(_DWORD *)(v34 + 48) = 2;
      *(_BYTE *)(v34 + 52) = *((_BYTE *)this + 52) - v32;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v34 - 40))(*(_QWORD *)(v34 - 40), v34, v34 - 8);
      v29 = --v39[2];
      v39[1] = (v39[1] + 1) & 7;
LABEL_27:
      if (!v29 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v28 = v39[0];
LABEL_22:
    sub_20C674E28(*((_QWORD *)this + 4), *((_QWORD *)&v40 + 3 * v28 + 1), *((char **)&v40 + 3 * v28), v21, v22, v23, v24, v25, v26);
    v29 = --v39[2];
    v39[0] = (v39[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C674E28(*((_QWORD *)this + 4), v12, v10, a2, a3, a4, a5, a6, a7);
  return 0;
}

const pxrInternal__aapl__pxrReserved__::GfMatrix3f *sub_20C6753D4(const pxrInternal__aapl__pxrReserved__::GfMatrix3f *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  const pxrInternal__aapl__pxrReserved__::GfMatrix3f *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d *v12;
  double RotationQuaternion;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  const pxrInternal__aapl__pxrReserved__::GfMatrix3f *v19;
  double v20[9];
  _OWORD v21[4];
  uint64_t v22;
  _OWORD v23[2];
  int v24;
  double v25[10];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v9 = a2;
  v10 = result;
  if (a7)
    *a7 = 0;
  if (a2)
  {
    v11 = a3 + 16;
    do
    {
      v30 = 0;
      v29 = 0u;
      v28 = 0u;
      v27 = 0u;
      v26 = 0u;
      v12 = (pxrInternal__aapl__pxrReserved__::GfMatrix3d *)pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v26, v10);
      memset(v25, 0, 72);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetOrthonormalized(v12, 1, (uint64_t)v25);
      RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v25);
      *(_QWORD *)(v11 - 16) = v14;
      *(_QWORD *)(v11 - 8) = v15;
      *(_QWORD *)v11 = v16;
      *(double *)(v11 + 8) = RotationQuaternion;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v25, 0, 0.0, (uint64_t)v20);
      v21[2] = v28;
      v21[3] = v29;
      v22 = v30;
      v21[0] = v26;
      v21[1] = v27;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=((double *)v21, v20);
      result = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v23, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v21);
      v17 = v23[0];
      v18 = v23[1];
      *(_DWORD *)(a5 + 32) = v24;
      *(_OWORD *)a5 = v17;
      *(_OWORD *)(a5 + 16) = v18;
      if (a7 && !*a7)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v21, 1.0);
        result = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v21, v19, 0.000001);
        if ((result & 1) == 0)
          *a7 = 1;
      }
      v10 = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)((char *)v10 + 36);
      v11 += 32;
      a5 += 36;
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_20C67553C(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  unsigned int v29;
  char *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  double v34;
  float32x2_t v35;
  float32x2_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t v41;
  float32x2_t v42;
  float64x2_t v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  unsigned int v52;
  float v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  BOOL v59;
  double v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  double v66;
  int8x8_t v67;
  float64x2_t v68;
  uint64_t v69;
  const char *v70;
  char v71;
  float64x2_t v72;
  float64x2_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  if (a2 < a3)
  {
    v74 = v13;
    v75 = v12;
    v76 = v11;
    v77 = v10;
    v78 = v9;
    v79 = v8;
    v80 = v7;
    v81 = v6;
    v82 = v4;
    v83 = v5;
    v15 = a2;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = **(_QWORD **)a1 + 12 * v15;
      v65 = *(float *)v18;
      v64 = *(float *)(v18 + 4);
      LODWORD(a4) = *(_DWORD *)(v18 + 8);
      v66 = a4;
      v19 = *(float32x2_t *)v17;
      v20 = *(float32x2_t *)(v17 + 12);
      v21 = *(float32x2_t *)(v17 + 24);
      v22 = *(float *)(v17 + 8);
      v23 = *(float *)(v17 + 20);
      v24 = *(float *)(v17 + 32);
      v26 = *(uint64_t **)(a1 + 24);
      v25 = *(uint64_t **)(a1 + 32);
      v27 = *v26;
      v28 = *(int **)(a1 + 40);
      v29 = sub_20C671434(v15, (v26[1] - *v26) >> 5, v25, *v28);
      v31 = 0uLL;
      v32 = 0uLL;
      if ((v29 & 0x80000000) == 0)
      {
        v33 = (float64x2_t *)(v27 + 32 * v29);
        v32 = *v33;
        v31 = v33[1];
      }
      v36 = vadd_f32(vmul_n_f32(v19, v65), vmul_n_f32(v20, v64));
      HIDWORD(v34) = HIDWORD(v66);
      v35 = vadd_f32(v36, vmul_n_f32(v21, *(float *)&v66));
      v36.f32[0] = (float)((float)(v65 * v22) + (float)(v64 * v23)) + (float)(*(float *)&v66 * v24);
      HIDWORD(v37) = 0;
      v72 = 0u;
      v73 = 0u;
      v38 = *v28;
      if ((int)v38 >= 1)
        break;
      v42 = 0;
      LODWORD(v37) = 0;
LABEL_18:
      v52 = **(_BYTE **)(a1 + 48) == 0;
      if (**(_BYTE **)(a1 + 48))
        v53 = *(float *)&v37;
      else
        v53 = v36.f32[0];
      v67 = (int8x8_t)v35;
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v72.f64, 1.0e-10);
      v68 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v52), 0x1FuLL)), v67, (int8x8_t)v42));
      *(double *)&v69 = v53;
      v54 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(v72.f64, v68.f64);
      v57 = sqrt(v56 * v56 + v54 * v54 + v55 * v55);
      v58 = 1.0 / v57;
      v59 = v57 <= 1.0e-10;
      v60 = 1.0e10;
      if (!v59)
        v60 = v58;
      a4 = v54 * v60;
      *(float *)&a4 = a4;
      v61 = v55 * v60;
      v62 = v56 * v60;
      v63 = **(_QWORD **)a1 + 12 * v15;
      *(_DWORD *)v63 = LODWORD(a4);
      *(float *)(v63 + 4) = v61;
      *(float *)(v63 + 8) = v62;
      if (++v15 == a3)
        return;
    }
    v39 = *v25;
    LODWORD(v34) = v35.i32[1];
    v40 = v15 * v38;
    v41 = 0uLL;
    v42 = 0;
    LODWORD(v37) = 0;
    v43 = 0uLL;
    while (1)
    {
      v44 = *(unsigned int *)(v39 + 4 * v40);
      if ((v44 & 0x80000000) != 0 || v44 >= (v26[1] - *v26) >> 5)
        break;
      v45 = *(float *)(v25[2] + 4 * v40);
      if (v45 != 0.0)
      {
        if (**(_BYTE **)(a1 + 48))
        {
          v46 = **(_QWORD **)(a1 + 56) + 36 * v44;
          v42 = vadd_f32(v42, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v46, v35.f32[0]), vmul_lane_f32(*(float32x2_t *)(v46 + 12), v35, 1)), vmul_n_f32(*(float32x2_t *)(v46 + 24), v36.f32[0])), v45));
          *(float *)&v37 = *(float *)&v37
                         + (float)(v45
                                 * (float)((float)((float)(v35.f32[0] * *(float *)(v46 + 8))
                                                 + (float)(v35.f32[1] * *(float *)(v46 + 20)))
                                         + (float)(v36.f32[0] * *(float *)(v46 + 32))));
        }
        v47 = *v26 + 32 * v44;
        v48 = *(float64x2_t *)(v47 + 16);
        v49 = vmulq_f64(v32, *(float64x2_t *)v47);
        v50 = vmulq_f64(v31, v48);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v49, (float64x2_t)vdupq_laneq_s64((int64x2_t)v49, 1)), v50), (float64x2_t)vdupq_laneq_s64((int64x2_t)v50, 1)).f64[0] < 0.0)v45 = -v45;
        v51 = v45;
        v41 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)v47, v51), v41);
        v43 = vaddq_f64(vmulq_n_f64(v48, v51), v43);
        v72 = v41;
        v73 = v43;
      }
      ++v40;
      if (!--v38)
        goto LABEL_18;
    }
    *(_QWORD *)&v68.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v68.f64[1] = "operator()";
    v69 = 2046;
    v70 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointI"
          "ndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v71 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v68, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v30, v31.f64[0], v32.f64[0], *(double *)&v36, v37, v34, v41.f64[0], v43.f64[0], v44, v40, (v26[1] - *v26) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_20C6758A8(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;
  _BYTE *v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v29[16];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v3 = *((_QWORD *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v3 + 8) = 1;
        v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1)
          LOBYTE(v4) = 1;
        *((_BYTE *)this + 52) = v4 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = v5 - v7;
  if (v8 < v5 - v7)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10 > 1)
      goto LABEL_12;
    if (v10 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v11 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(_QWORD *)v11 = &unk_24C520F68;
        __dmb(0xBu);
        v11[8] = 0;
        *((_QWORD *)this - 4) = v11;
        *((_QWORD *)v11 - 3) = 2;
        v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &off_24C53FDD0;
        *(_QWORD *)(v12 + 8) = *((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v13;
        *(_QWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        v14 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v14;
        *(_QWORD *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(_BYTE *)(v12 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v12 - 40))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
        v7 = *((_QWORD *)this + 2);
        v8 = *((_QWORD *)this + 3);
        v5 = *((_QWORD *)this + 1);
        v9 = v5 - v7;
        if (v8 >= v5 - v7)
          break;
        v15 = *((_QWORD *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < v9 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v29 = 0x10000;
    v30 = *v6;
    v31 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v16 = sub_20C15C670(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v17 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0)
        break;
      v20 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v20;
      v19 = v29[2];
      if (v29[2] < 2u)
      {
        v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((_QWORD *)&v30 + 3 * v29[0] + 2) < *((_QWORD *)&v30 + 3 * v29[0]) - *((_QWORD *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v21 = v29[1];
      v22 = v29[v29[1] + 3];
      v23 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(_QWORD *)v23 = &unk_24C520F68;
      __dmb(0xBu);
      v23[8] = 0;
      *((_QWORD *)this - 4) = v23;
      *((_QWORD *)v23 - 3) = 2;
      v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      v25 = (char *)&v30 + 24 * v21;
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53FDD0;
      v26 = *(_OWORD *)v25;
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 32) = *((_QWORD *)this + 4);
      v27 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v27;
      *(_QWORD *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(_BYTE *)(v24 + 52) = *((_BYTE *)this + 52) - v22;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v24 - 40))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v18 = v29[0];
LABEL_22:
    sub_20C67553C(*((_QWORD *)this + 4), *((_QWORD *)&v30 + 3 * v18 + 1), *((_QWORD *)&v30 + 3 * v18), v16);
    v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C67553C(*((_QWORD *)this + 4), v7, v5, a2);
  return 0;
}

void sub_20C675C48(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v14;
  float32x2_t v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unsigned int v25;
  _QWORD *v26;
  float v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD v34[4];
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (a2 < a3)
  {
    v38 = v10;
    v39 = v9;
    v40 = v8;
    v41 = v7;
    v42 = v6;
    v43 = v5;
    v44 = v3;
    v45 = v4;
    v12 = a2;
    while (1)
    {
      v37 = 0;
      v36 = 0;
      LODWORD(v36) = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(_QWORD **)a1 + 12 * v12), *(_QWORD *)(a1 + 8)).u32[0];
      HIDWORD(v36) = v14;
      v37 = v16;
      v17 = **(_DWORD **)(a1 + 24);
      if (v17 >= 1)
        break;
      v21 = 0.0;
      v20 = 0.0;
      v19 = 0.0;
LABEL_12:
      v30 = 1.0 / fmaxf(sqrtf((float)(v21 * v21) + (float)((float)(v20 * v20) + (float)(v19 * v19))), 1.0e-10);
      v31 = v30 * v19;
      v32 = v30 * v20;
      *(float *)&v30 = v30 * v21;
      v33 = **(_QWORD **)a1 + 12 * v12;
      *(float *)v33 = v31;
      *(float *)(v33 + 4) = v32;
      *(_DWORD *)(v33 + 8) = LODWORD(v30);
      if (++v12 == a3)
        return;
    }
    v18 = 0;
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    while (1)
    {
      v22 = v18 + v12 * v17;
      v23 = **(_QWORD **)(a1 + 32);
      v24 = *(float *)(v23 + 8 * v22);
      v25 = (int)v24;
      if ((int)v24 < 0)
        break;
      v26 = *(_QWORD **)(a1 + 40);
      if (v26[1] <= (unint64_t)v25)
        break;
      v27 = *(float *)(v23 + 8 * v22 + 4);
      if (v27 != 0.0)
      {
        v19 = v19 + (float)(v27 * pxrInternal__aapl__pxrReserved__::operator*((float *)&v36, *v26 + 72 * v25).f32[0]);
        v20 = v20 + (float)(v27 * v28);
        v21 = v21 + (float)(v27 * v29);
        v17 = **(_DWORD **)(a1 + 24);
      }
      if (++v18 >= v17)
        goto LABEL_12;
    }
    v34[0] = "usdSkel/utils.cpp";
    v34[1] = "operator()";
    v34[2] = 1945;
    v34[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Identity"
             "PointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v34, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v15, (int)v24, v18 + v12 * v17, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_20C675E54(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FE18;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FE18;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C675C48(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C675C48(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C6761F4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int32 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  char *v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  uint64_t v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  unint64_t v45;
  float v46;
  float v47;
  float v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  float v53;
  double v54;
  float v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  double v67;
  double v68;
  uint64_t v69;
  const char *v70;
  char v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if (a2 < a3)
  {
    v76 = v12;
    v77 = v11;
    v78 = v10;
    v79 = v9;
    v80 = v8;
    v81 = v7;
    v82 = v6;
    v83 = v5;
    v84 = v3;
    v85 = v4;
    v14 = a2;
    while (1)
    {
      v75 = 0.0;
      v74 = 0;
      v16 = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(_QWORD **)a1 + 12 * v14), *(_QWORD *)(a1 + 8)).u32[0];
      v18 = v17;
      v20 = v19;
      v74 = __PAIR64__(LODWORD(v17), v16);
      v75 = v19;
      v21 = *(uint64_t **)(a1 + 24);
      v22 = *v21;
      v23 = *(int **)(a1 + 40);
      v24 = sub_20C672F2C(v14, (v21[1] - *v21) >> 5, *(_QWORD **)(a1 + 32), *v23);
      if ((v24 & 0x80000000) != 0)
      {
        v29 = 0.0;
        v30 = 0.0;
        v28 = 0.0;
        v27 = 0.0;
      }
      else
      {
        v26 = (double *)(v22 + 32 * v24);
        v27 = *v26;
        v28 = v26[1];
        v30 = v26[2];
        v29 = v26[3];
      }
      v72 = 0u;
      v73 = 0u;
      v31 = *v23;
      if (*v23 >= 1)
        break;
      v39 = 0.0;
      v38 = 0.0;
      v33 = 0.0;
LABEL_20:
      if (**(_BYTE **)(a1 + 48))
      {
        v20 = v39;
        v18 = v38;
        v55 = v33;
      }
      else
      {
        v55 = *(float *)&v16;
      }
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize((double *)&v72, 1.0e-10);
      v67 = v55;
      v68 = v18;
      *(double *)&v69 = v20;
      v56 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform((double *)&v72, &v67);
      v59 = sqrt(v58 * v58 + v56 * v56 + v57 * v57);
      v60 = 1.0 / v59;
      v61 = v59 <= 1.0e-10;
      v62 = 1.0e10;
      if (!v61)
        v62 = v60;
      v63 = v56 * v62;
      v64 = v57 * v62;
      v65 = v58 * v62;
      v66 = (float *)(**(_QWORD **)a1 + 12 * v14);
      *v66 = v63;
      v66[1] = v64;
      v66[2] = v65;
      if (++v14 == a3)
        return;
    }
    v32 = 0;
    v33 = 0.0;
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    v39 = 0.0;
    v40 = v29;
    v41 = v27;
    while (1)
    {
      v42 = v32 + v14 * v31;
      v43 = **(_QWORD **)(a1 + 32);
      v44 = *(float *)(v43 + 8 * v42);
      v45 = (int)v44;
      if ((v45 & 0x80000000) != 0 || v45 >= (v21[1] - *v21) >> 5)
        break;
      v46 = *(float *)(v43 + 8 * v42 + 4);
      if (v46 != 0.0)
      {
        if (**(_BYTE **)(a1 + 48))
        {
          v33 = v33
              + (float)(v46
                      * pxrInternal__aapl__pxrReserved__::operator*((float *)&v74, **(_QWORD **)(a1 + 56) + 72 * v45).f32[0]);
          v38 = v38 + (float)(v46 * v47);
          v39 = v39 + (float)(v46 * v48);
          v21 = *(uint64_t **)(a1 + 24);
          v35 = *((double *)&v72 + 1);
          v36 = *(double *)&v72;
          v37 = *((double *)&v73 + 1);
          v34 = *(double *)&v73;
          v31 = **(_DWORD **)(a1 + 40);
        }
        v49 = (double *)(*v21 + 32 * v45);
        v50 = v49[1];
        v51 = v49[2];
        v52 = v49[3];
        if (v41 * *v49 + v28 * v50 + v30 * v51 + v40 * v52 >= 0.0)
          v53 = v46;
        else
          v53 = -v46;
        v54 = v53;
        v37 = v37 + v52 * v54;
        v36 = *v49 * v54 + v36;
        v35 = v50 * v54 + v35;
        *(double *)&v72 = v36;
        *((double *)&v72 + 1) = v35;
        v34 = v51 * v54 + v34;
        *(double *)&v73 = v34;
        *((double *)&v73 + 1) = v37;
      }
      if (++v32 >= v31)
      {
        v18 = *((float *)&v74 + 1);
        v16 = v74;
        v20 = v75;
        goto LABEL_20;
      }
    }
    v67 = COERCE_DOUBLE("usdSkel/utils.cpp");
    v68 = COERCE_DOUBLE("operator()");
    v69 = 2046;
    v70 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointInde"
          "xFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v71 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v67, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v25, v34, v35, v36, v37, (int)v44, v32 + v14 * v31, (v21[1] - *v21) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_20C676554(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FE60;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FE60;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C6761F4(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6761F4(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C6768F4(uint64_t a1, char *a2, char *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float32x2_t v18;
  uint64_t v19;
  float *v20;
  float32x2_t v21;
  float v22;
  unsigned int v23;
  _QWORD *v24;
  float v25;
  uint64_t v26;
  float32x2_t v27;
  float32x2_t v28;
  double v29;
  _QWORD v30[4];
  char v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 < a3)
  {
    v32 = v9;
    v33 = v10;
    v12 = 8 * (_QWORD)a2;
    LODWORD(a4) = 786163455;
    while (1)
    {
      v13 = **(_QWORD **)a1 + 12 * (_QWORD)a2;
      v14 = **(unsigned int **)(a1 + 24);
      if ((int)v14 >= 1)
        break;
      v21 = 0;
      LODWORD(a7) = 0;
LABEL_12:
      v28 = vmul_f32((float32x2_t)__PAIR64__(v21.u32[1], LODWORD(a7)), (float32x2_t)__PAIR64__(v21.u32[1], LODWORD(a7)));
      a9 = COERCE_DOUBLE(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v28, 1), vmul_f32(v21, v21)));
      v29 = 1.0 / fmaxf(sqrtf(vadd_f32(v28, *(float32x2_t *)&a9).f32[0]), 1.0e-10);
      a7 = v29 * *(float *)&a7;
      *(float *)&a7 = a7;
      *(float32x2_t *)v13 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v21), v29));
      *(_DWORD *)(v13 + 8) = LODWORD(a7);
      ++a2;
      v12 += 8;
      if (a2 == a3)
        return;
    }
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(float *)(v13 + 4);
    v17 = *(float *)(v13 + 8);
    v18 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v15, *(float *)v13), vmul_n_f32(*(float32x2_t *)(v15 + 12), v16)), vmul_n_f32(*(float32x2_t *)(v15 + 24), v17));
    *(float *)&a9 = (float)((float)(*(float *)v13 * *(float *)(v15 + 8)) + (float)(v16 * *(float *)(v15 + 20)))
                  + (float)(v17 * *(float *)(v15 + 32));
    v19 = (_QWORD)a2 * v14;
    v20 = (float *)(**(_QWORD **)(a1 + 32) + v12 * v14 + 4);
    v21 = 0;
    LODWORD(a7) = 0;
    while (1)
    {
      v22 = *(v20 - 1);
      v23 = (int)v22;
      if ((int)v22 < 0)
        break;
      v24 = *(_QWORD **)(a1 + 40);
      if (v24[1] <= (unint64_t)v23)
        break;
      v25 = *v20;
      if (*v20 != 0.0)
      {
        v26 = *v24 + 36 * v23;
        v27.i32[0] = *(_DWORD *)(v26 + 8);
        v27.i32[1] = *(_DWORD *)(v26 + 20);
        v21 = vadd_f32(v21, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v26, v18.f32[0]), vmul_lane_f32(*(float32x2_t *)(v26 + 12), v18, 1)), vmul_n_f32(*(float32x2_t *)(v26 + 24), *(float *)&a9)), v25));
        *(float *)&a7 = *(float *)&a7
                      + (float)(v25
                              * (float)(vaddv_f32(vmul_f32(v18, v27)) + (float)(*(float *)&a9 * *(float *)(v26 + 32))));
      }
      ++v19;
      v20 += 2;
      if (!--v14)
        goto LABEL_12;
    }
    v30[0] = "usdSkel/utils.cpp";
    v30[1] = "operator()";
    v30[2] = 1945;
    v30[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Identity"
             "PointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v30, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, a4, 1.0, *(double *)&v21, a7, *(double *)&v18, a9, (int)v22, v19, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_20C676B14(tbb::internal::allocate_continuation_proxy *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8;
  unsigned int v9;
  char *v10;
  __int128 *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  char v27;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned __int8 v32;
  _BYTE *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  unsigned __int8 v39[16];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v8 = *((_QWORD *)this - 4);
      if (*(int *)(v8 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v8 + 8) = 1;
        v9 = *((unsigned __int8 *)this + 52);
        if (v9 <= 1)
          LOBYTE(v9) = 1;
        *((_BYTE *)this + 52) = v9 + 1;
      }
    }
  }
  v11 = (__int128 *)((char *)this + 8);
  v10 = (char *)*((_QWORD *)this + 1);
  v12 = (char *)*((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3);
  v14 = v10 - v12;
  if (v13 < v10 - v12)
  {
    v15 = *((_QWORD *)this + 5);
    if (v15 > 1)
      goto LABEL_12;
    if (v15 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v16 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v16 - 11) = 1;
        *(_QWORD *)v16 = &unk_24C520F68;
        __dmb(0xBu);
        v16[8] = 0;
        *((_QWORD *)this - 4) = v16;
        *((_QWORD *)v16 - 3) = 2;
        v17 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v16, 0x38uLL);
        *(_BYTE *)(v17 - 11) = 1;
        *(_QWORD *)v17 = &off_24C53FEA8;
        *(_QWORD *)(v17 + 8) = *((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v18;
        *(_QWORD *)(v17 + 16) = v18;
        *(_OWORD *)(v17 + 24) = *(_OWORD *)((char *)this + 24);
        v19 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v19;
        *(_QWORD *)(v17 + 40) = v19;
        *(_DWORD *)(v17 + 48) = 2;
        *(_BYTE *)(v17 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v17 - 40))(*(_QWORD *)(v17 - 40), v17, v17 - 8);
        v12 = (char *)*((_QWORD *)this + 2);
        v13 = *((_QWORD *)this + 3);
        v10 = (char *)*((_QWORD *)this + 1);
        v14 = v10 - v12;
        if (v13 >= v10 - v12)
          break;
        v20 = *((_QWORD *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v13 < v14 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v39 = 0x10000;
    v40 = *v11;
    v41 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v21 = sub_20C15C670(v39, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v27 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v27 & 1) == 0)
        break;
      v30 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v30;
      v29 = v39[2];
      if (v39[2] < 2u)
      {
        v28 = v39[0];
        if (v39[v39[0] + 3] < v30
          && *((_QWORD *)&v40 + 3 * v39[0] + 2) < *((_QWORD *)&v40 + 3 * v39[0]) - *((_QWORD *)&v40 + 3 * v39[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v31 = v39[1];
      v32 = v39[v39[1] + 3];
      v33 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v33 - 11) = 1;
      *(_QWORD *)v33 = &unk_24C520F68;
      __dmb(0xBu);
      v33[8] = 0;
      *((_QWORD *)this - 4) = v33;
      *((_QWORD *)v33 - 3) = 2;
      v34 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v33, 0x38uLL);
      v35 = (char *)&v40 + 24 * v31;
      *(_BYTE *)(v34 - 11) = 1;
      *(_QWORD *)v34 = &off_24C53FEA8;
      v36 = *(_OWORD *)v35;
      *(_QWORD *)(v34 + 24) = *((_QWORD *)v35 + 2);
      *(_OWORD *)(v34 + 8) = v36;
      *(_QWORD *)(v34 + 32) = *((_QWORD *)this + 4);
      v37 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v37;
      *(_QWORD *)(v34 + 40) = v37;
      *(_DWORD *)(v34 + 48) = 2;
      *(_BYTE *)(v34 + 52) = *((_BYTE *)this + 52) - v32;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v34 - 40))(*(_QWORD *)(v34 - 40), v34, v34 - 8);
      v29 = --v39[2];
      v39[1] = (v39[1] + 1) & 7;
LABEL_27:
      if (!v29 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v28 = v39[0];
LABEL_22:
    sub_20C6768F4(*((_QWORD *)this + 4), *((char **)&v40 + 3 * v28 + 1), *((char **)&v40 + 3 * v28), v21, v22, v23, v24, v25, v26);
    v29 = --v39[2];
    v39[0] = (v39[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6768F4(*((_QWORD *)this + 4), v12, v10, a2, a3, a4, a5, a6, a7);
  return 0;
}

void sub_20C676EB4(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int *v29;
  unsigned int v30;
  char *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  double v35;
  float32x2_t v36;
  float32x2_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float64x2_t v42;
  float32x2_t v43;
  float64x2_t v44;
  float v45;
  unint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  unsigned int v54;
  float v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  double v68;
  int8x8_t v69;
  float64x2_t v70;
  uint64_t v71;
  const char *v72;
  char v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if (a2 < a3)
  {
    v76 = v13;
    v77 = v12;
    v78 = v11;
    v79 = v10;
    v80 = v9;
    v81 = v8;
    v82 = v7;
    v83 = v6;
    v84 = v4;
    v85 = v5;
    v15 = a2;
    for (i = 8 * a2; ; i += 8)
    {
      v18 = *(_QWORD *)(a1 + 8);
      v19 = **(_QWORD **)a1 + 12 * v15;
      v67 = *(float *)v19;
      v66 = *(float *)(v19 + 4);
      LODWORD(a4) = *(_DWORD *)(v19 + 8);
      v68 = a4;
      v20 = *(float32x2_t *)v18;
      v21 = *(float32x2_t *)(v18 + 12);
      v22 = *(float32x2_t *)(v18 + 24);
      v23 = *(float *)(v18 + 8);
      v24 = *(float *)(v18 + 20);
      v25 = *(float *)(v18 + 32);
      v27 = *(uint64_t **)(a1 + 24);
      v26 = *(_QWORD **)(a1 + 32);
      v28 = *v27;
      v29 = *(int **)(a1 + 40);
      v30 = sub_20C672F2C(v15, (v27[1] - *v27) >> 5, v26, *v29);
      v32 = 0uLL;
      v33 = 0uLL;
      if ((v30 & 0x80000000) == 0)
      {
        v34 = (float64x2_t *)(v28 + 32 * v30);
        v33 = *v34;
        v32 = v34[1];
      }
      v37 = vadd_f32(vmul_n_f32(v20, v67), vmul_n_f32(v21, v66));
      HIDWORD(v35) = HIDWORD(v68);
      v36 = vadd_f32(v37, vmul_n_f32(v22, *(float *)&v68));
      v37.f32[0] = (float)((float)(v67 * v23) + (float)(v66 * v24)) + (float)(*(float *)&v68 * v25);
      HIDWORD(v38) = 0;
      v74 = 0u;
      v75 = 0u;
      v39 = *v29;
      if ((int)v39 >= 1)
        break;
      v43 = 0;
      LODWORD(v38) = 0;
LABEL_18:
      v54 = **(_BYTE **)(a1 + 48) == 0;
      if (**(_BYTE **)(a1 + 48))
        v55 = *(float *)&v38;
      else
        v55 = v37.f32[0];
      v69 = (int8x8_t)v36;
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v74.f64, 1.0e-10);
      v70 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v54), 0x1FuLL)), v69, (int8x8_t)v43));
      *(double *)&v71 = v55;
      v56 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(v74.f64, v70.f64);
      v59 = sqrt(v58 * v58 + v56 * v56 + v57 * v57);
      v60 = 1.0 / v59;
      v61 = v59 <= 1.0e-10;
      v62 = 1.0e10;
      if (!v61)
        v62 = v60;
      a4 = v56 * v62;
      *(float *)&a4 = a4;
      v63 = v57 * v62;
      v64 = v58 * v62;
      v65 = **(_QWORD **)a1 + 12 * v15;
      *(_DWORD *)v65 = LODWORD(a4);
      *(float *)(v65 + 4) = v63;
      *(float *)(v65 + 8) = v64;
      if (++v15 == a3)
        return;
    }
    LODWORD(v35) = v36.i32[1];
    v40 = v15 * v39;
    v41 = (float *)(*v26 + i * v39 + 4);
    v42 = 0uLL;
    v43 = 0;
    LODWORD(v38) = 0;
    v44 = 0uLL;
    while (1)
    {
      v45 = *(v41 - 1);
      v46 = (int)v45;
      if ((v46 & 0x80000000) != 0 || v46 >= (v27[1] - *v27) >> 5)
        break;
      v47 = *v41;
      if (*v41 != 0.0)
      {
        if (**(_BYTE **)(a1 + 48))
        {
          v48 = **(_QWORD **)(a1 + 56) + 36 * v46;
          v43 = vadd_f32(v43, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v48, v36.f32[0]), vmul_lane_f32(*(float32x2_t *)(v48 + 12), v36, 1)), vmul_n_f32(*(float32x2_t *)(v48 + 24), v37.f32[0])), v47));
          *(float *)&v38 = *(float *)&v38
                         + (float)(v47
                                 * (float)((float)((float)(v36.f32[0] * *(float *)(v48 + 8))
                                                 + (float)(v36.f32[1] * *(float *)(v48 + 20)))
                                         + (float)(v37.f32[0] * *(float *)(v48 + 32))));
        }
        v49 = *v27 + 32 * v46;
        v50 = *(float64x2_t *)(v49 + 16);
        v51 = vmulq_f64(v33, *(float64x2_t *)v49);
        v52 = vmulq_f64(v32, v50);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v51, (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1)), v52), (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1)).f64[0] < 0.0)v47 = -v47;
        v53 = v47;
        v42 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)v49, v53), v42);
        v44 = vaddq_f64(vmulq_n_f64(v50, v53), v44);
        v74 = v42;
        v75 = v44;
      }
      ++v40;
      v41 += 2;
      if (!--v39)
        goto LABEL_18;
    }
    *(_QWORD *)&v70.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v70.f64[1] = "operator()";
    v71 = 2046;
    v72 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointInde"
          "xFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v73 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v70, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v31, v32.f64[0], v33.f64[0], *(double *)&v37, v38, v35, v42.f64[0], v44.f64[0], (int)v45, v40, (v27[1] - *v27) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_20C677234(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;
  _BYTE *v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v29[16];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v3 = *((_QWORD *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v3 + 8) = 1;
        v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1)
          LOBYTE(v4) = 1;
        *((_BYTE *)this + 52) = v4 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = v5 - v7;
  if (v8 < v5 - v7)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10 > 1)
      goto LABEL_12;
    if (v10 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v11 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(_QWORD *)v11 = &unk_24C520F68;
        __dmb(0xBu);
        v11[8] = 0;
        *((_QWORD *)this - 4) = v11;
        *((_QWORD *)v11 - 3) = 2;
        v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &off_24C53FEF0;
        *(_QWORD *)(v12 + 8) = *((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v13;
        *(_QWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        v14 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v14;
        *(_QWORD *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(_BYTE *)(v12 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v12 - 40))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
        v7 = *((_QWORD *)this + 2);
        v8 = *((_QWORD *)this + 3);
        v5 = *((_QWORD *)this + 1);
        v9 = v5 - v7;
        if (v8 >= v5 - v7)
          break;
        v15 = *((_QWORD *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < v9 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v29 = 0x10000;
    v30 = *v6;
    v31 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v16 = sub_20C15C670(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v17 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0)
        break;
      v20 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v20;
      v19 = v29[2];
      if (v29[2] < 2u)
      {
        v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((_QWORD *)&v30 + 3 * v29[0] + 2) < *((_QWORD *)&v30 + 3 * v29[0]) - *((_QWORD *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v21 = v29[1];
      v22 = v29[v29[1] + 3];
      v23 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(_QWORD *)v23 = &unk_24C520F68;
      __dmb(0xBu);
      v23[8] = 0;
      *((_QWORD *)this - 4) = v23;
      *((_QWORD *)v23 - 3) = 2;
      v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      v25 = (char *)&v30 + 24 * v21;
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53FEF0;
      v26 = *(_OWORD *)v25;
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 32) = *((_QWORD *)this + 4);
      v27 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v27;
      *(_QWORD *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(_BYTE *)(v24 + 52) = *((_BYTE *)this + 52) - v22;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v24 - 40))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v18 = v29[0];
LABEL_22:
    sub_20C676EB4(*((_QWORD *)this + 4), *((_QWORD *)&v30 + 3 * v18 + 1), *((_QWORD *)&v30 + 3 * v18), v16);
    v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C676EB4(*((_QWORD *)this + 4), v7, v5, a2);
  return 0;
}

void sub_20C6775D4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  float v29;
  float v30;
  float v31;
  double v32;
  float v33;
  float v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (a2 < a3)
  {
    v40 = v10;
    v41 = v9;
    v42 = v8;
    v43 = v7;
    v44 = v6;
    v45 = v5;
    v46 = v3;
    v47 = v4;
    v12 = a2;
    while (1)
    {
      v39 = 0;
      v38 = 0;
      LODWORD(v38) = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(_QWORD **)a1 + 12 * v12), *(_QWORD *)(a1 + 8)).u32[0];
      HIDWORD(v38) = v14;
      v39 = v15;
      v17 = sub_20C6777E8(*(_QWORD *)(a1 + 16), v12, v16);
      v19 = **(_DWORD **)(a1 + 24);
      if (v19 >= 1)
        break;
      v24 = 0.0;
      v23 = 0.0;
      v22 = 0.0;
LABEL_12:
      v32 = 1.0 / fmaxf(sqrtf((float)(v24 * v24) + (float)((float)(v23 * v23) + (float)(v22 * v22))), 1.0e-10);
      v33 = v32 * v22;
      v34 = v32 * v23;
      *(float *)&v32 = v32 * v24;
      v35 = **(_QWORD **)a1 + 12 * v12;
      *(float *)v35 = v33;
      *(float *)(v35 + 4) = v34;
      *(_DWORD *)(v35 + 8) = LODWORD(v32);
      if (++v12 == a3)
        return;
    }
    v20 = v17;
    v21 = 0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    while (1)
    {
      v25 = v21 + v20 * v19;
      v26 = *(_QWORD **)(a1 + 32);
      v27 = *(unsigned int *)(*v26 + 4 * v25);
      if ((v27 & 0x80000000) != 0)
        break;
      v28 = *(_QWORD **)(a1 + 40);
      if (v28[1] <= v27)
        break;
      v29 = *(float *)(v26[2] + 4 * v25);
      if (v29 != 0.0)
      {
        v22 = v22
            + (float)(v29
                    * pxrInternal__aapl__pxrReserved__::operator*((float *)&v38, *v28 + 72 * v27).f32[0]);
        v23 = v23 + (float)(v29 * v30);
        v24 = v24 + (float)(v29 * v31);
        v19 = **(_DWORD **)(a1 + 24);
      }
      if (++v21 >= v19)
        goto LABEL_12;
    }
    v36[0] = "usdSkel/utils.cpp";
    v36[1] = "operator()";
    v36[2] = 1945;
    v36[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceV"
             "aryingPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v36, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v18, v27, v21 + v20 * v19, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_20C6777E8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;

  result = *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
  if ((result & 0x80000000) != 0 || (int)result >= *(_DWORD *)(a1 + 16))
  {
    v5[0] = "usdSkel/utils.cpp";
    v5[1] = "GetPointIndex";
    v5[2] = 1262;
    v5[3] = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceVaryingPointIndexFn::GetPointIndex(size_t) const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v5, (pxrInternal__aapl__pxrReserved__ *)"faceVertexIndices is out of range [%d] at index [%zu]", a3, result, a2);
    return 0;
  }
  return result;
}

uint64_t sub_20C677864(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FF38;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FF38;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C6775D4(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6775D4(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C677C04(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int32 v16;
  float v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int *v22;
  unsigned int v23;
  char *v24;
  __int128 v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  uint64_t v32;
  float32x2_t v33;
  float v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  float32x2_t v42;
  __int32 v43;
  float v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  float v49;
  double v50;
  float v51;
  float32x2_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  BOOL v58;
  double v59;
  float v60;
  float v61;
  float v62;
  float *v63;
  __int128 v64;
  float64x2_t v65;
  uint64_t v66;
  const char *v67;
  char v68;
  __int128 v69;
  __int128 v70;
  int8x8_t v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  if (a2 < a3)
  {
    v73 = v12;
    v74 = v11;
    v75 = v10;
    v76 = v9;
    v77 = v8;
    v78 = v7;
    v79 = v6;
    v80 = v5;
    v81 = v3;
    v82 = v4;
    v14 = a2;
    while (1)
    {
      v72 = 0.0;
      v71 = 0;
      v71.i32[0] = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(_QWORD **)a1 + 12 * v14), *(_QWORD *)(a1 + 8)).u32[0];
      v71.i32[1] = v16;
      v72 = v17;
      v19 = sub_20C6777E8(*(_QWORD *)(a1 + 16), v14, v18);
      v20 = *(uint64_t **)(a1 + 24);
      v21 = *v20;
      v22 = *(int **)(a1 + 40);
      v23 = sub_20C671434(v19, (v20[1] - *v20) >> 5, *(_QWORD **)(a1 + 32), *v22);
      if ((v23 & 0x80000000) != 0)
      {
        v29 = 0.0;
        v30 = 0.0;
        v27 = 0.0;
        v28 = 0.0;
      }
      else
      {
        v26 = (double *)(v21 + 32 * v23);
        v28 = *v26;
        v27 = v26[1];
        v30 = v26[2];
        v29 = v26[3];
      }
      v69 = 0u;
      v70 = 0u;
      v31 = *v22;
      if (*v22 >= 1)
        break;
      v33 = 0;
      v34 = 0.0;
LABEL_20:
      if (**(_BYTE **)(a1 + 48))
        v51 = v34;
      else
        v51 = v72;
      v52 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(**(_BYTE **)(a1 + 48) == 0), 0x1FuLL)), v71, (int8x8_t)v33);
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize((double *)&v69, 1.0e-10);
      v65 = vcvtq_f64_f32(v52);
      *(double *)&v66 = v51;
      v53 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform((double *)&v69, v65.f64);
      v56 = sqrt(v55 * v55 + v53 * v53 + v54 * v54);
      v57 = 1.0 / v56;
      v58 = v56 <= 1.0e-10;
      v59 = 1.0e10;
      if (!v58)
        v59 = v57;
      v60 = v53 * v59;
      v61 = v54 * v59;
      v62 = v55 * v59;
      v63 = (float *)(**(_QWORD **)a1 + 12 * v14);
      *v63 = v60;
      v63[1] = v61;
      v63[2] = v62;
      if (++v14 == a3)
        return;
    }
    v32 = 0;
    v33 = 0;
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    while (1)
    {
      v39 = v32 + v19 * v31;
      v40 = *(_QWORD **)(a1 + 32);
      v41 = *(unsigned int *)(*v40 + 4 * v39);
      if ((v41 & 0x80000000) != 0 || v41 >= (v20[1] - *v20) >> 5)
        break;
      LODWORD(v25) = *(_DWORD *)(v40[2] + 4 * v39);
      if (*(float *)&v25 != 0.0)
      {
        if (**(_BYTE **)(a1 + 48))
        {
          v64 = v25;
          v42.i32[0] = pxrInternal__aapl__pxrReserved__::operator*((float *)&v71, **(_QWORD **)(a1 + 56) + 72 * v41).u32[0];
          v25 = v64;
          v42.i32[1] = v43;
          v33 = vadd_f32(v33, vmul_n_f32(v42, *(float *)&v64));
          v34 = v34 + (float)(*(float *)&v64 * v44);
          v20 = *(uint64_t **)(a1 + 24);
          v36 = *((double *)&v69 + 1);
          v37 = *(double *)&v69;
          v38 = *((double *)&v70 + 1);
          v35 = *(double *)&v70;
          v31 = **(_DWORD **)(a1 + 40);
        }
        v45 = (double *)(*v20 + 32 * v41);
        v46 = v45[1];
        v47 = v45[2];
        v48 = v45[3];
        if (v28 * *v45 + v27 * v46 + v30 * v47 + v29 * v48 >= 0.0)
          v49 = *(float *)&v25;
        else
          v49 = -*(float *)&v25;
        v50 = v49;
        v38 = v38 + v48 * v50;
        v37 = *v45 * v50 + v37;
        v36 = v46 * v50 + v36;
        *(double *)&v69 = v37;
        *((double *)&v69 + 1) = v36;
        v35 = v47 * v50 + v35;
        *(double *)&v70 = v35;
        *((double *)&v70 + 1) = v38;
      }
      if (++v32 >= v31)
        goto LABEL_20;
    }
    *(_QWORD *)&v65.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v65.f64[1] = "operator()";
    v66 = 2046;
    v67 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceVaryingPoi"
          "ntIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v65, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v24, v35, v36, v37, v38, v41, v32 + v19 * v31, (v20[1] - *v20) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_20C677F5C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53FF80;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53FF80;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C677C04(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C677C04(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C6782FC(uint64_t a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  double v28;
  uint64_t v29;
  _QWORD *v30;
  float32x2_t v31;
  float32x2_t v32;
  unint64_t v33;
  _QWORD *v34;
  float v35;
  uint64_t v36;
  float32x2_t v37;
  float32x2_t v38;
  double v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  double v44;
  _QWORD v45[4];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (a2 < (unint64_t)a3)
  {
    v47 = v13;
    v48 = v12;
    v49 = v11;
    v50 = v10;
    v51 = v9;
    v52 = v8;
    v53 = v7;
    v54 = v6;
    v55 = v4;
    v56 = v5;
    v15 = a2;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = **(_QWORD **)a1 + 12 * v15;
      v43 = *(float *)v18;
      v42 = *(float *)(v18 + 4);
      LODWORD(a4) = *(_DWORD *)(v18 + 8);
      v44 = a4;
      v19 = *(float32x2_t *)v17;
      v20 = *(float32x2_t *)(v17 + 12);
      v21 = *(float32x2_t *)(v17 + 24);
      v22 = *(float *)(v17 + 8);
      v23 = *(float *)(v17 + 20);
      v24 = *(float *)(v17 + 32);
      v25 = sub_20C6777E8(*(_QWORD *)(a1 + 16), v15, a3);
      v26 = **(unsigned int **)(a1 + 24);
      if ((int)v26 >= 1)
        break;
      v31 = 0;
      v32.i32[0] = 0;
LABEL_12:
      v38 = vmul_f32((float32x2_t)__PAIR64__(v31.u32[1], v32.u32[0]), (float32x2_t)__PAIR64__(v31.u32[1], v32.u32[0]));
      v39 = 1.0
          / fmaxf(sqrtf(vadd_f32(v38, vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v38, 1), vmul_f32(v31, v31))).f32[0]), 1.0e-10);
      v40 = v39 * v32.f32[0];
      v41 = **(_QWORD **)a1 + 12 * v15;
      a4 = COERCE_DOUBLE(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v31), v39)));
      *(double *)v41 = a4;
      *(float *)(v41 + 8) = v40;
      if ((char *)++v15 == a3)
        return;
    }
    HIDWORD(v28) = HIDWORD(v44);
    v32 = vmul_n_f32(v21, *(float *)&v44);
    v27 = vadd_f32(vadd_f32(vmul_n_f32(v19, v43), vmul_n_f32(v20, v42)), v32);
    *(float *)&v28 = (float)((float)(v43 * v22) + (float)(v42 * v23)) + (float)(*(float *)&v44 * v24);
    v29 = v25 * v26;
    v30 = *(_QWORD **)(a1 + 32);
    v31 = 0;
    v32.i32[0] = 0;
    while (1)
    {
      v33 = *(unsigned int *)(*v30 + 4 * v29);
      if ((v33 & 0x80000000) != 0)
        break;
      v34 = *(_QWORD **)(a1 + 40);
      if (v34[1] <= v33)
        break;
      v35 = *(float *)(v30[2] + 4 * v29);
      if (v35 != 0.0)
      {
        v36 = *v34 + 36 * v33;
        v37.i32[0] = *(_DWORD *)(v36 + 8);
        v37.i32[1] = *(_DWORD *)(v36 + 20);
        v31 = vadd_f32(v31, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v36, v27.f32[0]), vmul_lane_f32(*(float32x2_t *)(v36 + 12), v27, 1)), vmul_n_f32(*(float32x2_t *)(v36 + 24), *(float *)&v28)), v35));
        v32.f32[0] = v32.f32[0]
                   + (float)(v35
                           * (float)(vaddv_f32(vmul_f32(v27, v37)) + (float)(*(float *)&v28 * *(float *)(v36 + 32))));
      }
      ++v29;
      if (!--v26)
        goto LABEL_12;
    }
    v45[0] = "usdSkel/utils.cpp";
    v45[1] = "operator()";
    v45[2] = 1945;
    v45[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceV"
             "aryingPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v46 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v45, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, *(double *)&v31, *(double *)&v32, *(double *)&v27, v28, v33, v29, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_20C67856C(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;
  _BYTE *v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v29[16];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v3 = *((_QWORD *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v3 + 8) = 1;
        v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1)
          LOBYTE(v4) = 1;
        *((_BYTE *)this + 52) = v4 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v5 = (char *)*((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = &v5[-v7];
  if (v8 < (unint64_t)&v5[-v7])
  {
    v10 = *((_QWORD *)this + 5);
    if (v10 > 1)
      goto LABEL_12;
    if (v10 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v11 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(_QWORD *)v11 = &unk_24C520F68;
        __dmb(0xBu);
        v11[8] = 0;
        *((_QWORD *)this - 4) = v11;
        *((_QWORD *)v11 - 3) = 2;
        v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &off_24C53FFC8;
        *(_QWORD *)(v12 + 8) = *((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v13;
        *(_QWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        v14 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v14;
        *(_QWORD *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(_BYTE *)(v12 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v12 - 40))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
        v7 = *((_QWORD *)this + 2);
        v8 = *((_QWORD *)this + 3);
        v5 = (char *)*((_QWORD *)this + 1);
        v9 = &v5[-v7];
        if (v8 >= (unint64_t)&v5[-v7])
          break;
        v15 = *((_QWORD *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < (unint64_t)v9 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v29 = 0x10000;
    v30 = *v6;
    v31 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v16 = sub_20C15C670(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v17 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0)
        break;
      v20 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v20;
      v19 = v29[2];
      if (v29[2] < 2u)
      {
        v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((_QWORD *)&v30 + 3 * v29[0] + 2) < *((_QWORD *)&v30 + 3 * v29[0]) - *((_QWORD *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v21 = v29[1];
      v22 = v29[v29[1] + 3];
      v23 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(_QWORD *)v23 = &unk_24C520F68;
      __dmb(0xBu);
      v23[8] = 0;
      *((_QWORD *)this - 4) = v23;
      *((_QWORD *)v23 - 3) = 2;
      v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      v25 = (char *)&v30 + 24 * v21;
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53FFC8;
      v26 = *(_OWORD *)v25;
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 32) = *((_QWORD *)this + 4);
      v27 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v27;
      *(_QWORD *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(_BYTE *)(v24 + 52) = *((_BYTE *)this + 52) - v22;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v24 - 40))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v18 = v29[0];
LABEL_22:
    sub_20C6782FC(*((_QWORD *)this + 4), *((_QWORD *)&v30 + 3 * v18 + 1), *((char **)&v30 + 3 * v18), v16);
    v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6782FC(*((_QWORD *)this + 4), v7, v5, a2);
  return 0;
}

void sub_20C67890C(uint64_t a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int *v29;
  unsigned int v30;
  char *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  double v35;
  float32x2_t v36;
  float32x2_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t v42;
  float32x2_t v43;
  float64x2_t v44;
  unint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  unsigned int v53;
  float v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  double v67;
  int8x8_t v68;
  float64x2_t v69;
  uint64_t v70;
  const char *v71;
  char v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  if (a2 < (unint64_t)a3)
  {
    v75 = v13;
    v76 = v12;
    v77 = v11;
    v78 = v10;
    v79 = v9;
    v80 = v8;
    v81 = v7;
    v82 = v6;
    v83 = v4;
    v84 = v5;
    v15 = a2;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = **(_QWORD **)a1 + 12 * v15;
      v66 = *(float *)v18;
      v65 = *(float *)(v18 + 4);
      LODWORD(a4) = *(_DWORD *)(v18 + 8);
      v67 = a4;
      v19 = *(float32x2_t *)v17;
      v20 = *(float32x2_t *)(v17 + 12);
      v21 = *(float32x2_t *)(v17 + 24);
      v22 = *(float *)(v17 + 8);
      v23 = *(float *)(v17 + 20);
      v24 = *(float *)(v17 + 32);
      v25 = sub_20C6777E8(*(_QWORD *)(a1 + 16), v15, a3);
      v27 = *(uint64_t **)(a1 + 24);
      v26 = *(uint64_t **)(a1 + 32);
      v28 = *v27;
      v29 = *(int **)(a1 + 40);
      v30 = sub_20C671434(v25, (v27[1] - *v27) >> 5, v26, *v29);
      v32 = 0uLL;
      v33 = 0uLL;
      if ((v30 & 0x80000000) == 0)
      {
        v34 = (float64x2_t *)(v28 + 32 * v30);
        v33 = *v34;
        v32 = v34[1];
      }
      v37 = vadd_f32(vmul_n_f32(v19, v66), vmul_n_f32(v20, v65));
      HIDWORD(v35) = HIDWORD(v67);
      v36 = vadd_f32(v37, vmul_n_f32(v21, *(float *)&v67));
      v37.f32[0] = (float)((float)(v66 * v22) + (float)(v65 * v23)) + (float)(*(float *)&v67 * v24);
      HIDWORD(v38) = 0;
      v73 = 0u;
      v74 = 0u;
      v39 = *v29;
      if ((int)v39 >= 1)
        break;
      v43 = 0;
      LODWORD(v38) = 0;
LABEL_18:
      v53 = **(_BYTE **)(a1 + 48) == 0;
      if (**(_BYTE **)(a1 + 48))
        v54 = *(float *)&v38;
      else
        v54 = v37.f32[0];
      v68 = (int8x8_t)v36;
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v73.f64, 1.0e-10);
      v69 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v53), 0x1FuLL)), v68, (int8x8_t)v43));
      *(double *)&v70 = v54;
      v55 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(v73.f64, v69.f64);
      v58 = sqrt(v57 * v57 + v55 * v55 + v56 * v56);
      v59 = 1.0 / v58;
      v60 = v58 <= 1.0e-10;
      v61 = 1.0e10;
      if (!v60)
        v61 = v59;
      a4 = v55 * v61;
      *(float *)&a4 = a4;
      v62 = v56 * v61;
      v63 = v57 * v61;
      v64 = **(_QWORD **)a1 + 12 * v15;
      *(_DWORD *)v64 = LODWORD(a4);
      *(float *)(v64 + 4) = v62;
      *(float *)(v64 + 8) = v63;
      if ((char *)++v15 == a3)
        return;
    }
    v40 = v25 * v39;
    v41 = *v26;
    LODWORD(v35) = v36.i32[1];
    v42 = 0uLL;
    v43 = 0;
    LODWORD(v38) = 0;
    v44 = 0uLL;
    while (1)
    {
      v45 = *(unsigned int *)(v41 + 4 * v40);
      if ((v45 & 0x80000000) != 0 || v45 >= (v27[1] - *v27) >> 5)
        break;
      v46 = *(float *)(v26[2] + 4 * v40);
      if (v46 != 0.0)
      {
        if (**(_BYTE **)(a1 + 48))
        {
          v47 = **(_QWORD **)(a1 + 56) + 36 * v45;
          v43 = vadd_f32(v43, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v47, v36.f32[0]), vmul_lane_f32(*(float32x2_t *)(v47 + 12), v36, 1)), vmul_n_f32(*(float32x2_t *)(v47 + 24), v37.f32[0])), v46));
          *(float *)&v38 = *(float *)&v38
                         + (float)(v46
                                 * (float)((float)((float)(v36.f32[0] * *(float *)(v47 + 8))
                                                 + (float)(v36.f32[1] * *(float *)(v47 + 20)))
                                         + (float)(v37.f32[0] * *(float *)(v47 + 32))));
        }
        v48 = *v27 + 32 * v45;
        v49 = *(float64x2_t *)(v48 + 16);
        v50 = vmulq_f64(v33, *(float64x2_t *)v48);
        v51 = vmulq_f64(v32, v49);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v50, (float64x2_t)vdupq_laneq_s64((int64x2_t)v50, 1)), v51), (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1)).f64[0] < 0.0)v46 = -v46;
        v52 = v46;
        v42 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)v48, v52), v42);
        v44 = vaddq_f64(vmulq_n_f64(v49, v52), v44);
        v73 = v42;
        v74 = v44;
      }
      ++v40;
      if (!--v39)
        goto LABEL_18;
    }
    *(_QWORD *)&v69.f64[0] = "usdSkel/utils.cpp";
    *(_QWORD *)&v69.f64[1] = "operator()";
    v70 = 2046;
    v71 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceVaryingPoi"
          "ntIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v72 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v31, v32.f64[0], v33.f64[0], *(double *)&v37, v38, v35, v42.f64[0], v44.f64[0], v45, v40, (v27[1] - *v27) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_20C678C84(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;
  _BYTE *v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v29[16];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v3 = *((_QWORD *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v3 + 8) = 1;
        v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1)
          LOBYTE(v4) = 1;
        *((_BYTE *)this + 52) = v4 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v5 = (char *)*((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = &v5[-v7];
  if (v8 < (unint64_t)&v5[-v7])
  {
    v10 = *((_QWORD *)this + 5);
    if (v10 > 1)
      goto LABEL_12;
    if (v10 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v11 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(_QWORD *)v11 = &unk_24C520F68;
        __dmb(0xBu);
        v11[8] = 0;
        *((_QWORD *)this - 4) = v11;
        *((_QWORD *)v11 - 3) = 2;
        v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &off_24C540010;
        *(_QWORD *)(v12 + 8) = *((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v13;
        *(_QWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        v14 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v14;
        *(_QWORD *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(_BYTE *)(v12 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v12 - 40))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
        v7 = *((_QWORD *)this + 2);
        v8 = *((_QWORD *)this + 3);
        v5 = (char *)*((_QWORD *)this + 1);
        v9 = &v5[-v7];
        if (v8 >= (unint64_t)&v5[-v7])
          break;
        v15 = *((_QWORD *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < (unint64_t)v9 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v29 = 0x10000;
    v30 = *v6;
    v31 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v16 = sub_20C15C670(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v17 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0)
        break;
      v20 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v20;
      v19 = v29[2];
      if (v29[2] < 2u)
      {
        v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((_QWORD *)&v30 + 3 * v29[0] + 2) < *((_QWORD *)&v30 + 3 * v29[0]) - *((_QWORD *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v21 = v29[1];
      v22 = v29[v29[1] + 3];
      v23 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(_QWORD *)v23 = &unk_24C520F68;
      __dmb(0xBu);
      v23[8] = 0;
      *((_QWORD *)this - 4) = v23;
      *((_QWORD *)v23 - 3) = 2;
      v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      v25 = (char *)&v30 + 24 * v21;
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C540010;
      v26 = *(_OWORD *)v25;
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 32) = *((_QWORD *)this + 4);
      v27 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v27;
      *(_QWORD *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(_BYTE *)(v24 + 52) = *((_BYTE *)this + 52) - v22;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v24 - 40))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v18 = v29[0];
LABEL_22:
    sub_20C67890C(*((_QWORD *)this + 4), *((_QWORD *)&v30 + 3 * v18 + 1), *((char **)&v30 + 3 * v18), v16);
    v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C67890C(*((_QWORD *)this + 4), v7, v5, a2);
  return 0;
}

_QWORD *sub_20C679024(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C211DE0(a1, a2);
    v6 = a1[1];
    v7 = v6 + 12 * a2;
    v8 = 12 * a2;
    do
    {
      v9 = *a3;
      *(_DWORD *)(v6 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v6 = v9;
      v6 += 12;
      v8 -= 12;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C679094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C6790B0()
{
  void *__p[2];
  char v1;

  sub_20C6799CC();
  sub_20BDDC0E4(__p, "Backdrop");
  sub_20C679AEC((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C6790FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::~UsdUIBackdrop(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C540058;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdUI/backdrop.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdUIBackdrop pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C540058;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6792A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498BC98);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498BC98))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498BC90, "Backdrop");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498BC90, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BC98);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498BC90, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C540058;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdUI/backdrop.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdUIBackdrop pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C540058;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C679490(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BC98);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BCA8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BCA8))
  {
    __cxa_guard_release(&qword_25498BCA8);
  }
  return &qword_25498BCA0;
}

void sub_20C679534(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BCA8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BCB8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *)__cxa_guard_acquire(&qword_25498BCB8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetStaticTfType(v3);
      byte_25498BCB0 = sub_20C35BD7C((char *)&qword_25498BCA0, v4, v5);
      __cxa_guard_release(&qword_25498BCB8);
    }
  }
  return byte_25498BCB0;
}

void sub_20C6795B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BCB8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetStaticTfType(this);
  return &qword_25498BCA0;
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::GetDescriptionAttr(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 24), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C679688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::CreateDescriptionAttr(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BCD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BCD8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v5)
      v5 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v6 = *((_QWORD *)v5 + 3);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498BCC0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BCC0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BCD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BCF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BCF8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C679918((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BCE0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BCF8);
  }
  if (v1)
    return &qword_25498BCE0;
  else
    return &qword_25498BCC0;
}

void sub_20C6798C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BCD8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C679918(uint64_t **a1)
{
  qword_25498BCE8 = 0;
  unk_25498BCF0 = 0;
  qword_25498BCE0 = 0;
  sub_20BFC9A6C((char **)&qword_25498BCE0, ((unk_25498BCC8 - qword_25498BCC0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BCE0, (_QWORD *)qword_25498BCE8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BCE0, (_QWORD *)qword_25498BCE8, (uint64_t *)qword_25498BCC0, unk_25498BCC8, (unk_25498BCC8 - qword_25498BCC0) >> 3);
}

void sub_20C6799AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6799CC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C679AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C679AEC(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C679B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdUITokensType *sub_20C679BA0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *result;
  void *v4;

  result = sub_20C679BE8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C679C28((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUITokensType *sub_20C679BE8()
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)operator new(0x90uLL);
  pxrInternal__aapl__pxrReserved__::UsdUITokensType::UsdUITokensType(v0);
  return v0;
}

void sub_20C679C14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C679C28(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  void **v47;

  v47 = (void **)(a1 + 120);
  sub_20BEEB2B8(&v47);
  v2 = *(_QWORD *)(a1 + 112);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 104);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 96);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 88);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 80);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 72);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 64);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 56);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 48);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 40);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 32);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 24);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 16);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 8);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v44 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::~UsdUINodeGraphNodeAPI(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5400B0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdUI/nodeGraphNodeAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdUINodeGraphNodeAPI pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5400B0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C679FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  return 5;
}

uint64_t sub_20C679FFC(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BD00, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdUINodeGraphNodeAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C67A1B4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5400B0;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5400B0;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C67A1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C67A1B4(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BD00, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdUINodeGraphNodeAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BD08);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BD08))
  {
    __cxa_guard_release(&qword_25498BD08);
  }
  return &qword_25498BD00;
}

void sub_20C67A2D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BD08);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BD18);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)__cxa_guard_acquire(&qword_25498BD18);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(v3);
      byte_25498BD10 = sub_20C35BD7C((char *)&qword_25498BD00, v4, v5);
      __cxa_guard_release(&qword_25498BD18);
    }
  }
  return byte_25498BD10;
}

void sub_20C67A34C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BD18);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(this);
  return &qword_25498BD00;
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetPosAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 152), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetStackingOrderAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 88), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67A57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateStackingOrderAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67A6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetIconAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67A82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateIconAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetExpansionStateAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67A984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateExpansionStateAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetSizeAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67AADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateSizeAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 152), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *SchemaAttributeNames;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (int)this;
  v41 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BD38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BD38))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v5)
      v5 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v6 = *((_QWORD *)v5 + 9);
    v35 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v9)
      v9 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v10 = *((_QWORD *)v9 + 11);
    v36 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v13)
      v13 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v14 = *((_QWORD *)v13 + 6);
    v37 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v37 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v17)
      v17 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v18 = *((_QWORD *)v17 + 8);
    v38 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v21)
      v21 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v22 = *((_QWORD *)v21 + 7);
    v39 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v25)
      v25 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v26 = *((_QWORD *)v25 + 10);
    v40 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498BD20, &v35, 6uLL);
    v29 = &v41;
    do
    {
      v31 = *--v29;
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    while (v29 != &v35);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BD20, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BD38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BD58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BD58))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C67AF70((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BD40, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BD58);
  }
  if (v1)
    return &qword_25498BD40;
  else
    return &qword_25498BD20;
}

void sub_20C67AEE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BD38);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C67AF70(uint64_t **a1)
{
  qword_25498BD48 = 0;
  unk_25498BD50 = 0;
  qword_25498BD40 = 0;
  sub_20BFC9A6C((char **)&qword_25498BD40, ((unk_25498BD28 - qword_25498BD20) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BD40, (_QWORD *)qword_25498BD48, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BD40, (_QWORD *)qword_25498BD48, (uint64_t *)qword_25498BD20, unk_25498BD28, (unk_25498BD28 - qword_25498BD20) >> 3);
}

void sub_20C67B004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C67B024()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C67B0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::~UsdUISceneGraphPrimAPI(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C540108;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdUI/sceneGraphPrimAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdUISceneGraphPrimAPI pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C540108;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C67B2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  return 5;
}

uint64_t sub_20C67B304(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BD60, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdUISceneGraphPrimAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C67B4BC(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C540108;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C540108;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C67B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C67B4BC(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BD60, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdUISceneGraphPrimAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BD68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BD68))
  {
    __cxa_guard_release(&qword_25498BD68);
  }
  return &qword_25498BD60;
}

void sub_20C67B5D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BD68);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BD78);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *)__cxa_guard_acquire(&qword_25498BD78);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(v3);
      byte_25498BD70 = sub_20C35BD7C((char *)&qword_25498BD60, v4, v5);
      __cxa_guard_release(&qword_25498BD78);
    }
  }
  return byte_25498BD70;
}

void sub_20C67B654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BD78);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(this);
  return &qword_25498BD60;
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::GetDisplayNameAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 40), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67B72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::CreateDisplayNameAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::GetDisplayGroupAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3)
    v3 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 32), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C67B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::CreateDisplayGroupAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8)
    v8 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdUITokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BD98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BD98))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v5)
      v5 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v6 = *((_QWORD *)v5 + 5);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v9)
      v9 = sub_20C679BA0(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 4);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498BD80, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BD80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BD98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BDB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BDB8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C67BB9C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BDA0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BDB8);
  }
  if (v1)
    return &qword_25498BDA0;
  else
    return &qword_25498BD80;
}

void sub_20C67BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498BD98);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C67BB9C(uint64_t **a1)
{
  qword_25498BDA8 = 0;
  unk_25498BDB0 = 0;
  qword_25498BDA0 = 0;
  sub_20BFC9A6C((char **)&qword_25498BDA0, ((unk_25498BD88 - qword_25498BD80) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BDA0, (_QWORD *)qword_25498BDA8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BDA0, (_QWORD *)qword_25498BDA8, (uint64_t *)qword_25498BD80, unk_25498BD88, (unk_25498BD88 - qword_25498BD80) >> 3);
}

void sub_20C67BC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C67BC50()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C67BD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUITokensType *pxrInternal__aapl__pxrReserved__::UsdUITokensType::UsdUITokensType(pxrInternal__aapl__pxrReserved__::UsdUITokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v58 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "closed", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v58, "minimized", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "open", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "ui:description", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "ui:displayGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "ui:displayName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "ui:nodegraph:node:displayColor", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "ui:nodegraph:node:expansionState", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "ui:nodegraph:node:icon", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "ui:nodegraph:node:pos", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "ui:nodegraph:node:size", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "ui:nodegraph:node:stackingOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "Backdrop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "NodeGraphNodeAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "SceneGraphPrimAPI", 0);
  v2 = *(_QWORD *)this;
  v59 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v58;
  v60 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v61 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v62 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v63 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v64 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v65 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v66 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v67 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v68 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v69 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v70 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v71 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v72 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v73 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v47 = operator new(0x78uLL);
  v48 = 0;
  *((_QWORD *)this + 15) = v47;
  *((_QWORD *)this + 16) = v47;
  *((_QWORD *)this + 17) = v47 + 15;
  do
  {
    v49 = *(&v59 + v48);
    *v47 = v49;
    if ((v49 & 7) != 0)
    {
      v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 2, v50));
      if ((v51 & 1) == 0)
        *v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v48;
    ++v47;
  }
  while (v48 != 15);
  v52 = &v74;
  *((_QWORD *)this + 16) = v47;
  do
  {
    v54 = *--v52;
    v53 = v54;
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
  }
  while (v52 != &v59);
  return this;
}

void sub_20C67C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, void **a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;

  sub_20BEEB2B8(&a16);
  v43 = (char *)&a33;
  while (1)
  {
    v45 = *((_QWORD *)v43 - 1);
    v43 -= 8;
    v44 = v45;
    if ((v45 & 7) != 0)
    {
      v46 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if (v43 == &a18)
    {
      if ((*v38 & 7) != 0)
      {
        v48 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*v37 & 7) != 0)
      {
        v50 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v36 & 7) != 0)
      {
        v52 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v35 & 7) != 0)
      {
        v54 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v34 & 7) != 0)
      {
        v56 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v42 & 7) != 0)
      {
        v58 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v41 & 7) != 0)
      {
        v60 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v40 & 7) != 0)
      {
        v62 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v39 & 7) != 0)
      {
        v64 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*a11 & 7) != 0)
      {
        v66 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*a12 & 7) != 0)
      {
        v68 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a13 & 7) != 0)
      {
        v70 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*a14 & 7) != 0)
      {
        v72 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a15 & 7) != 0)
      {
        v74 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v33 & 7) != 0)
      {
        v76 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C67C588()
{
  JUMPOUT(0x20C67C4ACLL);
}

void sub_20C67C590()
{
  JUMPOUT(0x20C67C4D0);
}

void sub_20C67C598()
{
  JUMPOUT(0x20C67C4F4);
}

void sub_20C67C5A0()
{
  JUMPOUT(0x20C67C518);
}

void sub_20C67C5A8()
{
  JUMPOUT(0x20C67C53CLL);
}

void sub_20C67C5B0()
{
  JUMPOUT(0x20C67C560);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  unsigned __int8 *Identifier;
  uint64_t i;
  __int128 v9;
  void **v10;
  _QWORD **v12;
  _QWORD *v13[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  void *__p[2];
  uint64_t v16;
  const char *v17;
  char v18;

  v2 = *a2;
  if (*a2)
  {
    v4 = (uint64_t *)(a1 + 8);
    v5 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v2;
    sub_20BF1DD04(a2);
    sub_20BF1D8F4((int)v4, v5);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v4);
    Identifier = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
    sub_20C086844(a1 + 64, Identifier, (uint64_t)Identifier);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessLayer((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1, v4);
    for (i = *(_QWORD *)(a1 + 48); *(_QWORD *)(a1 + 40) != i; i = *(_QWORD *)(a1 + 48))
    {
      if (*(char *)(i - 1) < 0)
      {
        sub_20BDDBFAC(__p, *(void **)(i - 24), *(_QWORD *)(i - 16));
        i = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v9 = *(_OWORD *)(i - 24);
        v16 = *(_QWORD *)(i - 8);
        *(_OWORD *)__p = v9;
      }
      v10 = (void **)(i - 24);
      if (*(char *)(i - 1) < 0)
        operator delete(*v10);
      *(_QWORD *)(a1 + 48) = v10;
      if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile((uint64_t)__p))
      {
        v13[0] = 0;
        v13[1] = 0;
        v12 = v13;
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)__p, &v12, &v14);
        sub_20BDE9D48((uint64_t)&v12, v13[0]);
        if (v14)
          pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessLayer((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1, (uint64_t *)&v14);
        sub_20C103234(&v14);
      }
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    __p[0] = "usdUtils/assetLocalization.cpp";
    __p[1] = "Process";
    v16 = 61;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process(const SdfLayerRefPtr &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to process null layer");
  }
  return v2 != 0;
}

void sub_20C67C748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20C103234(&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessLayer(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2)
{
  uint64_t *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  void *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  BOOL v10;
  void *v11;
  uint64_t **v12;
  unsigned int **v13;
  uint64_t Size;
  uint64_t i;
  uint64_t **v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  uint64_t **v19;
  void *v20;
  void *v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v28;
  uint64_t *v29;
  void *__p[2];
  char v31;
  unsigned int **v32;
  __int128 v33;
  void *__dst;
  char v35;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v36;
  unsigned int *v37[12];
  char v38;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v39;
  _QWORD v40[4];
  __int128 v41;
  _OWORD v42[2];

  v2 = a2;
  v3 = a1;
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessSublayers(a1, a2);
  v41 = 0u;
  memset(v40, 0, sizeof(v40));
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v4, v37);
  sub_20C67F83C(v40, v37);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v37);
  v6 = *((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v28 = v3;
    v29 = v2;
    do
    {
      v7 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)(v40[1]
                                                                          + (((unint64_t)(v6 + v41 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                              + 8 * ((v6 + v41 - 1) & 0x1FF));
      v39 = v7;
      if (v7)
      {
        do
          v8 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v8 + 1, (unsigned int *)v7));
      }
      sub_20C67FBEC(v40);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessMetadata(v3, v2, &v39);
      v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v9, v37);
      v10 = pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(&v39, v37);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v37);
      if (!v10)
      {
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessPayloads(v3, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2, &v39);
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessProperties((uint64_t)v3, v2, &v39);
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessReferences(v3, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2, &v39);
      }
      v12 = (uint64_t **)sub_20C0B0CA4(&v39);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v12, (uint64_t)v37);
      if (sub_20BFE6C04((uint64_t)v37))
        v13 = v37;
      else
        v13 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v37);
      sub_20BFE6C04((uint64_t)v37);
      Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v37);
      pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v37);
      if (Size)
      {
        for (i = 0; i != Size; ++i)
        {
          *(_QWORD *)&v42[0] = v37;
          *((_QWORD *)&v42[0] + 1) = i;
          sub_20BFE6C88((uint64_t)v13, (uint64_t)v42, __p);
          v32 = v13;
          v33 = v42[0];
          sub_20C67FCB0(&__dst, (__int128 *)__p, (uint64_t)&v32);
          if (v31 < 0)
            operator delete(__p[0]);
          v16 = (uint64_t **)sub_20C0B3C54(&v36);
          pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(v16, __p);
          v18 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)__p[0];
          v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)__p[1];
          while (v18 != v17)
          {
            v19 = (uint64_t **)sub_20BFE8634(v18);
            pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v19, v42);
            sub_20C67F83C(v40, (unsigned int **)v42);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v42);
            ++v18;
          }
          *(_QWORD *)&v42[0] = __p;
          sub_20BFE69E4((void ***)v42);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v36);
          if (v35 < 0)
            operator delete(__dst);
        }
      }
      if (v38 < 0)
        operator delete(v37[10]);
      sub_20BFE6D38((uint64_t)v37);
      v22 = (uint64_t **)sub_20C0B0CA4(&v39);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v22, (uint64_t)v37);
      pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v37);
      v3 = v28;
      v2 = v29;
      v23 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v37);
      pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v37);
      if (v23)
      {
        for (j = 0; j != v23; ++j)
        {
          sub_20BFE6B84((uint64_t *)v37, j, (unsigned int **)__p);
          sub_20C67F83C(v40, (unsigned int **)__p);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v25, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
        }
      }
      sub_20BFE6A54((uint64_t)v37);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v26, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v39);
      v6 = *((_QWORD *)&v41 + 1);
    }
    while (*((_QWORD *)&v41 + 1));
  }
  return sub_20C67F45C(v40);
}

void sub_20C67CA7C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a22);
  sub_20C67F45C((_QWORD *)(v37 - 160));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v8 = (uint64_t)result;
    do
    {
      v9 = *a2;
      sub_20BF1DD04((uint64_t *)&v9);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency(v8, (uint64_t *)&v9, v4, a4);
      result = sub_20C103234(&v9);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_20C67CBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5;
  const char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *Resolver;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  uint64_t RealPath;
  char *v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  __int128 v32;
  char v33;

  if (*(_BYTE *)(a1 + 108))
  {
    v5 = *(unsigned __int8 *)(a3 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a3 + 8);
    if (v5)
    {
      sub_20C1034E8((uint64_t *)&v24, a2);
      pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&v24, a3, (uint64_t)&v32);
      v9 = v25;
      if (v25)
      {
        v10 = (unsigned int *)(v25 + 8);
        do
        {
          v11 = __ldxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(const char *))(*(_QWORD *)v9 + 8))(v9);
      }
      if (!sub_20C67F73C((_QWORD *)(a1 + 64), (unsigned __int8 *)&v32)
        && !sub_20C67F73C((_QWORD *)(a1 + 112), (unsigned __int8 *)&v32))
      {
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(0);
        pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
        if ((a4 & 1) != 0)
          goto LABEL_16;
        v14 = v31;
        if ((v31 & 0x80u) != 0)
          v14 = v30;
        if (v14)
        {
LABEL_16:
          sub_20C086844(a1 + 64, (unsigned __int8 *)&v32, (uint64_t)&v32);
          v15 = (uint64_t *)(a1 + 40);
          v16 = *(_QWORD *)(a1 + 48);
          if (v16 >= *(_QWORD *)(a1 + 56))
          {
            v17 = sub_20BF3E2A4(v15, &v32);
          }
          else
          {
            sub_20BE4EDF4(v15, &v32);
            v17 = v16 + 24;
          }
          *(_QWORD *)(a1 + 48) = v17;
        }
        else
        {
          v24 = "usdUtils/assetLocalization.cpp";
          v25 = "_EnqueueDependency";
          v26 = 122;
          v27 = "void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency(const SdfLayerRe"
                "fPtr, const std::string &, const BOOL)";
          v28 = 0;
          if (*(char *)(a3 + 23) >= 0)
            v18 = a3;
          else
            v18 = *(_QWORD *)a3;
          if (v33 >= 0)
            v19 = &v32;
          else
            v19 = (__int128 *)v32;
          v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
          RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v20);
          if (*(char *)(RealPath + 23) >= 0)
            v23 = RealPath;
          else
            v23 = *(_QWORD *)RealPath;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Failed to resolve reference @%s@ with computed asset path @%s@ found in layer @%s@.", v22, v18, v19, v23);
        }
        if ((char)v31 < 0)
          operator delete(__p);
      }
      if (v33 < 0)
        operator delete((void *)v32);
    }
  }
}

void sub_20C67CDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessSublayers(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  void *__p[2];
  char v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  void **v15[3];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19[8];
  std::__shared_weak_count *v20;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v4, (uint64_t)v19);
  if (sub_20BFD19BC((uint64_t)v19))
  {
    if (sub_20C1038CC((uint64_t)v19))
      v5 = (uint64_t *)v19;
    else
      v5 = 0;
    v17 = v5;
    v18 = 0;
    sub_20C0FBCF8((uint64_t)v19, (uint64_t)v15);
    while (!sub_20C104DA0((uint64_t)&v16, (uint64_t)v15))
    {
      v6 = v17;
      v7 = v18;
      v14 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_20BF1DD04((uint64_t *)&v14);
      sub_20BFD46DC(v6, v7, __p);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v14, (uint64_t)__p, 0);
      if (v13 < 0)
        operator delete(__p[0]);
      sub_20C103234(&v14);
      ++v18;
    }
    (**(void (***)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *))*a1)(&v16, *a1, a2);
    v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    sub_20BF1DD04((uint64_t *)&v11);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v11, &v16, 0);
    sub_20C103234(&v11);
    v15[0] = (void **)&v16;
    sub_20BDE5038(v15);
  }
  v8 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20C67CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a9);
  a17 = &a20;
  sub_20BDE5038((void ***)&a17);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v20 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessMetadata(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *i;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  const pxrInternal__aapl__pxrReserved__::VtValue *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v16;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  BOOL v23;
  _BOOL4 v24;
  __int128 *v26;
  char *v27;
  __int128 *v28;
  __int128 v29;
  __int128 *v30;
  uint64_t v31;
  __int128 *j;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v34;
  size_t v35;
  std::string *v36;
  const void *v37;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v38;
  uint64_t *v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  uint64_t *ValueAtPath;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  std::string::size_type v49;
  char v50;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v51;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v52;
  _QWORD v53[3];
  std::string __dst;
  __int128 *v55;
  __int128 *v56;
  unint64_t v57;
  std::string *v58;
  std::string v59;
  std::string __p;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a1 + 26) == 1)
  {
    v6 = sub_20C0B0CA4(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetMetaDataInfoKeys(v6, &__p);
    size = __p.__r_.__value_.__l.__size_;
    for (i = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p.__r_.__value_.__r.__words[0];
          i != (const pxrInternal__aapl__pxrReserved__::TfToken *)size;
          i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
    {
      v9 = sub_20C0B0CA4(a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v9, i, &v59);
      if ((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)&v59, v10) & 1) != 0)
      {
        v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, std::string *))(*(_QWORD *)*a1 + 24))(*a1, a2, &v59);
        if ((*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(a1, a2, (uint64_t)EmptyString, (uint64_t *)&v59, 1);
        v13 = *a1;
        v14 = sub_20C0B0CA4(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, __int128 **, const pxrInternal__aapl__pxrReserved__::TfToken *, std::string *))(*(_QWORD *)v13 + 64))(v13, a2, &v55, i, &v59);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
        sub_20BFD265C(&v55);
      }
      sub_20BF4C2D8((uint64_t)&v59);
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_20BEEB2B8((void ***)&v59);
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v15 = sub_20C0B0CA4(a3);
  v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v16)
    v16 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v15, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v16 + 8), &__p);
  if (__p.__r_.__value_.__l.__size_ && (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&__p) & 1) != 0)
  {
    if ((__p.__r_.__value_.__s.__data_[8] & 4) != 0)
      v17 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(std::string *))((__p.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 168))(&__p);
    else
      v17 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)__p.__r_.__value_.__r.__words[0];
    v59.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v17);
    v59.__r_.__value_.__l.__size_ = v18;
    v19 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v17);
    v21 = v20;
    while (1)
    {
      v22 = v59.__r_.__value_.__r.__words[0];
      v23 = !v21 || v59.__r_.__value_.__r.__words[0] == v19;
      v24 = v23;
      if (v59.__r_.__value_.__l.__size_ == v21 && v24)
        break;
      if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v59.__r_.__value_.__r.__words[0]
                                                                                   + 56)))
      {
        v26 = (__int128 *)(v22 + 32);
        v28 = v56;
        if ((unint64_t)v56 >= v57)
        {
          v30 = (__int128 *)sub_20BF3E2A4((uint64_t *)&v55, v26);
        }
        else
        {
          if (*(char *)(v22 + 55) < 0)
          {
            sub_20BDDBFAC(v56, *(void **)(v22 + 32), *(_QWORD *)(v22 + 40));
          }
          else
          {
            v29 = *v26;
            *((_QWORD *)v56 + 2) = *(_QWORD *)(v22 + 48);
            *v28 = v29;
          }
          v30 = (__int128 *)((char *)v28 + 24);
        }
        v56 = v30;
      }
      sub_20BF4D2AC(&v59, (uint64_t)v26, v27);
    }
  }
  sub_20BF4C2D8((uint64_t)&__p);
  v31 = (uint64_t)v55;
  for (j = v56; (__int128 *)v31 != j; v31 += 24)
  {
    v33 = sub_20C0B0CA4(a3);
    v34 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v34)
      v34 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v33, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v34 + 8), &__p);
    sub_20C290FC0((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v58);
    sub_20BF4C2D8((uint64_t)&__p);
    if (*(char *)(v31 + 23) >= 0)
      v35 = *(unsigned __int8 *)(v31 + 23);
    else
      v35 = *(_QWORD *)(v31 + 8);
    sub_20BDF6BDC((uint64_t)&v59, v35 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v59;
    else
      v36 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if (v35)
    {
      if (*(char *)(v31 + 23) >= 0)
        v37 = (const void *)v31;
      else
        v37 = *(const void **)v31;
      memmove(v36, v37, v35);
    }
    *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 58;
    v38 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v38)
      v38 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if ((*((_QWORD *)v38 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
      v39 = (uint64_t *)((*((_QWORD *)v38 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
    v40 = *((char *)v39 + 23);
    if (v40 >= 0)
      v41 = (const std::string::value_type *)v39;
    else
      v41 = (const std::string::value_type *)*v39;
    if (v40 >= 0)
      v42 = *((unsigned __int8 *)v39 + 23);
    else
      v42 = v39[1];
    v43 = std::string::append(&v59, v41, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    ValueAtPath = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath((uint64_t *)&v58, &__p, ":");
    if (ValueAtPath)
    {
      v46 = ValueAtPath[1];
      if ((v46 & 4) != 0)
        v47 = (*(uint64_t (**)(void))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))();
      else
        v47 = *ValueAtPath;
      if (*(char *)(v47 + 23) < 0)
      {
        sub_20BDDBFAC(&__dst, *(void **)v47, *(_QWORD *)(v47 + 8));
      }
      else
      {
        v48 = *(_OWORD *)v47;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v48;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20BF49F14((_QWORD ***)&v58, 0);
    v49 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = __dst.__r_.__value_.__l.__size_;
    if (v49)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedClips(&__dst, a2, (uint64_t *)&__p);
      v51 = *a1;
      memset(v53, 0, sizeof(v53));
      sub_20BE78B98((char *)v53, (__int128 *)__p.__r_.__value_.__l.__data_, (__int128 *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      (*(void (**)(std::string *__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, pxrInternal__aapl__pxrReserved__::Sdf_Identity **, uint64_t, std::string *, _QWORD *))(*(_QWORD *)v51 + 72))(&v59, v51, a2, a3, v31, &__dst, v53);
      v58 = (std::string *)v53;
      sub_20BDE5038((void ***)&v58);
      v52 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_20BF1DD04((uint64_t *)&v52);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v52, (uint64_t *)&v59, 0);
      sub_20C103234(&v52);
      v58 = &v59;
      sub_20BDE5038((void ***)&v58);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_20BDE5038((void ***)&v59);
      v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v50 < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  sub_20BDE5038((void ***)&__p);
}

void sub_20C67D56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_20BF4C2D8((uint64_t)&a31);
  a31 = &a20;
  sub_20BDE5038((void ***)&a31);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessPayloads(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  uint64_t v14[3];
  uint64_t v15;
  std::__shared_weak_count *v16;
  void **v17;

  v6 = (unsigned int **)sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v6, &v15);
  if (!sub_20C1027F8((uint64_t)&v15) || (sub_20BFE7798(v15) & 1) != 0)
  {
    sub_20C1026F8(&v15, v14);
    v7 = v14[0];
    v8 = v14[1];
    while (1)
    {
      if (v7 == v8)
      {
        v17 = (void **)v14;
        sub_20C021818(&v17);
        (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, pxrInternal__aapl__pxrReserved__::Sdf_Identity **))(*(_QWORD *)*a1 + 8))(v14, *a1, a2, a3);
        v12 = *a2;
        sub_20BF1DD04((uint64_t *)&v12);
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v12, v14, 0);
        sub_20C103234(&v12);
        v17 = (void **)v14;
        sub_20BDE5038(&v17);
        goto LABEL_12;
      }
      if (*(char *)(v7 + 23) < 0)
        break;
      if (*(_BYTE *)(v7 + 23))
        goto LABEL_9;
LABEL_10:
      v7 += 48;
    }
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_10;
LABEL_9:
    v13 = *a2;
    sub_20BF1DD04((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v13, v7, 0);
    sub_20C103234(&v13);
    goto LABEL_10;
  }
LABEL_12:
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20C67D840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void **a16)
{
  sub_20C103234(&a9);
  a16 = (void **)&a11;
  sub_20BDE5038(&a16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessProperties(uint64_t result, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v7;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v12;
  const pxrInternal__aapl__pxrReserved__::TfToken *v13;
  const pxrInternal__aapl__pxrReserved__::TfToken *v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  const pxrInternal__aapl__pxrReserved__::VtValue *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v26;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  const pxrInternal__aapl__pxrReserved__::VtValue *v29;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  double *v33;
  double v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  const pxrInternal__aapl__pxrReserved__::VtValue *v36;
  double *v37;
  double *v38;
  BOOL v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  const pxrInternal__aapl__pxrReserved__::TfToken *v43;
  _QWORD *v44[2];
  int v45;
  int v46;
  uint64_t v47[2];
  uint64_t v48[2];
  const pxrInternal__aapl__pxrReserved__::TfToken **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 104))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result;
    v6 = sub_20C0B0CA4(a3);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v7)
      v7 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v6, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v7 + 40), (pxrInternal__aapl__pxrReserved__::VtValue *)&v51);
    if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v51) & 1) != 0)
    {
      v8 = (v52 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(&v51) : v51;
      v9 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v8;
      v10 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v8 + 8);
      if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v8 != v10)
      {
        do
        {
          v11 = sub_20C0B0CA4(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11, &v43);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, v9, &v45);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
          sub_20BFD265C(&v43);
          v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_20C0EEAF8(a2);
          pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v43);
          v14 = v43;
          v13 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v44[0];
          while (v14 != v13)
          {
            v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v15)
              v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v15 + 11) & 0xFFFFFFFFFFFFFFF8))
            {
              v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v16)
                v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v16 + 54) & 0xFFFFFFFFFFFFFFF8))
              {
                v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
                pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, v14, (pxrInternal__aapl__pxrReserved__::VtValue *)&v49);
                if ((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)&v49, v18) & 1) != 0)
                {
                  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, const pxrInternal__aapl__pxrReserved__::TfToken ***))(*(_QWORD *)*v5 + 24))(*v5, a2, &v49);
                  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(v5, a2, (uint64_t *)&v49, 0);
                  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, int *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken ***))(*(_QWORD *)*v5 + 64))(*v5, a2, &v45, v14, &v49);
                }
                sub_20BF4C2D8((uint64_t)&v49);
              }
            }
            v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v14 + 8);
          }
          v49 = &v43;
          sub_20BEEB2B8((void ***)&v49);
          v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
          v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v20)
            v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v20 + 448), (pxrInternal__aapl__pxrReserved__::VtValue *)&v49);
          if ((sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v49) & 1) != 0)
          {
            if ((v50 & 4) != 0)
              v21 = (uint64_t *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::TfToken ***))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(&v49);
            else
              v21 = (uint64_t *)&v49;
            v22 = *v21;
            v42 = v22;
            if ((v22 & 7) != 0)
            {
              v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 2, v23));
              if ((v24 & 1) == 0)
                v42 &= 0xFFFFFFFFFFFFFFF8;
            }
            v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v25)
              v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((uint64_t **)v25 + 12, &v42))
              goto LABEL_36;
            v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v26)
              v26 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((uint64_t **)v26 + 69, &v42))
            {
LABEL_36:
              v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
              v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v28)
                v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
              if (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)v48, v29))
              {
                (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t *))(*(_QWORD *)*v5 + 24))(*v5, a2, v48);
                pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(v5, a2, v48, 0);
                v30 = *v5;
                v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v31)
                  v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, int *, uint64_t, uint64_t *))(*(_QWORD *)v30 + 64))(v30, a2, &v45, (uint64_t)v31 + 88, v48);
              }
              v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
              pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath((uint64_t *)&v43, v32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
              v33 = (double *)v43;
              if (v43 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v44)
              {
                do
                {
                  v34 = v33[4];
                  v47[1] = 0;
                  v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
                  if (pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, v34, (pxrInternal__aapl__pxrReserved__::VtValue *)v47)&& (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)v47, v36) & 1) != 0)
                  {
                    (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t *))(*(_QWORD *)*v5 + 24))(*v5, a2, v47);
                    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(v5, a2, v47, 0);
                    (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, int *, uint64_t *, double))(*(_QWORD *)*v5 + 56))(*v5, a2, &v45, v47, v34);
                  }
                  sub_20BF4C2D8((uint64_t)v47);
                  v37 = (double *)*((_QWORD *)v33 + 1);
                  if (v37)
                  {
                    do
                    {
                      v38 = v37;
                      v37 = *(double **)v37;
                    }
                    while (v37);
                  }
                  else
                  {
                    do
                    {
                      v38 = (double *)*((_QWORD *)v33 + 2);
                      v39 = *(_QWORD *)v38 == (_QWORD)v33;
                      v33 = v38;
                    }
                    while (!v39);
                  }
                  v33 = v38;
                }
                while (v38 != (double *)v44);
              }
              sub_20BE6100C((uint64_t)&v43, v44[0]);
              sub_20BF4C2D8((uint64_t)v48);
            }
            if ((v42 & 7) != 0)
            {
              v40 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
              do
                v41 = __ldxr(v40);
              while (__stlxr(v41 - 2, v40));
            }
          }
          sub_20BF4C2D8((uint64_t)&v49);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
          sub_20BFD265C(&v45);
          v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
        }
        while (v9 != v10);
      }
    }
    return sub_20BF4C2D8((uint64_t)&v51);
  }
  return result;
}

void sub_20C67DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessReferences(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  uint64_t v14[3];
  uint64_t v15;
  std::__shared_weak_count *v16;
  void **v17;

  v6 = (unsigned int **)sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v6, &v15);
  if (!sub_20C102684((uint64_t)&v15) || (sub_20BFE7798(v15) & 1) != 0)
  {
    sub_20C102584(&v15, v14);
    v7 = v14[0];
    v8 = v14[1];
    while (1)
    {
      if (v7 == v8)
      {
        v17 = (void **)v14;
        sub_20C021740(&v17);
        (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, pxrInternal__aapl__pxrReserved__::Sdf_Identity **))(*(_QWORD *)*a1 + 16))(v14, *a1, a2, a3);
        v12 = *a2;
        sub_20BF1DD04((uint64_t *)&v12);
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v12, v14, 0);
        sub_20C103234(&v12);
        v17 = (void **)v14;
        sub_20BDE5038(&v17);
        goto LABEL_12;
      }
      if (*(char *)(v7 + 23) < 0)
        break;
      if (*(_BYTE *)(v7 + 23))
        goto LABEL_9;
LABEL_10:
      v7 += 56;
    }
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_10;
LABEL_9:
    v13 = *a2;
    sub_20BF1DD04((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v13, v7, 0);
    sub_20C103234(&v13);
    goto LABEL_10;
  }
LABEL_12:
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20C67E038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void **a16)
{
  sub_20C103234(&a9);
  a16 = (void **)&a11;
  sub_20BDE5038(&a16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant(pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if ((sub_20BFED488(this) & 1) != 0 || (sub_20BFED500(this) & 1) != 0)
    return 1;
  else
    return sub_20BF4A73C(this);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  __int128 v28;
  std::string::size_type size;
  char v30;
  uint64_t v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  BOOL v39;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v40;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v41;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v42;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v43;
  std::string *v44;
  uint64_t v45;
  std::string v46;
  std::string __dst;
  __int128 __p;
  uint64_t v49;
  std::string **v50;

  if (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ShouldFilterAssetPath((uint64_t)a1, (uint64_t *)a3, a5))
  {
    return;
  }
  if (sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)a4))
  {
    v10 = a4[1];
    if ((v10 & 4) != 0)
      v11 = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    else
      v11 = *a4;
    if (*(char *)(v11 + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, *(void **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v12;
    }
    if (*(char *)(v11 + 47) < 0)
    {
      sub_20BDDBFAC(&__p, *(void **)(v11 + 24), *(_QWORD *)(v11 + 32));
    }
    else
    {
      v28 = *(_OWORD *)(v11 + 24);
      v49 = *(_QWORD *)(v11 + 40);
      __p = v28;
    }
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetUdimTiles(a2, &__dst, (uint64_t *)&v46);
      (*(void (**)(std::string **__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t, std::string *, std::string *))(*(_QWORD *)*a1 + 32))(&v44, *a1, a2, a3, &__dst, &v46);
      v30 = pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&__dst, 0);
      v43 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_20BF1DD04((uint64_t *)&v43);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v43, (uint64_t)&__dst, v30);
      sub_20C103234(&v43);
      v42 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_20BF1DD04((uint64_t *)&v42);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v42, (uint64_t *)&v44, v30);
      sub_20C103234(&v42);
      v50 = &v44;
      sub_20BDE5038((void ***)&v50);
      v44 = &v46;
      sub_20BDE5038((void ***)&v44);
    }
    if (SHIBYTE(v49) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  if (sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)a4))
  {
    v13 = a4[1];
    if ((v13 & 4) != 0)
      v14 = (_QWORD *)(*(uint64_t (**)(uint64_t *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    else
      v14 = (_QWORD *)*a4;
    if (!*v14)
      return;
    v15 = v14[4];
    v16 = 48 * *v14;
    while (*(char *)(v15 + 23) < 0)
    {
      if (*(_QWORD *)(v15 + 8))
        goto LABEL_16;
LABEL_17:
      v15 += 48;
      v16 -= 48;
      if (!v16)
      {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, a2, a3);
        return;
      }
    }
    if (!*(_BYTE *)(v15 + 23))
      goto LABEL_17;
LABEL_16:
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetUdimTiles(a2, (const std::string *)v15, (uint64_t *)&__dst);
    (*(void (**)(std::string *__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t, uint64_t, std::string *))(*(_QWORD *)*a1 + 40))(&v46, *a1, a2, a3, v15, &__dst);
    v41 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    sub_20BF1DD04((uint64_t *)&v41);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v41, v15, 0);
    sub_20C103234(&v41);
    v40 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    sub_20BF1DD04((uint64_t *)&v40);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v40, (uint64_t *)&v46, 0);
    sub_20C103234(&v40);
    v44 = &v46;
    sub_20BDE5038((void ***)&v44);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    sub_20BDE5038((void ***)&v46);
    goto LABEL_17;
  }
  if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)a4))
  {
    v17 = a4[1];
    v18 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)((v17 & 4) != 0
                                                           ? (*(uint64_t (**)(uint64_t *))((v17 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(a4)
                                                           : *a4);
    if (!pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v18))
    {
      v19 = (std::string *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v18);
      v21 = v20;
      v44 = v19;
      v45 = v20;
      v22 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v18);
      v24 = (void **)v22;
      v25 = v23;
      if (v23)
        v26 = v19 == (std::string *)v22;
      else
        v26 = 1;
      v27 = v26;
      if (v21 == v23)
        goto LABEL_47;
      do
      {
        do
        {
          v31 = *(unsigned __int8 *)(a3 + 23);
          if ((v31 & 0x80u) != 0)
            v31 = *(_QWORD *)(a3 + 8);
          if (v31)
          {
            sub_20C1DEE14((const void **)a3, 58, (uint64_t)&v46);
            v32 = v19[2].__r_.__value_.__s.__data_[7];
            if (v32 >= 0)
              v33 = &v19[1].__r_.__value_.__s.__data_[8];
            else
              v33 = (const std::string::value_type *)v19[1].__r_.__value_.__l.__size_;
            if (v32 >= 0)
              v34 = v19[2].__r_.__value_.__s.__data_[7];
            else
              v34 = v19[1].__r_.__value_.__r.__words[2];
            v35 = std::string::append(&v46, v33, v34);
            v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v36;
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v46.__r_.__value_.__l.__data_);
          }
          else if (v19[2].__r_.__value_.__s.__data_[7] < 0)
          {
            sub_20BDDBFAC(&__dst, (void *)v19[1].__r_.__value_.__l.__size_, v19[1].__r_.__value_.__r.__words[2]);
          }
          else
          {
            __dst = *(std::string *)((char *)v19 + 32);
          }
          pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(a1, a2, &__dst, &v19[2].__r_.__value_.__r.__words[1], a5);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          sub_20BF4D2AC(&v44, v37, v38);
          v19 = v44;
          if (v25)
            v39 = v44 == (std::string *)v24;
          else
            v39 = 1;
          v27 = v39;
        }
        while (v45 != v25);
LABEL_47:
        ;
      }
      while ((v27 & 1) == 0);
    }
  }
}

void sub_20C67E624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x20C67E510);
  JUMPOUT(0x20C67E4F8);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedClips(std::string *__str@<X1>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  char *v6;
  std::string::size_type size;
  std::string::size_type v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  std::string *v20;
  void **v21;
  __int128 v22;
  void *v23[2];
  char v24;
  void *v25[2];
  unsigned __int8 v26;
  std::string v27;
  void *v28[2];
  char v29;
  std::string __p;
  const char *v31;
  char v32;
  std::string v33;
  std::string v34;

  pxrInternal__aapl__pxrReserved__::TfGetPathName(__str, &v33);
  size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (!size)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalization.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetTemplatedClips";
    __p.__r_.__value_.__r.__words[2] = 293;
    v31 = "static std::vector<std::string> pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedC"
          "lips(const SdfLayerRefPtr &, const std::string &)";
    v32 = 0;
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = __str;
    else
      v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid template asset path '%s'.", v6, v20);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_53;
  }
  sub_20C1034E8((uint64_t *)&__p, a2);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&__p, (uint64_t)&v33, (uint64_t)v28);
  v8 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v9 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)v28, 0) & 1) == 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalization.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetTemplatedClips";
    __p.__r_.__value_.__r.__words[2] = 302;
    v31 = "static std::vector<std::string> pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedC"
          "lips(const SdfLayerRefPtr &, const std::string &)";
    v32 = 0;
    v21 = v28;
    if (v29 < 0)
      v21 = (void **)v28[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Clips directory '%s' is not a valid directory on the filesystem.", v12, v21);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_51;
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(__str, &v27);
  sub_20BDDC0E4(&v34, "#");
  sub_20BDDC0E4(v23, "*");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v27, (unsigned __int8 *)&v34, (unsigned __int8 *)v23, &__p);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)v28, (uint64_t)&__p, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::TfGlob((uint64_t)v25, 24, a3);
  v13 = *a3;
  v14 = a3[1];
  if (v14 - *a3 == 24)
  {
    v15 = *(unsigned __int8 *)(v13 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = (void *)*(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(void **)(v13 + 8);
    v17 = v26;
    if ((v26 & 0x80u) != 0)
      v17 = (unint64_t)v25[1];
    if (v16 == (void *)v17)
    {
      if ((v26 & 0x80u) == 0)
        v18 = v25;
      else
        v18 = (void **)v25[0];
      if ((v15 & 0x80) == 0)
      {
        if (*(_BYTE *)(v13 + 23))
        {
          v19 = 0;
          while (*(unsigned __int8 *)(v13 + v19) == *((unsigned __int8 *)v18 + v19))
          {
            if (v15 == ++v19)
              goto LABEL_40;
          }
          goto LABEL_46;
        }
        goto LABEL_40;
      }
      if (!memcmp(*(const void **)v13, v18, *(_QWORD *)(v13 + 8)))
      {
LABEL_40:
        sub_20BDE5078(a3);
        v13 = *a3;
        v14 = a3[1];
      }
    }
  }
LABEL_46:
  while (v13 != v14)
  {
    sub_20C1DEE14((const void **)v28, 47, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)v13, (unsigned __int8 *)&__p, (unsigned __int8 *)&v33, &v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    v22 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)&v34.__r_.__value_.__l + 2);
    *(_OWORD *)v13 = v22;
    v13 += 24;
  }
  if ((char)v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
LABEL_51:
  if (v29 < 0)
    operator delete(v28[0]);
LABEL_53:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_20C67E968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v39 - 57) < 0)
    operator delete(*(void **)(v39 - 80));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v5;

  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(a1, a2, (uint64_t)__p, a3, a4);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20C67EAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ShouldFilterAssetPath(uint64_t a1, uint64_t *a2, int a3)
{
  int v3;

  if (!a3 || !*(_BYTE *)(a1 + 109))
    return 0;
  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 20)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v3 != 20)
  {
    return 0;
  }
  return *a2 == 0x666E497465737361 && a2[1] == 0x69746E6564693A6FLL && *((_DWORD *)a2 + 4) == 1919248742;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetUdimTiles(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  void **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::string::size_type size;
  char v11;
  void **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void **v25;
  void **v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  void *__p[2];
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  void **v35;
  void **v36;
  void **v37;
  void **v38;
  uint64_t *v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::IsUdimIdentifier(a2))
  {
    sub_20C1034E8((uint64_t *)&v35, a1);
    pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimPath(a2, (uint64_t *)&v35, &v34);
    v6 = v36;
    if (v36)
    {
      v7 = (unsigned int *)(v36 + 1);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*((void (**)(void **))*v6 + 1))(v6);
    }
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    v11 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v34.__r_.__value_.__l.__size_;
    if (size)
    {
      v35 = 0;
      v36 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimTilePaths(&v34, (uint64_t *)&v35, &v32);
      v12 = v36;
      if (v36)
      {
        v13 = (unsigned int *)(v36 + 1);
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*((void (**)(void **))*v12 + 1))(v12);
      }
      v16 = v32;
      for (i = v33; v16 != i; v16 += 48)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ReplaceUdimPattern((uint64_t)a2, (const void **)(v16 + 24), (uint64_t)__p);
        v19 = a3[1];
        v18 = a3[2];
        if (v19 >= v18)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a3) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v22;
          v39 = a3 + 2;
          if (v24)
            v25 = (void **)sub_20BDE4FF4((uint64_t)(a3 + 2), v24);
          else
            v25 = 0;
          v26 = &v25[3 * v21];
          v35 = v25;
          v36 = v26;
          v38 = &v25[3 * v24];
          v27 = *(_OWORD *)__p;
          v26[2] = v31;
          *(_OWORD *)v26 = v27;
          __p[1] = 0;
          v31 = 0;
          __p[0] = 0;
          v37 = v26 + 3;
          sub_20BDF34C0(a3, &v35);
          v28 = a3[1];
          sub_20BDF3648((uint64_t)&v35);
          v29 = SHIBYTE(v31);
          a3[1] = v28;
          if (v29 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v20 = *(_OWORD *)__p;
          *(_QWORD *)(v19 + 16) = v31;
          *(_OWORD *)v19 = v20;
          a3[1] = v19 + 24;
        }
      }
      v35 = (void **)&v32;
      sub_20BE93030(&v35);
      v11 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_20C67EDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  if (a25)
    sub_20C96B340(a25);
  if (a23 < 0)
    operator delete(__p);
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ExtractExternalReferences(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;
  _QWORD *v16[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  void **v18;
  _OWORD v19[2];
  _OWORD v20[3];
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  _OWORD v25[2];
  int v26;
  _OWORD v27[3];
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  void *v32;
  _BYTE v33[40];
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v10 = operator new(0x20uLL);
  *v10 = &unk_24C540160;
  v10[1] = sub_20C67F1A4;
  v10[2] = 0;
  v10[3] = v27;
  v31 = v10;
  v32 = &unk_24C540290;
  sub_20C67F628((uint64_t)v33, (uint64_t)v30);
  v11 = v31;
  if (v31 == v30)
  {
    v12 = 4;
    v11 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  v18 = &v32;
  memset(v19, 0, sizeof(v19));
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v22 = 1065353216;
  v23 = a2;
  v24 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (void **)v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v15, &v17);
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&v18, (uint64_t *)&v17);
  sub_20C103234(&v17);
  sub_20BDE9D48((uint64_t)&v15, v16[0]);
  sub_20C67F220((uint64_t)v27);
  if (a3)
  {
    sub_20BE7598C(a3);
    *(_OWORD *)a3 = v27[0];
    a3[2] = *(_QWORD *)&v27[1];
    memset(v27, 0, 24);
  }
  if (a4)
  {
    sub_20BE7598C(a4);
    *(_OWORD *)a4 = *(_OWORD *)((char *)&v27[1] + 8);
    a4[2] = *((_QWORD *)&v27[2] + 1);
    memset((char *)&v27[1] + 8, 0, 24);
  }
  if (a5)
  {
    sub_20BE7598C(a5);
    *(_OWORD *)a5 = v28;
    a5[2] = v29;
    v29 = 0;
    v28 = 0uLL;
  }
  sub_20BEB3F28((uint64_t)v25);
  sub_20BEB3F28((uint64_t)&v20[1] + 8);
  v15 = (void **)v20;
  sub_20BDE5038(&v15);
  v15 = (void **)v19 + 1;
  sub_20BDE5038(&v15);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v19);
  v32 = &unk_24C540290;
  v13 = v35;
  if (v35 == v34)
  {
    v14 = 4;
    v13 = v34;
    goto LABEL_16;
  }
  if (v35)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  sub_20C67F674((uint64_t)v33);
  v18 = (void **)&v28;
  sub_20BDE5038(&v18);
  v18 = (void **)&v27[1] + 1;
  sub_20BDE5038(&v18);
  v18 = (void **)v27;
  sub_20BDE5038(&v18);
}

void sub_20C67F120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;

  sub_20C67F340((uint64_t)&a14);
  sub_20C67F3A0((_QWORD *)(v33 - 168));
  sub_20C67F408(&a33);
  _Unwind_Resume(a1);
}

double sub_20C67F1A4@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  double result;

  v7 = *(__int128 **)(a2 + 24);
  v8 = *(__int128 **)(a2 + 32);
  if (v7 == v8)
  {
    sub_20C67F574(a1, (__int128 *)a2, a3);
  }
  else
  {
    do
    {
      sub_20C67F574(a1, v7, a3);
      v7 = (__int128 *)((char *)v7 + 24);
    }
    while (v7 != v8);
  }
  result = 0.0;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  return result;
}

uint64_t sub_20C67F220(uint64_t a1)
{
  unsigned __int8 *v2;
  const void **v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  const void **v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  const void **v13;
  unsigned __int8 **v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v2 = *(unsigned __int8 **)a1;
  v3 = *(const void ***)(a1 + 8);
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == (const void **)v2)
    v5 = 0;
  else
    v5 = v4;
  sub_20BEDAFAC((uint64_t)v2, v3, (uint64_t)&v19, v5, 1);
  v6 = sub_20C104400(*(unsigned __int8 **)a1, *(unsigned __int8 **)(a1 + 8), (uint64_t)&v20);
  sub_20C0F9EEC(a1, (uint64_t)v6, *(__int128 **)(a1 + 8));
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(const void ***)(a1 + 32);
  v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
  if (v8 == (const void **)v7)
    v10 = 0;
  else
    v10 = v9;
  sub_20BEDAFAC(v7, v8, (uint64_t)&v21, v10, 1);
  v11 = sub_20C104400(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), (uint64_t)&v22);
  sub_20C0F9EEC(a1 + 24, (uint64_t)v11, *(__int128 **)(a1 + 32));
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(const void ***)(a1 + 56);
  v14 = (unsigned __int8 **)(a1 + 48);
  v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v12) >> 3));
  if (v13 == (const void **)v12)
    v16 = 0;
  else
    v16 = v15;
  sub_20BEDAFAC(v12, v13, (uint64_t)&v23, v16, 1);
  v17 = sub_20C104400(*v14, v14[1], (uint64_t)&v24);
  return sub_20C0F9EEC((uint64_t)v14, (uint64_t)v17, (__int128 *)v14[1]);
}

uint64_t sub_20C67F340(uint64_t a1)
{
  void **v3;

  sub_20BEB3F28(a1 + 112);
  sub_20BEB3F28(a1 + 64);
  v3 = (void **)(a1 + 40);
  sub_20BDE5038(&v3);
  v3 = (void **)(a1 + 16);
  sub_20BDE5038(&v3);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

_QWORD *sub_20C67F3A0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24C540290;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_20C67F674((uint64_t)(a1 + 1));
  return a1;
}

void **sub_20C67F408(void **a1)
{
  void **v3;

  v3 = a1 + 6;
  sub_20BDE5038(&v3);
  v3 = a1 + 3;
  sub_20BDE5038(&v3);
  v3 = a1;
  sub_20BDE5038(&v3);
  return a1;
}

uint64_t sub_20C67F45C(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v11;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = a1[5] + v5;
    v9 = *(uint64_t *)((char *)v2 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
    v10 = v8 & 0x1FF;
    v11 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v9 + 8 * v10);
    if (v7 != v11)
    {
      do
      {
        v7 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v10, v7)+ 8);
        v10 = v7 - (pxrInternal__aapl__pxrReserved__::SdfSpec *)*v6;
        if (v10 == 4096)
        {
          v12 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)v6[1];
          ++v6;
          v7 = v12;
        }
      }
      while (v7 != v11);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 256;
  }
  else
  {
    if (v14 != 2)
      goto LABEL_16;
    v15 = 512;
  }
  a1[4] = v15;
LABEL_16:
  while (v2 != v3)
  {
    v16 = *v2++;
    operator delete(v16);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

uint64_t *sub_20C67F574(uint64_t *result, __int128 *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v3 = result;
  switch(a3)
  {
    case 0:
    case 3:
      v4 = result + 3;
      v5 = v3[4];
      if (v5 >= v3[5])
      {
        result = (uint64_t *)sub_20BF3E2A4(v4, a2);
      }
      else
      {
        sub_20BE4EDF4(v4, a2);
        result = (uint64_t *)(v5 + 24);
      }
      v3[4] = (uint64_t)result;
      break;
    case 1:
      v6 = result[1];
      if (v6 >= result[2])
      {
        result = (uint64_t *)sub_20BF3E2A4(result, a2);
      }
      else
      {
        sub_20BE4EDF4(result, a2);
        result = (uint64_t *)(v6 + 24);
      }
      v3[1] = (uint64_t)result;
      break;
    case 2:
      v7 = result + 6;
      v8 = v3[7];
      if (v8 >= v3[8])
      {
        result = (uint64_t *)sub_20BF3E2A4(v7, a2);
      }
      else
      {
        sub_20BE4EDF4(v7, a2);
        result = (uint64_t *)(v8 + 24);
      }
      v3[7] = (uint64_t)result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20C67F628(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_20BE9E6E8(a1 + 40, a2);
  return a1;
}

void sub_20C67F660(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C67F674(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C67F674(uint64_t a1)
{
  void *v2;

  sub_20C67F6AC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C67F6AC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C67F6E8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C67F6E8(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *sub_20C67F73C(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_20BEF33B4((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_20BEB4EF8(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_20C67F83C(_QWORD *a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_20C67F8D8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  v10 = *a2;
  *(_QWORD *)(v9 + 8 * (v8 & 0x1FF)) = *a2;
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_20C67F8D8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20C67FBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C67FBEC(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)(v2 & 0x1FF), (pxrInternal__aapl__pxrReserved__::SdfSpec *)(*(_QWORD *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v2 & 0x1FF)));
  --a1[5];
  return sub_20C67FC44(a1, 1);
}

uint64_t sub_20C67FC44(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_BYTE *sub_20C67FCB0(_BYTE *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20BFE6CE8(*(uint64_t **)(a3 + 8), *(_QWORD *)(a3 + 16), (unsigned int **)__dst + 3);
  return __dst;
}

void sub_20C67FD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C67FD30(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C540160;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C67FD74(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C540160;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C67FDA0(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, _QWORD);
  _QWORD *v6;

  v4 = a1[2];
  v5 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v6 + v5);
  return v5(v6, a2, a3, *a4);
}

uint64_t sub_20C67FDC0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5401E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C67FDFC()
{
  return &unk_24C5401E0;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(_QWORD *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  __int128 *RealPath;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  void *__dst[2];
  char v22;
  void *v23;
  char v24;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  RealPath = (__int128 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v10);
  sub_20C682A1C((char *)__dst, RealPath, a3);
  v12 = sub_20C682C90(a1, (pxrInternal__aapl__pxrReserved__ *)__dst);
  if (v12)
  {
    if (*((char *)v12 + 87) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a5, (void *)v12[8], v12[9]);
    }
    else
    {
      v13 = *((_OWORD *)v12 + 4);
      *(_QWORD *)(a5 + 16) = v12[10];
      *(_OWORD *)a5 = v13;
    }
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  else
  {
    LODWORD(v15[0]) = a4;
    v14 = a1[8];
    if (!v14)
      sub_20BE9E974();
    (*(void (**)(uint64_t, uint64_t *, __int128 *, void **))(*(_QWORD *)v14 + 48))(v14, a2, a3, v15);
    sub_20C682AB0((char *)v15, (__int128 *)__dst, (__int128 *)a5);
    sub_20C682E7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__ *)v15, (uint64_t)v15);
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(__dst[0]);
}

void sub_20C67FF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20BE78668((uint64_t)va);
  sub_20C67FF84(v2);
  sub_20BE930F8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C67FF84(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_20BDE5038(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessSublayers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  uint64_t v21;
  std::string *v22;
  __int128 *v23;
  void *__dst[2];
  uint64_t v25;
  _BYTE v26[24];
  void *v27[2];
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[8];
  uint64_t *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE v36[8];
  std::__shared_weak_count *v37;
  std::string **v38;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v6, (uint64_t)v36);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (sub_20C1038CC((uint64_t)v36))
    v7 = (uint64_t *)v36;
  else
    v7 = 0;
  v31 = v7;
  v32 = 0;
  sub_20C0FBCF8((uint64_t)v36, (uint64_t)v29);
  while (!sub_20C104DA0((uint64_t)v30, (uint64_t)v29))
  {
    sub_20BFD46DC(v31, v32, v27);
    if (SHIBYTE(v28) < 0)
    {
      sub_20BDDBFAC(__dst, v27[0], (unint64_t)v27[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v27;
      v25 = v28;
    }
    memset(v26, 0, sizeof(v26));
    pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((_QWORD *)(a1 + 8), a2, (__int128 *)__dst, 1, (uint64_t)__p);
    v8 = (void *)HIBYTE(v21);
    if (v21 < 0)
      v8 = __p[1];
    if (v8)
    {
      v9 = sub_20C020210((uint64_t)v33, v34, (unsigned __int8 **)__p);
      if (v9 == v34)
      {
        v10 = v9;
        if (v9 >= v35)
        {
          v12 = sub_20BF3E2A4((uint64_t *)&v33, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v21) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v9, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v11 = *(_OWORD *)__p;
            *(_QWORD *)(v9 + 16) = v21;
            *(_OWORD *)v9 = v11;
          }
          v12 = v10 + 24;
        }
        v34 = v12;
        v13 = a3[1];
        if (v13 >= a3[2])
        {
          v15 = (std::string *)sub_20BF3E2A4(a3, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v21) < 0)
          {
            sub_20BDDBFAC((_BYTE *)a3[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v14 = *(_OWORD *)__p;
            *(_QWORD *)(v13 + 16) = v21;
            *(_OWORD *)v13 = v14;
          }
          v15 = (std::string *)(v13 + 24);
          a3[1] = v13 + 24;
        }
        a3[1] = (uint64_t)v15;
        sub_20BFB74E8(a3, v15, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
      }
    }
    v38 = &v22;
    sub_20BDE5038((void ***)&v38);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    __p[0] = v26;
    sub_20BDE5038((void ***)__p);
    if (SHIBYTE(v25) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(v27[0]);
    ++v32;
  }
  if ((sub_20C683198((uint64_t)v36, &v33) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(a1, a2, (uint64_t *)__dst);
    if (__dst[0])
    {
      v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)__dst);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths(v16, &v33);
    }
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__dst);
  }
  __dst[0] = &v33;
  sub_20BDE5038((void ***)__dst);
  v17 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C6802AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  sub_20BDE5038((void ***)&a15);
  a15 = v26 - 136;
  sub_20BDE5038((void ***)&a15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 112));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t *FileFormat;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t Identifier;
  const char *v13;
  uint64_t **v14;
  char v15;
  char v16;
  const std::string **v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  std::string::size_type size;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  std::string __p;
  const char *v29;
  char v30;

  if (!*a2)
  {
LABEL_8:
    *a3 = 0;
    return;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v6);
  v8 = sub_20BFCF6F4(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) & 1) != 0
    || (v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2),
        v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v10)))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationDelegate.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetOrCreateWritableLayer";
    __p.__r_.__value_.__r.__words[2] = 448;
    v29 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLa"
          "yer(const SdfLayerRefPtr &)";
    v30 = 0;
    v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
    if (*(char *)(Identifier + 23) >= 0)
      v13 = (const char *)Identifier;
    else
      v13 = *(const char **)Identifier;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to edit asset path in package layer: %s", v13);
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 216))
  {
    *a3 = *a2;
    sub_20BF1DD04(a3);
  }
  else
  {
    sub_20C682C3C((uint64_t *)&__p, a2, a2);
    v14 = sub_20C6839DC((uint64_t **)(a1 + 224), (unint64_t *)&__p, (uint64_t)&__p);
    v16 = v15;
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p.__r_.__value_.__l.__size_);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
    if (v16)
    {
      v17 = (const std::string **)sub_20C0EEAF8(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(v17, &__p);
      v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
      v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v18);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(v20);
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous((uint64_t)&__p, v19, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
      sub_20C1034E8((uint64_t *)&__p, a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(v21, (uint64_t *)&__p);
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v23 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v14[5];
      v26 = (uint64_t *)(v14 + 5);
      *v26 = *a3;
      sub_20BF1DD04(a3);
      sub_20BF1D8F4((int)v26, v27);
    }
    else
    {
      *a3 = (uint64_t)v14[5];
      sub_20BF1DD04(a3);
    }
  }
}

void sub_20C68057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, unsigned int *a11, int a12, __int16 a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (a11)
  {
    v17 = a11 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  sub_20C103234(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessPayloads(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, void **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C680658(a1, a2, a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 240), a4);
}

void sub_20C680658(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, void **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  void ***v11;
  char v12;
  void ***v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  void *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  int v20;
  int v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v22;
  __int128 v23[2];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  void **v29[3];
  void ***v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v23);
  v10 = sub_20C0B0CA4(a3);
  v29[2] = (void **)&stru_24C524CD0;
  LOWORD(v30) = 0;
  v29[0] = (void **)&unk_24C527F30;
  v29[1] = (void **)v23;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(v10, a4, (uint64_t (***)(_QWORD, uint64_t))v29) & 1) == 0)goto LABEL_18;
  v11 = (void ***)operator new(0x20uLL);
  *v11 = (void **)&unk_24C540308;
  v11[1] = (void **)a1;
  v11[2] = (void **)a2;
  v11[3] = a5;
  v30 = v11;
  v12 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations(v23, (uint64_t)v29, 1);
  v13 = v30;
  if (v30 == v29)
  {
    v14 = 4;
    v13 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_7;
    v14 = 5;
  }
  ((void (*)(void))(*v13)[v14])();
LABEL_7:
  if ((v12 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(a1, a2, (uint64_t *)v29);
    if (v29[0])
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)v29);
      v16 = sub_20C0B0CA4(a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v20);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, &v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (!LOBYTE(v23[0])
        && v24[1] == v24[0]
        && v25[1] == v25[0]
        && v26[1] == v26[0]
        && v27[1] == v27[0]
        && v28[1] == v28[0])
      {
        v19 = sub_20C0B0CA4(&v22);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v19, a4);
      }
      else
      {
        v17 = sub_20C0B0CA4(&v22);
        sub_20C683240(v17, a4, (uint64_t)v23);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v18, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
    }
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v29);
  }
LABEL_18:
  v29[0] = (void **)v28;
  sub_20C021818(v29);
  v29[0] = (void **)v27;
  sub_20C021818(v29);
  v29[0] = (void **)v26;
  sub_20C021818(v29);
  v29[0] = (void **)v25;
  sub_20C021818(v29);
  v29[0] = (void **)v24;
  sub_20C021818(v29);
  v29[0] = (void **)v23 + 1;
  sub_20C021818(v29);
}

void sub_20C6808BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessReferences(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, void **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C6809C8(a1, a2, a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 280), a4);
}

void sub_20C6809C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, void **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  void ***v11;
  char v12;
  void ***v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  void *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  int v20;
  int v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v22;
  __int128 v23[2];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  void **v29[3];
  void ***v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v23);
  v10 = sub_20C0B0CA4(a3);
  v29[2] = (void **)&stru_24C524CE0;
  LOWORD(v30) = 0;
  v29[0] = (void **)&unk_24C527E50;
  v29[1] = (void **)v23;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(v10, a4, (uint64_t (***)(_QWORD, uint64_t))v29) & 1) == 0)goto LABEL_18;
  v11 = (void ***)operator new(0x20uLL);
  *v11 = (void **)&unk_24C540388;
  v11[1] = (void **)a1;
  v11[2] = (void **)a2;
  v11[3] = a5;
  v30 = v11;
  v12 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations(v23, (uint64_t)v29, 1);
  v13 = v30;
  if (v30 == v29)
  {
    v14 = 4;
    v13 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_7;
    v14 = 5;
  }
  ((void (*)(void))(*v13)[v14])();
LABEL_7:
  if ((v12 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(a1, a2, (uint64_t *)v29);
    if (v29[0])
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)v29);
      v16 = sub_20C0B0CA4(a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v20);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, &v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (!LOBYTE(v23[0])
        && v24[1] == v24[0]
        && v25[1] == v25[0]
        && v26[1] == v26[0]
        && v27[1] == v27[0]
        && v28[1] == v28[0])
      {
        v19 = sub_20C0B0CA4(&v22);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v19, a4);
      }
      else
      {
        v17 = sub_20C0B0CA4(&v22);
        sub_20C683628(v17, a4, (uint64_t)v23);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v18, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
    }
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v29);
  }
LABEL_18:
  v29[0] = (void **)v28;
  sub_20C021740(v29);
  v29[0] = (void **)v27;
  sub_20C021740(v29);
  v29[0] = (void **)v26;
  sub_20C021740(v29);
  v29[0] = (void **)v25;
  sub_20C021740(v29);
  v29[0] = (void **)v24;
  sub_20C021740(v29);
  v29[0] = (void **)v23 + 1;
  sub_20C021740(v29);
}

void sub_20C680C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

const void ****pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::BeginProcessValue(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  const void ****result;
  uint64_t v6;
  const void ****v7;

  result = (const void ****)sub_20BF4A73C(a3);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)a3 + 1);
    if ((v6 & 4) != 0)
      v7 = (const void ****)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
    else
      v7 = *(const void *****)a3;
    return pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a1 + 168), v7);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessValuePath(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 **a5@<X4>, _QWORD *a6@<X8>)
{
  std::string::size_type size;
  unint64_t v11;
  uint64_t ***v12;
  void **v13;
  void **v14;
  int v15;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  std::string v20;
  void *v21[2];
  unsigned __int8 v22;
  uint64_t v23;
  __int128 __dst;
  char v25;
  uint64_t v26;
  char *v27[3];

  v27[2] = *(char **)MEMORY[0x24BDAC8D0];
  sub_20C682BA8(&__dst, a4, a5);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((_QWORD *)(a1 + 8), a2, &__dst, 0, (uint64_t)v21);
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetRelativeKeyPath(a3, &v20);
  size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v20.__r_.__value_.__l.__size_;
  if (size)
  {
    v11 = v22;
    if ((v22 & 0x80u) != 0)
      v11 = (unint64_t)v21[1];
    v12 = (uint64_t ***)(a1 + 168);
    if (!v11)
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(v12, &v20, ":");
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      goto LABEL_19;
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v16, v21);
    v27[1] = (char *)&off_24C5255B8;
    sub_20C00A0DC(v27, (__int128 *)v16);
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)v12, &v20, v27, ":");
    sub_20BF4C2D8((uint64_t)v27);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17) < 0)
      goto LABEL_17;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v16, v21);
    v13 = (void **)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = *(_OWORD *)v16;
    *(_QWORD *)(a1 + 96) = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    v14 = (void **)(a1 + 104);
    if (*(char *)(a1 + 127) < 0)
    {
      operator delete(*v14);
      v15 = SHIBYTE(v17);
      *(_OWORD *)v14 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 120) = v19;
      HIBYTE(v19) = 0;
      LOBYTE(__p[0]) = 0;
      if (v15 < 0)
LABEL_17:
        operator delete(v16[0]);
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 120) = v19;
    }
  }
  sub_20C681060((uint64_t)v21, (uint64_t)a6);
LABEL_19:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v16[0] = &v23;
  sub_20BDE5038((void ***)v16);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  v21[0] = &v26;
  sub_20BDE5038((void ***)v21);
  if (v25 < 0)
    operator delete((void *)__dst);
}

void sub_20C680F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a20 < 0)
    operator delete(__p);
  sub_20C67FF84((uint64_t)&a21);
  sub_20C67FF84(v21 - 104);
  _Unwind_Resume(a1);
}

void sub_20C680FD0()
{
  JUMPOUT(0x20C680FC8);
}

std::string *pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetRelativeKeyPath@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  char v5;

  result = (std::string *)std::string::find((const std::string *)a1, 58, 0);
  if (result != (std::string *)-1)
    return std::string::basic_string(a2, (const std::string *)a1, (std::string::size_type)result->__r_.__value_.__r.__words + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  if (*(char *)(a1 + 23) < 0)
    return (std::string *)sub_20BDDBFAC(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
  a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_20C681060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20BE71C2C((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) + 1);
  sub_20BFB74E8((uint64_t *)a2, *(std::string **)(a2 + 8), *(std::string **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20BF3E2A4((uint64_t *)a2, (__int128 *)a1);
  }
  else
  {
    sub_20BE4EDF4((_QWORD *)a2, (__int128 *)a1);
    result = v4 + 24;
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

void sub_20C681108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessValuePathArrayElement(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X3>, __int128 **a4@<X4>, _QWORD *a5@<X8>)
{
  unint64_t v8;
  void *__p[2];
  unsigned __int8 v10;
  uint64_t v11;
  void *__dst[2];
  char v13;
  uint64_t v14;
  void **v15;

  sub_20C682BA8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((_QWORD *)(a1 + 8), a2, (__int128 *)__dst, 0, (uint64_t)__p);
  v8 = v10;
  if ((v10 & 0x80u) != 0)
    v8 = (unint64_t)__p[1];
  if (v8)
  {
    sub_20C681228(a1 + 176, (uint64_t)__p);
    sub_20C681060((uint64_t)__p, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  v15 = (void **)&v11;
  sub_20BDE5038(&v15);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  __p[0] = &v14;
  sub_20BDE5038((void ***)__p);
  if (v13 < 0)
    operator delete(__dst[0]);
}

void sub_20C681204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C67FF84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C681228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[4];
  char v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v5 + 48 * v4, a2);
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_15:
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20C00AA30(a1, v11);
    v13 = 3 * v4;
    sub_20C00ABDC(v9, v9 + 16 * v13, (uint64_t)v12);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v12[2 * v13], a2);
    sub_20C00A724((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v12;
    goto LABEL_13;
  }
  v15[0] = "vt/array.h";
  v15[1] = "emplace_back";
  v15[2] = 433;
  v15[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::emplace_back("
           "Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath, Args = <const std::string &>]";
  v16 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v14 = 4;
    else
      v14 = 3;
  }
  else
  {
    v14 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v14);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::EndProcessingValuePathArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  __int128 v5;
  std::string __p;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetRelativeKeyPath(a3, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    if (*(_QWORD *)(a1 + 176))
    {
      sub_20C1FCDD4((__n128 *)(a1 + 176), (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
      pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 168), &__p, v7, ":");
      sub_20BF4C2D8((uint64_t)v7);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath((uint64_t ***)(a1 + 168), &__p, ":");
    }
  }
  else
  {
    sub_20C00A724((_QWORD *)(a1 + 128));
    v5 = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 144) = v5;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
  }
  sub_20C00A7F8((_QWORD *)(a1 + 176));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C681494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BF4C2D8((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetUpdatedValue(pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v14;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v15;
  __int128 v16;
  void *v17;
  void *v18[2];
  void *__dst[2];
  uint64_t v20;
  __int128 __p;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  a3[1] = 0;
  if (!sub_20BFED488(a2))
  {
    if (sub_20BFED500(a2))
    {
      v9 = *((_QWORD *)a2 + 1);
      if ((v9 & 4) != 0)
        v10 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
      else
        v10 = *(_QWORD **)a2;
      v12 = *((_QWORD *)this + 16);
      v11 = (__n128 *)((char *)this + 128);
      if (!v12 && *v10)
      {
LABEL_35:
        __dst[1] = 0;
        goto LABEL_36;
      }
      sub_20C1FCDD4(v11, (pxrInternal__aapl__pxrReserved__::VtValue *)__dst);
    }
    else
    {
      if (!sub_20BF4A73C(a2))
        return;
      v13 = *((_QWORD *)a2 + 1);
      if ((v13 & 4) != 0)
        v14 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
      else
        v14 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)a2;
      v15 = (pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *)((char *)this + 168);
      if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v15)
        && !pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v14))
      {
        goto LABEL_35;
      }
      sub_20C681788((const void ****)v15, (pxrInternal__aapl__pxrReserved__::VtValue *)__dst);
    }
LABEL_36:
    sub_20BF4B5D8(a3, __dst);
    sub_20BF4C2D8((uint64_t)__dst);
    return;
  }
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 4) != 0)
    v7 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v7 = *(_QWORD *)a2;
  if (*(char *)(v7 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v20 = *(_QWORD *)(v7 + 16);
    *(_OWORD *)__dst = v8;
  }
  if (*(char *)(v7 + 47) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(v7 + 24), *(_QWORD *)(v7 + 32));
  }
  else
  {
    v16 = *(_OWORD *)(v7 + 24);
    v22 = *(_QWORD *)(v7 + 40);
    __p = v16;
  }
  if (*((char *)this + 103) < 0)
  {
    if (!*((_QWORD *)this + 11))
      goto LABEL_25;
LABEL_29:
    sub_20C681748((uint64_t)this + 80, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    goto LABEL_30;
  }
  if (*((_BYTE *)this + 103))
    goto LABEL_29;
LABEL_25:
  v17 = (void *)HIBYTE(v20);
  if (v20 < 0)
    v17 = __dst[1];
  if (!v17)
    goto LABEL_29;
  v18[1] = 0;
LABEL_30:
  sub_20BF4B5D8(a3, v18);
  sub_20BF4C2D8((uint64_t)v18);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20C6816F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_20BF4C2D8(v16);
  _Unwind_Resume(a1);
}

double sub_20C681748@<D0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D19D0(a2, a1).n128_u64[0];
  return result;
}

void sub_20C681774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

const void ****sub_20C681788@<X0>(const void ****a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20BF4AB1C(a2, a1);
}

void sub_20C6817B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::EndProcessValue(pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  char *v10;
  char *v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  std::type_info v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetUpdatedValue(a1, a5, &v16);
  if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v16, (std::type_info *)a5, v10) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer((uint64_t)a1, a2, (uint64_t *)&v15);
    if (v15)
    {
      if (v16.__type_name)
      {
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a5, &v16, v11) & 1) == 0)
        {
          v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v15);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v12, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v16);
        }
      }
      else
      {
        v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v15);
        pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v13, a3, a4);
      }
    }
    sub_20C103234(&v15);
  }
  return sub_20BF4C2D8((uint64_t)&v16);
}

void sub_20C6818C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::EndProcessTimeSampleValue(pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, double a5)
{
  char *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetUpdatedValue(a1, a4, v15);
  if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v15, (std::type_info *)a4, v10) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer((uint64_t)a1, a2, (uint64_t *)&v14);
    if (v14)
    {
      if (v15[1])
      {
        v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v14);
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v11, a3, a5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      }
      else
      {
        v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v14);
        pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(v12, a3, a5);
      }
    }
    sub_20C103234(&v14);
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C6819E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessClipTemplateAssetPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, const void **a4@<X3>, __int128 *a5@<X4>, __int128 **a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  void **p_s1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v20;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v22;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v27;
  uint64_t *EmptyString;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v34;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v35;
  void *v36;
  std::string __p;
  _QWORD **v38;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v39;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v40;
  void *__s1;
  size_t __n;
  unsigned __int8 v43;
  uint64_t v44;
  void *__dst[2];
  char v46;
  uint64_t v47;
  std::string v48;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  sub_20C682BA8(__dst, a5, a6);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((_QWORD *)(a1 + 8), a2, (__int128 *)__dst, 0, (uint64_t)&__s1);
  v13 = v43;
  if ((v43 & 0x80u) == 0)
    v14 = v43;
  else
    v14 = __n;
  v15 = *((unsigned __int8 *)a5 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a5 + 1);
  if (v14 == v15)
  {
    if (v16 >= 0)
      v17 = (unsigned __int8 *)a5;
    else
      v17 = *(unsigned __int8 **)a5;
    if ((v43 & 0x80) == 0)
    {
      if (v43)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *v17)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v17;
          if (!--v13)
            goto LABEL_36;
        }
        goto LABEL_17;
      }
LABEL_36:
      sub_20C681060((uint64_t)&__s1, a7);
      goto LABEL_53;
    }
    if (!memcmp(__s1, v17, __n))
      goto LABEL_36;
  }
LABEL_17:
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(a1, a2, (uint64_t *)&v40);
  if (v40)
  {
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v40);
    v20 = sub_20C0B0CA4(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
    sub_20BFD265C(&__p);
    v21 = sub_20C0B0CA4(&v39);
    v22 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v22)
      v22 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v21, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v22 + 8), &v49);
    if ((v50 & 4) != 0)
      v23 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(&v49);
    else
      v23 = v49;
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v38, v23);
    if (*((char *)a4 + 23) >= 0)
      v24 = *((unsigned __int8 *)a4 + 23);
    else
      v24 = (size_t)a4[1];
    v25 = &v48;
    sub_20BDF6BDC((uint64_t)&v48, v24 + 1);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0)
        v26 = a4;
      else
        v26 = *a4;
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 58;
    v27 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v27)
      v27 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if ((*((_QWORD *)v27 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v27 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
    v29 = *((char *)EmptyString + 23);
    if (v29 >= 0)
      v30 = (const std::string::value_type *)EmptyString;
    else
      v30 = (const std::string::value_type *)*EmptyString;
    if (v29 >= 0)
      v31 = *((unsigned __int8 *)EmptyString + 23);
    else
      v31 = EmptyString[1];
    v32 = std::string::append(&v48, v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    v48.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C520700;
    sub_20BF77444((unsigned int **)&v48, (uint64_t)&__s1);
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v38, &__p, &v48, ":");
    sub_20BF4C2D8((uint64_t)&v48);
    v34 = sub_20C0B0CA4(&v39);
    v35 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v35)
      v35 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v48.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C51D8C8;
    sub_20BF4D058((unsigned int **)&v48, (const void ****)&v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v34, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v35 + 8), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v48);
    sub_20BF4C2D8((uint64_t)&v48);
    sub_20C681060((uint64_t)&__s1, a7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20BF49F14(&v38, 0);
    sub_20BF4C2D8((uint64_t)&v49);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v36, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v39);
  }
  else
  {
    sub_20C681060((uint64_t)&__s1, a7);
  }
  sub_20C103234(&v40);
LABEL_53:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  sub_20BDE5038((void ***)&__p);
  if ((char)v43 < 0)
    operator delete(__s1);
  __s1 = &v47;
  sub_20BDE5038((void ***)&__s1);
  if (v46 < 0)
    operator delete(__dst[0]);
}

void sub_20C681E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20C103234(&a22);
  sub_20C67FF84((uint64_t)&a23);
  sub_20C67FF84((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20C681ED8()
{
  JUMPOUT(0x20C681EC8);
}

void sub_20C681EE0()
{
  JUMPOUT(0x20C681ED0);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::GetLayerUsedForWriting@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;

  if (!*(_BYTE *)(a1 + 216))
  {
    v6 = *a2;
    if (*a2)
    {
      v9 = *(_QWORD **)(a1 + 232);
      v7 = (_QWORD *)(a1 + 232);
      v8 = v9;
      if (v9)
      {
        v10 = v7;
        do
        {
          v11 = v8[4];
          v12 = v11 >= v6;
          if (v11 >= v6)
            v13 = v8;
          else
            v13 = v8 + 1;
          if (v12)
            v10 = v8;
          v8 = (_QWORD *)*v13;
        }
        while (*v13);
        if (v10 != v7)
        {
          v14 = v10[4];
          v15 = v10 + 5;
          if (v6 >= v14)
            a2 = v15;
        }
      }
    }
  }
  return sub_20C683A98(a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ClearLayerUsedForWriting(uint64_t a1, unint64_t *a2)
{
  return sub_20C683B54(a1 + 224, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessSublayers(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t *v7;
  _QWORD *v8;
  void *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 *v16[3];
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  void *__src[2];
  int64_t v23;
  std::string *v24;
  __int128 *v25;
  _BYTE v26[24];
  char v27[8];
  uint64_t *v28;
  uint64_t v29;
  char v30[8];
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::string *v33;
  unint64_t v34;
  __int128 **v35;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v6, (uint64_t)v30);
  if (sub_20C1038CC((uint64_t)v30))
    v7 = (uint64_t *)v30;
  else
    v7 = 0;
  v28 = v7;
  v29 = 0;
  sub_20C0FBCF8((uint64_t)v30, (uint64_t)v26);
  v8 = (_QWORD *)(a1 + 8);
  while (!sub_20C104DA0((uint64_t)v27, (uint64_t)v26))
  {
    sub_20BFD46DC(v28, v29, v17);
    memset(v16, 0, sizeof(v16));
    sub_20C682BA8(__p, (__int128 *)v17, v16);
    pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v8, a2, (__int128 *)__p, 1, (uint64_t)__src);
    v35 = (__int128 **)&v21;
    sub_20BDE5038((void ***)&v35);
    if (v20 < 0)
      operator delete(__p[0]);
    v35 = v16;
    sub_20BDE5038((void ***)&v35);
    if (v18 < 0)
      operator delete(v17[0]);
    v9 = (void *)HIBYTE(v23);
    if (v23 < 0)
      v9 = __src[1];
    if (v9)
    {
      v10 = v33;
      if ((unint64_t)v33 >= v34)
      {
        v12 = (std::string *)sub_20BF3E2A4(&v32, (__int128 *)__src);
      }
      else
      {
        if (SHIBYTE(v23) < 0)
        {
          sub_20BDDBFAC(v33, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          v11 = *(_OWORD *)__src;
          v33->__r_.__value_.__r.__words[2] = v23;
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        }
        v12 = v10 + 1;
      }
      v33 = v12;
      sub_20BFB74E8(&v32, v12, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
    }
    __p[0] = &v24;
    sub_20BDE5038((void ***)__p);
    if (SHIBYTE(v23) < 0)
      operator delete(__src[0]);
    ++v29;
  }
  v13 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __src[0] = &v32;
  sub_20BDE5038((void ***)__src);
}

void sub_20C682178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v25 - 136));
  a25 = v25 - 112;
  sub_20BDE5038((void ***)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessPayloads(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13[3];
  void **v14;

  v7 = (unsigned int **)sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v7, &v11);
  sub_20C1026F8(&v11, v13);
  sub_20C6822DC(a1, a2, v13, a4);
  v14 = (void **)v13;
  sub_20C021818(&v14);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20C6822B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20C021818(&a14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6822DC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  __int128 v11;
  std::string *v12;
  __int128 *v13[3];
  void *__p[2];
  char v15;
  uint64_t v16;
  void *__src[2];
  uint64_t v18;
  std::string *v19;
  __int128 *v20;
  __int128 **v21;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v8 = (_QWORD *)(a1 + 8);
    do
    {
      if (*(char *)(v4 + 23) < 0)
      {
        if (*(_QWORD *)(v4 + 8))
        {
LABEL_7:
          memset(v13, 0, sizeof(v13));
          sub_20C682BA8(__p, (__int128 *)v4, v13);
          pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v8, a2, (__int128 *)__p, 2, (uint64_t)__src);
          v21 = (__int128 **)&v16;
          sub_20BDE5038((void ***)&v21);
          if (v15 < 0)
            operator delete(__p[0]);
          v21 = v13;
          sub_20BDE5038((void ***)&v21);
          v9 = (void *)HIBYTE(v18);
          if (v18 < 0)
            v9 = __src[1];
          if (v9)
          {
            v10 = a4[1];
            if (v10 >= a4[2])
            {
              v12 = (std::string *)sub_20BF3E2A4(a4, (__int128 *)__src);
            }
            else
            {
              if (SHIBYTE(v18) < 0)
              {
                sub_20BDDBFAC((_BYTE *)a4[1], __src[0], (unint64_t)__src[1]);
              }
              else
              {
                v11 = *(_OWORD *)__src;
                *(_QWORD *)(v10 + 16) = v18;
                *(_OWORD *)v10 = v11;
              }
              v12 = (std::string *)(v10 + 24);
              a4[1] = v10 + 24;
            }
            a4[1] = (uint64_t)v12;
            sub_20BFB74E8(a4, v12, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
          }
          __p[0] = &v19;
          sub_20BDE5038((void ***)__p);
          if (SHIBYTE(v18) < 0)
            operator delete(__src[0]);
        }
      }
      else if (*(_BYTE *)(v4 + 23))
      {
        goto LABEL_7;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

void sub_20C682474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  sub_20C67FF84((uint64_t)&a18);
  a18 = (void **)v18;
  sub_20BDE5038(&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessReferences(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13[3];
  void **v14;

  v7 = (unsigned int **)sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v7, &v11);
  sub_20C102584(&v11, v13);
  sub_20C6825A0(a1, a2, v13, a4);
  v14 = (void **)v13;
  sub_20C021740(&v14);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20C682578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20C021740(&a14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6825A0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  __int128 v11;
  std::string *v12;
  __int128 *v13[3];
  void *__p[2];
  char v15;
  uint64_t v16;
  void *__src[2];
  uint64_t v18;
  std::string *v19;
  __int128 *v20;
  __int128 **v21;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v8 = (_QWORD *)(a1 + 8);
    do
    {
      if (*(char *)(v4 + 23) < 0)
      {
        if (*(_QWORD *)(v4 + 8))
        {
LABEL_7:
          memset(v13, 0, sizeof(v13));
          sub_20C682BA8(__p, (__int128 *)v4, v13);
          pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v8, a2, (__int128 *)__p, 0, (uint64_t)__src);
          v21 = (__int128 **)&v16;
          sub_20BDE5038((void ***)&v21);
          if (v15 < 0)
            operator delete(__p[0]);
          v21 = v13;
          sub_20BDE5038((void ***)&v21);
          v9 = (void *)HIBYTE(v18);
          if (v18 < 0)
            v9 = __src[1];
          if (v9)
          {
            v10 = a4[1];
            if (v10 >= a4[2])
            {
              v12 = (std::string *)sub_20BF3E2A4(a4, (__int128 *)__src);
            }
            else
            {
              if (SHIBYTE(v18) < 0)
              {
                sub_20BDDBFAC((_BYTE *)a4[1], __src[0], (unint64_t)__src[1]);
              }
              else
              {
                v11 = *(_OWORD *)__src;
                *(_QWORD *)(v10 + 16) = v18;
                *(_OWORD *)v10 = v11;
              }
              v12 = (std::string *)(v10 + 24);
              a4[1] = v10 + 24;
            }
            a4[1] = (uint64_t)v12;
            sub_20BFB74E8(a4, v12, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
          }
          __p[0] = &v19;
          sub_20BDE5038((void ***)__p);
          if (SHIBYTE(v18) < 0)
            operator delete(__src[0]);
        }
      }
      else if (*(_BYTE *)(v4 + 23))
      {
        goto LABEL_7;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
}

void sub_20C682738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  sub_20C67FF84((uint64_t)&a18);
  a18 = (void **)v18;
  sub_20BDE5038(&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessValuePath(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X3>, __int128 **a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  void *__dst[2];
  char v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  void **v14;

  v7 = (_QWORD *)(a1 + 8);
  sub_20C682BA8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v7, a2, (__int128 *)__dst, 0, (uint64_t)__p);
  sub_20C681060((uint64_t)__p, a5);
  v14 = (void **)&v13;
  sub_20BDE5038(&v14);
  if (v12 < 0)
    operator delete(__p[0]);
  v14 = (void **)&v10;
  sub_20BDE5038(&v14);
  if (v9 < 0)
    operator delete(__dst[0]);
}

void sub_20C682840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20C67FF84((uint64_t)va1);
  sub_20C67FF84((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessValuePathArrayElement(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X3>, __int128 **a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  void *__dst[2];
  char v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  void **v14;

  v7 = (_QWORD *)(a1 + 8);
  sub_20C682BA8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v7, a2, (__int128 *)__dst, 0, (uint64_t)__p);
  sub_20C681060((uint64_t)__p, a5);
  v14 = (void **)&v13;
  sub_20BDE5038(&v14);
  if (v12 < 0)
    operator delete(__p[0]);
  v14 = (void **)&v10;
  sub_20BDE5038(&v14);
  if (v9 < 0)
    operator delete(__dst[0]);
}

void sub_20C682914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20C67FF84((uint64_t)va1);
  sub_20C67FF84((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessClipTemplateAssetPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X4>, __int128 **a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  void *__dst[2];
  char v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  void **v14;

  v7 = (_QWORD *)(a1 + 8);
  sub_20C682BA8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v7, a2, (__int128 *)__dst, 3, (uint64_t)__p);
  sub_20C681060((uint64_t)__p, a5);
  v14 = (void **)&v13;
  sub_20BDE5038(&v14);
  if (v12 < 0)
    operator delete(__p[0]);
  v14 = (void **)&v10;
  sub_20BDE5038(&v14);
  if (v9 < 0)
    operator delete(__dst[0]);
}

void sub_20C6829E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20C67FF84((uint64_t)va1);
  sub_20C67FF84((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20C682A1C(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20C682A94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20C682AB0(char *a1, __int128 *a2, __int128 *a3)
{
  char *v5;
  __int128 v6;

  v5 = sub_20C682B14(a1, a2) + 48;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_20C682B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE930F8(v1);
  _Unwind_Resume(a1);
}

char *sub_20C682B14(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C682B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20C682BA8(_BYTE *__dst, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  sub_20BE78B98(__dst + 24, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_20C682C20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C682C3C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = *a2;
  sub_20BF1DD04(a1);
  a1[1] = *a3;
  sub_20BF1DD04(a1 + 1);
  return a1;
}

void sub_20C682C7C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20C103234(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C682C90(_QWORD *a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v13;
  char v14;

  v13 = 0;
  v14 = 0;
  sub_20C009E34((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, a2, (uint64_t)a2 + 24);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = bswap64(0x9E3779B97F4A7C55 * v13);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v4)
      v8 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v8 = (*(_QWORD *)&v4 - 1) & v5;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = (_QWORD *)*v9;
  if (*v9)
  {
    do
    {
      v11 = v10[1];
      if (v11 == v5)
      {
        if ((sub_20C682DB8((uint64_t)&v13, (uint64_t)(v10 + 2), (uint64_t)a2) & 1) != 0)
          return v10;
      }
      else
      {
        if (v7 > 1)
        {
          if (v11 >= *(_QWORD *)&v4)
            v11 %= *(_QWORD *)&v4;
        }
        else
        {
          v11 &= *(_QWORD *)&v4 - 1;
        }
        if (v11 != v8)
          return 0;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t sub_20C682DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  char v22;

  result = sub_20BEB4EF8((uint64_t)&v22, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 *)(a2 + 47);
    if ((v6 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(a2 + 47);
    else
      v7 = *(_QWORD *)(a2 + 32);
    v8 = *(unsigned __int8 *)(a3 + 47);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a3 + 32);
    if (v7 == v8)
    {
      v10 = (const void **)(a2 + 24);
      v13 = *(unsigned __int8 **)(a3 + 24);
      v12 = (unsigned __int8 *)(a3 + 24);
      v11 = v13;
      if (v9 >= 0)
        v14 = v12;
      else
        v14 = v11;
      if ((v6 & 0x80) != 0)
      {
        return memcmp(*v10, v14, *(_QWORD *)(a2 + 32)) == 0;
      }
      else if (*(_BYTE *)(a2 + 47))
      {
        v15 = v6 - 1;
        do
        {
          v17 = *(unsigned __int8 *)v10;
          v10 = (const void **)((char *)v10 + 1);
          v16 = v17;
          v19 = *v14++;
          v18 = v19;
          v21 = v15-- != 0;
          result = v16 == v18;
        }
        while (v16 == v18 && v21);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *sub_20C682E7C(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  char v27;

  v25 = 0;
  LOBYTE(v26) = 0;
  sub_20C009E34((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, a2, (uint64_t)a2 + 24);
  v7 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if ((sub_20C682DB8((uint64_t)&v25, (uint64_t)(v12 + 2), (uint64_t)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (char *)operator new(0x58uLL);
  v25 = v14;
  v26 = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v14 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v15 = *(_OWORD *)(a3 + 48);
  *((_QWORD *)v14 + 10) = *(_QWORD *)(a3 + 64);
  *((_OWORD *)v14 + 4) = v15;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v27 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v12 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C683154((uint64_t)&v25, 0);
  return v12;
}

void sub_20C68313C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C683154((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C683154(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C67F6E8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C683198(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;

  sub_20BFE0F18(a1, (uint64_t)&v9);
  v3 = v9;
  v4 = v10;
  v6 = a2;
  v5 = *a2;
  if (v10 - v9 == v6[1] - v5)
  {
    if (v9 == v10)
    {
      v7 = 1;
    }
    else
    {
      do
      {
        v7 = sub_20BEB4EF8((uint64_t)&v11, v3, v5);
        if (!(_DWORD)v7)
          break;
        v3 += 24;
        v5 += 24;
      }
      while (v3 != v4);
    }
  }
  else
  {
    v7 = 0;
  }
  v11 = &v9;
  sub_20BDE5038((void ***)&v11);
  return v7;
}

BOOL sub_20C683240(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL8 v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C526620;
  sub_20C02F37C(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C6832CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C6832F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C540308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C683334(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C540308;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C683360(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20C6833BC(*(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 16), a2, *(uint64_t **)(a1 + 24), a3);
}

uint64_t sub_20C683374(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C540368))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6833B0()
{
  return &unk_24C540368;
}

void sub_20C6833BC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  void *v11;
  unint64_t v12;
  __int128 v13;
  std::string *v14;
  void *__p[2];
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  std::string *v22;
  __int128 *v23;
  void *__dst[2];
  uint64_t v25;
  _QWORD v26[3];

  if (*(char *)(a3 + 23) < 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if (v10)
    {
      sub_20BDDBFAC(__dst, *(void **)a3, v10);
      goto LABEL_6;
    }
LABEL_11:
    sub_20C1057F0((_QWORD *)a5, (__int128 *)a3);
    return;
  }
  if (!*(_BYTE *)(a3 + 23))
    goto LABEL_11;
  *(_OWORD *)__dst = *(_OWORD *)a3;
  v25 = *(_QWORD *)(a3 + 16);
LABEL_6:
  memset(v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((_QWORD *)(a1 + 8), a2, (__int128 *)__dst, 2, (uint64_t)v20);
  v11 = (void *)HIBYTE(v21);
  if (v21 < 0)
    v11 = v20[1];
  if (v11)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a3 + 16);
    }
    sub_20BFD6E54(&v17, (_DWORD *)(a3 + 24));
    sub_20BFD6EA4(&v18, (_DWORD *)(a3 + 28));
    v19 = *(_OWORD *)(a3 + 32);
    sub_20C105740((uint64_t)__p, (uint64_t)v20);
    v12 = a4[1];
    if (v12 >= a4[2])
    {
      v14 = (std::string *)sub_20BE4EE50(a4, (__int128 *)v20);
    }
    else
    {
      if (SHIBYTE(v21) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a4[1], v20[0], (unint64_t)v20[1]);
      }
      else
      {
        v13 = *(_OWORD *)v20;
        *(_QWORD *)(v12 + 16) = v21;
        *(_OWORD *)v12 = v13;
      }
      v14 = (std::string *)(v12 + 24);
      a4[1] = v12 + 24;
    }
    a4[1] = (uint64_t)v14;
    sub_20BFB74E8(a4, v14, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
    sub_20C1057F0((_QWORD *)a5, (__int128 *)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_20BFD265C(&v17);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 48) = 0;
  }
  __p[0] = &v22;
  sub_20BDE5038((void ***)__p);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  v20[0] = v26;
  sub_20BDE5038((void ***)v20);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
}

void sub_20C6835E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  sub_20C02CDE4((uint64_t)&a9);
  sub_20C67FF84((uint64_t)&a15);
  sub_20C67FF84((uint64_t)&a21);
  _Unwind_Resume(a1);
}

BOOL sub_20C683628(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL8 v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C526568;
  sub_20C02C8C8(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C6836B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C6836D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C540388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C68371C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C540388;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C683748(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  sub_20C6837A4(*(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 16), a2, *(uint64_t **)(a1 + 24), a3);
}

uint64_t sub_20C68375C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5403E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C683798()
{
  return &unk_24C5403E8;
}

void sub_20C6837A4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char *a5@<X8>)
{
  unint64_t v10;
  void *v11;
  unint64_t v12;
  __int128 v13;
  std::string *v14;
  void *__p[2];
  char v16;
  int v17;
  _DWORD v18[5];
  _QWORD **v19;
  void *v20[2];
  uint64_t v21;
  std::string *v22;
  __int128 *v23;
  __int128 __dst;
  uint64_t v25;
  _QWORD v26[3];

  if (*(char *)(a3 + 23) < 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if (v10)
    {
      sub_20BDDBFAC(&__dst, *(void **)a3, v10);
      goto LABEL_6;
    }
LABEL_12:
    sub_20C029E64(a5, (__int128 *)a3);
    a5[56] = 1;
    return;
  }
  if (!*(_BYTE *)(a3 + 23))
    goto LABEL_12;
  __dst = *(_OWORD *)a3;
  v25 = *(_QWORD *)(a3 + 16);
LABEL_6:
  memset(v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((_QWORD *)(a1 + 8), a2, &__dst, 0, (uint64_t)v20);
  v11 = (void *)HIBYTE(v21);
  if (v21 < 0)
    v11 = v20[1];
  if (v11)
  {
    sub_20C029E64((char *)__p, (__int128 *)a3);
    sub_20C1051AC((uint64_t)__p, (uint64_t)v20);
    v12 = a4[1];
    if (v12 >= a4[2])
    {
      v14 = (std::string *)sub_20BE4EE50(a4, (__int128 *)v20);
    }
    else
    {
      if (SHIBYTE(v21) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a4[1], v20[0], (unint64_t)v20[1]);
      }
      else
      {
        v13 = *(_OWORD *)v20;
        *(_QWORD *)(v12 + 16) = v21;
        *(_OWORD *)v12 = v13;
      }
      v14 = (std::string *)(v12 + 24);
      a4[1] = v12 + 24;
    }
    a4[1] = (uint64_t)v14;
    sub_20BFB74E8(a4, v14, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
    sub_20C029E64(a5, (__int128 *)__p);
    a5[56] = 1;
    sub_20BF49F14(&v19, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
    sub_20BFD265C(&v17);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *a5 = 0;
    a5[56] = 0;
  }
  __p[0] = &v22;
  sub_20BDE5038((void ***)__p);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  __p[0] = v26;
  sub_20BDE5038((void ***)__p);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__dst);
}

void sub_20C683994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  *(_QWORD *)(v2 + 8) = v3;
  sub_20C029F94((uint64_t)va);
  sub_20C67FF84((uint64_t)va1);
  sub_20C67FF84(v4 - 96);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C6839DC(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_20C683A98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20C683B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C683B54(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = (uint64_t)v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_QWORD *)(v4 + 32))
    return 0;
  sub_20C683BB8((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_20C683BB8(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_20BE10B80(a1, (uint64_t *)a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 40));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *v6;
  std::string::size_type size;
  const char *v8;
  char *v9;
  unsigned __int8 *v10;
  char v11;
  uint64_t v12;
  void **v13;
  std::string v14;
  std::string __p;
  void *__dst[2];
  uint64_t v17;
  void *v18;
  char v19;

  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)__dst);
    pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap(&__p, a1, __dst);
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&__p, (uint64_t)&v18, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v19 < 0)
      operator delete(v18);
    if (SHIBYTE(v17) < 0)
    {
      v6 = __dst[0];
LABEL_26:
      operator delete(v6);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)a2, &__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a2, &v14);
      sub_20C686180(__dst, (__int128 *)&__p, "");
      v10 = sub_20C686270((uint64_t)(a1 + 1), (unsigned __int8 *)__dst, (uint64_t)__dst);
      v11 = (char)v8;
      if (v19 < 0)
        operator delete(v18);
      if (SHIBYTE(v17) < 0)
        operator delete(__dst[0]);
      if (v11)
      {
        v12 = (*a1)++;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zu", v8, v9, v12);
        v13 = (void **)(v10 + 40);
        if ((char)v10[63] < 0)
          operator delete(*v13);
        *(_OWORD *)v13 = *(_OWORD *)__dst;
        *((_QWORD *)v10 + 7) = v17;
      }
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)v10 + 5, (uint64_t)&v14, a3);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    else if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_26;
    }
  }
}

void sub_20C683DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build(pxrInternal__aapl__pxrReserved__ *a1, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t *Resolver;
  char *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  char *v8;
  __int128 *p_dst;
  __int128 *v10;
  _BOOL8 v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  std::string *RealPath;
  std::string __str;
  __int128 v17;
  _OWORD v18[3];
  uint64_t v19;
  int v20;
  int v21;
  __int16 v22;
  _OWORD v23[2];
  int v24;
  __int128 __dst;
  uint64_t v26;
  void **v27[5];

  v4 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)sub_20BDDBFAC(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v26 = *((_QWORD *)a2 + 2);
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  std::string::operator=((std::string *)v4 + 2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((*((char *)v4 + 71) & 0x80000000) == 0)
  {
    if (*((_BYTE *)v4 + 71))
      goto LABEL_8;
LABEL_13:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationPackage.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 80;
    *(_QWORD *)&v17 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build(const SdfA"
                      "ssetPath &, const std::string &)";
    BYTE8(v17) = 0;
    p_dst = &__dst;
    if (v26 < 0)
      p_dst = (__int128 *)__dst;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Failed to resolve asset path: %s", v6, p_dst);
    goto LABEL_19;
  }
  if (!*((_QWORD *)v4 + 7))
    goto LABEL_13;
LABEL_8:
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)&__dst, &__str, v27);
  v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)v4 + 1);
  *((void ***)v4 + 1) = v27[0];
  v27[0] = 0;
  sub_20BF1D8F4((_DWORD)v4 + 8, v7);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v27);
  sub_20BDE9D48((uint64_t)&__str, (_QWORD *)__str.__r_.__value_.__l.__size_);
  if (!*((_QWORD *)v4 + 1))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationPackage.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 87;
    *(_QWORD *)&v17 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build(const SdfA"
                      "ssetPath &, const std::string &)";
    BYTE8(v17) = 0;
    v10 = &__dst;
    if (v26 < 0)
      v10 = (__int128 *)__dst;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Failed to find or open root asset layer: %s", v8, v10);
LABEL_19:
    v11 = 0;
    goto LABEL_26;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v12 = *(_QWORD *)(a3 + 8);
    if (v12)
    {
      sub_20BDDBFAC(&__str, *(void **)a3, v12);
      goto LABEL_23;
    }
LABEL_22:
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)v4 + 1);
    RealPath = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v13);
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(RealPath, &__str);
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a3 + 23))
    goto LABEL_22;
  __str = *(std::string *)a3;
LABEL_23:
  std::string::operator=((std::string *)((char *)v4 + 368), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v4 + 96;
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0u;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v20 = 1065353216;
  v21 = 1;
  v22 = 257;
  memset(v23, 0, sizeof(v23));
  v24 = 1065353216;
  sub_20C6861F8((uint64_t)v27, *((unsigned __int8 **)v4 + 49), *((unsigned __int8 **)v4 + 50));
  sub_20C23FAE0((uint64_t)v23, (uint64_t *)v27);
  sub_20BEB3F28((uint64_t)v27);
  v11 = pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&__str, (uint64_t *)v4 + 1);
  sub_20BEB3F28((uint64_t)v23);
  sub_20BEB3F28((uint64_t)&v18[1] + 8);
  v27[0] = (void **)v18;
  sub_20BDE5038(v27);
  v27[0] = (void **)&__str.__r_.__value_.__r.__words[2];
  sub_20BDE5038(v27);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__str.__r_.__value_.__l.__size_);
LABEL_26:
  if (SHIBYTE(v26) < 0)
    operator delete((void *)__dst);
  return v11;
}

void sub_20C684124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 89) < 0)
    operator delete(*(void **)(v16 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(uint64_t a1, const std::string *a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  char *v16;
  char v17;
  char *v18;
  char *v19;
  char IsFile;
  char *v21;
  char v22;
  char *v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;
  void *__p;
  char *v28;
  uint64_t v29;
  const char *v30;
  char v31;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v32;
  _OWORD v33[2];
  int v34;

  std::string::operator=((std::string *)(a1 + 344), a2);
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  sub_20C086844((uint64_t)v33, (unsigned __int8 *)(a1 + 368), a1 + 368);
  v32 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
  sub_20BF1DD04((uint64_t *)&v32);
  pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage((char *)a1, (uint64_t *)&v32, a1 + 368);
  sub_20C103234(&v32);
  v3 = *(_QWORD **)(a1 + 416);
  if (v3 == (_QWORD *)(a1 + 424))
  {
    v4 = 1;
  }
  else
  {
    v4 = 1;
    do
    {
      v5 = v3 + 7;
      sub_20C086844((uint64_t)v33, (unsigned __int8 *)v3 + 56, (uint64_t)(v3 + 7));
      v7 = v3 + 4;
      if ((v8 & 1) != 0)
      {
        v28 = 0;
        v29 = 0;
        __p = &v28;
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)(v3 + 4), &__p, &v26);
        sub_20BDE9D48((uint64_t)&__p, v28);
        if (v26)
        {
          v25 = v26;
          sub_20BF1DD04((uint64_t *)&v25);
          v4 &= pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage((char *)a1, (uint64_t *)&v25, (uint64_t)(v3 + 7));
          sub_20C103234(&v25);
        }
        else
        {
          __p = "usdUtils/assetLocalizationPackage.cpp";
          v28 = "Write";
          v29 = 128;
          v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
          v31 = 0;
          if (*((char *)v3 + 55) < 0)
            v7 = (_QWORD *)*v7;
          if (*((char *)v3 + 79) < 0)
            v5 = (_QWORD *)*v5;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Unable to open layer at path \"%s\" while writing package. Skipping export of dependency @%s@.", v9, v7, v5);
        }
        sub_20C103234(&v26);
      }
      else
      {
        __p = "usdUtils/assetLocalizationPackage.cpp";
        v28 = "Write";
        v29 = 120;
        v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
        v31 = 0;
        if (*((char *)v3 + 79) < 0)
          v5 = (_QWORD *)*v5;
        if (*((char *)v3 + 55) < 0)
          v7 = (_QWORD *)*v7;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"A file already exists at path \"%s\" in the package. Skipping export of dependency @%s@.", v6, v5, v7);
      }
      v10 = (_QWORD *)v3[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v3[2];
          v12 = *v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 424));
  }
  v13 = *(_QWORD *)(a1 + 440);
  for (i = *(_QWORD *)(a1 + 448); v13 != i; v13 += 48)
  {
    v15 = (_QWORD *)(v13 + 24);
    sub_20C086844((uint64_t)v33, (unsigned __int8 *)(v13 + 24), v13 + 24);
    if ((v17 & 1) != 0)
    {
      v19 = (char *)v13;
      if (*(char *)(v13 + 23) < 0)
        v19 = *(char **)v13;
      sub_20BDDC0E4(&__p, v19);
      IsFile = pxrInternal__aapl__pxrReserved__::TfIsFile((const char *)&__p, 1);
      v22 = IsFile;
      if (SHIBYTE(v29) < 0)
      {
        operator delete(__p);
        if ((v22 & 1) == 0)
        {
LABEL_38:
          __p = "usdUtils/assetLocalizationPackage.cpp";
          v28 = "Write";
          v29 = 146;
          v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
          v31 = 0;
          v23 = (char *)v13;
          if (*(char *)(v13 + 23) < 0)
            v23 = *(char **)v13;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"File not found. Skipping export of dependency @%s@.", v21, v23);
          continue;
        }
      }
      else if ((IsFile & 1) == 0)
      {
        goto LABEL_38;
      }
      v4 &= pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddAssetToPackage((char *)a1, v13, v13 + 24);
    }
    else
    {
      __p = "usdUtils/assetLocalizationPackage.cpp";
      v28 = "Write";
      v29 = 139;
      v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
      v31 = 0;
      if (*(char *)(v13 + 47) < 0)
        v15 = (_QWORD *)*v15;
      v18 = (char *)v13;
      if (*(char *)(v13 + 23) < 0)
        v18 = *(char **)v13;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"A file already exists at path \"%s\" in the package. Skipping export of dependency @%s@.", v16, v15, v18);
    }
  }
  sub_20BEB3F28((uint64_t)v33);
  return v4 & 1;
}

void sub_20C6844C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a24,__int16 a25,char a26,char a27)
{
  sub_20C103234(&a24);
  sub_20BEB3F28((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t Identifier;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t *FileFormat;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t RealPath;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  pxrInternal__aapl__pxrReserved__ *v23;
  uint64_t *Resolver;
  std::string::size_type v25;
  std::string::size_type v26;
  int v27;
  std::string *v28;
  uint64_t v29;
  std::string *p_s1;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  _BOOL4 v37;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t *);
  char v42;
  unint64_t v43;
  pxrInternal__aapl__pxrReserved__ *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__::UsdUsdFileFormat *v48;
  pxrInternal__aapl__pxrReserved__::TfToken *UnderlyingFormatForLayer;
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *v51;
  uint64_t *v52;
  uint64_t *v53;
  unsigned int *v54;
  unsigned int v55;
  char *TmpDir;
  uint64_t *v57;
  char *v58;
  char v59;
  void **v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  void *v71[2];
  char v72;
  uint64_t v73;
  uint64_t v74;
  std::string v75;
  std::string __s1;
  void *__p;
  char v78;
  char v79;
  pxrInternal__aapl__pxrReserved__::UsdUsdFileFormat *v80;
  uint64_t v81;
  std::string v82;

  v6 = (uint64_t)(a1 + 96);
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::GetLayerUsedForWriting((uint64_t)(a1 + 96), a2, (uint64_t *)&v80);
  if (sub_20C68602C(0))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
    if (*(char *)(Identifier + 23) >= 0)
      v11 = Identifier;
    else
      v11 = *(_QWORD *)Identifier;
    if (*(char *)(a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = *(_QWORD *)a3;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)".. adding layer @%s@ to package at path '%s'.\n", v9, v10, v11, v12);
  }
  v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v13);
  v15 = sub_20BFCF6F4(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) & 1) != 0
    || (v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80),
        v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v17)))
  {
    v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80);
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v18);
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(RealPath, (uint64_t)&__s1);
    v82 = __s1;
    memset(&__s1, 0, sizeof(__s1));
    if (v79 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)&__s1);
    v75 = __s1;
    memset(&__s1, 0, sizeof(__s1));
    if (v79 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
    }
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v82.__r_.__value_.__l.__size_;
    if (!size
      || ((*(uint64_t (**)(char *, std::string *, std::string *))(*(_QWORD *)a1 + 24))(a1, &v82, &v75) & 1) != 0)
    {
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      goto LABEL_103;
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    goto LABEL_55;
  }
  v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v21) & 1) != 0)
    goto LABEL_58;
  v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80);
  v23 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v23);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v25 = __s1.__r_.__value_.__l.__size_;
  v26 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  v27 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = v82.__r_.__value_.__l.__size_;
  if (v25 == v26)
  {
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v82;
    else
      v28 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v37 = memcmp(__s1.__r_.__value_.__l.__data_, v28, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v29 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v32 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v31 = v32;
        v34 = v28->__r_.__value_.__s.__data_[0];
        v28 = (std::string *)((char *)v28 + 1);
        v33 = v34;
        v36 = v29-- != 0;
        v37 = v31 == v33;
      }
      while (v31 == v33 && v36);
    }
    else
    {
      v37 = 1;
    }
  }
  else
  {
    v37 = 0;
  }
  if (v27 < 0)
  {
    operator delete(v82.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_53:
      if (v37)
        goto LABEL_54;
LABEL_58:
      *(_OWORD *)&v82.__r_.__value_.__r.__words[1] = 0uLL;
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82.__r_.__value_.__l.__size_;
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a3, (uint64_t)&__s1);
      memset(&v75, 0, sizeof(v75));
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__s1, (uint64_t)&v75, &v73);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      sub_20C686088((uint64_t)&v73, &__s1);
      v41 = sub_20C6860F4(&__s1);
      v43 = v42 & 1 | (unint64_t)v41;
      v44 = (pxrInternal__aapl__pxrReserved__ *)__s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_)
      {
        v45 = (unsigned int *)(__s1.__r_.__value_.__l.__size_ + 8);
        do
        {
          v46 = __ldxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
          v44 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v44 + 8))(v44);
      }
      if (v43)
      {
        if (*(_BYTE *)(sub_20BEB47BC(&v81) + 14))
          v48 = v80;
        else
          v48 = 0;
        UnderlyingFormatForLayer = pxrInternal__aapl__pxrReserved__::UsdUsdFileFormat::GetUnderlyingFormatForLayer(v48, &v75);
        if ((v75.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const std::string *)((v75.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(UnderlyingFormatForLayer);
        v51 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
        if (!v51)
          v51 = sub_20C45695C(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
        if ((*((_QWORD *)v51 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
          v52 = (uint64_t *)((*((_QWORD *)v51 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v52 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v51);
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
        v53 = sub_20BDDDFDC((uint64_t **)&v82, (const void **)v52, (uint64_t)&unk_20CAC184C, (__int128 **)&__s1);
        v44 = (pxrInternal__aapl__pxrReserved__ *)std::string::operator=((std::string *)(v53 + 7), EmptyString);
        if ((v75.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v54 = (unsigned int *)(v75.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
      }
      TmpDir = (char *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(v44);
      sub_20BDDC0E4(&v75, TmpDir);
      pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a3, &__s1);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&v75.__r_.__value_.__l.__data_, (uint64_t)&__s1, v71);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      v57 = (uint64_t *)sub_20C44DFA8((uint64_t *)&v80);
      sub_20BDDC0E4(&__s1, "");
      pxrInternal__aapl__pxrReserved__::SdfLayer::Export(v57, (const char *)v71, (char *)&__s1, (uint64_t)&v82);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      v59 = (*(uint64_t (**)(char *, void **, uint64_t))(*(_QWORD *)a1 + 24))(a1, v71, a3);
      if ((v59 & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ClearLayerUsedForWriting(v6, (unint64_t *)a2);
        pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)v71);
      }
      else
      {
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationPackage.cpp";
        __s1.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddLayerToPackage";
        __s1.__r_.__value_.__r.__words[2] = 455;
        __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage(SdfLayerRefPt"
              "r, const std::string &)";
        v78 = 0;
        v60 = v71;
        if (v72 < 0)
          v60 = (void **)v71[0];
        v61 = a1 + 344;
        if (a1[367] < 0)
          v61 = (_QWORD *)*v61;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__s1, (pxrInternal__aapl__pxrReserved__ *)"Failed to add temporary layer at '%s' to the package at path '%s'.", v58, v60, v61);
      }
      if (v72 < 0)
        operator delete(v71[0]);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v62 = v74;
      if (v74)
      {
        v63 = (unsigned int *)(v74 + 8);
        do
        {
          v64 = __ldxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      }
      sub_20BDE9D48((uint64_t)&v82, (_QWORD *)v82.__r_.__value_.__l.__size_);
      if ((v59 & 1) != 0)
        goto LABEL_103;
      goto LABEL_55;
    }
  }
  else if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v37)
    goto LABEL_58;
LABEL_54:
  v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v80);
  v39 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v38);
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v39, a3) & 1) != 0)
  {
LABEL_103:
    v40 = 1;
    goto LABEL_104;
  }
LABEL_55:
  v40 = 0;
LABEL_104:
  v66 = v81;
  if (v81)
  {
    v67 = (unsigned int *)(v81 + 8);
    do
    {
      v68 = __ldxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
  return v40;
}

void sub_20C684B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, unsigned int *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;

  if (a17 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a19)
  {
    v34 = a19 + 2;
    do
    {
      v35 = __ldxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      (*(void (**)(unsigned int *))(*(_QWORD *)a19 + 8))(a19);
  }
  sub_20BDE9D48(v32 - 96, *(_QWORD **)(v32 - 88));
  v37 = *(unsigned int **)(v32 - 104);
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddAssetToPackage(char *a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *__p;
  char v21;
  char v22;
  __int128 v23;
  uint64_t v24;

  if (sub_20C68602C(0))
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (*(char *)(a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *(_QWORD *)a3;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)".. adding file '%s' to package at path '%s'.\n", v6, v7, v8, v9);
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a3))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)v18);
    v23 = *(_OWORD *)v18;
    v24 = v19;
    v18[1] = 0;
    v19 = 0;
    v18[0] = 0;
    if (v22 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
    }
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)v18);
    *(_OWORD *)v16 = *(_OWORD *)v18;
    v17 = v19;
    v18[1] = 0;
    v19 = 0;
    v18[0] = 0;
    if (v22 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
    }
    v10 = HIBYTE(v24);
    if (v24 < 0)
      v10 = *((_QWORD *)&v23 + 1);
    v11 = !v10
       || ((*(uint64_t (**)(char *, __int128 *, void **))(*(_QWORD *)a1 + 24))(a1, &v23, v16) & 1) != 0;
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v24) < 0)
    {
      operator delete((void *)v23);
      if (v11)
        return 1;
    }
    else if (v11)
    {
      return 1;
    }
  }
  else
  {
    if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3) & 1) != 0)
      return 1;
    v18[0] = "usdUtils/assetLocalizationPackage.cpp";
    v18[1] = "_AddAssetToPackage";
    v19 = 498;
    __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddAssetToPackage(const std::string"
          " &, const std::string &)";
    v21 = 0;
    if (*(char *)(a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    v14 = a1 + 344;
    if (a1[367] < 0)
      v14 = (_QWORD *)*v14;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v18, (pxrInternal__aapl__pxrReserved__ *)"Failed to add file '%s' to the package at path '%s'.", v12, v13, v14);
  }
  return 0;
}

void sub_20C684F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
    operator delete(*(void **)(v16 - 64));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessDependency(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v17;
  uint64_t v18;

  if (*((_QWORD *)a1 + 5))
  {
    sub_20C1034E8((uint64_t *)&v14, a2);
    v8 = *((_QWORD *)a1 + 5);
    if (!v8)
      sub_20BE9E974();
    (*(void (**)(void **__return_ptr, uint64_t, void ***, uint64_t))(*(_QWORD *)v8 + 48))(__p, v8, &v14, a3);
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    v13 = v17;
    if ((v17 & 0x80u) != 0)
      v13 = (unint64_t)__p[1];
    if (v13)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependenciesToPackage(a1, a2, (uint64_t)__p, (uint64_t)a4);
    }
    else
    {
      a4[1] = 0u;
      a4[2] = 0u;
      *a4 = 0u;
    }
    v14 = (void **)&v18;
    sub_20BDE5038(&v14);
    if ((char)v17 < 0)
      operator delete(__p[0]);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependenciesToPackage(a1, a2, a3, (uint64_t)a4);
  }
}

void sub_20C685078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C67FF84((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependenciesToPackage(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t *FileFormat;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  const void **Identifier;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string v18;
  void *v19[2];
  char v20;
  std::string v21;
  std::string __p;
  std::string v23;
  char v24;

  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
    {
      sub_20BDDBFAC((_BYTE *)a4, *(void **)a3, 0);
      goto LABEL_10;
    }
  }
  else if (!*(_BYTE *)(a3 + 23))
  {
    *(_OWORD *)a4 = *(_OWORD *)a3;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
LABEL_10:
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    sub_20BE78B98((char *)(a4 + 24), *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
    return;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v8);
  v10 = sub_20BFCF6F4(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) & 1) != 0
    || (v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2),
        RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v11),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(RealPath)))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a4, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a3;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
    }
    goto LABEL_10;
  }
  v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessAssetPath(a1, a2, a3, &v24, &v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(&__p, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    __p = v23;
  if (v24)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    Identifier = (const void **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
    v15 = sub_20BDEEBA4((uint64_t)a1 + 416, Identifier);
    if ((pxrInternal__aapl__pxrReserved__ *)((char *)a1 + 424) != (pxrInternal__aapl__pxrReserved__ *)v15)
    {
      pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)(v15 + 56), &v18);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&v18.__r_.__value_.__l.__data_, a3, v19);
      pxrInternal__aapl__pxrReserved__::TfNormPath(&v21, v19, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v21;
      *((_BYTE *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (v20 < 0)
        operator delete(v19[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v21);
  v16 = *(std::string **)(a3 + 24);
  v17 = *(std::string **)(a3 + 32);
  if (v16 == v17)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependencyToPackage((uint64_t)a1, a2, (std::string *)a3, (const void **)&v21.__r_.__value_.__l.__data_);
  }
  else
  {
    do
      pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependencyToPackage((uint64_t)a1, a2, v16++, (const void **)&v21.__r_.__value_.__l.__data_);
    while (v16 != v17);
  }
  sub_20C682BA8((_BYTE *)a4, (__int128 *)&v23, (__int128 **)(a3 + 24));
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_20C68534C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessAssetPath(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, std::string *a5@<X8>)
{
  std::string *v8;
  uint64_t *Resolver;
  int IsContextDependentPath;
  std::string::size_type v12;
  std::string *v13;
  uint64_t *RegisteredURISchemes;
  const void **v15;
  const void **v16;
  const void **v17;
  BOOL v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  std::string::size_type size;
  size_t v22;
  unsigned __int8 v23;
  unsigned __int8 *p_s1;
  std::string *p_dst;
  std::string::size_type v26;
  int v27;
  void *v28;
  const char *v29;
  std::string::size_type v30;
  size_t v31;
  _BOOL4 v32;
  size_t v33;
  std::string *v34;
  std::string::size_type v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  std::string::size_type v39;
  const std::string *p_p;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  uint64_t RealPath;
  uint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string *v52;
  uint64_t v53;
  std::string *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  BOOL v60;
  _BOOL4 v61;
  std::string *v62;
  uint64_t v63;
  size_t v64;
  size_t v65;
  unsigned __int8 *v66;
  std::string *v67;
  uint64_t v68;
  char v69;
  std::string *v70;
  void **v71;
  std::string::value_type *v72;
  void **p_size;
  unint64_t v74;
  std::string *v75;
  std::string *v76;
  std::string v77;
  _QWORD v78[2];
  char v79;
  std::string v80;
  std::string v81;
  std::string __p;
  void *__s1;
  size_t __n;
  unsigned __int8 v85;
  std::string __dst;

  v8 = (std::string *)a1;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  IsContextDependentPath = pxrInternal__aapl__pxrReserved__::ArResolver::IsContextDependentPath((uint64_t)Resolver);
  v76 = a5;
  if ((IsContextDependentPath & 1) != 0)
    goto LABEL_64;
  v12 = std::string::find((const std::string *)a3, 58, 0);
  if (v12 != -1)
  {
    v13 = std::string::basic_string(&__dst, (const std::string *)a3, 0, v12, (std::allocator<char> *)&__s1);
    RegisteredURISchemes = pxrInternal__aapl__pxrReserved__::ArGetRegisteredURISchemes((pxrInternal__aapl__pxrReserved__ *)v13);
    v15 = (const void **)*RegisteredURISchemes;
    v16 = (const void **)RegisteredURISchemes[1];
    LOBYTE(__s1) = 0;
    v17 = sub_20C20F1B8(v15, v16, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&__p);
    v18 = v16 != v17 && !sub_20BDDDF74((uint64_t)&__p, (const void **)&__dst.__r_.__value_.__l.__data_, v17);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v18)
        goto LABEL_64;
    }
    else if (v18)
    {
      goto LABEL_64;
    }
  }
  v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v19);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v22 = v85;
  v23 = v85;
  if ((v85 & 0x80u) != 0)
    v22 = __n;
  if (size == v22)
  {
    if ((v85 & 0x80u) == 0)
      p_s1 = (unsigned __int8 *)&__s1;
    else
      p_s1 = (unsigned __int8 *)__s1;
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__dst.__r_.__value_.__l.__data_, p_s1, __dst.__r_.__value_.__l.__size_))
        goto LABEL_28;
    }
    else if (*((_BYTE *)&__dst.__r_.__value_.__s + 23))
    {
      p_dst = &__dst;
      while (p_dst->__r_.__value_.__s.__data_[0] == *p_s1)
      {
        p_dst = (std::string *)((char *)p_dst + 1);
        ++p_s1;
        if (!--v20)
          goto LABEL_60;
      }
      goto LABEL_28;
    }
LABEL_60:
    if ((v23 & 0x80) != 0)
      operator delete(__s1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_64:
    if (a4)
      *a4 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
      if (!IsContextDependentPath)
        goto LABEL_88;
    }
    else
    {
      __dst = *(std::string *)a3;
      if (!IsContextDependentPath)
        goto LABEL_88;
    }
    sub_20C1034E8((uint64_t *)&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&__p, a3, (uint64_t)&__s1);
    v35 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v36 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
      do
      {
        v37 = __ldxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v35 + 8))(v35);
    }
    pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(&__p, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
    }
    else
    {
      __p = v81;
    }
    v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = __p.__r_.__value_.__l.__size_;
    if (v39)
      p_p = &__p;
    else
      p_p = (const std::string *)&__s1;
    std::string::operator=(&__dst, p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v85 < 0)
      operator delete(__s1);
LABEL_88:
    v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v41);
    pxrInternal__aapl__pxrReserved__::TfNormPath(&__s1, RealPath, 0);
    pxrInternal__aapl__pxrReserved__::TfNormPath(&__p, &__dst, 0);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = __p;
    pxrInternal__aapl__pxrReserved__::TfNormPath(&__p, &v8[2], 0);
    pxrInternal__aapl__pxrReserved__::TfNormPath(&v81, &v8[3], 0);
    v43 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v44 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v45 = __dst.__r_.__value_.__l.__size_;
    v46 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v47 = __p.__r_.__value_.__l.__size_;
    if (v45 == v47)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &__p;
      else
        v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__dst.__r_.__value_.__l.__data_, v48, __dst.__r_.__value_.__l.__size_))
          goto LABEL_122;
      }
      else
      {
        if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
          goto LABEL_122;
        v49 = &__dst;
        v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        while (v49->__r_.__value_.__s.__data_[0] == v48->__r_.__value_.__s.__data_[0])
        {
          v49 = (std::string *)((char *)v49 + 1);
          v48 = (std::string *)((char *)v48 + 1);
          if (!--v50)
            goto LABEL_122;
        }
      }
    }
    v51 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = v81.__r_.__value_.__l.__size_;
    if (v45 != v51)
    {
      v61 = 0;
      goto LABEL_125;
    }
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v81;
    else
      v52 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if ((v43 & 0x80) != 0)
    {
      v61 = memcmp(__dst.__r_.__value_.__l.__data_, v52, v44) == 0;
      goto LABEL_125;
    }
    if ((_DWORD)v43)
    {
      v53 = v43 - 1;
      v54 = &__dst;
      do
      {
        v56 = v54->__r_.__value_.__s.__data_[0];
        v54 = (std::string *)((char *)v54 + 1);
        v55 = v56;
        v58 = v52->__r_.__value_.__s.__data_[0];
        v52 = (std::string *)((char *)v52 + 1);
        v57 = v58;
        v60 = v53-- != 0;
        v61 = v55 == v57;
      }
      while (v55 == v57 && v60);
LABEL_125:
      v62 = v8;
      v63 = v85;
      v64 = __n;
      if ((v85 & 0x80u) == 0)
        v65 = v85;
      else
        v65 = __n;
      if (v45 == v65)
      {
        if ((v85 & 0x80u) == 0)
          v66 = (unsigned __int8 *)&__s1;
        else
          v66 = (unsigned __int8 *)__s1;
        if ((v43 & 0x80) == 0)
        {
          if ((_DWORD)v43)
          {
            v67 = &__dst;
            v68 = v43;
            while (v67->__r_.__value_.__s.__data_[0] == *v66)
            {
              v67 = (std::string *)((char *)v67 + 1);
              ++v66;
              if (!--v68)
                goto LABEL_151;
            }
            goto LABEL_139;
          }
LABEL_151:
          if (!v61)
            goto LABEL_169;
          goto LABEL_157;
        }
        if (!memcmp(__dst.__r_.__value_.__l.__data_, v66, v44))
          goto LABEL_151;
      }
LABEL_139:
      v69 = !v61;
      if (v65 != v47)
        v69 = 1;
      if ((v69 & 1) != 0)
        goto LABEL_154;
      if (v46 >= 0)
        v70 = &__p;
      else
        v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v63 & 0x80) != 0)
      {
        if (memcmp(__s1, v70, v64))
          goto LABEL_154;
      }
      else if ((_DWORD)v63)
      {
        v71 = &__s1;
        while (*(unsigned __int8 *)v71 == v70->__r_.__value_.__s.__data_[0])
        {
          v71 = (void **)((char *)v71 + 1);
          v70 = (std::string *)((char *)v70 + 1);
          if (!--v63)
            goto LABEL_157;
        }
LABEL_154:
        if ((v43 & 0x80) != 0)
        {
          if (v44 > 1)
          {
            v72 = (std::string::value_type *)(__dst.__r_.__value_.__r.__words[0] + 1);
LABEL_162:
            if (*v72 == 58)
              std::string::erase(&__dst, 0, 2uLL);
          }
        }
        else if (v43 > 1)
        {
          v72 = &__dst.__r_.__value_.__s.__data_[1];
          goto LABEL_162;
        }
        pxrInternal__aapl__pxrReserved__::TfStringTrimLeft("/", &__dst, &v80);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst = v80;
        pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap(&v62[19].__r_.__value_.__l.__size_, (uint64_t)&__dst, v76);
        goto LABEL_170;
      }
LABEL_157:
      p_size = (void **)&v62[15].__r_.__value_.__l.__size_;
      if (v62[16].__r_.__value_.__s.__data_[7] < 0)
      {
        v74 = v62[15].__r_.__value_.__r.__words[2];
        if (v74)
        {
          sub_20BDDBFAC(v76, *p_size, v74);
          goto LABEL_170;
        }
      }
      else if (v62[16].__r_.__value_.__s.__data_[7])
      {
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)p_size;
        v76->__r_.__value_.__r.__words[2] = v62[16].__r_.__value_.__r.__words[0];
        goto LABEL_170;
      }
LABEL_169:
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__dst, v76);
LABEL_170:
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      goto LABEL_172;
    }
LABEL_122:
    v61 = 1;
    goto LABEL_125;
  }
LABEL_28:
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = __p.__r_.__value_.__l.__size_;
  if (!v26)
    goto LABEL_51;
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v80);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v81, &v80, 0);
  pxrInternal__aapl__pxrReserved__::TfGetPathName(v8 + 2, &v77);
  v75 = v8;
  pxrInternal__aapl__pxrReserved__::TfNormPath(v78, &v77, 0);
  v27 = v79;
  v28 = (void *)v78[0];
  if (v79 >= 0)
    v29 = (const char *)v78;
  else
    v29 = (const char *)v78[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  else
    v30 = v81.__r_.__value_.__l.__size_;
  v31 = strlen(v29);
  if (v30 >= v31)
  {
    v33 = v31;
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v81;
    else
      v34 = (std::string *)v81.__r_.__value_.__r.__words[0];
    v32 = strncmp((const char *)v34, v29, v33) == 0;
  }
  else
  {
    v32 = 0;
  }
  v8 = v75;
  a5 = v76;
  if (v27 < 0)
    operator delete(v28);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v80.__r_.__value_.__l.__data_);
    if (v32)
      goto LABEL_51;
    goto LABEL_57;
  }
  if (!v32)
  {
LABEL_57:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v23 = v85;
    goto LABEL_60;
  }
LABEL_51:
  if (a4)
    *a4 = 1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(a5, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
LABEL_172:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v85 < 0)
    operator delete(__s1);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20C685BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a37 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v43 - 89) < 0)
    operator delete(*(void **)(v43 - 112));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependencyToPackage(uint64_t a1, uint64_t *a2, std::string *a3, const void **a4)
{
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  void *__p[2];
  char v13;
  void *v14;
  char v15;
  std::string v16;
  std::string __str;
  __int128 v18;
  char v19;

  sub_20C1034E8((uint64_t *)__p, a2);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)__p, (uint64_t)a3, (uint64_t)&v18);
  v7 = __p[1];
  if (__p[1])
  {
    v8 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(a3, &v16);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a4, (uint64_t)&v16, __p);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&__str, __p, 0);
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile((uint64_t)&v18))
  {
    __p[0] = &v18;
    v11 = sub_20BDDDFDC((uint64_t **)(a1 + 416), (const void **)&v18, (uint64_t)&unk_20CAC184C, (__int128 **)__p);
    std::string::operator=((std::string *)(v11 + 7), &__str);
  }
  else
  {
    sub_20C389614((char *)__p, &v18, (__int128 *)&__str);
    sub_20C685EC0((uint64_t *)(a1 + 440), (__int128 *)__p);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete((void *)v18);
}

void sub_20C685E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  sub_20BE930F8((uint64_t)&a10);
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20C685EC0(uint64_t *a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  void *v20[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v20[4] = v4;
    if (v14)
      v15 = (char *)sub_20BE6D0B4((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20[2] = v16 + 48;
    sub_20BE94AD4(a1, v20);
    v10 = a1[1];
    sub_20BE94C80(v20);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

void sub_20C686018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE94C80((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C68602C(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C68659C();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C68659C();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "USDUTILS_CREATE_PACKAGE");
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

_QWORD *sub_20C686088@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  const void *v7;
  BOOL v8;
  void *v9;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t *)(a1 + 8);
  if (!v5
    || ((v6 = *(unsigned __int8 *)(sub_20BEB47BC(v4) + 14), v7 = *(const void **)a1, v6) ? (v8 = v7 == 0) : (v8 = 1),
        v8))
  {
    v9 = 0;
  }
  else
  {
  }
  return sub_20C686614(a2, (uint64_t)v9);
}

uint64_t (*sub_20C6860F4(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20C6866CC;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_RemapAssetPath(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, std::string *a4@<X8>)
{
  if (a3)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(a4, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap((_QWORD *)(a1 + 464), a2, a4);
  }
}

_QWORD *sub_20C686180(_QWORD *__dst, __int128 *a2, char *__s)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20BDDC0E4(__dst + 3, __s);
  return __dst;
}

void sub_20C6861DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6861F8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      sub_20C086844(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C68625C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB3F28(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C686270(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20BEF33B4(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20C6864F0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_20BEF3BD8((uint64_t)v25, 0);
  return i;
}

void sub_20C6864D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEF3BD8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C6864F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *((_QWORD *)v8 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C686584(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEF3BD8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68659C()
{
  unsigned __int8 v0;
  _DWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473D220);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473D220))
  {
    v2 = operator new(4uLL);
    *v2 = 0;
    qword_25473D218 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473D220);
  }
  return qword_25473D218;
}

void sub_20C6865FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473D220);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C686614(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C6866B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B408(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6866CC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCopyLayerMetadata(uint64_t *a1, uint64_t *a2, int a3, char a4)
{
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t (*v10)(uint64_t *);
  char v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  const pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  unsigned int *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  BOOL v23;
  unsigned int v24;
  const pxrInternal__aapl__pxrReserved__::TfToken *j;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v27;
  const pxrInternal__aapl__pxrReserved__::TfToken *v28;
  const pxrInternal__aapl__pxrReserved__::TfToken *v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  const pxrInternal__aapl__pxrReserved__::TfToken *v31;
  const pxrInternal__aapl__pxrReserved__::TfToken *v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  const pxrInternal__aapl__pxrReserved__::TfToken *v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v35;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  unint64_t v39;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v40;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  void *v46;
  void *v47;
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::TfToken *i;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  unsigned int *v54;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v55;
  BOOL v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unint64_t v60;
  const pxrInternal__aapl__pxrReserved__::TfToken *v61;
  const pxrInternal__aapl__pxrReserved__::TfToken *v62;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v63;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v64;
  char *v65;
  char *v66;
  std::string v67;
  void *__p;
  char v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20BFD2F78(a1);
  if (v9 & 1 | (unint64_t)v8 && (v10 = sub_20BFD2F78(a2), v11 & 1 | (unint64_t)v10)
    || (v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/authoring.cpp",
        v67.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCopyLayerMetadata",
        v67.__r_.__value_.__r.__words[2] = 48,
        __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCopyLayerMetadata(const SdfLayerHandle &, const SdfLayerHan"
              "dle &, BOOL, BOOL)",
        v69 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v67, "source && destination", 0),
        (_DWORD)result))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v12, &v64);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v13, &v63);
    v14 = sub_20C0B0CA4(&v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::ListInfoKeys(v14, (uint64_t)&v61);
    v15 = v62;
    if (!a3 || (v16 = v61, v61 == v62))
    {
LABEL_21:
      v16 = v15;
    }
    else
    {
      while (1)
      {
        v17 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 & 7) != 0)
        {
          v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            v17 &= 0xFFFFFFFFFFFFFFF8;
        }
        v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v20)
          v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v21 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v20 + 45) & 0xFFFFFFFFFFFFFFF8))
        {
          v23 = 1;
        }
        else
        {
          v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v22)
            v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          v23 = v21 == (unsigned int *)(*((_QWORD *)v22 + 46) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((v17 & 7) != 0)
        {
          do
            v24 = __ldxr(v21);
          while (__stlxr(v24 - 2, v21));
        }
        if (v23)
          break;
        v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
        if (v16 == v15)
          goto LABEL_21;
      }
      if (v16 != v15)
      {
        for (i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
              i != v15;
              i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
        {
          v50 = *(_QWORD *)i;
          if ((*(_QWORD *)i & 7) != 0)
          {
            v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 2, v51));
            if ((v52 & 1) == 0)
              v50 &= 0xFFFFFFFFFFFFFFF8;
          }
          v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v53)
            v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          v54 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          if ((v50 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v53 + 45) & 0xFFFFFFFFFFFFFFF8))
          {
            v56 = 1;
          }
          else
          {
            v55 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v55)
              v55 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v56 = v54 == (unsigned int *)(*((_QWORD *)v55 + 46) & 0xFFFFFFFFFFFFFFF8);
          }
          if ((v50 & 7) != 0)
          {
            do
              v57 = __ldxr(v54);
            while (__stlxr(v57 - 2, v54));
          }
          if (!v56)
          {
            if (i != v16)
            {
              if ((*(_QWORD *)v16 & 7) != 0)
              {
                v58 = (unsigned int *)(*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8);
                do
                  v59 = __ldxr(v58);
                while (__stlxr(v59 - 2, v58));
              }
              *(_QWORD *)v16 = *(_QWORD *)i;
              *(_QWORD *)i = 0;
            }
            v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
          }
        }
      }
    }
    for (j = v61; j != v16; j = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)j + 8))
    {
      v26 = sub_20C0B0CA4(&v63);
      v27 = sub_20C0B0CA4(&v64);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v27, j, &v67);
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v26, j, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v67);
      sub_20BF4C2D8((uint64_t)&v67);
    }
    if ((a4 & 1) != 0)
    {
      v28 = v61;
      v29 = v62;
      v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v30)
        v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (v28 != v29)
      {
        while ((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v30 + 3) & 0xFFFFFFFFFFFFFFF8))
        {
          v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
          if (v28 == v29)
          {
            v28 = v29;
            break;
          }
        }
      }
      v32 = v61;
      v31 = v62;
      v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v33)
        v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (v32 == v31)
      {
LABEL_37:
        v32 = v31;
      }
      else
      {
        while ((*(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v33 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
          v32 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v32 + 8);
          if (v32 == v31)
            goto LABEL_37;
        }
      }
      v34 = v62;
      if (v28 == v31 || v32 == v62)
      {
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v67);
        v60 = 0;
        pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfigFallbacks(&v67, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v60, v35);
        if (v28 == v31)
        {
          size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v67.__r_.__value_.__l.__size_;
          if (size)
          {
            v37 = sub_20C0B0CA4(&v63);
            v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v38)
              v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v66 = (char *)&off_24C5255B8;
            sub_20C00A0DC(&v65, (__int128 *)&v67);
            pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v37, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v38 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v65);
            sub_20BF4C2D8((uint64_t)&v65);
          }
        }
        v39 = v60;
        if (v32 == v34 && v60)
        {
          v40 = sub_20C0B0CA4(&v63);
          v41 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v41)
            v41 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          v65 = (char *)v60;
          v66 = (char *)&off_24C5207B8 + 1;
          if ((v60 & 7) != 0)
          {
            v42 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 2, v42));
            if ((v43 & 1) == 0)
              v65 = (char *)v42;
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v40, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v41 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v65);
          sub_20BF4C2D8((uint64_t)&v65);
          v39 = v60;
        }
        if ((v39 & 7) != 0)
        {
          v44 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v45 = __ldxr(v44);
          while (__stlxr(v45 - 2, v44));
        }
        if (v70 < 0)
          operator delete(__p);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
      }
    }
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
    sub_20BEEB2B8((void ***)&v67);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v46, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v63);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v47, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v64);
    return 1;
  }
  return result;
}

void sub_20C686C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  void *v20;
  void *v21;

  a19 = (void **)&a11;
  sub_20BEEB2B8(&a19);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(unsigned int **a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, _QWORD *a7, double a8)
{
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  double v21;
  unint64_t v22;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  BOOL v29;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v30;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  uint64_t IsDefined;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  int8x16_t *UsdPrimAllPrimsPredicate;
  uint64_t v37;
  int8x16_t v38;
  uint64_t *v39;
  BOOL v40;
  unsigned int *v41;
  unsigned int v42;
  _DWORD *v43;
  _DWORD *v44;
  const char *Text;
  pxrInternal__aapl__pxrReserved__ *v46;
  _DWORD *i;
  _DWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *j;
  _DWORD *v54;
  int8x16_t *v55;
  uint64_t v56;
  int8x16_t v57;
  uint64_t *v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  int v76;
  char v77[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t *v86;
  _QWORD *v87[2];
  void **v88;
  _DWORD *v89;
  _DWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int8x16_t v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  void **v99;
  const char *v100;
  uint64_t v101;
  const char *v102;
  char v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int v107[4];

  v16 = *(_QWORD *)a3;
  v17 = *(_DWORD **)(a3 + 8);
  if (v17 != *(_DWORD **)a3)
  {
    do
    {
      v17 -= 2;
      sub_20BFD6F64(a3 + 16, v17);
    }
    while (v17 != (_DWORD *)v16);
  }
  *(_QWORD *)(a3 + 8) = v16;
  v18 = *(_QWORD *)a4;
  v19 = *(_DWORD **)(a4 + 8);
  if (v19 != *(_DWORD **)a4)
  {
    do
    {
      v19 -= 2;
      sub_20BFD6F64(a4 + 16, v19);
    }
    while (v19 != (_DWORD *)v18);
  }
  *(_QWORD *)(a4 + 8) = v18;
  if (a8 <= 0.0 || a8 > 1.0)
  {
    v99 = (void **)"usdUtils/authoring.cpp";
    v100 = "UsdUtilsComputeCollectionIncludesAndExcludes";
    v101 = 260;
    v102 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(const SdfPathSet &, const"
           " UsdStageWeakPtr &, SdfPathVector *, SdfPathVector *, double, const unsigned int, const unsigned int, const U"
           "sdUtilsPathHashSet &)";
    v103 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v99, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid minInclusionRatio value: %f. Clamping value to range (0, 1).", a8);
    if (a8 <= 1.0)
      v21 = a8;
    else
      v21 = 1.0;
    if (a8 >= 0.0)
      a8 = v21;
    else
      a8 = 0.0;
  }
  v22 = (unint64_t)a1[2];
  if (!v22)
    return 1;
  if (v22 < a6)
  {
    sub_20C687AB0((uint64_t *)a3, *(int **)(a3 + 8), *a1, a1 + 1);
    return 1;
  }
  v24 = *a1;
  sub_20BFD6E54(&v82, *a1 + 7);
  sub_20BFD6EA4(&v83, v24 + 8);
  v26 = (unsigned int *)(a1 + 1);
  v25 = *a1;
  if (*a1 != (unsigned int *)(a1 + 1))
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v82, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 7), (int *)&v99);
      sub_20BFD3EBC(&v82, (int *)&v99);
      sub_20BFD3F10(&v83, (int *)&v99 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
      sub_20BFD265C(&v99);
      v27 = (unsigned int *)*((_QWORD *)v25 + 1);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(unsigned int **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (unsigned int *)*((_QWORD *)v25 + 2);
          v29 = *(_QWORD *)v28 == (_QWORD)v25;
          v25 = v28;
        }
        while (!v29);
      }
      v25 = v28;
    }
    while (v28 != v26);
  }
  v30 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v82, (uint64_t)v77);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v77, v31);
  v73 = IsDefined;
  if ((IsDefined & 1) == 0)
  {
    v99 = (void **)"usdUtils/authoring.cpp";
    v100 = "UsdUtilsComputeCollectionIncludesAndExcludes";
    v101 = 311;
    v102 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(const SdfPathSet &, const"
           " UsdStageWeakPtr &, SdfPathVector *, SdfPathVector *, double, const unsigned int, const unsigned int, const U"
           "sdUtilsPathHashSet &)";
    v103 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v82);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v99, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not get the prim at common-prefix path <%s>.", Text);
    goto LABEL_99;
  }
  v74 = 0u;
  v75 = 0u;
  v76 = 1065353216;
  v33 = *a1;
  if (*a1 != v26)
  {
    do
    {
      IsDefined = (uint64_t)sub_20C2215D8((uint64_t)&v74, v33 + 7, v33 + 7);
      v34 = (unsigned int *)*((_QWORD *)v33 + 1);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = *(unsigned int **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (unsigned int *)*((_QWORD *)v33 + 2);
          v29 = *(_QWORD *)v35 == (_QWORD)v33;
          v33 = v35;
        }
        while (!v29);
      }
      v33 = v35;
    }
    while (v35 != v26);
  }
  v105 = 0;
  v106 = 0;
  v104 = (uint64_t *)&v105;
  UsdPrimAllPrimsPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate((pxrInternal__aapl__pxrReserved__ *)IsDefined);
  v37 = UsdPrimAllPrimsPredicate[1].i64[0];
  v38.i64[0] = -8193;
  v38.i64[0] = vandq_s8(*UsdPrimAllPrimsPredicate, v38).u64[0];
  v38.i64[1] = vorrq_s8(*UsdPrimAllPrimsPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v94 = v38;
  v95 = v37;
  v39 = (uint64_t *)sub_20C37F5FC((uint64_t)&v99, (uint64_t)v77, &v94);
  v72 = a5;
  sub_20C37ECB8(v39, (uint64_t)&v94);
  while (1)
  {
    *(_QWORD *)&v91 = v100;
    *((_QWORD *)&v91 + 1) = &v99;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v92);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v92 + 1);
    LODWORD(v93) = 0;
    WORD2(v93) = 0;
    if (*(_OWORD *)&v94 == v91)
    {
      v40 = 1;
      if (v95 == v92 && !v96 && !v97)
        v40 = v98 != 0;
    }
    else
    {
      v40 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
    sub_20BFD265C(&v92);
    if (!v40)
      break;
    sub_20C37EEF4((uint64_t)&v94, (uint64_t)&v91);
    sub_20C348EEC((uint64_t)&v91, (int *)&v86);
    if ((v93 & 7) != 0)
    {
      v41 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
    sub_20BFD265C(&v92);
    if (*((_QWORD *)&v91 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v91 + 1));
    if (!sub_20C0E70D0(a7, (unsigned int *)&v86))
    {
      if (sub_20C0E70D0(&v74, (unsigned int *)&v86))
      {
        sub_20BFD6E54(&v91, &v86);
        sub_20BFD6EA4((_DWORD *)&v91 + 1, (_DWORD *)&v86 + 1);
        while (1)
        {
          sub_20C348EEC((uint64_t)v77, (int *)v107);
          v43 = (_DWORD *)v91;
          v44 = *(_DWORD **)v107;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107[1]);
          sub_20BFD265C(v107);
          if (v43 == v44)
            break;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v91, v107);
          sub_20BFD3EBC((int *)&v91, (int *)v107);
          sub_20BFD3F10((int *)&v91 + 1, (int *)&v107[1]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107[1]);
          sub_20BFD265C(v107);
          sub_20C137B08(&v104, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v94);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v91 + 1);
        sub_20BFD265C(&v91);
      }
      else
      {
        sub_20C0A7BE0(&v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v86, &v86);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_20BFD265C(&v86);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v94);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
  sub_20BFD265C(&v95);
  sub_20C688244(&v89, v104, &v105);
  pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths((uint64_t)&v89);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
  sub_20BFD265C(&v101);
  sub_20BFD7C28((uint64_t)&v104, v105);
  sub_20C348EEC((uint64_t)v77, (int *)&v99);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, &v88);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
  v46 = (pxrInternal__aapl__pxrReserved__ *)sub_20BFD265C(&v99);
  v105 = 0;
  v106 = 0;
  v104 = (uint64_t *)&v105;
  v48 = v89;
  for (i = v90; v48 != i; v48 += 2)
  {
    sub_20BFD6E54(&v99, v48);
    sub_20BFD6EA4((_DWORD *)&v99 + 1, v48 + 1);
    while (v99 != v88)
    {
      v94.i64[0] = (uint64_t)&v99;
      v49 = (uint64_t *)sub_20C33F330(&v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, (uint64_t)&unk_20CAC184C, &v94);
      v50 = v49;
      v51 = v49[6];
      if (v51 >= v49[7])
      {
        v52 = sub_20BFD7890(v49 + 5, v48);
      }
      else
      {
        sub_20BFD6E54((_DWORD *)v49[6], v48);
        sub_20BFD6EA4((_DWORD *)(v51 + 4), v48 + 1);
        v52 = v51 + 8;
      }
      v50[6] = v52;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, &v94);
      sub_20BFD3EBC((int *)&v99, v94.i32);
      sub_20BFD3F10((int *)&v99 + 1, &v94.i32[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v94.i32[1]);
      sub_20BFD265C(&v94);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
    v46 = (pxrInternal__aapl__pxrReserved__ *)sub_20BFD265C(&v99);
  }
  v87[0] = 0;
  v87[1] = 0;
  v86 = (uint64_t *)v87;
  for (j = (uint64_t *)v75; j; j = (uint64_t *)*j)
  {
    sub_20BFD6E54(&v99, (_DWORD *)j + 4);
    sub_20BFD6EA4((_DWORD *)&v99 + 1, (_DWORD *)j + 5);
    while (v99 != v88)
    {
      v94.i64[0] = (uint64_t)&v99;
      v54 = sub_20C688410(&v86, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, (uint64_t)&unk_20CAC184C, &v94);
      ++*((_QWORD *)v54 + 5);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, &v94);
      sub_20BFD3EBC((int *)&v99, v94.i32);
      sub_20BFD3F10((int *)&v99 + 1, &v94.i32[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v94.i32[1]);
      sub_20BFD265C(&v94);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
    v46 = (pxrInternal__aapl__pxrReserved__ *)sub_20BFD265C(&v99);
  }
  v55 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v46);
  v56 = v55[1].i64[0];
  v57.i64[0] = -8193;
  v57.i64[0] = vandq_s8(*v55, v57).u64[0];
  v57.i64[1] = vorrq_s8(*v55, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v94 = v57;
  v95 = v56;
  v58 = (uint64_t *)sub_20C37F5FC((uint64_t)&v99, (uint64_t)v77, &v94);
  sub_20C37ECB8(v58, (uint64_t)&v94);
  while (1)
  {
    *(_QWORD *)&v91 = v100;
    *((_QWORD *)&v91 + 1) = &v99;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v92);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v92 + 1);
    LODWORD(v93) = 0;
    WORD2(v93) = 0;
    if (*(_OWORD *)&v94 == v91)
    {
      v59 = 1;
      if (v95 == v92 && !v96 && !v97)
        v59 = v98 != 0;
    }
    else
    {
      v59 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
    sub_20BFD265C(&v92);
    if (!v59)
      break;
    sub_20C37ED84((uint64_t)&v94, (uint64_t)&v91);
    sub_20C348EEC((uint64_t)&v91, (int *)v107);
    v60 = sub_20C0E70D0(a7, v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107[1]);
    sub_20BFD265C(v107);
    if (v60)
      goto LABEL_92;
    sub_20C348EEC((uint64_t)&v91, (int *)v107);
    v61 = sub_20C33FFFC((uint64_t)&v86, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107[1]);
    sub_20BFD265C(v107);
    if (v87 == v61)
      goto LABEL_91;
    v62 = v61[5];
    if (!v62)
      goto LABEL_91;
    sub_20C348EEC((uint64_t)&v91, (int *)v107);
    v63 = sub_20C33FFFC((uint64_t)&v104, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107[1]);
    sub_20BFD265C(v107);
    if (&v105 == v63)
      v64 = 0;
    else
      v64 = (uint64_t)(v63[6] - v63[5]) >> 3;
    if (v64 <= v72 && (double)v62 / (double)(v64 + v62) >= a8)
    {
      sub_20C348EEC((uint64_t)&v91, (int *)v107);
      v65 = *(_QWORD *)(a3 + 8);
      if (v65 >= *(_QWORD *)(a3 + 16))
      {
        v66 = sub_20C12C530((uint64_t *)a3, v107);
      }
      else
      {
        sub_20BFD38A4(*(_DWORD **)(a3 + 8), v107);
        sub_20BFD38DC((_DWORD *)(v65 + 4), &v107[1]);
        v66 = v65 + 8;
      }
      *(_QWORD *)(a3 + 8) = v66;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107[1]);
      sub_20BFD265C(v107);
      if (v64)
      {
        sub_20C348EEC((uint64_t)&v91, &v84);
        *(_QWORD *)v107 = &v84;
        v67 = sub_20C688514(&v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v84, (uint64_t)&unk_20CAC184C, (_DWORD **)v107);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85);
        sub_20BFD265C(&v84);
        sub_20C031044((uint64_t *)a4, *(int **)(a4 + 8), *((_DWORD **)v67 + 5), *((_DWORD **)v67 + 6), (uint64_t)(*((_QWORD *)v67 + 6) - *((_QWORD *)v67 + 5)) >> 3);
      }
LABEL_91:
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v94);
    }
LABEL_92:
    if ((v93 & 7) != 0)
    {
      v68 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
    sub_20BFD265C(&v92);
    if (*((_QWORD *)&v91 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v91 + 1));
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v94);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
  sub_20BFD265C(&v95);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
  sub_20BFD265C(&v101);
  sub_20C6885D8((uint64_t)&v86, v87[0]);
  sub_20C450D58((uint64_t)&v104, v105);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v88 + 1);
  sub_20BFD265C(&v88);
  v99 = (void **)&v89;
  sub_20BFD6F90(&v99);
  sub_20C220E58((uint64_t)&v74);
LABEL_99:
  if ((v81 & 7) != 0)
  {
    v70 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stlxr(v71 - 2, v70));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
  sub_20BFD265C(&v79);
  if (v78)
    sub_20C35C614(v78);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83);
  sub_20BFD265C(&v82);
  return v73;
}

void sub_20C6878A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,int a33,int a34,char a35)
{
  uint64_t v35;

  sub_20C37EDFC(v35 - 200);
  sub_20C6885D8((uint64_t)&a30, a31);
  sub_20C450D58(v35 - 144, *(_QWORD **)(v35 - 136));
  sub_20BFD1A18(&a33);
  *(_QWORD *)(v35 - 200) = &a35;
  sub_20BFD6F90((void ***)(v35 - 200));
  sub_20C220E58((uint64_t)&a19);
  sub_20C35C2E0((uint64_t)&a24);
  sub_20BFD1A18(&a28);
  _Unwind_Resume(a1);
}

int *sub_20C687AB0(uint64_t *a1, int *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_20C688620(a1, a2, a3, a4, v4);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsAuthorCollection(pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X2>, uint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;

  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply(this, a1, a5);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(a5, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v17);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v17, a3);
  if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(a5, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12, (pxrInternal__aapl__pxrReserved__::SdfPath **)a4);
    if ((v16 & 7) != 0)
    {
      v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
  }
  if ((v21 & 7) != 0)
  {
    v10 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
}

void sub_20C687C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v13;

  sub_20C377F1C((uint64_t)&a9);
  sub_20C377F1C((uint64_t)&a13);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI(v13);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsCreateCollections@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, _QWORD *result@<X0>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  _QWORD *v8;
  double v9;
  double v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v21;
  uint64_t v22;
  unsigned int **v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  double *v40;
  unsigned int *v41;
  unsigned int *v42;
  tbb::task_group_context *v43[3];
  _QWORD v44[3];
  uint64_t v45;
  _QWORD *v46;
  int v47;
  int v48;
  double v49;
  tbb::task_group_context **v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v49 = a6;
  v47 = a4;
  v48 = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (*result != result[1])
  {
    v8 = result;
    if (a6 <= 0.0 || a6 > 1.0)
    {
      *(_QWORD *)&v51 = "usdUtils/authoring.cpp";
      *((_QWORD *)&v51 + 1) = "UsdUtilsCreateCollections";
      *(_QWORD *)&v52 = 367;
      *((_QWORD *)&v52 + 1) = "std::vector<UsdCollectionAPI> pxrInternal__aapl__pxrReserved__::UsdUtilsCreateCollections("
                              "const std::vector<std::pair<TfToken, SdfPathSet>> &, const UsdPrim &, double, const unsign"
                              "ed int, const unsigned int)";
      LOBYTE(v53) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid minInclusionRatio value: %f. Clamping value to range (0, 1).", a6);
      v9 = 1.0;
      if (v49 <= 1.0)
        v9 = v49;
      v10 = 0.0;
      if (v49 >= 0.0)
        v10 = v9;
      v49 = v10;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, this, &v45);
    v11 = (uint64_t)(v8[1] - *v8) >> 5;
    v51 = 0uLL;
    v52 = 0uLL;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    v53 = 0;
    v54 = 0;
    memset(v43, 0, sizeof(v43));
    sub_20C6888FC(v44, v11, (_DWORD **)&v51);
    v50 = (tbb::task_group_context **)&v52 + 1;
    sub_20BFD6F90((void ***)&v50);
    v50 = (tbb::task_group_context **)&v51;
    sub_20BFD6F90((void ***)&v50);
    v50 = v43;
    sub_20BFD6F90((void ***)&v50);
    v43[0] = (tbb::task_group_context *)&v37;
    sub_20BFD6F90((void ***)v43);
    v14 = *v8;
    v13 = v8[1];
    v37 = v8;
    v38 = v44;
    v39 = &v45;
    v40 = &v49;
    v41 = (unsigned int *)&v48;
    v42 = (unsigned int *)&v47;
    if (v13 != v14)
    {
      v18 = (v13 - v14) >> 5;
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v12))
      {
        LODWORD(v51) = 0;
        v55 = 65539;
        v56 = 55;
        tbb::task_group_context::init((uint64_t)&v51, v15, v16, v17);
        v43[0] = (tbb::task_group_context *)&v51;
        v19 = tbb::internal::allocate_root_with_context_proxy::allocate(v43, 0x38uLL);
        *(_BYTE *)(v19 - 11) = 1;
        *(_QWORD *)v19 = &off_24C540448;
        *(_QWORD *)(v19 + 8) = v18;
        *(_OWORD *)(v19 + 16) = xmmword_20CA59F70;
        *(_QWORD *)(v19 + 32) = &v37;
        initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v19);
        *(_DWORD *)(v19 + 48) = 0;
        *(_BYTE *)(v19 + 52) = 5;
        *(_QWORD *)(v19 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v19 - 40) + 16))(*(_QWORD *)(v19 - 40), v19, v19 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v51);
      }
      else
      {
        v21 = 24;
        v22 = 8;
        do
        {
          v23 = (unsigned int **)(*v37 + v22);
          v24 = *v38 + v21;
          v25 = *v40;
          v26 = *v41;
          v27 = *v42;
          v51 = 0u;
          v52 = 0u;
          LODWORD(v53) = 1065353216;
          pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(v23, v39, v24 - 24, v24, v26, v27, &v51, v25);
          sub_20C220E58((uint64_t)&v51);
          v21 += 48;
          v22 += 32;
          --v18;
        }
        while (v18);
      }
    }
    v28 = *v8;
    if (v8[1] != *v8)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdUtilsAuthorCollection((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v28 + v30), this, (pxrInternal__aapl__pxrReserved__::SdfPath **)(v44[0] + v29), v44[0] + v29 + 24, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v51);
        v32 = a5[1];
        if (v32 >= a5[2])
        {
          v33 = sub_20C688F34(a5, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v51);
        }
        else
        {
          sub_20C37B6D8((_DWORD)a5 + 16, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a5[1], (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v51);
          v33 = v32 + 32;
          a5[1] = v32 + 32;
        }
        a5[1] = v33;
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v51);
        ++v31;
        v28 = *v8;
        v30 += 32;
        v29 += 48;
      }
      while (v31 < (uint64_t)(v8[1] - *v8) >> 5);
    }
    *(_QWORD *)&v51 = v44;
    sub_20C688A20((void ***)&v51);
    result = v46;
    if (v46)
    {
      v34 = (unsigned int *)(v46 + 1);
      do
      {
        v35 = __ldxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_20C687FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  tbb::task *v27;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a16, v27);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a27);
  a10 = &a19;
  sub_20C688A20((void ***)&a10);
  v29 = a23;
  if (a23)
  {
    v30 = (unsigned int *)(a23 + 8);
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  sub_20C37B438((void ***)&a10);
  _Unwind_Resume(a1);
}

void **sub_20C6880D4(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_20BFD6F90(&v3);
  v3 = a1;
  sub_20BFD6F90(&v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetDirtyLayers@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v5, a2, v6, a3);
  v7 = *a3;
  v8 = a3[1];
  if (*a3 == v8)
    goto LABEL_17;
  while (1)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v7);
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v9))
      break;
    v7 += 2;
    if (v7 == v8)
    {
      v10 = (uint64_t)v8;
      return sub_20C43D1B0((uint64_t)a3, v10, (uint64_t)a3[1]);
    }
  }
  if (v7 == v8 || (v11 = v7 + 2, v7 + 2 == v8))
  {
LABEL_17:
    v10 = (uint64_t)v7;
  }
  else
  {
    v10 = (uint64_t)v7;
    do
    {
      v12 = v11;
      v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v11);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v13))
      {
        v14 = *(unsigned int **)(v10 + 8);
        *(_OWORD *)v10 = *(_OWORD *)v12;
        v7[3] = 0;
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
        *v12 = 0;
        v10 += 16;
      }
      v11 = v12 + 2;
      v7 = v12;
    }
    while (v12 + 2 != v8);
  }
  return sub_20C43D1B0((uint64_t)a3, v10, (uint64_t)a3[1]);
}

void sub_20C688224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB4844((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C688244(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20C6882C8(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20C6882C8(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = sub_20C68834C((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C68832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C68834C(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD v11[3];
  char v12;
  _DWORD *v13;
  _DWORD *v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD6E54(v4, (_DWORD *)v6 + 7);
      sub_20BFD6EA4(v4 + 1, (_DWORD *)v6 + 8);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v4 = v14 + 2;
      v14 += 2;
      v6 = v8;
    }
    while (v8 != a3);
  }
  v12 = 1;
  sub_20BFD6EE0((uint64_t)v11);
  return v4;
}

_DWORD *sub_20C688410(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_20C137858((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    sub_20BFD6E54(v7 + 8, v9);
    sub_20BFD6EA4(v7 + 9, v9 + 1);
    *((_QWORD *)v7 + 5) = 0;
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_20C6884D0((uint64_t)v11, 0);
  }
  return v7;
}

void sub_20C6884D0(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFD2948(v2 + 8);
    operator delete(v2);
  }
}

_DWORD *sub_20C688514(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_20C137858((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    sub_20BFD38A4(v7 + 8, v9);
    sub_20BFD38DC(v7 + 9, v9 + 1);
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_20C33F3F4((uint64_t)v11, 0);
  }
  return v7;
}

void sub_20C6885D8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C6885D8(a1, *a2);
    sub_20C6885D8(a1, a2[1]);
    sub_20BFD2948((_DWORD *)a2 + 8);
    operator delete(a2);
  }
}

int *sub_20C688620(uint64_t *a1, int *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  int *v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char v26;

  v5 = a2;
  if (a5 >= 1)
  {
    v10 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    v11 = a1[1];
    if (a5 <= (uint64_t)(v9 - v11) >> 3)
    {
      v21 = a3;
      sub_20BE754A0(&v21, a5);
      v19 = a1[1] - (_QWORD)v5;
      if (v19 >> 3 >= a5
        || (v21 = a3,
            sub_20BE754A0(&v21, v19 >> 3),
            a1[1] = (uint64_t)sub_20C68834C(v10, v21, a4, (_DWORD *)a1[1]),
            v19 >= 1))
      {
        sub_20C0311C4((uint64_t)a1, (uint64_t)v5, v11, (uint64_t)&v5[2 * a5]);
        sub_20C688868((uint64_t)&v26, a3, v21, v5);
      }
    }
    else
    {
      v12 = *a1;
      v13 = a5 + ((uint64_t)(v11 - *a1) >> 3);
      if (v13 >> 61)
        sub_20BDDF694();
      v14 = ((uint64_t)a2 - v12) >> 3;
      v15 = v9 - v12;
      if (v15 >> 2 > v13)
        v13 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v25 = a1 + 2;
      if (v16)
        v17 = sub_20BDDF6A8((uint64_t)(a1 + 2), v16);
      else
        v17 = 0;
      v21 = v17;
      v22 = (char *)&v17[v14];
      v23 = v22;
      v24 = (char *)&v17[v16];
      sub_20C6887D8(&v21, a3, a5);
      v5 = (int *)sub_20C0312D8((uint64_t)a1, &v21, v5);
      sub_20BFD7B28((void **)&v21);
    }
  }
  return v5;
}

void sub_20C6887B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C6887D8(_DWORD *result, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = result;
  v4 = (_DWORD *)*((_QWORD *)result + 2);
  if (a3)
  {
    v6 = &v4[2 * a3];
    do
    {
      sub_20BFD6E54(v4, (_DWORD *)a2 + 7);
      result = sub_20BFD6EA4(v4 + 1, (_DWORD *)a2 + 8);
      v7 = (_QWORD *)a2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)a2[2];
          v9 = *v8 == (_QWORD)a2;
          a2 = v8;
        }
        while (!v9);
      }
      v4 += 2;
      a2 = v8;
    }
    while (v4 != v6);
    v4 = v6;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

_QWORD *sub_20C688868(uint64_t a1, _QWORD *a2, _QWORD *a3, int *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20C01A074(a4, (_DWORD *)v5 + 7);
      sub_20C01A0C8(a4 + 1, (_DWORD *)v5 + 8);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      a4 += 2;
      v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_20C6888FC(_QWORD *a1, unint64_t a2, _DWORD **a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C02CC00(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[6 * a2];
    v9 = 16 * v7;
    do
    {
      sub_20C6889A4(v6, a3);
      v6 += 6;
      v9 -= 48;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20C688984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C688A20(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6889A4(_QWORD *a1, _DWORD **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BFD6D38(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_20BFD6D38(a1 + 3, a2[3], a2[4], ((char *)a2[4] - (char *)a2[3]) >> 3);
  return a1;
}

void sub_20C688A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C688A20(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C688A60((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void sub_20C688A60(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 6;
      v6 = v4 - 3;
      sub_20BFD6F90(&v6);
      v6 = v5;
      sub_20BFD6F90(&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_20C688AD4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C540448;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C540448;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C688E74((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C688E74((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

uint64_t sub_20C688E74(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[2];
  int v14;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = 48 * v2;
    v6 = (32 * v2) | 8;
    do
    {
      v7 = (unsigned int **)(**(_QWORD **)v4 + v6);
      v8 = **(_QWORD **)(v4 + 8) + v5;
      v9 = *(uint64_t **)(v4 + 16);
      v10 = **(double **)(v4 + 24);
      v11 = **(_DWORD **)(v4 + 32);
      v12 = **(_DWORD **)(v4 + 40);
      memset(v13, 0, sizeof(v13));
      v14 = 1065353216;
      pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(v7, v9, v8, v8 + 24, v11, v12, v13, v10);
      result = sub_20C220E58((uint64_t)v13);
      v5 += 48;
      v6 += 32;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_20C688F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C220E58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C688F34(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37B6D8((_DWORD)a1 + 16, v12, a2);
  v13 = (char *)v12 + 32;
  sub_20C37B5BC(a1, &v11);
  v9 = a1[1];
  sub_20C37B750((uint64_t)&v11);
  return v9;
}

void sub_20C68900C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B750((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::UsdUtilsCoalescingDiagnosticDelegate(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v5;
  void *v6;
  _QWORD *Instance;

  *(_QWORD *)this = off_24C540490;
  *((_QWORD *)this + 1) = &unk_24C540568;
  v5 = (_QWORD *)((char *)this + 8);
  v6 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, a4);
  *((_QWORD *)this + 2) = v6;
  bzero(v6, 0x2C0uLL);
  *(_OWORD *)(*((_QWORD *)this + 2) + 256) = xmmword_20CAE3D80;
  *v5 = &unk_24C5404F8;
  Instance = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate(Instance, this);
  return this;
}

void sub_20C6890C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C68A7CC(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this)
{
  _QWORD *Instance;
  uint64_t v3[3];
  void **v4;

  *(_QWORD *)this = off_24C540490;
  Instance = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate(Instance, this);
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics(this, v3);
  v4 = (void **)v3;
  sub_20C68A8FC(&v4);
  sub_20C68A7CC((_QWORD *)this + 1);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (uint64_t)(a2 + 2);
  v24 = 0;
  v5 = (char *)this + 8;
  while (1)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 2);
    v7 = v6[16];
    __dmb(0xBu);
    v8 = *v6;
    __dmb(0xBu);
    v9 = v6[16];
    __dmb(0xBu);
    if (v7 == v9)
    {
      v10 = v6[34];
      __dmb(0xBu);
      if (v7 == v10 + v8)
        break;
    }
    if (sub_20C68AA80((uint64_t)v5, &v24))
    {
      v11 = v24;
      v22 = v24;
      v13 = (uint64_t *)a2[1];
      v12 = a2[2];
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((uint64_t)v13 - *a2) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_20BDDF694();
        v16 = v12 - *a2;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v23[4] = v4;
        if (v18)
        {
          v19 = (char *)sub_20BDDF6A8(v4, v18);
          v11 = v22;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        v23[0] = v19;
        v23[1] = v20;
        v23[3] = &v19[8 * v18];
        v22 = 0;
        *(_QWORD *)v20 = v11;
        v23[2] = v20 + 8;
        sub_20C68B8A8(a2, v23);
        v14 = (_QWORD *)a2[1];
        sub_20C68BA2C((uint64_t)v23);
      }
      else
      {
        v22 = 0;
        *v13 = v24;
        v14 = v13 + 1;
        a2[1] = (uint64_t)v14;
      }
      a2[1] = (uint64_t)v14;
      v21 = v22;
      v22 = 0;
      if (v21)
        sub_20C68AC5C((uint64_t)&v22, v21);
    }
  }
}

void sub_20C6892CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v3 = v4;
  v4 = 0;
  if (v3)
    sub_20C68AC5C((uint64_t)va, v3);
  sub_20C68A8FC((void ***)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::IssueFatalError(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  BOOL v5;
  _Unwind_Exception *v6;
  std::string __p;
  std::string v8;

  sub_20BDDC0E4(&v8, "FATAL ERROR");
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v8, a3, (uint64_t)&__p, a2);
  std::string::~string(&__p);
  std::string::~string(&v8);
  v6 = (_Unwind_Exception *)pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  _Unwind_Resume(v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::IssueStatus(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  void (*v7)(uint64_t, uint64_t, char *, _QWORD, _QWORD);
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  v4 = operator new(0x98uLL);
  v5 = v4;
  v6 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v6;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4 + 40, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 56);
  }
  v5[4] = *(_OWORD *)(a2 + 64);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5 + 80, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v5[5] = *(_OWORD *)(a2 + 80);
    *((_QWORD *)v5 + 12) = *(_QWORD *)(a2 + 96);
  }
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0;
  v7 = *(void (**)(uint64_t, uint64_t, char *, _QWORD, _QWORD))(a2 + 104);
  if (v7)
    v7(1, a2 + 104, (char *)v5 + 104, 0, 0);
  *((_QWORD *)v5 + 17) = *(_QWORD *)(a2 + 136);
  *((_BYTE *)v5 + 144) = *(_BYTE *)(a2 + 144);
  v12 = v5;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unint64_t *)(v8 + 128);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  return sub_20C3B13D8((_QWORD *)(v8 + 40 * ((3 * (_BYTE)v10) & 7) + 384), (uint64_t)&v12, v10, (uint64_t *)(a1 + 8), (uint64_t (*)(_QWORD *, uint64_t))sub_20C68A99C);
}

void sub_20C6894F0(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[63] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::IssueWarning(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  void (*v7)(uint64_t, uint64_t, char *, _QWORD, _QWORD);
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  v4 = operator new(0x98uLL);
  v5 = v4;
  v6 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v6;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4 + 40, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 56);
  }
  v5[4] = *(_OWORD *)(a2 + 64);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5 + 80, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v5[5] = *(_OWORD *)(a2 + 80);
    *((_QWORD *)v5 + 12) = *(_QWORD *)(a2 + 96);
  }
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0;
  v7 = *(void (**)(uint64_t, uint64_t, char *, _QWORD, _QWORD))(a2 + 104);
  if (v7)
    v7(1, a2 + 104, (char *)v5 + 104, 0, 0);
  *((_QWORD *)v5 + 17) = *(_QWORD *)(a2 + 136);
  *((_BYTE *)v5 + 144) = *(_BYTE *)(a2 + 144);
  v12 = v5;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unint64_t *)(v8 + 128);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  return sub_20C3B13D8((_QWORD *)(v8 + 40 * ((3 * (_BYTE)v10) & 7) + 384), (uint64_t)&v12, v10, (uint64_t *)(a1 + 8), (uint64_t (*)(_QWORD *, uint64_t))sub_20C68A99C);
}

void sub_20C689668(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[63] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeCoalescedDiagnostics@<X0>(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  float v30;
  _BOOL4 v31;
  unint64_t v32;
  unint64_t v33;
  int8x8_t prime;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD **v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *i;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  char *v60;
  std::string::size_type v63;
  std::string v64;
  __int128 __p;
  std::string::size_type v66;
  char *v67;
  _BYTE *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  std::string::size_type v75;
  std::string v76;
  __int128 v77;
  std::string::size_type v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  float v84;
  void **v85;
  char v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;

  v3 = this;
  v92 = *MEMORY[0x24BDAC8D0];
  v82 = 0u;
  v83 = 0u;
  v4 = (char *)this + 8;
  v84 = 1.0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v80 = 0;
  v81 = 0;
  v60 = (char *)this + 8;
  while (1)
  {
    v5 = (uint64_t *)*((_QWORD *)v3 + 2);
    v6 = v5[16];
    __dmb(0xBu);
    v7 = *v5;
    __dmb(0xBu);
    v8 = v5[16];
    __dmb(0xBu);
    if (v6 == v8)
    {
      v9 = v5[34];
      __dmb(0xBu);
      if (v6 == v9 + v7)
        return sub_20C68A258((uint64_t)&v82);
    }
    if (sub_20C68AA80((uint64_t)v4, &v80))
    {
      v79 = v80;
      v75 = *(_QWORD *)(v80 + 16);
      sub_20C68A15C(v80, &v76);
      sub_20BDDC0E4(&v77, *(char **)v79);
      v10 = *(_BYTE *)(v79 + 32);
      v11 = *(_OWORD *)(v79 + 16);
      v70 = *(_OWORD *)v79;
      v71 = v11;
      LOBYTE(v72) = v10;
      if (*(char *)(v79 + 63) < 0)
      {
        sub_20BDDBFAC(&v73, *(void **)(v79 + 40), *(_QWORD *)(v79 + 48));
      }
      else
      {
        v12 = *(_OWORD *)(v79 + 40);
        v74 = *(_QWORD *)(v79 + 56);
        v73 = v12;
      }
      v63 = 0;
      v64.__r_.__value_.__s.__data_[0] = 0;
      sub_20C1EEDE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v63, (uint64_t *)&v75, (pxrInternal__aapl__pxrReserved__ *)&v76, (uint64_t)&v77);
      v13 = *((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v14 = bswap64(0x9E3779B97F4A7C55 * v63);
        v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
        v15.i16[0] = vaddlv_u8(v15);
        v2 = v15.u32[0];
        if (v15.u32[0] > 1uLL)
        {
          v16 = v14;
          if (v14 >= *((_QWORD *)&v82 + 1))
            v16 = v14 % *((_QWORD *)&v82 + 1);
        }
        else
        {
          v16 = (*((_QWORD *)&v82 + 1) - 1) & v14;
        }
        v17 = *(_QWORD **)(v82 + 8 * v16);
        if (v17)
        {
          v18 = (_QWORD *)*v17;
          if (*v17)
          {
            do
            {
              v19 = v18[1];
              if (v19 == v14)
              {
                if ((sub_20C68ACAC((uint64_t)(v18 + 2), (uint64_t)&v75) & 1) != 0)
                {
                  v52 = *a2 + 80 * v18[9];
                  v55 = *(_QWORD *)(v52 + 64);
                  v53 = (uint64_t *)(v52 + 64);
                  v54 = v55;
                  v56 = v53 - 1;
                  if (v55 >= v53[1])
                  {
                    v57 = sub_20C68B574(v56, &v70);
                    v4 = v60;
                    v3 = this;
                  }
                  else
                  {
                    sub_20C68B504((uint64_t)v56, &v70);
                    v4 = v60;
                    v3 = this;
                    v57 = v54 + 64;
                  }
                  *v53 = v57;
                  goto LABEL_123;
                }
              }
              else
              {
                if (v2 > 1)
                {
                  if (v19 >= v13)
                    v19 %= v13;
                }
                else
                {
                  v19 &= v13 - 1;
                }
                if (v19 != v16)
                  break;
              }
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
      }
      sub_20C68A600((uint64_t)&v63, (uint64_t)&v75, &v81);
      *(_QWORD *)&v87 = 0;
      BYTE8(v87) = 0;
      sub_20C1EEDE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v87, (uint64_t *)&v63, (pxrInternal__aapl__pxrReserved__ *)&v64, (uint64_t)&__p);
      v20 = bswap64(0x9E3779B97F4A7C55 * v87);
      v21 = *((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
        v22.i16[0] = vaddlv_u8(v22);
        v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          v2 = v20;
          if (v20 >= *((_QWORD *)&v82 + 1))
            v2 = v20 % *((_QWORD *)&v82 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&v82 + 1) - 1) & v20;
        }
        v24 = *(_QWORD **)(v82 + 8 * v2);
        if (v24)
        {
          v25 = (_QWORD *)*v24;
          if (*v24)
          {
            do
            {
              v26 = v25[1];
              if (v26 == v20)
              {
                if ((sub_20C68ACAC((uint64_t)(v25 + 2), (uint64_t)&v63) & 1) != 0)
                  goto LABEL_95;
              }
              else
              {
                if (v23 > 1)
                {
                  if (v26 >= v21)
                    v26 %= v21;
                }
                else
                {
                  v26 &= v21 - 1;
                }
                if (v26 != v2)
                  break;
              }
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
        }
      }
      v27 = (std::string *)operator new(0x50uLL);
      *(_QWORD *)&v87 = v27;
      *((_QWORD *)&v87 + 1) = &v83;
      v27->__r_.__value_.__r.__words[0] = 0;
      v27->__r_.__value_.__l.__size_ = v20;
      v28 = (std::string::size_type)v67;
      v27->__r_.__value_.__r.__words[2] = v63;
      v27[1] = v64;
      memset(&v64, 0, sizeof(v64));
      *(_OWORD *)&v27[2].__r_.__value_.__l.__data_ = __p;
      v29 = v66;
      __p = 0uLL;
      v66 = 0;
      v27[2].__r_.__value_.__r.__words[2] = v29;
      v27[3].__r_.__value_.__r.__words[0] = v28;
      LOBYTE(v88) = 1;
      v30 = (float)(unint64_t)(*((_QWORD *)&v83 + 1) + 1);
      if (!v21 || (float)(v84 * (float)v21) < v30)
      {
        v31 = (v21 & (v21 - 1)) == 0;
        if (v21 < 3)
          v31 = 0;
        v32 = (2 * v21) | !v31;
        v33 = vcvtps_u32_f32(v30 / v84);
        if (v32 <= v33)
          prime = (int8x8_t)v33;
        else
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v21 = *((_QWORD *)&v82 + 1);
        }
        if (*(_QWORD *)&prime <= v21)
        {
          if (*(_QWORD *)&prime < v21)
          {
            v41 = vcvtps_u32_f32((float)*((unint64_t *)&v83 + 1) / v84);
            if (v21 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
            {
              v41 = std::__next_prime(v41);
            }
            else
            {
              v43 = 1 << -(char)__clz(v41 - 1);
              if (v41 >= 2)
                v41 = v43;
            }
            if (*(_QWORD *)&prime <= v41)
              prime = (int8x8_t)v41;
            if (*(_QWORD *)&prime >= v21)
            {
              v21 = *((_QWORD *)&v82 + 1);
            }
            else
            {
              if (prime)
                goto LABEL_52;
              v58 = (void *)v82;
              *(_QWORD *)&v82 = 0;
              if (v58)
                operator delete(v58);
              v21 = 0;
              *((_QWORD *)&v82 + 1) = 0;
            }
          }
        }
        else
        {
LABEL_52:
          if (*(_QWORD *)&prime >> 61)
            sub_20BDDF5B4();
          v35 = operator new(8 * *(_QWORD *)&prime);
          v36 = (void *)v82;
          *(_QWORD *)&v82 = v35;
          if (v36)
            operator delete(v36);
          v37 = 0;
          *((int8x8_t *)&v82 + 1) = prime;
          do
            *(_QWORD *)(v82 + 8 * v37++) = 0;
          while (*(_QWORD *)&prime != v37);
          v38 = (_QWORD **)v83;
          if ((_QWORD)v83)
          {
            v39 = *(_QWORD *)(v83 + 8);
            v40 = (uint8x8_t)vcnt_s8(prime);
            v40.i16[0] = vaddlv_u8(v40);
            if (v40.u32[0] > 1uLL)
            {
              if (v39 >= *(_QWORD *)&prime)
                v39 %= *(_QWORD *)&prime;
            }
            else
            {
              v39 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(v82 + 8 * v39) = &v83;
            for (i = *v38; i; v39 = v45)
            {
              v45 = i[1];
              if (v40.u32[0] > 1uLL)
              {
                if (v45 >= *(_QWORD *)&prime)
                  v45 %= *(_QWORD *)&prime;
              }
              else
              {
                v45 &= *(_QWORD *)&prime - 1;
              }
              if (v45 != v39)
              {
                if (!*(_QWORD *)(v82 + 8 * v45))
                {
                  *(_QWORD *)(v82 + 8 * v45) = v38;
                  goto LABEL_77;
                }
                *v38 = (_QWORD *)*i;
                *i = **(_QWORD **)(v82 + 8 * v45);
                **(_QWORD **)(v82 + 8 * v45) = i;
                i = v38;
              }
              v45 = v39;
LABEL_77:
              v38 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v21 = (unint64_t)prime;
        }
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v2 = v20 % v21;
          else
            v2 = v20;
        }
        else
        {
          v2 = (v21 - 1) & v20;
        }
      }
      v46 = *(_QWORD **)(v82 + 8 * v2);
      if (v46)
      {
        *(_QWORD *)v87 = *v46;
        *v46 = v87;
      }
      else
      {
        *(_QWORD *)v87 = v83;
        *(_QWORD *)&v83 = v87;
        *(_QWORD *)(v82 + 8 * v2) = &v83;
        if (*(_QWORD *)v87)
        {
          v47 = *(_QWORD *)(*(_QWORD *)v87 + 8);
          if ((v21 & (v21 - 1)) != 0)
          {
            if (v47 >= v21)
              v47 %= v21;
          }
          else
          {
            v47 &= v21 - 1;
          }
          *(_QWORD *)(v82 + 8 * v47) = v87;
        }
      }
      *(_QWORD *)&v87 = 0;
      ++*((_QWORD *)&v83 + 1);
      sub_20C68ADE8((uint64_t)&v87, 0);
LABEL_95:
      if (SHIBYTE(v66) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v63 = v75;
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        sub_20BDDBFAC(&v64, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      else
        v64 = v76;
      if (SHIBYTE(v78) < 0)
      {
        sub_20BDDBFAC(&__p, (void *)v77, *((unint64_t *)&v77 + 1));
      }
      else
      {
        __p = v77;
        v66 = v78;
      }
      v87 = v70;
      v88 = v71;
      v89 = v72;
      if (SHIBYTE(v74) < 0)
      {
        sub_20BDDBFAC(&v90, (void *)v73, *((unint64_t *)&v73 + 1));
      }
      else
      {
        v90 = v73;
        v91 = v74;
      }
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v85 = (void **)&v67;
      v86 = 0;
      v67 = (char *)operator new(0x40uLL);
      v68 = v67;
      v69 = v67 + 64;
      v68 = (_BYTE *)sub_20C68AE2C((uint64_t)&v69, (uint64_t)&v87, (uint64_t)&v92, (uint64_t)v67);
      if (SHIBYTE(v91) < 0)
        operator delete((void *)v90);
      v2 = a2[1];
      if (v2 >= a2[2])
      {
        v49 = sub_20C68AF7C(a2, (uint64_t)&v63);
      }
      else
      {
        *(_QWORD *)v2 = v63;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20BDDBFAC((_BYTE *)(v2 + 8), v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
        }
        else
        {
          v48 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
          *(_QWORD *)(v2 + 24) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
          *(_OWORD *)(v2 + 8) = v48;
        }
        if (SHIBYTE(v66) < 0)
        {
          sub_20BDDBFAC((_BYTE *)(v2 + 32), (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          v50 = __p;
          *(_QWORD *)(v2 + 48) = v66;
          *(_OWORD *)(v2 + 32) = v50;
        }
        *(_QWORD *)(v2 + 56) = 0;
        *(_QWORD *)(v2 + 64) = 0;
        *(_QWORD *)(v2 + 72) = 0;
        sub_20C68B164((_QWORD *)(v2 + 56), (uint64_t)v67, (uint64_t)v68, (v68 - v67) >> 6);
        v49 = v2 + 80;
        a2[1] = v2 + 80;
      }
      v4 = v60;
      v3 = this;
      a2[1] = v49;
      ++v81;
      *(_QWORD *)&v87 = &v67;
      sub_20C68A6B8((void ***)&v87);
      if (SHIBYTE(v66) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
LABEL_123:
      if (SHIBYTE(v74) < 0)
        operator delete((void *)v73);
      if (SHIBYTE(v78) < 0)
        operator delete((void *)v77);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v51 = v79;
      v79 = 0;
      if (v51)
        sub_20C68AC5C((uint64_t)&v79, v51);
    }
  }
}

void sub_20C689FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  if (*(char *)(v50 + 31) < 0)
    operator delete(*v49);
  *(_QWORD *)(a15 + 8) = v50;
  sub_20C68A200((uint64_t)&a19);
  if (a42 < 0)
    operator delete(__p);
  sub_20C0FC828((uint64_t)&a43);
  v53 = *(_QWORD *)(v51 - 248);
  *(_QWORD *)(v51 - 248) = 0;
  if (v53)
    sub_20C68AC5C(v51 - 248, v53);
  a32 = a15;
  sub_20C68A9A8((void ***)&a32);
  sub_20C68A258(v51 - 224);
  _Unwind_Resume(a1);
}

void sub_20C68A15C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string __p;
  void *v5[2];
  char v6;

  sub_20BDDC0E4(v5, *(char **)(a1 + 8));
  sub_20BDDC0E4(&__p, *(char **)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v5, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_20C68A1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C68A200(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_20C68A6B8(&v3);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20C68A258(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C105514((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::DumpCoalescedDiagnostics(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeCoalescedDiagnostics(a1, &v14);
  v3 = v15;
  if (v14 != v15)
  {
    v4 = v14 + 32;
    do
    {
      v5 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v5, (uint64_t)" ", 1);
      sub_20BDDC1C8(a2, (uint64_t)"Diagnostic Notification(s) in ", 30);
      v6 = *(char *)(v4 - 1);
      if (v6 >= 0)
        v7 = v4 - 24;
      else
        v7 = *(_QWORD *)(v4 - 24);
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v4 - 1);
      else
        v8 = *(_QWORD *)(v4 - 16);
      sub_20BDDC1C8(a2, v7, v8);
      sub_20BDDC1C8(a2, (uint64_t)" at line ", 9);
      std::ostream::operator<<();
      v9 = sub_20BDDC1C8(a2, (uint64_t)" of ", 4);
      v10 = *(char *)(v4 + 23);
      if (v10 >= 0)
        v11 = v4;
      else
        v11 = *(_QWORD *)v4;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v4 + 23);
      else
        v12 = *(_QWORD *)(v4 + 8);
      sub_20BDDC1C8(v9, v11, v12);
      sub_20BDDC1C8(a2, (uint64_t)"\n", 1);
      v13 = v4 + 48;
      v4 += 80;
    }
    while (v13 != v3);
  }
  v16 = (void **)&v14;
  sub_20C68A9A8(&v16);
}

void sub_20C68A404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C68A9A8(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::DumpUncoalescedDiagnostics(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *i;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  uint64_t *v15;
  uint64_t *v16;

  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics(a1, (uint64_t *)&v15);
  v3 = v15;
  for (i = v16; v3 != i; ++v3)
  {
    sub_20BDDC1C8(a2, (uint64_t)"Diagnostic Notification in ", 27);
    sub_20C68A15C(*v3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(a2, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20BDDC1C8(a2, (uint64_t)" at line ", 9);
    std::ostream::operator<<();
    v7 = sub_20BDDC1C8(a2, (uint64_t)" of ", 4);
    sub_20BDDC0E4(&__p, *(char **)*v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &__p;
    else
      v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v9 = __p.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v7, (uint64_t)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = sub_20BDDC1C8(a2, (uint64_t)":\n   ", 5);
    v11 = *(char *)(*v3 + 63);
    if (v11 >= 0)
      v12 = *v3 + 40;
    else
      v12 = *(_QWORD *)(*v3 + 40);
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(*v3 + 63);
    else
      v13 = *(_QWORD *)(*v3 + 48);
    sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(a2, (uint64_t)"\n", 1);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  sub_20C68A8FC((void ***)&__p);
}

void sub_20C68A5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  sub_20C68A8FC((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68A600(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v6;
  }
  v7 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 56) = *a3;
  return a1;
}

void sub_20C68A69C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20C68A6B8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C68A6F8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20C68A6F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_20C68A744(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C68A7CC(a1);
  operator delete(v1);
}

uint64_t sub_20C68A758(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 8 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C68A770(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 8 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C68A788(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C68A7C4(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_20C68A7CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C5404F8;
  sub_20C68A850((_BOOL8)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C68A8C0((uint64_t)a1, v4);
}

BOOL sub_20C68A850(_BOOL8 result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v1 = result;
  for (i = 0; ; result = sub_20C68AA80(v1, &i))
  {
    v2 = *(uint64_t **)(v1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
  }
  return result;
}

uint64_t sub_20C68A8C0(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C540568;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

void sub_20C68A8FC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C68A93C((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void sub_20C68A93C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        sub_20C68AC5C((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *sub_20C68A99C(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void sub_20C68A9A8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_20C68AA2C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C68AA2C(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 56);
  sub_20C68A6B8(&v3);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

BOOL sub_20C68AA80(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20C68AB50((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20C68AB50(uint64_t *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v23[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v23[0] = v8 + 8;
  v23[1] = (uint64_t)a1;
  v23[2] = v17;
  v23[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    *a2 = *(_QWORD *)(v13 + 8 * v16 + 16);
  }
  else
  {
    v19 = (unint64_t *)(v14 + 272);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  v21 = v18 != 0;
  sub_20BF39F2C(v23);
  return v21;
}

void sub_20C68AC5C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 104));
    if (*(char *)(a2 + 103) < 0)
      operator delete(*(void **)(a2 + 80));
    if (*(char *)(a2 + 63) < 0)
      operator delete(*(void **)(a2 + 40));
    operator delete((void *)a2);
  }
}

uint64_t sub_20C68ACAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  uint64_t result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a2 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 16);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v10 = *(unsigned __int8 *)(a1 + 55);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 55);
  else
    v11 = *(_QWORD *)(a1 + 40);
  v12 = *(unsigned __int8 *)(a2 + 55);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 40);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 32);
  v17 = *(unsigned __int8 **)(a2 + 32);
  v16 = (unsigned __int8 *)(a2 + 32);
  v15 = v17;
  if (v13 >= 0)
    v18 = v16;
  else
    v18 = v15;
  if ((v10 & 0x80) != 0)
    return memcmp(*v14, v18, *(_QWORD *)(a1 + 40)) == 0;
  if (!*(_BYTE *)(a1 + 55))
    return 1;
  v19 = v10 - 1;
  do
  {
    v21 = *(unsigned __int8 *)v14;
    v14 = (const void **)((char *)v14 + 1);
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

void sub_20C68ADE8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C105514((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C68AE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v15 = a4;
  v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 40);
    do
    {
      v7 = *(__int128 *)((char *)v6 - 40);
      v8 = *(__int128 *)((char *)v6 - 24);
      *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      v9 = (_BYTE *)(v4 + 40);
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v9, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v16;
      }
      else
      {
        v10 = *v6;
        *(_QWORD *)(v4 + 56) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v9 = v10;
      }
      v11 = (uint64_t)v6 - 40;
      v4 += 64;
      v16 = v4;
      v6 += 4;
    }
    while (v11 + 64 != a3);
  }
  v14 = 1;
  sub_20C68AF04((uint64_t)v13);
  return v4;
}

void sub_20C68AEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C68AF04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68AF04(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C68AF38(a1);
  return a1;
}

void sub_20C68AF38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 64;
  }
}

uint64_t sub_20C68AF7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE7AB58(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[80 * v4];
  v16 = &v10[80 * v9];
  sub_20C68B080((uint64_t)v14, a2);
  v15 = v14 + 80;
  sub_20C68B2C0(a1, &v13);
  v11 = a1[1];
  sub_20C68B490(&v13);
  return v11;
}

void sub_20C68B06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C68B490((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68B080(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20C68B164((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 6);
  return a1;
}

void sub_20C68B130(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C68B164(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C00D6B0(result, a4);
    result = (_QWORD *)sub_20C68B1E8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C68B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C68A6B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v15 = a4;
  v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 40);
    do
    {
      v7 = *(__int128 *)((char *)v6 - 40);
      v8 = *(__int128 *)((char *)v6 - 24);
      *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      v9 = (_BYTE *)(v4 + 40);
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v9, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v16;
      }
      else
      {
        v10 = *v6;
        *(_QWORD *)(v4 + 56) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v9 = v10;
      }
      v11 = (uint64_t)v6 - 40;
      v4 += 64;
      v16 = v4;
      v6 += 4;
    }
    while (v11 + 64 != a3);
  }
  v14 = 1;
  sub_20C68AF04((uint64_t)v13);
  return v4;
}

void sub_20C68B2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C68AF04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68B2C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C68B334((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C68B334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 80);
      a3 -= 80;
      *(_QWORD *)(v7 - 80) = v8;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 72) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v10 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 48) = v10;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C68B40C((uint64_t)v13);
  return v11;
}

uint64_t sub_20C68B40C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C68B440((uint64_t *)a1);
  return a1;
}

void sub_20C68B440(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C68AA2C(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_20C68B490(void **a1)
{
  sub_20C68B4C0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C68B4C0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_20C68AA2C(v4, i - 80);
  }
}

_BYTE *sub_20C68B504(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(v3 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  result = (_BYTE *)(v3 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    result = sub_20BDDBFAC(result, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(v3 + 56) = *((_QWORD *)a2 + 7);
    *(_OWORD *)result = v7;
  }
  *(_QWORD *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_20C68B56C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C68B574(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C00D6F0(v7, v9);
  else
    v10 = 0;
  v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[64 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  v14 = v11 + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_20BDDBFAC(v14, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
    v11 = v19;
  }
  else
  {
    v15 = *(__int128 *)((char *)a2 + 40);
    *((_QWORD *)v11 + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)v14 = v15;
  }
  v19 = v11 + 64;
  sub_20C68B688(a1, v18);
  v16 = a1[1];
  sub_20C68B820((uint64_t)v18);
  return v16;
}

void sub_20C68B674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C68B820((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68B688(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C68B6FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C68B6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 64);
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 64;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_20C68B7A8((uint64_t)v14);
  return a6;
}

uint64_t sub_20C68B7A8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C68B7DC(a1);
  return a1;
}

void sub_20C68B7DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    v1 += 64;
  }
}

uint64_t sub_20C68B820(uint64_t a1)
{
  sub_20C68B854(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C68B854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20C68B8A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C68B91C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C68B91C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C68B9B0((uint64_t)v13);
  return v11;
}

uint64_t sub_20C68B9B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C68B9E4(a1);
  return a1;
}

void sub_20C68B9E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      sub_20C68AC5C((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t sub_20C68BA2C(uint64_t a1)
{
  sub_20C68BA60(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C68BA60(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      sub_20C68AC5C(i - 8, v5);
  }
}

void pxrInternal__aapl__pxrReserved__::RecursiveCartesian(uint64_t *a1, uint64_t *a2, __int128 ***a3, int a4)
{
  __int128 **v8;
  __int128 *v9;
  __int128 *v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 **v20;

  v8 = &(*a3)[3 * a4];
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_20BE78B98((char *)&v17, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)*v8) >> 3));
  v9 = v17;
  v10 = v18;
  if (v17 != v18)
  {
    v11 = (void **)a2[1];
    do
    {
      if ((unint64_t)v11 >= a2[2])
      {
        v12 = sub_20BF3E2A4(a2, v9);
      }
      else
      {
        sub_20BE4EDF4(a2, v9);
        v12 = (uint64_t)(v11 + 3);
      }
      a2[1] = v12;
      if (a4)
      {
        memset(v16, 0, sizeof(v16));
        sub_20BF406D4(v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
        pxrInternal__aapl__pxrReserved__::RecursiveCartesian(a1, a2, v16, (a4 - 1));
        v20 = (__int128 **)v16;
        sub_20BF3DFA8((void ***)&v20);
      }
      else
      {
        v13 = a1[1];
        if (v13 >= a1[2])
        {
          v14 = sub_20C696A84(a1, (__int128 **)a2);
        }
        else
        {
          sub_20C696A28((uint64_t)a1, (__int128 **)a2);
          v14 = v13 + 24;
        }
        a1[1] = v14;
      }
      v15 = a2[1];
      v11 = (void **)(v15 - 24);
      if (*(char *)(v15 - 1) < 0)
        operator delete(*v11);
      a2[1] = (uint64_t)v11;
      v9 = (__int128 *)((char *)v9 + 24);
    }
    while (v9 != v10);
  }
  v20 = &v17;
  sub_20BDE5038((void ***)&v20);
}

void sub_20C68BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  sub_20BF3DFA8(&a16);
  a16 = (void **)&a13;
  sub_20BDE5038(&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::CartesianProduct(__int128 ***a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 **v2;
  __int128 **v3;
  __int128 **v6;
  __int128 **v7;
  char *v8;
  void **p_data;
  uint64_t v11;
  __int128 v12;
  void *v13;
  BOOL v14;
  std::string *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 **v18[3];
  uint64_t v19[6];
  void ***v20;

  v2 = *a1;
  v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v2 != v3)
  {
    memset(v19, 0, 24);
    memset(v18, 0, sizeof(v18));
    sub_20BF406D4(v18, v2, v3, 0xAAAAAAAAAAAAAAABLL * (v3 - v2));
    pxrInternal__aapl__pxrReserved__::RecursiveCartesian(a2, v19, v18, -1431655765 * ((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) - 1);
    v15 = (std::string *)v18;
    sub_20BF3DFA8((void ***)&v15);
    v6 = (__int128 **)*a2;
    v7 = (__int128 **)a2[1];
    if ((__int128 **)*a2 != v7)
    {
      do
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        sub_20BE78B98((char *)&v15, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
        v8 = (char *)v16 - 24;
        if (v15 != (std::string *)v16 && v8 > (char *)v15)
        {
          p_data = (void **)&v15[1].__r_.__value_.__l.__data_;
          do
          {
            v11 = (uint64_t)*(p_data - 1);
            v12 = *(_OWORD *)(p_data - 3);
            v13 = (void *)*((_QWORD *)v8 + 2);
            *(_OWORD *)(p_data - 3) = *(_OWORD *)v8;
            *(p_data - 1) = v13;
            *(_OWORD *)v8 = v12;
            *((_QWORD *)v8 + 2) = v11;
            v8 -= 24;
            v14 = p_data >= (void **)v8;
            p_data += 3;
          }
          while (!v14);
        }
        if (v6 != (__int128 **)&v15)
          sub_20BE75818((uint64_t)v6, v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3));
        v20 = (void ***)&v15;
        sub_20BDE5038((void ***)&v20);
        v6 += 3;
      }
      while (v6 != v7);
    }
    v15 = (std::string *)v19;
    sub_20BDE5038((void ***)&v15);
  }
}

void sub_20C68BDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BF3DFA8((void ***)va);
  va_copy((va_list)v3, va1);
  sub_20BDE5038((void ***)va);
  sub_20BF3DFA8((void ***)va1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::UsdUtilsBaseRuleChecker(pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker *this, char a2, char a3, char a4)
{
  double result;

  *(_QWORD *)this = &unk_24C5405A8;
  *((_BYTE *)this + 8) = a2;
  *((_BYTE *)this + 9) = a3;
  *((_BYTE *)this + 10) = a4;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  std::locale v6;

  if (*(_BYTE *)(result + 8))
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (*(char *)(a2 + 23) >= 0)
    {
      v3 = *(unsigned __int8 *)(a2 + 23);
    }
    else
    {
      a2 = *(_QWORD *)a2;
      v3 = v2;
    }
    v4 = sub_20BDDC1C8(MEMORY[0x24BEDB318], a2, v3);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
    v5 = std::locale::use_facet(&v6, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v6);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_20C68BF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsByteAlignmentChecker::CheckZipFile(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdZipFile *this, uint64_t **a3)
{
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  double v10;
  void **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  void *v25[2];
  char v26;
  void *__p[2];
  uint64_t v28;
  uint64_t v29[5];
  void *v30;
  void *v31[6];

  pxrInternal__aapl__pxrReserved__::UsdZipFile::begin(this, &v30);
  v5 = a1 + 2;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(v31);
    v6 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((_QWORD **)&v30, (_QWORD **)v31);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(v31);
    if (!v6)
      break;
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFileInfo((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v30, (uint64_t)v29);
    v7 = v29[0];
    if ((v29[0] & 0x3F) != 0)
    {
      v10 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator->((uint64_t)&v30, (uint64_t)v25);
      v11 = (void **)v25[0];
      if (v26 >= 0)
        v11 = v25;
      v12 = *a3;
      if (*((char *)a3 + 23) >= 0)
        v12 = (uint64_t *)a3;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"File '%s' in package '%s' has an invalid offset %zu.", v8, v9, v10, v11, v12, v7);
      v13 = a1[3];
      v14 = a1[4];
      if (v13 >= v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v5) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v5) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v17;
        v31[4] = a1 + 4;
        if (v19)
          v20 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 4), v19);
        else
          v20 = 0;
        v21 = &v20[24 * v16];
        v31[0] = v20;
        v31[1] = v21;
        v31[3] = &v20[24 * v19];
        v22 = *(_OWORD *)__p;
        *((_QWORD *)v21 + 2) = v28;
        *(_OWORD *)v21 = v22;
        __p[1] = 0;
        v28 = 0;
        __p[0] = 0;
        v31[2] = v21 + 24;
        sub_20BDF34C0(a1 + 2, v31);
        v23 = a1[3];
        sub_20BDF3648((uint64_t)v31);
        v24 = SHIBYTE(v28);
        a1[3] = v23;
        if (v24 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v15 = *(_OWORD *)__p;
        *(_QWORD *)(v13 + 16) = v28;
        *(_OWORD *)v13 = v15;
        __p[1] = 0;
        v28 = 0;
        __p[0] = 0;
        a1[3] = v13 + 24;
      }
      if (v26 < 0)
        operator delete(v25[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator++((uint64_t)&v30);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v30);
}

void sub_20C68C130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20C68C1A4(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v18[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v18[4] = v4;
    if (v13)
      v14 = (char *)sub_20BDE4FF4(v4, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[24 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18[2] = v15 + 24;
    sub_20BDF34C0(a1, v18);
    v9 = a1[1];
    sub_20BDF3648((uint64_t)v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return v9 - 24;
}

void sub_20C68C2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCompressionChecker::CheckZipFile(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdZipFile *this, uint64_t **a3)
{
  _QWORD *v5;
  BOOL v6;
  const char *v7;
  char *v8;
  double v9;
  void **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  void *v24[2];
  char v25;
  void *__p[2];
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  void *v32;
  void *v33[6];

  pxrInternal__aapl__pxrReserved__::UsdZipFile::begin(this, &v32);
  v5 = a1 + 2;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(v33);
    v6 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((_QWORD **)&v32, (_QWORD **)v33);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(v33);
    if (!v6)
      break;
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFileInfo((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v32, (uint64_t)v28);
    if (v31)
    {
      v9 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator->((uint64_t)&v32, (uint64_t)v24);
      v10 = (void **)v24[0];
      if (v25 >= 0)
        v10 = v24;
      v11 = *a3;
      if (*((char *)a3 + 23) >= 0)
        v11 = (uint64_t *)a3;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"File '%s' in package '%s has compression. Compression method is '%hu', actual size is %zu. Uncompressed size is %zu.", v7, v8, v9, v10, v11, v31, v29, v30);
      v12 = a1[3];
      v13 = a1[4];
      if (v12 >= v13)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v5) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v5) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v33[4] = a1 + 4;
        if (v18)
          v19 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 4), v18);
        else
          v19 = 0;
        v20 = &v19[24 * v15];
        v33[0] = v19;
        v33[1] = v20;
        v33[3] = &v19[24 * v18];
        v21 = *(_OWORD *)__p;
        *((_QWORD *)v20 + 2) = v27;
        *(_OWORD *)v20 = v21;
        __p[1] = 0;
        v27 = 0;
        __p[0] = 0;
        v33[2] = v20 + 24;
        sub_20BDF34C0(a1 + 2, v33);
        v22 = a1[3];
        sub_20BDF3648((uint64_t)v33);
        v23 = SHIBYTE(v27);
        a1[3] = v22;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v27;
        *(_OWORD *)v12 = v14;
        __p[1] = 0;
        v27 = 0;
        __p[0] = 0;
        a1[3] = v12 + 24;
      }
      if (v25 < 0)
        operator delete(v24[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator++((uint64_t)&v32);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v32);
}

void sub_20C68C4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&a32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsMissingReferenceChecker::CheckDiagnostics(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  int64_t size;
  char v7;
  std::string *p_p;
  char *v9;
  std::string *v10;
  char *v11;
  _BOOL4 v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  _QWORD *v20;
  char *v21;
  void *v22;
  char *v23;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string __p;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = a1 + 2;
    do
    {
      sub_20C68A15C(*v2, &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        p_p = &__p;
      }
      else
      {
        size = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size < 13)
      {
LABEL_14:
        v13 = 0;
      }
      else
      {
        v9 = (char *)p_p + size;
        v10 = p_p;
        while (1)
        {
          v11 = (char *)memchr(v10, 95, size - 12);
          if (!v11)
            goto LABEL_14;
          if (*(_QWORD *)v11 == 0x4574726F7065525FLL && *(_QWORD *)(v11 + 5) == 0x73726F7272457472)
            break;
          v10 = (std::string *)(v11 + 1);
          size = v9 - (char *)v10;
          if (v9 - (char *)v10 < 13)
            goto LABEL_14;
        }
        v13 = 0;
        if (v11 != v9 && v11 - (char *)p_p != -1)
        {
          sub_20BDDC0E4(v26, *(char **)*v2);
          v17 = v27;
          v18 = (char)v27;
          v19 = (void *)v26[0];
          if ((v27 & 0x80u) == 0)
          {
            v20 = v26;
          }
          else
          {
            v17 = v26[1];
            v20 = (_QWORD *)v26[0];
          }
          if (v17 >= 13)
          {
            v21 = (char *)v20 + v17;
            v22 = v20;
            do
            {
              v23 = (char *)memchr(v22, 117, v17 - 12);
              if (!v23)
                break;
              if (*(_QWORD *)v23 == 0x676174732F647375 && *(_QWORD *)(v23 + 5) == 0x7070632E65676174)
                goto LABEL_41;
              v22 = v23 + 1;
              v17 = v21 - (_BYTE *)v22;
            }
            while (v21 - (_BYTE *)v22 > 12);
            v23 = v21;
LABEL_41:
            v13 = v23 != v21 && v23 - (char *)v20 != -1;
            if (v18 < 0)
LABEL_48:
              operator delete(v19);
          }
          else
          {
            v13 = 0;
            if ((char)v27 < 0)
              goto LABEL_48;
          }
          v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
      }
      if (v7 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v13)
        {
LABEL_19:
          v14 = (__int128 *)(*v2 + 40);
          v15 = a1[3];
          if (v15 >= a1[4])
          {
            v16 = sub_20BF3E2A4(v5, v14);
          }
          else
          {
            sub_20BE4EDF4(v5, v14);
            v16 = v15 + 24;
          }
          a1[3] = v16;
        }
      }
      else if (v13)
      {
        goto LABEL_19;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_20C68C780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsMissingReferenceChecker::CheckUnresolvedPaths(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  _QWORD v20[5];

  v3 = *(uint64_t **)a2;
  v4 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (*(uint64_t **)a2 != v4)
  {
    v6 = a1 + 2;
    v7 = (uint64_t)(a1 + 4);
    do
    {
      v8 = v3;
      if (*((char *)v3 + 23) < 0)
        v8 = (uint64_t *)*v3;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found unresolvable external dependency '%s'.", a2, a3, v8);
      v10 = a1[3];
      v9 = a1[4];
      if (v10 >= v9)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v6) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v6) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        v20[4] = v7;
        if (v14)
          v15 = (char *)sub_20BDE4FF4(v7, v14);
        else
          v15 = 0;
        v16 = &v15[24 * v11];
        v20[0] = v15;
        v20[1] = v16;
        v20[3] = &v15[24 * v14];
        *((_QWORD *)v16 + 2) = v19;
        *(_OWORD *)v16 = *(_OWORD *)__p;
        v19 = 0;
        *(_OWORD *)__p = 0uLL;
        v20[2] = v16 + 24;
        sub_20BDF34C0(v6, v20);
        v17 = a1[3];
        sub_20BDF3648((uint64_t)v20);
        a1[3] = v17;
      }
      else
      {
        *(_QWORD *)(v10 + 16) = v19;
        *(_OWORD *)v10 = *(_OWORD *)__p;
        a1[3] = v10 + 24;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_20C68C924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsStageMetadataChecker::CheckStage(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  const char *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdStage *v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v34;
  unint64_t v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::UsdStage *v37;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  void *__p[2];
  uint64_t v44;
  unint64_t v45;
  char *v46;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5)
    v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v5 + 1184)) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 9))
    {
      sub_20C696CA8((uint64_t *)&v46, a2);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis((uint64_t *)&v46, (unsigned int **)&v45);
      v8 = v47;
      if (v47)
      {
        v9 = (unsigned int *)((char *)v47 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v8 + 8))(v8);
      }
      v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v12)
        v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v13 = v45;
      v14 = v45 & 0xFFFFFFFFFFFFFFF8;
      if ((v45 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v12 + 168) & 0xFFFFFFFFFFFFFFF8))
      {
        if (v14)
        {
          v15 = (const char *)(v14 + 16);
          if (*(char *)(v14 + 39) < 0)
            v15 = *(const char **)v15;
        }
        else
        {
          v15 = "";
        }
        v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v18)
          v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v19 = *((_QWORD *)v18 + 168) & 0xFFFFFFFFFFFFFFF8;
        if (v19)
        {
          v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0)
            v20 = *(const char **)v20;
        }
        else
        {
          v20 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Stage specifies upAxis '%s'.upAxis should be '%s'", v6, v7, v15, v20);
        v21 = *(_QWORD *)(a1 + 32);
        v22 = *(_QWORD *)(a1 + 24);
        if (v22 >= v21)
        {
          v23 = *(_QWORD *)(a1 + 16);
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v23) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v23) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v25;
          v50 = a1 + 32;
          if (v27)
            v28 = (char *)sub_20BDE4FF4(a1 + 32, v27);
          else
            v28 = 0;
          v29 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v28[24 * v24];
          v46 = v28;
          v47 = v29;
          v49 = (unint64_t)&v28[24 * v27];
          *((_QWORD *)v29 + 2) = v44;
          *(_OWORD *)v29 = *(_OWORD *)__p;
          v48 = (_QWORD *)((char *)v29 + 24);
          sub_20BDF34C0((uint64_t *)(a1 + 16), &v46);
          v30 = *(_QWORD *)(a1 + 24);
          sub_20BDF3648((uint64_t)&v46);
          *(_QWORD *)(a1 + 24) = v30;
        }
        else
        {
          *(_QWORD *)(v22 + 16) = v44;
          *(_OWORD *)v22 = *(_OWORD *)__p;
          *(_QWORD *)(a1 + 24) = v22 + 24;
        }
        v13 = v45;
      }
      if ((v13 & 7) != 0)
      {
        v31 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (v16 >= *(_QWORD *)(a1 + 32))
    {
      v17 = sub_20C696BA4((uint64_t *)(a1 + 16), "Stage does not specify an upAxis.");
    }
    else
    {
      sub_20BDDC0E4(*(_QWORD **)(a1 + 24), "Stage does not specify an upAxis.");
      v17 = v16 + 24;
      *(_QWORD *)(a1 + 24) = v16 + 24;
    }
    *(_QWORD *)(a1 + 24) = v17;
  }
  v33 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a2);
  v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v34)
    v34 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v33, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v34 + 560)) & 1) == 0)
  {
    v35 = *(_QWORD *)(a1 + 24);
    if (v35 >= *(_QWORD *)(a1 + 32))
    {
      v36 = sub_20C696D64((uint64_t *)(a1 + 16), "Stage does not specify its linear scale in metersPerUnit.");
    }
    else
    {
      sub_20BDDC0E4(*(_QWORD **)(a1 + 24), "Stage does not specify its linear scale in metersPerUnit.");
      v36 = v35 + 24;
      *(_QWORD *)(a1 + 24) = v35 + 24;
    }
    *(_QWORD *)(a1 + 24) = v36;
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v37 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(v37, (uint64_t)&v46);
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v46, v38) & 1) == 0)
    {
      v39 = *(_QWORD *)(a1 + 24);
      if (v39 >= *(_QWORD *)(a1 + 32))
      {
        v40 = sub_20C696E68((uint64_t *)(a1 + 16), "Stage has missing or invalid defaultPrim.");
      }
      else
      {
        sub_20BDDC0E4(*(_QWORD **)(a1 + 24), "Stage has missing or invalid defaultPrim.");
        v40 = v39 + 24;
        *(_QWORD *)(a1 + 24) = v39 + 24;
      }
      *(_QWORD *)(a1 + 24) = v40;
    }
    if ((v49 & 7) != 0)
    {
      v41 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
    sub_20BFD265C(&v48);
    if (v47)
      sub_20C35C614(v47);
  }
}

void sub_20C68CD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20)
{
  unsigned int *v20;
  unsigned int v21;

  if ((a18 & 7) != 0)
  {
    v20 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckStage(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t *FileFormat;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v3, &v13);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v13);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v4);
  v6 = sub_20BFCF6F4(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) & 1) != 0 || *(_BYTE *)(a1 + 9))
  {
    *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    sub_20BDDC0E4(__p, "Not performing texture format checks for general USD asset.");
    pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg(a1, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  result = v14;
  if (v14)
  {
    v8 = (unsigned int *)(v14 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C68CE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int *a17)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  if (a15 < 0)
    operator delete(__p);
  if (a17)
  {
    v18 = a17 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *i;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  __int128 v25;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v30;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v31;
  void (**v32)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  uint64_t v33;
  uint64_t v34;

  if (*((_BYTE *)this + 88))
  {
    v4 = *((_QWORD *)a2 + 1);
    if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), a2);
    if (**(_QWORD **)(v4 + 24))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32, a2);
      v34 = 0;
      v32 = off_24C53D618;
      if (v33
        && (*(_BYTE *)(v33 + 57) & 8) == 0
        && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v32))
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v32, 1, (uint64_t *)&v30);
        v5 = v30;
        for (i = v31; v5 != i; v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v5 + 32))
        {
          sub_20C348EEC((uint64_t)v5, &v28);
          v24[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v5);
          v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v7)
            v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v24, (_QWORD **)v7 + 12))
          {
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v24);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v24);
            v8 = v27;
            v9 = v27;
            if (v10)
            {
              if ((v27 & 0x80u) != 0)
                v8 = v26;
              if (v8)
              {
                pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckTexture((uint64_t)this, (const char *)&v25 + 8, (char *)&v28);
                v9 = v27;
              }
            }
            if ((v9 & 0x80) != 0)
              operator delete(*((void **)&v25 + 1));
            if (SBYTE7(v25) < 0)
              operator delete(v24[0]);
          }
          else
          {
            v24[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v5);
            v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v11)
              v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v24, (_QWORD **)v11 + 69))
            {
              v26 = 0;
              *(_OWORD *)v24 = 0u;
              v25 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v24);
              if (v14)
              {
                sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v12, v13);
                v15 = v26;
                sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v16, v17);
                v18 = v26 + 48 * (uint64_t)v24[0];
                while (v15 != v18)
                {
                  if (*(char *)(v15 + 47) < 0)
                  {
                    sub_20BDDBFAC(v22, *(void **)(v15 + 24), *(_QWORD *)(v15 + 32));
                  }
                  else
                  {
                    v19 = *(_OWORD *)(v15 + 24);
                    v23 = *(_QWORD *)(v15 + 40);
                    *(_OWORD *)v22 = v19;
                  }
                  v20 = (void *)HIBYTE(v23);
                  v21 = HIBYTE(v23);
                  if (v23 < 0)
                    v20 = v22[1];
                  if (v20)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckTexture((uint64_t)this, (const char *)v22, (char *)&v28);
                    v21 = HIBYTE(v23);
                  }
                  if (v21 < 0)
                    operator delete(v22[0]);
                  v15 += 48;
                }
              }
              sub_20C00A724(v24);
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
          sub_20BFD265C(&v28);
        }
        v24[0] = &v30;
        sub_20C5BE4A8((void ***)v24);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v32);
    }
  }
}

void sub_20C68D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a29);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckTexture(uint64_t a1, const char *a2, char *a3)
{
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t *Resolver;
  uint64_t *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *String;
  const char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  std::string::size_type v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  std::string v36;
  std::string __p;
  char *v38;
  uint64_t v39;

  if (a2[23] >= 0)
    v6 = (uint64_t *)a2;
  else
    v6 = *(uint64_t **)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking texture <%s>", a2, a3, v6);
  v7 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v7);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::TfStringToLower((uint64_t *)&v36, &__p);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v36 = __p;
  if (!*(_BYTE *)(a1 + 9) || a1 + 128 == sub_20BDEEBA4(a1 + 120, (const void **)&v36.__r_.__value_.__l.__data_))
  {
    if (a1 + 104 != sub_20BDEEBA4(a1 + 96, (const void **)&v36.__r_.__value_.__l.__data_))
      goto LABEL_45;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if (*((char *)String + 23) >= 0)
      v25 = (uint64_t)String;
    else
      v25 = *String;
    if (a2[23] >= 0)
      v26 = (uint64_t *)a2;
    else
      v26 = *(uint64_t **)a2;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Texture <%s> with asset @%s@ has an unknown/unsupported file format.", v23, v24, v25, v26);
    v14 = a1 + 32;
    v27 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 24);
    if (v16 >= v27)
    {
      v28 = *(_QWORD *)(a1 + 16);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v28) >> 3);
      v29 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v28) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      else
        v21 = v29;
      v39 = a1 + 32;
      if (!v21)
      {
        v31 = 0;
        goto LABEL_44;
      }
      goto LABEL_41;
    }
LABEL_33:
    *(_QWORD *)(v16 + 16) = v35;
    *(_OWORD *)v16 = *(_OWORD *)v34;
    *(_QWORD *)(a1 + 24) = v16 + 24;
    goto LABEL_45;
  }
  v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if (*((char *)v9 + 23) >= 0)
    v12 = (uint64_t)v9;
  else
    v12 = *v9;
  if (a2[23] >= 0)
    v13 = (uint64_t *)a2;
  else
    v13 = *(uint64_t **)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Texture <%s> with asset @%s@ has non-portable file format", v10, v11, v12, v13);
  v14 = a1 + 32;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 24);
  if (v16 < v15)
    goto LABEL_33;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v17) >> 3);
  v19 = v18 + 1;
  if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v17) >> 3);
  if (2 * v20 > v19)
    v19 = 2 * v20;
  if (v20 >= 0x555555555555555)
    v21 = 0xAAAAAAAAAAAAAAALL;
  else
    v21 = v19;
  v39 = a1 + 32;
  if (!v21)
  {
    v31 = 0;
    goto LABEL_44;
  }
LABEL_41:
  v31 = (char *)sub_20BDE4FF4(v14, v21);
LABEL_44:
  v32 = (std::string::size_type)&v31[24 * v18];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  __p.__r_.__value_.__l.__size_ = v32;
  v38 = &v31[24 * v21];
  *(_QWORD *)(v32 + 16) = v35;
  *(_OWORD *)v32 = *(_OWORD *)v34;
  __p.__r_.__value_.__r.__words[2] = v32 + 24;
  sub_20BDF34C0((uint64_t *)(a1 + 16), &__p);
  v33 = *(_QWORD *)(a1 + 24);
  sub_20BDF3648((uint64_t)&__p);
  *(_QWORD *)(a1 + 24) = v33;
LABEL_45:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_20C68D580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_20BDF3648((uint64_t)&a24);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_20C68D5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    JUMPOUT(0x20C68D5D0);
  JUMPOUT(0x20C68D5D4);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::ResetCaches(pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *this)
{
  pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = this;
  v2 = (_QWORD *)((char *)this + 96);
  sub_20C6969B4((uint64_t)this + 88, *((_QWORD **)this + 12));
  *((_QWORD *)v1 + 11) = v2;
  *v2 = 0;
  v3 = (_QWORD *)*((_QWORD *)v1 + 15);
  v1 = (pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *)((char *)v1 + 120);
  *((_QWORD *)v1 - 2) = 0;
  sub_20C696900((uint64_t)v1 - 8, v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *this, pxrInternal__aapl__pxrReserved__ **a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *v4;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  uint64_t *SchemaInfo;
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *IsA;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  uint64_t *String;
  const char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (**v23)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  void (**v24)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  const pxrInternal__aapl__pxrReserved__::TfType *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  const pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  const pxrInternal__aapl__pxrReserved__::TfType *v39;
  uint64_t *v40;
  char *v41;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v42;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  pxrInternal__aapl__pxrReserved__ *v45;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  pxrInternal__aapl__pxrReserved__ *v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  unint64_t v49;
  const char *v50;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  pxrInternal__aapl__pxrReserved__ *v53;
  unint64_t v54;
  const char *v55;
  uint64_t *v56;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  uint64_t *v62;
  uint64_t v63;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v64;
  char *v65;
  unint64_t v66;
  const char *v67;
  pxrInternal__aapl__pxrReserved__ *v68;
  unint64_t v69;
  const char *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t *v75;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v76;
  char *v77;
  uint64_t v78;
  pxrInternal__aapl__pxrReserved__ *v79;
  unint64_t v80;
  const char *v81;
  int v82;
  int v83;
  void *v84[2];
  char v85;
  __int128 v86;
  int v87;
  int v88;
  uint64_t v89;
  void *__p[2];
  void (*v91)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  uint64_t v92;
  int v93;
  pxrInternal__aapl__pxrReserved__ *v94;
  int v95;
  int v96;
  uint64_t v97;
  void (**v98)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  void (**v99)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  char *v100;
  void (**v101)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  char *v102;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)sub_20C3AD22C((uint64_t)a2, (uint64_t)&v93);
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(v4);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v6);
  IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v8);
  if ((_DWORD)IsA)
  {
    IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v93, v10);
    if ((_DWORD)IsA)
    {
      IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::HasGprimAncestor((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v93);
      if ((_DWORD)IsA)
      {
        sub_20C348EEC((uint64_t)a2, (int *)&v86);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v86);
        if (*((char *)String + 23) >= 0)
          v14 = (uint64_t)String;
        else
          v14 = *String;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Gprim <%s> has an ancestor prim that is also a Gprim, which is not allowed.", v12, v13, v14);
        v15 = *((_QWORD *)this + 4);
        v16 = *((_QWORD *)this + 3);
        if (v16 >= v15)
        {
          v18 = *((_QWORD *)this + 2);
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v18) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v18) >> 3);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v20;
          v102 = (char *)this + 32;
          if (v22)
            v23 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden))sub_20BDE4FF4((uint64_t)this + 32, v22);
          else
            v23 = 0;
          v24 = &v23[3 * v19];
          v98 = v23;
          v99 = v24;
          v101 = &v23[3 * v22];
          v25 = *(_OWORD *)__p;
          v24[2] = v91;
          *(_OWORD *)v24 = v25;
          __p[1] = 0;
          v91 = 0;
          __p[0] = 0;
          v100 = (char *)(v24 + 3);
          sub_20BDF34C0((uint64_t *)this + 2, &v98);
          v26 = *((_QWORD *)this + 3);
          sub_20BDF3648((uint64_t)&v98);
          v27 = SHIBYTE(v91);
          *((_QWORD *)this + 3) = v26;
          if (v27 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v17 = *(_OWORD *)__p;
          *(_QWORD *)(v16 + 16) = v91;
          *(_OWORD *)v16 = v17;
          __p[1] = 0;
          v91 = 0;
          __p[0] = 0;
          *((_QWORD *)this + 3) = v16 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
        IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)sub_20BFD265C(&v86);
      }
    }
  }
  v28 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(IsA);
  v30 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v28, v29);
  v32 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, v30, v31);
  if ((v32 & 1) == 0)
  {
    v33 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v32);
    v35 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v33, v34);
    v37 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, v35, v36);
    if ((v37 & 1) != 0
      || (v38 = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v37),
          v40 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v38, v39), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, v40, v41)))
    {
      v42 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v98, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a2);
      v101 = 0;
      v98 = off_24C53D618;
      if (v99
        && (*((_BYTE *)v99 + 57) & 8) == 0
        && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible(v42)
        && pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v93, v43))
      {
        v45 = a2[1];
        if (!v45 || (*((_BYTE *)v45 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v44);
        if (**((_QWORD **)v45 + 3))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v93);
          v92 = 0;
          __p[0] = off_24C53D618;
          if (!__p[1]
            || (*((_BYTE *)__p[1] + 57) & 8) != 0
            || !pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p)
            || (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p) & 1) != 0)
          {
            goto LABEL_48;
          }
          v47 = v94;
          if (!v94 || (*((_BYTE *)v94 + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v94, v46);
          if (**((_QWORD **)v47 + 3))
          {
            v48 = a2[1];
            if (!v48 || (*((_BYTE *)v48 + 57) & 8) != 0)
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v46);
            v49 = **((_QWORD **)v48 + 3) & 0xFFFFFFFFFFFFFFF8;
            if (v49)
            {
              v50 = (const char *)(v49 + 16);
              if (*(char *)(v49 + 39) < 0)
                v50 = *(const char **)v50;
            }
            else
            {
              v50 = "";
            }
            sub_20C348EEC((uint64_t)a2, (int *)v84);
            v75 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v84);
            if (*((char *)v75 + 23) >= 0)
              v78 = (uint64_t)v75;
            else
              v78 = *v75;
            v79 = v94;
            if (!v94 || (*((_BYTE *)v94 + 57) & 8) != 0)
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v94, v76);
            v80 = **((_QWORD **)v79 + 3) & 0xFFFFFFFFFFFFFFF8;
            if (v80)
            {
              v81 = (const char *)(v80 + 16);
              if (*(char *)(v80 + 39) < 0)
                v81 = *(const char **)v81;
            }
            else
            {
              v81 = "";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connectable %s <%s> cannot reside under a non-Container Connectable %s", (const char *)v76, v77, v50, v78, v81);
            sub_20C68C1A4((uint64_t *)this + 2, &v86);
            if (SHIBYTE(v88) < 0)
              operator delete((void *)v86);
            sub_20BFD1A18(v84);
          }
          else
          {
LABEL_48:
            if (!v99
              || (*((_BYTE *)v99 + 57) & 8) != 0
              || !((BOOL (*)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *))v98[4])((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v98))
            {
              pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::FindConnectableAncestor((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v93, (uint64_t)&v86);
              if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v86, v51))
              {
                v53 = a2[1];
                if (!v53 || (*((_BYTE *)v53 + 57) & 8) != 0)
                  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v52);
                v54 = **((_QWORD **)v53 + 3) & 0xFFFFFFFFFFFFFFF8;
                if (v54)
                {
                  v55 = (const char *)(v54 + 16);
                  if (*(char *)(v54 + 39) < 0)
                    v55 = *(const char **)v55;
                }
                else
                {
                  v55 = "";
                }
                sub_20C348EEC((uint64_t)a2, &v83);
                v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
                if (*((char *)v56 + 23) >= 0)
                  v58 = (uint64_t)v56;
                else
                  v58 = *v56;
                v59 = *((_QWORD *)&v86 + 1);
                if (!*((_QWORD *)&v86 + 1) || (*(_BYTE *)(*((_QWORD *)&v86 + 1) + 57) & 8) != 0)
                  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v86 + 1), v57);
                v60 = **(_QWORD **)(v59 + 24) & 0xFFFFFFFFFFFFFFF8;
                if (v60)
                {
                  v61 = (const char *)(v60 + 16);
                  if (*(char *)(v60 + 39) < 0)
                    v61 = *(const char **)v61;
                }
                else
                {
                  v61 = "";
                }
                sub_20C348EEC((uint64_t)&v86, &v82);
                v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v82);
                if (*((char *)v62 + 23) >= 0)
                  v63 = (uint64_t)v62;
                else
                  v63 = *v62;
                v66 = *(_QWORD *)sub_20C398E78(&v93) & 0xFFFFFFFFFFFFFFF8;
                if (v66)
                {
                  v67 = (const char *)(v66 + 16);
                  if (*(char *)(v66 + 39) < 0)
                    v67 = *(const char **)v67;
                }
                else
                {
                  v67 = "";
                }
                v68 = v94;
                if (!v94 || (*((_BYTE *)v94 + 57) & 8) != 0)
                  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v94, v64);
                v69 = **((_QWORD **)v68 + 3) & 0xFFFFFFFFFFFFFFF8;
                if (v69)
                {
                  v70 = (const char *)(v69 + 16);
                  if (*(char *)(v69 + 39) < 0)
                    v70 = *(const char **)v70;
                }
                else
                {
                  v70 = "";
                }
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connectabe %s <%s> can only have Connectable Container ancestors up to %s ancestor <%s>, but parent %s is a %s", (const char *)v64, v65, v55, v58, v61, v63, v67, v70);
                sub_20C68C1A4((uint64_t *)this + 2, (__int128 *)v84);
                if (v85 < 0)
                  operator delete(v84[0]);
                sub_20BFD1A18(&v82);
                sub_20BFD1A18(&v83);
              }
              if ((v89 & 7) != 0)
              {
                v71 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
                do
                  v72 = __ldxr(v71);
                while (__stlxr(v72 - 2, v71));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v88);
              sub_20BFD265C(&v87);
              if (*((_QWORD *)&v86 + 1))
                sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v86 + 1));
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v98);
    }
  }
  if ((v97 & 7) != 0)
  {
    v73 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v96);
  sub_20BFD265C(&v95);
  if (v94)
    sub_20C35C614(v94);
}

void sub_20C68DC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a33);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v38 - 104));
  sub_20C35C2E0(v38 - 136);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::HasGprimAncestor(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t IsA;
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *HasGprimAncestor;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t *SchemaInfo;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  int *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20[3];
  int *v21;

  sub_20C348EEC((uint64_t)a2, v20);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFE4AF0((uint64_t)(this + 11), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v20);
  if (this + 12 == (uint64_t **)v4)
  {
    v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
    if (*(_QWORD *)v20 == *v6)
    {
      v15 = v20;
      IsA = 0;
      *((_BYTE *)sub_20C696F6C(this + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20, (uint64_t)&unk_20CAC184C, &v15)+ 36) = 0;
    }
    else
    {
      sub_20C3AD22C((uint64_t)a2, (uint64_t)&v15);
      HasGprimAncestor = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::HasGprimAncestor((pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
      if ((HasGprimAncestor & 1) != 0)
      {
        IsA = 1;
      }
      else
      {
        StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(HasGprimAncestor);
        SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v9);
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v11);
      }
      v21 = v20;
      *((_BYTE *)sub_20C696F6C(this + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20, (uint64_t)&unk_20CAC184C, &v21)+ 36) = IsA;
      if ((v19 & 7) != 0)
      {
        v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_20BFD265C(&v17);
      if (v16)
        sub_20C35C614(v16);
    }
  }
  else
  {
    v15 = v20;
    IsA = *((_BYTE *)sub_20C696F6C(this + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20, (uint64_t)&unk_20CAC184C, &v15)+ 36) != 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20[1]);
  sub_20BFD265C(v20);
  return IsA;
}

void sub_20C68DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::FindConnectableAncestor@<X0>(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void (**v40)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  sub_20C348EEC((uint64_t)a2, (int *)&v48);
  v6 = this + 14;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C33FFFC((uint64_t)(this + 14), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
  if (this + 15 == (uint64_t **)v7)
  {
    v15 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    if (v48 == *v15)
    {
      LODWORD(v43) = 1;
      v44 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v45);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v46);
      v47 = 0;
      v40 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden))&v48;
      v16 = sub_20C697070(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (uint64_t)&unk_20CAC184C, (_DWORD **)&v40);
      *((_DWORD *)v16 + 10) = (_DWORD)v43;
      v17 = v44;
      v44 = 0;
      v18 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v16[6];
      v16[6] = (uint64_t)v17;
      if (v18)
        sub_20C35C614(v18);
      sub_20BFD3EBC((int *)v16 + 14, &v45);
      sub_20BFD3F10((int *)v16 + 15, &v46);
      if (&v43 == (uint64_t **)(v16 + 5))
      {
        if ((v47 & 7) != 0)
        {
          v37 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        v19 = v16[8];
        if ((v19 & 7) != 0)
        {
          v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stlxr(v21 - 2, v20));
        }
        v16[8] = v47;
        v47 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
      sub_20BFD265C(&v45);
      if (v44)
        sub_20C35C614(v44);
      *(_DWORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
      *(_QWORD *)(a3 + 24) = 0;
    }
    else
    {
      sub_20C3AD22C((uint64_t)a2, (uint64_t)&v43);
      pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::FindConnectableAncestor((pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v43);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v22) & 1) == 0)
      {
        v24 = *((_QWORD *)a2 + 1);
        if (!v24 || (*(_BYTE *)(v24 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v23);
        if (**(_QWORD **)(v24 + 24))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v40, a2);
          v42 = 0;
          v40 = off_24C53D618;
          if (v41
            && (*(_BYTE *)(v41 + 57) & 8) == 0
            && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v40))
          {
            *(_DWORD *)a3 = *(_DWORD *)a2;
            v25 = *((_QWORD *)a2 + 1);
            if (v25)
            {
              v26 = (unint64_t *)(v25 + 48);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            v28 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a3 + 8);
            *(_QWORD *)(a3 + 8) = v25;
            if (v28)
              sub_20C35C614(v28);
            sub_20C01A074((int *)(a3 + 16), (_DWORD *)a2 + 4);
            sub_20C01A0C8((int *)(a3 + 20), (_DWORD *)a2 + 5);
            sub_20BF32220((_QWORD *)(a3 + 24), (_QWORD *)a2 + 3);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v40);
        }
      }
      v40 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden))&v48;
      v29 = sub_20C697070(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (uint64_t)&unk_20CAC184C, (_DWORD **)&v40);
      v30 = v29;
      *((_DWORD *)v29 + 10) = *(_DWORD *)a3;
      v31 = *(_QWORD *)(a3 + 8);
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 48);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v29[6];
      v30[6] = v31;
      if (v34)
        sub_20C35C614(v34);
      sub_20C01A074((int *)v30 + 14, (_DWORD *)(a3 + 16));
      sub_20C01A0C8((int *)v30 + 15, (_DWORD *)(a3 + 20));
      sub_20BF32220(v30 + 8, (_QWORD *)(a3 + 24));
      if ((v47 & 7) != 0)
      {
        v35 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
      sub_20BFD265C(&v45);
      if (v44)
        sub_20C35C614(v44);
    }
  }
  else
  {
    v43 = &v48;
    v8 = sub_20C697070(this + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (uint64_t)&unk_20CAC184C, (_DWORD **)&v43);
    *(_DWORD *)a3 = *((_DWORD *)v8 + 10);
    v9 = v8[6];
    *(_QWORD *)(a3 + 8) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 48);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_20BFD6E54((_DWORD *)(a3 + 16), (_DWORD *)v8 + 14);
    sub_20BFD6EA4((_DWORD *)(a3 + 20), (_DWORD *)v8 + 15);
    v12 = v8[8];
    *(_QWORD *)(a3 + 24) = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  return sub_20BFD265C(&v48);
}

void sub_20C68E358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a9);
  sub_20C35C2E0(v17);
  sub_20C35C2E0((uint64_t)&a13);
  sub_20BFD1A18(&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  uint64_t *SchemaInfo;
  char *v7;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v8;
  uint64_t v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v11;
  uint64_t *v12;
  _DWORD *v13;
  BOOL v14;
  uint64_t *String;
  const char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *v34;
  _DWORD *v35;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v41;
  int v42;
  unint64_t v43;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  unsigned int *v45;
  unsigned int v46;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v47;
  int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  const char *v53;
  BOOL IsCompatible;
  const char *v55;
  char *v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  const char *v62;
  uint64_t *v63;
  const char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t *v78;
  const char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned int *v83;
  unsigned int v84;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v85;
  unsigned int *v86;
  unsigned int v87;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v88;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v89;
  int v90;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v91;
  char v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  const char *v96;
  uint64_t *v97;
  const char *v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v104;
  const char *v105;
  uint64_t *v106;
  const char *v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  const char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  void *v115[2];
  char v116;
  int v117[8];
  uint64_t v118;
  uint64_t v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125[2];
  char v126;
  void *__p;
  __int128 v128;
  unint64_t v129;
  char *v130;
  unsigned __int8 v131;
  _BYTE v132[32];
  uint64_t v133;
  void (**v134)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v135;
  char v136[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (**v149)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v150;
  __int128 v151;
  _QWORD v152[2];
  int v153;
  unsigned int v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(this);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v5);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v7))
  {
    v8 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v149, a2);
    v149 = off_24C53DB40;
    if (!v150
      || (*(_BYTE *)(v150 + 57) & 8) != 0
      || (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v8) & 1) == 0)
    {
      sub_20C348EEC((uint64_t)a2, &v141);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v141);
      if (*((char *)String + 23) >= 0)
        v18 = (uint64_t)String;
      else
        v18 = *String;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid shader prim <%s>", v16, v17, v18);
      v19 = *((_QWORD *)this + 7);
      v20 = *((_QWORD *)this + 6);
      if (v20 >= v19)
      {
        v22 = *((_QWORD *)this + 5);
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v22) >> 3);
        v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v22) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v24;
        v130 = (char *)this + 56;
        if (v26)
          v27 = (char *)sub_20BDE4FF4((uint64_t)this + 56, v26);
        else
          v27 = 0;
        v28 = &v27[24 * v23];
        __p = v27;
        *(_QWORD *)&v128 = v28;
        v129 = (unint64_t)&v27[24 * v26];
        v29 = v151;
        *((_QWORD *)v28 + 2) = v152[0];
        *(_OWORD *)v28 = v29;
        v152[0] = 0;
        v151 = 0uLL;
        *((_QWORD *)&v128 + 1) = v28 + 24;
        sub_20BDF34C0((uint64_t *)this + 5, &__p);
        v30 = *((_QWORD *)this + 6);
        sub_20BDF3648((uint64_t)&__p);
        v31 = SHIBYTE(v152[0]);
        *((_QWORD *)this + 6) = v30;
        if (v31 < 0)
          operator delete((void *)v151);
      }
      else
      {
        v21 = v151;
        *(_QWORD *)(v20 + 16) = v152[0];
        *(_OWORD *)v20 = v21;
        v152[0] = 0;
        v151 = 0uLL;
        *((_QWORD *)this + 6) = v20 + 24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v142);
      sub_20BFD265C(&v141);
      goto LABEL_35;
    }
    v148 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v149, (pxrInternal__aapl__pxrReserved__::TfToken *)&v148);
    v9 = v148;
    if ((v148 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_123:
      if ((v9 & 7) != 0)
      {
        v76 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
LABEL_35:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v149);
      return;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v147, "normal");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v149, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v147, (uint64_t)&v141);
    if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v10)|| (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v141, v11) & 1) == 0)
    {
LABEL_114:
      if ((v146 & 7) != 0)
      {
        v72 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
      sub_20BFD265C(&v144);
      if (v143)
        sub_20C35C614(v143);
      if ((v147 & 7) != 0)
      {
        v74 = (unsigned int *)(v147 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      v9 = v148;
      goto LABEL_123;
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)&v141, 0, (uint64_t)&v151);
    if (!v153)
      goto LABEL_113;
    if (v154 >= 2)
      v12 = (uint64_t *)(v151 + 8);
    else
      v12 = (uint64_t *)&v151 + 1;
    if (v154 >= 2)
      v13 = (_DWORD *)(v151 + 16);
    else
      v13 = v152;
    sub_20C35C4F8((uint64_t)&__p, v12, v13);
    v14 = (_DWORD)__p == *(_DWORD *)a2
       && v128 == *(_OWORD *)((char *)a2 + 8)
       && (v129 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8);
    if ((v129 & 7) != 0)
    {
      v32 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v128 + 3);
    sub_20BFD265C((_DWORD *)&v128 + 2);
    if ((_QWORD)v128)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v128);
    if (v14)
    {
LABEL_113:
      sub_20C5C9ACC((uint64_t)&v151);
      goto LABEL_114;
    }
    if (v154 >= 2)
      v34 = (uint64_t *)(v151 + 8);
    else
      v34 = (uint64_t *)&v151 + 1;
    if (v154 >= 2)
      v35 = (_DWORD *)(v151 + 16);
    else
      v35 = v152;
    sub_20C35C4F8((uint64_t)v136, v34, v35);
    v36 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v134, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v136);
    v134 = off_24C53DB40;
    if (!v135
      || (*(_BYTE *)(v135 + 57) & 8) != 0
      || (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v36) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v136);
      v129 = 0;
      __p = off_24C53D618;
      if (!(_QWORD)v128 || (*(_BYTE *)(v128 + 57) & 8) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__p);
      }
      else
      {
        IsCompatible = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__p);
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__p);
        if (IsCompatible)
        {
LABEL_108:
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v134);
          if ((v140 & 7) != 0)
          {
            v70 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
            do
              v71 = __ldxr(v70);
            while (__stlxr(v71 - 2, v70));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v139);
          sub_20BFD265C(&v138);
          if (v137)
            sub_20C35C614(v137);
          goto LABEL_113;
        }
      }
      v57 = *((_QWORD *)this + 14) & 0xFFFFFFFFFFFFFFF8;
      if (v57)
      {
        v58 = (const char *)(v57 + 16);
        if (*(char *)(v57 + 39) < 0)
          v58 = *(const char **)v58;
      }
      else
      {
        v58 = "";
      }
      v59 = v147 & 0xFFFFFFFFFFFFFFF8;
      if ((v147 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v60 = (const char *)(v59 + 16);
        if (*(char *)(v59 + 39) < 0)
          v60 = *(const char **)v60;
      }
      else
      {
        v60 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s on prim <%s> is connected to a non-Shader prim.", v55, v56, v58, v60);
      sub_20C68C1A4((uint64_t *)this + 2, (__int128 *)&__p);
      if (SHIBYTE(v128) < 0)
        operator delete(__p);
      goto LABEL_108;
    }
    v133 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v134, (pxrInternal__aapl__pxrReserved__::TfToken *)&v133);
    v37 = v133;
    if (!v133 || (v133 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_105:
      if ((v37 & 7) != 0)
      {
        v68 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      goto LABEL_108;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&__p, "file");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v134, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p, (uint64_t)v132);
    if ((__p & 7) != 0)
    {
      v38 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__p);
    if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v132, v40))goto LABEL_92;
    if (!pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v132, v41))goto LABEL_92;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v132, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
    if (!v42)
      goto LABEL_92;
    v43 = v131;
    if ((v131 & 0x80u) != 0)
      v43 = (unint64_t)v130;
    if (!v43)
    {
LABEL_92:
      v61 = *((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFF8;
      if (v61)
      {
        v62 = (const char *)(v61 + 16);
        if (*(char *)(v61 + 39) < 0)
          v62 = *(const char **)v62;
      }
      else
      {
        v62 = "";
      }
      sub_20C348EEC((uint64_t)v136, (int *)v120);
      v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v120);
      if (*((char *)v63 + 23) >= 0)
        v66 = (uint64_t)v63;
      else
        v66 = *v63;
      v67 = &v129;
      if ((v131 & 0x80u) != 0)
        v67 = (_QWORD *)v129;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s prim <%s> has invalid or unresolvable inputs:file of @%s@", v64, v65, v62, v66, v67);
      sub_20C68C1A4((uint64_t *)this + 2, (__int128 *)v125);
      if (v126 < 0)
        operator delete(v125[0]);
      sub_20BFD1A18(v120);
      goto LABEL_104;
    }
    if (!pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker::TextureIs8Bit(this, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__p))
    {
LABEL_104:
      sub_20BE930F8((uint64_t)&__p);
      sub_20C5BD350((uint64_t)v132);
      v37 = v133;
      goto LABEL_105;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v120, "sourceColorSpace");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v134, (const pxrInternal__aapl__pxrReserved__::TfToken *)v120, (uint64_t)v125);
    if (((uint64_t)v120[0] & 7) != 0)
    {
      v45 = (unsigned int *)((unint64_t)v120[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stlxr(v46 - 2, v45));
    }
    v124 = 0;
    if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v125, v44))goto LABEL_74;
    if (!pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v125, v47))goto LABEL_74;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v125, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v124);
    if (!v48)
      goto LABEL_74;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v120, "raw");
    v49 = v124 & 0xFFFFFFFFFFFFFFF8;
    v50 = (unsigned int *)((unint64_t)v120[0] & 0xFFFFFFFFFFFFFFF8);
    if (((uint64_t)v120[0] & 7) != 0)
    {
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((unsigned int *)v49 != v50)
    {
LABEL_74:
      v52 = *((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFF8;
      if (v52)
      {
        v53 = (const char *)(v52 + 16);
        if (*(char *)(v52 + 39) < 0)
          v53 = *(const char **)v53;
      }
      else
      {
        v53 = "";
      }
      sub_20C348EEC((uint64_t)v136, v117);
      v78 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v117);
      if (*((char *)v78 + 23) >= 0)
        v81 = (uint64_t)v78;
      else
        v81 = *v78;
      if ((v131 & 0x80u) == 0)
        v82 = &v129;
      else
        v82 = (_QWORD *)v129;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s prim <%s> that reads Normal Map @%s@ should set inputs:sourceColorSpace to 'raw'.", v79, v80, v53, v81, v82);
      sub_20C68C1A4((uint64_t *)this + 5, (__int128 *)v120);
      if (v121 < 0)
        operator delete(v120[0]);
      sub_20BFD1A18(v117);
    }
    v122 = 0;
    v123 = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v117, "bias");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v134, (const pxrInternal__aapl__pxrReserved__::TfToken *)v117, (uint64_t)v120);
    if ((v117[0] & 7) != 0)
    {
      v83 = (unsigned int *)(*(_QWORD *)v117 & 0xFFFFFFFFFFFFFFF8);
      do
        v84 = __ldxr(v83);
      while (__stlxr(v84 - 2, v83));
    }
    v118 = 0;
    v119 = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v115, "scale");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v134, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115, (uint64_t)v117);
    if (((uint64_t)v115[0] & 7) != 0)
    {
      v86 = (unsigned int *)((unint64_t)v115[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v87 = __ldxr(v86);
      while (__stlxr(v87 - 2, v86));
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v120, v85)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v120, v88)&& (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((uint64_t)v120, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v122), v90)&& pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v117, v89)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v117, v91)&& (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((uint64_t)v117, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v118), (v92 & 1) != 0))
    {
      if (*(float *)&v118 == 2.0 && *((float *)&v118 + 1) == 2.0 && *(float *)&v119 == 2.0)
      {
        if (*(float *)&v122 == -1.0 && *((float *)&v122 + 1) == -1.0 && *(float *)&v123 == -1.0)
        {
LABEL_172:
          sub_20C5BD350((uint64_t)v117);
          sub_20C5BD350((uint64_t)v120);
          if ((v124 & 7) != 0)
          {
            v102 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
            do
              v103 = __ldxr(v102);
            while (__stlxr(v103 - 2, v102));
          }
          sub_20C5BD350((uint64_t)v125);
          goto LABEL_104;
        }
        v93 = *((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFF8;
        if (v93)
        {
          v94 = (const char *)(v93 + 16);
          if (*(char *)(v93 + 39) < 0)
            v94 = *(const char **)v94;
        }
        else
        {
          v94 = "";
        }
        sub_20C348EEC((uint64_t)v136, &v114);
        v110 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v114);
        if (*((char *)v110 + 23) >= 0)
          v113 = (uint64_t)v110;
        else
          v113 = *v110;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s prim <%s> reads an 8 bit Normal Map, but has non-standard inputs:bias value of %f %f %f. inputs:bias must be set to [-1,-1,-1,0] so as to fullfill the requirements of the normals to be in tangent space of [(-1,-1,-1), (1,1,1)] as documented in the UsdPreviewSurface and UsdUVTexture docs.", v111, v112, v94, v113, *(float *)&v122, *((float *)&v122 + 1), *(float *)&v123);
        sub_20C68C1A4((uint64_t *)this + 5, (__int128 *)v115);
      }
      else
      {
        v104 = *((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFF8;
        if (v104)
        {
          v105 = (const char *)(v104 + 16);
          if (*(char *)(v104 + 39) < 0)
            v105 = *(const char **)v105;
        }
        else
        {
          v105 = "";
        }
        sub_20C348EEC((uint64_t)v136, &v114);
        v106 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v114);
        if (*((char *)v106 + 23) >= 0)
          v109 = (uint64_t)v106;
        else
          v109 = *v106;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s prim <%s> reads an 8 bit Normal Map, but has non-standard inputs:scale value of %f %f %f.inputs:scale must be set to (2, 2, 2, 1) so as fullfill the requirements of the normals to be in tangent space of [(-1,-1,-1), (1,1,1)] as documented in the UsdPreviewSurface and UsdUVTexture docs.", v107, v108, v105, v109, *(float *)&v118, *((float *)&v118 + 1), *(float *)&v119);
        sub_20C68C1A4((uint64_t *)this + 8, (__int128 *)v115);
      }
    }
    else
    {
      v95 = *((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFF8;
      if (v95)
      {
        v96 = (const char *)(v95 + 16);
        if (*(char *)(v95 + 39) < 0)
          v96 = *(const char **)v96;
      }
      else
      {
        v96 = "";
      }
      sub_20C348EEC((uint64_t)v136, &v114);
      v97 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v114);
      if (*((char *)v97 + 23) >= 0)
        v100 = (uint64_t)v97;
      else
        v100 = *v97;
      if ((v131 & 0x80u) == 0)
        v101 = &v129;
      else
        v101 = (_QWORD *)v129;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s prim <%s> reads 8 bit Normal Map @%s@, which requires that inputs:scale be set to (2, 2, 2, 1) and inputs:bias be set to (-1, -1, -1, 0) for proper interpretation as per the UsdPreviewSurface and UsdUVTexture docs.", v98, v99, v96, v100, v101);
      sub_20C68C1A4((uint64_t *)this + 5, (__int128 *)v115);
    }
    if (v116 < 0)
      operator delete(v115[0]);
    sub_20BFD1A18(&v114);
    goto LABEL_172;
  }
}

void sub_20C68EF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;

  if (a21 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a15);
  sub_20C5BD350((uint64_t)&a22);
  sub_20C5BD350((uint64_t)&a28);
  if ((a37 & 7) != 0)
  {
    v56 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  sub_20C5BD350((uint64_t)&a38);
  sub_20BE930F8((uint64_t)&a45);
  sub_20C5BD350((uint64_t)&a54);
  v58 = *(_QWORD *)(v54 - 248);
  if ((v58 & 7) != 0)
  {
    v59 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v54 - 240));
  sub_20C35C2E0(v54 - 216);
  sub_20C5C9ACC(v54 - 112);
  sub_20C5BD350(v54 - 184);
  v61 = *(_QWORD *)(v54 - 152);
  if ((v61 & 7) != 0)
  {
    v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
  v64 = *(_QWORD *)(v54 - 144);
  if ((v64 & 7) != 0)
  {
    v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v66 = __ldxr(v65);
    while (__stlxr(v66 - 2, v65));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v54 - 136));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker::TextureIs8Bit(pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *v4;
  void *__p;
  char v7;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *)sub_20BDEEBA4((uint64_t)this + 88, (const void **)&__p);
  if (v7 < 0)
    operator delete(__p);
  return (pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *)((char *)this + 96) != v4;
}

void sub_20C68F2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsMaterialBindingAPIAppliedChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsMaterialBindingAPIAppliedChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  char *v4;
  char *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v9;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  uint64_t *String;
  const char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  void *__p[2];
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(a2, (uint64_t *)&v34);
  v4 = v34;
  v5 = v35;
  if (v34 == v35)
  {
    __p[0] = &v34;
    sub_20C3AF230((void ***)__p);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = sub_20C398E78(v4);
      v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8)
        v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 13) & 0xFFFFFFFFFFFFFFF8))
        ++v6;
      v4 += 32;
    }
    while (v4 != v5);
    __p[0] = &v34;
    sub_20C3AF230((void ***)__p);
    if (v6)
    {
      StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(v9);
      SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v11);
      if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a2, SchemaInfo) & 1) == 0)
      {
        sub_20C348EEC((uint64_t)a2, &v30);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
        if (*((char *)String + 23) >= 0)
          v16 = (uint64_t)String;
        else
          v16 = *String;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found material bindings but no MaterialBindingAPI applied on the prim <%s>.", v14, v15, v16);
        v17 = *((_QWORD *)this + 4);
        v18 = *((_QWORD *)this + 3);
        if (v18 >= v17)
        {
          v20 = *((_QWORD *)this + 2);
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v22;
          v38 = (char *)this + 32;
          if (v24)
            v25 = (char *)sub_20BDE4FF4((uint64_t)this + 32, v24);
          else
            v25 = 0;
          v26 = &v25[24 * v21];
          v34 = v25;
          v35 = v26;
          v37 = &v25[24 * v24];
          v27 = *(_OWORD *)__p;
          *((_QWORD *)v26 + 2) = v33;
          *(_OWORD *)v26 = v27;
          __p[1] = 0;
          v33 = 0;
          __p[0] = 0;
          v36 = v26 + 24;
          sub_20BDF34C0((uint64_t *)this + 2, &v34);
          v28 = *((_QWORD *)this + 3);
          sub_20BDF3648((uint64_t)&v34);
          v29 = SHIBYTE(v33);
          *((_QWORD *)this + 3) = v28;
          if (v29 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v19 = *(_OWORD *)__p;
          *(_QWORD *)(v18 + 16) = v33;
          *(_OWORD *)v18 = v19;
          __p[1] = 0;
          v33 = 0;
          __p[0] = 0;
          *((_QWORD *)this + 3) = v18 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
        sub_20BFD265C(&v30);
      }
    }
  }
}

void sub_20C68F51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20BDF3648((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsSkelBindingAPIAppliedChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsSkelBindingAPIAppliedChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t **v4;
  unint64_t Instance;
  void **v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  void *v15;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  pxrInternal__aapl__pxrReserved__ *v24;
  _QWORD *v25;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v26;
  pxrInternal__aapl__pxrReserved__ *v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  unsigned int *v29;
  unsigned int v30;
  char ***v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  pxrInternal__aapl__pxrReserved__ *v35;
  unint64_t v36;
  const char *v37;
  uint64_t *String;
  const char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void **v50;
  uint64_t *v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void **v63;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t **v74;
  pxrInternal__aapl__pxrReserved__ *v75;
  int v76;
  int v77;
  void ***v78;
  int v79;
  int v80;
  void *__p[2];
  uint64_t v82;
  char **v83;
  void **v84;
  void **v85;
  void ***v86;
  char *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)((char *)this + 88);
  if (*((_QWORD *)this + 11) == *((_QWORD *)this + 12))
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "SkelBindingAPI");
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v74 = (uint64_t **)&v83;
    LOBYTE(v75) = 0;
    v6 = (void **)operator new(8uLL);
    v83 = (char **)v6;
    v84 = v6;
    v7 = (unint64_t)__p[0];
    *v6 = __p[0];
    v85 = v6 + 1;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *v6 = (void *)((unint64_t)*v6 & 0xFFFFFFFFFFFFFFF8);
    }
    v84 = v6 + 1;
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v10 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    __p[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::BuildComposedPrimDefinition(Instance, __p, (uint64_t)&v83, (char **)&v74);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (char *)v74;
    if (v4 != v74 + 10)
    {
      sub_20C106430(v4, v74[10], v74[11], v74[11] - v74[10]);
      v14 = (char *)v74;
    }
    v74 = 0;
    if (v14)
    {
      v15 = (void *)sub_20C358B18((uint64_t)v14);
      operator delete(v15);
    }
    v74 = (uint64_t **)&v83;
    sub_20BEEB2B8((void ***)&v74);
  }
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v17);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a2, SchemaInfo) & 1) != 0)
  {
    v20 = *((_QWORD *)a2 + 1);
    if (!v20 || (*(_BYTE *)(v20 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v19);
    v21 = *(_QWORD **)(v20 + 24);
    v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v22)
      v22 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if ((*v21 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v22 + 28) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD22C((uint64_t)a2, (uint64_t)&v74);
      while (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v74))
      {
        v24 = v75;
        if (!v75 || (*((_BYTE *)v75 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v75, v23);
        v25 = (_QWORD *)*((_QWORD *)v24 + 3);
        v26 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
        if (!v26)
          v26 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
        if ((*v25 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 28) & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_96;
        sub_20C3AD22C((uint64_t)&v74, (uint64_t)&v83);
        LODWORD(v74) = (_DWORD)v83;
        v27 = (pxrInternal__aapl__pxrReserved__ *)v84;
        v84 = 0;
        v28 = v75;
        v75 = v27;
        if (v28)
          sub_20C35C614(v28);
        sub_20BFD3EBC(&v76, (int *)&v85);
        sub_20BFD3F10(&v77, (int *)&v85 + 1);
        if ((v78 & 7) != 0)
        {
          v29 = (unsigned int *)((unint64_t)v78 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        v78 = v86;
        v86 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
        sub_20BFD265C(&v85);
        if (v84)
          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v84);
      }
      sub_20C348EEC((uint64_t)a2, &v79);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
      if (*((char *)String + 23) >= 0)
        v41 = (uint64_t)String;
      else
        v41 = *String;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelBindingAPI applied on a prim <%s>, which is not of type SkelRoot or is not rooted at a prim of type SkelRoot, as required by the UsdSkel schema.", v39, v40, v41);
      v42 = *((_QWORD *)this + 4);
      v43 = *((_QWORD *)this + 3);
      if (v43 >= v42)
      {
        v45 = *((_QWORD *)this + 2);
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v45) >> 3);
        v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v45) >> 3);
        if (2 * v48 > v47)
          v47 = 2 * v48;
        if (v48 >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v47;
        v87 = (char *)this + 32;
        if (v49)
          v50 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v49);
        else
          v50 = 0;
        v68 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v50[3 * v46];
        v83 = (char **)v50;
        v84 = (void **)v68;
        v86 = (void ***)&v50[3 * v49];
        v69 = *(_OWORD *)__p;
        *((_QWORD *)v68 + 2) = v82;
        *(_OWORD *)v68 = v69;
        __p[1] = 0;
        v82 = 0;
        __p[0] = 0;
        v85 = (void **)((char *)v68 + 24);
        sub_20BDF34C0((uint64_t *)this + 2, &v83);
        v70 = *((_QWORD *)this + 3);
        sub_20BDF3648((uint64_t)&v83);
        v71 = SHIBYTE(v82);
        *((_QWORD *)this + 3) = v70;
        if (v71 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v44 = *(_OWORD *)__p;
        *(_QWORD *)(v43 + 16) = v82;
        *(_OWORD *)v43 = v44;
        __p[1] = 0;
        v82 = 0;
        __p[0] = 0;
        *((_QWORD *)this + 3) = v43 + 24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
      sub_20BFD265C(&v79);
LABEL_96:
      if ((v78 & 7) != 0)
      {
        v72 = (unsigned int *)((unint64_t)v78 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v77);
      sub_20BFD265C(&v76);
      if (v75)
        sub_20C35C614(v75);
    }
    return;
  }
  v86 = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames((uint64_t)a2, (uint64_t)&v83, &v74);
  v31 = (char ***)v86;
  if (v86 == (void ***)&v83)
  {
    v32 = 4;
    v31 = &v83;
    goto LABEL_46;
  }
  if (v86)
  {
    v32 = 5;
LABEL_46:
    ((void (*)(void))(*v31)[v32])();
  }
  v33 = (_QWORD *)*((_QWORD *)this + 11);
  v34 = (_QWORD *)*((_QWORD *)this + 12);
  if (v33 != v34)
  {
    while (1)
    {
      if (v74 == (uint64_t **)v75)
      {
        v35 = (pxrInternal__aapl__pxrReserved__ *)v74;
      }
      else
      {
        v35 = (pxrInternal__aapl__pxrReserved__ *)v74;
        while ((*(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8) != (*v33 & 0xFFFFFFFFFFFFFFF8))
        {
          v35 = (pxrInternal__aapl__pxrReserved__ *)((char *)v35 + 8);
          if (v35 == v75)
          {
            v35 = v75;
            break;
          }
        }
      }
      if (v35 != v75)
        break;
      if (++v33 == v34)
        goto LABEL_91;
    }
    v36 = *v33 & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      v37 = (const char *)(v36 + 16);
      if (*(char *)(v36 + 39) < 0)
        v37 = *(const char **)v37;
    }
    else
    {
      v37 = "";
    }
    sub_20C348EEC((uint64_t)a2, &v79);
    v51 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
    if (*((char *)v51 + 23) >= 0)
      v54 = (uint64_t)v51;
    else
      v54 = *v51;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found a UsdSkelBinding property (%s), but no SkelBindingAPI applied on the prim <%s>", v52, v53, v37, v54);
    v55 = *((_QWORD *)this + 4);
    v56 = *((_QWORD *)this + 3);
    if (v56 >= v55)
    {
      v58 = *((_QWORD *)this + 2);
      v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v58) >> 3);
      v60 = v59 + 1;
      if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v58) >> 3);
      if (2 * v61 > v60)
        v60 = 2 * v61;
      if (v61 >= 0x555555555555555)
        v62 = 0xAAAAAAAAAAAAAAALL;
      else
        v62 = v60;
      v87 = (char *)this + 32;
      if (v62)
        v63 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v62);
      else
        v63 = 0;
      v64 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v63[3 * v59];
      v83 = (char **)v63;
      v84 = (void **)v64;
      v86 = (void ***)&v63[3 * v62];
      v65 = *(_OWORD *)__p;
      *((_QWORD *)v64 + 2) = v82;
      *(_OWORD *)v64 = v65;
      __p[1] = 0;
      v82 = 0;
      __p[0] = 0;
      v85 = (void **)((char *)v64 + 24);
      sub_20BDF34C0((uint64_t *)this + 2, &v83);
      v66 = *((_QWORD *)this + 3);
      sub_20BDF3648((uint64_t)&v83);
      v67 = SHIBYTE(v82);
      *((_QWORD *)this + 3) = v66;
      if (v67 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v57 = *(_OWORD *)__p;
      *(_QWORD *)(v56 + 16) = v82;
      *(_OWORD *)v56 = v57;
      __p[1] = 0;
      v82 = 0;
      __p[0] = 0;
      *((_QWORD *)this + 3) = v56 + 24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
    sub_20BFD265C(&v79);
  }
LABEL_91:
  v83 = (char **)&v74;
  sub_20BEEB2B8((void ***)&v83);
}

void sub_20C68FC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a21 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a15);
  sub_20C35C2E0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPackageEncapsulationChecker::CheckDependencies(uint64_t *a1, uint64_t *a2, uint64_t **a3, const char **a4)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t *FileFormat;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  uint64_t RealPath;
  __int128 v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  void *v29;
  const char *v30;
  size_t v31;
  size_t v32;
  void **v33;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  uint64_t Identifier;
  const char *v36;
  char *v37;
  uint64_t v38;
  void **v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t *v50;
  _QWORD *v51;
  void **v52;
  int v53;
  size_t v54;
  size_t v55;
  const char *v56;
  char *v57;
  size_t v58;
  const char *v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t result;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  void *v78[2];
  uint64_t v79;
  void *__dst[2];
  uint64_t v81;
  void *v82[2];
  _QWORD *v83;
  void *v84;
  uint64_t *v85;
  char v86;
  void *__p[2];
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;

  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v7, &v89);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v89);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v8);
  v10 = sub_20BFCF6F4(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) & 1) != 0
    || (v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v89),
        v12 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v12)))
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v13, (uint64_t *)v82);
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v82);
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v14);
    if (*(char *)(RealPath + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)RealPath, *(_QWORD *)(RealPath + 8));
    }
    else
    {
      v16 = *(_OWORD *)RealPath;
      v88 = *(_QWORD **)(RealPath + 16);
      *(_OWORD *)__p = v16;
    }
    v17 = v82[1];
    if (v82[1])
    {
      v18 = (unsigned int *)((char *)v82[1] + 8);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
    }
    v21 = (void *)HIBYTE(v88);
    if (SHIBYTE(v88) < 0)
      v21 = __p[1];
    if (v21)
    {
      if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)__p))
      {
        pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)__p, (uint64_t)v82);
        if (SHIBYTE(v88) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)v82;
        v88 = v83;
        HIBYTE(v83) = 0;
        LOBYTE(v82[0]) = 0;
        if (v86 < 0)
        {
          operator delete(v84);
          if (SHIBYTE(v83) < 0)
            operator delete(v82[0]);
        }
      }
      v22 = *a3;
      v23 = a3[1];
      if (*a3 != v23)
      {
        v24 = a1 + 2;
        do
        {
          v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v22);
          v26 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v25);
          if (*(char *)(v26 + 23) < 0)
          {
            sub_20BDDBFAC(__dst, *(void **)v26, *(_QWORD *)(v26 + 8));
          }
          else
          {
            v27 = *(_OWORD *)v26;
            v81 = *(_QWORD *)(v26 + 16);
            *(_OWORD *)__dst = v27;
          }
          v28 = HIBYTE(v81);
          if (v81 >= 0)
            v29 = (void *)HIBYTE(v81);
          else
            v29 = __dst[1];
          if (v29)
          {
            v30 = SHIBYTE(v88) >= 0 ? (const char *)__p : (const char *)__p[0];
            v31 = strlen(v30);
            if ((unint64_t)v29 < v31
              || ((v32 = v31, v81 >= 0) ? (v33 = __dst) : (v33 = (void **)__dst[0]), strncmp((const char *)v33, v30, v32)))
            {
              v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v22);
              Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v34);
              if (*(char *)(Identifier + 23) >= 0)
                v38 = Identifier;
              else
                v38 = *(_QWORD *)Identifier;
              if (SHIBYTE(v88) >= 0)
                v39 = __p;
              else
                v39 = (void **)__p[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found loaded layer '%s' that does not belong to the package '%s'.", v36, v37, v38, v39);
              v41 = a1[3];
              v40 = a1[4];
              if (v41 >= v40)
              {
                v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v24) >> 3);
                v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v24) >> 3);
                if (2 * v44 > v43)
                  v43 = 2 * v44;
                if (v44 >= 0x555555555555555)
                  v45 = 0xAAAAAAAAAAAAAAALL;
                else
                  v45 = v43;
                v85 = a1 + 4;
                if (v45)
                  v46 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 4), v45);
                else
                  v46 = 0;
                v47 = &v46[24 * v42];
                v82[0] = v46;
                v82[1] = v47;
                v84 = &v46[24 * v45];
                *((_QWORD *)v47 + 2) = v79;
                *(_OWORD *)v47 = *(_OWORD *)v78;
                v79 = 0;
                *(_OWORD *)v78 = 0uLL;
                v83 = v47 + 24;
                sub_20BDF34C0(a1 + 2, v82);
                v48 = a1[3];
                sub_20BDF3648((uint64_t)v82);
                a1[3] = v48;
              }
              else
              {
                *(_QWORD *)(v41 + 16) = v79;
                *(_OWORD *)v41 = *(_OWORD *)v78;
                a1[3] = v41 + 24;
              }
              v28 = HIBYTE(v81);
            }
          }
          if (v28 < 0)
            operator delete(__dst[0]);
          ++v22;
        }
        while (v22 != v23);
      }
      v49 = *a4;
      v50 = (uint64_t *)a4[1];
      if (*a4 != (const char *)v50)
      {
        v51 = a1 + 2;
        do
        {
          if (SHIBYTE(v88) >= 0)
            v52 = __p;
          else
            v52 = (void **)__p[0];
          v53 = v49[23];
          if (v53 >= 0)
            v54 = *((unsigned __int8 *)v49 + 23);
          else
            v54 = *((_QWORD *)v49 + 1);
          v55 = strlen((const char *)v52);
          if (v54 < v55
            || ((v58 = v55, v53 >= 0) ? (v59 = v49) : (v59 = *(const char **)v49), strncmp(v59, (const char *)v52, v58)))
          {
            v60 = (uint64_t *)v49;
            if (v53 < 0)
              v60 = *(uint64_t **)v49;
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found asset reference '%s' that does not belong to the package '%s'.", v56, v57, v60, v52);
            v62 = a1[3];
            v61 = a1[4];
            if (v62 >= v61)
            {
              v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - *v51) >> 3);
              v65 = v64 + 1;
              if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *v51) >> 3);
              if (2 * v66 > v65)
                v65 = 2 * v66;
              if (v66 >= 0x555555555555555)
                v67 = 0xAAAAAAAAAAAAAAALL;
              else
                v67 = v65;
              v85 = a1 + 4;
              if (v67)
                v68 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 4), v67);
              else
                v68 = 0;
              v69 = &v68[24 * v64];
              v82[0] = v68;
              v82[1] = v69;
              v84 = &v68[24 * v67];
              v70 = *(_OWORD *)__dst;
              *((_QWORD *)v69 + 2) = v81;
              *(_OWORD *)v69 = v70;
              __dst[1] = 0;
              v81 = 0;
              __dst[0] = 0;
              v83 = v69 + 24;
              sub_20BDF34C0(a1 + 2, v82);
              v71 = a1[3];
              sub_20BDF3648((uint64_t)v82);
              v72 = SHIBYTE(v81);
              a1[3] = v71;
              if (v72 < 0)
                operator delete(__dst[0]);
            }
            else
            {
              v63 = *(_OWORD *)__dst;
              *(_QWORD *)(v62 + 16) = v81;
              *(_OWORD *)v62 = v63;
              a1[3] = v62 + 24;
            }
          }
          v49 += 24;
        }
        while (v49 != (const char *)v50);
      }
    }
    if (SHIBYTE(v88) < 0)
      operator delete(__p[0]);
  }
  result = v90;
  if (v90)
  {
    v74 = (unsigned int *)(v90 + 8);
    do
    {
      v75 = __ldxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C69033C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;

  if (a36 < 0)
    operator delete(__p);
  v38 = *(unsigned int **)(v36 - 96);
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitLayerChecker::CheckLayer(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t Identifier;
  const char *v6;
  char *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t *FileFormat;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *FormatId;
  uint64_t *EmptyString;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  void *__dst[2];
  uint64_t v34;
  void *__p[2];
  _QWORD *v36;
  char *v37;
  uint64_t *v38;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
  if (*(char *)(Identifier + 23) >= 0)
    v8 = Identifier;
  else
    v8 = *(_QWORD *)Identifier;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking layer <%s>.", v6, v7, v8);
  pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg((uint64_t)a1, (uint64_t)__p);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v9);
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(FileFormat);
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v11);
  if ((*(_QWORD *)FormatId & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)FormatId & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(FormatId);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v14 = *(_OWORD *)EmptyString;
    v34 = EmptyString[2];
    *(_OWORD *)__dst = v14;
  }
  if (a1 + 12 == (uint64_t *)sub_20BDEEBA4((uint64_t)(a1 + 11), (const void **)__dst))
  {
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
    if (*(char *)(v16 + 23) >= 0)
      v19 = v16;
    else
      v19 = *(_QWORD *)v16;
    v20 = __dst;
    if (v34 < 0)
      v20 = (void **)__dst[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Layer '%s' has unsupported formatId '%s'.", v17, v18, v19, v20);
    v21 = a1[4];
    v22 = a1[3];
    if (v22 >= v21)
    {
      v23 = a1[2];
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v23) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v23) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v38 = a1 + 4;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 4), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v37 = &v28[24 * v27];
      *((_QWORD *)v29 + 2) = v32;
      *(_OWORD *)v29 = *(_OWORD *)v31;
      v36 = v29 + 24;
      sub_20BDF34C0(a1 + 2, __p);
      v30 = a1[3];
      sub_20BDF3648((uint64_t)__p);
      a1[3] = v30;
    }
    else
    {
      *(_QWORD *)(v22 + 16) = v32;
      *(_OWORD *)v22 = *(_OWORD *)v31;
      a1[3] = v22 + 24;
    }
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__dst[0]);
}

void sub_20C690670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20BDF3648((uint64_t)&a24);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t *String;
  const char *v5;
  char *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  uint64_t v10;
  uint64_t *EmptyString;
  __int128 v12;
  unint64_t v13;
  void **v14;
  uint64_t *v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  void *v35[2];
  uint64_t v36;
  void *__dst[2];
  uint64_t v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  char *v42;

  sub_20C348EEC((uint64_t)a2, (int *)__dst);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
  if (*((char *)String + 23) >= 0)
    v7 = (uint64_t)String;
  else
    v7 = *String;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking prim <%s>.", v5, v6, v7);
  pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg((uint64_t)this, (uint64_t)__p);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFD265C(__dst);
  v10 = *((_QWORD *)a2 + 1);
  if (!v10 || (*(_BYTE *)(v10 + 57) & 8) != 0)
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v9);
  if ((**(_QWORD **)(v10 + 24) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((**(_QWORD **)(v10 + 24) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v12 = *(_OWORD *)EmptyString;
    v38 = EmptyString[2];
    *(_OWORD *)__dst = v12;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker *)((char *)this + 96) == (pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker *)sub_20BDEEBA4((uint64_t)this + 88, (const void **)__dst))
  {
    v13 = HIBYTE(v38);
    if (v38 < 0)
      v13 = (unint64_t)__dst[1];
    if (v13 < 0xA
      || (v38 >= 0 ? (v14 = __dst) : (v14 = (void **)__dst[0]), strncmp((const char *)v14, "RealityKit", 0xAuLL)))
    {
      sub_20C348EEC((uint64_t)a2, &v33);
      v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
      if (*((char *)v15 + 23) >= 0)
        v18 = (uint64_t)v15;
      else
        v18 = *v15;
      v19 = __dst;
      if (v38 < 0)
        v19 = (void **)__dst[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Prim <%s> has unsupported type '%s'.", v16, v17, v18, v19);
      v20 = *((_QWORD *)this + 4);
      v21 = *((_QWORD *)this + 3);
      if (v21 >= v20)
      {
        v23 = *((_QWORD *)this + 2);
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v23) >> 3);
        v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v23) >> 3);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v25;
        v42 = (char *)this + 32;
        if (v27)
          v28 = (char *)sub_20BDE4FF4((uint64_t)this + 32, v27);
        else
          v28 = 0;
        v29 = &v28[24 * v24];
        __p[0] = v28;
        __p[1] = v29;
        v41 = &v28[24 * v27];
        v30 = *(_OWORD *)v35;
        *((_QWORD *)v29 + 2) = v36;
        *(_OWORD *)v29 = v30;
        v35[1] = 0;
        v36 = 0;
        v35[0] = 0;
        v40 = v29 + 24;
        sub_20BDF34C0((uint64_t *)this + 2, __p);
        v31 = *((_QWORD *)this + 3);
        sub_20BDF3648((uint64_t)__p);
        v32 = SHIBYTE(v36);
        *((_QWORD *)this + 3) = v31;
        if (v32 < 0)
          operator delete(v35[0]);
      }
      else
      {
        v22 = *(_OWORD *)v35;
        *(_QWORD *)(v21 + 16) = v36;
        *(_OWORD *)v21 = v22;
        v35[1] = 0;
        v36 = 0;
        v35[0] = 0;
        *((_QWORD *)this + 3) = v21 + 24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_20BFD265C(&v33);
    }
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__dst[0]);
}

void sub_20C690998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20BDF3648((uint64_t)&a24);
  if (a17 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a11);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitShaderChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsARKitShaderChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  uint64_t *SchemaInfo;
  char *v7;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v8;
  uint64_t *String;
  const char *v10;
  char *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v13;
  uint64_t *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  pxrInternal__aapl__pxrReserved__::TfToken *ShaderId;
  const void **v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v35;
  uint64_t *EmptyString;
  unint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  int v41;
  uint64_t *v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void **v56;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  const char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void **v75;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  unsigned int *v80;
  unsigned int v81;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v82;
  uint64_t *v83;
  const pxrInternal__aapl__pxrReserved__::TfType *v84;
  uint64_t *v85;
  char *v86;
  uint64_t IsA;
  uint64_t *v88;
  const pxrInternal__aapl__pxrReserved__::TfType *v89;
  uint64_t *v90;
  char *v91;
  uint64_t *v92;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v93;
  char *v94;
  uint64_t v95;
  pxrInternal__aapl__pxrReserved__ *v96;
  unint64_t v97;
  const char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  const char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int128 v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void **v112;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void **v124;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  int v137;
  int v138;
  void *v139[2];
  uint64_t v140;
  pxrInternal__aapl__pxrReserved__ *v141[2];
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  void *__p[2];
  _QWORD v147[2];
  pxrInternal__aapl__pxrReserved__::SdfPath *v148;
  pxrInternal__aapl__pxrReserved__::SdfPath *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void (**v155)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v156;
  pxrInternal__aapl__pxrReserved__::SdfPath **v157;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v158;
  _QWORD *v159;
  void **v160;
  char *v161;

  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(this);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v5);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v7))
  {
    v8 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v155, a2);
    v155 = off_24C53DB40;
    if (v156
      && (*(_BYTE *)(v156 + 57) & 8) == 0
      && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v8) & 1) != 0)
    {
      sub_20C348EEC((uint64_t)a2, (int *)__p);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      if (*((char *)String + 23) >= 0)
        v12 = (uint64_t)String;
      else
        v12 = *String;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking shader <%s>.", v10, v11, v12);
      pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg((uint64_t)this, (uint64_t)&v157);
      if (SHIBYTE(v159) < 0)
        operator delete(v157);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSource((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v155, (unsigned int **)&v154);
      v13 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v13)
        v13 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((v154 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v13 + 7) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C348EEC((uint64_t)a2, (int *)v141);
        v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v141);
        if (*((char *)v14 + 23) >= 0)
          v17 = (uint64_t)v14;
        else
          v17 = *v14;
        v18 = v154 & 0xFFFFFFFFFFFFFFF8;
        if ((v154 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v19 = (const char *)(v18 + 16);
          if (*(char *)(v18 + 39) < 0)
            v19 = *(const char **)v19;
        }
        else
        {
          v19 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Shader <%s> has non-id implementation source '%s'.", v15, v16, v17, v19);
        v20 = *((_QWORD *)this + 4);
        v21 = *((_QWORD *)this + 3);
        if (v21 >= v20)
        {
          v23 = *((_QWORD *)this + 2);
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v23) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v23) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v25;
          v161 = (char *)this + 32;
          if (v27)
            v28 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v27);
          else
            v28 = 0;
          v29 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v28[3 * v24];
          v157 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v28;
          v158 = v29;
          v160 = &v28[3 * v27];
          v30 = *(_OWORD *)__p;
          *((_QWORD *)v29 + 2) = v147[0];
          *(_OWORD *)v29 = v30;
          __p[1] = 0;
          v147[0] = 0;
          __p[0] = 0;
          v159 = (_QWORD *)((char *)v29 + 24);
          sub_20BDF34C0((uint64_t *)this + 2, &v157);
          v31 = *((_QWORD *)this + 3);
          sub_20BDF3648((uint64_t)&v157);
          v32 = SHIBYTE(v147[0]);
          *((_QWORD *)this + 3) = v31;
          if (v32 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v22 = *(_OWORD *)__p;
          *(_QWORD *)(v21 + 16) = v147[0];
          *(_OWORD *)v21 = v22;
          __p[1] = 0;
          v147[0] = 0;
          __p[0] = 0;
          *((_QWORD *)this + 3) = v21 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v141 + 1);
        sub_20BFD265C(v141);
      }
      v153 = 0;
      ShaderId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v155, (pxrInternal__aapl__pxrReserved__::TfToken *)&v153);
      if (!v153)
        goto LABEL_57;
      v34 = (v153 & 0xFFFFFFFFFFFFFFF8) != 0
          ? (const void **)((v153 & 0xFFFFFFFFFFFFFFF8) + 16)
          : (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderId);
      v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDEEBA4((uint64_t)this + 88, v34);
      if ((pxrInternal__aapl__pxrReserved__::UsdUtilsARKitShaderChecker *)((char *)this + 96) == v35)
      {
        if ((v153 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((v153 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
        v37 = *((unsigned __int8 *)EmptyString + 23);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = EmptyString[1];
        if (v37 < 0x10)
          goto LABEL_176;
        if (v38 < 0)
          EmptyString = (uint64_t *)*EmptyString;
        EmptyString = (uint64_t *)strncmp((const char *)EmptyString, "UsdPrimvarReader", 0x10uLL);
        if ((_DWORD)EmptyString)
        {
LABEL_176:
          if ((v153 & 0xFFFFFFFFFFFFFFF8) != 0)
            v39 = (uint64_t *)((v153 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v40 = *((unsigned __int8 *)v39 + 23);
          v41 = (char)v40;
          if ((v40 & 0x80u) != 0)
            v40 = v39[1];
          if (v40 < 3)
            goto LABEL_57;
          if (v41 < 0)
            v39 = (uint64_t *)*v39;
          if (strncmp((const char *)v39, "ND_", 3uLL))
          {
LABEL_57:
            sub_20C348EEC((uint64_t)a2, (int *)v141);
            v42 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v141);
            if (*((char *)v42 + 23) >= 0)
              v45 = (uint64_t)v42;
            else
              v45 = *v42;
            v46 = v153 & 0xFFFFFFFFFFFFFFF8;
            if ((v153 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v47 = (const char *)(v46 + 16);
              if (*(char *)(v46 + 39) < 0)
                v47 = *(const char **)v47;
            }
            else
            {
              v47 = "";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Shader <%s> has unsupported info:id '%s'.", v43, v44, v45, v47);
            v48 = *((_QWORD *)this + 4);
            v49 = *((_QWORD *)this + 3);
            if (v49 >= v48)
            {
              v51 = *((_QWORD *)this + 2);
              v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v51) >> 3);
              v53 = v52 + 1;
              if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v51) >> 3);
              if (2 * v54 > v53)
                v53 = 2 * v54;
              if (v54 >= 0x555555555555555)
                v55 = 0xAAAAAAAAAAAAAAALL;
              else
                v55 = v53;
              v161 = (char *)this + 32;
              if (v55)
                v56 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v55);
              else
                v56 = 0;
              v57 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v56[3 * v52];
              v157 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v56;
              v158 = v57;
              v160 = &v56[3 * v55];
              v58 = *(_OWORD *)__p;
              *((_QWORD *)v57 + 2) = v147[0];
              *(_OWORD *)v57 = v58;
              __p[1] = 0;
              v147[0] = 0;
              __p[0] = 0;
              v159 = (_QWORD *)((char *)v57 + 24);
              sub_20BDF34C0((uint64_t *)this + 2, &v157);
              v59 = *((_QWORD *)this + 3);
              sub_20BDF3648((uint64_t)&v157);
              v60 = SHIBYTE(v147[0]);
              *((_QWORD *)this + 3) = v59;
              if (v60 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v50 = *(_OWORD *)__p;
              *(_QWORD *)(v49 + 16) = v147[0];
              *(_OWORD *)v49 = v50;
              __p[1] = 0;
              v147[0] = 0;
              __p[0] = 0;
              *((_QWORD *)this + 3) = v49 + 24;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v141 + 1);
            sub_20BFD265C(v141);
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v155, 1, &v151);
      v61 = v151;
      v62 = v152;
      if (v151 != v152)
      {
        v63 = (_QWORD *)((char *)this + 16);
        do
        {
          v148 = 0;
          v149 = 0;
          v150 = 0;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections(v61, (uint64_t *)&v148);
          if (v148 != v149)
          {
            if ((unint64_t)(v149 - v148) >= 9)
            {
              sub_20C348EEC(v61, (int *)v141);
              v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v141);
              if (*((char *)v64 + 23) >= 0)
                v67 = (uint64_t)v64;
              else
                v67 = *v64;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Shader input <%s> has %zu connection sources, but only one is allowed.", v65, v66, v67, (v149 - v148) >> 3);
              v68 = *((_QWORD *)this + 3);
              v69 = *((_QWORD *)this + 4);
              if (v68 >= v69)
              {
                v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v63) >> 3);
                v72 = v71 + 1;
                if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v63) >> 3);
                if (2 * v73 > v72)
                  v72 = 2 * v73;
                if (v73 >= 0x555555555555555)
                  v74 = 0xAAAAAAAAAAAAAAALL;
                else
                  v74 = v72;
                v161 = (char *)this + 32;
                if (v74)
                  v75 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v74);
                else
                  v75 = 0;
                v76 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v75[3 * v71];
                v157 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v75;
                v158 = v76;
                v160 = &v75[3 * v74];
                v77 = *(_OWORD *)__p;
                *((_QWORD *)v76 + 2) = v147[0];
                *(_OWORD *)v76 = v77;
                __p[1] = 0;
                v147[0] = 0;
                __p[0] = 0;
                v159 = (_QWORD *)((char *)v76 + 24);
                sub_20BDF34C0((uint64_t *)this + 2, &v157);
                v78 = *((_QWORD *)this + 3);
                sub_20BDF3648((uint64_t)&v157);
                v79 = SHIBYTE(v147[0]);
                *((_QWORD *)this + 3) = v78;
                if (v79 < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v70 = *(_OWORD *)__p;
                *(_QWORD *)(v68 + 16) = v147[0];
                *(_OWORD *)v68 = v70;
                __p[1] = 0;
                v147[0] = 0;
                __p[0] = 0;
                *((_QWORD *)this + 3) = v68 + 24;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v141 + 1);
              sub_20BFD265C(v141);
            }
            LODWORD(v157) = 1;
            v158 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v159);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v159 + 1);
            v160 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v157);
            v147[1] = 0;
            __p[0] = off_24C53D618;
            if ((v160 & 7) != 0)
            {
              v80 = (unsigned int *)((unint64_t)v160 & 0xFFFFFFFFFFFFFFF8);
              do
                v81 = __ldxr(v80);
              while (__stlxr(v81 - 2, v80));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v159 + 1);
            sub_20BFD265C(&v159);
            if (v158)
              sub_20C35C614(v158);
            v145 = 0;
            v144 = 0;
            if ((pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectedSource(v61, __p, &v145, &v144) & 1) != 0)
            {
              v82 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_20C35C4F8((uint64_t)v141, (uint64_t *)&__p[1], v147);
              v83 = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v82);
              v85 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v83, v84);
              IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v141, v85, v86);
              if ((IsA & 1) == 0)
              {
                v88 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)IsA);
                v90 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v88, v89);
                if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v141, v90, v91) & 1) == 0)
                {
                  sub_20C348EEC(v61, &v137);
                  v92 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v137);
                  if (*((char *)v92 + 23) >= 0)
                    v95 = (uint64_t)v92;
                  else
                    v95 = *v92;
                  v96 = v141[1];
                  if (!v141[1] || (*((_BYTE *)v141[1] + 57) & 8) != 0)
                    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v141[1], v93);
                  v97 = **((_QWORD **)v96 + 3) & 0xFFFFFFFFFFFFFFF8;
                  if (v97)
                  {
                    v98 = (const char *)(v97 + 16);
                    if (*(char *)(v97 + 39) < 0)
                      v98 = *(const char **)v98;
                  }
                  else
                  {
                    v98 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Shader input <%s> has an invalid connection source prim of type '%s'.", (const char *)v93, v94, v95, v98);
                  v117 = *((_QWORD *)this + 3);
                  v118 = *((_QWORD *)this + 4);
                  if (v117 >= v118)
                  {
                    v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - *v63) >> 3);
                    v121 = v120 + 1;
                    if (v120 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20BDDF694();
                    v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - *v63) >> 3);
                    if (2 * v122 > v121)
                      v121 = 2 * v122;
                    if (v122 >= 0x555555555555555)
                      v123 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v123 = v121;
                    v161 = (char *)this + 32;
                    if (v123)
                      v124 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v123);
                    else
                      v124 = 0;
                    v125 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v124[3 * v120];
                    v157 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v124;
                    v158 = v125;
                    v160 = &v124[3 * v123];
                    v126 = *(_OWORD *)v139;
                    *((_QWORD *)v125 + 2) = v140;
                    *(_OWORD *)v125 = v126;
                    v139[1] = 0;
                    v140 = 0;
                    v139[0] = 0;
                    v159 = (_QWORD *)((char *)v125 + 24);
                    sub_20BDF34C0((uint64_t *)this + 2, &v157);
                    v127 = *((_QWORD *)this + 3);
                    sub_20BDF3648((uint64_t)&v157);
                    v128 = SHIBYTE(v140);
                    *((_QWORD *)this + 3) = v127;
                    if (v128 < 0)
                      operator delete(v139[0]);
                  }
                  else
                  {
                    v119 = *(_OWORD *)v139;
                    *(_QWORD *)(v117 + 16) = v140;
                    *(_OWORD *)v117 = v119;
                    v139[1] = 0;
                    v140 = 0;
                    v139[0] = 0;
                    *((_QWORD *)this + 3) = v117 + 24;
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v138);
                  sub_20BFD265C(&v137);
                }
              }
              if ((v143 & 7) != 0)
              {
                v129 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
                do
                  v130 = __ldxr(v129);
                while (__stlxr(v130 - 2, v129));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
              sub_20BFD265C(&v142);
              if (v141[1])
                sub_20C35C614(v141[1]);
            }
            else
            {
              v99 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v148);
              if (*((char *)v99 + 23) >= 0)
                v100 = (uint64_t)v99;
              else
                v100 = *v99;
              sub_20C348EEC(v61, (int *)v139);
              v101 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v139);
              if (*((char *)v101 + 23) >= 0)
                v104 = (uint64_t)v101;
              else
                v104 = *v101;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connection source <%s> for shader input <%s> is missing.", v102, v103, v100, v104);
              v105 = *((_QWORD *)this + 3);
              v106 = *((_QWORD *)this + 4);
              if (v105 >= v106)
              {
                v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105 - *v63) >> 3);
                v109 = v108 + 1;
                if (v108 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - *v63) >> 3);
                if (2 * v110 > v109)
                  v109 = 2 * v110;
                if (v110 >= 0x555555555555555)
                  v111 = 0xAAAAAAAAAAAAAAALL;
                else
                  v111 = v109;
                v161 = (char *)this + 32;
                if (v111)
                  v112 = (void **)sub_20BDE4FF4((uint64_t)this + 32, v111);
                else
                  v112 = 0;
                v113 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v112[3 * v108];
                v157 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v112;
                v158 = v113;
                v160 = &v112[3 * v111];
                v114 = *(_OWORD *)v141;
                *((_QWORD *)v113 + 2) = v142;
                *(_OWORD *)v113 = v114;
                v141[1] = 0;
                v142 = 0;
                v141[0] = 0;
                v159 = (_QWORD *)((char *)v113 + 24);
                sub_20BDF34C0((uint64_t *)this + 2, &v157);
                v115 = *((_QWORD *)this + 3);
                sub_20BDF3648((uint64_t)&v157);
                v116 = SHIBYTE(v142);
                *((_QWORD *)this + 3) = v115;
                if (v116 < 0)
                  operator delete(v141[0]);
              }
              else
              {
                v107 = *(_OWORD *)v141;
                *(_QWORD *)(v105 + 16) = v142;
                *(_OWORD *)v105 = v107;
                v141[1] = 0;
                v142 = 0;
                v141[0] = 0;
                *((_QWORD *)this + 3) = v105 + 24;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v139 + 1);
              sub_20BFD265C(v139);
            }
            if ((v145 & 7) != 0)
            {
              v131 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
              do
                v132 = __ldxr(v131);
              while (__stlxr(v132 - 2, v131));
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p);
          }
          v157 = &v148;
          sub_20BFD6F90((void ***)&v157);
          v61 += 32;
        }
        while (v61 != v62);
      }
      v157 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&v151;
      sub_20C5BE4A8((void ***)&v157);
      if ((v153 & 7) != 0)
      {
        v133 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFFFF8);
        do
          v134 = __ldxr(v133);
        while (__stlxr(v134 - 2, v133));
      }
      if ((v154 & 7) != 0)
      {
        v135 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v155);
  }
}

void sub_20C6915E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;

  v43 = *(_QWORD *)(v41 - 160);
  if ((v43 & 7) != 0)
  {
    v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v41 - 152));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitMaterialBindingChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsARKitMaterialBindingChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v3;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v6;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  uint64_t *v9;
  const char *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  const char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t *String;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  const char *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  const char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t (**v45)(char **);
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t (**v50)(char **);
  char *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  const char *v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t (**v79)(char **);
  char *v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  char *v84;
  int v85;
  int v86;
  void *__p[2];
  uint64_t v88;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship **v89;
  uint64_t v90;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v99;
  const pxrInternal__aapl__pxrReserved__::UsdRelationship *v100;
  uint64_t (**v101)(char **);
  char *v102;
  char *v103;
  char *v104;
  char *v105;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(a2, (uint64_t *)&v99);
  v3 = v99;
  v4 = v100;
  if (v99 != v100)
  {
    v5 = (_QWORD *)((char *)this + 16);
    v84 = (char *)this + 32;
    while (1)
    {
      v6 = sub_20C398E78(v3);
      if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8)
        v8 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if ((*((_QWORD *)v8 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
        v9 = (uint64_t *)((*((_QWORD *)v8 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      if (*((char *)v9 + 23) >= 0)
        v10 = (const char *)v9;
      else
        v10 = (const char *)*v9;
      v11 = *((char *)EmptyString + 23);
      if (v11 >= 0)
        v12 = *((unsigned __int8 *)EmptyString + 23);
      else
        v12 = EmptyString[1];
      v13 = strlen(v10);
      if (v12 < v13)
        goto LABEL_110;
      v14 = v13;
      v15 = v11 >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
      if (strncmp(v15, v10, v14))
        goto LABEL_110;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v3, &v96);
      v16 = (v97 - v96) >> 3;
      if (v16 == 2)
        break;
      if (v16 == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)&v89, v3);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::GetMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)&v89, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v101);
        if (!v102 || (v102[57] & 8) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v101);
        }
        else
        {
          v17 = v101[4]((char **)&v101);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v101);
          if ((v17 & 1) != 0)
          {
LABEL_70:
            if ((v95 & 7) != 0)
            {
              v55 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
              do
                v56 = __ldxr(v55);
              while (__stlxr(v56 - 2, v55));
            }
            if ((v94 & 7) != 0)
            {
              v57 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
              do
                v58 = __ldxr(v57);
              while (__stlxr(v58 - 2, v57));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v93);
            sub_20BFD265C(&v92);
            if (v91)
              sub_20C35C614(v91);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
            sub_20BFD265C(&v89);
            goto LABEL_109;
          }
        }
        sub_20C348EEC((uint64_t)v3, &v85);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
        v20 = *((char *)String + 23);
        v21 = *String;
        v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v89);
        if (v20 >= 0)
          v25 = String;
        else
          v25 = (uint64_t *)v21;
        if (*((char *)v22 + 23) >= 0)
          v26 = (uint64_t)v22;
        else
          v26 = *v22;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Direct material binding <%s> targets an invalid material <%s>.", v23, v24, v25, v26);
        v27 = *((_QWORD *)this + 3);
        v28 = *((_QWORD *)this + 4);
        if (v27 >= v28)
        {
          v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v5) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v5) >> 3);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v42;
          v105 = (char *)this + 32;
          if (v44)
            v45 = (uint64_t (**)(char **))sub_20BDE4FF4((uint64_t)v84, v44);
          else
            v45 = 0;
          v51 = (char *)&v45[3 * v41];
          v101 = v45;
          v102 = v51;
          v104 = (char *)&v45[3 * v44];
          v52 = *(_OWORD *)__p;
          *((_QWORD *)v51 + 2) = v88;
          *(_OWORD *)v51 = v52;
          __p[1] = 0;
          v88 = 0;
          __p[0] = 0;
          v103 = v51 + 24;
          sub_20BDF34C0((uint64_t *)this + 2, &v101);
          v53 = *((_QWORD *)this + 3);
          sub_20BDF3648((uint64_t)&v101);
          v54 = SHIBYTE(v88);
          *((_QWORD *)this + 3) = v53;
          if (v54 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v29 = *(_OWORD *)__p;
          *(_QWORD *)(v27 + 16) = v88;
          *(_OWORD *)v27 = v29;
          __p[1] = 0;
          v88 = 0;
          __p[0] = 0;
          *((_QWORD *)this + 3) = v27 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
        sub_20BFD265C(&v85);
        goto LABEL_70;
      }
LABEL_109:
      v89 = (const pxrInternal__aapl__pxrReserved__::UsdRelationship **)&v96;
      sub_20BFD6F90((void ***)&v89);
LABEL_110:
      v3 = (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)((char *)v3 + 32);
      if (v3 == v4)
        goto LABEL_111;
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v89, v3);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v89, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v101);
    if (!v102 || (v102[57] & 8) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v101);
    }
    else
    {
      v18 = v101[4]((char **)&v101);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v101);
      if ((v18 & 1) != 0)
        goto LABEL_83;
    }
    sub_20C348EEC((uint64_t)v3, &v85);
    v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
    v31 = *((char *)v30 + 23);
    v32 = *v30;
    v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
    if (v31 >= 0)
      v36 = v30;
    else
      v36 = (uint64_t *)v32;
    if (*((char *)v33 + 23) >= 0)
      v37 = (uint64_t)v33;
    else
      v37 = *v33;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Collection-based material binding <%s> targets an invalid material <%s>.", v34, v35, v36, v37);
    v38 = *((_QWORD *)this + 3);
    v39 = *((_QWORD *)this + 4);
    if (v38 >= v39)
    {
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v5) >> 3);
      v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v5) >> 3);
      if (2 * v48 > v47)
        v47 = 2 * v48;
      if (v48 >= 0x555555555555555)
        v49 = 0xAAAAAAAAAAAAAAALL;
      else
        v49 = v47;
      v105 = (char *)this + 32;
      if (v49)
        v50 = (uint64_t (**)(char **))sub_20BDE4FF4((uint64_t)v84, v49);
      else
        v50 = 0;
      v59 = (char *)&v50[3 * v46];
      v101 = v50;
      v102 = v59;
      v104 = (char *)&v50[3 * v49];
      v60 = *(_OWORD *)__p;
      *((_QWORD *)v59 + 2) = v88;
      *(_OWORD *)v59 = v60;
      __p[1] = 0;
      v88 = 0;
      __p[0] = 0;
      v103 = v59 + 24;
      sub_20BDF34C0((uint64_t *)this + 2, &v101);
      v61 = *((_QWORD *)this + 3);
      sub_20BDF3648((uint64_t)&v101);
      v62 = SHIBYTE(v88);
      *((_QWORD *)this + 3) = v61;
      if (v62 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v40 = *(_OWORD *)__p;
      *(_QWORD *)(v38 + 16) = v88;
      *(_OWORD *)v38 = v40;
      __p[1] = 0;
      v88 = 0;
      __p[0] = 0;
      *((_QWORD *)this + 3) = v38 + 24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
    sub_20BFD265C(&v85);
LABEL_83:
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v89, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v101);
    if (!v102 || (v102[57] & 8) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v101);
    }
    else
    {
      v63 = v101[4]((char **)&v101);
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v101);
      if ((v63 & 1) != 0)
      {
LABEL_108:
        sub_20C5D4EE8((uint64_t)&v89);
        goto LABEL_109;
      }
    }
    sub_20C348EEC((uint64_t)v3, &v85);
    v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
    v65 = *((char *)v64 + 23);
    v66 = *v64;
    v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
    if (v65 >= 0)
      v70 = v64;
    else
      v70 = (uint64_t *)v66;
    if (*((char *)v67 + 23) >= 0)
      v71 = (uint64_t)v67;
    else
      v71 = *v67;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Collection-based material binding <%s> targets an invalid collection <%s>.", v68, v69, v70, v71);
    v72 = *((_QWORD *)this + 3);
    v73 = *((_QWORD *)this + 4);
    if (v72 >= v73)
    {
      v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *v5) >> 3);
      v76 = v75 + 1;
      if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *v5) >> 3);
      if (2 * v77 > v76)
        v76 = 2 * v77;
      if (v77 >= 0x555555555555555)
        v78 = 0xAAAAAAAAAAAAAAALL;
      else
        v78 = v76;
      v105 = (char *)this + 32;
      if (v78)
        v79 = (uint64_t (**)(char **))sub_20BDE4FF4((uint64_t)v84, v78);
      else
        v79 = 0;
      v80 = (char *)&v79[3 * v75];
      v101 = v79;
      v102 = v80;
      v104 = (char *)&v79[3 * v78];
      v81 = *(_OWORD *)__p;
      *((_QWORD *)v80 + 2) = v88;
      *(_OWORD *)v80 = v81;
      __p[1] = 0;
      v88 = 0;
      __p[0] = 0;
      v103 = v80 + 24;
      sub_20BDF34C0((uint64_t *)this + 2, &v101);
      v82 = *((_QWORD *)this + 3);
      sub_20BDF3648((uint64_t)&v101);
      v83 = SHIBYTE(v88);
      *((_QWORD *)this + 3) = v82;
      if (v83 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v74 = *(_OWORD *)__p;
      *(_QWORD *)(v72 + 16) = v88;
      *(_OWORD *)v72 = v74;
      __p[1] = 0;
      v88 = 0;
      __p[0] = 0;
      *((_QWORD *)this + 3) = v72 + 24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
    sub_20BFD265C(&v85);
    goto LABEL_108;
  }
LABEL_111:
  v89 = &v99;
  sub_20C3AF230((void ***)&v89);
}

void sub_20C691F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a16);
  sub_20C5D4EE8((uint64_t)&a23);
  a23 = &a30;
  sub_20BFD6F90((void ***)&a23);
  a23 = (char *)(v30 - 152);
  sub_20C3AF230((void ***)&a23);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C6920B0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;

  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v8)
    sub_20C35C614(v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitFileExtensionChecker::CheckZipFile(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdZipFile *this, uint64_t **a3)
{
  _QWORD *v5;
  BOOL v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t *Resolver;
  const char *v9;
  char *v10;
  double v11;
  void **v12;
  uint64_t *v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  void *v27[2];
  char v28;
  void *v29[2];
  uint64_t v30;
  void *v31[2];
  char v32;
  void *v33;
  void *__p[2];
  _QWORD *v35;
  char *v36;
  uint64_t *v37;

  pxrInternal__aapl__pxrReserved__::UsdZipFile::begin(this, &v33);
  v5 = a1 + 2;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(__p);
    v6 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((_QWORD **)&v33, (_QWORD **)__p);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(__p);
    if (!v6)
      break;
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v7);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator*(&v33, __p);
    pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
    if (SHIBYTE(v35) < 0)
      operator delete(__p[0]);
    if (a1 + 12 == (uint64_t *)sub_20BDEEBA4((uint64_t)(a1 + 11), (const void **)v31))
    {
      v11 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator->((uint64_t)&v33, (uint64_t)v27);
      v12 = (void **)v27[0];
      if (v28 >= 0)
        v12 = v27;
      v13 = *a3;
      if (*((char *)a3 + 23) >= 0)
        v13 = (uint64_t *)a3;
      v14 = v31;
      if (v32 < 0)
        v14 = (void **)v31[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"File '%s' in package '%s' has an unknown or unsupported extension '%s'.", v9, v10, v11, v12, v13, v14);
      v15 = a1[3];
      v16 = a1[4];
      if (v15 >= v16)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v5) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v5) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        v37 = a1 + 4;
        if (v21)
          v22 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 4), v21);
        else
          v22 = 0;
        v23 = &v22[24 * v18];
        __p[0] = v22;
        __p[1] = v23;
        v36 = &v22[24 * v21];
        v24 = *(_OWORD *)v29;
        *((_QWORD *)v23 + 2) = v30;
        *(_OWORD *)v23 = v24;
        v29[1] = 0;
        v30 = 0;
        v29[0] = 0;
        v35 = v23 + 24;
        sub_20BDF34C0(a1 + 2, __p);
        v25 = a1[3];
        sub_20BDF3648((uint64_t)__p);
        v26 = SHIBYTE(v30);
        a1[3] = v25;
        if (v26 < 0)
          operator delete(v29[0]);
      }
      else
      {
        v17 = *(_OWORD *)v29;
        *(_QWORD *)(v15 + 16) = v30;
        *(_OWORD *)v15 = v17;
        v29[1] = 0;
        v30 = 0;
        v29[0] = 0;
        a1[3] = v15 + 24;
      }
      if (v28 < 0)
        operator delete(v27[0]);
    }
    if (v32 < 0)
      operator delete(v31[0]);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator++((uint64_t)&v33);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v33);
}

void sub_20C6923A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&a30);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::UsdUtilsComplianceChecker(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this, int a2, char a3, char a4, char a5, char a6)
{
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  int v16;
  int v17;
  void *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  void *v29;
  _BYTE *v30;
  char v31;
  char v32;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  void *v38;
  _BYTE *v39;
  _QWORD v40[3];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_BYTE *)this + 120) = a2;
  *((_BYTE *)this + 121) = a3;
  *((_BYTE *)this + 122) = a4;
  *((_BYTE *)this + 123) = a5;
  *((_BYTE *)this + 124) = a6;
  v10 = operator new(0x58uLL);
  v10[8] = a5;
  v10[9] = a2;
  v10[10] = a6;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_QWORD *)v10 + 10) = 0;
  *(_QWORD *)v10 = off_24C540618;
  v34 = v10;
  v11 = operator new(0x58uLL);
  v11[8] = a5;
  v11[9] = a2;
  v11[10] = a6;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_QWORD *)v11 + 10) = 0;
  *(_QWORD *)v11 = off_24C5406B0;
  v35 = v11;
  v12 = operator new(0x58uLL);
  v12[8] = a5;
  v12[9] = a2;
  v12[10] = a6;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_QWORD *)v12 + 10) = 0;
  *(_QWORD *)v12 = off_24C540738;
  v36 = v12;
  v13 = operator new(0x58uLL);
  v13[8] = a5;
  v13[9] = a2;
  v13[10] = a6;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_QWORD *)v13 + 10) = 0;
  *(_QWORD *)v13 = off_24C5407C0;
  v37 = v13;
  v14 = operator new(0x90uLL);
  sub_20C695B78((uint64_t)v14, a5, a2, a6);
  v38 = v14;
  v15 = operator new(0x88uLL);
  v16 = *((unsigned __int8 *)this + 123);
  LODWORD(v14) = *((unsigned __int8 *)this + 120);
  v17 = *((unsigned __int8 *)this + 124);
  v15[8] = v16;
  v15[9] = (_BYTE)v14;
  v15[10] = v17;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *(_QWORD *)v15 = off_24C5408D0;
  *((_QWORD *)v15 + 12) = 0;
  *((_QWORD *)v15 + 10) = 0;
  *((_QWORD *)v15 + 11) = v15 + 96;
  *((_QWORD *)v15 + 16) = 0;
  *((_QWORD *)v15 + 15) = 0;
  *((_QWORD *)v15 + 13) = 0;
  *((_QWORD *)v15 + 14) = v15 + 120;
  v39 = v15;
  v18 = operator new(0x80uLL);
  sub_20C695F10((uint64_t)v18, v16 != 0, (_DWORD)v14 != 0, v17 != 0);
  v40[0] = v18;
  v19 = operator new(0x58uLL);
  LOBYTE(v18) = *((_BYTE *)this + 123);
  LOBYTE(v16) = *((_BYTE *)this + 120);
  LOBYTE(v14) = *((_BYTE *)this + 124);
  v19[8] = (_BYTE)v18;
  v19[9] = v16;
  v19[10] = (_BYTE)v14;
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *((_OWORD *)v19 + 4) = 0u;
  *((_QWORD *)v19 + 10) = 0;
  *(_QWORD *)v19 = off_24C5409E0;
  v40[1] = v19;
  v20 = operator new(0x70uLL);
  v20[8] = (_BYTE)v18;
  v20[9] = v16;
  v20[10] = (_BYTE)v14;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *((_QWORD *)v20 + 10) = 0;
  *((_QWORD *)v20 + 11) = 0;
  *(_QWORD *)v20 = off_24C540A68;
  *((_QWORD *)v20 + 12) = 0;
  *((_QWORD *)v20 + 13) = 0;
  v40[2] = v20;
  sub_20BDDF7E4((char *)this, (char *)&v34, (uint64_t)&v41, 9uLL);
  if (a2)
  {
    v21 = *((_QWORD *)this + 1);
    v22 = operator new(0x70uLL);
    sub_20C696120((uint64_t)v22, *((_BYTE *)this + 123), *((_BYTE *)this + 120), *((_BYTE *)this + 124));
    v34 = v22;
    v23 = operator new(0x70uLL);
    sub_20C69629C((uint64_t)v23, *((_BYTE *)this + 123), *((_BYTE *)this + 120), *((_BYTE *)this + 124));
    v35 = v23;
    v24 = operator new(0x70uLL);
    sub_20C6965BC((uint64_t)v24, *((_BYTE *)this + 123), *((_BYTE *)this + 120), *((_BYTE *)this + 124));
    v36 = v24;
    v25 = operator new(0x58uLL);
    v26 = *((unsigned __int8 *)this + 123);
    v27 = *((unsigned __int8 *)this + 120);
    v28 = *((unsigned __int8 *)this + 124);
    v25[8] = v26;
    v25[9] = v27;
    v25[10] = v28;
    *((_OWORD *)v25 + 1) = 0u;
    *((_OWORD *)v25 + 2) = 0u;
    *((_OWORD *)v25 + 3) = 0u;
    *((_OWORD *)v25 + 4) = 0u;
    *((_QWORD *)v25 + 10) = 0;
    *(_QWORD *)v25 = off_24C540D10;
    v37 = v25;
    v29 = operator new(0x70uLL);
    sub_20C696724((uint64_t)v29, v26 != 0, v27 != 0, v28 != 0);
    v38 = v29;
    v30 = operator new(0x58uLL);
    v31 = *((_BYTE *)this + 120);
    v32 = *((_BYTE *)this + 124);
    v30[8] = *((_BYTE *)this + 123);
    v30[9] = v31;
    v30[10] = v32;
    *((_OWORD *)v30 + 1) = 0u;
    *((_OWORD *)v30 + 2) = 0u;
    *((_OWORD *)v30 + 3) = 0u;
    *((_OWORD *)v30 + 4) = 0u;
    *((_QWORD *)v30 + 10) = 0;
    *(_QWORD *)v30 = off_24C540AF0;
    v39 = v30;
    sub_20BEF2D00((uint64_t)this, v21, (char *)&v34, (char *)v40, 6);
  }
  return this;
}

void sub_20C692838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v13;

  operator delete(v11);
  sub_20BDECAB8(v10, *(char **)(v9 + 104));
  a9 = v9 + 72;
  sub_20BDE5038((void ***)&a9);
  sub_20BDE5038((void ***)&a9);
  a9 = v9 + 24;
  sub_20BDE5038((void ***)&a9);
  v13 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::~UsdUtilsComplianceChecker(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void **v5;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  sub_20BDECAB8((uint64_t)this + 96, *((char **)this + 13));
  v5 = (void **)((char *)this + 72);
  sub_20BDE5038(&v5);
  v5 = (void **)((char *)this + 48);
  sub_20BDE5038(&v5);
  v5 = (void **)((char *)this + 24);
  sub_20BDE5038(&v5);
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::Msg(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  std::locale v6;

  if (*(_BYTE *)(result + 123))
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (*(char *)(a2 + 23) >= 0)
    {
      v3 = *(unsigned __int8 *)(a2 + 23);
    }
    else
    {
      a2 = *(_QWORD *)a2;
      v3 = v2;
    }
    v4 = sub_20BDDC1C8(MEMORY[0x24BEDB318], a2, v3);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
    v5 = std::locale::use_facet(&v6, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v6);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_20C692A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::DumpRules(uint64_t **this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  std::locale::id *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  void *locale;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  std::locale v22;
  uint64_t v23;
  unsigned __int8 v24;
  std::locale v25[2];
  char v26;
  std::locale v27;

  v2 = sub_20BDDC1C8(MEMORY[0x24BEDB318], (uint64_t)"Checking rules: ", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(v25, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(v25);
  std::ostream::put();
  std::ostream::flush();
  v4 = *this;
  v5 = this[1];
  if (*this != v5)
  {
    v6 = (_QWORD *)MEMORY[0x24BEDB318];
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v8 = *v4;
      v26 = 10;
      strcpy((char *)v25, "----------");
      v9 = sub_20BDDC1C8(v6, (uint64_t)v25, 10);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
      v10 = std::locale::use_facet(&v22, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v22);
      std::ostream::put();
      std::ostream::flush();
      if (v26 < 0)
        operator delete(v25[0].__locale_);
      v11 = sub_20BDDC1C8(v6, (uint64_t)"[", 1);
      (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(v25, v8);
      if (v26 >= 0)
        locale = v25;
      else
        locale = v25[0].__locale_;
      if (v26 >= 0)
        v13 = v26;
      else
        v13 = (uint64_t)v25[1].__locale_;
      v14 = sub_20BDDC1C8(v11, (uint64_t)locale, v13);
      v15 = sub_20BDDC1C8(v14, (uint64_t)"]:\n ", 4);
      (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v8 + 24))(&v22, v8);
      if ((v24 & 0x80u) == 0)
        v16 = &v22;
      else
        v16 = v22.__locale_;
      if ((v24 & 0x80u) == 0)
        v17 = v24;
      else
        v17 = v23;
      v18 = sub_20BDDC1C8(v15, (uint64_t)v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
      v19 = std::locale::use_facet(&v27, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v24 < 0)
        operator delete(v22.__locale_);
      if (v26 < 0)
        operator delete(v25[0].__locale_);
      ++v4;
    }
    while (v4 != v5);
  }
  v26 = 10;
  strcpy((char *)v25, "----------");
  v20 = sub_20BDDC1C8(MEMORY[0x24BEDB318], (uint64_t)v25, 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (v26 < 0)
    operator delete(v25[0].__locale_);
}

void sub_20C692D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  std::locale::~locale(&a10);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::GetWarnings(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *__p[2];
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  void **v33[5];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20BE71C2C((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3));
  v4 = (__int128 *)*((_QWORD *)this + 3);
  v5 = (__int128 *)*((_QWORD *)this + 4);
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a2 + 8);
    do
    {
      if (v6 >= *(_QWORD *)(a2 + 16))
      {
        v6 = sub_20BF3E2A4((uint64_t *)a2, v4);
      }
      else
      {
        sub_20BE4EDF4((_QWORD *)a2, v4);
        v6 += 24;
      }
      *(_QWORD *)(a2 + 8) = v6;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  v7 = *(_QWORD **)this;
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v24)
  {
    do
    {
      v8 = *v7;
      (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)*v7 + 16))(v31, *v7);
      v25 = v7;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      sub_20BE78B98((char *)&v28, *(__int128 **)(v8 + 64), *(__int128 **)(v8 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 72) - *(_QWORD *)(v8 + 64)) >> 3));
      v11 = v28;
      v12 = v29;
      while (v11 != v12)
      {
        v13 = v11;
        if (*((char *)v11 + 23) < 0)
          v13 = (uint64_t *)*v11;
        if (v32 >= 0)
          v14 = v31;
        else
          v14 = (void **)v31[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (may violate '%s')", v9, v10, v13, v14);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        if (v16 >= v15)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a2) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a2) >> 3);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v18;
          v33[4] = (void **)(a2 + 16);
          if (v20)
            v21 = (void **)sub_20BDE4FF4(a2 + 16, v20);
          else
            v21 = 0;
          v22 = &v21[3 * v17];
          v33[0] = v21;
          v33[1] = v22;
          v33[3] = &v21[3 * v20];
          v22[2] = v27;
          *(_OWORD *)v22 = *(_OWORD *)__p;
          v27 = 0;
          *(_OWORD *)__p = 0uLL;
          v33[2] = v22 + 3;
          sub_20BDF34C0((uint64_t *)a2, v33);
          v23 = *(_QWORD *)(a2 + 8);
          sub_20BDF3648((uint64_t)v33);
          *(_QWORD *)(a2 + 8) = v23;
        }
        else
        {
          *(_QWORD *)(v16 + 16) = v27;
          *(_OWORD *)v16 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 8) = v16 + 24;
        }
        v11 += 3;
      }
      v33[0] = (void **)&v28;
      sub_20BDE5038(v33);
      if (v32 < 0)
        operator delete(v31[0]);
      v7 = v25 + 1;
    }
    while (v25 + 1 != v24);
  }
}

void sub_20C693050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::GetErrors(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *__p[2];
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  void **v33[5];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20BE71C2C((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
  v4 = (__int128 *)*((_QWORD *)this + 6);
  v5 = (__int128 *)*((_QWORD *)this + 7);
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a2 + 8);
    do
    {
      if (v6 >= *(_QWORD *)(a2 + 16))
      {
        v6 = sub_20BF3E2A4((uint64_t *)a2, v4);
      }
      else
      {
        sub_20BE4EDF4((_QWORD *)a2, v4);
        v6 += 24;
      }
      *(_QWORD *)(a2 + 8) = v6;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  v7 = *(_QWORD **)this;
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v24)
  {
    do
    {
      v8 = *v7;
      (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)*v7 + 16))(v31, *v7);
      v25 = v7;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      sub_20BE78B98((char *)&v28, *(__int128 **)(v8 + 40), *(__int128 **)(v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40)) >> 3));
      v11 = v28;
      v12 = v29;
      while (v11 != v12)
      {
        if (v32 >= 0)
          v13 = v31;
        else
          v13 = (void **)v31[0];
        v14 = v11;
        if (*((char *)v11 + 23) < 0)
          v14 = (uint64_t *)*v11;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error checking rule '%s': %s", v9, v10, v13, v14);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        if (v16 >= v15)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a2) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a2) >> 3);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v18;
          v33[4] = (void **)(a2 + 16);
          if (v20)
            v21 = (void **)sub_20BDE4FF4(a2 + 16, v20);
          else
            v21 = 0;
          v22 = &v21[3 * v17];
          v33[0] = v21;
          v33[1] = v22;
          v33[3] = &v21[3 * v20];
          v22[2] = v27;
          *(_OWORD *)v22 = *(_OWORD *)__p;
          v27 = 0;
          *(_OWORD *)__p = 0uLL;
          v33[2] = v22 + 3;
          sub_20BDF34C0((uint64_t *)a2, v33);
          v23 = *(_QWORD *)(a2 + 8);
          sub_20BDF3648((uint64_t)v33);
          *(_QWORD *)(a2 + 8) = v23;
        }
        else
        {
          *(_QWORD *)(v16 + 16) = v27;
          *(_OWORD *)v16 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 8) = v16 + 24;
        }
        v11 += 3;
      }
      v33[0] = (void **)&v28;
      sub_20BDE5038(v33);
      if (v32 < 0)
        operator delete(v31[0]);
      v7 = v25 + 1;
    }
    while (v25 + 1 != v24);
  }
}

void sub_20C693358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::GetFailedChecks(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *__p[2];
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  void **v33[5];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20BE71C2C((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3));
  v4 = (__int128 *)*((_QWORD *)this + 9);
  v5 = (__int128 *)*((_QWORD *)this + 10);
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a2 + 8);
    do
    {
      if (v6 >= *(_QWORD *)(a2 + 16))
      {
        v6 = sub_20BF3E2A4((uint64_t *)a2, v4);
      }
      else
      {
        sub_20BE4EDF4((_QWORD *)a2, v4);
        v6 += 24;
      }
      *(_QWORD *)(a2 + 8) = v6;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  v7 = *(_QWORD **)this;
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v24)
  {
    do
    {
      v8 = *v7;
      (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)*v7 + 16))(v31, *v7);
      v25 = v7;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      sub_20BE78B98((char *)&v28, *(__int128 **)(v8 + 16), *(__int128 **)(v8 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 3));
      v11 = v28;
      v12 = v29;
      while (v11 != v12)
      {
        v13 = v11;
        if (*((char *)v11 + 23) < 0)
          v13 = (uint64_t *)*v11;
        if (v32 >= 0)
          v14 = v31;
        else
          v14 = (void **)v31[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (fails '%s')", v9, v10, v13, v14);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        if (v16 >= v15)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a2) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a2) >> 3);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v18;
          v33[4] = (void **)(a2 + 16);
          if (v20)
            v21 = (void **)sub_20BDE4FF4(a2 + 16, v20);
          else
            v21 = 0;
          v22 = &v21[3 * v17];
          v33[0] = v21;
          v33[1] = v22;
          v33[3] = &v21[3 * v20];
          v22[2] = v27;
          *(_OWORD *)v22 = *(_OWORD *)__p;
          v27 = 0;
          *(_OWORD *)__p = 0uLL;
          v33[2] = v22 + 3;
          sub_20BDF34C0((uint64_t *)a2, v33);
          v23 = *(_QWORD *)(a2 + 8);
          sub_20BDF3648((uint64_t)v33);
          *(_QWORD *)(a2 + 8) = v23;
        }
        else
        {
          *(_QWORD *)(v16 + 16) = v27;
          *(_OWORD *)v16 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 8) = v16 + 24;
        }
        v11 += 3;
      }
      v33[0] = (void **)&v28;
      sub_20BDE5038(v33);
      if (v32 < 0)
        operator delete(v31[0]);
      v7 = v25 + 1;
    }
    while (v25 + 1 != v24);
  }
}

void sub_20C693660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckCompliance(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t *Resolver;
  const char *v24;
  char *v25;
  BOOL v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::UsdStage *v38;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  uint64_t *v40;
  uint64_t v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v62;
  uint64_t *FileFormat;
  uint64_t v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v68;
  uint64_t Identifier;
  uint64_t *v70;
  uint64_t *v71;
  _OWORD *v72;
  _QWORD *v73;
  _OWORD *v74;
  BOOL v75;
  pxrInternal__aapl__pxrReserved__::UsdStage *v76;
  pxrInternal__aapl__pxrReserved__::UsdStage *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t *v86;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  const char *v94;
  char *v95;
  void **v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  double v118[2];
  void *v119[2];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123[3];
  uint64_t v124[3];
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128[3];
  uint64_t v129[3];
  pxrInternal__aapl__pxrReserved__ *v130;
  _BYTE v131[32];
  __int128 v132;
  char *v133;
  void *__p;
  uint64_t v135;
  char v136;
  __int128 v137;
  char *v138;
  __int128 *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)a1;
  v5 = *(uint64_t **)(a1 + 8);
  while (v4 != v5)
  {
    v6 = *v4++;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile(a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::UsdUtilsCoalescingDiagnosticDelegate((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)v131);
    if (*(_BYTE *)(a1 + 123))
    {
      v9 = sub_20BDDC1C8(MEMORY[0x24BEDB318], (uint64_t)"Opening ", 8);
      v10 = *(char *)(a2 + 23);
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      v13 = sub_20BDDC1C8(v9, v11, v12);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v14 = std::locale::use_facet((const std::locale *)&v132, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale((std::locale *)&v132);
      std::ostream::put();
      std::ostream::flush();
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::Open(a2, 0, &v130);
    pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)v131, v129);
    v16 = *(uint64_t **)a1;
    v17 = *(uint64_t **)(a1 + 8);
    while (v16 != v17)
    {
      v18 = *v16;
      (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__ **))(*(_QWORD *)*v16 + 40))(*v16, &v130);
      v15 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 56))(v18, v129);
      ++v16;
    }
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v15);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContext(v128, (pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v140, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)v128);
    v125 = 0;
    v126 = 0;
    v127 = 0;
    memset(v124, 0, sizeof(v124));
    memset(v123, 0, sizeof(v123));
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v132, a2);
    v139 = 0;
    v26 = pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies((uint64_t)&v132, (uint64_t)&v125, v124, v123, (uint64_t)&v137);
    v27 = v139;
    if (v139 == &v137)
    {
      v28 = 4;
      v27 = &v137;
    }
    else
    {
      if (!v139)
        goto LABEL_34;
      v28 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_34:
    if (v136 < 0)
      operator delete(__p);
    if (SHIBYTE(v133) < 0)
    {
      operator delete((void *)v132);
      if (v26)
        goto LABEL_38;
    }
    else if (v26)
    {
LABEL_38:
      v35 = *(uint64_t **)a1;
      v36 = *(uint64_t **)(a1 + 8);
      while (v35 != v36)
      {
        v37 = *v35;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)*v35 + 64))(*v35, v123);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__ **, uint64_t **, uint64_t *))(*(_QWORD *)v37 + 72))(v37, &v130, &v125, v124);
        ++v35;
      }
      if (!*(_BYTE *)(a1 + 121))
      {
        *((_QWORD *)&v137 + 1) = 0;
        v138 = 0;
        *(_QWORD *)&v137 = (char *)&v137 + 8;
        v60 = v125;
        v61 = v126;
        if (v125 != v126)
        {
          do
          {
            v62 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v60);
            FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v62);
            v64 = sub_20BFCF6F4(FileFormat);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64) & 1) != 0
              || (v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v60),
                  v66 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v65),
                  pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v66)))
            {
              v68 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v60);
              Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v68);
              pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(Identifier, (uint64_t)&v132);
              *(_OWORD *)v119 = v132;
              v120 = (uint64_t)v133;
              v133 = 0;
              v132 = 0uLL;
              if (v136 < 0)
              {
                operator delete(__p);
                if (SHIBYTE(v133) < 0)
                  operator delete((void *)v132);
              }
              sub_20BE74FC0((uint64_t **)&v137, (const void **)v119, (uint64_t)v119);
              if (SHIBYTE(v120) < 0)
                operator delete(v119[0]);
            }
            v70 = *(uint64_t **)a1;
            v71 = *(uint64_t **)(a1 + 8);
            while (v70 != v71)
            {
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)*v70 + 88))(*v70, v60);
              ++v70;
            }
            ++v60;
          }
          while (v60 != v61);
          v72 = (_OWORD *)v137;
          if ((__int128 *)v137 != (__int128 *)((char *)&v137 + 8))
          {
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(a1, (uint64_t)(v72 + 2), v67);
              v73 = (_QWORD *)*((_QWORD *)v72 + 1);
              if (v73)
              {
                do
                {
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
              }
              else
              {
                do
                {
                  v74 = (_OWORD *)*((_QWORD *)v72 + 2);
                  v75 = *(_QWORD *)v74 == (_QWORD)v72;
                  v72 = v74;
                }
                while (!v75);
              }
              v72 = v74;
            }
            while (v74 != (__int128 *)((char *)&v137 + 8));
          }
        }
        v76 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v130);
        v77 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v130);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v77, (uint64_t *)v119);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v118, 0.0, 1.0);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(&v132, v119, v118[0], v118[1]);
        pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v76, (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)&v132);
        sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v133);
        v78 = *((_QWORD *)&v132 + 1);
        if (*((_QWORD *)&v132 + 1))
        {
          v79 = (unsigned int *)(*((_QWORD *)&v132 + 1) + 8);
          do
          {
            v80 = __ldxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        }
        v82 = v119[1];
        if (v119[1])
        {
          v83 = (unsigned int *)((char *)v119[1] + 8);
          do
          {
            v84 = __ldxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
            (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
        }
        v86 = sub_20C696CA8(&v121, (uint64_t *)&v130);
        UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate((pxrInternal__aapl__pxrReserved__ *)v86);
        v88 = UsdPrimDefaultPredicate[1].i64[0];
        v89.i64[0] = -8193;
        v89.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v89).u64[0];
        v89.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
        *(int8x16_t *)v119 = v89;
        v120 = v88;
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage(&v121, v119, (uint64_t)&v132);
        v90 = v122;
        if (v122)
        {
          v91 = (unsigned int *)(v122 + 8);
          do
          {
            v92 = __ldxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
            (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
        }
        pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseRange(a1, (uint64_t *)&v132, 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v133 + 1);
        sub_20BFD265C(&v133);
        sub_20BDECAB8((uint64_t)&v137, *((char **)&v137 + 1));
        goto LABEL_127;
      }
      v38 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v130);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v38, &v121);
      v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v121);
      v40 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v39);
      v41 = sub_20BFCF6F4(v40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41))
      {
        v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v121);
        v43 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v42);
        pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(v43, (uint64_t)&v132);
        v137 = v132;
        v138 = v133;
        v133 = 0;
        v132 = 0uLL;
        if (v136 < 0)
        {
          operator delete(__p);
          if (SHIBYTE(v133) < 0)
            operator delete((void *)v132);
        }
        pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(a1, (uint64_t)&v137, v44);
        if ((SHIBYTE(v138) & 0x80000000) == 0)
          goto LABEL_122;
        v45 = (void *)v137;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdDescribe(&v130, v119);
        if (v120 >= 0)
          v96 = v119;
        else
          v96 = (void **)v119[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Root layer of the USD stage (%s) doesn't belong to a package, but 'rootPackageOnly' is True!", v94, v95, v96);
        v97 = *(_QWORD *)(a1 + 64);
        v98 = *(_QWORD *)(a1 + 56);
        if (v98 >= v97)
        {
          v104 = *(_QWORD *)(a1 + 48);
          v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - v104) >> 3);
          v106 = v105 + 1;
          if (v105 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - v104) >> 3);
          if (2 * v107 > v106)
            v106 = 2 * v107;
          if (v107 >= 0x555555555555555)
            v108 = 0xAAAAAAAAAAAAAAALL;
          else
            v108 = v106;
          v135 = a1 + 64;
          if (v108)
            v109 = (char *)sub_20BDE4FF4(a1 + 64, v108);
          else
            v109 = 0;
          v110 = &v109[24 * v105];
          *(_QWORD *)&v132 = v109;
          *((_QWORD *)&v132 + 1) = v110;
          __p = &v109[24 * v108];
          v111 = v137;
          *((_QWORD *)v110 + 2) = v138;
          *(_OWORD *)v110 = v111;
          v138 = 0;
          v137 = 0uLL;
          v133 = v110 + 24;
          sub_20BDF34C0((uint64_t *)(a1 + 48), &v132);
          v112 = *(_QWORD *)(a1 + 56);
          sub_20BDF3648((uint64_t)&v132);
          v113 = SHIBYTE(v138);
          *(_QWORD *)(a1 + 56) = v112;
          if (v113 < 0)
            operator delete((void *)v137);
        }
        else
        {
          v99 = v137;
          *(_QWORD *)(v98 + 16) = v138;
          *(_OWORD *)v98 = v99;
          v138 = 0;
          v137 = 0uLL;
          *(_QWORD *)(a1 + 56) = v98 + 24;
        }
        if ((SHIBYTE(v120) & 0x80000000) == 0)
          goto LABEL_122;
        v45 = v119[0];
      }
      operator delete(v45);
LABEL_122:
      v114 = v122;
      if (v122)
      {
        v115 = (unsigned int *)(v122 + 8);
        do
        {
          v116 = __ldxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (!v117)
          (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
      }
LABEL_127:
      *(_QWORD *)&v132 = v123;
      sub_20BDE5038((void ***)&v132);
      *(_QWORD *)&v132 = v124;
      sub_20BDE5038((void ***)&v132);
      *(_QWORD *)&v132 = &v125;
      sub_20C248B78((void ***)&v132);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v140);
      *(_QWORD *)&v132 = v128;
      sub_20BDE9EB0((void ***)&v132);
      *(_QWORD *)&v132 = v129;
      sub_20C68A8FC((void ***)&v132);
      sub_20C455C74(&v130);
      pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)v131);
      return;
    }
    if (*(char *)(a2 + 23) >= 0)
      v46 = a2;
    else
      v46 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to get dependencies of %s.", v24, v25, v46);
    v47 = *(_QWORD *)(a1 + 64);
    v48 = *(_QWORD *)(a1 + 56);
    if (v48 >= v47)
    {
      v50 = *(_QWORD *)(a1 + 48);
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v50) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v50) >> 3);
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v52;
      v135 = a1 + 64;
      if (v54)
        v55 = (char *)sub_20BDE4FF4(a1 + 64, v54);
      else
        v55 = 0;
      v100 = &v55[24 * v51];
      *(_QWORD *)&v132 = v55;
      *((_QWORD *)&v132 + 1) = v100;
      __p = &v55[24 * v54];
      v101 = v137;
      *((_QWORD *)v100 + 2) = v138;
      *(_OWORD *)v100 = v101;
      v138 = 0;
      v137 = 0uLL;
      v133 = v100 + 24;
      sub_20BDF34C0((uint64_t *)(a1 + 48), &v132);
      v102 = *(_QWORD *)(a1 + 56);
      sub_20BDF3648((uint64_t)&v132);
      v103 = SHIBYTE(v138);
      *(_QWORD *)(a1 + 56) = v102;
      if (v103 < 0)
        operator delete((void *)v137);
    }
    else
    {
      v49 = v137;
      *(_QWORD *)(v48 + 16) = v138;
      *(_OWORD *)v48 = v49;
      *(_QWORD *)(a1 + 56) = v48 + 24;
    }
    goto LABEL_127;
  }
  if (*(char *)(a2 + 23) >= 0)
    v19 = a2;
  else
    v19 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot open file '%s' on a USD stage.", v7, v8, v19);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 56);
  if (v21 >= v20)
  {
    v29 = *(_QWORD *)(a1 + 48);
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v29) >> 3);
    v31 = v30 + 1;
    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v29) >> 3);
    if (2 * v32 > v31)
      v31 = 2 * v32;
    if (v32 >= 0x555555555555555)
      v33 = 0xAAAAAAAAAAAAAAALL;
    else
      v33 = v31;
    v135 = a1 + 64;
    if (v33)
      v34 = (char *)sub_20BDE4FF4(a1 + 64, v33);
    else
      v34 = 0;
    v56 = &v34[24 * v30];
    *(_QWORD *)&v132 = v34;
    *((_QWORD *)&v132 + 1) = v56;
    __p = &v34[24 * v33];
    v57 = v140;
    *((_QWORD *)v56 + 2) = v141;
    *(_OWORD *)v56 = v57;
    v141 = 0;
    v140 = 0uLL;
    v133 = v56 + 24;
    sub_20BDF34C0((uint64_t *)(a1 + 48), &v132);
    v58 = *(_QWORD *)(a1 + 56);
    sub_20BDF3648((uint64_t)&v132);
    v59 = SHIBYTE(v141);
    *(_QWORD *)(a1 + 56) = v58;
    if (v59 < 0)
      operator delete((void *)v140);
  }
  else
  {
    v22 = v140;
    *(_QWORD *)(v21 + 16) = v141;
    *(_OWORD *)v21 = v22;
    *(_QWORD *)(a1 + 56) = v21 + 24;
  }
}

void sub_20C6940F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, unsigned int *a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  uint64_t v43;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;

  sub_20BDF3648((uint64_t)&a43);
  if (*(char *)(v43 - 137) < 0)
    operator delete(*(void **)(v43 - 160));
  if (a18 < 0)
    operator delete(__p);
  if (a20)
  {
    v45 = a20 + 2;
    do
    {
      v46 = __ldxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      (*(void (**)(unsigned int *))(*(_QWORD *)a20 + 8))(a20);
  }
  *(_QWORD *)(v43 - 160) = &a21;
  sub_20BDE5038((void ***)(v43 - 160));
  *(_QWORD *)(v43 - 160) = &a24;
  sub_20BDE5038((void ***)(v43 - 160));
  *(_QWORD *)(v43 - 160) = &a27;
  sub_20C248B78((void ***)(v43 - 160));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v43 - 120));
  *(_QWORD *)(v43 - 120) = &a30;
  sub_20BDE9EB0((void ***)(v43 - 120));
  *(_QWORD *)(v43 - 120) = &a33;
  sub_20C68A8FC((void ***)(v43 - 120));
  sub_20C455C74(&a36);
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)&a37);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *Resolver;
  const char *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  _QWORD v61[2];
  void *v62[2];
  uint64_t v63;
  void *__p[2];
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  _QWORD *v70;
  void *v71[2];
  char v72;

  if (*(char *)(a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checkign package <%s>", (const char *)a2, a3, v5);
  v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::Msg(a1, (uint64_t)__p);
  if (SHIBYTE(v65) < 0)
    operator delete(__p[0]);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  if (v72 < 0)
  {
    if (v71[1] != (void *)4)
      goto LABEL_12;
    v10 = (void **)v71[0];
  }
  else
  {
    if (v72 != 4)
      goto LABEL_12;
    v10 = v71;
  }
  if (*(_DWORD *)v10 != 2053403509)
  {
LABEL_12:
    if (*(char *)(a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Package at path %s has an invalid extension", v8, v9, v11);
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 56);
    if (v13 < v12)
    {
      v14 = v69;
      *(_QWORD *)(v13 + 16) = v70;
      *(_OWORD *)v13 = v14;
      *(_QWORD *)(a1 + 56) = v13 + 24;
      goto LABEL_42;
    }
    v15 = *(_QWORD *)(a1 + 48);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v15) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    v67 = a1 + 64;
    if (v19)
      v20 = (char *)sub_20BDE4FF4(a1 + 64, v19);
    else
      v20 = 0;
    v30 = &v20[24 * v16];
    __p[0] = v20;
    __p[1] = v30;
    v66 = &v20[24 * v19];
    v31 = v69;
    *((_QWORD *)v30 + 2) = v70;
    *(_OWORD *)v30 = v31;
    v70 = 0;
    v69 = 0uLL;
    v65 = v30 + 24;
    sub_20BDF34C0((uint64_t *)(a1 + 48), __p);
    v32 = *(_QWORD *)(a1 + 56);
    sub_20BDF3648((uint64_t)__p);
    v33 = SHIBYTE(v70);
    *(_QWORD *)(a1 + 56) = v32;
    if (v33 < 0)
      goto LABEL_41;
    goto LABEL_42;
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(a2, (uint64_t)__p);
    v69 = *(_OWORD *)__p;
    v70 = v65;
    __p[1] = 0;
    v65 = 0;
    __p[0] = 0;
    if (v68 < 0)
    {
      operator delete(v66);
      if (SHIBYTE(v65) < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(a1, &v69);
    if (SHIBYTE(v70) < 0)
      operator delete((void *)v69);
  }
  if (a1 + 104 == sub_20BDEEBA4(a1 + 96, (const void **)a2))
  {
    v21 = sub_20BE74FC0((uint64_t **)(a1 + 96), (const void **)a2, a2);
    v22 = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v21);
    pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)v22);
    v25 = HIBYTE(v70);
    if (SHIBYTE(v70) < 0)
      v25 = *((_QWORD *)&v69 + 1);
    if (v25)
    {
      pxrInternal__aapl__pxrReserved__::UsdZipFile::Open(a2, v61);
      if (v61[0])
      {
        v29 = *(_QWORD **)a1;
        v28 = *(_QWORD **)(a1 + 8);
        while (v29 != v28)
        {
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v29 + 80))(*v29, v61, a2);
          ++v29;
        }
      }
      else
      {
        v38 = &v69;
        if (SHIBYTE(v70) < 0)
          v38 = (__int128 *)v69;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Could not open package at path '%s'", v26, v27, v38);
        v39 = *(_QWORD *)(a1 + 64);
        v40 = *(_QWORD *)(a1 + 56);
        if (v40 >= v39)
        {
          v48 = *(_QWORD *)(a1 + 48);
          v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v48) >> 3);
          v50 = v49 + 1;
          if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v48) >> 3);
          if (2 * v51 > v50)
            v50 = 2 * v51;
          if (v51 >= 0x555555555555555)
            v52 = 0xAAAAAAAAAAAAAAALL;
          else
            v52 = v50;
          v67 = a1 + 64;
          if (v52)
            v53 = (char *)sub_20BDE4FF4(a1 + 64, v52);
          else
            v53 = 0;
          v57 = &v53[24 * v49];
          __p[0] = v53;
          __p[1] = v57;
          v66 = &v53[24 * v52];
          v58 = *(_OWORD *)v62;
          *((_QWORD *)v57 + 2) = v63;
          *(_OWORD *)v57 = v58;
          v62[1] = 0;
          v63 = 0;
          v62[0] = 0;
          v65 = v57 + 24;
          sub_20BDF34C0((uint64_t *)(a1 + 48), __p);
          v59 = *(_QWORD *)(a1 + 56);
          sub_20BDF3648((uint64_t)__p);
          v60 = SHIBYTE(v63);
          *(_QWORD *)(a1 + 56) = v59;
          if (v60 < 0)
            operator delete(v62[0]);
        }
        else
        {
          v41 = *(_OWORD *)v62;
          *(_QWORD *)(v40 + 16) = v63;
          *(_OWORD *)v40 = v41;
          *(_QWORD *)(a1 + 56) = v40 + 24;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v61);
    }
    else
    {
      v34 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to resolve package path '%s'", v23, v24, v34);
      v35 = *(_QWORD *)(a1 + 64);
      v36 = *(_QWORD *)(a1 + 56);
      if (v36 >= v35)
      {
        v42 = *(_QWORD *)(a1 + 48);
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v42) >> 3);
        v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v42) >> 3);
        if (2 * v45 > v44)
          v44 = 2 * v45;
        v46 = v45 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v44;
        v67 = a1 + 64;
        v47 = v46 ? (char *)sub_20BDE4FF4(a1 + 64, v46) : 0;
        v54 = &v47[24 * v43];
        __p[0] = v47;
        __p[1] = v54;
        v66 = &v47[24 * v46];
        v55 = *(_OWORD *)v62;
        *((_QWORD *)v54 + 2) = v63;
        *(_OWORD *)v54 = v55;
        v62[1] = 0;
        v63 = 0;
        v62[0] = 0;
        v65 = v54 + 24;
        sub_20BDF34C0((uint64_t *)(a1 + 48), __p);
        v56 = *(_QWORD *)(a1 + 56);
        sub_20BDF3648((uint64_t)__p);
        *(_QWORD *)(a1 + 56) = v56;
      }
      else
      {
        v37 = *(_OWORD *)v62;
        *(_QWORD *)(v36 + 16) = v63;
        *(_OWORD *)v36 = v37;
        *(_QWORD *)(a1 + 56) = v36 + 24;
      }
    }
    if (SHIBYTE(v70) < 0)
LABEL_41:
      operator delete((void *)v69);
  }
LABEL_42:
  if (v72 < 0)
    operator delete(v71[0]);
}

void sub_20C69490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  sub_20BDF3648((uint64_t)&a18);
  if (a17 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&a10);
  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckLayer(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *(uint64_t **)result;
  v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      v5 = *v2++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
    }
    while (v2 != v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseRange(uint64_t a1, uint64_t *a2, char a3)
{
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t i;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD v33[3];
  _BYTE v34[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void **v54;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  sub_20C37ECB8(a2, (uint64_t)&v39);
  sub_20C37EEF4((uint64_t)&v39, (uint64_t)&v43);
  sub_20C35C4F8((uint64_t)&v47, (uint64_t *)&v44, &v45);
  if ((v46 & 7) != 0)
  {
    v6 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_20BFD265C(&v45);
  if (v44)
    sub_20C35C614(v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
  sub_20BFD265C(&v41);
  sub_20C37ECB8(a2, (uint64_t)&v43);
  while (1)
  {
    v39 = a2[1];
    v40 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v41 + 1);
    LODWORD(v42) = 0;
    WORD2(v42) = 0;
    if (v44 == v40 && v43 == v39)
    {
      v8 = 1;
      if (v45 == v41 && !(_DWORD)v46 && !BYTE4(v46))
        v8 = BYTE5(v46) != 0;
    }
    else
    {
      v8 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
    sub_20BFD265C(&v41);
    if (!v8)
      break;
    sub_20C37EEF4((uint64_t)&v43, (uint64_t)v34);
    sub_20C35C4F8((uint64_t)&v39, (uint64_t *)&v35, &v36);
    if ((v38 & 7) != 0)
    {
      v9 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
    sub_20BFD265C(&v36);
    if (v35)
      sub_20C35C614(v35);
    if (*(_BYTE *)(a1 + 122)
      || (a3 & 1) == 0
      && (_DWORD)v39 == (_DWORD)v47
      && v40 == v48
      && v41 == v49
      && (v42 & 0xFFFFFFFFFFFFFFF8) == (v50 & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = *(_QWORD **)a1;
      v11 = *(_QWORD **)(a1 + 8);
      while (v12 != v11)
      {
        (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v12 + 48))(*v12, &v39);
        ++v12;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v39, (uint64_t)v34);
      pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)v34, v33);
      if (v33[0] == v33[1])
      {
        v16 = *(_QWORD **)a1;
        v15 = *(_QWORD **)(a1 + 8);
        while (v16 != v15)
        {
          (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v16 + 48))(*v16, &v39);
          ++v16;
        }
      }
      else
      {
        v13 = v52;
        if (v52 >= v53)
        {
          v14 = sub_20C697220(&v51, (uint64_t)&v39);
        }
        else
        {
          sub_20C37F2BC((uint64_t)&v53, v52, (uint64_t)&v39);
          v14 = v13 + 32;
        }
        v52 = v14;
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v43);
      }
      v54 = (void **)v33;
      sub_20BDE5038(&v54);
      if ((v38 & 7) != 0)
      {
        v17 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
      sub_20BFD265C(&v36);
      if (v35)
        sub_20C35C614(v35);
    }
    if ((v42 & 7) != 0)
    {
      v19 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
    sub_20BFD265C(&v41);
    if (v40)
      sub_20C35C614(v40);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v43);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_20BFD265C(&v45);
  v21 = v51;
  for (i = v52; v21 != i; v21 += 32)
  {
    LODWORD(v43) = *(_DWORD *)v21;
    v23 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v21 + 8);
    v44 = v23;
    if (v23)
    {
      v24 = (unint64_t *)((char *)v23 + 48);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    sub_20BFD6E54(&v45, (_DWORD *)(v21 + 16));
    sub_20BFD6EA4((_DWORD *)&v45 + 1, (_DWORD *)(v21 + 20));
    v26 = *(_QWORD *)(v21 + 24);
    v46 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v46 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseVariants((pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *)a1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v43);
    if ((v46 & 7) != 0)
    {
      v29 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
    if (v44)
      sub_20C35C614(v44);
  }
  if ((v50 & 7) != 0)
  {
    v31 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  if (v48)
    sub_20C35C614(v48);
  v47 = (void **)&v51;
  sub_20C45FC78(&v47);
}

void sub_20C694F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  uint64_t v28;

  sub_20C35C2E0((uint64_t)&a28);
  a28 = (void **)(v28 - 120);
  sub_20C45FC78(&a28);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPrim(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *(uint64_t **)result;
  v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      v5 = *v2++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_20C695054(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseVariants(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *i;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int8x16_t v11;
  __int128 **v12;
  __int128 *v13;
  pxrInternal__aapl__pxrReserved__ *v14;
  void **v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v19;
  _QWORD *v20;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v22;
  __int128 v23;
  unsigned int *v24;
  unsigned int v25;
  int8x16_t v26;
  int8x16_t v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  __int128 **v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  void *__p;
  char v41;
  __int128 **v42;
  char *v43;
  unint64_t v44;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v45;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  char v47[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  int v49;
  int v50;
  uint64_t v51;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(a2, (uint64_t)v47);
    pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)v47, &v45);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v4 = v45;
    for (i = v46; v4 != i; v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v4 + 24))
    {
      pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet((pxrInternal__aapl__pxrReserved__::UsdProperty *)v47, v4, (uint64_t)&v35);
      pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v35, v6, &v33);
      v7 = v43;
      if ((unint64_t)v43 >= v44)
      {
        v8 = sub_20BF3E420((uint64_t *)&v42, &v33);
      }
      else
      {
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        sub_20BE78B98(v7, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
        v8 = (uint64_t)(v7 + 24);
      }
      v43 = (char *)v8;
      v30 = (void **)&v33;
      sub_20BDE5038(&v30);
      if (v41 < 0)
        operator delete(__p);
      if ((v39 & 7) != 0)
      {
        v9 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
      sub_20BFD265C(&v37);
      if (v36)
        sub_20C35C614(v36);
    }
    pxrInternal__aapl__pxrReserved__::CartesianProduct(&v42, (uint64_t *)&v33);
    v12 = (__int128 **)v33;
    v13 = v34;
    if (v33 != v34)
    {
      v11.i64[0] = -8193;
      v27 = v11;
      v26 = (int8x16_t)vdupq_n_s64(0x2000uLL);
      do
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v14 = (pxrInternal__aapl__pxrReserved__ *)sub_20BE78B98((char *)&v30, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3));
        v15 = v30;
        if (v31 != v30)
        {
          v16 = 0;
          v17 = 1;
          do
          {
            v14 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdVariantSets::SetSelection((uint64_t)v47, (__int128 *)((char *)v45 + 24 * v16), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v15[3 * v16]);
            v16 = v17;
            v15 = v30;
          }
          while (0xAAAAAAAAAAAAAAABLL * (v31 - v30) > v17++);
        }
        v19 = *(_QWORD **)this;
        v20 = (_QWORD *)*((_QWORD *)this + 1);
        while (v19 != v20)
        {
          v14 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 32))(*v19);
          ++v19;
        }
        UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v14);
        v22 = UsdPrimDefaultPredicate[1].i64[0];
        *(_QWORD *)&v23 = vandq_s8(*UsdPrimDefaultPredicate, v27).u64[0];
        *((_QWORD *)&v23 + 1) = vorrq_s8(*UsdPrimDefaultPredicate, v26).i64[1];
        v28 = v23;
        v29 = v22;
        sub_20C37F5FC((uint64_t)&v35, (uint64_t)a2, &v28);
        pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseRange(this, &v35, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
        sub_20BFD265C(&v37);
        v35 = (__int128 **)&v30;
        sub_20BDE5038((void ***)&v35);
        v12 += 3;
      }
      while (v12 != (__int128 **)v13);
    }
    v35 = &v33;
    sub_20BF3DFA8((void ***)&v35);
    v35 = (__int128 **)&v42;
    sub_20BF3DFA8((void ***)&v35);
    v35 = (__int128 **)&v45;
    sub_20BDE5038((void ***)&v35);
    if ((v51 & 7) != 0)
    {
      v24 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
    sub_20BFD265C(&v49);
    if (v48)
      sub_20C35C614(v48);
  }
}

void sub_20C6953C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  a23 = (void **)&a30;
  sub_20BF3DFA8(&a23);
  a23 = (void **)(v30 - 144);
  sub_20BDE5038(&a23);
  sub_20C695054(v30 - 120);
  _Unwind_Resume(a1);
}

void sub_20C695494(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C6954A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ByteAlignmentChecker");
}

_QWORD *sub_20C6954B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "Files within a usdz package must be laid out properly, i.e. they should be aligned to 64 bytes.");
}

void sub_20C6954E8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C6954FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "CompressionChecker");
}

_QWORD *sub_20C69550C@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "Files within a usdz package should not be compressed or encrypted.");
}

void sub_20C695520(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C695534@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "MissingReferenceChecker");
}

_QWORD *sub_20C695544@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "The composed USD stage should not contain any unresolvable asset dependencies (in every possible variation of the asset), when using the default asset resolver. ");
}

void sub_20C69555C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C695570@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "StageMetadataChecker");
}

_QWORD *sub_20C695580@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "All stages should declare their 'upAxis' and 'metersPerUnit'. Stages that can be consumed as referencable assets should furthermore havea valid 'defaultPrim' declared, and stages meant for consumer-level packagingshould always have upAxis set to 'Y' ");
}

uint64_t sub_20C695590(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C540848;
  sub_20BDECAB8(a1 + 120, *(char **)(a1 + 128));
  sub_20BDECAB8(a1 + 96, *(char **)(a1 + 104));
  return sub_20C695E28(a1);
}

void sub_20C6955D0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C540848;
  sub_20BDECAB8(a1 + 120, *(char **)(a1 + 128));
  sub_20BDECAB8(a1 + 96, *(char **)(a1 + 104));
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C695614@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "TextureChecker");
}

_QWORD *sub_20C695624@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "Texture files should be readable by intended client (only .jpg, .jpeg or .png for consumer-level USDZ).");
}

uint64_t sub_20C695634(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5408D0;
  sub_20C696900(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_20C6969B4(a1 + 88, *(_QWORD **)(a1 + 96));
  return sub_20C695E28(a1);
}

void sub_20C695674(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C5408D0;
  sub_20C696900(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_20C6969B4(a1 + 88, *(_QWORD **)(a1 + 96));
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C6956B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "PrimEncapsulationChecker");
}

_QWORD *sub_20C6956C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "Check for basic prim encapsulation rules:- Boundables may not be nested under Gprims- Connectable prims (e.g. Shader, Material, etc) can only be nestedinside other Container-like Connectable prims. Container-like primsinclude Material, NodeGraph, Light, LightFilter, and *exclude Shader*");
}

uint64_t sub_20C6956D8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_24C540958;
  v2 = *(_QWORD *)(a1 + 120);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 112);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  return sub_20C695E28(a1);
}

void sub_20C695750(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  *(_QWORD *)a1 = off_24C540958;
  v2 = *(_QWORD *)(a1 + 120);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 112);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  v8 = (void *)sub_20C695E28(a1);
  operator delete(v8);
}

_QWORD *sub_20C6957CC@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "NormalMapTextureChecker");
}

_QWORD *sub_20C6957DC@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "UsdUVTexture nodes that feed the _inputs:normals_ of aUsdPreviewSurface must ensure that the data is encoded and scaled properly.Specifically:- Since normals are expected to be in the range [(-1,-1,-1), (1,1,1)],the Texture node must transform 8-bit textures from their [0..1] range bysetting its _inputs:scale_ to (2, 2, 2, 1) and_inputs:bias_ to (-1, -1, -1, 0)- Normal map data is commonly expected to be linearly encoded.  However, manyimage-writing tools automatically set the profile of three-channel, 8-bitimages to SRGB.  To prevent an unwanted transformation, the UsdUVTexture's _inputs:sourceColorSpace_ must be set to 'raw'");
}

void sub_20C6957F0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C695804@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "MaterialBindingAPIAppliedChecker");
}

_QWORD *sub_20C695814@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "A prim providing a material binding, must have MaterialBindingAPI applied on the prim.");
}

uint64_t sub_20C695824(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C540A68;
  v3 = (void **)(a1 + 88);
  sub_20BEEB2B8(&v3);
  return sub_20C695E28(a1);
}

void sub_20C69586C(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = off_24C540A68;
  v3 = (void **)(a1 + 88);
  sub_20BEEB2B8(&v3);
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C6958B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "SkelBindingAPIAppliedChecker");
}

_QWORD *sub_20C6958C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "A prim providing skelBinding properties, must have SkelBindingAPI applied on the prim.");
}

void sub_20C6958DC(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C6958F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ARKitPackageEncapsulationChecker");
}

_QWORD *sub_20C695900@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "If the root layer is a package, then the composed stage should not contain references to files outside the package. In other words, the package should be entirely self-contained.");
}

uint64_t sub_20C695910(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C540B78;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  return sub_20C695E28(a1);
}

void sub_20C695944(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C540B78;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C69597C@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ARKitLayerChecker");
}

_QWORD *sub_20C69598C@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "All included layers that participate in composition should have one of the core supported file formats.");
}

uint64_t sub_20C69599C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C540C00;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  return sub_20C695E28(a1);
}

void sub_20C6959D0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C540C00;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C695A08@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ARKitPrimTypeChecker");
}

_QWORD *sub_20C695A18@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "UsdGeomPointInstancers and custom schemas not provided by core USD are not allowed.");
}

uint64_t sub_20C695A28(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C540C88;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  return sub_20C695E28(a1);
}

void sub_20C695A5C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C540C88;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C695A94@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ARKitShaderChecker");
}

_QWORD *sub_20C695AA4@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "Shader nodes must have \"id\" as the implementationSource, with id values that begin with \"Usd*\". Also, shader inputs with connections must each have a single, valid connection source.");
}

void sub_20C695AB8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C695E28(a1);
  operator delete(v1);
}

_QWORD *sub_20C695ACC@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ARKitMaterialBindingChecker");
}

_QWORD *sub_20C695ADC@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "All material binding relationships must have valid targets.");
}

uint64_t sub_20C695AEC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C540D98;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  return sub_20C695E28(a1);
}

void sub_20C695B20(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C540D98;
  sub_20BDECAB8(a1 + 88, *(char **)(a1 + 96));
  v2 = (void *)sub_20C695E28(a1);
  operator delete(v2);
}

_QWORD *sub_20C695B58@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "ARKitFileExtensionChecker");
}

_QWORD *sub_20C695B68@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "Only layer files and textures are allowed in a package.");
}

uint64_t sub_20C695B78(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t i;
  uint64_t j;
  const void *v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C540848;
  *(_BYTE *)(a1 + 88) = 0;
  sub_20BDDC0E4(v8, "exr");
  sub_20BDDC0E4(v9, "jpg");
  sub_20BDDC0E4(v10, "jpeg");
  sub_20BDDC0E4(v11, "png");
  sub_20C695E90(a1 + 96, v8, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v11[i + 2]) < 0)
      operator delete((void *)v11[i]);
  }
  sub_20BDDC0E4(v8, "bmp");
  sub_20BDDC0E4(v9, "tga");
  sub_20BDDC0E4(v10, "hdr");
  sub_20BDDC0E4(v11, "tif");
  sub_20BDDC0E4(v12, "tx");
  sub_20BDDC0E4(v13, "zfile");
  sub_20C695E90(a1 + 120, v8, 6);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v13[j + 2]) < 0)
      operator delete((void *)v13[j]);
  }
  return a1;
}

void sub_20C695D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  while (1)
  {
    if (*(char *)(v3 + v5 + 143) < 0)
      operator delete(*(void **)(v3 + v5 + 120));
    v5 -= 24;
    if (v5 == -144)
    {
      sub_20BDECAB8(v2, *(char **)(v1 + 104));
      sub_20C695E28(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C695E28(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C5405A8;
  v2 = (void **)(a1 + 16);
  v4 = (void **)(a1 + 64);
  sub_20BDE5038(&v4);
  v4 = (void **)(a1 + 40);
  sub_20BDE5038(&v4);
  v4 = v2;
  sub_20BDE5038(&v4);
  return a1;
}

uint64_t sub_20C695E90(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_20BE7AA28((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_20C695EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C695F10(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t i;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C540958;
  sub_20BDDC0E4(v7, "bmp");
  sub_20BDDC0E4(v8, "tga");
  sub_20BDDC0E4(v9, "jpg");
  sub_20BDDC0E4(v10, "jpeg");
  sub_20BDDC0E4(v11, "png");
  sub_20BDDC0E4(v12, "tif");
  sub_20C695E90(a1 + 88, v7, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v12[i + 2]) < 0)
      operator delete((void *)v12[i]);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 112), "UsdPreviewSurface");
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 120), "UsdUVTexture");
  return a1;
}

void sub_20C696078(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v4 = v2;
  v6 = *v4;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20BDECAB8(v3, *(char **)(v1 + 96));
  sub_20C695E28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C696120(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t i;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C540B78;
  sub_20BDDC0E4(v7, "usd");
  sub_20BDDC0E4(v8, "usda");
  sub_20BDDC0E4(v9, "usdc");
  sub_20BDDC0E4(v10, "usdz");
  sub_20C695E90(a1 + 88, v7, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0)
      operator delete((void *)v10[i]);
  }
  return a1;
}

void sub_20C696234(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 95) < 0)
      operator delete(*(void **)(v2 + v4 + 72));
    v4 -= 24;
    if (v4 == -96)
    {
      sub_20C695E28(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C69629C(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v5;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C540C00;
  sub_20BDDC0E4(v7, "");
  sub_20BDDC0E4(v8, "Scope");
  sub_20BDDC0E4(v9, "Xform");
  sub_20BDDC0E4(v10, "Camera");
  sub_20BDDC0E4(v11, "Shader");
  sub_20BDDC0E4(v12, "Material");
  sub_20BDDC0E4(v13, "Mesh");
  sub_20BDDC0E4(v14, "Sphere");
  sub_20BDDC0E4(v15, "Cube");
  sub_20BDDC0E4(v16, "Cylinder");
  sub_20BDDC0E4(v17, "Cone");
  sub_20BDDC0E4(v18, "Capsule");
  sub_20BDDC0E4(v19, "GeomSubset");
  sub_20BDDC0E4(v20, "Points");
  sub_20BDDC0E4(v21, "SkelRoot");
  sub_20BDDC0E4(v22, "Skeleton");
  sub_20BDDC0E4(v23, "SkelAnimation");
  sub_20BDDC0E4(v24, "BlendShape");
  sub_20BDDC0E4(v25, "SpatialAudio");
  sub_20BDDC0E4(v26, "PhysicsScene");
  sub_20BDDC0E4(v27, "Preliminary_ReferenceImage");
  sub_20BDDC0E4(v28, "Preliminary_Text");
  sub_20BDDC0E4(v29, "Preliminary_Trigger");
  sub_20C695E90(a1 + 88, v7, 23);
  v5 = 69;
  do
  {
    if (SHIBYTE(v7[v5 - 1]) < 0)
      operator delete((void *)v7[v5 - 3]);
    v5 -= 3;
  }
  while (v5 * 8);
  return a1;
}

void sub_20C696558(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 552;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0)
      operator delete(*(void **)(v2 + v4 - 24));
    v4 -= 24;
    if (!v4)
    {
      sub_20C695E28(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C6965BC(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t i;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C540C88;
  sub_20BDDC0E4(v7, "UsdPreviewSurface");
  sub_20BDDC0E4(v8, "UsdUVTexture");
  sub_20BDDC0E4(v9, "UsdTransform2d");
  sub_20C695E90(a1 + 88, v7, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v9[i + 2]) < 0)
      operator delete((void *)v9[i]);
  }
  return a1;
}

void sub_20C6966BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 71) < 0)
      operator delete(*(void **)(v2 + v4 + 48));
    v4 -= 24;
    if (v4 == -72)
    {
      sub_20C695E28(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C696724(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t i;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C540D98;
  sub_20BDDC0E4(v7, "exr");
  sub_20BDDC0E4(v8, "jpg");
  sub_20BDDC0E4(v9, "jpeg");
  sub_20BDDC0E4(v10, "png");
  sub_20BDDC0E4(v11, "usd");
  sub_20BDDC0E4(v12, "usda");
  sub_20BDDC0E4(v13, "usdc");
  sub_20BDDC0E4(v14, "usdz");
  sub_20C695E90(a1 + 88, v7, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0)
      operator delete((void *)v14[i]);
  }
  return a1;
}

void sub_20C696898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 191) < 0)
      operator delete(*(void **)(v2 + v4 + 168));
    v4 -= 24;
    if (v4 == -192)
    {
      sub_20C695E28(v1);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C696900(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C696900(a1, *a2);
    sub_20C696900(a1, a2[1]);
    sub_20C696948((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_20C696948(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void sub_20C6969B4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C6969B4(a1, *a2);
    sub_20C6969B4(a1, a2[1]);
    sub_20C6969FC((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

_DWORD *sub_20C6969FC(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

char *sub_20C696A28(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_20BE78B98((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_20C696A7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C696A84(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20BE78B98(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_20BF3E540(a1, v14);
  v12 = a1[1];
  sub_20BF3E6D0(v14);
  return v12;
}

void sub_20C696B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF3E6D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C696BA4(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20BDDC0E4(v14, a2);
  v15 = v14 + 24;
  sub_20BDF34C0(a1, &v13);
  v11 = a1[1];
  sub_20BDF3648((uint64_t)&v13);
  return v11;
}

void sub_20C696C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C696CA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20C696D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C696D64(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20BDDC0E4(v14, a2);
  v15 = v14 + 24;
  sub_20BDF34C0(a1, &v13);
  v11 = a1[1];
  sub_20BDF3648((uint64_t)&v13);
  return v11;
}

void sub_20C696E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C696E68(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20BDDC0E4(v14, a2);
  v15 = v14 + 24;
  sub_20BDF34C0(a1, &v13);
  v11 = a1[1];
  sub_20BDF3648((uint64_t)&v13);
  return v11;
}

void sub_20C696F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C696F6C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_20BFD74FC((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x28uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    sub_20BFD6E54(v7 + 7, v9);
    sub_20BFD6EA4(v7 + 8, v9 + 1);
    *((_BYTE *)v7 + 36) = 0;
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_20C69702C((uint64_t)v11, 0);
  }
  return v7;
}

void sub_20C69702C(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C6969FC(v2 + 7);
    operator delete(v2);
  }
}

uint64_t *sub_20C697070(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C137858((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C697118((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C6971DC((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C697118@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C697180((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C697168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6971DC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C697180(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 28));
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_20C6971DC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C696948((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C697220(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C45FE4C(a1, &v11);
  v9 = a1[1];
  sub_20C45FFF8(&v11);
  return v9;
}

void sub_20C6972F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C45FFF8((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::constructPatternFilters(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  __int128 v13;
  const char *v14;
  char v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20C6974CC(a2, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfPatternMatcher::TfPatternMatcher(&v12, v4, 1, 1);
      v6 = a2[1];
      if (v6 >= a2[2])
      {
        v9 = sub_20C697F50(a2, (uint64_t)&v12);
      }
      else
      {
        *(_WORD *)v6 = (_WORD)v12;
        v7 = v13;
        *(_QWORD *)(v6 + 24) = v14;
        *(_OWORD *)(v6 + 8) = v7;
        v14 = 0;
        v13 = 0uLL;
        *(_BYTE *)(v6 + 32) = v15;
        *(_DWORD *)(v6 + 40) = v16;
        v8 = v18;
        *(_OWORD *)(v6 + 48) = v17;
        *(_QWORD *)(v6 + 64) = v8;
        v18 = 0;
        v17 = 0uLL;
        *(_OWORD *)(v6 + 72) = v19;
        v19 = 0uLL;
        v9 = v6 + 88;
      }
      a2[1] = v9;
      pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)&v12);
      if (!pxrInternal__aapl__pxrReserved__::TfPatternMatcher::IsValid((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)(a2[1] - 88)))
      {
        v12 = "usdUtils/conditionalAbortDiagnosticDelegate.cpp";
        *(_QWORD *)&v13 = "constructPatternFilters";
        *((_QWORD *)&v13 + 1) = 46;
        v14 = "std::vector<TfPatternMatcher> pxrInternal__aapl__pxrReserved__::constructPatternFilters(const std::vector<std::string> &)";
        v15 = 0;
        v11 = v4;
        if (*((char *)v4 + 23) < 0)
          v11 = (uint64_t *)*v4;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v12, (pxrInternal__aapl__pxrReserved__ *)"Invalid pattern string: %s", v10, v11);
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_20C697498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C697D98((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6974CC(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BF23478(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    sub_20C697E08(a1, v7);
    return sub_20C697F04((uint64_t)v7);
  }
  return result;
}

void sub_20C697574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C697F04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters(uint64_t a1, __int128 **a2, __int128 **a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20BE78B98((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BE78B98((char *)(a1 + 24), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_20C697604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters::SetStringFilters(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    sub_20BE75818(a1, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters::SetCodePathFilters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 24;
  if (v2 != a2)
    sub_20BE75818(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::UsdUtilsConditionalAbortDiagnosticDelegate(uint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v6;
  _QWORD *Instance;

  *a1 = (uint64_t)off_24C540E20;
  v6 = a1 + 4;
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a2, a1 + 1);
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a2 + 3, v6);
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a3, a1 + 7);
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a3 + 3, a1 + 10);
  Instance = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate(Instance, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *)a1);
  return a1;
}

void sub_20C69772C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C697D98((void ***)va);
  sub_20C697D98((void ***)va);
  sub_20C697D98((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::~UsdUtilsConditionalAbortDiagnosticDelegate(pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate *this)
{
  _QWORD *Instance;
  void **v3;

  *(_QWORD *)this = off_24C540E20;
  Instance = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate(Instance, this);
  v3 = (void **)((char *)this + 80);
  sub_20C697D98(&v3);
  v3 = (void **)((char *)this + 56);
  sub_20C697D98(&v3);
  v3 = (void **)((char *)this + 32);
  sub_20C697D98(&v3);
  v3 = (void **)((char *)this + 8);
  sub_20C697D98(&v3);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::~UsdUtilsConditionalAbortDiagnosticDelegate(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::_RuleMatcher(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::TfPatternMatcher **a3, pxrInternal__aapl__pxrReserved__::TfPatternMatcher **a4)
{
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher *v8;
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher *v11;
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher *v12;
  const char *v13;
  const regex_t *v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  unsigned __int8 v19;

  sub_20BDDC0E4(__p, *(char **)a2);
  v7 = v19;
  if ((v19 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v7)
  {
    v8 = *a4;
    v9 = a4[1];
    while (v8 != v9)
    {
      if ((pxrInternal__aapl__pxrReserved__::TfPatternMatcher::Match(v8, (const char *)__p, 0) & 1) != 0)
      {
        v15 = 1;
        goto LABEL_20;
      }
      v8 = (pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)((char *)v8 + 88);
    }
  }
  v10 = *(unsigned __int8 *)(a2 + 63);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 48);
  if (!v10 || (v11 = *a3, v12 = a3[1], *a3 == v12))
  {
    v15 = 0;
  }
  else
  {
    v13 = (const char *)(a2 + 40);
    do
    {
      v14 = pxrInternal__aapl__pxrReserved__::TfPatternMatcher::Match(v11, v13, 0);
      v15 = (uint64_t)v14;
      v11 = (pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)((char *)v11 + 88);
      if (v11 == v12)
        v16 = 1;
      else
        v16 = (int)v14;
    }
    while (v16 != 1);
  }
LABEL_20:
  if ((char)v19 < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_20C69792C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueError(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  std::string v6;
  std::string v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a1 + 8, a1 + 32);
  if ((_DWORD)result
    && (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a1 + 56, a1 + 80), (result & 1) == 0))
  {
    sub_20BDDC0E4(&v7, "Aborted by UsdUtilsConditionalAbortDiagnosticDelegate On Error");
    memset(&v6, 0, sizeof(v6));
    pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v7, (uint64_t *)(a2 + 40), (uint64_t)&v6, (_QWORD *)a2);
    std::string::~string(&v6);
    std::string::~string(&v7);
    result = pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
    __break(1u);
  }
  else if (!*(_BYTE *)(a2 + 144))
  {
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20C6980EC;
    v7.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20C6980A4((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(a2 + 104));
    pxrInternal__aapl__pxrReserved__::_PrintDiagnostic((uint64_t *)&v6, a2, (uint64_t *)(a2 + 40));
    return (uint64_t)sub_20BEBAE7C(&v7);
  }
  return result;
}

void sub_20C697A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::_PrintDiagnostic(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  FILE *v3;
  void **v4;
  void *__p[2];
  char v6;

  v3 = (FILE *)*MEMORY[0x24BDAC8D8];
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic(a1, a2, a3, (uint64_t)__p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  fputs((const char *)v4, v3);
  if (v6 < 0)
    operator delete(__p[0]);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueFatalError(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  BOOL v5;
  _Unwind_Exception *v6;
  std::string __p;
  std::string v8;

  sub_20BDDC0E4(&v8, "FATAL ERROR");
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v8, a3, (uint64_t)&__p, a2);
  std::string::~string(&__p);
  std::string::~string(&v8);
  v6 = (_Unwind_Exception *)pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  _Unwind_Resume(v6);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueStatus(uint64_t a1, uint64_t a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t *v3;
  uint64_t v5[3];
  uint64_t (*v6[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v6[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  *(_OWORD *)v5 = *(_OWORD *)(a2 + 64);
  v3 = (uint64_t *)(a2 + 40);
  v6[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_20C6981E4;
  v6[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_20C69819C((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(a2 + 104));
  pxrInternal__aapl__pxrReserved__::_PrintDiagnostic(v5, a2, v3);
  return sub_20BEBAE7C(v6);
}

void sub_20C697C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueWarning(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  std::string v6;
  std::string v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a1 + 8, a1 + 32);
  if ((_DWORD)result
    && (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a1 + 56, a1 + 80), (result & 1) == 0))
  {
    sub_20BDDC0E4(&v7, "Aborted by UsdUtilsConditionalAbortDiagnosticDelegate On Warning");
    memset(&v6, 0, sizeof(v6));
    pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v7, (uint64_t *)(a2 + 40), (uint64_t)&v6, (_QWORD *)a2);
    std::string::~string(&v6);
    std::string::~string(&v7);
    result = pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
    __break(1u);
  }
  else if (!*(_BYTE *)(a2 + 144))
  {
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20C6982DC;
    v7.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20C698294((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(a2 + 104));
    pxrInternal__aapl__pxrReserved__::_PrintDiagnostic((uint64_t *)&v6, a2, (uint64_t *)(a2 + 40));
    return (uint64_t)sub_20BEBAE7C(&v7);
  }
  return result;
}

void sub_20C697D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20C697D98(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)(v4 - 88));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C697E08(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_20C697E7C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_20C697E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_WORD *)(v8 - 88) = *(_WORD *)(a3 + v7 - 88);
      v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 80) = 0;
      *(_BYTE *)(v8 - 56) = *(_BYTE *)(a3 + v7 - 56);
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(a3 + v7 - 48);
      v11 = *(_OWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v11;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      result = *(__n128 *)(a3 + v7 - 16);
      *(__n128 *)(v8 - 16) = result;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_20C697F04(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)(i - 88));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C697F50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)sub_20BF23478(v7, v9);
  v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[88 * v12];
  *(_WORD *)v11 = *(_WORD *)a2;
  v13 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v13;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11[32] = *(_BYTE *)(a2 + 32);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = v14;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v17[2] = v11 + 88;
  sub_20C697E08(a1, v17);
  v15 = a1[1];
  sub_20C697F04((uint64_t)v17);
  return v15;
}

void sub_20C698090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C697F04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (**sub_20C6980A4(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_24C540E80, &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfError>::__id);
    else
      return 0;
  }
  return result;
}

void sub_20C6980EC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20C698120()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t (**sub_20C69819C(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_24C540EB8, &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfStatus>::__id);
    else
      return 0;
  }
  return result;
}

void sub_20C6981E4(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20C698218()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t (**sub_20C698294(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_24C540EF0, &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfWarning>::__id);
    else
      return 0;
  }
  return result;
}

void sub_20C6982DC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20C698310()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void sub_20C69838C()
{
  uint64_t v0;
  void *__p[2];
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "USDUTILS_CREATE_PACKAGE");
  __p[0] = 0;
  __p[1] = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C540F28, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
  v0 = sub_20C68659C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USDUTILS_CREATE_PACKAGE", "UsdUtils asset localization details");
}

void sub_20C698414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsExtractExternalReferences(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdUtils_ExtractExternalReferences(a1, 1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  const void **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  const void **v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v34;
  _OWORD v35[2];
  _OWORD v36[3];
  uint64_t v37;
  int v38;
  int v39;
  __int16 v40;
  _OWORD v41[2];
  int v42;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v43;
  void **v44;
  _BYTE v45[24];
  _BYTE *v46;
  void *v47;
  _BYTE v48[40];
  _BYTE v49[24];
  _BYTE *v50;
  _QWORD **v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v52 = 0;
  v53 = 0;
  v51 = &v52;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v51, &v43);
  sub_20BDE9D48((uint64_t)&v51, v52);
  if (v43)
  {
    sub_20C698E0C((uint64_t)&v51, a5);
    v46 = 0;
    v9 = operator new(0x20uLL);
    *v9 = &unk_24C540F48;
    v9[1] = sub_20C69889C;
    v9[2] = 0;
    v9[3] = &v51;
    v46 = v9;
    v47 = &unk_24C540290;
    sub_20C67F628((uint64_t)v48, (uint64_t)v45);
    v10 = v46;
    if (v46 == v45)
    {
      v11 = 4;
      v10 = v45;
    }
    else
    {
      if (!v46)
        goto LABEL_8;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
    v34 = &v47;
    memset(v35, 0, sizeof(v35));
    memset(v36, 0, sizeof(v36));
    v37 = 0;
    v38 = 1065353216;
    v39 = 1;
    v40 = 257;
    memset(v41, 0, sizeof(v41));
    v42 = 1065353216;
    v12 = pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&v34, (uint64_t *)&v43);
    if (v12)
    {
      if (a2)
      {
        sub_20C698ABC((uint64_t *)a2, (uint64_t *)&v43);
        if (v53)
        {
          v13 = 0;
          v14 = v53;
          do
          {
            ++v13;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          v13 = 0;
        }
        sub_20C6997E4((uint64_t *)a2, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a2 + 8), v53, 0, v13);
        v15 = *(uint64_t **)(a2 + 8);
        v16 = *(_QWORD *)a2 + 8;
        v17 = 126 - 2 * __clz(((uint64_t)v15 - v16) >> 3);
        if (v15 == (uint64_t *)v16)
          v18 = 0;
        else
          v18 = v17;
        sub_20C699BFC(v16, v15, v18, 1);
      }
      if (a3)
      {
        if (v55)
        {
          v19 = 0;
          v20 = v55;
          do
          {
            ++v19;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          v19 = 0;
        }
        sub_20C69B7EC((uint64_t)a3, v55, 0, v19);
        v21 = (const void **)a3[1];
        v22 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - *a3) >> 3));
        if (v21 == (const void **)*a3)
          v23 = 0;
        else
          v23 = v22;
        sub_20BEDAFAC(*a3, v21, (uint64_t)&v44, v23, 1);
      }
      if (a4)
      {
        if (v57)
        {
          v24 = 0;
          v25 = v57;
          do
          {
            ++v24;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          v24 = 0;
        }
        sub_20C69B7EC((uint64_t)a4, v57, 0, v24);
        v26 = (const void **)a4[1];
        v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - *a4) >> 3));
        if (v26 == (const void **)*a4)
          v28 = 0;
        else
          v28 = v27;
        sub_20BEDAFAC(*a4, v26, (uint64_t)&v44, v28, 1);
      }
    }
    sub_20BEB3F28((uint64_t)v41);
    sub_20BEB3F28((uint64_t)&v36[1] + 8);
    v44 = (void **)v36;
    sub_20BDE5038(&v44);
    v44 = (void **)v35 + 1;
    sub_20BDE5038(&v44);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v35);
    v47 = &unk_24C540290;
    v29 = v50;
    if (v50 == v49)
    {
      v30 = 4;
      v29 = v49;
    }
    else
    {
      if (!v50)
        goto LABEL_44;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_44:
    sub_20C67F674((uint64_t)v48);
    v31 = v59;
    if (v59 == v58)
    {
      v32 = 4;
      v31 = v58;
    }
    else
    {
      if (!v59)
      {
LABEL_49:
        sub_20BEB3F28((uint64_t)&v56);
        sub_20BEB3F28((uint64_t)&v54);
        sub_20C698E90((uint64_t)&v51);
        goto LABEL_50;
      }
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_49;
  }
  v12 = 0;
LABEL_50:
  sub_20C103234(&v43);
  return v12;
}

void sub_20C698810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20C67F340((uint64_t)&a10);
  sub_20C67F3A0(&a35);
  sub_20C698BD4(v35 - 224);
  sub_20C103234(&a29);
  _Unwind_Resume(a1);
}

double sub_20C69889C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  void **v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  if (*(_QWORD *)(a1 + 144))
  {
    sub_20C1034E8((uint64_t *)&v27, a2);
    v10 = *(_QWORD *)(a1 + 144);
    if (!v10)
      sub_20BE9E974();
    (*(void (**)(void **__return_ptr, uint64_t, void ***, uint64_t))(*(_QWORD *)v10 + 48))(__p, v10, &v27, a3);
    v11 = v28;
    if (v28)
    {
      v12 = (unsigned int *)(v28 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v15 = (void *)HIBYTE(v30);
    if (v30 < 0)
      v15 = __p[1];
    if (v15)
    {
      v16 = *(_QWORD *)(a3 + 24);
      v17 = *(_QWORD *)(a3 + 32);
      v18 = sub_20C69910C((unsigned __int8 *)__p, (unsigned __int8 *)a3);
      if (v16 == v17)
        v19 = 0;
      else
        v19 = v18;
      if ((v19 & 1) == 0)
        sub_20C698F04(a1, a2, (uint64_t)__p, a4);
      v21 = *((_QWORD *)&v31 + 1);
      v20 = v31;
      if ((_QWORD)v31 == *((_QWORD *)&v31 + 1))
      {
        v22 = vdupq_n_s64(v31);
      }
      else
      {
        do
        {
          sub_20C698F04(a1, a2, v20, a4);
          v20 += 24;
        }
        while (v20 != v21);
        v22 = (int64x2_t)v31;
      }
      v25 = v32;
      *(_QWORD *)(a5 + 16) = v30;
      *(_OWORD *)a5 = *(_OWORD *)__p;
      __p[1] = 0;
      v30 = 0;
      __p[0] = 0;
      *(int64x2_t *)(a5 + 24) = v22;
      *(_QWORD *)(a5 + 40) = v25;
      v32 = 0;
      v31 = 0uLL;
    }
    else
    {
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)a5 = 0u;
    }
    v27 = (void **)&v31;
    sub_20BDE5038(&v27);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v23 = *(_QWORD *)(a3 + 24);
    v24 = *(_QWORD *)(a3 + 32);
    if (v23 == v24)
    {
      sub_20C698F04(a1, a2, a3, a4);
    }
    else
    {
      do
      {
        sub_20C698F04(a1, a2, v23, a4);
        v23 += 24;
      }
      while (v23 != v24);
    }
    result = 0.0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

void sub_20C698A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C67FF84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C698ABC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (uint64_t *)sub_20BDDF6A8(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[v10];
    v17 = v16;
    v18 = &v14[v13];
    *v16 = *a2;
    sub_20BF1DD04(&v14[v10]);
    ++v17;
    sub_20C249340(a1, &v15);
    v9 = (uint64_t *)a1[1];
    result = sub_20C249448((uint64_t)&v15);
  }
  else
  {
    *v7 = *a2;
    result = sub_20BF1DD04(v7);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20C698BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C698BD4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 120);
  v3 = *(_QWORD **)(a1 + 144);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_20BEB3F28(a1 + 80);
  sub_20BEB3F28(a1 + 40);
  return sub_20C698E90(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths(void ***a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  _BYTE *v7;
  _OWORD v8[2];
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  _OWORD v14[2];
  int v15;
  void **v16;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[248];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_24C540FE0;
  v17[1] = a2;
  v18 = v17;
  sub_20C699574((uint64_t)v19, (uint64_t)v17);
  v3 = v18;
  if (v18 == v17)
  {
    v4 = 4;
    v3 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v7 = v19;
  memset(v8, 0, sizeof(v8));
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v11 = 1065353216;
  v12 = 1;
  memset(v14, 0, sizeof(v14));
  v15 = 1065353216;
  v19[216] = 1;
  v13 = 0;
  v5 = a1[1];
  if (v5)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)a1 + 1) + 14))
      v5 = *a1;
    else
      v5 = 0;
  }
  v16 = v5;
  sub_20BF1DD04((uint64_t *)&v16);
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&v7, (uint64_t *)&v16);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v16);
  sub_20BEB3F28((uint64_t)v14);
  sub_20BEB3F28((uint64_t)&v9[1] + 8);
  v16 = (void **)v9;
  sub_20BDE5038(&v16);
  v16 = (void **)v8 + 1;
  sub_20BDE5038(&v16);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8);
  return sub_20C6995FC((uint64_t)v19);
}

void sub_20C698DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20C103234(&a28);
  sub_20C67F340((uint64_t)&a9);
  sub_20C6995FC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_20C698E0C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  sub_20BE9E6E8(a1 + 120, a2);
  return a1;
}

void sub_20C698E6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BEB3F28(v3);
  sub_20BEB3F28(v2);
  sub_20C698E90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C698E90(uint64_t a1)
{
  void *v2;

  sub_20C698EC8(a1, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C698EC8(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_20C103234(v2 + 2);
      operator delete(v2);
      v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v3;
    }
    while (v3);
  }
}

void sub_20C698F04(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pxrInternal__aapl__pxrReserved__ *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *Resolver;
  void *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;
  void *__p[2];
  uint64_t v18;
  void *__dst[2];
  uint64_t v20;
  void *v21[2];
  char v22;

  sub_20C1034E8((uint64_t *)__dst, a2);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)__dst, a3, (uint64_t)v21);
  v8 = (pxrInternal__aapl__pxrReserved__ *)__dst[1];
  if (__dst[1])
  {
    v9 = (unsigned int *)((char *)__dst[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      v8 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v8 + 8))(v8);
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(v18) < 0)
  {
    sub_20BDDBFAC(__dst, __p[0], (unint64_t)__p[1]);
    operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    v20 = v18;
  }
  v13 = (void *)HIBYTE(v20);
  if (v20 < 0)
    v13 = __dst[1];
  if (v13)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile((uint64_t)v21))
    {
      __p[1] = 0;
      v18 = 0;
      __p[0] = &__p[1];
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v21, __p, &v16);
      sub_20C699270(a1, &v16, &v16);
      sub_20C103234(&v16);
      sub_20BDE9D48((uint64_t)__p, (_QWORD *)__p[1]);
      goto LABEL_18;
    }
    v14 = a1 + 40;
    v15 = (unsigned __int8 *)__dst;
  }
  else
  {
    if (!sub_20C699208(a1, a2, (uint64_t)__dst, a4))
      goto LABEL_18;
    v14 = a1 + 80;
    v15 = (unsigned __int8 *)v21;
  }
  sub_20C086844(v14, v15, (uint64_t)v15);
LABEL_18:
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_20C69908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a9);
  sub_20BDE9D48((uint64_t)&a10, a11);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69910C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t result;
  char v15;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v11 = a1 + 24;
  v9 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  v10 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  v13 = v6 + 24;
  v12 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if (v10 - v9 != *((_QWORD *)v13 + 1) - (_QWORD)v12)
    return 0;
  if (v9 == v10)
    return 1;
  do
  {
    result = sub_20BEB4EF8((uint64_t)&v15, v9, v12);
    if (!(_DWORD)result)
      break;
    v9 += 24;
    v12 += 24;
  }
  while (v9 != v10);
  return result;
}

uint64_t sub_20C699208(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t *FileFormat;
  uint64_t v10;

  if (a4 != 3)
    return 1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v5);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(RealPath))
    return 0;
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v8);
  v10 = sub_20BFCF6F4(FileFormat);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) ^ 1;
}

_QWORD *sub_20C699270(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x18uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  v13[2] = *a3;
  *a3 = 0;
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C6994E0((uint64_t)v23, 0);
  return v10;
}

void sub_20C6994C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6994E0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C6994E0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;

  v2 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C103234(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20C699524(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_20C67F674(a1);
}

uint64_t sub_20C699574(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v3;

  *(_QWORD *)a1 = &unk_24C540208;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(a1 + 80);
  sub_20C67F628(a1 + 8, a2);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v3);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_20C6995E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C699524(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6995FC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C540208;
  sub_20C6996B0(a1 + 224, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 232));
  sub_20C00A724((_QWORD *)(a1 + 176));
  sub_20BF49F14((_QWORD ***)(a1 + 168), 0);
  sub_20C00A724((_QWORD *)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD **)(a1 + 72);
  if (v2 == (_QWORD *)(a1 + 48))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 48);
    goto LABEL_9;
  }
  if (v2)
  {
    v3 = 5;
LABEL_9:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  sub_20C67F674(a1 + 8);
  return a1;
}

void sub_20C6996B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    sub_20C6996B0(a1, *a2);
    sub_20C6996B0(a1, a2[1]);
    sub_20C103234(a2 + 5);
    sub_20C103234(a2 + 4);
    operator delete(a2);
  }
}

__n128 sub_20C69970C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C540F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C699750(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C540F48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C69977C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, _QWORD);
  _QWORD *v6;

  v4 = a1[2];
  v5 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v6 + v5);
  return v5(v6, a2, a3, *a4);
}

uint64_t sub_20C69979C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C540FB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6997D8()
{
  return &unk_24C540FB8;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C6997E4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD v28[2];
  uint64_t *v29;
  char *v30;
  uint64_t v31;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)*v20;
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
      v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) < 1)
        {
          v20 = a3;
        }
        else
        {
          v23 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)*v20;
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = sub_20C699A78(v9, v20, a4, *(_QWORD *)(v9 - 8));
        v22 = (uint64_t)(v12 - (_QWORD)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_20C1EFA60((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
        sub_20C699AFC((uint64_t)v28, v7, v20, v5);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 3;
      v16 = v10 - v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v31 = v9;
      if (v17)
        v18 = (char *)sub_20BDDF6A8(v9, v17);
      else
        v18 = 0;
      v24 = (uint64_t *)&v18[8 * v15];
      v28[0] = v18;
      v28[1] = v24;
      v29 = v24;
      v30 = &v18[8 * v17];
      v25 = 8 * a5;
      v26 = &v24[a5];
      do
      {
        *v24 = v7[2];
        sub_20BF1DD04(v24++);
        v7 = (_QWORD *)*v7;
        v25 -= 8;
      }
      while (v25);
      v29 = v26;
      v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20C6999C8(a1, v28, (uint64_t)v5);
      sub_20C249448((uint64_t)v28);
    }
  }
  return v5;
}

void sub_20C69999C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6999C8(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C2493B4((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C699B78(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C699A78(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      *(_QWORD *)(a4 + v7) = v6[2];
      sub_20BF1DD04((uint64_t *)(a4 + v7));
      v6 = (_QWORD *)*v6;
      v7 += 8;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C699AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C699AFC(uint64_t a1, _QWORD *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;

  v4 = a4;
  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4;
    do
    {
      v8 = *v4;
      *v7++ = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v5[2];
      sub_20BF1DD04(v5 + 2);
      sub_20BF1D8F4((int)v4, v8);
      v5 = (_QWORD *)*v5;
      v4 = v7;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C699B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      sub_20BF1DD04((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C699BD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C699BFC(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  uint64_t v17;
  int v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v30;
  uint64_t v31;
  int v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  BOOL v40;
  uint64_t *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  uint64_t v45;
  int v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  int v53;
  _BOOL4 v54;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v55;
  uint64_t v56;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v57;
  uint64_t v58;
  int v59;
  int v60;
  size_t v61;
  const void *v62;
  size_t v63;
  const void *v64;
  size_t v65;
  int v66;
  BOOL v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v71;
  uint64_t v72;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v73;
  uint64_t v74;
  int v75;
  int v76;
  size_t v77;
  const void *v78;
  size_t v79;
  const void *v80;
  size_t v81;
  int v82;
  BOOL v83;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v84;
  uint64_t v85;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v86;
  uint64_t v87;
  int v88;
  int v89;
  size_t v90;
  const void *v91;
  size_t v92;
  const void *v93;
  size_t v94;
  int v95;
  _BOOL4 v96;
  uint64_t *v97;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v98;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v99;
  char v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  uint64_t v102;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v103;
  uint64_t v104;
  int v105;
  int v106;
  size_t v107;
  const void *v108;
  size_t v109;
  const void *v110;
  size_t v111;
  int v112;
  BOOL v113;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v114;
  uint64_t v115;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v116;
  uint64_t v117;
  int v118;
  int v119;
  size_t v120;
  const void *v121;
  size_t v122;
  const void *v123;
  size_t v124;
  int v125;
  BOOL v126;
  uint64_t *v127;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v128;
  uint64_t v129;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v130;
  uint64_t v131;
  int v132;
  int v133;
  size_t v134;
  const void *v135;
  size_t v136;
  const void *v137;
  size_t v138;
  int v139;
  _BOOL4 v140;
  uint64_t *v141;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v142;
  uint64_t v143;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v144;
  uint64_t v145;
  int v146;
  int v147;
  size_t v148;
  const void *v149;
  size_t v150;
  const void *v151;
  size_t v152;
  int v153;
  BOOL v154;
  uint64_t v155;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v156;
  uint64_t v157;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v158;
  uint64_t v159;
  int v160;
  int v161;
  size_t v162;
  const void *v163;
  size_t v164;
  const void *v165;
  size_t v166;
  int v167;
  _BOOL4 v168;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v169;
  uint64_t v170;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v171;
  uint64_t v172;
  int v173;
  int v174;
  size_t v175;
  const void *v176;
  size_t v177;
  const void *v178;
  size_t v179;
  int v180;
  BOOL v181;
  uint64_t *v182;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v183;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v184;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v185;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v187;
  uint64_t v188;
  int v189;
  int v190;
  size_t v191;
  const void *v192;
  size_t v193;
  const void *v194;
  size_t v195;
  _BOOL4 v196;
  uint64_t v197;
  uint64_t *v198;
  BOOL v200;
  uint64_t v201;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v202;
  uint64_t *v203;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v204;
  uint64_t v205;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v206;
  uint64_t v207;
  int v208;
  int v209;
  size_t v210;
  const void *v211;
  size_t v212;
  const void *v213;
  size_t v214;
  _BOOL4 v215;
  uint64_t v216;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v217;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v218;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v219;
  uint64_t v220;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v221;
  uint64_t v222;
  int v223;
  int v224;
  size_t v225;
  const void *v226;
  size_t v227;
  const void *v228;
  size_t v229;
  int v230;
  BOOL v231;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v232;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v233;
  int64_t v234;
  int64_t v235;
  int64_t v236;
  uint64_t v237;
  uint64_t *v238;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v239;
  uint64_t v240;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v241;
  uint64_t v242;
  int v243;
  int v244;
  size_t v245;
  const void *v246;
  size_t v247;
  const void *v248;
  size_t v249;
  int v250;
  _BOOL4 v251;
  uint64_t *v252;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v253;
  uint64_t v254;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v255;
  uint64_t v256;
  int v257;
  int v258;
  size_t v259;
  const void *v260;
  size_t v261;
  const void *v262;
  size_t v263;
  int v264;
  BOOL v265;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v266;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v267;
  uint64_t v268;
  uint64_t v269;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v270;
  uint64_t v271;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v272;
  uint64_t v273;
  int v274;
  int v275;
  int64_t v276;
  size_t v277;
  const void *v278;
  size_t v279;
  const void *v280;
  size_t v281;
  int v282;
  BOOL v283;
  _BOOL4 v284;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v285;
  uint64_t v286;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v287;
  uint64_t v288;
  int v289;
  int v290;
  size_t v291;
  const void *v292;
  size_t v293;
  const void *v294;
  size_t v295;
  int v296;
  _BOOL4 v297;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v298;
  uint64_t v299;
  uint64_t v300;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v305;
  uint64_t v306;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v307;
  uint64_t v308;
  int v309;
  int v310;
  size_t v311;
  const void *v312;
  size_t v313;
  const void *v314;
  size_t v315;
  int v316;
  _BOOL4 v317;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v318;
  uint64_t *v319;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v320;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t *v324;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v325;
  uint64_t v326;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v327;
  uint64_t v328;
  int v329;
  int v330;
  size_t v331;
  const void *v332;
  size_t v333;
  const void *v334;
  size_t v335;
  int v336;
  _BOOL4 v337;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v338;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v339;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v340;
  uint64_t v341;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v342;
  uint64_t v343;
  int v344;
  int v345;
  size_t v346;
  const void *v347;
  size_t v348;
  const void *v349;
  size_t v350;
  int v351;
  BOOL v352;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v353;
  uint64_t *v355;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v356;
  uint64_t v357;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v358;
  uint64_t v359;
  int v360;
  int v361;
  size_t v362;
  const void *v363;
  size_t v364;
  const void *v365;
  size_t v366;
  _BOOL4 v367;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v368;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v369;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v370;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v371;
  uint64_t v372;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v373;
  uint64_t v374;
  int v375;
  int v376;
  size_t v377;
  const void *v378;
  size_t v379;
  const void *v380;
  size_t v381;
  int v382;
  BOOL v383;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v384;
  unint64_t v385;
  int64_t v386;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v388;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v389;

  v6 = (uint64_t *)result;
LABEL_2:
  v7 = a2 - 1;
  v8 = v6;
  while (2)
  {
    v6 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v185 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v7);
        RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v185);
        v187 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v8);
        v188 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v187);
        v189 = *(char *)(v188 + 23);
        v190 = *(char *)(RealPath + 23);
        if (v190 >= 0)
          v191 = *(unsigned __int8 *)(RealPath + 23);
        else
          v191 = *(_QWORD *)(RealPath + 8);
        if (v190 >= 0)
          v192 = (const void *)RealPath;
        else
          v192 = *(const void **)RealPath;
        if (v189 >= 0)
          v193 = *(unsigned __int8 *)(v188 + 23);
        else
          v193 = *(_QWORD *)(v188 + 8);
        if (v189 >= 0)
          v194 = (const void *)v188;
        else
          v194 = *(const void **)v188;
        if (v193 >= v191)
          v195 = v191;
        else
          v195 = v193;
        result = memcmp(v192, v194, v195);
        v196 = v191 < v193;
        if ((_DWORD)result)
          v196 = (int)result < 0;
        if (v196)
        {
          v197 = *v8;
          *v8 = *v7;
          *v7 = v197;
        }
        return result;
      case 3uLL:
        return sub_20C69B0A4(v8, v8 + 1, v7);
      case 4uLL:
        return sub_20C69B618(v8, v8 + 1, v8 + 2, v7);
      case 5uLL:
        return sub_20C69AE3C(v8, v8 + 1, v8 + 2, v8 + 3, v7);
      default:
        if (v9 <= 191)
        {
          v198 = v8 + 1;
          v200 = v8 == a2 || v198 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v200)
            {
              v201 = 0;
              v202 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8;
              do
              {
                v203 = (uint64_t *)v202;
                v202 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v198;
                v204 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v198);
                v205 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v204);
                v206 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v203);
                v207 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v206);
                v208 = *(char *)(v207 + 23);
                v209 = *(char *)(v205 + 23);
                if (v209 >= 0)
                  v210 = *(unsigned __int8 *)(v205 + 23);
                else
                  v210 = *(_QWORD *)(v205 + 8);
                if (v209 >= 0)
                  v211 = (const void *)v205;
                else
                  v211 = *(const void **)v205;
                if (v208 >= 0)
                  v212 = *(unsigned __int8 *)(v207 + 23);
                else
                  v212 = *(_QWORD *)(v207 + 8);
                if (v208 >= 0)
                  v213 = (const void *)v207;
                else
                  v213 = *(const void **)v207;
                if (v212 >= v210)
                  v214 = v210;
                else
                  v214 = v212;
                result = memcmp(v211, v213, v214);
                v215 = v210 < v212;
                if ((_DWORD)result)
                  v215 = (int)result < 0;
                if (v215)
                {
                  v389 = *v202;
                  *v202 = 0;
                  v216 = v201;
                  while (1)
                  {
                    v217 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v8 + v216 + 8);
                    v218 = *v217;
                    *v217 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v8 + v216);
                    *(uint64_t *)((char *)v8 + v216) = 0;
                    sub_20BF1D8F4((int)v217, v218);
                    if (!v216)
                      break;
                    v219 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                    v220 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v219);
                    v221 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)((char *)v8 + v216 - 8));
                    v222 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v221);
                    v223 = *(char *)(v222 + 23);
                    v224 = *(char *)(v220 + 23);
                    if (v224 >= 0)
                      v225 = *(unsigned __int8 *)(v220 + 23);
                    else
                      v225 = *(_QWORD *)(v220 + 8);
                    if (v224 >= 0)
                      v226 = (const void *)v220;
                    else
                      v226 = *(const void **)v220;
                    if (v223 >= 0)
                      v227 = *(unsigned __int8 *)(v222 + 23);
                    else
                      v227 = *(_QWORD *)(v222 + 8);
                    if (v223 >= 0)
                      v228 = (const void *)v222;
                    else
                      v228 = *(const void **)v222;
                    if (v227 >= v225)
                      v229 = v225;
                    else
                      v229 = v227;
                    v230 = memcmp(v226, v228, v229);
                    v231 = v225 < v227;
                    if (v230)
                      v231 = v230 < 0;
                    v216 -= 8;
                    if (!v231)
                    {
                      v232 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v8 + v216 + 8);
                      goto LABEL_329;
                    }
                  }
                  v232 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8;
LABEL_329:
                  v233 = *v232;
                  *v232 = v389;
                  v389 = 0;
                  sub_20BF1D8F4((int)v232, v233);
                  result = (uint64_t)sub_20C103234(&v389);
                }
                v198 = (uint64_t *)(v202 + 1);
                v201 += 8;
              }
              while (v202 + 1 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2);
            }
          }
          else if (!v200)
          {
            do
            {
              v355 = v6;
              v6 = v198;
              v356 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v198);
              v357 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v356);
              v358 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v355);
              v359 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v358);
              v360 = *(char *)(v359 + 23);
              v361 = *(char *)(v357 + 23);
              if (v361 >= 0)
                v362 = *(unsigned __int8 *)(v357 + 23);
              else
                v362 = *(_QWORD *)(v357 + 8);
              if (v361 >= 0)
                v363 = (const void *)v357;
              else
                v363 = *(const void **)v357;
              if (v360 >= 0)
                v364 = *(unsigned __int8 *)(v359 + 23);
              else
                v364 = *(_QWORD *)(v359 + 8);
              if (v360 >= 0)
                v365 = (const void *)v359;
              else
                v365 = *(const void **)v359;
              if (v364 >= v362)
                v366 = v362;
              else
                v366 = v364;
              result = memcmp(v363, v365, v366);
              v367 = v362 < v364;
              if ((_DWORD)result)
                v367 = (int)result < 0;
              if (v367)
              {
                v389 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v6;
                *v6 = 0;
                v368 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6;
                do
                {
                  v370 = *(v368 - 1);
                  v369 = *v368;
                  *(v368 - 1) = 0;
                  *v368 = v370;
                  sub_20BF1D8F4((int)v368, v369);
                  v371 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                  v372 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v371);
                  v373 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)v368 - 2);
                  v374 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v373);
                  v375 = *(char *)(v374 + 23);
                  v376 = *(char *)(v372 + 23);
                  if (v376 >= 0)
                    v377 = *(unsigned __int8 *)(v372 + 23);
                  else
                    v377 = *(_QWORD *)(v372 + 8);
                  if (v376 >= 0)
                    v378 = (const void *)v372;
                  else
                    v378 = *(const void **)v372;
                  if (v375 >= 0)
                    v379 = *(unsigned __int8 *)(v374 + 23);
                  else
                    v379 = *(_QWORD *)(v374 + 8);
                  if (v375 >= 0)
                    v380 = (const void *)v374;
                  else
                    v380 = *(const void **)v374;
                  if (v379 >= v377)
                    v381 = v377;
                  else
                    v381 = v379;
                  v382 = memcmp(v378, v380, v381);
                  v383 = v377 < v379;
                  if (v382)
                    v383 = v382 < 0;
                  --v368;
                }
                while (v383);
                v384 = *v368;
                *v368 = v389;
                v389 = 0;
                sub_20BF1D8F4((int)v368, v384);
                result = (uint64_t)sub_20C103234(&v389);
              }
              v198 = v6 + 1;
            }
            while (v6 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v385 = (char *)a2 - (char *)v8;
            v234 = (v10 - 2) >> 1;
            v235 = v234;
            do
            {
              v236 = v235;
              if (v234 >= v235)
              {
                v237 = (2 * v235) | 1;
                v238 = &v6[v237];
                if (2 * v235 + 2 < (uint64_t)v10)
                {
                  v239 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(&v6[v237]);
                  v240 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v239);
                  v241 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v238 + 1);
                  v242 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v241);
                  v243 = *(char *)(v242 + 23);
                  v244 = *(char *)(v240 + 23);
                  if (v244 >= 0)
                    v245 = *(unsigned __int8 *)(v240 + 23);
                  else
                    v245 = *(_QWORD *)(v240 + 8);
                  if (v244 >= 0)
                    v246 = (const void *)v240;
                  else
                    v246 = *(const void **)v240;
                  if (v243 >= 0)
                    v247 = *(unsigned __int8 *)(v242 + 23);
                  else
                    v247 = *(_QWORD *)(v242 + 8);
                  if (v243 >= 0)
                    v248 = (const void *)v242;
                  else
                    v248 = *(const void **)v242;
                  if (v247 >= v245)
                    v249 = v245;
                  else
                    v249 = v247;
                  v250 = memcmp(v246, v248, v249);
                  v251 = v245 < v247;
                  if (v250)
                    v251 = v250 < 0;
                  if (v251)
                  {
                    ++v238;
                    v237 = 2 * v236 + 2;
                  }
                }
                v386 = v236;
                v252 = &v6[v236];
                v253 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v238);
                v254 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v253);
                v255 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v252);
                v256 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v255);
                v257 = *(char *)(v256 + 23);
                v258 = *(char *)(v254 + 23);
                if (v258 >= 0)
                  v259 = *(unsigned __int8 *)(v254 + 23);
                else
                  v259 = *(_QWORD *)(v254 + 8);
                if (v258 >= 0)
                  v260 = (const void *)v254;
                else
                  v260 = *(const void **)v254;
                if (v257 >= 0)
                  v261 = *(unsigned __int8 *)(v256 + 23);
                else
                  v261 = *(_QWORD *)(v256 + 8);
                if (v257 >= 0)
                  v262 = (const void *)v256;
                else
                  v262 = *(const void **)v256;
                if (v261 >= v259)
                  v263 = v259;
                else
                  v263 = v261;
                v264 = memcmp(v260, v262, v263);
                v265 = v259 < v261;
                if (v264)
                  v265 = v264 < 0;
                if (!v265)
                {
                  v389 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v252;
                  *v252 = 0;
                  do
                  {
                    v266 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v238;
                    v267 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v252;
                    *v252 = *v238;
                    *v238 = 0;
                    sub_20BF1D8F4((int)v252, v267);
                    if (v234 < v237)
                      break;
                    v268 = (2 * v237) | 1;
                    v238 = &v6[v268];
                    v269 = 2 * v237 + 2;
                    if (v269 >= (uint64_t)v10)
                    {
                      v237 = (2 * v237) | 1;
                    }
                    else
                    {
                      v270 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(&v6[v268]);
                      v271 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v270);
                      v272 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v238 + 1);
                      v273 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v272);
                      v274 = *(char *)(v273 + 23);
                      v275 = *(char *)(v271 + 23);
                      v276 = v234;
                      if (v275 >= 0)
                        v277 = *(unsigned __int8 *)(v271 + 23);
                      else
                        v277 = *(_QWORD *)(v271 + 8);
                      if (v275 >= 0)
                        v278 = (const void *)v271;
                      else
                        v278 = *(const void **)v271;
                      if (v274 >= 0)
                        v279 = *(unsigned __int8 *)(v273 + 23);
                      else
                        v279 = *(_QWORD *)(v273 + 8);
                      if (v274 >= 0)
                        v280 = (const void *)v273;
                      else
                        v280 = *(const void **)v273;
                      if (v279 >= v277)
                        v281 = v277;
                      else
                        v281 = v279;
                      v282 = memcmp(v278, v280, v281);
                      v283 = v277 >= v279;
                      v234 = v276;
                      v284 = !v283;
                      if (v282)
                        v284 = v282 < 0;
                      if (v284)
                      {
                        ++v238;
                        v237 = v269;
                      }
                      else
                      {
                        v237 = v268;
                      }
                    }
                    v285 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v238);
                    v286 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v285);
                    v287 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                    v288 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v287);
                    v289 = *(char *)(v288 + 23);
                    v290 = *(char *)(v286 + 23);
                    if (v290 >= 0)
                      v291 = *(unsigned __int8 *)(v286 + 23);
                    else
                      v291 = *(_QWORD *)(v286 + 8);
                    if (v290 >= 0)
                      v292 = (const void *)v286;
                    else
                      v292 = *(const void **)v286;
                    if (v289 >= 0)
                      v293 = *(unsigned __int8 *)(v288 + 23);
                    else
                      v293 = *(_QWORD *)(v288 + 8);
                    if (v289 >= 0)
                      v294 = (const void *)v288;
                    else
                      v294 = *(const void **)v288;
                    if (v293 >= v291)
                      v295 = v291;
                    else
                      v295 = v293;
                    v296 = memcmp(v292, v294, v295);
                    v297 = v291 < v293;
                    if (v296)
                      v297 = v296 < 0;
                    v252 = (uint64_t *)v266;
                  }
                  while (!v297);
                  v298 = *v266;
                  *v266 = v389;
                  v389 = 0;
                  sub_20BF1D8F4((int)v266, v298);
                  sub_20C103234(&v389);
                  v236 = v386;
                }
              }
              v235 = v236 - 1;
            }
            while (v236);
            v299 = v385 >> 3;
            do
            {
              v300 = 0;
              v388 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v6;
              *v6 = 0;
              v301 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6;
              do
              {
                v302 = (uint64_t *)&v301[v300 + 1];
                v303 = 2 * v300;
                v300 = (2 * v300) | 1;
                v304 = v303 + 2;
                if (v303 + 2 < v299)
                {
                  v305 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v302);
                  v306 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v305);
                  v307 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v302 + 1);
                  v308 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v307);
                  v309 = *(char *)(v308 + 23);
                  v310 = *(char *)(v306 + 23);
                  if (v310 >= 0)
                    v311 = *(unsigned __int8 *)(v306 + 23);
                  else
                    v311 = *(_QWORD *)(v306 + 8);
                  if (v310 >= 0)
                    v312 = (const void *)v306;
                  else
                    v312 = *(const void **)v306;
                  if (v309 >= 0)
                    v313 = *(unsigned __int8 *)(v308 + 23);
                  else
                    v313 = *(_QWORD *)(v308 + 8);
                  if (v309 >= 0)
                    v314 = (const void *)v308;
                  else
                    v314 = *(const void **)v308;
                  if (v313 >= v311)
                    v315 = v311;
                  else
                    v315 = v313;
                  v316 = memcmp(v312, v314, v315);
                  v317 = v311 < v313;
                  if (v316)
                    v317 = v316 < 0;
                  if (v317)
                  {
                    ++v302;
                    v300 = v304;
                  }
                }
                v318 = *v301;
                *v301 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v302;
                *v302 = 0;
                sub_20BF1D8F4((int)v301, v318);
                v301 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v302;
              }
              while (v300 <= (uint64_t)((unint64_t)(v299 - 2) >> 1));
              v319 = a2 - 1;
              v320 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v302;
              if (v302 == a2 - 1)
              {
                *v302 = (uint64_t)v388;
                v388 = 0;
                sub_20BF1D8F4((int)v302, v320);
              }
              else
              {
                *v302 = *v319;
                *v319 = 0;
                sub_20BF1D8F4((int)v302, v320);
                v321 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v319;
                *v319 = (uint64_t)v388;
                v388 = 0;
                sub_20BF1D8F4((int)v319, v321);
                v322 = (char *)v302 - (char *)v6 + 8;
                if (v322 >= 9)
                {
                  v323 = (((unint64_t)v322 >> 3) - 2) >> 1;
                  v324 = &v6[v323];
                  v325 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v324);
                  v326 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v325);
                  v327 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v302);
                  v328 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v327);
                  v329 = *(char *)(v328 + 23);
                  v330 = *(char *)(v326 + 23);
                  if (v330 >= 0)
                    v331 = *(unsigned __int8 *)(v326 + 23);
                  else
                    v331 = *(_QWORD *)(v326 + 8);
                  if (v330 >= 0)
                    v332 = (const void *)v326;
                  else
                    v332 = *(const void **)v326;
                  if (v329 >= 0)
                    v333 = *(unsigned __int8 *)(v328 + 23);
                  else
                    v333 = *(_QWORD *)(v328 + 8);
                  if (v329 >= 0)
                    v334 = (const void *)v328;
                  else
                    v334 = *(const void **)v328;
                  if (v333 >= v331)
                    v335 = v331;
                  else
                    v335 = v333;
                  v336 = memcmp(v332, v334, v335);
                  v337 = v331 < v333;
                  if (v336)
                    v337 = v336 < 0;
                  if (v337)
                  {
                    v389 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v302;
                    *v302 = 0;
                    do
                    {
                      v338 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v324;
                      v339 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v302;
                      *v302 = *v324;
                      *v324 = 0;
                      sub_20BF1D8F4((int)v302, v339);
                      if (!v323)
                        break;
                      v323 = (v323 - 1) >> 1;
                      v324 = &v6[v323];
                      v340 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v324);
                      v341 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v340);
                      v342 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                      v343 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v342);
                      v344 = *(char *)(v343 + 23);
                      v345 = *(char *)(v341 + 23);
                      if (v345 >= 0)
                        v346 = *(unsigned __int8 *)(v341 + 23);
                      else
                        v346 = *(_QWORD *)(v341 + 8);
                      if (v345 >= 0)
                        v347 = (const void *)v341;
                      else
                        v347 = *(const void **)v341;
                      if (v344 >= 0)
                        v348 = *(unsigned __int8 *)(v343 + 23);
                      else
                        v348 = *(_QWORD *)(v343 + 8);
                      if (v344 >= 0)
                        v349 = (const void *)v343;
                      else
                        v349 = *(const void **)v343;
                      if (v348 >= v346)
                        v350 = v346;
                      else
                        v350 = v348;
                      v351 = memcmp(v347, v349, v350);
                      v352 = v346 < v348;
                      if (v351)
                        v352 = v351 < 0;
                      v302 = (uint64_t *)v338;
                    }
                    while (v352);
                    v353 = *v338;
                    *v338 = v389;
                    v389 = 0;
                    sub_20BF1D8F4((int)v338, v353);
                    sub_20C103234(&v389);
                  }
                }
              }
              --a2;
              result = (uint64_t)sub_20C103234(&v388);
            }
            while (v299-- > 2);
          }
          return result;
        }
        v11 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          sub_20C69B0A4(&v8[v10 >> 1], v8, v7);
        }
        else
        {
          sub_20C69B0A4(v8, &v8[v10 >> 1], v7);
          sub_20C69B0A4(v8 + 1, v11 - 1, a2 - 2);
          sub_20C69B0A4(v8 + 2, &v8[(v10 >> 1) + 1], a2 - 3);
          sub_20C69B0A4(v11 - 1, &v8[v10 >> 1], &v8[(v10 >> 1) + 1]);
          v12 = *v8;
          *v8 = *v11;
          *v11 = v12;
        }
        v13 = a2;
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v6 - 1);
          v15 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v14);
          v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v6);
          v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v16);
          v18 = *(char *)(v17 + 23);
          v19 = *(char *)(v15 + 23);
          if (v19 >= 0)
            v20 = *(unsigned __int8 *)(v15 + 23);
          else
            v20 = *(_QWORD *)(v15 + 8);
          if (v19 >= 0)
            v21 = (const void *)v15;
          else
            v21 = *(const void **)v15;
          if (v18 >= 0)
            v22 = *(unsigned __int8 *)(v17 + 23);
          else
            v22 = *(_QWORD *)(v17 + 8);
          if (v18 >= 0)
            v23 = (const void *)v17;
          else
            v23 = *(const void **)v17;
          if (v22 >= v20)
            v24 = v20;
          else
            v24 = v22;
          v25 = memcmp(v21, v23, v24);
          v26 = v20 < v22;
          if (v25)
            v26 = v25 < 0;
          if (!v26)
          {
            v389 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v6;
            *v6 = 0;
            v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
            v102 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v101);
            v103 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v7);
            v104 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v103);
            v105 = *(char *)(v104 + 23);
            v106 = *(char *)(v102 + 23);
            if (v106 >= 0)
              v107 = *(unsigned __int8 *)(v102 + 23);
            else
              v107 = *(_QWORD *)(v102 + 8);
            if (v106 >= 0)
              v108 = (const void *)v102;
            else
              v108 = *(const void **)v102;
            if (v105 >= 0)
              v109 = *(unsigned __int8 *)(v104 + 23);
            else
              v109 = *(_QWORD *)(v104 + 8);
            if (v105 >= 0)
              v110 = (const void *)v104;
            else
              v110 = *(const void **)v104;
            if (v109 >= v107)
              v111 = v107;
            else
              v111 = v109;
            v112 = memcmp(v108, v110, v111);
            v113 = v107 < v109;
            if (v112)
              v113 = v112 < 0;
            if (v113)
            {
              v8 = v6;
              do
              {
                v114 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                v115 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v114);
                v116 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(++v8);
                v117 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v116);
                v118 = *(char *)(v117 + 23);
                v119 = *(char *)(v115 + 23);
                if (v119 >= 0)
                  v120 = *(unsigned __int8 *)(v115 + 23);
                else
                  v120 = *(_QWORD *)(v115 + 8);
                if (v119 >= 0)
                  v121 = (const void *)v115;
                else
                  v121 = *(const void **)v115;
                if (v118 >= 0)
                  v122 = *(unsigned __int8 *)(v117 + 23);
                else
                  v122 = *(_QWORD *)(v117 + 8);
                if (v118 >= 0)
                  v123 = (const void *)v117;
                else
                  v123 = *(const void **)v117;
                if (v122 >= v120)
                  v124 = v120;
                else
                  v124 = v122;
                v125 = memcmp(v121, v123, v124);
                v126 = v120 < v122;
                if (v125)
                  v126 = v125 < 0;
              }
              while (!v126);
            }
            else
            {
              v127 = v6 + 1;
              do
              {
                v8 = v127;
                if (v127 >= a2)
                  break;
                v128 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                v129 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v128);
                v130 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v8);
                v131 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v130);
                v132 = *(char *)(v131 + 23);
                v133 = *(char *)(v129 + 23);
                if (v133 >= 0)
                  v134 = *(unsigned __int8 *)(v129 + 23);
                else
                  v134 = *(_QWORD *)(v129 + 8);
                if (v133 >= 0)
                  v135 = (const void *)v129;
                else
                  v135 = *(const void **)v129;
                if (v132 >= 0)
                  v136 = *(unsigned __int8 *)(v131 + 23);
                else
                  v136 = *(_QWORD *)(v131 + 8);
                if (v132 >= 0)
                  v137 = (const void *)v131;
                else
                  v137 = *(const void **)v131;
                if (v136 >= v134)
                  v138 = v134;
                else
                  v138 = v136;
                v139 = memcmp(v135, v137, v138);
                v140 = v139 < 0;
                if (!v139)
                  v140 = v134 < v136;
                v127 = v8 + 1;
              }
              while (!v140);
            }
            v141 = a2;
            if (v8 < a2)
            {
              v141 = a2;
              do
              {
                v142 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                v143 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v142);
                v144 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(--v141);
                v145 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v144);
                v146 = *(char *)(v145 + 23);
                v147 = *(char *)(v143 + 23);
                if (v147 >= 0)
                  v148 = *(unsigned __int8 *)(v143 + 23);
                else
                  v148 = *(_QWORD *)(v143 + 8);
                if (v147 >= 0)
                  v149 = (const void *)v143;
                else
                  v149 = *(const void **)v143;
                if (v146 >= 0)
                  v150 = *(unsigned __int8 *)(v145 + 23);
                else
                  v150 = *(_QWORD *)(v145 + 8);
                if (v146 >= 0)
                  v151 = (const void *)v145;
                else
                  v151 = *(const void **)v145;
                if (v150 >= v148)
                  v152 = v148;
                else
                  v152 = v150;
                v153 = memcmp(v149, v151, v152);
                v154 = v148 < v150;
                if (v153)
                  v154 = v153 < 0;
              }
              while (v154);
            }
            while (v8 < v141)
            {
              v155 = *v8;
              *v8 = *v141;
              *v141 = v155;
              do
              {
                v156 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                v157 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v156);
                v158 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(++v8);
                v159 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v158);
                v160 = *(char *)(v159 + 23);
                v161 = *(char *)(v157 + 23);
                if (v161 >= 0)
                  v162 = *(unsigned __int8 *)(v157 + 23);
                else
                  v162 = *(_QWORD *)(v157 + 8);
                if (v161 >= 0)
                  v163 = (const void *)v157;
                else
                  v163 = *(const void **)v157;
                if (v160 >= 0)
                  v164 = *(unsigned __int8 *)(v159 + 23);
                else
                  v164 = *(_QWORD *)(v159 + 8);
                if (v160 >= 0)
                  v165 = (const void *)v159;
                else
                  v165 = *(const void **)v159;
                if (v164 >= v162)
                  v166 = v162;
                else
                  v166 = v164;
                v167 = memcmp(v163, v165, v166);
                v168 = v162 < v164;
                if (v167)
                  v168 = v167 < 0;
              }
              while (!v168);
              do
              {
                v169 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
                v170 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v169);
                v171 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(--v141);
                v172 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v171);
                v173 = *(char *)(v172 + 23);
                v174 = *(char *)(v170 + 23);
                if (v174 >= 0)
                  v175 = *(unsigned __int8 *)(v170 + 23);
                else
                  v175 = *(_QWORD *)(v170 + 8);
                if (v174 >= 0)
                  v176 = (const void *)v170;
                else
                  v176 = *(const void **)v170;
                if (v173 >= 0)
                  v177 = *(unsigned __int8 *)(v172 + 23);
                else
                  v177 = *(_QWORD *)(v172 + 8);
                if (v173 >= 0)
                  v178 = (const void *)v172;
                else
                  v178 = *(const void **)v172;
                if (v177 >= v175)
                  v179 = v175;
                else
                  v179 = v177;
                v180 = memcmp(v176, v178, v179);
                v181 = v175 < v177;
                if (v180)
                  v181 = v180 < 0;
              }
              while (v181);
            }
            v182 = v8 - 1;
            if (v8 - 1 != v6)
            {
              v183 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v6;
              *v6 = *v182;
              *v182 = 0;
              sub_20BF1D8F4((int)v6, v183);
            }
            v184 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v182;
            *v182 = (uint64_t)v389;
            v389 = 0;
            sub_20BF1D8F4((_DWORD)v8 - 8, v184);
            result = (uint64_t)sub_20C103234(&v389);
            a4 = 0;
            continue;
          }
        }
        v27 = 0;
        v389 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v6;
        *v6 = 0;
        do
        {
          v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(&v6[v27 + 1]);
          v29 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v28);
          v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
          v31 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v30);
          v32 = *(char *)(v31 + 23);
          v33 = *(char *)(v29 + 23);
          if (v33 >= 0)
            v34 = *(unsigned __int8 *)(v29 + 23);
          else
            v34 = *(_QWORD *)(v29 + 8);
          if (v33 >= 0)
            v35 = (const void *)v29;
          else
            v35 = *(const void **)v29;
          if (v32 >= 0)
            v36 = *(unsigned __int8 *)(v31 + 23);
          else
            v36 = *(_QWORD *)(v31 + 8);
          if (v32 >= 0)
            v37 = (const void *)v31;
          else
            v37 = *(const void **)v31;
          if (v36 >= v34)
            v38 = v34;
          else
            v38 = v36;
          v39 = memcmp(v35, v37, v38);
          v40 = v34 < v36;
          if (v39)
            v40 = v39 < 0;
          ++v27;
        }
        while (v40);
        v41 = &v6[v27];
        if (v27 == 1)
        {
          v13 = a2;
          do
          {
            if (v41 >= v13)
              break;
            v55 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(--v13);
            v56 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v55);
            v57 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
            v58 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v57);
            v59 = *(char *)(v58 + 23);
            v60 = *(char *)(v56 + 23);
            if (v60 >= 0)
              v61 = *(unsigned __int8 *)(v56 + 23);
            else
              v61 = *(_QWORD *)(v56 + 8);
            if (v60 >= 0)
              v62 = (const void *)v56;
            else
              v62 = *(const void **)v56;
            if (v59 >= 0)
              v63 = *(unsigned __int8 *)(v58 + 23);
            else
              v63 = *(_QWORD *)(v58 + 8);
            if (v59 >= 0)
              v64 = (const void *)v58;
            else
              v64 = *(const void **)v58;
            if (v63 >= v61)
              v65 = v61;
            else
              v65 = v63;
            v66 = memcmp(v62, v64, v65);
            v67 = v61 < v63;
            if (v66)
              v67 = v66 < 0;
          }
          while (!v67);
        }
        else
        {
          do
          {
            v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(--v13);
            v43 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v42);
            v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
            v45 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v44);
            v46 = *(char *)(v45 + 23);
            v47 = *(char *)(v43 + 23);
            if (v47 >= 0)
              v48 = *(unsigned __int8 *)(v43 + 23);
            else
              v48 = *(_QWORD *)(v43 + 8);
            if (v47 >= 0)
              v49 = (const void *)v43;
            else
              v49 = *(const void **)v43;
            if (v46 >= 0)
              v50 = *(unsigned __int8 *)(v45 + 23);
            else
              v50 = *(_QWORD *)(v45 + 8);
            if (v46 >= 0)
              v51 = (const void *)v45;
            else
              v51 = *(const void **)v45;
            if (v50 >= v48)
              v52 = v48;
            else
              v52 = v50;
            v53 = memcmp(v49, v51, v52);
            v54 = v48 < v50;
            if (v53)
              v54 = v53 < 0;
          }
          while (!v54);
        }
        if (v41 >= v13)
        {
          v97 = v41 - 1;
        }
        else
        {
          v68 = v41;
          v69 = v13;
          do
          {
            v70 = *v68;
            *v68 = *v69;
            *v69 = v70;
            do
            {
              v71 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(++v68);
              v72 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v71);
              v73 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
              v74 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v73);
              v75 = *(char *)(v74 + 23);
              v76 = *(char *)(v72 + 23);
              if (v76 >= 0)
                v77 = *(unsigned __int8 *)(v72 + 23);
              else
                v77 = *(_QWORD *)(v72 + 8);
              if (v76 >= 0)
                v78 = (const void *)v72;
              else
                v78 = *(const void **)v72;
              if (v75 >= 0)
                v79 = *(unsigned __int8 *)(v74 + 23);
              else
                v79 = *(_QWORD *)(v74 + 8);
              if (v75 >= 0)
                v80 = (const void *)v74;
              else
                v80 = *(const void **)v74;
              if (v79 >= v77)
                v81 = v77;
              else
                v81 = v79;
              v82 = memcmp(v78, v80, v81);
              v83 = v77 < v79;
              if (v82)
                v83 = v82 < 0;
            }
            while (v83);
            do
            {
              v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(--v69);
              v85 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v84);
              v86 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v389);
              v87 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v86);
              v88 = *(char *)(v87 + 23);
              v89 = *(char *)(v85 + 23);
              if (v89 >= 0)
                v90 = *(unsigned __int8 *)(v85 + 23);
              else
                v90 = *(_QWORD *)(v85 + 8);
              if (v89 >= 0)
                v91 = (const void *)v85;
              else
                v91 = *(const void **)v85;
              if (v88 >= 0)
                v92 = *(unsigned __int8 *)(v87 + 23);
              else
                v92 = *(_QWORD *)(v87 + 8);
              if (v88 >= 0)
                v93 = (const void *)v87;
              else
                v93 = *(const void **)v87;
              if (v92 >= v90)
                v94 = v90;
              else
                v94 = v92;
              v95 = memcmp(v91, v93, v94);
              v96 = v90 < v92;
              if (v95)
                v96 = v95 < 0;
            }
            while (!v96);
          }
          while (v68 < v69);
          v97 = v68 - 1;
        }
        if (v97 != v6)
        {
          v98 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v6;
          *v6 = *v97;
          *v97 = 0;
          sub_20BF1D8F4((int)v6, v98);
        }
        v99 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v97;
        *v97 = (uint64_t)v389;
        v389 = 0;
        sub_20BF1D8F4((int)v97, v99);
        sub_20C103234(&v389);
        if (v41 < v13)
        {
LABEL_134:
          result = sub_20C699BFC(v6, v97, a3, a4 & 1);
          a4 = 0;
          v8 = v97 + 1;
          continue;
        }
        v100 = sub_20C69B304(v6, v97);
        v8 = v97 + 1;
        result = sub_20C69B304(v97 + 1, a2);
        if (!(_DWORD)result)
        {
          if ((v100 & 1) != 0)
            continue;
          goto LABEL_134;
        }
        a2 = v97;
        if ((v100 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_20C69ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69AE3C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  int v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  const void *v19;
  size_t v20;
  uint64_t result;
  _BOOL4 v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  _BOOL4 v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  uint64_t v38;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  uint64_t v40;
  int v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  const void *v46;
  size_t v47;
  _BOOL4 v48;
  uint64_t v49;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v52;
  uint64_t v53;
  int v54;
  int v55;
  size_t v56;
  const void *v57;
  size_t v58;
  const void *v59;
  size_t v60;
  _BOOL4 v61;
  uint64_t v62;

  sub_20C69B618(a1, a2, a3, a4);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a5);
  RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v10);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a4);
  v13 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v12);
  v14 = *(char *)(v13 + 23);
  v15 = *(char *)(RealPath + 23);
  if (v15 >= 0)
    v16 = *(unsigned __int8 *)(RealPath + 23);
  else
    v16 = *(_QWORD *)(RealPath + 8);
  if (v15 >= 0)
    v17 = (const void *)RealPath;
  else
    v17 = *(const void **)RealPath;
  if (v14 >= 0)
    v18 = *(unsigned __int8 *)(v13 + 23);
  else
    v18 = *(_QWORD *)(v13 + 8);
  if (v14 >= 0)
    v19 = (const void *)v13;
  else
    v19 = *(const void **)v13;
  if (v18 >= v16)
    v20 = v16;
  else
    v20 = v18;
  result = memcmp(v17, v19, v20);
  v22 = v16 < v18;
  if ((_DWORD)result)
    v22 = (int)result < 0;
  if (v22)
  {
    v23 = *a4;
    *a4 = *a5;
    *a5 = v23;
    v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a4);
    v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v24);
    v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
    v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v26);
    v28 = *(char *)(v27 + 23);
    v29 = *(char *)(v25 + 23);
    if (v29 >= 0)
      v30 = *(unsigned __int8 *)(v25 + 23);
    else
      v30 = *(_QWORD *)(v25 + 8);
    if (v29 >= 0)
      v31 = (const void *)v25;
    else
      v31 = *(const void **)v25;
    if (v28 >= 0)
      v32 = *(unsigned __int8 *)(v27 + 23);
    else
      v32 = *(_QWORD *)(v27 + 8);
    if (v28 >= 0)
      v33 = (const void *)v27;
    else
      v33 = *(const void **)v27;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    result = memcmp(v31, v33, v34);
    v35 = v30 < v32;
    if ((_DWORD)result)
      v35 = (int)result < 0;
    if (v35)
    {
      v36 = *a3;
      *a3 = *a4;
      *a4 = v36;
      v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
      v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v37);
      v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
      v40 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v39);
      v41 = *(char *)(v40 + 23);
      v42 = *(char *)(v38 + 23);
      if (v42 >= 0)
        v43 = *(unsigned __int8 *)(v38 + 23);
      else
        v43 = *(_QWORD *)(v38 + 8);
      if (v42 >= 0)
        v44 = (const void *)v38;
      else
        v44 = *(const void **)v38;
      if (v41 >= 0)
        v45 = *(unsigned __int8 *)(v40 + 23);
      else
        v45 = *(_QWORD *)(v40 + 8);
      if (v41 >= 0)
        v46 = (const void *)v40;
      else
        v46 = *(const void **)v40;
      if (v45 >= v43)
        v47 = v43;
      else
        v47 = v45;
      result = memcmp(v44, v46, v47);
      v48 = v43 < v45;
      if ((_DWORD)result)
        v48 = (int)result < 0;
      if (v48)
      {
        v49 = *a2;
        *a2 = *a3;
        *a3 = v49;
        v50 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
        v51 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v50);
        v52 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
        v53 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v52);
        v54 = *(char *)(v53 + 23);
        v55 = *(char *)(v51 + 23);
        if (v55 >= 0)
          v56 = *(unsigned __int8 *)(v51 + 23);
        else
          v56 = *(_QWORD *)(v51 + 8);
        if (v55 >= 0)
          v57 = (const void *)v51;
        else
          v57 = *(const void **)v51;
        if (v54 >= 0)
          v58 = *(unsigned __int8 *)(v53 + 23);
        else
          v58 = *(_QWORD *)(v53 + 8);
        if (v54 >= 0)
          v59 = (const void *)v53;
        else
          v59 = *(const void **)v53;
        if (v58 >= v56)
          v60 = v56;
        else
          v60 = v58;
        result = memcmp(v57, v59, v60);
        v61 = v56 < v58;
        if ((_DWORD)result)
          v61 = (int)result < 0;
        if (v61)
        {
          v62 = *a1;
          *a1 = *a2;
          *a2 = v62;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C69B0A4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t v22;
  int v23;
  int v24;
  size_t v25;
  const void *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  uint64_t result;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v36;
  uint64_t v37;
  int v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  const void *v43;
  size_t v44;
  _BOOL4 v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v49;
  uint64_t v50;
  int v51;
  int v52;
  size_t v53;
  const void *v54;
  size_t v55;
  const void *v56;
  size_t v57;
  _BOOL4 v58;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v6);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
  v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v8);
  v10 = *(char *)(v9 + 23);
  v11 = *(char *)(RealPath + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(RealPath + 23);
  else
    v12 = *(_QWORD *)(RealPath + 8);
  if (v11 >= 0)
    v13 = (const void *)RealPath;
  else
    v13 = *(const void **)RealPath;
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(v9 + 23);
  else
    v14 = *(_QWORD *)(v9 + 8);
  if (v10 >= 0)
    v15 = (const void *)v9;
  else
    v15 = *(const void **)v9;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  if (v17)
    v18 = v17 < 0;
  else
    v18 = v12 < v14;
  v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
  v20 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v19);
  v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v21);
  v23 = *(char *)(v22 + 23);
  v24 = *(char *)(v20 + 23);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v20 + 23);
  else
    v25 = *(_QWORD *)(v20 + 8);
  if (v24 >= 0)
    v26 = (const void *)v20;
  else
    v26 = *(const void **)v20;
  if (v23 >= 0)
    v27 = *(unsigned __int8 *)(v22 + 23);
  else
    v27 = *(_QWORD *)(v22 + 8);
  if (v23 >= 0)
    v28 = (const void *)v22;
  else
    v28 = *(const void **)v22;
  if (v27 >= v25)
    v29 = v25;
  else
    v29 = v27;
  result = memcmp(v26, v28, v29);
  v31 = (int)result < 0;
  if (!(_DWORD)result)
    v31 = v25 < v27;
  if (v18)
  {
    v32 = *a1;
    if (v31)
    {
      *a1 = *a3;
LABEL_78:
      *a3 = v32;
      return result;
    }
    *a1 = *a2;
    *a2 = v32;
    v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
    v48 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v47);
    v49 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    v50 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v49);
    v51 = *(char *)(v50 + 23);
    v52 = *(char *)(v48 + 23);
    if (v52 >= 0)
      v53 = *(unsigned __int8 *)(v48 + 23);
    else
      v53 = *(_QWORD *)(v48 + 8);
    if (v52 >= 0)
      v54 = (const void *)v48;
    else
      v54 = *(const void **)v48;
    if (v51 >= 0)
      v55 = *(unsigned __int8 *)(v50 + 23);
    else
      v55 = *(_QWORD *)(v50 + 8);
    if (v51 >= 0)
      v56 = (const void *)v50;
    else
      v56 = *(const void **)v50;
    if (v55 >= v53)
      v57 = v53;
    else
      v57 = v55;
    result = memcmp(v54, v56, v57);
    v58 = v53 < v55;
    if ((_DWORD)result)
      v58 = (int)result < 0;
    if (v58)
    {
      v32 = *a2;
      *a2 = *a3;
      goto LABEL_78;
    }
  }
  else if (v31)
  {
    v33 = *a2;
    *a2 = *a3;
    *a3 = v33;
    v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    v35 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v34);
    v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
    v37 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v36);
    v38 = *(char *)(v37 + 23);
    v39 = *(char *)(v35 + 23);
    if (v39 >= 0)
      v40 = *(unsigned __int8 *)(v35 + 23);
    else
      v40 = *(_QWORD *)(v35 + 8);
    if (v39 >= 0)
      v41 = (const void *)v35;
    else
      v41 = *(const void **)v35;
    if (v38 >= 0)
      v42 = *(unsigned __int8 *)(v37 + 23);
    else
      v42 = *(_QWORD *)(v37 + 8);
    if (v38 >= 0)
      v43 = (const void *)v37;
    else
      v43 = *(const void **)v37;
    if (v42 >= v40)
      v44 = v40;
    else
      v44 = v42;
    result = memcmp(v41, v43, v44);
    v45 = v40 < v42;
    if ((_DWORD)result)
      v45 = (int)result < 0;
    if (v45)
    {
      v46 = *a1;
      *a1 = *a2;
      *a2 = v46;
    }
  }
  return result;
}

uint64_t sub_20C69B304(uint64_t *a1, uint64_t *a2)
{
  _BOOL8 v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v38;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v39;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  uint64_t v44;
  int v45;
  int v46;
  size_t v47;
  const void *v48;
  size_t v49;
  const void *v50;
  size_t v51;
  int v52;
  BOOL v53;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v54;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v55;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v57;

  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = a2 - 1;
      v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2 - 1);
      RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v6);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
      v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v8);
      v10 = *(char *)(v9 + 23);
      v11 = *(char *)(RealPath + 23);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(RealPath + 23);
      else
        v12 = *(_QWORD *)(RealPath + 8);
      if (v11 >= 0)
        v13 = (const void *)RealPath;
      else
        v13 = *(const void **)RealPath;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(v9 + 23);
      else
        v14 = *(_QWORD *)(v9 + 8);
      if (v10 >= 0)
        v15 = (const void *)v9;
      else
        v15 = *(const void **)v9;
      if (v14 >= v12)
        v16 = v12;
      else
        v16 = v14;
      v17 = memcmp(v13, v15, v16);
      v18 = v12 < v14;
      if (v17)
        v18 = v17 < 0;
      if (v18)
      {
        v19 = *a1;
        *a1 = *v5;
        *v5 = v19;
      }
      return 1;
    case 3:
      sub_20C69B0A4(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_20C69B618(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_20C69AE3C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v20 = a1 + 2;
      sub_20C69B0A4(a1, a1 + 1, a1 + 2);
      v21 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (1)
  {
    v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v21);
    v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v24);
    v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v20);
    v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v26);
    v28 = *(char *)(v27 + 23);
    v29 = *(char *)(v25 + 23);
    if (v29 >= 0)
      v30 = *(unsigned __int8 *)(v25 + 23);
    else
      v30 = *(_QWORD *)(v25 + 8);
    if (v29 >= 0)
      v31 = (const void *)v25;
    else
      v31 = *(const void **)v25;
    if (v28 >= 0)
      v32 = *(unsigned __int8 *)(v27 + 23);
    else
      v32 = *(_QWORD *)(v27 + 8);
    if (v28 >= 0)
      v33 = (const void *)v27;
    else
      v33 = *(const void **)v27;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    v35 = memcmp(v31, v33, v34);
    v36 = v30 < v32;
    if (v35)
      v36 = v35 < 0;
    if (!v36)
      goto LABEL_65;
    v57 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v21;
    *v21 = 0;
    v37 = v22;
    while (1)
    {
      v38 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)a1 + v37 + 24);
      v39 = *v38;
      v40 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)a1 + v37 + 16);
      *(v38 - 1) = 0;
      *v38 = v40;
      sub_20BF1D8F4((int)v38, v39);
      if (v37 == -16)
        break;
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v57);
      v42 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v41);
      v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)((char *)a1 + v37 + 8));
      v44 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v43);
      v45 = *(char *)(v44 + 23);
      v46 = *(char *)(v42 + 23);
      if (v46 >= 0)
        v47 = *(unsigned __int8 *)(v42 + 23);
      else
        v47 = *(_QWORD *)(v42 + 8);
      if (v46 >= 0)
        v48 = (const void *)v42;
      else
        v48 = *(const void **)v42;
      if (v45 >= 0)
        v49 = *(unsigned __int8 *)(v44 + 23);
      else
        v49 = *(_QWORD *)(v44 + 8);
      if (v45 >= 0)
        v50 = (const void *)v44;
      else
        v50 = *(const void **)v44;
      if (v49 >= v47)
        v51 = v47;
      else
        v51 = v49;
      v52 = memcmp(v48, v50, v51);
      v53 = v47 < v49;
      if (v52)
        v53 = v52 < 0;
      v37 -= 8;
      if (!v53)
      {
        v54 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)a1 + v37 + 24);
        goto LABEL_63;
      }
    }
    v54 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1;
LABEL_63:
    v55 = *v54;
    *v54 = v57;
    v57 = 0;
    sub_20BF1D8F4((int)v54, v55);
    if (++v23 == 8)
      break;
    sub_20C103234(&v57);
LABEL_65:
    v20 = v21;
    v22 += 8;
    if (++v21 == a2)
      return 1;
  }
  v4 = v21 + 1 == a2;
  sub_20C103234(&v57);
  return v4;
}

void sub_20C69B600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69B618(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  uint64_t result;
  _BOOL4 v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  uint64_t v25;
  int v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  _BOOL4 v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  uint64_t v38;
  int v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  const void *v44;
  size_t v45;
  _BOOL4 v46;
  uint64_t v47;

  sub_20C69B0A4(a1, a2, a3);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a4);
  RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v8);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
  v11 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v10);
  v12 = *(char *)(v11 + 23);
  v13 = *(char *)(RealPath + 23);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(RealPath + 23);
  else
    v14 = *(_QWORD *)(RealPath + 8);
  if (v13 >= 0)
    v15 = (const void *)RealPath;
  else
    v15 = *(const void **)RealPath;
  if (v12 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  if (v12 >= 0)
    v17 = (const void *)v11;
  else
    v17 = *(const void **)v11;
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = v16;
  result = memcmp(v15, v17, v18);
  v20 = v14 < v16;
  if ((_DWORD)result)
    v20 = (int)result < 0;
  if (v20)
  {
    v21 = *a3;
    *a3 = *a4;
    *a4 = v21;
    v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a3);
    v23 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
    v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v24);
    v26 = *(char *)(v25 + 23);
    v27 = *(char *)(v23 + 23);
    if (v27 >= 0)
      v28 = *(unsigned __int8 *)(v23 + 23);
    else
      v28 = *(_QWORD *)(v23 + 8);
    if (v27 >= 0)
      v29 = (const void *)v23;
    else
      v29 = *(const void **)v23;
    if (v26 >= 0)
      v30 = *(unsigned __int8 *)(v25 + 23);
    else
      v30 = *(_QWORD *)(v25 + 8);
    if (v26 >= 0)
      v31 = (const void *)v25;
    else
      v31 = *(const void **)v25;
    if (v30 >= v28)
      v32 = v28;
    else
      v32 = v30;
    result = memcmp(v29, v31, v32);
    v33 = v28 < v30;
    if ((_DWORD)result)
      v33 = (int)result < 0;
    if (v33)
    {
      v34 = *a2;
      *a2 = *a3;
      *a3 = v34;
      v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
      v36 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v35);
      v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
      v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v37);
      v39 = *(char *)(v38 + 23);
      v40 = *(char *)(v36 + 23);
      if (v40 >= 0)
        v41 = *(unsigned __int8 *)(v36 + 23);
      else
        v41 = *(_QWORD *)(v36 + 8);
      if (v40 >= 0)
        v42 = (const void *)v36;
      else
        v42 = *(const void **)v36;
      if (v39 >= 0)
        v43 = *(unsigned __int8 *)(v38 + 23);
      else
        v43 = *(_QWORD *)(v38 + 8);
      if (v39 >= 0)
        v44 = (const void *)v38;
      else
        v44 = *(const void **)v38;
      if (v43 >= v41)
        v45 = v41;
      else
        v45 = v43;
      result = memcmp(v42, v44, v45);
      v46 = v41 < v43;
      if ((_DWORD)result)
        v46 = (int)result < 0;
      if (v46)
      {
        v47 = *a1;
        *a1 = *a2;
        *a2 = v47;
      }
    }
  }
  return result;
}

void sub_20C69B7EC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = (uint64_t)a2;
  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20BE7598C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_20BDE4FA4((_QWORD *)a1, v11);
    v12 = sub_20C69B9B8(v8, (uint64_t *)v6, a3, *(char **)(a1 + 8));
LABEL_18:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v13 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v9) >> 3);
  if (v14 < a4)
  {
    if (v13 - (char *)v9 >= 1)
    {
      v15 = v14 + 1;
      v16 = a2;
      do
      {
        v16 = (uint64_t *)*v16;
        --v15;
      }
      while (v15 > 1);
      if (v16 != a2)
      {
        do
        {
          std::string::operator=(v9, (const std::string *)(v6 + 16));
          v6 = *(_QWORD *)v6;
          ++v9;
        }
        while ((uint64_t *)v6 != v16);
        v13 = *(char **)(a1 + 8);
      }
      v6 = (uint64_t)v16;
    }
    v12 = sub_20C69B9B8(v8, (uint64_t *)v6, a3, v13);
    goto LABEL_18;
  }
  if (a2 == a3)
  {
    v17 = *(_QWORD *)a1;
  }
  else
  {
    v17 = *(_QWORD *)a1;
    do
    {
      std::string::operator=(v9, (const std::string *)(v6 + 16));
      v6 = *(_QWORD *)v6;
      ++v9;
      v17 += 24;
    }
    while ((uint64_t *)v6 != a3);
    v13 = *(char **)(a1 + 8);
  }
  while (v13 != (char *)v17)
  {
    if (*(v13 - 1) < 0)
      operator delete(*((void **)v13 - 3));
    v13 -= 24;
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20C69B9AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20C69B9B8(uint64_t a1, uint64_t *a2, uint64_t *a3, char *__dst)
{
  char *v4;
  uint64_t *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 39) < 0)
      {
        sub_20BDDBFAC(v4, (void *)v6[2], v6[3]);
        v4 = v12;
      }
      else
      {
        v7 = *((_OWORD *)v6 + 1);
        *((_QWORD *)v4 + 2) = v6[4];
        *(_OWORD *)v4 = v7;
      }
      v6 = (uint64_t *)*v6;
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20BE75618((uint64_t)v9);
  return v4;
}

void sub_20C69BA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE75618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C69BA80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C540FE0;
  result[1] = v3;
  return result;
}

uint64_t sub_20C69BAB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C540FE0;
  a2[1] = v2;
  return result;
}

void sub_20C69BAD0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  void *__p[2];
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v4)
    sub_20BE9E974();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(__p, v4, a2);
  if (SHIBYTE(v7) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
    v5 = SHIBYTE(v7);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
}

void sub_20C69BB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C69BB78(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C541040))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C69BBB4()
{
  return &unk_24C541040;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &unk_24C541060;
  v5[1] = pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStackResolveAssetPath;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStack(a1, (uint64_t)v5, a2, a3);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20C69BC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t *LayerStack;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  void *__p;
  void *v23;
  void **v24;

  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v7, (uint64_t)&v16);
  v9 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_20C368FF0((uint64_t)&v16, v8);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v21, v9);
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v21);
  v16 = v12;
  v17 = v13;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v16);
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(LayerStack, a2, a3, a4);
  sub_20BF1C150(&v24, 0);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return sub_20C21DABC(&v21);
}

void sub_20C69BD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C69BDB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C541060;
  result[1] = v3;
  return result;
}

uint64_t sub_20C69BDEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C541060;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C69BE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_20C69BE1C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5410D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C69BE58()
{
  return &unk_24C5410D0;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::~UsdUtilsUsdStageStatsKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  void **v52;

  v52 = (void **)((char *)this + 136);
  sub_20BEEB2B8(&v52);
  v2 = *((_QWORD *)this + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 15);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 14);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 13);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 12);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 11);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 10);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 9);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 8);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 7);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 6);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 5);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 4);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 3);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 2);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 1);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v50 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
}

pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::UsdUtilsUsdStageStatsKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v64 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "approxMemoryInMb", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v64, "totalPrimCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "modelCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "instancedModelCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "assetCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "prototypeCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "totalInstanceCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "usedLayerCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "primary", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "prototypes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "primCounts", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "activePrimCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "inactivePrimCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "pureOverCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "instanceCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "primCountsByType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "untyped", 0);
  v2 = *(_QWORD *)this;
  v65 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v64;
  v66 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v67 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v68 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v69 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v70 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v71 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v72 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v73 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v74 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v75 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v76 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v77 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v78 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v79 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v80 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v81 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  v53 = operator new(0x88uLL);
  v54 = 0;
  *((_QWORD *)this + 17) = v53;
  *((_QWORD *)this + 18) = v53;
  *((_QWORD *)this + 19) = v53 + 17;
  do
  {
    v55 = *(&v65 + v54);
    *v53 = v55;
    if ((v55 & 7) != 0)
    {
      v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 2, v56));
      if ((v57 & 1) == 0)
        *v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v54;
    ++v53;
  }
  while (v54 != 17);
  v58 = &v82;
  *((_QWORD *)this + 18) = v53;
  do
  {
    v60 = *--v58;
    v59 = v60;
    if ((v60 & 7) != 0)
    {
      v61 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stlxr(v62 - 2, v61));
    }
  }
  while (v58 != &v65);
  return this;
}

void sub_20C69C6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, void **a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;

  sub_20BEEB2B8(&a18);
  v47 = (char *)&a37;
  while (1)
  {
    v49 = *((_QWORD *)v47 - 1);
    v47 -= 8;
    v48 = v49;
    if ((v49 & 7) != 0)
    {
      v50 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if (v47 == &a20)
    {
      if ((*v44 & 7) != 0)
      {
        v52 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v43 & 7) != 0)
      {
        v54 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v42 & 7) != 0)
      {
        v56 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v41 & 7) != 0)
      {
        v58 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v40 & 7) != 0)
      {
        v60 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v39 & 7) != 0)
      {
        v62 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v38 & 7) != 0)
      {
        v64 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v46 & 7) != 0)
      {
        v66 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v45 & 7) != 0)
      {
        v68 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a11 & 7) != 0)
      {
        v70 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*a12 & 7) != 0)
      {
        v72 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a13 & 7) != 0)
      {
        v74 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a14 & 7) != 0)
      {
        v76 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a15 & 7) != 0)
      {
        v78 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a16 & 7) != 0)
      {
        v80 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a17 & 7) != 0)
      {
        v82 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v37 & 7) != 0)
      {
        v84 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C69C9BC()
{
  JUMPOUT(0x20C69C898);
}

void sub_20C69C9C4()
{
  JUMPOUT(0x20C69C8BCLL);
}

void sub_20C69C9CC()
{
  JUMPOUT(0x20C69C8E0);
}

void sub_20C69C9D4()
{
  JUMPOUT(0x20C69C904);
}

void sub_20C69C9DC()
{
  JUMPOUT(0x20C69C928);
}

void sub_20C69C9E4()
{
  JUMPOUT(0x20C69C94CLL);
}

void sub_20C69C9EC()
{
  JUMPOUT(0x20C69C970);
}

void sub_20C69C9F4()
{
  JUMPOUT(0x20C69C994);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdUtilsComputeUsdStageStats@<X0>(pxrInternal__aapl__pxrReserved__::TfMallocTag *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  double v7;
  pxrInternal__aapl__pxrReserved__::TfMallocTag *v8;
  unsigned __int8 v9;
  unint64_t TotalBytes;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v11;
  uint64_t *EmptyString;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__ *v24;

  v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  v7 = 0.0;
  if ((v6 & 1) != 0)
    v7 = (double)pxrInternal__aapl__pxrReserved__::TfMallocTag::GetTotalBytes(a1) * 0.000000953674316;
  v8 = (pxrInternal__aapl__pxrReserved__::TfMallocTag *)pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)a1, 0, &v24);
  if (v24)
  {
    v9 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if ((v9 & 1) != 0)
    {
      TotalBytes = pxrInternal__aapl__pxrReserved__::TfMallocTag::GetTotalBytes(v8);
      v11 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      if (!v11)
        v11 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      if ((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      v13 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)EmptyString);
      v14 = v13;
      v15 = v13[1];
      if (v15)
        v16 = (v13[1] & 3) == 3;
      else
        v16 = 1;
      if (!v16)
        (*(void (**)(uint64_t *))((v15 & 0xFFFFFFFFFFFFFFF8) + 32))(v13);
      v14[1] = (uint64_t)&unk_24C52064B;
      *(double *)v14 = (double)TotalBytes * 0.000000953674316 - v7;
    }
    sub_20C696CA8(&v22, (uint64_t *)&v24);
    pxrInternal__aapl__pxrReserved__::UsdUtilsComputeUsdStageStats(&v22, a2);
    v17 = v23;
    if (v23)
    {
      v18 = (unsigned int *)(v23 + 8);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    *a3 = v24;
    v24 = 0;
  }
  else
  {
    *a3 = 0;
  }
  return sub_20C455C74(&v24);
}

void sub_20C69CB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unsigned int *a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    v5 = a4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)a4 + 8))(a4);
  }
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComputeUsdStageStats(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  char *v5;
  uint64_t v6;
  void **v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  uint64_t (*v9)(uint64_t *);
  char v10;
  _BOOL8 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v17;
  uint64_t v18;
  uint64_t *EmptyString;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  pxrInternal__aapl__pxrReserved__::UsdStage *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v66;
  uint64_t *v67;
  uint64_t *v68;
  pxrInternal__aapl__pxrReserved__::TfToken *v69;
  _QWORD *i;
  uint64_t v71;
  uint64_t *v72;
  pxrInternal__aapl__pxrReserved__::TfToken *v73;
  uint64_t v74;
  BOOL v75;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v76;
  uint64_t *v77;
  uint64_t *v78;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v146;
  uint64_t *v147;
  uint64_t *v148;
  pxrInternal__aapl__pxrReserved__::TfToken *v149;
  _QWORD *j;
  uint64_t v151;
  uint64_t *v152;
  pxrInternal__aapl__pxrReserved__::TfToken *v153;
  uint64_t v154;
  BOOL v155;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v156;
  uint64_t *v157;
  uint64_t *v158;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v164;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v165;
  uint64_t v166;
  pxrInternal__aapl__pxrReserved__ *v167;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v168;
  int v169;
  int v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  int v187;
  __int16 v188;
  void **v189;
  uint64_t v190;
  int v191;
  _DWORD v192[9];
  char **v193;
  char *v194[2];
  __int128 v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[2];

  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v4, 1, v5, &v189);
  v7 = v189;
  v6 = v190;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v8, (uint64_t *)&v195);
  v9 = sub_20BFD2F78(&v195);
  v11 = (v10 & 1 | (unint64_t)v9) != 0;
  v12 = *((_QWORD *)&v195 + 1);
  if (*((_QWORD *)&v195 + 1))
  {
    v13 = (unsigned int *)(*((_QWORD *)&v195 + 1) + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v16 = v6 - (_QWORD)v7;
  *(_QWORD *)&v195 = &v189;
  sub_20BEB4844((void ***)&v195);
  v17 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v17)
    v17 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  v18 = v16 >> 4;
  if ((*((_QWORD *)v17 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
  v20 = v18 - v11;
  v21 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)EmptyString);
  v22 = v21;
  v23 = v21[1];
  if (v23)
    v24 = (v21[1] & 3) == 3;
  else
    v24 = 1;
  if (!v24)
    (*(void (**)(uint64_t *))((v23 & 0xFFFFFFFFFFFFFFF8) + 32))(v21);
  *v22 = v20;
  v22[1] = (uint64_t)&unk_24C5202B3;
  v205 = 0;
  v206[0] = 0;
  v203 = 0;
  v204 = 0;
  v201 = 0;
  v202 = 0;
  v199 = 0;
  v200 = 0;
  v198 = 0;
  v195 = 0u;
  v196 = 0u;
  v197 = 1065353216;
  v194[0] = 0;
  v194[1] = 0;
  v193 = v194;
  v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll(v25, (uint64_t)&v189);
  v165 = a2;
  sub_20C37ECB8((uint64_t *)&v189, (uint64_t)&v172);
  *(_QWORD *)&v185 = v190;
  *((_QWORD *)&v185 + 1) = &v189;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v186);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v186 + 1);
  v187 = 0;
  v188 = 0;
  while (v172 != v185
       || (_QWORD)v173 != v186
       || DWORD2(v173) != v187
       || BYTE12(v173) != v188
       || BYTE13(v173) != HIBYTE(v188))
  {
    sub_20C37ED84((uint64_t)&v172, (uint64_t)&v182);
    sub_20C69DD64((pxrInternal__aapl__pxrReserved__ **)&v182, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v193, v206, &v202, &v205, &v204, &v203, &v201, &v200, &v199, &v198, &v195);
    if ((v184 & 7) != 0)
    {
      v26 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v183 + 1);
    sub_20BFD265C(&v183);
    if (*((_QWORD *)&v182 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v182 + 1));
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v172);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v186 + 1);
  sub_20BFD265C(&v186);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v173 + 1);
  sub_20BFD265C(&v173);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v192);
  sub_20BFD265C(&v191);
  v28 = v198;
  v29 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes(v29, &v180);
  v30 = v180;
  v166 = v181;
  v31 = v181 - v180;
  if (v181 != v180)
  {
    v164 = v181 - v180;
    v178 = 0;
    v179 = 0;
    v176 = 0;
    v177 = 0;
    v175 = 0;
    v172 = 0u;
    v173 = 0u;
    v174 = 1065353216;
    do
    {
      sub_20C549A40((uint64_t)&v189, v30);
      sub_20C37ECB8((uint64_t *)&v189, (uint64_t)&v185);
      *(_QWORD *)&v182 = v190;
      *((_QWORD *)&v182 + 1) = &v189;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v183 + 1);
      LODWORD(v184) = 0;
      WORD2(v184) = 0;
      while (v185 != v182
           || v186 != v183
           || v187 != (_DWORD)v184
           || v188 != BYTE4(v184)
           || HIBYTE(v188) != BYTE5(v184))
      {
        sub_20C37ED84((uint64_t)&v185, (uint64_t)&v167);
        sub_20C69DD64(&v167, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v193, v206, &v179, &v205, &v204, &v203, &v178, &v177, &v176, &v175, &v172);
        if ((v171 & 7) != 0)
        {
          v32 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v170);
        sub_20BFD265C(&v169);
        if (v168)
          sub_20C35C614(v168);
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v185);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v183 + 1);
      sub_20BFD265C(&v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v186 + 1);
      sub_20BFD265C(&v186);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v192);
      sub_20BFD265C(&v191);
      v30 += 32;
    }
    while (v30 != v166);
    v34 = v175;
    v189 = 0;
    *(_QWORD *)&v185 = 0;
    v35 = v179;
    v36 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    v31 = v164;
    if (!v36)
      v36 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v36 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      v37 = (uint64_t *)((*((_QWORD *)v36 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
    v38 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v185, (__int128 *)v37);
    v39 = v38;
    v40 = v38[1];
    if (v40)
      v41 = (v38[1] & 3) == 3;
    else
      v41 = 1;
    if (!v41)
      (*(void (**)(uint64_t *))((v40 & 0xFFFFFFFFFFFFFFF8) + 32))(v38);
    *v39 = v35;
    v39[1] = (uint64_t)&unk_24C5202B3;
    v42 = v178;
    v43 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v43)
      v43 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v43 + 11) & 0xFFFFFFFFFFFFFFF8) != 0)
      v44 = (uint64_t *)((*((_QWORD *)v43 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
    v45 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v185, (__int128 *)v44);
    v46 = v45;
    v47 = v45[1];
    if (v47 && (v45[1] & 3) != 3)
      (*(void (**)(uint64_t *))((v47 & 0xFFFFFFFFFFFFFFF8) + 32))(v45);
    *v46 = v42;
    v46[1] = (uint64_t)&unk_24C5202B3;
    v48 = v177;
    v49 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v49)
      v49 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v49 + 12) & 0xFFFFFFFFFFFFFFF8) != 0)
      v50 = (uint64_t *)((*((_QWORD *)v49 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v50 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v49);
    v51 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v185, (__int128 *)v50);
    v52 = v51;
    v53 = v51[1];
    if (v53 && (v51[1] & 3) != 3)
      (*(void (**)(uint64_t *))((v53 & 0xFFFFFFFFFFFFFFF8) + 32))(v51);
    *v52 = v48;
    v52[1] = (uint64_t)&unk_24C5202B3;
    v54 = v176;
    v55 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v55)
      v55 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v55 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
      v56 = (uint64_t *)((*((_QWORD *)v55 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v56 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v55);
    v57 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v185, (__int128 *)v56);
    v58 = v57;
    v59 = v57[1];
    if (v59 && (v57[1] & 3) != 3)
      (*(void (**)(uint64_t *))((v59 & 0xFFFFFFFFFFFFFFF8) + 32))(v57);
    *v58 = v54;
    v58[1] = (uint64_t)&unk_24C5202B3;
    v60 = v175;
    v61 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v61)
      v61 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v61 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
      v62 = (uint64_t *)((*((_QWORD *)v61 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v62 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v61);
    v63 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v185, (__int128 *)v62);
    v64 = v63;
    v65 = v63[1];
    if (v65 && (v63[1] & 3) != 3)
      (*(void (**)(uint64_t *))((v65 & 0xFFFFFFFFFFFFFFF8) + 32))(v63);
    *v64 = v60;
    v64[1] = (uint64_t)&unk_24C5202B3;
    v66 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v66)
      v66 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v66 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
      v67 = (uint64_t *)((*((_QWORD *)v66 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v67 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
    v68 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v189, (__int128 *)v67);
    v69 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF4D0C4((uint64_t)v68, (const void ****)&v185);
    *(_QWORD *)&v182 = 0;
    for (i = (_QWORD *)v173; i; i = (_QWORD *)*i)
    {
      v71 = i[3];
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0)
        v72 = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v72 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v69);
      v69 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v182, (__int128 *)v72);
      v73 = v69;
      v74 = *((_QWORD *)v69 + 1);
      if (v74)
        v75 = (*((_QWORD *)v69 + 1) & 3) == 3;
      else
        v75 = 1;
      if (!v75)
        v69 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v74 & 0xFFFFFFFFFFFFFFF8) + 32))(v69);
      *(_QWORD *)v73 = v71;
      *((_QWORD *)v73 + 1) = &unk_24C5202B3;
    }
    v76 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    a2 = v165;
    if (!v76)
      v76 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v76 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
      v77 = (uint64_t *)((*((_QWORD *)v76 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v77 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v76);
    v78 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v189, (__int128 *)v77);
    sub_20BF4D0C4((uint64_t)v78, (const void ****)&v182);
    v79 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v79)
      v79 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if ((*((_QWORD *)v79 + 9) & 0xFFFFFFFFFFFFFFF8) != 0)
      v80 = (uint64_t *)((*((_QWORD *)v79 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v80 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v79);
    v81 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v165, (__int128 *)v80);
    sub_20BF4D0C4((uint64_t)v81, (const void ****)&v189);
    v28 += v34;
    sub_20BF49F14((_QWORD ***)&v182, 0);
    sub_20BF49F14((_QWORD ***)&v185, 0);
    sub_20BF49F14((_QWORD ***)&v189, 0);
    sub_20BF20BCC((uint64_t)&v172);
  }
  v82 = v206[0];
  v83 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v83)
    v83 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v83 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v84 = (uint64_t *)((*((_QWORD *)v83 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v84 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v83);
  v85 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v84);
  v86 = v85;
  v87 = v85[1];
  if (v87 && (v85[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v87 & 0xFFFFFFFFFFFFFFF8) + 32))(v85);
  *v86 = v82;
  v86[1] = (uint64_t)&unk_24C5202B3;
  v88 = v205;
  v89 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v89)
    v89 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v89 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v90 = (uint64_t *)((*((_QWORD *)v89 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v90 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v89);
  v91 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v90);
  v92 = v91;
  v93 = v91[1];
  if (v93 && (v91[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v93 & 0xFFFFFFFFFFFFFFF8) + 32))(v91);
  *v92 = v88;
  v92[1] = (uint64_t)&unk_24C5202B3;
  v94 = v204;
  v95 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v95)
    v95 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v95 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    v96 = (uint64_t *)((*((_QWORD *)v95 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v96 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v95);
  v97 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v96);
  v98 = v97;
  v99 = v97[1];
  if (v99 && (v97[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v99 & 0xFFFFFFFFFFFFFFF8) + 32))(v97);
  *v98 = v94;
  v98[1] = (uint64_t)&unk_24C5202B3;
  v100 = v203;
  v101 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v101)
    v101 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v101 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
    v102 = (uint64_t *)((*((_QWORD *)v101 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v102 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v101);
  v103 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v102);
  v104 = v103;
  v105 = v103[1];
  if (v105 && (v103[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v105 & 0xFFFFFFFFFFFFFFF8) + 32))(v103);
  *v104 = v100;
  v104[1] = (uint64_t)&unk_24C5202B3;
  v106 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v106)
    v106 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v106 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
    v107 = (uint64_t *)((*((_QWORD *)v106 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v107 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v106);
  v108 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v107);
  v109 = v108;
  v110 = v108[1];
  if (v110 && (v108[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v110 & 0xFFFFFFFFFFFFFFF8) + 32))(v108);
  *v109 = v31 >> 5;
  v109[1] = (uint64_t)&unk_24C5202B3;
  v111 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v111)
    v111 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v111 + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
    v112 = (uint64_t *)((*((_QWORD *)v111 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v112 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v111);
  v113 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v112);
  v114 = v113;
  v115 = v113[1];
  if (v115 && (v113[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v115 & 0xFFFFFFFFFFFFFFF8) + 32))(v113);
  *v114 = v28;
  v114[1] = (uint64_t)&unk_24C5202B3;
  v189 = 0;
  *(_QWORD *)&v172 = 0;
  v116 = v202;
  v117 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v117)
    v117 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v117 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v118 = (uint64_t *)((*((_QWORD *)v117 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v118 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v117);
  v119 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v172, (__int128 *)v118);
  v120 = v119;
  v121 = v119[1];
  if (v121 && (v119[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v121 & 0xFFFFFFFFFFFFFFF8) + 32))(v119);
  *v120 = v116;
  v120[1] = (uint64_t)&unk_24C5202B3;
  v122 = v201;
  v123 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v123)
    v123 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v123 + 11) & 0xFFFFFFFFFFFFFFF8) != 0)
    v124 = (uint64_t *)((*((_QWORD *)v123 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v124 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v123);
  v125 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v172, (__int128 *)v124);
  v126 = v125;
  v127 = v125[1];
  if (v127 && (v125[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v127 & 0xFFFFFFFFFFFFFFF8) + 32))(v125);
  *v126 = v122;
  v126[1] = (uint64_t)&unk_24C5202B3;
  v128 = v200;
  v129 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v129)
    v129 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v129 + 12) & 0xFFFFFFFFFFFFFFF8) != 0)
    v130 = (uint64_t *)((*((_QWORD *)v129 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v130 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v129);
  v131 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v172, (__int128 *)v130);
  v132 = v131;
  v133 = v131[1];
  if (v133 && (v131[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v133 & 0xFFFFFFFFFFFFFFF8) + 32))(v131);
  *v132 = v128;
  v132[1] = (uint64_t)&unk_24C5202B3;
  v134 = v199;
  v135 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v135)
    v135 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v135 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
    v136 = (uint64_t *)((*((_QWORD *)v135 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v136 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v135);
  v137 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v172, (__int128 *)v136);
  v138 = v137;
  v139 = v137[1];
  if (v139 && (v137[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v139 & 0xFFFFFFFFFFFFFFF8) + 32))(v137);
  *v138 = v134;
  v138[1] = (uint64_t)&unk_24C5202B3;
  v140 = v198;
  v141 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v141)
    v141 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v141 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
    v142 = (uint64_t *)((*((_QWORD *)v141 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v142 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v141);
  v143 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v172, (__int128 *)v142);
  v144 = v143;
  v145 = v143[1];
  if (v145 && (v143[1] & 3) != 3)
    (*(void (**)(uint64_t *))((v145 & 0xFFFFFFFFFFFFFFF8) + 32))(v143);
  *v144 = v140;
  v144[1] = (uint64_t)&unk_24C5202B3;
  v146 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v146)
    v146 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v146 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    v147 = (uint64_t *)((*((_QWORD *)v146 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v147 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v146);
  v148 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v189, (__int128 *)v147);
  v149 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF4D0C4((uint64_t)v148, (const void ****)&v172);
  *(_QWORD *)&v185 = 0;
  for (j = (_QWORD *)v196; j; j = (_QWORD *)*j)
  {
    v151 = j[3];
    if ((j[2] & 0xFFFFFFFFFFFFFFF8) != 0)
      v152 = (uint64_t *)((j[2] & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v152 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v149);
    v149 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v185, (__int128 *)v152);
    v153 = v149;
    v154 = *((_QWORD *)v149 + 1);
    if (v154)
      v155 = (*((_QWORD *)v149 + 1) & 3) == 3;
    else
      v155 = 1;
    if (!v155)
      v149 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v154 & 0xFFFFFFFFFFFFFFF8) + 32))(v149);
    *(_QWORD *)v153 = v151;
    *((_QWORD *)v153 + 1) = &unk_24C5202B3;
  }
  v156 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v156)
    v156 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v156 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
    v157 = (uint64_t *)((*((_QWORD *)v156 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v157 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v156);
  v158 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v189, (__int128 *)v157);
  sub_20BF4D0C4((uint64_t)v158, (const void ****)&v185);
  v159 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v159)
    v159 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if ((*((_QWORD *)v159 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
    v160 = (uint64_t *)((*((_QWORD *)v159 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v160 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v159);
  v161 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v160);
  sub_20BF4D0C4((uint64_t)v161, (const void ****)&v189);
  v162 = v206[0];
  sub_20BF49F14((_QWORD ***)&v185, 0);
  sub_20BF49F14((_QWORD ***)&v172, 0);
  sub_20BF49F14((_QWORD ***)&v189, 0);
  v189 = (void **)&v180;
  sub_20C45FC78(&v189);
  sub_20BDECAB8((uint64_t)&v193, v194[0]);
  sub_20BF20BCC((uint64_t)&v195);
  return v162;
}

void sub_20C69DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  sub_20C37EDFC((uint64_t)&a47);
  sub_20BDECAB8(v47 - 232, *(char **)(v47 - 224));
  sub_20BF20BCC(v47 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69DD64(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  const pxrInternal__aapl__pxrReserved__::TfToken *v23;
  unsigned int **v24;
  _BOOL4 IsA;
  int AssetName;
  unsigned int *v27;
  unsigned int v28;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  pxrInternal__aapl__pxrReserved__ *v33;
  pxrInternal__aapl__pxrReserved__ *v34;
  std::string::size_type *v35;
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v36;
  std::string::size_type v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  std::string __p;
  uint64_t *v43[3];
  uint64_t v44;
  uint64_t v45;

  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, a2);
  if ((_DWORD)result)
  {
    ++*a3;
    ++*a4;
    if (sub_20C544B9C((uint64_t)a1, v21))
    {
      v45 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
      v44 = 0;
      v43[0] = (uint64_t *)off_24C538548;
      if (pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetKind((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v43, (pxrInternal__aapl__pxrReserved__::TfToken *)&v45))
      {
        v24 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
        if (!v24)
          v24 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
        IsA = pxrInternal__aapl__pxrReserved__::KindRegistry::IsA((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 1), v23);
        pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v43);
        if (IsA)
        {
          ++*a5;
          if (sub_20C452420((uint64_t)a1, v22))
            ++*a6;
          memset(&__p, 0, sizeof(__p));
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
          v44 = 0;
          v43[0] = (uint64_t *)off_24C538548;
          AssetName = pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetName((uint64_t)v43, &__p);
          pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v43);
          if (AssetName)
          {
            sub_20BE74FC0((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if ((v22 & 1) != 0)
              ++*a7;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v43);
      }
      if ((v45 & 7) != 0)
      {
        v27 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
    }
    *a11 += sub_20C452420((uint64_t)a1, v22);
    *a8 += sub_20C436BD0((uint64_t)a1, v29);
    *a9 += sub_20C436BD0((uint64_t)a1, v30) ^ 1;
    *a10 += sub_20C69E12C((uint64_t)a1, v31) ^ 1;
    v33 = a1[1];
    if (!v33 || (*((_BYTE *)v33 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], v32);
    if (**((_QWORD **)v33 + 3))
    {
      v34 = a1[1];
      if (!v34 || (*((_BYTE *)v34 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v34, v32);
      v35 = (std::string::size_type *)*((_QWORD *)v34 + 3);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      if (!v36)
        v36 = sub_20C69E164(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      v35 = (std::string::size_type *)((char *)v36 + 128);
    }
    v37 = *v35;
    __p.__r_.__value_.__r.__words[0] = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    }
    if (!sub_20BF2B388(a12, &__p))
    {
      v43[0] = (uint64_t *)&__p;
      sub_20BF2B45C((uint64_t)a12, &__p, (uint64_t)&unk_20CAC184C, v43)[3] = 0;
    }
    v43[0] = (uint64_t *)&__p;
    result = (uint64_t)sub_20BF2B45C((uint64_t)a12, &__p, (uint64_t)&unk_20CAC184C, v43);
    ++*(_QWORD *)(result + 24);
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v40 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
  }
  return result;
}

void sub_20C69E094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unsigned int *v20;
  unsigned int v21;

  if (a14 < 0)
    operator delete(__p);
  if ((a19 & 7) != 0)
  {
    v20 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C69E12C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
    v3 = *(_QWORD *)(v2 + 56);
  }
  return (v3 >> 7) & 1;
}

pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *sub_20C69E164(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *result;
  void *v4;

  result = sub_20C69E1AC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::~UsdUtilsUsdStageStatsKeys_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *sub_20C69E1AC()
{
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)operator new(0xA0uLL);
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::UsdUtilsUsdStageStatsKeys_StaticTokenType(v0);
  return v0;
}

void sub_20C69E1D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsLocalizeAsset(__int128 *a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  const char *v13;
  void *__p[2];
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  char v21;
  char v22;
  std::string v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)a2, 0)
    && (pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)a2, 0) & 1) == 0)
  {
    v19[0] = "usdUtils/localizeAsset.cpp";
    v19[1] = "UsdUtilsLocalizeAsset";
    v20[0] = 130;
    v20[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsLocalizeAsset(const SdfAssetPath &, const std::string &, boo"
             "l, std::function<UsdUtilsProcessingFunc>)";
    v21 = 0;
    if (*(char *)(a2 + 23) >= 0)
      v13 = (const char *)a2;
    else
      v13 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to localize to non directory path: %s", v13);
    return 0;
  }
  sub_20C69E4A8((uint64_t)v19);
  v19[0] = &unk_24C541100;
  memset(&v23, 0, sizeof(v23));
  v22 = a3;
  sub_20BE9E6E8((uint64_t)v17, a4);
  sub_20C69EB44(v20, (uint64_t)v17);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v10 = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build((pxrInternal__aapl__pxrReserved__ *)v19, a1, (uint64_t)__p);
  v11 = v10;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_10;
LABEL_12:
    v12 = 0;
    goto LABEL_13;
  }
  if (!v10)
    goto LABEL_12;
LABEL_10:
  std::string::operator=(&v23, (const std::string *)a2);
  v12 = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write((uint64_t)v19, &v23);
LABEL_13:
  v19[0] = &unk_24C541100;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  sub_20C69ED50((uint64_t)v19);
  return v12;
}

void sub_20C69E3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20C69E468((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69E438(uint64_t a1, const std::string *a2)
{
  const std::string *v3;

  v3 = (const std::string *)(a1 + 512);
  std::string::operator=((std::string *)(a1 + 512), a2);
  return pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(a1, v3);
}

uint64_t sub_20C69E468(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C541100;
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  return sub_20C69ED50(a1);
}

uint64_t sub_20C69E4A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C540408;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v2 = operator new(0x20uLL);
  *v2 = &unk_24C541148;
  v2[1] = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessDependency;
  v2[2] = 0;
  v2[3] = a1;
  v7 = v2;
  sub_20C699574(a1 + 96, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  return a1;
}

void sub_20C69E5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v14;
  _QWORD **v15;
  char *v16;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (*(char *)(v13 + 95) < 0)
    operator delete(*(void **)(v13 + 72));
  if (*(char *)(v13 + 71) < 0)
    operator delete(*(void **)(v13 + 48));
  v20 = *v15;
  if (*v15 == (_QWORD *)(v13 + 16))
  {
    v21 = 4;
    v20 = (_QWORD *)(v13 + 16);
  }
  else
  {
    if (!v20)
      goto LABEL_15;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_15:
  sub_20C103234(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69E670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__ *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t *Resolver;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  void *v32;
  uint64_t v33;
  unsigned __int8 v34;
  void *v35;
  char v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;
  uint64_t v42;

  v3 = (pxrInternal__aapl__pxrReserved__ *)MEMORY[0x24BDAC7A8](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v8 = v3;
  v42 = *MEMORY[0x24BDAC8D0];
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v3);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)v8 + 64, v5, &v35);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset((uint64_t)Resolver);
  v11 = v34;
  if ((v34 & 0x80u) != 0)
    v11 = v33;
  if (!v11)
  {
    v37 = "usdUtils/localizeAsset.cpp";
    v38 = "_WriteToPackage";
    v39 = 75;
    v40 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    v41 = 0;
    if (*(char *)(v7 + 23) >= 0)
      v17 = v7;
    else
      v17 = *(_QWORD *)v7;
    goto LABEL_21;
  }
  v12 = v31;
  if ((v31 & 0x80u) != 0)
    v12 = v30;
  if (!v12)
  {
    v37 = "usdUtils/localizeAsset.cpp";
    v38 = "_WriteToPackage";
    v39 = 81;
    v40 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    v41 = 0;
    if (*(char *)(v5 + 23) >= 0)
      v17 = v5;
    else
      v17 = *(_QWORD *)v5;
LABEL_21:
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)"Failed to resolve source path: %s", v10, v17);
    v16 = 0;
    goto LABEL_41;
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite((uint64_t)Resolver);
  if (v27)
  {
    if (v25)
    {
      for (i = (*(uint64_t (**)(void))(*(_QWORD *)v27 + 16))(); i; i -= v15)
      {
        if (i >= 0x1000)
          v15 = 4096;
        else
          v15 = i;
        (*(void (**)(uint64_t, char **, uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, &v37, v15, 0);
        (*(void (**)(uint64_t, char **, uint64_t, _QWORD))(*(_QWORD *)v25 + 24))(v25, &v37, v15, 0);
      }
      v16 = 1;
      goto LABEL_31;
    }
    v37 = "usdUtils/localizeAsset.cpp";
    v38 = "_WriteToPackage";
    v39 = 96;
    v40 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    v41 = 0;
    if (*(char *)(v5 + 23) >= 0)
      v19 = v5;
    else
      v19 = *(_QWORD *)v5;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)"Failed to open destination asset: %s", v13, v19);
  }
  else
  {
    v37 = "usdUtils/localizeAsset.cpp";
    v38 = "_WriteToPackage";
    v39 = 91;
    v40 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    v41 = 0;
    if (*(char *)(v7 + 23) >= 0)
      v18 = v7;
    else
      v18 = *(_QWORD *)v7;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)"Failed to open source asset: %s", v13, v18);
  }
  v16 = 0;
LABEL_31:
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)())v26->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)())v28->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_41:
  if ((char)v31 < 0)
    operator delete(__p);
  if ((char)v34 < 0)
    operator delete(v32);
  if (v36 < 0)
    operator delete(v35);
  return v16;
}

void sub_20C69E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

__n128 sub_20C69EA6C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C541148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C69EAB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C541148;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C69EADC(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, _QWORD);
  _QWORD *v6;

  v4 = a1[2];
  v5 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v6 + v5);
  return v5(v6, a2, a3, *a4);
}

uint64_t sub_20C69EAFC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5411B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C69EB38()
{
  return &unk_24C5411B8;
}

_QWORD *sub_20C69EB44(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20BE9E6E8((uint64_t)v6, a2);
  sub_20C69EBDC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_20C69EBDC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C69ED44(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t sub_20C69ED50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24C540408;
  sub_20C69EE3C(a1 + 472);
  v5 = (void **)(a1 + 440);
  sub_20BE93030(&v5);
  sub_20BDE9D48(a1 + 416, *(_QWORD **)(a1 + 424));
  v5 = (void **)(a1 + 392);
  sub_20BDE5038(&v5);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  sub_20C6995FC(a1 + 96);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 16))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 16);
    goto LABEL_13;
  }
  if (v2)
  {
    v3 = 5;
LABEL_13:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

uint64_t sub_20C69EE3C(uint64_t a1)
{
  void *v2;

  sub_20C2B3034(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C69EE74()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGetAlphaAttributeNameForColor(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *EmptyString;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  sub_20BDDC0E4(&v10, "_A");
  v5 = *((char *)EmptyString + 23);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)EmptyString;
  else
    v6 = (const std::string::value_type *)*EmptyString;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)EmptyString + 23);
  else
    v7 = EmptyString[1];
  v8 = std::string::insert(&v10, 0, v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v12 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_20C69EF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGetModelNameFromRootLayer(uint64_t *a1@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v4;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  std::string *RealPath;
  std::string::size_type v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *EmptyString;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  void *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  void *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25[10];
  std::string v26;
  uint64_t v27;
  _BYTE v28[80];
  std::string __str;
  unsigned int *v30;
  char v31;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v4, &v30);
  if (v30)
  {
    *a2 = v30;
    return;
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  RealPath = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v5);
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(RealPath, &__str);
  v7 = std::string::find(&__str, 46, 0);
  std::string::basic_string(&v26, &__str, 0, v7, (std::allocator<char> *)&v31);
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v25);
  if ((v30 & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = (unint64_t)v25[0];
  v30 = v25[0];
  v25[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    v11 = (unint64_t)v30;
    if (!v30)
      goto LABEL_15;
  }
  else if (!v11)
  {
    goto LABEL_15;
  }
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
    EmptyString = (uint64_t *)(v12 + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString))
    goto LABEL_15;
  v14 = sub_20BFCF650(a1);
  v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v14);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30, v25);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::SdfLayer *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v25, &v26);
  LOBYTE(v14) = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v26);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v25 + 1);
  sub_20BFD265C(v25);
  if ((v14 & 1) != 0)
  {
LABEL_15:
    v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(v17, (uint64_t)v25);
    sub_20C10429C((uint64_t)&v26, (uint64_t)v25);
    sub_20BFE6A54((uint64_t)v25);
    while (1)
    {
      if (v26.__r_.__value_.__l.__size_ == v27)
      {
        sub_20BFE6A54((uint64_t)v28);
        goto LABEL_20;
      }
      sub_20C0F8FF8((uint64_t)&v26, v18, v25);
      v19 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v25);
      if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v19) != 2)
        break;
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v25);
      sub_20C0F9084((uint64_t)&v26);
    }
    v21 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v25);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)v21, a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v22, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v25);
    sub_20BFE6A54((uint64_t)v28);
    goto LABEL_22;
  }
LABEL_20:
  *a2 = v30;
  v30 = 0;
LABEL_22:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((v30 & 7) != 0)
  {
    v23 = (unsigned int *)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
}

void sub_20C69F1D4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  sub_20BFD1A18(&a4);
  if (*(char *)(v19 - 49) < 0)
    operator delete(*(void **)(v19 - 72));
  v21 = *(_QWORD *)(v19 - 48);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetRegisteredVariantSets(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1;
  unint64_t result;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_25498BDC0);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_25498BDC0, &v4, (void (__cdecl *)(void *))sub_20C6A0AB8);
  }
  result = atomic_load(&qword_25498BDC8);
  if (!result)
    return sub_20C6A13C8();
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUtilsRegisterVariantSet(uint64_t a1, _DWORD *a2)
{
  uint64_t **v4;

  v4 = (uint64_t **)atomic_load(&qword_25498BDC8);
  if (!v4)
    v4 = (uint64_t **)sub_20C6A13C8();
  return sub_20C6A1438(v4, a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimAtPathWithForwarding(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;

  v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, a2, (uint64_t)&v15);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v15, v6)&& pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v17))
  {
    sub_20C5CC5EC((uint64_t)&v15, a3);
  }
  else
  {
    *(_DWORD *)a3 = v15;
    v7 = v16;
    *(_QWORD *)(a3 + 8) = v16;
    if (v7)
    {
      v8 = (unint64_t *)((char *)v7 + 48);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    sub_20BFD6E54((_DWORD *)(a3 + 16), &v17);
    sub_20BFD6EA4((_DWORD *)(a3 + 20), &v18);
    v10 = v19;
    *(_QWORD *)(a3 + 24) = v19;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if ((v19 & 7) != 0)
  {
    v13 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
}

void sub_20C69F46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsUninstancePrimAtPath(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  pxrInternal__aapl__pxrReserved__ *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  uint64_t v35;

  v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v7)&& pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 16)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, (uint64_t *)&v33);
    if (v33 != v34)
    {
      v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v34 - 8);
      sub_20BFD6F64((uint64_t)&v35, (_DWORD *)v34 - 2);
      v34 = v8;
      v9 = v33;
      if (v33 != v8)
      {
        while (1)
        {
          v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, v9, (uint64_t)&v28);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, v11) & 1) == 0)break;
          v13 = v29;
          if (!v29 || (v14 = *((_QWORD *)v29 + 7), (v14 & 0x800) != 0))
          {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v29, v12);
            v14 = *((_QWORD *)v13 + 7);
          }
          if ((v14 & 0x100) != 0)
            sub_20C69F7A8((uint64_t)&v28, 0);
          if ((v31 & 7) != 0)
          {
            v15 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
          sub_20BFD265C(&v30);
          if (v29)
            sub_20C35C614(v29);
          v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
          if (v9 == v8)
            goto LABEL_23;
        }
        if ((v31 & 7) != 0)
        {
          v17 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
        sub_20BFD265C(&v30);
        if (v29)
          sub_20C35C614(v29);
      }
    }
LABEL_23:
    v19 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v19, a2, (uint64_t)&v28);
    *(_DWORD *)a3 = (_DWORD)v28;
    v20 = v29;
    v29 = 0;
    v21 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v20;
    if (v21)
      sub_20C35C614(v21);
    sub_20BFD3EBC((int *)(a3 + 16), (int *)&v30);
    sub_20BFD3F10((int *)(a3 + 20), (int *)&v30 + 1);
    if (&v28 == (const pxrInternal__aapl__pxrReserved__::SdfPath ***)a3)
    {
      if ((v31 & 7) != 0)
      {
        v25 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    else
    {
      v22 = *(_QWORD *)(a3 + 24);
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      *(_QWORD *)(a3 + 24) = v31;
      v31 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
    sub_20BFD265C(&v30);
    if (v29)
      sub_20C35C614(v29);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v27))
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 16)))
      {
        v28 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)"usdUtils/pipeline.cpp";
        v29 = (pxrInternal__aapl__pxrReserved__ *)"UsdUtilsUninstancePrimAtPath";
        v30 = 288;
        v31 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::UsdUtilsUninstancePrimAtPath(const UsdStagePtr"
                                " &, const SdfPath &)";
        v32 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v28, "!p || !p.IsInstanceProxy()", 0);
      }
    }
    v28 = &v33;
    sub_20BFD6F90((void ***)&v28);
  }
}

void sub_20C69F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  a18 = (void **)&a15;
  sub_20BFD6F90(&a18);
  sub_20C35C2E0(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C69F7A8(uint64_t a1, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;

  v7 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369640(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 200), (uint64_t (**)(_QWORD, uint64_t))&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimaryUVSetName(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_20C69F864() + 72;
}

unint64_t sub_20C69F864()
{
  unint64_t *v0;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  void ***v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v0 = (unint64_t *)atomic_load(&qword_25498BDD0);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0x68uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "UsdUtilsPipeline", 0);
    v71 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "MaterialsScopeName", 0);
    v70 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "PrimaryCameraName", 0);
    v2 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "ProvidesRegisteredVariantSetsFromPlugin", 0);
    v3 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "RegisteredVariantSets", 0);
    v4 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "selectionExportPolicy", 0);
    v5 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "Looks", 0);
    v6 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "main_cam", 0);
    v7 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "pref", 0);
    v8 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "st", 0);
    v9 = *v0;
    v72 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v72 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *v71;
    v73 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *v70;
    v74 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v74 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *v2;
    v75 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v75 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = *v3;
    v76 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v76 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = *v4;
    v77 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v77 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = *v5;
    v78 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v78 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = *v6;
    v79 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v79 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = *v7;
    v80 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        v80 &= 0xFFFFFFFFFFFFFFF8;
    }
    v36 = *v8;
    v81 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 2, v37));
      if ((v38 & 1) == 0)
        v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[10] = 0;
    v0[11] = 0;
    v0[12] = 0;
    v39 = operator new(0x50uLL);
    v40 = 0;
    v0[10] = (unint64_t)v39;
    v0[11] = (unint64_t)v39;
    v0[12] = (unint64_t)(v39 + 10);
    do
    {
      v41 = *(&v72 + v40);
      *v39 = v41;
      if ((v41 & 7) != 0)
      {
        v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 2, v42));
        if ((v43 & 1) == 0)
          *v39 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v40;
      ++v39;
    }
    while (v40 != 10);
    v44 = (void ***)&v82;
    v0[11] = (unint64_t)v39;
    do
    {
      v46 = (uint64_t)*--v44;
      v45 = v46;
      if ((v46 & 7) != 0)
      {
        v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
    }
    while (v44 != (void ***)&v72);
    while (!__ldaxr(&qword_25498BDD0))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498BDD0))
        return (unint64_t)v0;
    }
    __clrex();
    v72 = (unint64_t)(v0 + 10);
    sub_20BEEB2B8((void ***)&v72);
    if ((*v8 & 7) != 0)
    {
      v50 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((*v7 & 7) != 0)
    {
      v52 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    if ((*v6 & 7) != 0)
    {
      v54 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if ((*v5 & 7) != 0)
    {
      v56 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if ((*v4 & 7) != 0)
    {
      v58 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if ((*v3 & 7) != 0)
    {
      v60 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    if ((*v2 & 7) != 0)
    {
      v62 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    if ((*v70 & 7) != 0)
    {
      v64 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    if ((*v71 & 7) != 0)
    {
      v66 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    if ((*v0 & 7) != 0)
    {
      v68 = (unsigned int *)(*v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    operator delete(v0);
    return atomic_load(&qword_25498BDD0);
  }
  return (unint64_t)v0;
}

void sub_20C69FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;

  sub_20BEEB2B8(&a12);
  v33 = &a24;
  while (1)
  {
    v35 = *--v33;
    v34 = v35;
    if ((v35 & 7) != 0)
    {
      v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    if (v33 == (uint64_t *)&a14)
    {
      if ((*v31 & 7) != 0)
      {
        v38 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v30 & 7) != 0)
      {
        v40 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v29 & 7) != 0)
      {
        v42 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v28 & 7) != 0)
      {
        v44 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v27 & 7) != 0)
      {
        v46 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v26 & 7) != 0)
      {
        v48 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*v25 & 7) != 0)
      {
        v50 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*a10 & 7) != 0)
      {
        v52 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*a11 & 7) != 0)
      {
        v54 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v24 & 7) != 0)
      {
        v56 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      operator delete(v24);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C69FFE0()
{
  JUMPOUT(0x20C69FFB0);
}

void sub_20C69FFE8()
{
  JUMPOUT(0x20C69FFD0);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrefName(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_20C69F864() + 64;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsGetMaterialsScopeName@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, unsigned int **a2@<X8>)
{
  int v2;
  _BYTE *v4;
  BOOL v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int **v12;

  v2 = (int)this;
  v4 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME);
    v4 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME);
  }
  if (*v4)
    v5 = 0;
  else
    v5 = v2 == 0;
  if (v5)
  {
    v10 = (_QWORD *)sub_20C6A014C();
    v11 = (_QWORD *)(sub_20C69F864() + 8);
    v12 = (unsigned int **)(sub_20C69F864() + 48);
    return sub_20C6A00D0(v10, v11, v12, a2);
  }
  else
  {
    result = (_QWORD *)sub_20C69F864();
    v7 = (unsigned int *)result[6];
    *a2 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *a2 = v8;
    }
  }
  return result;
}

_QWORD *sub_20C6A00D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X8>)
{
  _QWORD *result;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  result = sub_20BF2B2B4(a1, a2);
  if (result)
  {
    v7 = (unsigned int *)result[3];
    *a4 = v7;
    if ((v7 & 7) == 0)
      return result;
    v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
  }
  else
  {
    v10 = *a3;
    *a4 = *a3;
    if ((v10 & 7) == 0)
      return result;
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
  }
  if ((v9 & 1) == 0)
    *a4 = v8;
  return result;
}

unint64_t sub_20C6A014C()
{
  _OWORD *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Instance;
  uint64_t *v22;
  uint64_t *v23;
  const void ***v24;
  const void ***JsObject;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t String;
  __int128 v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  const char *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  const char *v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  const char *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  int v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  const char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  void *v67;
  unint64_t *v68;
  unint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  void *__p[2];
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76[3];
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  const char *v80;
  char v81;
  unint64_t *v82;
  std::__shared_weak_count *v83;
  uint64_t v84[3];
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v0 = (_OWORD *)atomic_load(&qword_25498BDD8);
  if (v0)
    return (unint64_t)v0;
  v0 = operator new(0x28uLL);
  *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  v2 = *(_QWORD *)(sub_20C69F864() + 8);
  *(_QWORD *)&v88 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *(_QWORD *)&v88 = v88 & 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *(_QWORD *)(sub_20C69F864() + 16);
  *((_QWORD *)&v88 + 1) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)&v88 + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v77 = (unint64_t)&v68;
  LOBYTE(v78) = 0;
  v8 = (unint64_t *)operator new(0x10uLL);
  v9 = 0;
  v68 = v8;
  v69 = v8;
  v70 = v8 + 2;
  do
  {
    v10 = *((_QWORD *)&v88 + v9);
    *v8 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        *v8 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v9;
    ++v8;
  }
  while (v9 != 2);
  v13 = &v89;
  v69 = v8;
  do
  {
    v15 = *((_QWORD *)v13 - 1);
    v13 = (__int128 *)((char *)v13 - 8);
    v14 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
  }
  while (v13 != &v88);
  v18 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20C69F864();
  v87 = *(_QWORD *)v18;
  if ((v87 & 7) != 0)
  {
    v19 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v88 = 0u;
  v89 = 0u;
  v90 = 1065353216;
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v18);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v85, Instance);
  v22 = v85;
  v23 = v86;
  if (v85 != v86)
  {
    while (1)
    {
      v24 = (const void ***)sub_20BF444D8(v22);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v24, v84);
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v82);
      if (sub_20C568C48((pxrInternal__aapl__pxrReserved__::TfToken *)v84, &v87, &v82))
      {
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v82))
        {
          JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v82);
          sub_20BF1BE5C(v76, JsObject);
          v27 = v68;
          v26 = v69;
          v28 = v68;
          if (v68 != v69)
          {
            do
            {
              pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v74);
              if (sub_20C568C48((pxrInternal__aapl__pxrReserved__::TfToken *)v76, v27, &v74))
              {
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v74))
                {
                  String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v74);
                  if (*(char *)(String + 23) < 0)
                  {
                    sub_20BDDBFAC(__p, *(void **)String, *(_QWORD *)(String + 8));
                  }
                  else
                  {
                    v30 = *(_OWORD *)String;
                    v73 = *(_QWORD *)(String + 16);
                    *(_OWORD *)__p = v30;
                  }
                  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)__p) & 1) != 0)
                  {
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v71);
                    v35 = *v27;
                    v77 = v35;
                    if ((v35 & 7) != 0)
                    {
                      v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v37 = __ldxr(v36);
                      while (__stxr(v37 + 2, v36));
                      if ((v37 & 1) == 0)
                        v77 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    v78 = v71;
                    v71 = 0;
                    sub_20C358C48((uint64_t)&v88, &v77, (uint64_t *)&v77);
                    if ((v78 & 7) != 0)
                    {
                      v38 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v39 = __ldxr(v38);
                      while (__stlxr(v39 - 2, v38));
                    }
                    if ((v77 & 7) != 0)
                    {
                      v40 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v41 = __ldxr(v40);
                      while (__stlxr(v41 - 2, v40));
                    }
                    if ((v71 & 7) != 0)
                    {
                      v42 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v43 = __ldxr(v42);
                      while (__stlxr(v43 - 2, v42));
                    }
                  }
                  else
                  {
                    v77 = (unint64_t)"usdUtils/pipeline.cpp";
                    v78 = (unint64_t)"_GetPipelineIdentifierTokens";
                    v79 = 362;
                    v80 = "_TokenToTokenMap pxrInternal__aapl__pxrReserved__::_GetPipelineIdentifierTokens(const TfTokenVector &)";
                    v81 = 0;
                    v44 = sub_20BF444D8(v22);
                    v45 = (const char *)(v44 + 8);
                    if (*(char *)(v44 + 31) < 0)
                      v45 = *(const char **)v45;
                    v46 = v87 & 0xFFFFFFFFFFFFFFF8;
                    if ((v87 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v47 = (const char *)(v46 + 16);
                      if (*(char *)(v46 + 39) < 0)
                        v47 = *(const char **)v47;
                    }
                    else
                    {
                      v47 = "";
                    }
                    v50 = *v27 & 0xFFFFFFFFFFFFFFF8;
                    if (v50)
                    {
                      v51 = (const char *)(v50 + 16);
                      if (*(char *)(v50 + 39) < 0)
                        v51 = *(const char **)v51;
                    }
                    else
                    {
                      v51 = "";
                    }
                    v52 = __p;
                    if (v73 < 0)
                      v52 = (void **)__p[0];
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v77, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[%s][%s] was not a valid identifier: \"%s\".", v45, v47, v51, (const char *)v52);
                  }
                  if (SHIBYTE(v73) < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  v77 = (unint64_t)"usdUtils/pipeline.cpp";
                  v78 = (unint64_t)"_GetPipelineIdentifierTokens";
                  v79 = 351;
                  v80 = "_TokenToTokenMap pxrInternal__aapl__pxrReserved__::_GetPipelineIdentifierTokens(const TfTokenVector &)";
                  v81 = 0;
                  v31 = sub_20BF444D8(v22);
                  v32 = (const char *)(v31 + 8);
                  if (*(char *)(v31 + 31) < 0)
                    v32 = *(const char **)v32;
                  v33 = v87 & 0xFFFFFFFFFFFFFFF8;
                  if ((v87 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v34 = (const char *)(v33 + 16);
                    if (*(char *)(v33 + 39) < 0)
                      v34 = *(const char **)v34;
                  }
                  else
                  {
                    v34 = "";
                  }
                  v48 = *v27 & 0xFFFFFFFFFFFFFFF8;
                  if (v48)
                  {
                    v49 = (const char *)(v48 + 16);
                    if (*(char *)(v48 + 39) < 0)
                      v49 = *(const char **)v49;
                  }
                  else
                  {
                    v49 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v77, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[%s][%s] was not a string.", v32, v34, v49);
                }
              }
              v53 = v75;
              if (v75)
              {
                p_shared_owners = (unint64_t *)&v75->__shared_owners_;
                do
                  v55 = __ldaxr(p_shared_owners);
                while (__stlxr(v55 - 1, p_shared_owners));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              ++v27;
            }
            while (v27 != v26);
            v27 = v68;
            v28 = v69;
          }
          v56 = 2 * (*((_QWORD *)&v89 + 1) == v28 - v27);
          sub_20BE78E5C((uint64_t)v76, (_QWORD *)v76[1]);
          goto LABEL_97;
        }
        v77 = (unint64_t)"usdUtils/pipeline.cpp";
        v78 = (unint64_t)"_GetPipelineIdentifierTokens";
        v79 = 334;
        v80 = "_TokenToTokenMap pxrInternal__aapl__pxrReserved__::_GetPipelineIdentifierTokens(const TfTokenVector &)";
        v81 = 0;
        v57 = sub_20BF444D8(v22);
        v58 = (const char *)(v57 + 8);
        if (*(char *)(v57 + 31) < 0)
          v58 = *(const char **)v58;
        v59 = v87 & 0xFFFFFFFFFFFFFFF8;
        if ((v87 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v60 = (const char *)(v59 + 16);
          if (*(char *)(v59 + 39) < 0)
            v60 = *(const char **)v60;
        }
        else
        {
          v60 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v77, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[%s] was not a dictionary.", v58, v60);
      }
      v56 = 3;
LABEL_97:
      v61 = v83;
      if (v83)
      {
        v62 = (unint64_t *)&v83->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      sub_20BE78E5C((uint64_t)v84, (_QWORD *)v84[1]);
      if (v56 == 3 || !v56)
      {
        v22 += 2;
        if (v22 != v23)
          continue;
      }
      break;
    }
  }
  v77 = (unint64_t)&v85;
  sub_20BEB4844((void ***)&v77);
  if ((v87 & 7) != 0)
  {
    v64 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 - 2, v64));
  }
  *((_DWORD *)v0 + 8) = v90;
  sub_20C6A1680(v0, (_QWORD *)v89, 0);
  sub_20BFC9C88((uint64_t)&v88);
  v77 = (unint64_t)&v68;
  sub_20BEEB2B8((void ***)&v77);
  while (!__ldaxr(&qword_25498BDD8))
  {
    if (!__stlxr((unint64_t)v0, &qword_25498BDD8))
      return (unint64_t)v0;
  }
  __clrex();
  v67 = (void *)sub_20BFC9C88((uint64_t)v0);
  operator delete(v67);
  return atomic_load(&qword_25498BDD8);
}

void sub_20C6A0808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36)
{
  uint64_t v36;

  sub_20BFC9C88(v36 - 144);
  a28 = &a13;
  sub_20BEEB2B8((void ***)&a28);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimaryCameraName@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, unsigned int **a2@<X8>)
{
  _QWORD *result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int **v9;

  if ((_DWORD)this)
  {
    result = (_QWORD *)sub_20C69F864();
    v4 = (unsigned int *)result[7];
    *a2 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *a2 = v5;
    }
  }
  else
  {
    v7 = (_QWORD *)sub_20C6A014C();
    v8 = (_QWORD *)(sub_20C69F864() + 16);
    v9 = (unsigned int **)(sub_20C69F864() + 56);
    return sub_20C6A00D0(v7, v8, v9, a2);
  }
  return result;
}

void sub_20C6A0AB8(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Instance;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  const void ***v7;
  _QWORD *v8;
  const void ***JsObject;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  const void ***v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  uint64_t v18;
  const char *v19;
  uint64_t *v20;
  unint64_t String;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v43;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v44;
  uint64_t v45;
  uint64_t *i;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  const void ***v50;
  _QWORD *v51;
  const void ***v52;
  unint64_t v53;
  uint64_t v54;
  const char *v55;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  const char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v69;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v70;
  void *__p[2];
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  std::__shared_weak_count *v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  void **v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  char v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t *v92;

  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v91, Instance);
  v2 = v91;
  v3 = v92;
  while (v2 != v3)
  {
    v4 = v2[1];
    v80 = *v2;
    v81 = v4;
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = (const void ***)sub_20BF444D8(&v80);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v7, &v89);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v77);
    v8 = (_QWORD *)sub_20C69F864();
    if (!sub_20C568C48((pxrInternal__aapl__pxrReserved__::TfToken *)&v89, v8, &v77))
      goto LABEL_53;
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v77))
    {
      v84 = (void **)"usdUtils/pipeline.cpp";
      v85 = "_RegisterVariantSetsFromPlugInfos";
      v86 = 130;
      v87 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
      v88 = 0;
      v31 = sub_20BF444D8(&v80);
      v32 = (const char *)(v31 + 8);
      if (*(char *)(v31 + 31) < 0)
        v32 = *(const char **)v32;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v84, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline] was not a dictionary.", v32);
      goto LABEL_53;
    }
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v77);
    sub_20BF1BE5C(&v82, JsObject);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v75);
    v10 = sub_20C69F864();
    if (sub_20C568C48((pxrInternal__aapl__pxrReserved__::TfToken *)&v82, (_QWORD *)(v10 + 32), &v75))
    {
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v75))
      {
        v84 = (void **)"usdUtils/pipeline.cpp";
        v85 = "_RegisterVariantSetsFromPlugInfos";
        v86 = 144;
        v87 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
        v88 = 0;
        v33 = sub_20BF444D8(&v80);
        v34 = (const char *)(v33 + 8);
        if (*(char *)(v33 + 31) < 0)
          v34 = *(const char **)v34;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v84, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][RegisteredVariantSets] was not a dictionary.", v34);
        v28 = v76;
        if (!v76)
          goto LABEL_52;
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        goto LABEL_50;
      }
      v11 = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v75);
      v13 = v11 + 1;
      v12 = (_QWORD *)*v11;
      if ((_QWORD *)*v11 != v11 + 1)
      {
        do
        {
          v14 = (const char *)(v12 + 4);
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v12 + 7)))
          {
            v15 = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)v12 + 7);
            sub_20BF1BE5C((uint64_t *)&v73, v15);
            v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C69F864();
            if ((*((_QWORD *)v16 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (uint64_t *)((*((_QWORD *)v16 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
            v79 = (__int128 *)EmptyString;
            v20 = sub_20C6E750C(&v73, (const void **)EmptyString, (uint64_t)&unk_20CAC184C, &v79);
            String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v20 + 7));
            if (*(char *)(String + 23) < 0)
            {
              sub_20BDDBFAC(__p, *(void **)String, *(_QWORD *)(String + 8));
            }
            else
            {
              v22 = *(_OWORD *)String;
              v72 = *(_QWORD *)(String + 16);
              *(_OWORD *)__p = v22;
            }
            LODWORD(v79) = 0;
            if ((pxrInternal__aapl__pxrReserved__::UsdUtilsRegisteredVariantSet::GetSelectionExportPolicyFromString((unsigned __int8 *)__p, (int *)&v79) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdUtilsRegisterVariantSet((uint64_t)(v12 + 4), &v79);
            }
            else
            {
              v84 = (void **)"usdUtils/pipeline.cpp";
              v85 = "_RegisterVariantSetsFromPlugInfos";
              v86 = 170;
              v87 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
              v88 = 0;
              v23 = sub_20BF444D8(&v80);
              v24 = (const char *)(v23 + 8);
              if (*(char *)(v23 + 31) < 0)
                v24 = *(const char **)v24;
              if (*((char *)v12 + 55) < 0)
                v14 = *(const char **)v14;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v84, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][RegisteredVariantSets][%s] was not valid.", v24, v14);
            }
            if (SHIBYTE(v72) < 0)
              operator delete(__p[0]);
            sub_20BE78E5C((uint64_t)&v73, v74);
          }
          else
          {
            v84 = (void **)"usdUtils/pipeline.cpp";
            v85 = "_RegisterVariantSetsFromPlugInfos";
            v86 = 157;
            v87 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
            v88 = 0;
            v18 = sub_20BF444D8(&v80);
            v19 = (const char *)(v18 + 8);
            if (*(char *)(v18 + 31) < 0)
              v19 = *(const char **)v19;
            if (*((char *)v12 + 55) < 0)
              v14 = *(const char **)v14;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v84, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][RegisteredVariantSets][%s] was not a dictionary.", v19, v14);
          }
          v25 = (_QWORD *)v12[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (_QWORD *)v12[2];
              v27 = *v26 == (_QWORD)v12;
              v12 = v26;
            }
            while (!v27);
          }
          v12 = v26;
        }
        while (v26 != v13);
      }
    }
    v28 = v76;
    if (v76)
    {
      v29 = (unint64_t *)&v76->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
LABEL_50:
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
LABEL_52:
    sub_20BE78E5C((uint64_t)&v82, v83);
LABEL_53:
    v36 = v78;
    if (v78)
    {
      v37 = (unint64_t *)&v78->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    sub_20BE78E5C((uint64_t)&v89, v90);
    v39 = v81;
    if (v81)
    {
      v40 = (unsigned int *)(v81 + 8);
      do
      {
        v41 = __ldxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    v2 += 2;
  }
  v84 = (void **)&v91;
  sub_20BEB4844(&v84);
  v44 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v43);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v91, v44);
  v45 = (uint64_t)v91;
  for (i = v92; (uint64_t *)v45 != i; v45 += 16)
  {
    v47 = *(_QWORD **)(v45 + 8);
    v73 = *(uint64_t **)v45;
    v74 = v47;
    if (v47)
    {
      v48 = (unsigned int *)(v47 + 1);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = (const void ***)sub_20BF444D8((uint64_t *)&v73);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v50, &v89);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)__p);
    v51 = (_QWORD *)sub_20C69F864();
    if (sub_20C568C48((pxrInternal__aapl__pxrReserved__::TfToken *)&v89, v51, __p))
    {
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)__p))
      {
        v52 = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)__p);
        sub_20BF1BE5C(&v82, v52);
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v80);
        v53 = sub_20C69F864();
        if (sub_20C568C48((pxrInternal__aapl__pxrReserved__::TfToken *)&v82, (_QWORD *)(v53 + 24), &v80))
        {
          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v80))
          {
            v84 = (void **)"usdUtils/pipeline.cpp";
            v85 = "_LoadPluginsThatRegisterVariantSets";
            v86 = 203;
            v87 = "void pxrInternal__aapl__pxrReserved__::_LoadPluginsThatRegisterVariantSets()";
            v88 = 0;
            v54 = sub_20BF444D8((uint64_t *)&v73);
            v55 = (const char *)(v54 + 8);
            if (*(char *)(v54 + 31) < 0)
              v55 = *(const char **)v55;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v84, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][ProvidesRegisteredVariantSetsFromPlugin] was not a BOOL.", v55);
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v80))
          {
            v56 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8((uint64_t *)&v73);
            pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v56);
          }
        }
        v57 = (std::__shared_weak_count *)v81;
        if (v81)
        {
          v58 = (unint64_t *)(v81 + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        sub_20BE78E5C((uint64_t)&v82, v83);
      }
      else
      {
        v84 = (void **)"usdUtils/pipeline.cpp";
        v85 = "_LoadPluginsThatRegisterVariantSets";
        v86 = 190;
        v87 = "void pxrInternal__aapl__pxrReserved__::_LoadPluginsThatRegisterVariantSets()";
        v88 = 0;
        v60 = sub_20BF444D8((uint64_t *)&v73);
        v61 = (const char *)(v60 + 8);
        if (*(char *)(v60 + 31) < 0)
          v61 = *(const char **)v61;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v84, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline] was not a dictionary.", v61);
      }
    }
    v62 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v63 = (unint64_t *)((char *)__p[1] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    sub_20BE78E5C((uint64_t)&v89, v90);
    v65 = v74;
    if (v74)
    {
      v66 = (unsigned int *)(v74 + 1);
      do
      {
        v67 = __ldxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
        (*(void (**)(_QWORD *))(*v65 + 8))(v65);
    }
  }
  v84 = (void **)&v91;
  sub_20BEB4844(&v84);
  v70 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v69);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(v70, (const std::type_info *)&unk_24C5411D0);
}

void sub_20C6A1144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned int *a28,char a29,_QWORD *a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  sub_20BE78E5C((uint64_t)&a29, a30);
  if (a24)
  {
    v36 = (unint64_t *)&a24->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  sub_20BE78E5C(v32 - 136, *(_QWORD **)(v32 - 128));
  if (a28)
  {
    v38 = a28 + 2;
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(unsigned int *))(*(_QWORD *)a28 + 8))(a28);
  }
  a32 = v32 - 112;
  sub_20BEB4844((void ***)&a32);
  _Unwind_Resume(a1);
}

char *sub_20C6A1358(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)(__dst + 24));
  return __dst;
}

void sub_20C6A13AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C6A13C8()
{
  char **v0;
  char **v1;

  v0 = (char **)operator new(0x18uLL);
  v1 = v0;
  v0[2] = 0;
  v0[1] = 0;
  *v0 = (char *)(v0 + 1);
  while (!__ldaxr(&qword_25498BDC8))
  {
    if (!__stlxr((unint64_t)v0, &qword_25498BDC8))
      return (unint64_t)v1;
  }
  __clrex();
  sub_20BDECAB8((uint64_t)v0, v0[1]);
  operator delete(v1);
  return atomic_load(&qword_25498BDC8);
}

uint64_t *sub_20C6A1438(uint64_t **a1, uint64_t a2, _DWORD *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  void **v6;
  uint64_t v8;
  void *__p;
  uint64_t v10;

  sub_20C6A14E0((uint64_t)a1, a2, a3, (uint64_t)&__p);
  v4 = (uint64_t **)sub_20C6A1588((uint64_t)a1, &v8, (_QWORD *)__p + 4);
  v5 = *v4;
  if (*v4)
  {
    v6 = (void **)__p;
    __p = 0;
    if (v6)
      sub_20BDEEB58((uint64_t)&v10, v6);
  }
  else
  {
    sub_20BDDE1B4(a1, v8, v4, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v5;
}

void sub_20C6A14BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BDEEB58((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20C6A14E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = v8 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v8 + 14) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C6A156C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6A1588(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_20C6A1618(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20C6A1618(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_20C6A1618(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void sub_20C6A1680(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        sub_20BF32220(v8 + 2, v4 + 2);
        sub_20BF32220(v8 + 3, v4 + 3);
        v10 = (_QWORD *)*v8;
        sub_20BF321C0(a1, v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    sub_20BFC9CC0((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20C6A1784(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_20C6A1758(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_20BFC9CC0(v1, v2);
  __cxa_rethrow();
}

void sub_20C6A1770(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6A1784(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  v4 = operator new(0x20uLL);
  *v4 = 0;
  v4[1] = 0;
  sub_20C15A32C(v4 + 2, a2);
  v4[1] = bswap64(0x9E3779B97F4A7C55 * (v4[2] & 0xFFFFFFFFFFFFFFF8));
  return sub_20BF321C0(a1, v4);
}

void sub_20C6A1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BFC9F84(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsRegisteredVariantSet::GetSelectionExportPolicyFromString(unsigned __int8 *a1, int *a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  int v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C6A18B4();
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==(v4, a1) & 1) != 0)
  {
    v5 = 0;
    if (!a2)
      return 1;
    goto LABEL_6;
  }
  v6 = sub_20C6A18B4();
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 8), a1) & 1) != 0)
  {
    v5 = 1;
    if (!a2)
      return 1;
LABEL_6:
    *a2 = v5;
    return 1;
  }
  v8 = sub_20C6A18B4();
  result = pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 16), a1);
  if ((_DWORD)result)
  {
    v5 = 2;
    if (!a2)
      return 1;
    goto LABEL_6;
  }
  return result;
}

unint64_t sub_20C6A18B4()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  void **v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498BDE0);
  if (!v0)
  {
    v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "never", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "ifAuthored", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "always", 0);
    v4 = *(void ***)v0;
    v30 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v30 = (void **)v5;
    }
    v7 = (unsigned int *)*v2;
    v31 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v31 = v8;
    }
    v10 = (unsigned int *)*v3;
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 = v11;
    }
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    v13 = operator new(0x18uLL);
    v14 = 0;
    *((_QWORD *)v0 + 3) = v13;
    *((_QWORD *)v0 + 4) = v13;
    *((_QWORD *)v0 + 5) = v13 + 3;
    do
    {
      v15 = (unint64_t)(&v30)[v14];
      *v13 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
      ++v13;
    }
    while (v14 != 3);
    v18 = (void ***)&v33;
    *((_QWORD *)v0 + 4) = v13;
    do
    {
      v20 = (uint64_t)*--v18;
      v19 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    while (v18 != &v30);
    while (!__ldaxr(&qword_25498BDE0))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498BDE0))
        return (unint64_t)v0;
    }
    __clrex();
    v30 = (void **)(v0 + 24);
    sub_20BEEB2B8(&v30);
    if ((*v3 & 7) != 0)
    {
      v24 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if ((*v2 & 7) != 0)
    {
      v26 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v28 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    operator delete(v0);
    return atomic_load(&qword_25498BDE0);
  }
  return (unint64_t)v0;
}

void sub_20C6A1B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::_IsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::VtValue *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double *v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float *v43;
  unint64_t v44;
  double v45;
  BOOL v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  float *v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  double v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  double v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  double *v122;
  uint64_t v123;
  double *v124;
  uint64_t v125;
  float *v126;
  uint64_t v127;
  float *v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  double v153;
  uint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t *v174;
  uint64_t v175;
  _QWORD *v176;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return v3 & 1;
  v4 = a2;
  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    return v3 & 1;
  v5 = this;
  if (sub_20BF78EEC(this) && sub_20BF78EEC(v4))
  {
    v6 = *((_QWORD *)v5 + 1);
    if ((v6 & 4) != 0)
      v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    v7 = *((_QWORD *)v4 + 1);
    if ((v7 & 4) != 0)
      v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v8 = vabdd_f64(*(double *)v5, *(double *)v4);
    v9 = 1.0e-12;
LABEL_17:
    LOBYTE(v3) = v8 < v9;
    return v3 & 1;
  }
  if (sub_20BF7B9F8(v5) && sub_20BF7B9F8(v4))
  {
    v10 = *((_QWORD *)v5 + 1);
    if ((v10 & 4) != 0)
      v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    v11 = *((_QWORD *)v4 + 1);
    if ((v11 & 4) != 0)
      v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v8 = vabdd_f64(*(float *)v5, *(float *)v4);
    v9 = 0.000001;
    goto LABEL_17;
  }
  if (sub_20BFADE60(v5) && sub_20BFADE60(v4))
  {
    v12 = *((_QWORD *)v5 + 1);
    if ((v12 & 4) != 0)
      v13 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 168))(v5));
    else
      v13 = *(double *)v5;
    v14 = *((_QWORD *)v4 + 1);
    if ((v14 & 4) != 0)
      v15 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
    else
      v15 = *(double *)v4;
    v16 = 0;
    v17 = 0;
LABEL_25:
    v18 = 0;
    while (vabdd_f64(*(double *)(*(_QWORD *)&v13 + v18), *(double *)(*(_QWORD *)&v15 + v18)) < 1.0e-12)
    {
      v18 += 8;
      if (v18 == 32)
      {
        v16 = v17 > 2;
        *(_QWORD *)&v15 += 32;
        *(_QWORD *)&v13 += 32;
        LOBYTE(v3) = 1;
        if (++v17 != 4)
          goto LABEL_25;
        return v3 & 1;
      }
    }
LABEL_172:
    LOBYTE(v3) = v16;
    return v3 & 1;
  }
  if (sub_20BFA0FB4(v5) && sub_20BFA0FB4(v4))
  {
    v19 = *((_QWORD *)v5 + 1);
    if ((v19 & 4) != 0)
      v20 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v20 = *(double **)v5;
    v21 = *((_QWORD *)v4 + 1);
    if ((v21 & 4) != 0)
      v22 = (double *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v22 = *(double **)v4;
    if (vabdd_f64(*v20, *v22) < 1.0e-12)
    {
      v23 = 0;
      do
      {
        v24 = v23;
        if (v23 == 2)
          break;
        v25 = vabdd_f64(v20[v23 + 1], v22[v23 + 1]);
        ++v23;
      }
      while (v25 < 1.0e-12);
LABEL_72:
      v46 = v24 > 1;
      goto LABEL_84;
    }
    goto LABEL_266;
  }
  if (sub_20BFA4BCC(v5) && sub_20BFA4BCC(v4))
  {
    v26 = *((_QWORD *)v5 + 1);
    if ((v26 & 4) != 0)
      v27 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v27 = *(double **)v5;
    v28 = *((_QWORD *)v4 + 1);
    if ((v28 & 4) != 0)
      v29 = (double *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v29 = *(double **)v4;
    if (vabdd_f64(*v27, *v29) >= 1.0e-12)
      goto LABEL_266;
    v30 = 0;
    do
    {
      v31 = v30;
      if (v30 == 3)
        break;
      v32 = vabdd_f64(v27[v30 + 1], v29[v30 + 1]);
      ++v30;
    }
    while (v32 < 1.0e-12);
LABEL_83:
    v46 = v31 > 2;
LABEL_84:
    LOBYTE(v3) = v46;
    return v3 & 1;
  }
  if (sub_20BF9D818(v5) && sub_20BF9D818(v4))
  {
    v33 = *((_QWORD *)v5 + 1);
    if ((v33 & 4) != 0)
      v34 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v33 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 168))(v5));
    else
      v34 = *(double *)v5;
    v35 = *((_QWORD *)v4 + 1);
    if ((v35 & 4) != 0)
      v36 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
    else
      v36 = *(double *)v4;
    v37 = 0;
    v38 = 1;
    do
    {
      v39 = vabdd_f64(*(double *)(*(_QWORD *)&v34 + 8 * v37), *(double *)(*(_QWORD *)&v36 + 8 * v37));
      LOBYTE(v3) = v39 < 1.0e-12;
      if ((v38 & 1) == 0)
        break;
      v38 = 0;
      v37 = 1;
    }
    while (v39 < 1.0e-12);
    return v3 & 1;
  }
  if (sub_20BFA2E0C(v5) && sub_20BFA2E0C(v4))
  {
    v40 = *((_QWORD *)v5 + 1);
    if ((v40 & 4) != 0)
      v41 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v41 = *(float **)v5;
    v42 = *((_QWORD *)v4 + 1);
    if ((v42 & 4) != 0)
      v43 = (float *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v42 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(v4);
    else
      v43 = *(float **)v4;
    if (vabdd_f64(*v41, *v43) < 0.000001)
    {
      v44 = 0;
      do
      {
        v24 = v44;
        if (v44 == 2)
          break;
        v45 = vabdd_f64(v41[v44 + 1], v43[v44 + 1]);
        ++v44;
      }
      while (v45 < 0.000001);
      goto LABEL_72;
    }
LABEL_266:
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  if (sub_20BFA6978(v5) && sub_20BFA6978(v4))
  {
    v47 = *((_QWORD *)v5 + 1);
    if ((v47 & 4) != 0)
      v48 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v48 = *(float **)v5;
    v49 = *((_QWORD *)v4 + 1);
    if ((v49 & 4) != 0)
      v50 = (float *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v49 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(v4);
    else
      v50 = *(float **)v4;
    if (vabdd_f64(*v48, *v50) >= 0.000001)
      goto LABEL_266;
    v51 = 0;
    do
    {
      v31 = v51;
      if (v51 == 3)
        break;
      v52 = vabdd_f64(v48[v51 + 1], v50[v51 + 1]);
      ++v51;
    }
    while (v52 < 0.000001);
    goto LABEL_83;
  }
  if (sub_20BF9F188(v5) && sub_20BF9F188(v4))
  {
    v53 = *((_QWORD *)v5 + 1);
    if ((v53 & 4) != 0)
      v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    v54 = *((_QWORD *)v4 + 1);
    if ((v54 & 4) != 0)
      v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v55 = 0;
    v56 = 1;
    do
    {
      v57 = vabdd_f64(*((float *)v5 + v55), *((float *)v4 + v55));
      LOBYTE(v3) = v57 < 0.000001;
      if ((v56 & 1) == 0)
        break;
      v56 = 0;
      v55 = 1;
    }
    while (v57 < 0.000001);
    return v3 & 1;
  }
  if (sub_20BF565F0(v5) && sub_20BF565F0(v4))
  {
    v58 = *((_QWORD *)v5 + 1);
    if ((v58 & 4) != 0)
      v59 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v58 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v59 = *(unint64_t **)v5;
    v60 = *((_QWORD *)v4 + 1);
    if ((v60 & 4) != 0)
      v61 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v61 = *(_QWORD **)v4;
    return sub_20C6A2F74(v59, v61);
  }
  else if (sub_20BF57C2C(v5) && sub_20BF57C2C(v4))
  {
    v63 = *((_QWORD *)v5 + 1);
    if ((v63 & 4) != 0)
      v64 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v63 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v64 = *(unint64_t **)v5;
    v65 = *((_QWORD *)v4 + 1);
    if ((v65 & 4) != 0)
      v66 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v66 = *(_QWORD **)v4;
    return sub_20C6A3000(v64, v66);
  }
  else if (sub_20BF5FDC8(v5) && sub_20BF5FDC8(v4))
  {
    v67 = *((_QWORD *)v5 + 1);
    if ((v67 & 4) != 0)
      v68 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v67 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v68 = *(unint64_t **)v5;
    v69 = *((_QWORD *)v4 + 1);
    if ((v69 & 4) != 0)
      v70 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v70 = *(_QWORD **)v4;
    return sub_20C6A307C(v68, v70);
  }
  else if (sub_20BF5B118(v5) && sub_20BF5B118(v4))
  {
    v71 = *((_QWORD *)v5 + 1);
    if ((v71 & 4) != 0)
      v72 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v71 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v72 = *(unint64_t **)v5;
    v73 = *((_QWORD *)v4 + 1);
    if ((v73 & 4) != 0)
      v74 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v74 = *(_QWORD **)v4;
    return sub_20C6A3134(v72, v74);
  }
  else if (sub_20BF5C88C(v5) && sub_20BF5C88C(v4))
  {
    v75 = *((_QWORD *)v5 + 1);
    if ((v75 & 4) != 0)
      v76 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v75 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v76 = *(unint64_t **)v5;
    v77 = *((_QWORD *)v4 + 1);
    if ((v77 & 4) != 0)
      v78 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v78 = *(_QWORD **)v4;
    return sub_20C6A3210(v76, v78);
  }
  else if (sub_20BF5D738(v5) && sub_20BF5D738(v4))
  {
    v79 = *((_QWORD *)v5 + 1);
    if ((v79 & 4) != 0)
      v80 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v79 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v80 = *(unint64_t **)v5;
    v81 = *((_QWORD *)v4 + 1);
    if ((v81 & 4) != 0)
      v82 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v82 = *(_QWORD **)v4;
    return sub_20C6A32D4(v80, v82);
  }
  else if (sub_20BF5EDE8(v5) && sub_20BF5EDE8(v4))
  {
    v83 = *((_QWORD *)v5 + 1);
    if ((v83 & 4) != 0)
      v84 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v83 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v84 = *(unint64_t **)v5;
    v85 = *((_QWORD *)v4 + 1);
    if ((v85 & 4) != 0)
      v86 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v86 = *(_QWORD **)v4;
    return sub_20C6A33B0(v84, v86);
  }
  else if (sub_20BF58AAC(v5) && sub_20BF58AAC(v4))
  {
    v87 = *((_QWORD *)v5 + 1);
    if ((v87 & 4) != 0)
      v88 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v87 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v88 = *(unint64_t **)v5;
    v89 = *((_QWORD *)v4 + 1);
    if ((v89 & 4) != 0)
      v90 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v90 = *(_QWORD **)v4;
    return sub_20C6A3474(v88, v90);
  }
  else if (sub_20BF5A0F8(v5) && sub_20BF5A0F8(v4))
  {
    v91 = *((_QWORD *)v5 + 1);
    if ((v91 & 4) != 0)
      v92 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v91 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v5);
    else
      v92 = *(unint64_t **)v5;
    v93 = *((_QWORD *)v4 + 1);
    if ((v93 & 4) != 0)
      v94 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v94 = *(_QWORD **)v4;
    return sub_20C6A3508(v92, v94);
  }
  else
  {
    if (sub_20BFAB53C(v5) && sub_20BFAB53C(v4))
    {
      v95 = *((_QWORD *)v5 + 1);
      if ((v95 & 4) != 0)
        v96 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v95 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(v5));
      else
        v96 = *(double *)v5;
      v97 = *((_QWORD *)v4 + 1);
      if ((v97 & 4) != 0)
        v98 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
      else
        v98 = *(double *)v4;
      v16 = 0;
      v99 = 0;
LABEL_167:
      v100 = 0;
      while (vabdd_f64(*(double *)(*(_QWORD *)&v96 + v100), *(double *)(*(_QWORD *)&v98 + v100)) < 1.0e-12)
      {
        v100 += 8;
        if (v100 == 24)
        {
          v16 = v99 > 1;
          *(_QWORD *)&v98 += 24;
          *(_QWORD *)&v96 += 24;
          LOBYTE(v3) = 1;
          if (++v99 != 3)
            goto LABEL_167;
          return v3 & 1;
        }
      }
      goto LABEL_172;
    }
    if (sub_20BFA8B44(v5) && sub_20BFA8B44(v4))
    {
      v101 = *((_QWORD *)v5 + 1);
      if ((v101 & 4) != 0)
        v102 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v101 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 168))(v5));
      else
        v102 = *(double *)v5;
      v103 = *((_QWORD *)v4 + 1);
      if ((v103 & 4) != 0)
        v104 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v103 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
      else
        v104 = *(double *)v4;
      v105 = 0;
      v106 = 1;
LABEL_180:
      v107 = 0;
      v108 = v106;
      v109 = 1;
      v110 = *(_QWORD *)&v102 + 8 * v105;
      v111 = *(_QWORD *)&v104 + 8 * v105;
      while (vabdd_f64(*(double *)(v110 + 8 * v107), *(double *)(v111 + 8 * v107)) < 1.0e-12)
      {
        v112 = v109;
        v109 = 0;
        v107 = 1;
        if ((v112 & 1) == 0)
        {
          v106 = 0;
          LOBYTE(v3) = 1;
          v105 = 2;
          if ((v108 & 1) != 0)
            goto LABEL_180;
          return v3 & 1;
        }
      }
      goto LABEL_266;
    }
    if (sub_20C1D2EA4(v5) && sub_20C1D2EA4(v4))
    {
      v113 = *((_QWORD *)v5 + 1);
      if ((v113 & 4) != 0)
        v114 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v113 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 168))(v5);
      else
        v114 = *(unint64_t **)v5;
      v115 = *((_QWORD *)v4 + 1);
      if ((v115 & 4) != 0)
        v116 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v115 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      else
        v116 = *(_QWORD **)v4;
      return sub_20C6A3594(v114, v116);
    }
    else if (sub_20C1D2A38(v5) && sub_20C1D2A38(v4))
    {
      v117 = *((_QWORD *)v5 + 1);
      if ((v117 & 4) != 0)
        v118 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v117 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 168))(v5);
      else
        v118 = *(unint64_t **)v5;
      v119 = *((_QWORD *)v4 + 1);
      if ((v119 & 4) != 0)
        v120 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      else
        v120 = *(_QWORD **)v4;
      return sub_20C6A364C(v118, v120);
    }
    else if (sub_20BFAF48C(v5) && sub_20BFAF48C(v4))
    {
      v121 = *((_QWORD *)v5 + 1);
      if ((v121 & 4) != 0)
        v122 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v121 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 168))(v5);
      else
        v122 = *(double **)v5;
      v123 = *((_QWORD *)v4 + 1);
      if ((v123 & 4) != 0)
        v124 = (double *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v123 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      else
        v124 = *(double **)v4;
      return sub_20C6A3700(v122, v124);
    }
    else if (sub_20BFB08AC(v5) && sub_20BFB08AC(v4))
    {
      v125 = *((_QWORD *)v5 + 1);
      if ((v125 & 4) != 0)
        v126 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v125 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 168))(v5);
      else
        v126 = *(float **)v5;
      v127 = *((_QWORD *)v4 + 1);
      if ((v127 & 4) != 0)
        v128 = (float *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v127 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      else
        v128 = *(float **)v4;
      return sub_20C6A3774(v126, v128);
    }
    else if (sub_20BF62CAC(v5) && sub_20BF62CAC(v4))
    {
      v129 = *((_QWORD *)v5 + 1);
      if ((v129 & 4) != 0)
        v130 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v129 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 168))(v5);
      else
        v130 = *(unint64_t **)v5;
      v131 = *((_QWORD *)v4 + 1);
      if ((v131 & 4) != 0)
        v132 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      else
        v132 = *(_QWORD **)v4;
      return sub_20C6A3800(v130, v132);
    }
    else if (sub_20BF61604(v5) && sub_20BF61604(v4))
    {
      v133 = *((_QWORD *)v5 + 1);
      if ((v133 & 4) != 0)
        v134 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v133 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 168))(v5);
      else
        v134 = *(unint64_t **)v5;
      v135 = *((_QWORD *)v4 + 1);
      if ((v135 & 4) != 0)
        v136 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v135 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      else
        v136 = *(_QWORD **)v4;
      return sub_20C6A3898(v134, v136);
    }
    else
    {
      if (sub_20C1D0B64(v5) && sub_20C1D0B64(v4))
      {
        v137 = *((_QWORD *)v5 + 1);
        if ((v137 & 4) != 0)
          v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v137 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        v138 = *((_QWORD *)v4 + 1);
        if ((v138 & 4) != 0)
          v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v138 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        v8 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v5], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v4]);
        v9 = 0.01;
        goto LABEL_17;
      }
      if (sub_20C1D3EC0(v5) && sub_20C1D3EC0(v4))
      {
        v139 = *((_QWORD *)v5 + 1);
        if ((v139 & 4) != 0)
          v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v139 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        v140 = *((_QWORD *)v4 + 1);
        if ((v140 & 4) != 0)
          v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v140 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        v141 = 0;
        v142 = 1;
        do
        {
          v143 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v5 + v141)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v4 + v141)]);
          LOBYTE(v3) = v143 < 0.01;
          if ((v142 & 1) == 0)
            break;
          v142 = 0;
          v141 = 1;
        }
        while (v143 < 0.01);
        return v3 & 1;
      }
      if (sub_20C1D48C0(v5) && sub_20C1D48C0(v4))
      {
        v144 = *((_QWORD *)v5 + 1);
        if ((v144 & 4) != 0)
          v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v144 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        v145 = *((_QWORD *)v4 + 1);
        if ((v145 & 4) != 0)
          v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v145 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v5], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v4]) < 0.01)
        {
          v146 = 0;
          do
          {
            v147 = v146;
            if (v146 == 2)
              break;
            v148 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v5 + v146 + 1)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v4 + v146 + 1)]);
            ++v146;
          }
          while (v148 < 0.01);
          v46 = v147 > 1;
          goto LABEL_84;
        }
        goto LABEL_266;
      }
      if (sub_20C1D53BC(v5) && sub_20C1D53BC(v4))
      {
        v149 = *((_QWORD *)v5 + 1);
        if ((v149 & 4) != 0)
          v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v149 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        v150 = *((_QWORD *)v4 + 1);
        if ((v150 & 4) != 0)
          v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v150 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v5], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v4]) < 0.01)
        {
          v151 = 0;
          do
          {
            v152 = v151;
            if (v151 == 3)
              break;
            v153 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v5 + v151 + 1)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v4 + v151 + 1)]);
            ++v151;
          }
          while (v153 < 0.01);
          v46 = v152 > 2;
          goto LABEL_84;
        }
        goto LABEL_266;
      }
      if (sub_20BF560D4(v5) && sub_20BF560D4(v4))
      {
        v154 = *((_QWORD *)v5 + 1);
        if ((v154 & 4) != 0)
          v155 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v154 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        else
          v155 = *(unint64_t **)v5;
        v156 = *((_QWORD *)v4 + 1);
        if ((v156 & 4) != 0)
          v157 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v156 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        else
          v157 = *(_QWORD **)v4;
        return sub_20C6A3930(v155, v157);
      }
      else if (sub_20BF5865C(v5) && sub_20BF5865C(v4))
      {
        v158 = *((_QWORD *)v5 + 1);
        if ((v158 & 4) != 0)
          v159 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v158 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        else
          v159 = *(unint64_t **)v5;
        v160 = *((_QWORD *)v4 + 1);
        if ((v160 & 4) != 0)
          v161 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v160 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        else
          v161 = *(_QWORD **)v4;
        return sub_20C6A39D4(v159, v161);
      }
      else if (sub_20BF5AC4C(v5) && sub_20BF5AC4C(v4))
      {
        v162 = *((_QWORD *)v5 + 1);
        if ((v162 & 4) != 0)
          v163 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v162 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        else
          v163 = *(unint64_t **)v5;
        v164 = *((_QWORD *)v4 + 1);
        if ((v164 & 4) != 0)
          v165 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v164 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        else
          v165 = *(_QWORD **)v4;
        return sub_20C6A3A78(v163, v165);
      }
      else if (sub_20BF5D2EC(v5) && sub_20BF5D2EC(v4))
      {
        v166 = *((_QWORD *)v5 + 1);
        if ((v166 & 4) != 0)
          v167 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        else
          v167 = *(unint64_t **)v5;
        v168 = *((_QWORD *)v4 + 1);
        if ((v168 & 4) != 0)
          v169 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v168 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        else
          v169 = *(_QWORD **)v4;
        return sub_20C6A3B74(v167, v169);
      }
      else if (sub_20C1D33A8(v5) && sub_20C1D33A8(v4))
      {
        v170 = *((_QWORD *)v5 + 1);
        if ((v170 & 4) != 0)
          v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v170 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        v171 = *((_QWORD *)v4 + 1);
        if ((v171 & 4) != 0)
          v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v171 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        return sub_20C6A3C70((unsigned __int16 *)v5, (unsigned __int16 *)v4);
      }
      else if (sub_20BF611B8(v5) && sub_20BF611B8(v4))
      {
        v173 = *((_QWORD *)v5 + 1);
        if ((v173 & 4) != 0)
          v174 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v173 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        else
          v174 = *(unint64_t **)v5;
        v175 = *((_QWORD *)v4 + 1);
        if ((v175 & 4) != 0)
          v176 = (_QWORD *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v175 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        else
          v176 = *(_QWORD **)v4;
        return sub_20C6A3D1C(v174, v176);
      }
      else
      {
        return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v5, (std::type_info *)v4, v172);
      }
    }
  }
}

BOOL sub_20C6A2F74(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (float *)a1[4];
  v4 = (float *)a2[4];
  if (vabdd_f64(*v3, *v4) >= 0.000001)
    return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = vabdd_f64(v3[v5], v4[v5]);
    ++v5;
  }
  while (v7 < 0.000001);
  return v6 >= v2;
}

BOOL sub_20C6A3000(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (double *)a1[4];
  v4 = (double *)a2[4];
  if (vabdd_f64(*v3, *v4) >= 1.0e-12)
    return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = vabdd_f64(v3[v5], v4[v5]);
    ++v5;
  }
  while (v7 < 1.0e-12);
  return v6 >= v2;
}

BOOL sub_20C6A307C(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      v3 = 0;
      v4 = 0;
      v5 = a1[4];
      v6 = a2[4];
      do
      {
        v7 = 0;
        v8 = 0;
        v9 = v5;
        v10 = v6;
LABEL_5:
        v11 = 0;
        while (vabdd_f64(*(double *)(v9 + v11), *(double *)(v10 + v11)) < 1.0e-12)
        {
          v11 += 8;
          if (v11 == 32)
          {
            v7 = v8 > 2;
            v10 += 32;
            v9 += 32;
            if (++v8 != 4)
              goto LABEL_5;
            goto LABEL_11;
          }
        }
        if (!v7)
          return v3;
LABEL_11:
        ++v4;
        v6 += 128;
        v5 += 128;
        v3 = v4 >= v2;
      }
      while (v4 != v2);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_20C6A3134(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (float *)a1[4];
  v4 = (float *)a2[4];
  if (vabdd_f64(*v3, *v4) < 0.000001)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2[4];
    v8 = a1[4];
    do
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v9 == 3)
          break;
        v11 = vabdd_f64(*(float *)(v8 + 4 * v9), *(float *)(v7 + 4 * v9));
        ++v9;
      }
      while (v11 < 0.000001);
      if ((unint64_t)(v10 - 1) <= 1)
        break;
      v6 = ++v5 >= v2;
      if (v5 == v2)
        break;
      v8 += 12;
      v7 += 12;
    }
    while (vabdd_f64(v3[3 * v5], v4[3 * v5]) < 0.000001);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_20C6A3210(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (double *)a1[4];
  v4 = (double *)a2[4];
  if (vabdd_f64(*v3, *v4) < 1.0e-12)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2[4];
    v8 = a1[4];
    do
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v9 == 3)
          break;
        v11 = vabdd_f64(*(double *)(v8 + 8 * v9), *(double *)(v7 + 8 * v9));
        ++v9;
      }
      while (v11 < 1.0e-12);
      if ((unint64_t)(v10 - 1) <= 1)
        break;
      v6 = ++v5 >= v2;
      if (v5 == v2)
        break;
      v8 += 24;
      v7 += 24;
    }
    while (vabdd_f64(v3[3 * v5], v4[3 * v5]) < 1.0e-12);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_20C6A32D4(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (float *)a1[4];
  v4 = (float *)a2[4];
  if (vabdd_f64(*v3, *v4) < 0.000001)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2[4];
    v8 = a1[4];
    do
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v9 == 4)
          break;
        v11 = vabdd_f64(*(float *)(v8 + 4 * v9), *(float *)(v7 + 4 * v9));
        ++v9;
      }
      while (v11 < 0.000001);
      if ((unint64_t)(v10 - 1) <= 2)
        break;
      v6 = ++v5 >= v2;
      if (v5 == v2)
        break;
      v8 += 16;
      v7 += 16;
    }
    while (vabdd_f64(v3[4 * v5], v4[4 * v5]) < 0.000001);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_20C6A33B0(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (double *)a1[4];
  v4 = (double *)a2[4];
  if (vabdd_f64(*v3, *v4) < 1.0e-12)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2[4];
    v8 = a1[4];
    do
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v9 == 4)
          break;
        v11 = vabdd_f64(*(double *)(v8 + 8 * v9), *(double *)(v7 + 8 * v9));
        ++v9;
      }
      while (v11 < 1.0e-12);
      if ((unint64_t)(v10 - 1) <= 2)
        break;
      v6 = ++v5 >= v2;
      if (v5 == v2)
        break;
      v8 += 32;
      v7 += 32;
    }
    while (vabdd_f64(v3[4 * v5], v4[4 * v5]) < 1.0e-12);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_20C6A3474(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t i;
  uint64_t v5;
  char v6;
  double v7;

  v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      v3 = 0;
      for (i = 0; i != v2; v3 = i >= v2)
      {
        v5 = 0;
        v6 = 1;
        do
        {
          v7 = vabdd_f64(*(float *)(a1[4] + 8 * i + 4 * v5), *(float *)(a2[4] + 8 * i + 4 * v5));
          if ((v6 & 1) == 0)
            break;
          v6 = 0;
          v5 = 1;
        }
        while (v7 < 0.000001);
        if (v7 >= 0.000001)
          break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_20C6A3508(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t i;
  uint64_t v5;
  char v6;
  double v7;

  v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      v3 = 0;
      for (i = 0; i != v2; v3 = i >= v2)
      {
        v5 = 0;
        v6 = 1;
        do
        {
          v7 = vabdd_f64(*(double *)(a1[4] + 16 * i + 8 * v5), *(double *)(a2[4] + 16 * i + 8 * v5));
          if ((v6 & 1) == 0)
            break;
          v6 = 0;
          v5 = 1;
        }
        while (v7 < 1.0e-12);
        if (v7 >= 1.0e-12)
          break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_20C6A3594(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      v3 = 0;
      v4 = 0;
      v5 = a1[4];
      v6 = a2[4];
      do
      {
        v7 = 0;
        v8 = 0;
        v9 = v5;
        v10 = v6;
LABEL_5:
        v11 = 0;
        while (vabdd_f64(*(double *)(v9 + v11), *(double *)(v10 + v11)) < 1.0e-12)
        {
          v11 += 8;
          if (v11 == 24)
          {
            v7 = v8 > 1;
            v10 += 24;
            v9 += 24;
            if (++v8 != 3)
              goto LABEL_5;
            goto LABEL_11;
          }
        }
        if (!v7)
          return v3;
LABEL_11:
        ++v4;
        v6 += 72;
        v5 += 72;
        v3 = v4 >= v2;
      }
      while (v4 != v2);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t sub_20C6A364C(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      v3 = 0;
      v4 = 0;
      v5 = a1[4];
      v6 = a2[4];
      do
      {
        v7 = 0;
        v8 = 1;
        while (2)
        {
          v9 = 0;
          v10 = v8;
          v11 = 1;
          v12 = v5 + 32 * v4 + 8 * v7;
          v13 = v6 + 32 * v4 + 8 * v7;
          do
          {
            if (vabdd_f64(*(double *)(v12 + 8 * v9), *(double *)(v13 + 8 * v9)) >= 1.0e-12)
            {
              v15 = v3;
              return v15 & 1;
            }
            v14 = v11;
            v11 = 0;
            v9 = 1;
          }
          while ((v14 & 1) != 0);
          v8 = 0;
          v7 = 2;
          if ((v10 & 1) != 0)
            continue;
          break;
        }
        ++v4;
        v15 = 1;
        v3 = v4 >= v2;
      }
      while (v4 != v2);
    }
    else
    {
      v15 = 1;
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_20C6A3700(double *a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;

  if (vabdd_f64(a1[3], a2[3]) >= 1.0e-12 || vabdd_f64(*a1, *a2) >= 1.0e-12)
    return 0;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 2)
      break;
    v4 = vabdd_f64(a1[v2 + 1], a2[v2 + 1]);
    ++v2;
  }
  while (v4 < 1.0e-12);
  return v3 > 1;
}

BOOL sub_20C6A3774(float *a1, float *a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;

  if (vabdd_f64(a1[3], a2[3]) >= 0.000001 || vabdd_f64(*a1, *a2) >= 0.000001)
    return 0;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 2)
      break;
    v4 = vabdd_f64(a1[v2 + 1], a2[v2 + 1]);
    ++v2;
  }
  while (v4 < 0.000001);
  return v3 > 1;
}

uint64_t sub_20C6A3800(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  uint64_t result;
  double *v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (double *)a1[4];
  v4 = (double *)a2[4];
  result = sub_20C6A3700(v3, v4);
  if ((_DWORD)result)
  {
    v6 = v4 + 4;
    v7 = v3 + 4;
    v8 = 1;
    do
    {
      v9 = v8;
      if (v2 == v8)
        break;
      v10 = sub_20C6A3700(v7, v6);
      v8 = v9 + 1;
      v6 += 4;
      v7 += 4;
    }
    while (v10);
    return v9 >= v2;
  }
  return result;
}

uint64_t sub_20C6A3898(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  float *v3;
  float *v4;
  uint64_t result;
  float *v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (float *)a1[4];
  v4 = (float *)a2[4];
  result = sub_20C6A3774(v3, v4);
  if ((_DWORD)result)
  {
    v6 = v4 + 4;
    v7 = v3 + 4;
    v8 = 1;
    do
    {
      v9 = v8;
      if (v2 == v8)
        break;
      v10 = sub_20C6A3774(v7, v6);
      v8 = v9 + 1;
      v6 += 4;
      v7 += 4;
    }
    while (v10);
    return v9 >= v2;
  }
  return result;
}

BOOL sub_20C6A3930(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (unsigned __int16 *)a1[4];
  v4 = (unsigned __int16 *)a2[4];
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v3], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4]) >= 0.01)return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3[v5]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[v5]]);
    ++v5;
  }
  while (v7 < 0.01);
  return v6 >= v2;
}

BOOL sub_20C6A39D4(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t i;
  uint64_t v5;
  char v6;
  double v7;

  v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      v3 = 0;
      for (i = 0; i != v2; v3 = i >= v2)
      {
        v5 = 0;
        v6 = 1;
        do
        {
          v7 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(a1[4] + 4 * i + 2 * v5)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(a2[4] + 4 * i + 2 * v5)]);
          if ((v6 & 1) == 0)
            break;
          v6 = 0;
          v5 = 1;
        }
        while (v7 < 0.01);
        if (v7 >= 0.01)
          break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_20C6A3A78(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (unsigned __int16 *)a1[4];
  v4 = (unsigned __int16 *)a2[4];
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v3], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4]) < 0.01)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2[4];
    v8 = a1[4];
    do
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v9 == 3)
          break;
        v11 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v8 + 2 * v9)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v7 + 2 * v9)]);
        ++v9;
      }
      while (v11 < 0.01);
      if ((unint64_t)(v10 - 1) <= 1)
        break;
      v6 = ++v5 >= v2;
      if (v5 == v2)
        break;
      v8 += 6;
      v7 += 6;
    }
    while (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3[3 * v5]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[3 * v5]]) < 0.01);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_20C6A3B74(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (unsigned __int16 *)a1[4];
  v4 = (unsigned __int16 *)a2[4];
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v3], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4]) < 0.01)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2[4];
    v8 = a1[4];
    do
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v9 == 4)
          break;
        v11 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v8 + 2 * v9)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v7 + 2 * v9)]);
        ++v9;
      }
      while (v11 < 0.01);
      if ((unint64_t)(v10 - 1) <= 2)
        break;
      v6 = ++v5 >= v2;
      if (v5 == v2)
        break;
      v8 += 8;
      v7 += 8;
    }
    while (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3[4 * v5]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[4 * v5]]) < 0.01);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_20C6A3C70(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;

  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]) >= 0.01|| vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]) >= 0.01)
  {
    return 0;
  }
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 2)
      break;
    v4 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[v2 + 1]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[v2 + 1]]);
    ++v2;
  }
  while (v4 < 0.01);
  return v3 > 1;
}

uint64_t sub_20C6A3D1C(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t result;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (!v2)
    return 1;
  v3 = (unsigned __int16 *)a1[4];
  v4 = (unsigned __int16 *)a2[4];
  result = sub_20C6A3C70(v3, v4);
  if ((_DWORD)result)
  {
    v6 = v4 + 4;
    v7 = v3 + 4;
    v8 = 1;
    do
    {
      v9 = v8;
      if (v2 == v8)
        break;
      v10 = sub_20C6A3C70(v7, v6);
      v8 = v9 + 1;
      v6 += 4;
      v7 += 4;
    }
    while (v10);
    return v9 >= v2;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter(pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = *(_DWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v9 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 4) = 0x7FF8000000000000;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
  sub_20BF4C6D0(v13, a3);
  pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::_InitializeSparseAuthoring((pxrInternal__aapl__pxrReserved__ **)this, (pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  sub_20BF4C2D8((uint64_t)v13);
  return this;
}

void sub_20C6A3EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8(v2 + 40);
  sub_20C372B54(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::_InitializeSparseAuthoring(pxrInternal__aapl__pxrReserved__ **this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  int v4;
  const pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9, NAN);
  v6 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    if (!v6
      || v10 && (pxrInternal__aapl__pxrReserved__::_IsClose((pxrInternal__aapl__pxrReserved__ *)v9, a2, v5) & 1) != 0)
    {
      goto LABEL_8;
    }
  }
  else if (!v6)
  {
    goto LABEL_8;
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(this, a2, NAN);
LABEL_8:
  if (*((_QWORD *)a2 + 1))
    v7 = a2;
  else
    v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)v9;
  sub_20BFD3C3C(this + 5, v7);
  return sub_20BF4C2D8((uint64_t)v9);
}

void sub_20C6A3FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter(pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)this = *(_DWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v9 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 4) = 0x7FF8000000000000;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
  pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::_InitializeSparseAuthoring((pxrInternal__aapl__pxrReserved__ **)this, a3);
  return this;
}

void sub_20C6A4090(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1 + 40);
  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, double a4)
{
  double *v5;
  const char *v7;
  const char *p_p;
  char v9;
  uint64_t v10;
  int v11;
  void *__p;
  char v14;
  void *v15;
  char v16;
  _QWORD v17[4];
  char v18;
  double v19;

  v19 = a4;
  v5 = (double *)(a1 + 32);
  if (*(double *)(a1 + 32) > a4)
  {
    v17[0] = "usdUtils/sparseValueWriter.cpp";
    v17[1] = "SetTimeSample";
    v17[2] = 267;
    v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(const VtValue &, const UsdTimeCode)";
    v18 = 0;
    sub_20C53FBD0(&v19);
    sub_20C53FBD0(v5);
    if (v16 >= 0)
      v7 = (const char *)&v15;
    else
      v7 = (const char *)v15;
    if (v14 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Time-samples should be set in sequentially increasing order of time. Current time(%s) is earlier than previous time(%s)", v7, p_p);
    if (v14 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
  }
  if ((pxrInternal__aapl__pxrReserved__::_IsClose((pxrInternal__aapl__pxrReserved__ *)(a1 + 40), a2, a3) & 1) != 0)
  {
    v9 = 0;
    v10 = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 56))
      v11 = 1;
    else
      v11 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 40), *(double *)(a1 + 32));
    v10 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, a2, v19) & v11;
    sub_20BF4A9BC((_QWORD *)(a1 + 40), a2);
    v9 = 1;
  }
  *(_BYTE *)(a1 + 56) = v9;
  *(double *)(a1 + 32) = v19;
  return v10;
}

{
  double *v5;
  const char *v7;
  const char *p_p;
  char v9;
  uint64_t v10;
  int v11;
  void *__p;
  char v14;
  void *v15;
  char v16;
  _QWORD v17[4];
  char v18;
  double v19;

  v19 = a4;
  v5 = (double *)(a1 + 32);
  if (*(double *)(a1 + 32) > a4)
  {
    v17[0] = "usdUtils/sparseValueWriter.cpp";
    v17[1] = "SetTimeSample";
    v17[2] = 313;
    v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(VtValue *, const UsdTimeCode)";
    v18 = 0;
    sub_20C53FBD0(&v19);
    sub_20C53FBD0(v5);
    if (v16 >= 0)
      v7 = (const char *)&v15;
    else
      v7 = (const char *)v15;
    if (v14 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Time-samples should be set in sequentially increasing order of time. Current time(%s) is earlier than previous time(%s)", v7, p_p);
    if (v14 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
  }
  if ((pxrInternal__aapl__pxrReserved__::_IsClose((pxrInternal__aapl__pxrReserved__ *)(a1 + 40), a2, a3) & 1) != 0)
  {
    v9 = 0;
    v10 = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 56))
      v11 = 1;
    else
      v11 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 40), *(double *)(a1 + 32));
    v10 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, a2, v19) & v11;
    sub_20BFD3C3C((_QWORD *)(a1 + 40), a2);
    v9 = 1;
  }
  *(_BYTE *)(a1 + 56) = v9;
  *(double *)(a1 + 32) = v19;
  return v10;
}

void sub_20C6A42AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C6A44F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6A453C(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double a4)
{
  uint64_t *v8;
  const pxrInternal__aapl__pxrReserved__::VtValue *v9;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::VtValue *v14;
  _BYTE v15[8];
  uint64_t v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v8 = sub_20C6A4AEC(a1, (uint64_t)a2);
  if (v8)
    return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample((uint64_t)(v8 + 6), a3, v9, a4);
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter((pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *)v17, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  v11 = sub_20C6A4C30((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v17);
  sub_20BF4C2D8((uint64_t)v22);
  if ((v21 & 7) != 0)
  {
    v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
  sub_20BF4C2D8((uint64_t)v15);
  return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample((uint64_t)(v11 + 6), a3, v14, a4);
}

void sub_20C6A46FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseValueWriter::SetAttribute(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double a4)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v5 = a3;
  return sub_20C6A4770(a1, a2, &v5, a4);
}

uint64_t sub_20C6A4770(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData **a3, double a4)
{
  uint64_t *v8;
  const pxrInternal__aapl__pxrReserved__::VtValue *v9;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::VtValue *v14;
  _BYTE v15[8];
  uint64_t v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v8 = sub_20C6A4AEC(a1, (uint64_t)a2);
  if (v8)
    return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample((uint64_t)(v8 + 6), *a3, v9, a4);
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter((pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *)v17, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  v11 = sub_20C6A4C30((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v17);
  sub_20BF4C2D8((uint64_t)v22);
  if ((v21 & 7) != 0)
  {
    v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
  sub_20BF4C2D8((uint64_t)v15);
  return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample((uint64_t)(v11 + 6), *a3, v14, a4);
}

void sub_20C6A4930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseValueWriter::GetSparseAttrValueWriters@<X0>(pxrInternal__aapl__pxrReserved__::UsdUtilsSparseValueWriter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *i;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (uint64_t)sub_20C6A49F4(a2, *((_QWORD *)this + 3));
  for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
    result = sub_20C6A55C4(a2, (uint64_t)(i + 6));
  return result;
}

void sub_20C6A49D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6A51A0((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C6A49F4(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C00D6F0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 64 * v6;
    sub_20C6A5290(a1, v7);
    return sub_20C6A5550(v7);
  }
  return result;
}

void sub_20C6A4A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6A5550((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A4A84(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  sub_20BF4C2D8(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t *sub_20C6A4AEC(_QWORD *a1, uint64_t a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  uint64_t v11;
  char v12;

  v11 = 0;
  v12 = 0;
  sub_20C3B0C60((uint64_t)&v11, (unsigned int *)a2, (_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16), (_QWORD *)(a2 + 24));
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = bswap64(0x9E3779B97F4A7C55 * v11);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v4)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (*(_QWORD *)&v4 - 1) & v5;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == *(_DWORD *)a2
        && result[3] == *(_QWORD *)(a2 + 8)
        && result[4] == *(_QWORD *)(a2 + 16)
        && (result[5] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

uint64_t *sub_20C6A4C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v24;
  char v25;

  v24 = 0;
  v25 = 0;
  sub_20C3B0C60((uint64_t)&v24, (unsigned int *)a2, (_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16), (_QWORD *)(a2 + 24));
  v9 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v24);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (*((_DWORD *)i + 4) == *(_DWORD *)a2
            && i[3] == *(_QWORD *)(a2 + 8)
            && i[4] == *(_QWORD *)(a2 + 16)
            && (i[5] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
          {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  sub_20C6A4EFC(a1, v9, a3, a4, (uint64_t)&v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v24 = *v21;
    *v21 = (uint64_t)v24;
  }
  else
  {
    *v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v24)
    {
      v22 = *(_QWORD *)(*v24 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v22 >= v10)
          v22 %= v10;
      }
      else
      {
        v22 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24;
    }
  }
  i = v24;
  v24 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C6A50B4((uint64_t)&v24, 0);
  return i;
}

void sub_20C6A4EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6A50B4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A4EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x70uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C6A4F80((uint64_t)(v10 + 2), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C6A4F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6A50B4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A4F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  v12 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 48);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 20));
  v15 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 56) = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      *(_QWORD *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 32);
  sub_20BF4C200((_QWORD *)(a1 + 72), (_QWORD *)(a3 + 40));
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a3 + 56);
  return a1;
}

void sub_20C6A50B4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C6A50F8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C6A50F8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;

  sub_20BF4C2D8(a1 + 72);
  v2 = *(_QWORD *)(a1 + 56);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 40);
  if (v5)
    sub_20C35C614(v5);
  v6 = *(_QWORD *)(a1 + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v9)
    sub_20C35C614(v9);
  return a1;
}

void sub_20C6A51A0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_20C6A5224((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C6A5224(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  sub_20BF4C2D8(a2 + 40);
  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

uint64_t sub_20C6A5290(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C6A5304((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C6A5304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 64;
      sub_20C6A53BC(v7 - 64, v9);
      v7 = *((_QWORD *)&v15 + 1) - 64;
      *((_QWORD *)&v15 + 1) -= 64;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C6A54CC((uint64_t)v12);
  return v10;
}

void sub_20C6A53A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C6A54CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A53BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_20BF4C6D0((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

void sub_20C6A5480(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;

  v5 = *(_QWORD *)(v1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20BFD265C(v2);
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v1 + 8);
  if (v8)
    sub_20C35C614(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A54CC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C6A5500((uint64_t *)a1);
  return a1;
}

void sub_20C6A5500(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C6A5224(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **sub_20C6A5550(void **a1)
{
  sub_20C6A5580(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C6A5580(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 64;
    sub_20C6A5224(v4, i - 64);
  }
}

uint64_t sub_20C6A55C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v13 = 0x3FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20C00D6F0(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[64 * v10];
    v18 = &v14[64 * v13];
    sub_20C6A53BC((uint64_t)v16, a2);
    v17 = v16 + 64;
    sub_20C6A5290(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)sub_20C6A5550(&v15);
  }
  else
  {
    result = sub_20C6A53BC(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_20C6A56B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStageCache::Get(pxrInternal__aapl__pxrReserved__::UsdUtilsStageCache *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdStageCache *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BDF0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BDF0))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStageCache *)operator new(0x48uLL);
    pxrInternal__aapl__pxrReserved__::UsdStageCache::UsdStageCache(v3);
    qword_25498BDE8 = (uint64_t)v3;
    __cxa_guard_release(&qword_25498BDF0);
  }
  return qword_25498BDE8;
}

void sub_20C6A5738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25498BDF0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsStageCache::GetSessionLayerForVariantSelections(_QWORD *a1@<X0>, __int128 **a2@<X1>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  char *v12;
  uint64_t *EmptyString;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *p_p;
  std::string::size_type size;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 *v30;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  std::string::size_type v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int **v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  int v48;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v49;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v50;
  _OWORD *v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v52;
  std::string v53;
  std::string v54;
  std::string __p;
  __int128 i;
  std::string __dst;
  __int128 v58;
  uint64_t v59;

  v6 = *a2;
  v7 = a2[1];
  v59 = 0;
  v58 = 0uLL;
  sub_20C6A5F7C((char *)&v58, v6, v7, 0xAAAAAAAAAAAAAAABLL * (v7 - v6));
  v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 4));
  if (*((_QWORD *)&v58 + 1) == (_QWORD)v58)
    v9 = 0;
  else
    v9 = v8;
  sub_20C6A60A0(v58, *((const void ***)&v58 + 1), (uint64_t)&__p, v9, 1);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v14 = *(_OWORD *)EmptyString;
    __dst.__r_.__value_.__r.__words[2] = EmptyString[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v14;
  }
  for (i = v58; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C6A5E0C(&i))
  {
    sub_20C6A5D94(&i, v11, v12);
    std::operator+<char>();
    v15 = std::string::append(&v53, "=");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v19 = sub_20C6A5D94(&i, v17, v18);
    v20 = *(char *)(*v19 + 47);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(*v19 + 24);
    else
      v21 = *(const std::string::value_type **)(*v19 + 24);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(*v19 + 47);
    else
      v22 = *(_QWORD *)(*v19 + 32);
    v23 = std::string::append(&v54, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&__dst, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  *a3 = 0;
  v27 = atomic_load((unsigned __int8 *)&qword_25498BDF8);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_25498BDF8))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25473D248, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BDF8);
  }
  std::mutex::lock(&stru_25473D248);
  v28 = atomic_load((unsigned __int8 *)&qword_25498BE08);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_25498BE08))
  {
    v51 = operator new(0x28uLL);
    *v51 = 0u;
    v51[1] = 0u;
    *((_DWORD *)v51 + 8) = 1065353216;
    qword_25498BE00 = (uint64_t)v51;
    __cxa_guard_release(&qword_25498BE08);
  }
  v29 = qword_25498BE00;
  v30 = sub_20BEC301C((_QWORD *)qword_25498BE00, (unsigned __int8 *)&__dst);
  if (v30)
  {
    v31 = *a3;
    *a3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)v30 + 5);
    sub_20BF1DD04((uint64_t *)v30 + 5);
    sub_20BF1D8F4((int)a3, v31);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0uLL;
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54.__r_.__value_.__l.__size_;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v54, (uint64_t *)&i);
    sub_20BDE9D48((uint64_t)&v54, (_QWORD *)v54.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*a2 != a2[1])
    {
      v32 = sub_20C1034E8((uint64_t *)&v54, (uint64_t *)&i);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v32);
      memset(&__p, 0, sizeof(__p));
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((uint64_t *)&v54, 1, &v52);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v35 = v54.__r_.__value_.__l.__size_;
      if (v54.__r_.__value_.__l.__size_)
      {
        v36 = (unsigned int *)(v54.__r_.__value_.__l.__size_ + 8);
        do
        {
          v37 = __ldxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v35 + 8))(v35);
      }
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      while (v54.__r_.__value_.__r.__words[0] != v54.__r_.__value_.__l.__size_)
      {
        v39 = *sub_20C6A5E88(&v54, v33, v34);
        v40 = (unsigned int **)sub_20C0B0CA4(&v52);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(v40, &v53);
        v43 = sub_20C6A5E88(&v54, v41, v42);
        sub_20C18AA74((uint64_t *)&v53, *v43, (uint64_t **)&__p);
        sub_20C18AB6C((uint64_t)&__p, v39 + 24);
        v44 = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
        if (v53.__r_.__value_.__l.__size_)
        {
          v45 = (unint64_t *)(v53.__r_.__value_.__l.__size_ + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        sub_20C6A5F00(&v54);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v54.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v52);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v47 = sub_20C6A7944(v29, (unsigned __int8 *)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
    v48 = (_DWORD)v47 + 40;
    v49 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)v47 + 5);
    *((_QWORD *)v47 + 5) = i;
    sub_20BF1DD04((uint64_t *)&i);
    sub_20BF1D8F4(v48, v49);
    v50 = *a3;
    *a3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)i;
    sub_20BF1DD04((uint64_t *)&i);
    sub_20BF1D8F4((int)a3, v50);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&i);
  }
  std::mutex::unlock(&stru_25473D248);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  sub_20BE93030((void ***)&__dst);
}

void sub_20C6A5C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v37;
  uint64_t v38;

  __cxa_guard_abort(&qword_25498BE08);
  std::mutex::unlock(&stru_25473D248);
  sub_20C103234(v37);
  if (a37 < 0)
    operator delete(__p);
  __p = (void *)(v38 - 80);
  sub_20BE93030((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6A5D94(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<std::string, std::string>>>::op"
            "erator->() [T = std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C6A5E0C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<std::string, std:"
            ":string>>>::operator++() [T = std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

_QWORD *sub_20C6A5E88(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<std::string, std::string>"
            ">>::operator->() [T = const std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C6A5F00(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<std::string"
            ", std::string>>>::operator++() [T = const std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

char *sub_20C6A5F7C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20C02CC00(result, a4);
    result = sub_20C6A6000((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20C6A5FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BE93030(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C6A6000(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C107F98(v4, v6);
      v6 += 3;
      v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C2413F0((uint64_t)v8);
  return v4;
}

void sub_20C6A608C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2413F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6A60A0(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  char v23;
  BOOL v24;
  __int128 v25;
  const void *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

uint64_t sub_20C6A64B0(uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  const void **v17;
  const void **v18;
  const void **v19;
  int v20;
  const void **v21;
  const void **v22;
  const void **v23;
  int v24;
  size_t v25;
  const void **v26;
  size_t v27;
  const void **v28;
  size_t v29;
  int v30;

  v5 = *((char *)a3 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v5 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return 0;
  v19 = (const void **)a3[3];
  v18 = a3 + 3;
  v17 = v19;
  v20 = *((char *)v18 + 23);
  v23 = (const void **)a2[3];
  v22 = a2 + 3;
  v21 = v23;
  v24 = *((char *)v22 + 23);
  if (v24 >= 0)
    v25 = *((unsigned __int8 *)v22 + 23);
  else
    v25 = (size_t)v22[1];
  if (v24 >= 0)
    v26 = v22;
  else
    v26 = v21;
  if (v20 >= 0)
    v27 = *((unsigned __int8 *)v18 + 23);
  else
    v27 = (size_t)v18[1];
  if (v20 >= 0)
    v28 = v18;
  else
    v28 = v17;
  if (v27 >= v25)
    v29 = v25;
  else
    v29 = v27;
  v30 = memcmp(v26, v28, v29);
  if (v30)
    return v30 < 0;
  else
    return v25 < v27;
}

void sub_20C6A65D8(uint64_t a1, const void **a2, uint64_t a3)
{
  const void **v5;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13[2];
  const void *v14;
  __int128 __p;
  uint64_t v16;

  if ((const void **)a1 != a2)
  {
    v5 = (const void **)(a1 + 48);
    if ((const void **)(a1 + 48) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v5;
        if (sub_20C6A64B0(a3, v5, (const void **)v8))
        {
          *(_OWORD *)v13 = *(_OWORD *)v9;
          v14 = v9[2];
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          __p = *(_OWORD *)(v8 + 72);
          v16 = *(_QWORD *)(v8 + 88);
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 80) = 0;
          v10 = v7;
          *(_QWORD *)(v8 + 88) = 0;
          while (1)
          {
            sub_20C107E68(a1 + v10 + 48, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = sub_20C6A64B0(a3, (const void **)v13, (const void **)(a1 + v10 - 48));
            v10 -= 48;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 48;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          sub_20C107E68(v12, (__int128 *)v13);
          if (SHIBYTE(v16) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v14) < 0)
            operator delete(v13[0]);
        }
        v5 = v9 + 6;
        v7 += 48;
        v8 = (uint64_t)v9;
      }
      while (v9 + 6 != a2);
    }
  }
}

void sub_20C6A6704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6A6718(const void **a1, const void **a2, uint64_t a3)
{
  const void **v4;
  const void **v5;
  const void **v7;
  void *v8[2];
  const void *v9;
  __int128 __p;
  const void *v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      do
      {
        v7 = v5;
        if (sub_20C6A64B0(a3, v5, v4))
        {
          *(_OWORD *)v8 = *(_OWORD *)v7;
          v9 = v7[2];
          v7[1] = 0;
          v7[2] = 0;
          *v7 = 0;
          __p = *(_OWORD *)(v4 + 9);
          v11 = v4[11];
          v4[9] = 0;
          v4[10] = 0;
          v4[11] = 0;
          do
          {
            sub_20C107E68((uint64_t)(v4 + 6), (__int128 *)v4);
            v4 -= 6;
          }
          while ((sub_20C6A64B0(a3, (const void **)v8, v4) & 1) != 0);
          sub_20C107E68((uint64_t)(v4 + 6), (__int128 *)v8);
          if (SHIBYTE(v11) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v9) < 0)
            operator delete(v8[0]);
        }
        v5 = v7 + 6;
        v4 = v7;
      }
      while (v7 + 6 != a2);
    }
  }
}

void sub_20C6A6818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A682C(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v8 = sub_20C6A64B0(a4, (const void **)a2, (const void **)a1);
  result = sub_20C6A64B0(a4, (const void **)a3, (const void **)a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *a2;
    v19 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v19;
    *a3 = v18;
    *((_QWORD *)a3 + 2) = v17;
    v20 = *((_QWORD *)a2 + 5);
    v21 = *(__int128 *)((char *)a2 + 24);
    v22 = *((_QWORD *)a3 + 5);
    *(__int128 *)((char *)a2 + 24) = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)a2 + 5) = v22;
    *(__int128 *)((char *)a3 + 24) = v21;
    *((_QWORD *)a3 + 5) = v20;
    if (!sub_20C6A64B0(a4, (const void **)a2, (const void **)a1))
      return 1;
    v23 = *((_QWORD *)a1 + 2);
    v24 = *a1;
    v25 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v25;
    *a2 = v24;
    *((_QWORD *)a2 + 2) = v23;
    v26 = *((_QWORD *)a1 + 5);
    v27 = *(__int128 *)((char *)a1 + 24);
    v28 = *((_QWORD *)a2 + 5);
    *(__int128 *)((char *)a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a1 + 5) = v28;
    *(__int128 *)((char *)a2 + 24) = v27;
    *((_QWORD *)a2 + 5) = v26;
    return 2;
  }
  v10 = (__int128 *)((char *)a1 + 24);
  if (!(_DWORD)result)
  {
    v29 = *((_QWORD *)a1 + 2);
    v30 = *a1;
    v31 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v31;
    *a2 = v30;
    *((_QWORD *)a2 + 2) = v29;
    v32 = *((_QWORD *)a1 + 5);
    v33 = *v10;
    v34 = *((_QWORD *)a2 + 5);
    *v10 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a1 + 5) = v34;
    *(__int128 *)((char *)a2 + 24) = v33;
    *((_QWORD *)a2 + 5) = v32;
    if (!sub_20C6A64B0(a4, (const void **)a3, (const void **)a2))
      return 1;
    v35 = *((_QWORD *)a2 + 2);
    v36 = *a2;
    v37 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v37;
    *a3 = v36;
    *((_QWORD *)a3 + 2) = v35;
    v38 = *((_QWORD *)a2 + 5);
    v39 = *(__int128 *)((char *)a2 + 24);
    v40 = *((_QWORD *)a3 + 5);
    *(__int128 *)((char *)a2 + 24) = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)a2 + 5) = v40;
    *(__int128 *)((char *)a3 + 24) = v39;
    *((_QWORD *)a3 + 5) = v38;
    return 2;
  }
  v11 = *((_QWORD *)a1 + 2);
  v12 = *a1;
  v13 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v13;
  *a3 = v12;
  *((_QWORD *)a3 + 2) = v11;
  v14 = *((_QWORD *)a1 + 5);
  v15 = *v10;
  v16 = *((_QWORD *)a3 + 5);
  *v10 = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a1 + 5) = v16;
  *(__int128 *)((char *)a3 + 24) = v15;
  *((_QWORD *)a3 + 5) = v14;
  return 1;
}

unint64_t sub_20C6A6A20(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  unint64_t v7;
  const void **v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = a2;
  *(_OWORD *)v17 = *(_OWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)__p = v6;
  v20 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if ((sub_20C6A64B0(a3, (const void **)v17, (const void **)(a2 - 48)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 48;
    while ((sub_20C6A64B0(a3, (const void **)v17, (const void **)v7) & 1) == 0);
  }
  else
  {
    v8 = (const void **)(a1 + 48);
    do
    {
      v7 = (unint64_t)v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = sub_20C6A64B0(a3, (const void **)v17, v8);
      v8 = (const void **)(v7 + 48);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 -= 48;
    while ((sub_20C6A64B0(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v22 = *(_QWORD *)(v7 + 16);
    v21 = v10;
    v11 = *(_OWORD *)v4;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v7 = v11;
    v12 = v21;
    *(_QWORD *)(v4 + 16) = v22;
    *(_OWORD *)v4 = v12;
    v13 = *(_QWORD *)(v7 + 40);
    v14 = *(_OWORD *)(v7 + 24);
    v15 = *(_QWORD *)(v4 + 40);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(v7 + 40) = v15;
    *(_OWORD *)(v4 + 24) = v14;
    *(_QWORD *)(v4 + 40) = v13;
    do
      v7 += 48;
    while (!sub_20C6A64B0(a3, (const void **)v17, (const void **)v7));
    do
      v4 -= 48;
    while ((sub_20C6A64B0(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  if (v7 - 48 != a1)
    sub_20C107E68(a1, (__int128 *)(v7 - 48));
  sub_20C107E68(v7 - 48, (__int128 *)v17);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  return v7;
}

void sub_20C6A6BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *sub_20C6A6BF8(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  const void **v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  const void *v15;
  __int128 v16;
  const void *v17;
  __int128 *v18;
  void *v20[2];
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  const void *v25;

  v6 = 0;
  v21 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v20 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)__p = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  do
  {
    v8 = sub_20C6A64B0(a3, (const void **)(a1 + v6 + 48), (const void **)v20);
    v6 += 48;
  }
  while ((v8 & 1) != 0);
  v9 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v9 >= (unint64_t)a2)
        break;
      a2 -= 6;
    }
    while ((sub_20C6A64B0(a3, a2, (const void **)v20) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!sub_20C6A64B0(a3, a2, (const void **)v20));
  }
  if (v9 >= (unint64_t)a2)
  {
    v18 = (__int128 *)(v9 - 48);
  }
  else
  {
    v10 = a1 + v6;
    v11 = a2;
    do
    {
      v24 = *(_OWORD *)v10;
      v12 = v24;
      v25 = *(const void **)(v10 + 16);
      v13 = v25;
      v14 = v11[2];
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_QWORD *)(v10 + 16) = v14;
      v11[2] = v13;
      *(_OWORD *)v11 = v12;
      v15 = *(const void **)(v10 + 40);
      v16 = *(_OWORD *)(v10 + 24);
      v17 = v11[5];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 3);
      *(_QWORD *)(v10 + 40) = v17;
      *(_OWORD *)(v11 + 3) = v16;
      v11[5] = v15;
      do
        v10 += 48;
      while ((sub_20C6A64B0(a3, (const void **)v10, (const void **)v20) & 1) != 0);
      do
        v11 -= 6;
      while (!sub_20C6A64B0(a3, v11, (const void **)v20));
    }
    while (v10 < (unint64_t)v11);
    v18 = (__int128 *)(v10 - 48);
  }
  if (v18 != (__int128 *)a1)
    sub_20C107E68(a1, v18);
  sub_20C107E68((uint64_t)v18, (__int128 *)v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v18;
}

void sub_20C6A6DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C6A6DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  __int128 __p;
  uint64_t v26;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (_OWORD *)(a2 - 48);
      if (sub_20C6A64B0(a3, (const void **)(a2 - 48), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 32);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 32) = v9;
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(_OWORD *)(a1 + 24);
        v14 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 40) = v14;
        *(_OWORD *)(a2 - 24) = v13;
        *(_QWORD *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      sub_20C6A682C((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      sub_20C6A7034(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      sub_20C6A7184(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v15 = (const void **)(a1 + 96);
      sub_20C6A682C((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v16 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    if (sub_20C6A64B0(a3, (const void **)v16, v15))
    {
      *(_OWORD *)v23 = *(_OWORD *)v16;
      v24 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v19 = *(_OWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      __p = v19;
      v26 = *(_QWORD *)(v16 + 40);
      v20 = v17;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      while (1)
      {
        sub_20C107E68(a1 + v20 + 144, (__int128 *)(a1 + v20 + 96));
        if (v20 == -96)
          break;
        v21 = sub_20C6A64B0(a3, (const void **)v23, (const void **)(a1 + v20 + 48));
        v20 -= 48;
        if ((v21 & 1) == 0)
        {
          v22 = a1 + v20 + 144;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      sub_20C107E68(v22, (__int128 *)v23);
      if (SHIBYTE(v26) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      if (++v18 == 8)
        return v16 + 48 == a2;
    }
    v15 = (const void **)v16;
    v17 += 48;
    v16 += 48;
    if (v16 == a2)
      return 1;
  }
}

void sub_20C6A7020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C6A7034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_20C6A682C((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if (sub_20C6A64B0(a5, (const void **)a4, (const void **)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    v14 = *(_QWORD *)(a3 + 40);
    v15 = *(_OWORD *)(a3 + 24);
    v16 = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 40) = v16;
    *(_OWORD *)(a4 + 24) = v15;
    *(_QWORD *)(a4 + 40) = v14;
    if (sub_20C6A64B0(a5, (const void **)a3, (const void **)a2))
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(_QWORD *)(a3 + 16) = v17;
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(_OWORD *)(a2 + 24);
      v22 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v22;
      *(_OWORD *)(a3 + 24) = v21;
      *(_QWORD *)(a3 + 40) = v20;
      if (sub_20C6A64B0(a5, (const void **)a2, (const void **)a1))
      {
        v23 = *(_QWORD *)(a1 + 16);
        v24 = *(_OWORD *)a1;
        v25 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v25;
        *(_OWORD *)a2 = v24;
        *(_QWORD *)(a2 + 16) = v23;
        v26 = *(_QWORD *)(a1 + 40);
        result = *(__n128 *)(a1 + 24);
        v27 = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = v27;
        *(__n128 *)(a2 + 24) = result;
        *(_QWORD *)(a2 + 40) = v26;
      }
    }
  }
  return result;
}

__n128 sub_20C6A7184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_20C6A7034(a1, a2, a3, a4, a6);
  if (sub_20C6A64B0(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *(_QWORD *)(a4 + 16);
    v14 = *(_OWORD *)a4;
    v15 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v15;
    *(_OWORD *)a5 = v14;
    *(_QWORD *)(a5 + 16) = v13;
    v16 = *(_QWORD *)(a4 + 40);
    v17 = *(_OWORD *)(a4 + 24);
    v18 = *(_QWORD *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_QWORD *)(a4 + 40) = v18;
    *(_OWORD *)(a5 + 24) = v17;
    *(_QWORD *)(a5 + 40) = v16;
    if (sub_20C6A64B0(a6, (const void **)a4, (const void **)a3))
    {
      v19 = *(_QWORD *)(a3 + 16);
      v20 = *(_OWORD *)a3;
      v21 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v19;
      v22 = *(_QWORD *)(a3 + 40);
      v23 = *(_OWORD *)(a3 + 24);
      v24 = *(_QWORD *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_QWORD *)(a3 + 40) = v24;
      *(_OWORD *)(a4 + 24) = v23;
      *(_QWORD *)(a4 + 40) = v22;
      if (sub_20C6A64B0(a6, (const void **)a3, (const void **)a2))
      {
        v25 = *(_QWORD *)(a2 + 16);
        v26 = *(_OWORD *)a2;
        v27 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v27;
        *(_OWORD *)a3 = v26;
        *(_QWORD *)(a3 + 16) = v25;
        v28 = *(_QWORD *)(a2 + 40);
        v29 = *(_OWORD *)(a2 + 24);
        v30 = *(_QWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_QWORD *)(a2 + 40) = v30;
        *(_OWORD *)(a3 + 24) = v29;
        *(_QWORD *)(a3 + 40) = v28;
        if (sub_20C6A64B0(a6, (const void **)a2, (const void **)a1))
        {
          v31 = *(_QWORD *)(a1 + 16);
          v32 = *(_OWORD *)a1;
          v33 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v33;
          *(_OWORD *)a2 = v32;
          *(_QWORD *)(a2 + 16) = v31;
          v34 = *(_QWORD *)(a1 + 40);
          result = *(__n128 *)(a1 + 24);
          v35 = *(_QWORD *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 40) = v35;
          *(__n128 *)(a2 + 24) = result;
          *(_QWORD *)(a2 + 40) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C6A7338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 48 * v10;
      do
      {
        sub_20C6A74B4(a1, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = (_OWORD *)(a1 + 24);
      v15 = v6;
      do
      {
        if (sub_20C6A64B0(a4, (const void **)v15, (const void **)a1))
        {
          v16 = *(_QWORD *)(v15 + 16);
          v17 = *(_OWORD *)v15;
          v18 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v15 = *(_OWORD *)a1;
          *(_QWORD *)(v15 + 16) = v18;
          *(_OWORD *)a1 = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_QWORD *)(v15 + 40);
          v20 = *(_OWORD *)(v15 + 24);
          v21 = *(_QWORD *)(a1 + 40);
          *(_OWORD *)(v15 + 24) = *v14;
          *(_QWORD *)(v15 + 40) = v21;
          *v14 = v20;
          *(_QWORD *)(a1 + 40) = v19;
          sub_20C6A74B4(a1, a4, v9, a1);
        }
        v15 += 48;
      }
      while (v15 != a3);
      v13 = a3;
    }
    if (v8 >= 49)
    {
      v22 = v8 / 0x30uLL;
      do
      {
        sub_20C6A7664(a1, v6, a4, v22);
        v6 -= 48;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_20C6A74B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      v10 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      v11 = a1 + 48 * v10;
      v12 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v12 < a3 && sub_20C6A64B0(a2, (const void **)(a1 + 48 * v10), (const void **)(v11 + 48)))
      {
        v11 += 48;
        v10 = v12;
      }
      if ((sub_20C6A64B0(a2, (const void **)v11, (const void **)v5) & 1) == 0)
      {
        *(_OWORD *)v16 = *(_OWORD *)v5;
        v17 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v13 = *(_OWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_OWORD *)__p = v13;
        v19 = *(_QWORD *)(v5 + 40);
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = 0;
        do
        {
          v14 = v11;
          sub_20C107E68(v5, (__int128 *)v11);
          if (v7 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = a1 + 48 * v15;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v15;
          }
          else if (sub_20C6A64B0(a2, (const void **)(a1 + 48 * v15), (const void **)(v11 + 48)))
          {
            v11 += 48;
          }
          else
          {
            v10 = v15;
          }
          v5 = v14;
        }
        while (!sub_20C6A64B0(a2, (const void **)v11, (const void **)v16));
        sub_20C107E68(v14, (__int128 *)v16);
        if (SHIBYTE(v19) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
    }
  }
}

void sub_20C6A7650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6A7664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (a4 >= 2)
  {
    *(_OWORD *)v11 = *(_OWORD *)a1;
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)__p = v7;
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v8 = sub_20C6A776C(a1, a3, a4);
    v9 = v8;
    v10 = (__int128 *)(a2 - 48);
    if (v8 == v10)
    {
      sub_20C107E68((uint64_t)v8, (__int128 *)v11);
    }
    else
    {
      sub_20C107E68((uint64_t)v8, v10);
      sub_20C107E68((uint64_t)v10, (__int128 *)v11);
      sub_20C6A7828(a1, (uint64_t)(v9 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
}

void sub_20C6A7758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *sub_20C6A776C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 48 * v6 + 48);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && sub_20C6A64B0(a2, (const void **)(a1 + 48 * v6 + 48), (const void **)(a1 + 48 * v6 + 96)))
    {
      v9 += 3;
      v10 = v11;
    }
    sub_20C107E68(a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void sub_20C6A7828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (a4 >= 2)
  {
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = (__int128 *)(a1 + 48 * v7);
    v9 = a2 - 48;
    if (sub_20C6A64B0(a3, (const void **)v8, (const void **)(a2 - 48)))
    {
      *(_OWORD *)v11 = *(_OWORD *)v9;
      v12 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      *(_OWORD *)__p = *(_OWORD *)(a2 - 24);
      v14 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        sub_20C107E68(v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 48 * v7);
        v9 = v10;
      }
      while ((sub_20C6A64B0(a3, (const void **)v8, (const void **)v11) & 1) != 0);
      sub_20C107E68(v10, (__int128 *)v11);
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12) < 0)
        operator delete(v11[0]);
    }
  }
}

void sub_20C6A7930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C6A7944(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20C6A7C08(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C6A7CA4((uint64_t)&v26, 0);
  return i;
}

void sub_20C6A7BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C6A7CA4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C6A7C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C6A7C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6A7CA4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C6A7CA4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C6A7CE8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C6A7CE8(uint64_t a1)
{
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsStitchInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsStitchInfo(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C6A7DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  uint64_t **v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)sub_20BFD5244(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v28);
  v7 = sub_20BFD5244(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v26);
  v8 = (uint64_t **)sub_20BFD5244(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, &v24);
  v9 = sub_20BFD5244(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v9, &v22);
  v32[0] = &unk_24C541370;
  v32[1] = sub_20C6A80C4;
  v32[2] = a3;
  v33 = v32;
  v30[0] = &unk_24C541418;
  v30[1] = sub_20C6A90B8;
  v31 = v30;
  pxrInternal__aapl__pxrReserved__::SdfCopySpec(&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, &v24, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (int *)v32, (const char *)v30);
  v10 = v31;
  if (v31 == v30)
  {
    v11 = 4;
    v10 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v33;
  if (v33 == v32)
  {
    v13 = 4;
    v12 = v32;
    goto LABEL_10;
  }
  if (v33)
  {
    v13 = 5;
LABEL_10:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  v14 = v25;
  if (v25)
  {
    v15 = (unsigned int *)(v25 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  result = v29;
  if (v29)
  {
    v19 = (unsigned int *)(v29 + 8);
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C6A7FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C6A80C4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t *a6, pxrInternal__aapl__pxrReserved__::SdfPath *a7, int a8, _QWORD *a9, uint64_t a10)
{
  BOOL v10;
  int v18;
  int v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v27;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  _QWORD *Fallback;
  _QWORD *v30;
  char HasField;
  char v32;
  _QWORD *v33;
  char v34;
  char v35;
  int v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  char *v38;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  uint64_t *v41;
  double *v42;
  double **v43;
  BOOL v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  char v53;
  _QWORD *v54;
  char v55;
  char v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  char v61;
  _QWORD *v62;
  char v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  _QWORD *v69;
  char v70;
  char v71;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v72;
  uint64_t Identifier;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v83;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v84;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v85;
  uint64_t v86;
  uint64_t v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v92;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v93;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v94;
  uint64_t v95;
  uint64_t v96;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD **v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t (*v105)(_QWORD, uint64_t);
  double v106;
  _QWORD *v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  double *v111;
  uint64_t *v112[2];
  char *v113;
  double *v114;
  uint64_t v115;
  const char *v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a4 != *(_QWORD *)a7)
  {
    v113 = "usdUtils/stitch.cpp";
    v114 = (double *)"_MergeValueFn";
    v115 = 140;
    v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &, con"
           "st SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optional<VtVa"
           "lue> *, const UsdUtilsStitchValueFn &)";
    v117 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcPath == dstPath", 0);
  }
  if (!*(_QWORD *)(a10 + 24))
  {
    v10 = a5;
    goto LABEL_13;
  }
  v114 = 0;
  v18 = sub_20C6A9BB8(a10, (uint64_t)a2, (uint64_t)a4, (uint64_t)a6, a8, (uint64_t)a3, a5, (uint64_t)&v113);
  if (v18)
  {
    if (v18 == 2)
    {
      v110 = 0;
      sub_20C0E2644((uint64_t)a9, &v109);
      sub_20BF4C2D8((uint64_t)&v109);
      sub_20BFD3C3C(a9, &v113);
      v19 = 1;
      v10 = 1;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v10 = 0;
    v19 = 1;
  }
  sub_20BF4C2D8((uint64_t)&v113);
  if (!v19)
    v10 = a5;
  if ((v19 & 1) == 0)
  {
LABEL_13:
    if (!a5 || !a8)
      return v10;
    v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20)
      v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v20 + 39) & 0xFFFFFFFFFFFFFFF8))
    {
      LODWORD(v109) = 0;
      LODWORD(v106) = 0;
      v30 = (_QWORD *)sub_20BFCF650(a3);
      v115 = (uint64_t)&stru_24C527CB0;
      LOWORD(v116) = 0;
      v113 = (char *)&unk_24C539DB8;
      v114 = &v109;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v30, a4, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
      if ((_BYTE)v116)
        v32 = 0;
      else
        v32 = HasField;
      if ((v32 & 1) == 0)
      {
        v113 = "usdUtils/stitch.cpp";
        v114 = (double *)"_MergeValueFn";
        v115 = 178;
        v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &,"
               " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optio"
               "nal<VtValue> *, const UsdUtilsStitchValueFn &)";
        v117 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcLayer->HasField(srcPath, field, &srcSpecifier)", 0);
      }
      v33 = (_QWORD *)sub_20BFCF650(a6);
      v114 = &v106;
      v115 = (uint64_t)&stru_24C527CB0;
      LOWORD(v116) = 0;
      v113 = (char *)&unk_24C539DB8;
      v34 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v33, a7, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
      if ((_BYTE)v116)
        v35 = 0;
      else
        v35 = v34;
      if ((v35 & 1) == 0)
      {
        v113 = "usdUtils/stitch.cpp";
        v114 = (double *)"_MergeValueFn";
        v115 = 179;
        v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &,"
               " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optio"
               "nal<VtValue> *, const UsdUtilsStitchValueFn &)";
        v117 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "dstLayer->HasField(dstPath, field, &dstSpecifier)", 0);
      }
      v36 = LODWORD(v109);
      v114 = (double *)((char *)&off_24C527CC0 + 3);
      if (LODWORD(v109) == 1)
        v36 = LODWORD(v106);
      LODWORD(v113) = v36;
      sub_20C0E2644((uint64_t)a9, &v113);
      goto LABEL_99;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v21)
      v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v21 + 54) & 0xFFFFFFFFFFFFFFF8))
    {
      v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22)
        v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v109 = 0.0;
        v106 = 0.0;
        v50 = (_QWORD *)sub_20BFCF650(a3);
        v51 = MEMORY[0x24BEDB780];
        v115 = MEMORY[0x24BEDB780];
        LOWORD(v116) = 0;
        v113 = (char *)&unk_24C52D858;
        v114 = &v109;
        v52 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v50, a4, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
        if ((_BYTE)v116)
          v53 = 0;
        else
          v53 = v52;
        if ((v53 & 1) == 0)
        {
          v113 = "usdUtils/stitch.cpp";
          v114 = (double *)"_MergeValueFn";
          v115 = 209;
          v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken "
                 "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::o"
                 "ptional<VtValue> *, const UsdUtilsStitchValueFn &)";
          v117 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcLayer->HasField(srcPath, field, &srcStartCode)", 0);
        }
        v54 = (_QWORD *)sub_20BFCF650(a6);
        v114 = &v106;
        v115 = v51;
        LOWORD(v116) = 0;
        v113 = (char *)&unk_24C52D858;
        v55 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v54, a7, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
        if ((_BYTE)v116)
          v56 = 0;
        else
          v56 = v55;
        if ((v56 & 1) == 0)
        {
          v113 = "usdUtils/stitch.cpp";
          v114 = (double *)"_MergeValueFn";
          v115 = 210;
          v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken "
                 "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::o"
                 "ptional<VtValue> *, const UsdUtilsStitchValueFn &)";
          v117 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "dstLayer->HasField(dstPath, field, &dstStartCode)", 0);
        }
        *(double *)&v57 = v106;
        v114 = (double *)&unk_24C52064B;
        if (v106 >= v109)
          *(double *)&v57 = v109;
      }
      else
      {
        v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v23)
          v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v23 + 18) & 0xFFFFFFFFFFFFFFF8))
        {
          v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v24)
            v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 21) & 0xFFFFFFFFFFFFFFF8))
          {
            v109 = 0.0;
            v106 = 0.0;
            v65 = (_QWORD *)sub_20BFCF650(a3);
            v66 = MEMORY[0x24BEDB780];
            v115 = MEMORY[0x24BEDB780];
            LOWORD(v116) = 0;
            v113 = (char *)&unk_24C52D858;
            v114 = &v109;
            v67 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v65, a4, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
            if ((_BYTE)v116)
              v68 = 0;
            else
              v68 = v67;
            if ((v68 & 1) == 0)
            {
              v113 = "usdUtils/stitch.cpp";
              v114 = (double *)"_MergeValueFn";
              v115 = 226;
              v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              v117 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcLayer->HasField(srcPath, field, &srcFPS)", 0);
            }
            v69 = (_QWORD *)sub_20BFCF650(a6);
            v114 = &v106;
            v115 = v66;
            LOWORD(v116) = 0;
            v113 = (char *)&unk_24C52D858;
            v70 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v69, a7, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
            if ((_BYTE)v116)
              v71 = 0;
            else
              v71 = v70;
            if ((v71 & 1) == 0)
            {
              v113 = "usdUtils/stitch.cpp";
              v114 = (double *)"_MergeValueFn";
              v115 = 227;
              v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              v117 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "dstLayer->HasField(dstPath, field, &dstFPS)", 0);
            }
            if (v109 != v106)
            {
              v113 = "usdUtils/stitch.cpp";
              v114 = (double *)"_MergeValueFn";
              v115 = 232;
              v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              v117 = 0;
              v72 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
              Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v72);
              if (*(char *)(Identifier + 23) >= 0)
                v74 = Identifier;
              else
                v74 = *(_QWORD *)Identifier;
              v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a6);
              v76 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v75);
              if (*(char *)(v76 + 23) >= 0)
                v78 = v76;
              else
                v78 = *(_QWORD *)v76;
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v113, (pxrInternal__aapl__pxrReserved__ *)"Mismatched framesPerSecond values in @%s@ and @%s@", v77, v74, v78);
            }
          }
          else
          {
            v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v25)
              v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 55) & 0xFFFFFFFFFFFFFFF8))
            {
              v109 = 0.0;
              v106 = 0.0;
              v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
              if ((sub_20C34AD48(v83, a4, a2, (uint64_t (**)(_QWORD, uint64_t))&v109) & 1) == 0)
              {
                v113 = "usdUtils/stitch.cpp";
                v114 = (double *)"_MergeValueFn";
                v115 = 238;
                v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const Tf"
                       "Token &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, "
                       "BOOL, std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
                v117 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcLayer->HasField(srcPath, field, &srcTPS)", 0);
              }
              v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a6);
              if ((sub_20C34AD48(v84, a7, a2, (uint64_t (**)(_QWORD, uint64_t))&v106) & 1) == 0)
              {
                v113 = "usdUtils/stitch.cpp";
                v114 = (double *)"_MergeValueFn";
                v115 = 239;
                v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const Tf"
                       "Token &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, "
                       "BOOL, std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
                v117 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "dstLayer->HasField(dstPath, field, &dstTPS)", 0);
              }
              if (v109 != v106)
              {
                v113 = "usdUtils/stitch.cpp";
                v114 = (double *)"_MergeValueFn";
                v115 = 244;
                v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const Tf"
                       "Token &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, "
                       "BOOL, std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
                v117 = 0;
                v85 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
                v86 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v85);
                if (*(char *)(v86 + 23) >= 0)
                  v87 = v86;
                else
                  v87 = *(_QWORD *)v86;
                v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a6);
                v89 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v88);
                if (*(char *)(v89 + 23) >= 0)
                  v91 = v89;
                else
                  v91 = *(_QWORD *)v89;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v113, (pxrInternal__aapl__pxrReserved__ *)"Mismatched timeCodesPerSecond values in @%s@ and @%s@", v90, v87, v91);
              }
            }
            else
            {
              v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v26)
                v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v26 + 20) & 0xFFFFFFFFFFFFFFF8))
              {
                v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
                Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v27);
                Fallback = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, a2);
                sub_20BF4C6D0(&v113, Fallback);
                v10 = sub_20C6A9C00(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6A9E94(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AA114(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AA784(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AADF4(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AB464(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6ABAEC(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AC174(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AC7FC(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6ACE84(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9)
                   || sub_20C6AD50C(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v113, a6, a7, a3, a4, a9);
                sub_20BF4C2D8((uint64_t)&v113);
                return v10;
              }
              v109 = 0.0;
              v106 = 0.0;
              v92 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
              if ((sub_20C34AD48(v92, a4, a2, (uint64_t (**)(_QWORD, uint64_t))&v109) & 1) == 0)
              {
                v113 = "usdUtils/stitch.cpp";
                v114 = (double *)"_MergeValueFn";
                v115 = 250;
                v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const Tf"
                       "Token &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, "
                       "BOOL, std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
                v117 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcLayer->HasField(srcPath, field, &srcPrecision)", 0);
              }
              v93 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a6);
              if ((sub_20C34AD48(v93, a7, a2, (uint64_t (**)(_QWORD, uint64_t))&v106) & 1) == 0)
              {
                v113 = "usdUtils/stitch.cpp";
                v114 = (double *)"_MergeValueFn";
                v115 = 251;
                v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const Tf"
                       "Token &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, "
                       "BOOL, std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
                v117 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "dstLayer->HasField(dstPath, field, &dstPrecision)", 0);
              }
              if (v109 != v106)
              {
                v113 = "usdUtils/stitch.cpp";
                v114 = (double *)"_MergeValueFn";
                v115 = 256;
                v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const Tf"
                       "Token &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, "
                       "BOOL, std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
                v117 = 0;
                v94 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
                v95 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v94);
                if (*(char *)(v95 + 23) >= 0)
                  v96 = v95;
                else
                  v96 = *(_QWORD *)v95;
                v97 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a6);
                v98 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v97);
                if (*(char *)(v98 + 23) >= 0)
                  v100 = v98;
                else
                  v100 = *(_QWORD *)v98;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v113, (pxrInternal__aapl__pxrReserved__ *)"Mismatched framePrecision values in @%s@ and @%s@", v99, v96, v100);
              }
            }
          }
          return 0;
        }
        v109 = 0.0;
        v106 = 0.0;
        v58 = (_QWORD *)sub_20BFCF650(a3);
        v59 = MEMORY[0x24BEDB780];
        v115 = MEMORY[0x24BEDB780];
        LOWORD(v116) = 0;
        v113 = (char *)&unk_24C52D858;
        v114 = &v109;
        v60 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v58, a4, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
        if ((_BYTE)v116)
          v61 = 0;
        else
          v61 = v60;
        if ((v61 & 1) == 0)
        {
          v113 = "usdUtils/stitch.cpp";
          v114 = (double *)"_MergeValueFn";
          v115 = 216;
          v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken "
                 "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::o"
                 "ptional<VtValue> *, const UsdUtilsStitchValueFn &)";
          v117 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "srcLayer->HasField(srcPath, field, &srcEndCode)", 0);
        }
        v62 = (_QWORD *)sub_20BFCF650(a6);
        v114 = &v106;
        v115 = v59;
        LOWORD(v116) = 0;
        v113 = (char *)&unk_24C52D858;
        v63 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v62, a7, a2, (uint64_t (***)(_QWORD, uint64_t))&v113);
        if ((_BYTE)v116)
          v64 = 0;
        else
          v64 = v63;
        if ((v64 & 1) == 0)
        {
          v113 = "usdUtils/stitch.cpp";
          v114 = (double *)"_MergeValueFn";
          v115 = 217;
          v116 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken "
                 "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::o"
                 "ptional<VtValue> *, const UsdUtilsStitchValueFn &)";
          v117 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v113, "dstLayer->HasField(dstPath, field, &dstEndCode)", 0);
        }
        *(double *)&v57 = v109;
        v114 = (double *)&unk_24C52064B;
        if (v109 < v106)
          *(double *)&v57 = v106;
      }
      v113 = (char *)v57;
      sub_20C0E2644((uint64_t)a9, &v113);
LABEL_99:
      sub_20BF4C2D8((uint64_t)&v113);
      return 1;
    }
    v107 = 0;
    v108 = 0;
    v106 = COERCE_DOUBLE(&v107);
    v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath((uint64_t *)&v113, v37, a4);
    v38 = v113;
    if (v113 != (char *)&v114)
    {
      do
      {
        v105 = (uint64_t (*)(_QWORD, uint64_t))*((_QWORD *)v38 + 4);
        v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a6);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v39, a7, *(double *)&v105, 0) & 1) == 0)
        {
          v110 = 0;
          v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
          pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v40, a4, *(double *)&v105, (pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
          v112[0] = (uint64_t *)&v105;
          v41 = sub_20C0E7D0C((uint64_t **)&v106, (double *)&v105, (uint64_t)&unk_20CAC184C, v112);
          sub_20BFD3C3C(v41 + 5, &v109);
          sub_20BF4C2D8((uint64_t)&v109);
        }
        v42 = (double *)*((_QWORD *)v38 + 1);
        if (v42)
        {
          do
          {
            v43 = (double **)v42;
            v42 = *(double **)v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (double **)*((_QWORD *)v38 + 2);
            v44 = *v43 == (double *)v38;
            v38 = (char *)v43;
          }
          while (!v44);
        }
        v38 = (char *)v43;
      }
      while (v43 != &v114);
    }
    sub_20BE6100C((uint64_t)&v113, v114);
    v10 = v108 != 0;
    if (!v108)
    {
LABEL_130:
      sub_20BFED2B4((uint64_t)&v106, v107);
      return v10;
    }
    sub_20BFECEF8((uint64_t *)&v102, (uint64_t)&v106);
    v111 = 0;
    v45 = operator new(0x20uLL);
    v47 = (uint64_t)v102;
    v46 = v103;
    *v45 = off_24C5411F0;
    v45[1] = v47;
    v45[2] = v46;
    v48 = v45 + 2;
    v49 = v104;
    v45[3] = v104;
    if (v49)
    {
      v46[2] = v48;
      v102 = &v103;
      v103 = 0;
      v104 = 0;
    }
    else
    {
      v45[1] = v48;
    }
    v111 = (double *)v45;
    v116 = (const char *)sub_20C6ADBFC((uint64_t)v45);
    v112[1] = (uint64_t *)&off_24C541270;
    sub_20C6ADFC8((unsigned int **)v112, (uint64_t)&v113);
    sub_20C0E2644((uint64_t)a9, v112);
    sub_20BF4C2D8((uint64_t)v112);
    v79 = (char **)v116;
    if (v116 == (const char *)&v113)
    {
      v80 = 4;
      v79 = &v113;
    }
    else
    {
      if (!v116)
        goto LABEL_124;
      v80 = 5;
    }
    (*(void (**)(void))&(*v79)[8 * v80])();
LABEL_124:
    v81 = v111;
    if (v111 == &v109)
    {
      v82 = 4;
      v81 = &v109;
    }
    else
    {
      if (!v111)
      {
LABEL_129:
        sub_20BFED2B4((uint64_t)&v102, v103);
        goto LABEL_130;
      }
      v82 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v81 + 8 * v82))();
    goto LABEL_129;
  }
  return v10;
}

void sub_20C6A8FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20BF4C2D8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A90B8()
{
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C6A9148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v14[0] = &unk_24C541370;
  v14[1] = sub_20C6A80C4;
  v14[2] = a3;
  v15 = v14;
  v12[0] = &unk_24C541418;
  v12[1] = sub_20C6A9314;
  v13 = v12;
  pxrInternal__aapl__pxrReserved__::SdfCopySpec(a2, v6, (uint64_t *)a1, v7, (int *)v14, (const char *)v12);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C6A92A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6A9314(const pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  _QWORD *Fallback;
  pxrInternal__aapl__pxrReserved__::VtValue *v19;
  _QWORD *v20;
  char HasField;
  char v22;
  _QWORD *v23;
  char v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  void ***v39;
  const std::type_info *v40;
  char *v41;
  _QWORD *v42;
  char v43;
  char v44;
  _QWORD *v45;
  char v46;
  char v47;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;
  int *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  void ***v56;
  unint64_t v57;
  const char *v58;
  const char *v59;
  void *__p;
  char *v62;
  unint64_t v63;
  const char *v64;
  char v65;
  char *v66;
  char *v67;
  unint64_t v68;
  const char *v69;
  char v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD v77[2];
  void **p_p;
  uint64_t **v79;
  std::type_info *v80;
  __int16 v81;
  uint64_t v82;

  v9 = a4;
  v82 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a4 && a7)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v16);
    Fallback = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, a1);
    v19 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v77, Fallback);
    if (sub_20BFD222C(v19))
    {
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v20 = (_QWORD *)sub_20BFCF650(a2);
      v80 = &stru_24C51BCF0;
      v81 = 0;
      p_p = (void **)&unk_24C528DB0;
      v79 = &v74;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v20, a3, a1, (uint64_t (***)(_QWORD, uint64_t))&p_p);
      if ((_BYTE)v81)
        v22 = 0;
      else
        v22 = HasField;
      if ((v22 & 1) != 0
        || (v66 = "usdUtils/stitch.cpp",
            v67 = "_MergeChildren",
            v68 = 315,
            v69 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const Vt"
                  "Value &, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::option"
                  "al<VtValue> *, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>]",
            v70 = 0,
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v66, "srcLayer->HasField(srcPath, field, &srcChildren)", 0)))
      {
        v23 = (_QWORD *)sub_20BFCF650(a5);
        v79 = &v71;
        v80 = &stru_24C51BCF0;
        v81 = 0;
        p_p = (void **)&unk_24C528DB0;
        v24 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v23, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&p_p);
        v25 = (_BYTE)v81 ? 0 : v24;
        if ((v25 & 1) != 0
          || (__p = "usdUtils/stitch.cpp",
              v62 = "_MergeChildren",
              v63 = 316,
              v64 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const "
                    "VtValue &, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::op"
                    "tional<VtValue> *, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>]",
              v65 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "dstLayer->HasField(dstPath, field, &dstChildren)", 0) & 1) != 0))
        {
          sub_20C143C84(&v66, v72 - v71);
          __p = 0;
          v62 = 0;
          v63 = 0;
          sub_20BFE538C(&__p, v71, v72, v72 - v71);
          v26 = v74;
          v27 = v75;
          while (v26 != v27)
          {
            if (__p == v62)
            {
              v28 = (char *)__p;
            }
            else
            {
              v28 = (char *)__p;
              while ((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8) != (*v26 & 0xFFFFFFFFFFFFFFF8))
              {
                v28 += 8;
                if (v28 == v62)
                {
                  v28 = v62;
                  break;
                }
              }
            }
            if (v28 == v62)
            {
              v29 = v67;
              if ((unint64_t)v67 >= v68)
              {
                v33 = sub_20BFCA068(&v66, v26);
              }
              else
              {
                v30 = *v26;
                *(_QWORD *)v67 = *v26;
                if ((v30 & 7) != 0)
                {
                  v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v32 = __ldxr(v31);
                  while (__stxr(v32 + 2, v31));
                  if ((v32 & 1) == 0)
                    *(_QWORD *)v29 &= 0xFFFFFFFFFFFFFFF8;
                }
                v33 = v29 + 8;
              }
              v67 = v33;
              v34 = v62;
              if ((unint64_t)v62 >= v63)
              {
                v38 = sub_20BFCA068((char **)&__p, v26);
              }
              else
              {
                v35 = *v26;
                *(_QWORD *)v62 = *v26;
                if ((v35 & 7) != 0)
                {
                  v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v37 = __ldxr(v36);
                  while (__stxr(v37 + 2, v36));
                  if ((v37 & 1) == 0)
                    *(_QWORD *)v34 &= 0xFFFFFFFFFFFFFFF8;
                }
                v38 = v34 + 8;
              }
              v62 = v38;
            }
            else
            {
              sub_20BF32220(&v66[8 * ((v28 - (_BYTE *)__p) >> 3)], v26);
            }
            ++v26;
          }
          sub_20C6B0540((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
          sub_20C0E2644(a8, &p_p);
          sub_20BF4C2D8((uint64_t)&p_p);
          sub_20C6B0540((uint64_t **)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
          sub_20C0E2644(a9, &p_p);
          v39 = (void ***)sub_20BF4C2D8((uint64_t)&p_p);
          p_p = &__p;
          sub_20BEEB2B8(v39);
          __p = &v66;
          sub_20BEEB2B8((void ***)&__p);
          v66 = (char *)&v71;
          sub_20BEEB2B8((void ***)&v66);
          v66 = (char *)&v74;
          sub_20BEEB2B8((void ***)&v66);
          goto LABEL_73;
        }
      }
      v66 = (char *)&v71;
      sub_20BEEB2B8((void ***)&v66);
      v66 = (char *)&v74;
      sub_20BEEB2B8((void ***)&v66);
    }
    if (!sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)v77))
    {
LABEL_78:
      v66 = "usdUtils/stitch.cpp";
      v67 = "_MergeChildrenFn";
      v68 = 376;
      v69 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildrenFn(const TfToken &, const SdfLay"
            "erHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optional<VtValue> *, "
            "std::optional<VtValue> *)";
      v70 = 0;
      v57 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v57)
      {
        v58 = (const char *)(v57 + 16);
        if (*(char *)(v57 + 39) < 0)
          v58 = *(const char **)v58;
      }
      else
      {
        v58 = "";
      }
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v77, v40, v41, (uint64_t)&__p);
      if ((v63 & 0x8000000000000000) == 0)
        v59 = (const char *)&__p;
      else
        v59 = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v66, 1, (pxrInternal__aapl__pxrReserved__ *)"Children field '%s' holding unexpected type '%s'", v58, v59);
      if (SHIBYTE(v63) < 0)
        operator delete(__p);
      v9 = 0;
      goto LABEL_88;
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v42 = (_QWORD *)sub_20BFCF650(a2);
    v80 = &stru_24C5269C8;
    v81 = 0;
    p_p = (void **)&unk_24C528110;
    v79 = &v74;
    v43 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v42, a3, a1, (uint64_t (***)(_QWORD, uint64_t))&p_p);
    if ((_BYTE)v81)
      v44 = 0;
    else
      v44 = v43;
    if ((v44 & 1) == 0)
    {
      v66 = "usdUtils/stitch.cpp";
      v67 = "_MergeChildren";
      v68 = 315;
      v69 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const VtValue "
            "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> "
            "*, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>]";
      v70 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v66, "srcLayer->HasField(srcPath, field, &srcChildren)", 0))goto LABEL_77;
    }
    v45 = (_QWORD *)sub_20BFCF650(a5);
    v79 = &v71;
    v80 = &stru_24C5269C8;
    v81 = 0;
    p_p = (void **)&unk_24C528110;
    v46 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v45, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&p_p);
    v47 = (_BYTE)v81 ? 0 : v46;
    if ((v47 & 1) == 0)
    {
      __p = "usdUtils/stitch.cpp";
      v62 = "_MergeChildren";
      v63 = 316;
      v64 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const VtValue "
            "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> "
            "*, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>]";
      v65 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "dstLayer->HasField(dstPath, field, &dstChildren)", 0) & 1) == 0)
      {
LABEL_77:
        v66 = (char *)&v71;
        sub_20BFD6F90((void ***)&v66);
        v66 = (char *)&v74;
        sub_20BFD6F90((void ***)&v66);
        goto LABEL_78;
      }
    }
    sub_20C019C58(&v66, v72 - v71);
    __p = 0;
    v62 = 0;
    v63 = 0;
    sub_20BFD6D38(&__p, v71, v72, v72 - v71);
    v48 = v74;
    v49 = v75;
    while (v48 != v49)
    {
      if (__p == v62)
      {
        v50 = (char *)__p;
      }
      else
      {
        v50 = (char *)__p;
        while (*(_QWORD *)v50 != *v48)
        {
          v50 += 8;
          if (v50 == v62)
          {
            v50 = v62;
            break;
          }
        }
      }
      if (v50 == v62)
      {
        v52 = v67;
        if ((unint64_t)v67 >= v68)
        {
          v53 = (char *)sub_20BFD7890((uint64_t *)&v66, v48);
        }
        else
        {
          sub_20BFD6E54(v67, v48);
          sub_20BFD6EA4((_DWORD *)v52 + 1, (_DWORD *)v48 + 1);
          v53 = v52 + 8;
        }
        v67 = v53;
        v54 = v62;
        if ((unint64_t)v62 >= v63)
        {
          v55 = (char *)sub_20BFD7890((uint64_t *)&__p, v48);
        }
        else
        {
          sub_20BFD6E54(v62, v48);
          sub_20BFD6EA4((_DWORD *)v54 + 1, (_DWORD *)v48 + 1);
          v55 = v54 + 8;
        }
        v62 = v55;
      }
      else
      {
        v51 = (int *)&v66[8 * ((v50 - (_BYTE *)__p) >> 3)];
        sub_20C01A074(v51, v48);
        sub_20C01A0C8(v51 + 1, (_DWORD *)v48 + 1);
      }
      ++v48;
    }
    sub_20C0DD144((uint64_t *)&v66, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    sub_20C0E2644(a8, &p_p);
    sub_20BF4C2D8((uint64_t)&p_p);
    sub_20C0DD144((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    sub_20C0E2644(a9, &p_p);
    v56 = (void ***)sub_20BF4C2D8((uint64_t)&p_p);
    p_p = &__p;
    sub_20BFD6F90(v56);
    __p = &v66;
    sub_20BFD6F90((void ***)&__p);
    v66 = (char *)&v71;
    sub_20BFD6F90((void ***)&v66);
    v66 = (char *)&v74;
    sub_20BFD6F90((void ***)&v66);
LABEL_73:
    v9 = 1;
LABEL_88:
    sub_20BF4C2D8((uint64_t)v77);
  }
  return v9;
}

void sub_20C6A9A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t *a30)
{
  uint64_t v30;

  a30 = (uint64_t *)&a24;
  sub_20BFD6F90((void ***)&a30);
  a24 = &a27;
  sub_20BFD6F90((void ***)&a24);
  sub_20BF4C2D8(v30 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6A9BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;

  v12 = a5;
  v11 = a7;
  v10 = a8;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, a2, a3, a4, &v12, a6, &v11, &v10);
}

BOOL sub_20C6A9C00(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  _QWORD **v21;
  _QWORD **v22;
  uint64_t (**v23)(_QWORD, uint64_t);
  _QWORD ***v24;
  std::type_info *v25;
  __int16 v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BF4A73C(a2))
    return 0;
  v21 = 0;
  v22 = 0;
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v25 = &stru_24C51D8B8;
  v26 = 0;
  v23 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E698;
  v24 = &v22;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, &v23);
  if ((_BYTE)v26)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v32 = "usdUtils/stitch.cpp";
    v33 = "_MergeValue";
    v34 = 117;
    v35 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::VtDictionary]";
    v36 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v32, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_19;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v24 = &v21;
  v25 = &stru_24C51D8B8;
  v26 = 0;
  v23 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E698;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, &v23);
  v18 = (_BYTE)v26 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v27 = "usdUtils/stitch.cpp",
        v28 = "_MergeValue",
        v29 = 118,
        v30 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::VtDictionary]",
        v31 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((const void ****)&v22, (const char **)&v21, 0, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v27);
    v33 = (const char *)&off_24C51D8C8;
    sub_20BF4D058((unsigned int **)&v32, (const void ****)&v27);
    sub_20BF49F14((_QWORD ***)&v27, 0);
    v19 = v33 != 0;
    if (v33)
    {
      v28 = 0;
      sub_20C0E2644((uint64_t)a7, &v27);
      sub_20BF4C2D8((uint64_t)&v27);
      sub_20BFD3C3C(a7, &v32);
    }
    sub_20BF4C2D8((uint64_t)&v32);
  }
  else
  {
LABEL_19:
    v19 = 0;
  }
  sub_20BF49F14(&v21, 0);
  sub_20BF49F14(&v22, 0);
  return v19;
}

void sub_20C6A9E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD **);
  sub_20BF49F14((_QWORD ***)va, 0);
  sub_20BF49F14((_QWORD ***)va1, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20C6A9E94(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  const void **v21;
  const void **v22[2];
  _QWORD **v23;
  _QWORD *v24[2];
  uint64_t (**v25)(_QWORD, uint64_t);
  const void ***v26;
  std::type_info *v27;
  __int16 v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!sub_20C0302AC(a2))
    return 0;
  v24[0] = 0;
  v24[1] = 0;
  v22[1] = 0;
  v23 = v24;
  v21 = (const void **)v22;
  v22[0] = 0;
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v27 = &stru_24C526848;
  v28 = 0;
  v25 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52BEE8;
  v26 = (const void ***)&v23;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, &v25);
  if ((_BYTE)v28)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v34 = "usdUtils/stitch.cpp";
    v35 = "_MergeValue";
    v36 = 117;
    v37 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " std::map<std::string, std::string>]";
    v38 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_19;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v26 = &v21;
  v27 = &stru_24C526848;
  v28 = 0;
  v25 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52BEE8;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, &v25);
  v18 = (_BYTE)v28 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v29 = "usdUtils/stitch.cpp",
        v30 = "_MergeValue",
        v31 = 118,
        v32 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = std::map<std::string, std::string>]",
        v33 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    sub_20BDEBFE0((uint64_t *)&v23, v21, v22);
    sub_20C6AE034((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
    v19 = v35 != 0;
    if (v35)
    {
      v30 = 0;
      sub_20C0E2644((uint64_t)a7, &v29);
      sub_20BF4C2D8((uint64_t)&v29);
      sub_20BFD3C3C(a7, &v34);
    }
    sub_20BF4C2D8((uint64_t)&v34);
  }
  else
  {
LABEL_19:
    v19 = 0;
  }
  sub_20BDE9D48((uint64_t)&v21, v22[0]);
  sub_20BDE9D48((uint64_t)&v23, v24[0]);
  return v19;
}

void sub_20C6AA0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  sub_20BDE9D48((uint64_t)&a10, a11);
  sub_20BDE9D48((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AA114(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *v24;
  _BYTE v25[8];
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE v51[8];
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *__p;
  void *v76;
  _BYTE v77[8];
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  std::type_info *v92;
  __int16 v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  char *v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  char v108;
  unsigned int *v109;
  _UNKNOWN **v110;
  char *v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  char v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE4F24(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)&v38);
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v92 = &stru_24C524CF0;
  v93 = 0;
  v91 = &v38;
  v90 = &unk_24C5399F0;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v90);
  if ((_BYTE)v93)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v111 = "usdUtils/stitch.cpp";
    v112 = "_MergeValue";
    v113 = 117;
    v114 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, c"
           "onst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T"
           " = pxrInternal__aapl__pxrReserved__::SdfListOp<int>]";
    v115 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v111, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_103;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v92 = &stru_24C524CF0;
  v93 = 0;
  v91 = v25;
  v90 = &unk_24C5399F0;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v90);
  v18 = (_BYTE)v93 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v104 = "usdUtils/stitch.cpp",
        v105 = "_MergeValue",
        v106 = 118,
        v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue "
               "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValu"
               "e> *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<int>]",
        v108 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(&v38, &v111, (uint64_t)v25);
    if (v116)
      goto LABEL_60;
    sub_20C031ADC((uint64_t)v77, (uint64_t)&v38);
    sub_20C6AE074((uint64_t)v77, (uint64_t)&v90);
    sub_20C031ADC((uint64_t)v51, (uint64_t)v25);
    sub_20C6AE074((uint64_t)v51, (uint64_t)&v64);
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(&v90, &v104, (uint64_t)&v64);
    sub_20C6AE328(&v111, (uint64_t)&v104);
    sub_20C394EF4((uint64_t)&v104);
    if (__p)
    {
      v76 = __p;
      operator delete(__p);
    }
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      v101 = v100;
      operator delete(v100);
    }
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    if (v91)
    {
      v92 = (std::type_info *)v91;
      operator delete(v91);
    }
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v86)
    {
      v87 = v86;
      operator delete(v86);
    }
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    if (v116)
    {
LABEL_60:
      v110 = &off_24C526AA0;
      sub_20C032218(&v109, (uint64_t)&v111);
    }
    else
    {
      v104 = "usdUtils/stitch.cpp";
      v105 = "_Reduce";
      v106 = 100;
      v107 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfLis"
             "tOp<T> &) [T = int]";
      v108 = 0;
      sub_20C394E2C((uint64_t)&v38);
      v21 = SHIBYTE(v92);
      v22 = (void **)v90;
      sub_20C394E2C((uint64_t)v25);
      v23 = &v90;
      if (v21 < 0)
        v23 = v22;
      if (SHIBYTE(v66) >= 0)
        v24 = (const char *)&v64;
      else
        v24 = (const char *)v64;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, v24);
      if (SHIBYTE(v66) < 0)
        operator delete(v64);
      if (SHIBYTE(v92) < 0)
        operator delete(v90);
      v110 = 0;
    }
    sub_20C394EF4((uint64_t)&v111);
    v19 = v110 != 0;
    if (v110)
    {
      v112 = 0;
      sub_20C0E2644((uint64_t)a7, &v111);
      sub_20BF4C2D8((uint64_t)&v111);
      sub_20BFD3C3C(a7, &v109);
    }
    sub_20BF4C2D8((uint64_t)&v109);
  }
  else
  {
LABEL_103:
    v19 = 0;
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v19;
}

void sub_20C6AA69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_20C031968(&a12);
  sub_20C031968(&a31);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AA784(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *v24;
  _BYTE v25[8];
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE v51[8];
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *__p;
  void *v76;
  _BYTE v77[8];
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  std::type_info *v92;
  __int16 v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  char *v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  char v108;
  unsigned int *v109;
  _UNKNOWN **v110;
  char *v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  char v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE5014(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)&v38);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v92 = &stru_24C524D10;
  v93 = 0;
  v91 = &v38;
  v90 = &unk_24C539A60;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v90);
  if ((_BYTE)v93)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v111 = "usdUtils/stitch.cpp";
    v112 = "_MergeValue";
    v113 = 117;
    v114 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, c"
           "onst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T"
           " = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>]";
    v115 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v111, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_103;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v92 = &stru_24C524D10;
  v93 = 0;
  v91 = v25;
  v90 = &unk_24C539A60;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v90);
  v18 = (_BYTE)v93 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v104 = "usdUtils/stitch.cpp",
        v105 = "_MergeValue",
        v106 = 118,
        v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue "
               "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValu"
               "e> *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>]",
        v108 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(&v38, &v111, (uint64_t)v25);
    if (v116)
      goto LABEL_60;
    sub_20C033524((uint64_t)v77, (uint64_t)&v38);
    sub_20C6AE548((uint64_t)v77, (uint64_t)&v90);
    sub_20C033524((uint64_t)v51, (uint64_t)v25);
    sub_20C6AE548((uint64_t)v51, (uint64_t)&v64);
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(&v90, &v104, (uint64_t)&v64);
    sub_20C6AE328(&v111, (uint64_t)&v104);
    sub_20C394EF4((uint64_t)&v104);
    if (__p)
    {
      v76 = __p;
      operator delete(__p);
    }
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      v101 = v100;
      operator delete(v100);
    }
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    if (v91)
    {
      v92 = (std::type_info *)v91;
      operator delete(v91);
    }
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v86)
    {
      v87 = v86;
      operator delete(v86);
    }
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    if (v116)
    {
LABEL_60:
      v110 = &off_24C526C10;
      sub_20C0339F8(&v109, (uint64_t)&v111);
    }
    else
    {
      v104 = "usdUtils/stitch.cpp";
      v105 = "_Reduce";
      v106 = 100;
      v107 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfLis"
             "tOp<T> &) [T = unsigned int]";
      v108 = 0;
      sub_20C394F7C((uint64_t)&v38);
      v21 = SHIBYTE(v92);
      v22 = (void **)v90;
      sub_20C394F7C((uint64_t)v25);
      v23 = &v90;
      if (v21 < 0)
        v23 = v22;
      if (SHIBYTE(v66) >= 0)
        v24 = (const char *)&v64;
      else
        v24 = (const char *)v64;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, v24);
      if (SHIBYTE(v66) < 0)
        operator delete(v64);
      if (SHIBYTE(v92) < 0)
        operator delete(v90);
      v110 = 0;
    }
    sub_20C394EF4((uint64_t)&v111);
    v19 = v110 != 0;
    if (v110)
    {
      v112 = 0;
      sub_20C0E2644((uint64_t)a7, &v111);
      sub_20BF4C2D8((uint64_t)&v111);
      sub_20BFD3C3C(a7, &v109);
    }
    sub_20BF4C2D8((uint64_t)&v109);
  }
  else
  {
LABEL_103:
    v19 = 0;
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v19;
}

void sub_20C6AAD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_20C031968(&a12);
  sub_20C031968(&a31);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AADF4(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *v24;
  _BYTE v25[8];
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE v51[8];
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *__p;
  void *v76;
  _BYTE v77[8];
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  std::type_info *v92;
  __int16 v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  char *v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  char v108;
  unsigned int *v109;
  _UNKNOWN **v110;
  char *v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  char v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE508C(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)&v38);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v92 = &stru_24C524D20;
  v93 = 0;
  v91 = &v38;
  v90 = &unk_24C539A98;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v90);
  if ((_BYTE)v93)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v111 = "usdUtils/stitch.cpp";
    v112 = "_MergeValue";
    v113 = 117;
    v114 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, c"
           "onst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T"
           " = pxrInternal__aapl__pxrReserved__::SdfListOp<uint64_t>]";
    v115 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v111, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_103;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v92 = &stru_24C524D20;
  v93 = 0;
  v91 = v25;
  v90 = &unk_24C539A98;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v90);
  v18 = (_BYTE)v93 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v104 = "usdUtils/stitch.cpp",
        v105 = "_MergeValue",
        v106 = 118,
        v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue "
               "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValu"
               "e> *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<uint64_t>]",
        v108 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(&v38, &v111, (uint64_t)v25);
    if (v116)
      goto LABEL_60;
    sub_20C0340F4((uint64_t)v77, (uint64_t)&v38);
    sub_20C6AE7FC((uint64_t)v77, (uint64_t)&v90);
    sub_20C0340F4((uint64_t)v51, (uint64_t)v25);
    sub_20C6AE7FC((uint64_t)v51, (uint64_t)&v64);
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(&v90, &v104, (uint64_t)&v64);
    sub_20C6AE328(&v111, (uint64_t)&v104);
    sub_20C394EF4((uint64_t)&v104);
    if (__p)
    {
      v76 = __p;
      operator delete(__p);
    }
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      v101 = v100;
      operator delete(v100);
    }
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    if (v91)
    {
      v92 = (std::type_info *)v91;
      operator delete(v91);
    }
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v86)
    {
      v87 = v86;
      operator delete(v86);
    }
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    if (v116)
    {
LABEL_60:
      v110 = &off_24C526CC8;
      sub_20C0345C8(&v109, (uint64_t)&v111);
    }
    else
    {
      v104 = "usdUtils/stitch.cpp";
      v105 = "_Reduce";
      v106 = 100;
      v107 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfLis"
             "tOp<T> &) [T = unsigned long long]";
      v108 = 0;
      sub_20C39510C((uint64_t)&v38);
      v21 = SHIBYTE(v92);
      v22 = (void **)v90;
      sub_20C39510C((uint64_t)v25);
      v23 = &v90;
      if (v21 < 0)
        v23 = v22;
      if (SHIBYTE(v66) >= 0)
        v24 = (const char *)&v64;
      else
        v24 = (const char *)v64;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, v24);
      if (SHIBYTE(v66) < 0)
        operator delete(v64);
      if (SHIBYTE(v92) < 0)
        operator delete(v90);
      v110 = 0;
    }
    sub_20C394EF4((uint64_t)&v111);
    v19 = v110 != 0;
    if (v110)
    {
      v112 = 0;
      sub_20C0E2644((uint64_t)a7, &v111);
      sub_20BF4C2D8((uint64_t)&v111);
      sub_20BFD3C3C(a7, &v109);
    }
    sub_20BF4C2D8((uint64_t)&v109);
  }
  else
  {
LABEL_103:
    v19 = 0;
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v19;
}

void sub_20C6AB37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_20C031968(&a12);
  sub_20C031968(&a31);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AB464(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *p_p;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t *v62;
  std::type_info *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void **v75;
  unsigned int *v76;
  _UNKNOWN **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE517C(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v63 = &stru_24C524D40;
  v64 = 0;
  v62 = &v32;
  v61 = &unk_24C539538;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  if ((_BYTE)v64)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v78 = (void **)"usdUtils/stitch.cpp";
    v79 = "_MergeValue";
    v80 = 117;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::SdfListOp<TfToken>]";
    v82 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_32;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v63 = &stru_24C524D40;
  v64 = 0;
  v62 = (uint64_t *)v25;
  v61 = &unk_24C539538;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  v18 = (_BYTE)v64 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v70 = "usdUtils/stitch.cpp",
        v71 = "_MergeValue",
        v72 = 118,
        v73 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<TfToken>]",
        v74 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(&v32, &v78, (uint64_t)v25);
    if (v83)
      goto LABEL_12;
    sub_20C0366AC((uint64_t)v54, (uint64_t)&v32);
    sub_20C6AEAC4((uint64_t)v54, (uint64_t)&v61);
    sub_20C0366AC((uint64_t)v39, (uint64_t)v25);
    sub_20C6AEAC4((uint64_t)v39, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(&v61, &v70, (uint64_t)&__p);
    sub_20C6AED14((uint64_t)&v78, (uint64_t)&v70);
    sub_20C39529C((uint64_t)&v70);
    v75 = (void **)&v53;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v52;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v51;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v50;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v49;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v47;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v45;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v44;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v43;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v42;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v41;
    sub_20BEEB2B8(&v75);
    v75 = (void **)&v40;
    sub_20BEEB2B8(&v75);
    __p = &v69;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v68;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v67;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v66;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v65;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v62;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v60;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v59;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v58;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v57;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v56;
    sub_20BEEB2B8((void ***)&__p);
    __p = &v55;
    sub_20BEEB2B8((void ***)&__p);
    if (v83)
    {
LABEL_12:
      v77 = &off_24C526D80;
      sub_20C036F00(&v76, (uint64_t)&v78);
    }
    else
    {
      v70 = "usdUtils/stitch.cpp";
      v71 = "_Reduce";
      v72 = 100;
      v73 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfList"
            "Op<T> &) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      v74 = 0;
      sub_20C3951D4((uint64_t)&v32);
      v21 = SHIBYTE(v63);
      v22 = (void **)v61;
      sub_20C3951D4((uint64_t)v25);
      v23 = &v61;
      if (v21 < 0)
        v23 = v22;
      if (v48 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, p_p);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
      v77 = 0;
    }
    sub_20C39529C((uint64_t)&v78);
    v19 = v77 != 0;
    if (v77)
    {
      v79 = 0;
      sub_20C0E2644((uint64_t)a7, &v78);
      sub_20BF4C2D8((uint64_t)&v78);
      sub_20BFD3C3C(a7, &v76);
    }
    sub_20BF4C2D8((uint64_t)&v76);
  }
  else
  {
LABEL_32:
    v19 = 0;
  }
  v78 = (void **)&v31;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v30;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v29;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v28;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v27;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v26;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v38;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v37;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v36;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v35;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v34;
  sub_20BEEB2B8(&v78);
  v78 = (void **)&v33;
  sub_20BEEB2B8(&v78);
  return v19;
}

void sub_20C6ABA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_20C03507C(&a11);
  sub_20C03507C(&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20C6ABAEC(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *p_p;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  std::type_info *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void **v75;
  unsigned int *v76;
  std::type_info **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE5104(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v63 = &stru_24C524D30;
  v64 = 0;
  v62 = v32;
  v61 = &unk_24C52BEB0;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  if ((_BYTE)v64)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v78 = (void **)"usdUtils/stitch.cpp";
    v79 = "_MergeValue";
    v80 = 117;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>]";
    v82 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_32;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v63 = &stru_24C524D30;
  v64 = 0;
  v62 = v25;
  v61 = &unk_24C52BEB0;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  v18 = (_BYTE)v64 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v70 = "usdUtils/stitch.cpp",
        v71 = "_MergeValue",
        v72 = 118,
        v73 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>]",
        v74 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(&v78, (uint64_t)v32, (uint64_t)v25);
    if (v83)
      goto LABEL_12;
    sub_20C02F650((uint64_t)v54, (uint64_t)v32);
    sub_20C6AEECC((uint64_t)v54, (uint64_t)&v61);
    sub_20C02F650((uint64_t)v39, (uint64_t)v25);
    sub_20C6AEECC((uint64_t)v39, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(&v70, (uint64_t)&v61, (uint64_t)&__p);
    sub_20C6AF110((uint64_t)&v78, (uint64_t)&v70);
    sub_20C3953F4((uint64_t)&v70);
    v75 = (void **)&v53;
    sub_20BDE5038(&v75);
    v75 = (void **)&v52;
    sub_20BDE5038(&v75);
    v75 = (void **)&v51;
    sub_20BDE5038(&v75);
    v75 = (void **)&v50;
    sub_20BDE5038(&v75);
    v75 = (void **)&v49;
    sub_20BDE5038(&v75);
    v75 = (void **)&v47;
    sub_20BDE5038(&v75);
    v75 = (void **)&v45;
    sub_20BDE5038(&v75);
    v75 = (void **)&v44;
    sub_20BDE5038(&v75);
    v75 = (void **)&v43;
    sub_20BDE5038(&v75);
    v75 = (void **)&v42;
    sub_20BDE5038(&v75);
    v75 = (void **)&v41;
    sub_20BDE5038(&v75);
    v75 = (void **)&v40;
    sub_20BDE5038(&v75);
    __p = &v69;
    sub_20BDE5038((void ***)&__p);
    __p = &v68;
    sub_20BDE5038((void ***)&__p);
    __p = &v67;
    sub_20BDE5038((void ***)&__p);
    __p = &v66;
    sub_20BDE5038((void ***)&__p);
    __p = &v65;
    sub_20BDE5038((void ***)&__p);
    __p = &v62;
    sub_20BDE5038((void ***)&__p);
    __p = &v60;
    sub_20BDE5038((void ***)&__p);
    __p = &v59;
    sub_20BDE5038((void ***)&__p);
    __p = &v58;
    sub_20BDE5038((void ***)&__p);
    __p = &v57;
    sub_20BDE5038((void ***)&__p);
    __p = &v56;
    sub_20BDE5038((void ***)&__p);
    __p = &v55;
    sub_20BDE5038((void ***)&__p);
    if (v83)
    {
LABEL_12:
      v77 = &off_24C5266D8;
      sub_20C02FE24(&v76, (uint64_t)&v78);
    }
    else
    {
      v70 = "usdUtils/stitch.cpp";
      v71 = "_Reduce";
      v72 = 100;
      v73 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfList"
            "Op<T> &) [T = std::string]";
      v74 = 0;
      sub_20C39532C((uint64_t)v32);
      v21 = SHIBYTE(v63);
      v22 = (void **)v61;
      sub_20C39532C((uint64_t)v25);
      v23 = &v61;
      if (v21 < 0)
        v23 = v22;
      if (v48 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, p_p);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
      v77 = 0;
    }
    sub_20C3953F4((uint64_t)&v78);
    v19 = v77 != 0;
    if (v77)
    {
      v79 = 0;
      sub_20C0E2644((uint64_t)a7, &v78);
      sub_20BF4C2D8((uint64_t)&v78);
      sub_20BFD3C3C(a7, &v76);
    }
    sub_20BF4C2D8((uint64_t)&v76);
  }
  else
  {
LABEL_32:
    v19 = 0;
  }
  v78 = (void **)&v31;
  sub_20BDE5038(&v78);
  v78 = (void **)&v30;
  sub_20BDE5038(&v78);
  v78 = (void **)&v29;
  sub_20BDE5038(&v78);
  v78 = (void **)&v28;
  sub_20BDE5038(&v78);
  v78 = (void **)&v27;
  sub_20BDE5038(&v78);
  v78 = (void **)&v26;
  sub_20BDE5038(&v78);
  v78 = (void **)&v38;
  sub_20BDE5038(&v78);
  v78 = (void **)&v37;
  sub_20BDE5038(&v78);
  v78 = (void **)&v36;
  sub_20BDE5038(&v78);
  v78 = (void **)&v35;
  sub_20BDE5038(&v78);
  v78 = (void **)&v34;
  sub_20BDE5038(&v78);
  v78 = (void **)&v33;
  sub_20BDE5038(&v78);
  return v19;
}

void sub_20C6AC08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_20C020EAC(&a11);
  sub_20C020EAC(&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AC174(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *p_p;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  std::type_info *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void **v75;
  unsigned int *v76;
  std::type_info **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFD6B4C(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v63 = &stru_24C5249B8;
  v64 = 0;
  v62 = v32;
  v61 = &unk_24C527D98;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  if ((_BYTE)v64)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v78 = (void **)"usdUtils/stitch.cpp";
    v79 = "_MergeValue";
    v80 = 117;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::SdfListOp<SdfPath>]";
    v82 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_32;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v63 = &stru_24C5249B8;
  v64 = 0;
  v62 = v25;
  v61 = &unk_24C527D98;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  v18 = (_BYTE)v64 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v70 = "usdUtils/stitch.cpp",
        v71 = "_MergeValue",
        v72 = 118,
        v73 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<SdfPath>]",
        v74 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(&v78, (uint64_t)v32, (uint64_t)v25);
    if (v83)
      goto LABEL_12;
    sub_20BFD6BC4((uint64_t)v54, (uint64_t)v32);
    sub_20C6AF2C8((uint64_t)v54, (uint64_t)&v61);
    sub_20BFD6BC4((uint64_t)v39, (uint64_t)v25);
    sub_20C6AF2C8((uint64_t)v39, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(&v70, (uint64_t)&v61, (uint64_t)&__p);
    sub_20C6AF500((uint64_t)&v78, (uint64_t)&v70);
    sub_20C39554C((uint64_t)&v70);
    v75 = (void **)&v53;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v52;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v51;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v50;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v49;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v47;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v45;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v44;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v43;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v42;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v41;
    sub_20BFD6F90(&v75);
    v75 = (void **)&v40;
    sub_20BFD6F90(&v75);
    __p = &v69;
    sub_20BFD6F90((void ***)&__p);
    __p = &v68;
    sub_20BFD6F90((void ***)&__p);
    __p = &v67;
    sub_20BFD6F90((void ***)&__p);
    __p = &v66;
    sub_20BFD6F90((void ***)&__p);
    __p = &v65;
    sub_20BFD6F90((void ***)&__p);
    __p = &v62;
    sub_20BFD6F90((void ***)&__p);
    __p = &v60;
    sub_20BFD6F90((void ***)&__p);
    __p = &v59;
    sub_20BFD6F90((void ***)&__p);
    __p = &v58;
    sub_20BFD6F90((void ***)&__p);
    __p = &v57;
    sub_20BFD6F90((void ***)&__p);
    __p = &v56;
    sub_20BFD6F90((void ***)&__p);
    __p = &v55;
    sub_20BFD6F90((void ***)&__p);
    if (v83)
    {
LABEL_12:
      v77 = &off_24C5249C8;
      sub_20BFD86E0(&v76, (uint64_t)&v78);
    }
    else
    {
      v70 = "usdUtils/stitch.cpp";
      v71 = "_Reduce";
      v72 = 100;
      v73 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfList"
            "Op<T> &) [T = pxrInternal__aapl__pxrReserved__::SdfPath]";
      v74 = 0;
      sub_20C395484((uint64_t)v32);
      v21 = SHIBYTE(v63);
      v22 = (void **)v61;
      sub_20C395484((uint64_t)v25);
      v23 = &v61;
      if (v21 < 0)
        v23 = v22;
      if (v48 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, p_p);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
      v77 = 0;
    }
    sub_20C39554C((uint64_t)&v78);
    v19 = v77 != 0;
    if (v77)
    {
      v79 = 0;
      sub_20C0E2644((uint64_t)a7, &v78);
      sub_20BF4C2D8((uint64_t)&v78);
      sub_20BFD3C3C(a7, &v76);
    }
    sub_20BF4C2D8((uint64_t)&v76);
  }
  else
  {
LABEL_32:
    v19 = 0;
  }
  v78 = (void **)&v31;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v30;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v29;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v28;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v27;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v26;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v38;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v37;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v36;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v35;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v34;
  sub_20BFD6F90(&v78);
  v78 = (void **)&v33;
  sub_20BFD6F90(&v78);
  return v19;
}

void sub_20C6AC714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_20BFD6A50(&a11);
  sub_20BFD6A50(&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AC7FC(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *p_p;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  std::type_info *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void **v75;
  unsigned int *v76;
  std::type_info **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE4618(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v63 = &stru_24C524CE0;
  v64 = 0;
  v62 = v32;
  v61 = &unk_24C527E50;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  if ((_BYTE)v64)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v78 = (void **)"usdUtils/stitch.cpp";
    v79 = "_MergeValue";
    v80 = 117;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::SdfListOp<SdfReference>]";
    v82 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_32;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v63 = &stru_24C524CE0;
  v64 = 0;
  v62 = v25;
  v61 = &unk_24C527E50;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  v18 = (_BYTE)v64 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v70 = "usdUtils/stitch.cpp",
        v71 = "_MergeValue",
        v72 = 118,
        v73 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<SdfReference>]",
        v74 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(&v78, (uint64_t)v32, (uint64_t)v25);
    if (v83)
      goto LABEL_12;
    sub_20C02BDC4((uint64_t)v54, (uint64_t)v32);
    sub_20C6AF6B8((uint64_t)v54, (uint64_t)&v61);
    sub_20C02BDC4((uint64_t)v39, (uint64_t)v25);
    sub_20C6AF6B8((uint64_t)v39, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(&v70, (uint64_t)&v61, (uint64_t)&__p);
    sub_20C6AF90C((uint64_t)&v78, (uint64_t)&v70);
    sub_20C3957FC((uint64_t)&v70);
    v75 = (void **)&v53;
    sub_20C021740(&v75);
    v75 = (void **)&v52;
    sub_20C021740(&v75);
    v75 = (void **)&v51;
    sub_20C021740(&v75);
    v75 = (void **)&v50;
    sub_20C021740(&v75);
    v75 = (void **)&v49;
    sub_20C021740(&v75);
    v75 = (void **)&v47;
    sub_20C021740(&v75);
    v75 = (void **)&v45;
    sub_20C021740(&v75);
    v75 = (void **)&v44;
    sub_20C021740(&v75);
    v75 = (void **)&v43;
    sub_20C021740(&v75);
    v75 = (void **)&v42;
    sub_20C021740(&v75);
    v75 = (void **)&v41;
    sub_20C021740(&v75);
    v75 = (void **)&v40;
    sub_20C021740(&v75);
    __p = &v69;
    sub_20C021740((void ***)&__p);
    __p = &v68;
    sub_20C021740((void ***)&__p);
    __p = &v67;
    sub_20C021740((void ***)&__p);
    __p = &v66;
    sub_20C021740((void ***)&__p);
    __p = &v65;
    sub_20C021740((void ***)&__p);
    __p = &v62;
    sub_20C021740((void ***)&__p);
    __p = &v60;
    sub_20C021740((void ***)&__p);
    __p = &v59;
    sub_20C021740((void ***)&__p);
    __p = &v58;
    sub_20C021740((void ***)&__p);
    __p = &v57;
    sub_20C021740((void ***)&__p);
    __p = &v56;
    sub_20C021740((void ***)&__p);
    __p = &v55;
    sub_20C021740((void ***)&__p);
    if (v83)
    {
LABEL_12:
      v77 = &off_24C526568;
      sub_20C02C8C8(&v76, (uint64_t)&v78);
    }
    else
    {
      v70 = "usdUtils/stitch.cpp";
      v71 = "_Reduce";
      v72 = 100;
      v73 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfList"
            "Op<T> &) [T = pxrInternal__aapl__pxrReserved__::SdfReference]";
      v74 = 0;
      sub_20C395734((uint64_t)v32);
      v21 = SHIBYTE(v63);
      v22 = (void **)v61;
      sub_20C395734((uint64_t)v25);
      v23 = &v61;
      if (v21 < 0)
        v23 = v22;
      if (v48 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, p_p);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
      v77 = 0;
    }
    sub_20C3957FC((uint64_t)&v78);
    v19 = v77 != 0;
    if (v77)
    {
      v79 = 0;
      sub_20C0E2644((uint64_t)a7, &v78);
      sub_20BF4C2D8((uint64_t)&v78);
      sub_20BFD3C3C(a7, &v76);
    }
    sub_20BF4C2D8((uint64_t)&v76);
  }
  else
  {
LABEL_32:
    v19 = 0;
  }
  v78 = (void **)&v31;
  sub_20C021740(&v78);
  v78 = (void **)&v30;
  sub_20C021740(&v78);
  v78 = (void **)&v29;
  sub_20C021740(&v78);
  v78 = (void **)&v28;
  sub_20C021740(&v78);
  v78 = (void **)&v27;
  sub_20C021740(&v78);
  v78 = (void **)&v26;
  sub_20C021740(&v78);
  v78 = (void **)&v38;
  sub_20C021740(&v78);
  v78 = (void **)&v37;
  sub_20C021740(&v78);
  v78 = (void **)&v36;
  sub_20C021740(&v78);
  v78 = (void **)&v35;
  sub_20C021740(&v78);
  v78 = (void **)&v34;
  sub_20C021740(&v78);
  v78 = (void **)&v33;
  sub_20C021740(&v78);
  return v19;
}

void sub_20C6ACD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_20C029B80(&a11);
  sub_20C029B80(&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20C6ACE84(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *p_p;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  std::type_info *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void **v75;
  unsigned int *v76;
  std::type_info **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE45A0(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v63 = &stru_24C524CD0;
  v64 = 0;
  v62 = v32;
  v61 = &unk_24C527F30;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  if ((_BYTE)v64)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v78 = (void **)"usdUtils/stitch.cpp";
    v79 = "_MergeValue";
    v80 = 117;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::SdfListOp<SdfPayload>]";
    v82 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_32;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v63 = &stru_24C524CD0;
  v64 = 0;
  v62 = v25;
  v61 = &unk_24C527F30;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  v18 = (_BYTE)v64 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v70 = "usdUtils/stitch.cpp",
        v71 = "_MergeValue",
        v72 = 118,
        v73 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<SdfPayload>]",
        v74 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(&v78, (uint64_t)v32, (uint64_t)v25);
    if (v83)
      goto LABEL_12;
    sub_20C02E924((uint64_t)v54, (uint64_t)v32);
    sub_20C6AFAC4((uint64_t)v54, (uint64_t)&v61);
    sub_20C02E924((uint64_t)v39, (uint64_t)v25);
    sub_20C6AFAC4((uint64_t)v39, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(&v70, (uint64_t)&v61, (uint64_t)&__p);
    sub_20C6AFD24((uint64_t)&v78, (uint64_t)&v70);
    sub_20C3956A4((uint64_t)&v70);
    v75 = (void **)&v53;
    sub_20C021818(&v75);
    v75 = (void **)&v52;
    sub_20C021818(&v75);
    v75 = (void **)&v51;
    sub_20C021818(&v75);
    v75 = (void **)&v50;
    sub_20C021818(&v75);
    v75 = (void **)&v49;
    sub_20C021818(&v75);
    v75 = (void **)&v47;
    sub_20C021818(&v75);
    v75 = (void **)&v45;
    sub_20C021818(&v75);
    v75 = (void **)&v44;
    sub_20C021818(&v75);
    v75 = (void **)&v43;
    sub_20C021818(&v75);
    v75 = (void **)&v42;
    sub_20C021818(&v75);
    v75 = (void **)&v41;
    sub_20C021818(&v75);
    v75 = (void **)&v40;
    sub_20C021818(&v75);
    __p = &v69;
    sub_20C021818((void ***)&__p);
    __p = &v68;
    sub_20C021818((void ***)&__p);
    __p = &v67;
    sub_20C021818((void ***)&__p);
    __p = &v66;
    sub_20C021818((void ***)&__p);
    __p = &v65;
    sub_20C021818((void ***)&__p);
    __p = &v62;
    sub_20C021818((void ***)&__p);
    __p = &v60;
    sub_20C021818((void ***)&__p);
    __p = &v59;
    sub_20C021818((void ***)&__p);
    __p = &v58;
    sub_20C021818((void ***)&__p);
    __p = &v57;
    sub_20C021818((void ***)&__p);
    __p = &v56;
    sub_20C021818((void ***)&__p);
    __p = &v55;
    sub_20C021818((void ***)&__p);
    if (v83)
    {
LABEL_12:
      v77 = &off_24C526620;
      sub_20C02F37C(&v76, (uint64_t)&v78);
    }
    else
    {
      v70 = "usdUtils/stitch.cpp";
      v71 = "_Reduce";
      v72 = 100;
      v73 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfList"
            "Op<T> &) [T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
      v74 = 0;
      sub_20C3955DC((uint64_t)v32);
      v21 = SHIBYTE(v63);
      v22 = (void **)v61;
      sub_20C3955DC((uint64_t)v25);
      v23 = &v61;
      if (v21 < 0)
        v23 = v22;
      if (v48 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, p_p);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
      v77 = 0;
    }
    sub_20C3956A4((uint64_t)&v78);
    v19 = v77 != 0;
    if (v77)
    {
      v79 = 0;
      sub_20C0E2644((uint64_t)a7, &v78);
      sub_20BF4C2D8((uint64_t)&v78);
      sub_20BFD3C3C(a7, &v76);
    }
    sub_20BF4C2D8((uint64_t)&v76);
  }
  else
  {
LABEL_32:
    v19 = 0;
  }
  v78 = (void **)&v31;
  sub_20C021818(&v78);
  v78 = (void **)&v30;
  sub_20C021818(&v78);
  v78 = (void **)&v29;
  sub_20C021818(&v78);
  v78 = (void **)&v28;
  sub_20C021818(&v78);
  v78 = (void **)&v27;
  sub_20C021818(&v78);
  v78 = (void **)&v26;
  sub_20C021818(&v78);
  v78 = (void **)&v38;
  sub_20C021818(&v78);
  v78 = (void **)&v37;
  sub_20C021818(&v78);
  v78 = (void **)&v36;
  sub_20C021818(&v78);
  v78 = (void **)&v35;
  sub_20C021818(&v78);
  v78 = (void **)&v34;
  sub_20C021818(&v78);
  v78 = (void **)&v33;
  sub_20C021818(&v78);
  return v19;
}

void sub_20C6AD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_20C02C9C4(&a11);
  sub_20C02C9C4(&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20C6AD50C(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, _QWORD *a7)
{
  _QWORD *v13;
  char HasField;
  char v15;
  _QWORD *v16;
  char v17;
  char v18;
  _BOOL8 v19;
  int v21;
  void **v22;
  void **v23;
  const char *p_p;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  std::type_info *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void **v75;
  unsigned int *v76;
  std::type_info **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!sub_20BFE4EAC(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v25);
  v13 = (_QWORD *)sub_20BFCF650(a3);
  v63 = &stru_24C524D60;
  v64 = 0;
  v62 = v32;
  v61 = &unk_24C541338;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  if ((_BYTE)v64)
    v15 = 0;
  else
    v15 = HasField;
  if ((v15 & 1) == 0)
  {
    v78 = (void **)"usdUtils/stitch.cpp";
    v79 = "_MergeValue";
    v80 = 117;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::SdfListOp<SdfUnregisteredValue>]";
    v82 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_32;
  }
  v16 = (_QWORD *)sub_20BFCF650(a5);
  v63 = &stru_24C524D60;
  v64 = 0;
  v62 = v25;
  v61 = &unk_24C541338;
  v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, (uint64_t (***)(_QWORD, uint64_t))&v61);
  v18 = (_BYTE)v64 ? 0 : v17;
  if ((v18 & 1) != 0
    || (v70 = "usdUtils/stitch.cpp",
        v71 = "_MergeValue",
        v72 = 118,
        v73 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::SdfListOp<SdfUnregisteredValue>]",
        v74 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(&v78, (uint64_t)v32, (uint64_t)v25);
    if (v83)
      goto LABEL_12;
    sub_20C036FFC((uint64_t)v54, (uint64_t)v32);
    sub_20C6B0180((uint64_t)v54, (uint64_t)&v61);
    sub_20C036FFC((uint64_t)v39, (uint64_t)v25);
    sub_20C6B0180((uint64_t)v39, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(&v70, (uint64_t)&v61, (uint64_t)&__p);
    sub_20C6B0388((uint64_t)&v78, (uint64_t)&v70);
    sub_20C395954((uint64_t)&v70);
    v75 = (void **)&v53;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v52;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v51;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v50;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v49;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v47;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v45;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v44;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v43;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v42;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v41;
    sub_20BF8CA20(&v75);
    v75 = (void **)&v40;
    sub_20BF8CA20(&v75);
    __p = &v69;
    sub_20BF8CA20((void ***)&__p);
    __p = &v68;
    sub_20BF8CA20((void ***)&__p);
    __p = &v67;
    sub_20BF8CA20((void ***)&__p);
    __p = &v66;
    sub_20BF8CA20((void ***)&__p);
    __p = &v65;
    sub_20BF8CA20((void ***)&__p);
    __p = &v62;
    sub_20BF8CA20((void ***)&__p);
    __p = &v60;
    sub_20BF8CA20((void ***)&__p);
    __p = &v59;
    sub_20BF8CA20((void ***)&__p);
    __p = &v58;
    sub_20BF8CA20((void ***)&__p);
    __p = &v57;
    sub_20BF8CA20((void ***)&__p);
    __p = &v56;
    sub_20BF8CA20((void ***)&__p);
    __p = &v55;
    sub_20BF8CA20((void ***)&__p);
    if (v83)
    {
LABEL_12:
      v77 = &off_24C52AC70;
      sub_20C1D5D98(&v76, (uint64_t)&v78);
    }
    else
    {
      v70 = "usdUtils/stitch.cpp";
      v71 = "_Reduce";
      v72 = 100;
      v73 = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Reduce(const SdfListOp<T> &, const SdfList"
            "Op<T> &) [T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
      v74 = 0;
      sub_20C39588C((uint64_t)v32);
      v21 = SHIBYTE(v63);
      v22 = (void **)v61;
      sub_20C39588C((uint64_t)v25);
      v23 = &v61;
      if (v21 < 0)
        v23 = v22;
      if (v48 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", (const char *)v23, p_p);
      if (v48 < 0)
        operator delete(__p);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
      v77 = 0;
    }
    sub_20C395954((uint64_t)&v78);
    v19 = v77 != 0;
    if (v77)
    {
      v79 = 0;
      sub_20C0E2644((uint64_t)a7, &v78);
      sub_20BF4C2D8((uint64_t)&v78);
      sub_20BFD3C3C(a7, &v76);
    }
    sub_20BF4C2D8((uint64_t)&v76);
  }
  else
  {
LABEL_32:
    v19 = 0;
  }
  v78 = (void **)&v31;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v30;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v29;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v28;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v27;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v26;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v38;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v37;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v36;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v35;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v34;
  sub_20BF8CA20(&v78);
  v78 = (void **)&v33;
  sub_20BF8CA20(&v78);
  return v19;
}

void sub_20C6ADAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_20C0282CC(&a11);
  sub_20C0282CC(&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6ADB94(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5411F0;
  sub_20BFED2B4(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_20C6ADBC8(_QWORD **a1)
{
  *a1 = off_24C5411F0;
  sub_20BFED2B4((uint64_t)(a1 + 1), a1[2]);
  operator delete(a1);
}

_QWORD *sub_20C6ADBFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = off_24C5411F0;
  sub_20BFECEF8(v2 + 1, v1);
  return v2;
}

void sub_20C6ADC3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6ADC50(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5411F0;
  return sub_20BFECEF8(a2 + 1, a1 + 8);
}

void sub_20C6ADC6C(uint64_t a1)
{
  sub_20BFED2B4(a1 + 8, *(_QWORD **)(a1 + 16));
}

void sub_20C6ADC7C(_QWORD **a1)
{
  sub_20BFED2B4((uint64_t)(a1 + 1), a1[2]);
  operator delete(a1);
}

void sub_20C6ADCA8(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  double *v3;
  double *v4;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  double *v8;
  double *v9;
  BOOL v10;

  v3 = *(double **)(a1 + 8);
  v4 = (double *)(a1 + 16);
  if (v3 != (double *)(a1 + 16))
  {
    do
    {
      v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v7, a3, v3[4], (const pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 5));
      v8 = (double *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (double *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
}

uint64_t sub_20C6ADD30(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C541260))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6ADD6C()
{
  return &unk_24C541260;
}

uint64_t *sub_20C6ADD78(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **sub_20C6ADDA0(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C6ADEC0(a1);
}

uint64_t sub_20C6ADDB0()
{
  return 0;
}

uint64_t sub_20C6ADDB8(uint64_t a1, const std::type_info *a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError((pxrInternal__aapl__pxrReserved__::Vt_HashDetail *)&stru_24C527D78, a2);
  return 0;
}

uint64_t sub_20C6ADDD8()
{
  return 0;
}

uint64_t sub_20C6ADDE0()
{
  return 0;
}

uint64_t sub_20C6ADDEC()
{
  return 0;
}

_QWORD *sub_20C6ADDF8(uint64_t *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&stru_24C527D78, *a1, a2);
}

void *sub_20C6ADE0C()
{
  return &unk_24C527D78;
}

uint64_t sub_20C6ADE18()
{
  return 0;
}

uint64_t sub_20C6ADE20()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C6ADE2C()
{
  return 0;
}

uint64_t sub_20C6ADE34()
{
  return 0;
}

BOOL sub_20C6ADE3C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB45CELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C6ADE74(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527D78, a2, a3);
}

void *sub_20C6ADE94()
{
  return &unk_24C527D78;
}

uint64_t sub_20C6ADEA0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C6ADEA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C541270;
  return sub_20C6ADFC8((unsigned int **)a2, v2);
}

_QWORD **sub_20C6ADEC0(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = (_QWORD *)v2[3];
      if (v6 == v2)
      {
        v7 = 4;
        v6 = v2;
      }
      else
      {
        if (!v6)
        {
LABEL_10:
          operator delete(v2);
          return a1;
        }
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_10;
    }
  }
  return a1;
}

uint64_t sub_20C6ADF38(uint64_t *a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v7;

  v2 = atomic_load((unsigned int *)(*a1 + 32));
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x28uLL);
    sub_20BE9E6E8((uint64_t)v3, *a1);
    v4 = v3 + 8;
    atomic_store(0, v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (_QWORD *)*a1;
    *a1 = (uint64_t)v3;
    sub_20C6ADEC0(&v7);
  }
  return *a1;
}

void sub_20C6ADFB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6ADFC8(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new(0x28uLL);
  result = sub_20BE9E6E8((uint64_t)v4, a2);
  v6 = v4 + 8;
  atomic_store(0, v4 + 8);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C6AE020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6AE034@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20C325A34(a2, a1);
}

void sub_20C6AE060(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20C6AE074(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int32 *v16;
  __int32 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  __int32 *__s;
  __int32 *v22;
  __int32 *v23;

  __s = 0;
  v22 = 0;
  v23 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&__s != (__int32 **)(a1 + 80))
    sub_20BE8B37C((char *)&__s, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
  v5 = *(__int32 **)(a1 + 32);
  v6 = *(__int32 **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = v22;
    do
    {
      v8 = wmemchr(__s, *v5, v7 - __s);
      if (v8)
        v9 = v8;
      else
        v9 = v7;
      v7 = v22;
      if (v9 == v22)
      {
        if (v9 >= v23)
        {
          v10 = __s;
          v11 = v22 - __s;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62)
            sub_20BDDF694();
          v13 = (char *)v23 - (char *)__s;
          if (((char *)v23 - (char *)__s) >> 1 > v12)
            v12 = v13 >> 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_20BDE1330((uint64_t)&v23, v14);
            v10 = __s;
            v9 = v22;
          }
          else
          {
            v15 = 0;
          }
          v16 = (__int32 *)&v15[4 * v11];
          *v16 = *v5;
          v7 = v16 + 1;
          while (v9 != v10)
          {
            v17 = *--v9;
            *--v16 = v17;
          }
          __s = v16;
          v22 = v7;
          v23 = (__int32 *)&v15[4 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v9 = *v5;
          v7 = v9 + 1;
        }
        v22 = v7;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems(a1, (uint64_t)&__s);
  __p = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems(a1, (uint64_t)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems(a1, (uint64_t)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (__s)
  {
    v22 = __s;
    operator delete(__s);
  }
}

void sub_20C6AE2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C6AE328(_BYTE *a1, uint64_t a2)
{
  if (a1[152] == *(_BYTE *)(a2 + 152))
  {
    if (a1[152])
    {
      *a1 = *(_BYTE *)a2;
      sub_20C14D5BC((uint64_t)(a1 + 8), (__n128 *)(a2 + 8));
      sub_20C14D5BC((uint64_t)(a1 + 32), (__n128 *)(a2 + 32));
      sub_20C14D5BC((uint64_t)(a1 + 56), (__n128 *)(a2 + 56));
      sub_20C14D5BC((uint64_t)(a1 + 80), (__n128 *)(a2 + 80));
      sub_20C14D5BC((uint64_t)(a1 + 104), (__n128 *)(a2 + 104));
      sub_20C14D5BC((uint64_t)(a1 + 128), (__n128 *)(a2 + 128));
    }
  }
  else if (a1[152])
  {
    sub_20C6AE3F4((uint64_t)a1);
  }
  else
  {
    sub_20C6AE47C((uint64_t)a1, a2);
    a1[152] = 1;
  }
}

void sub_20C6AE3F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(_QWORD *)(a1 + 112) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(_QWORD *)(a1 + 88) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 56);
    if (v5)
    {
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 32);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 152) = 0;
  }
}

__n128 sub_20C6AE47C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  return result;
}

void sub_20C6AE548(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int32 *v16;
  __int32 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  __int32 *__s;
  __int32 *v22;
  __int32 *v23;

  __s = 0;
  v22 = 0;
  v23 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&__s != (__int32 **)(a1 + 80))
    sub_20BE8B37C((char *)&__s, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
  v5 = *(__int32 **)(a1 + 32);
  v6 = *(__int32 **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = v22;
    do
    {
      v8 = wmemchr(__s, *v5, v7 - __s);
      if (v8)
        v9 = v8;
      else
        v9 = v7;
      v7 = v22;
      if (v9 == v22)
      {
        if (v9 >= v23)
        {
          v10 = __s;
          v11 = v22 - __s;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62)
            sub_20BDDF694();
          v13 = (char *)v23 - (char *)__s;
          if (((char *)v23 - (char *)__s) >> 1 > v12)
            v12 = v13 >> 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_20BDE1330((uint64_t)&v23, v14);
            v10 = __s;
            v9 = v22;
          }
          else
          {
            v15 = 0;
          }
          v16 = (__int32 *)&v15[4 * v11];
          *v16 = *v5;
          v7 = v16 + 1;
          while (v9 != v10)
          {
            v17 = *--v9;
            *--v16 = v17;
          }
          __s = v16;
          v22 = v7;
          v23 = (__int32 *)&v15[4 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v9 = *v5;
          v7 = v9 + 1;
        }
        v22 = v7;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems(a1, (uint64_t)&__s);
  __p = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems(a1, (uint64_t)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems(a1, (uint64_t)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (__s)
  {
    v22 = __s;
    operator delete(__s);
  }
}

void sub_20C6AE7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C6AE7FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *__p;
  char *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&__p != (void **)(a1 + 80))
    sub_20BDDF7E4((char *)&__p, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(_QWORD **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = v22;
    do
    {
      v8 = (char *)__p;
      v9 = v7;
      if (__p != v7)
      {
        v9 = (char *)__p;
        while (*(_QWORD *)v9 != *v5)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v7)
      {
        if (v7 >= v23)
        {
          v11 = (v7 - (_BYTE *)__p) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            sub_20BDDF694();
          v13 = v23 - (_BYTE *)__p;
          if ((v23 - (_BYTE *)__p) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_20BDDF6A8((uint64_t)&v23, v14);
            v8 = (char *)__p;
            v7 = v22;
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = *v5;
          v10 = v16 + 8;
          while (v7 != v8)
          {
            v17 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p = v16;
          v22 = v10;
          v23 = &v15[8 * v14];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *(_QWORD *)v7 = *v5;
          v10 = v7 + 8;
        }
        v22 = v10;
        v7 = v10;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems(a1, (uint64_t)&__p);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems(a1, (uint64_t)&v18);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems(a1, (uint64_t)&v18);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20C6AEA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C6AEAC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t ***v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&v15 != (uint64_t **)(a1 + 80))
    sub_20C106430(&v15, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v5 = *(uint64_t **)(a1 + 32);
  v6 = *(uint64_t **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = v16;
    do
    {
      v8 = v7;
      if (v15 != v7)
      {
        v8 = v15;
        while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*v5 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (v8 == v7)
      {
        if ((unint64_t)v7 >= v17)
        {
          v7 = (uint64_t *)sub_20BFCA068((char **)&v15, v5);
        }
        else
        {
          v9 = *v5;
          *v7 = *v5;
          if ((v9 & 7) != 0)
          {
            v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 2, v10));
            if ((v11 & 1) == 0)
              *v7 &= 0xFFFFFFFFFFFFFFF8;
          }
          ++v7;
        }
        v16 = v7;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems((unsigned __int8 *)a1, &v15);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems((unsigned __int8 *)a1, (uint64_t **)&v12);
  v18 = &v12;
  sub_20BEEB2B8((void ***)&v18);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems((unsigned __int8 *)a1, (uint64_t **)&v12);
  v18 = &v12;
  sub_20BEEB2B8((void ***)&v18);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v12 = &v15;
  sub_20BEEB2B8((void ***)&v12);
}

void sub_20C6AECDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BEEB2B8((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6AED14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      sub_20C0B4038((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20C0B4038((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      sub_20C0B4038((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      sub_20C0B4038((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      sub_20C0B4038((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      sub_20C0B4038((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    sub_20C6AEE3C(a1);
  }
  else
  {
    sub_20C6AE47C(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_20C6AEE3C(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = (void **)(a1 + 128);
    sub_20BEEB2B8(&v2);
    v2 = (void **)(a1 + 104);
    sub_20BEEB2B8(&v2);
    v2 = (void **)(a1 + 80);
    sub_20BEEB2B8(&v2);
    v2 = (void **)(a1 + 56);
    sub_20BEEB2B8(&v2);
    v2 = (void **)(a1 + 32);
    sub_20BEEB2B8(&v2);
    v2 = (void **)(a1 + 8);
    sub_20BEEB2B8(&v2);
    *(_BYTE *)(a1 + 152) = 0;
  }
}

void sub_20C6AEECC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void ***v17;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&v14 != (uint64_t *)(a1 + 80))
    sub_20BE75818((uint64_t)&v14, *(std::string **)(a1 + 80), *(__int128 **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
  v5 = *(__int128 **)(a1 + 32);
  v6 = *(__int128 **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = v15;
    do
    {
      v8 = sub_20C020210(v14, v7, (unsigned __int8 **)v5);
      v7 = v15;
      if (v8 == v15)
      {
        v9 = v8;
        if (v8 >= v16)
        {
          v7 = sub_20BE4EE50(&v14, v5);
        }
        else
        {
          if (*((char *)v5 + 23) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v8, *(void **)v5, *((_QWORD *)v5 + 1));
          }
          else
          {
            v10 = *v5;
            *(_QWORD *)(v8 + 16) = *((_QWORD *)v5 + 2);
            *(_OWORD *)v8 = v10;
          }
          v7 = v9 + 24;
        }
        v15 = v7;
      }
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems((uint64_t *)a1, (uint64_t)&v14);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems((uint64_t *)a1, (uint64_t)&v11);
  v17 = &v11;
  sub_20BDE5038((void ***)&v17);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems((uint64_t *)a1, (uint64_t)&v11);
  v17 = &v11;
  sub_20BDE5038((void ***)&v17);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = (void **)&v14;
  sub_20BDE5038(&v11);
}

void sub_20C6AF0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BDE5038((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6AF110(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      sub_20BE7598C((uint64_t *)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20BE7598C((uint64_t *)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      sub_20BE7598C((uint64_t *)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      sub_20BE7598C((uint64_t *)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      sub_20BE7598C((uint64_t *)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      sub_20BE7598C((uint64_t *)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    sub_20C6AF238(a1);
  }
  else
  {
    sub_20C6AE47C(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_20C6AF238(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = (void **)(a1 + 128);
    sub_20BDE5038(&v2);
    v2 = (void **)(a1 + 104);
    sub_20BDE5038(&v2);
    v2 = (void **)(a1 + 80);
    sub_20BDE5038(&v2);
    v2 = (void **)(a1 + 56);
    sub_20BDE5038(&v2);
    v2 = (void **)(a1 + 32);
    sub_20BDE5038(&v2);
    v2 = (void **)(a1 + 8);
    sub_20BDE5038(&v2);
    *(_BYTE *)(a1 + 152) = 0;
  }
}

void sub_20C6AF2C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  void **v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&v12 != (_DWORD **)(a1 + 80))
    sub_20C0E29B0((uint64_t)&v12, *(_DWORD **)(a1 + 80), *(_DWORD **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v5 = *(_DWORD **)(a1 + 32);
  v6 = *(_DWORD **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = v13;
    do
    {
      v8 = v7;
      if (v12 != v7)
      {
        v8 = v12;
        while (*v8 != *(_QWORD *)v5)
        {
          if (++v8 == (_QWORD *)v7)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (v8 == (_QWORD *)v7)
      {
        if ((unint64_t)v7 >= v14)
        {
          v7 = (_DWORD *)sub_20BFD7890((uint64_t *)&v12, v5);
        }
        else
        {
          sub_20BFD6E54(v7, v5);
          sub_20BFD6EA4(v7 + 1, v5 + 1);
          v7 += 2;
        }
        v13 = v7;
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems((_DWORD *)a1, &v12);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems((_DWORD *)a1, &v9);
  v15 = (void **)&v9;
  sub_20BFD6F90(&v15);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems((_DWORD *)a1, &v9);
  v15 = (void **)&v9;
  sub_20BFD6F90(&v15);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v9 = &v12;
  sub_20BFD6F90((void ***)&v9);
}

void sub_20C6AF4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BFD6F90((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6AF500(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      sub_20BFD7014((_QWORD *)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20BFD7014((_QWORD *)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      sub_20BFD7014((_QWORD *)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      sub_20BFD7014((_QWORD *)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      sub_20BFD7014((_QWORD *)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      sub_20BFD7014((_QWORD *)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    sub_20C6AF628(a1);
  }
  else
  {
    sub_20C6AE47C(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_20C6AF628(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = (void **)(a1 + 128);
    sub_20BFD6F90(&v2);
    v2 = (void **)(a1 + 104);
    sub_20BFD6F90(&v2);
    v2 = (void **)(a1 + 80);
    sub_20BFD6F90(&v2);
    v2 = (void **)(a1 + 56);
    sub_20BFD6F90(&v2);
    v2 = (void **)(a1 + 32);
    sub_20BFD6F90(&v2);
    v2 = (void **)(a1 + 8);
    sub_20BFD6F90(&v2);
    *(_BYTE *)(a1 + 152) = 0;
  }
}

void sub_20C6AF6B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  __int128 *v7;
  unsigned __int8 *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  void *__dst;
  unint64_t v14;
  __int128 ***v15;

  v12 = 0;
  __dst = 0;
  v14 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&v12 != (__int128 **)(a1 + 80))
    sub_20C0E2FAC((uint64_t)&v12, *(__int128 **)(a1 + 80), *(__int128 **)(a1 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *(unsigned __int8 **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = (__int128 *)__dst;
    do
    {
      v8 = (unsigned __int8 *)v12;
      if (v12 == v7)
      {
        v8 = (unsigned __int8 *)v7;
      }
      else
      {
        while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v8, v5) & 1) == 0)
        {
          v8 += 56;
          if (v8 == (unsigned __int8 *)v7)
          {
            v8 = (unsigned __int8 *)v7;
            break;
          }
        }
        v7 = (__int128 *)__dst;
      }
      if (v8 == (unsigned __int8 *)v7)
      {
        if ((unint64_t)v7 >= v14)
        {
          v7 = (__int128 *)sub_20C12D654((uint64_t *)&v12, (__int128 *)v5);
        }
        else
        {
          sub_20C029E64((char *)v7, (__int128 *)v5);
          v7 = (__int128 *)((char *)v7 + 56);
        }
        __dst = v7;
      }
      v5 += 56;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems((unsigned __int8 *)a1, &v12);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems((unsigned __int8 *)a1, (__int128 **)&v9);
  v15 = &v9;
  sub_20C021740((void ***)&v15);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems((unsigned __int8 *)a1, (__int128 **)&v9);
  v15 = &v9;
  sub_20C021740((void ***)&v15);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v9 = &v12;
  sub_20C021740((void ***)&v9);
}

void sub_20C6AF8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20C021740((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20C021740((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6AF90C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      sub_20C0E314C((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20C0E314C((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      sub_20C0E314C((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      sub_20C0E314C((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      sub_20C0E314C((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      sub_20C0E314C((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    sub_20C6AFA34(a1);
  }
  else
  {
    sub_20C6AE47C(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_20C6AFA34(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = (void **)(a1 + 128);
    sub_20C021740(&v2);
    v2 = (void **)(a1 + 104);
    sub_20C021740(&v2);
    v2 = (void **)(a1 + 80);
    sub_20C021740(&v2);
    v2 = (void **)(a1 + 56);
    sub_20C021740(&v2);
    v2 = (void **)(a1 + 32);
    sub_20C021740(&v2);
    v2 = (void **)(a1 + 8);
    sub_20C021740(&v2);
    *(_BYTE *)(a1 + 152) = 0;
  }
}

void sub_20C6AFAC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  std::string *v7;
  std::string *v8;
  std::string **v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  void *__dst;
  unint64_t v14;
  void ***v15;

  v12 = 0;
  __dst = 0;
  v14 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&v12 != (std::string **)(a1 + 80))
    sub_20C0E376C((uint64_t)&v12, *(std::string **)(a1 + 80), *(std::string **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4));
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *(unsigned __int8 **)(a1 + 40);
  if (v5 != v6)
  {
    v7 = (std::string *)__dst;
    do
    {
      v8 = v12;
      if (v12 == v7)
      {
        v8 = v7;
      }
      else
      {
        while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v8, v5))
        {
          v8 += 2;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
        v7 = (std::string *)__dst;
      }
      if (v8 == v7)
      {
        if ((unint64_t)v7 >= v14)
        {
          v7 = (std::string *)sub_20C12FBAC((uint64_t *)&v12, (uint64_t)v5);
        }
        else
        {
          sub_20C02CCF8((int)&v14, (__n128 *)v7, (uint64_t)v5);
          v7 += 2;
        }
        __dst = v7;
      }
      v5 += 48;
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems((unsigned __int8 *)a1, &v12);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems((unsigned __int8 *)a1, (std::string **)&v9);
  v15 = (void ***)&v9;
  sub_20C021818((void ***)&v15);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems((unsigned __int8 *)a1, (std::string **)&v9);
  v15 = (void ***)&v9;
  sub_20C021818((void ***)&v15);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v9 = &v12;
  sub_20C021818((void ***)&v9);
}

void sub_20C6AFCDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20C021818((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20C021818((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6AFD24(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      sub_20C0E38EC((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20C0E38EC((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      sub_20C0E38EC((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      sub_20C0E38EC((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      sub_20C0E38EC((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      sub_20C0E38EC((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    sub_20C6AFE4C(a1);
  }
  else
  {
    sub_20C6AE47C(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_20C6AFE4C(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = (void **)(a1 + 128);
    sub_20C021818(&v2);
    v2 = (void **)(a1 + 104);
    sub_20C021818(&v2);
    v2 = (void **)(a1 + 80);
    sub_20C021818(&v2);
    v2 = (void **)(a1 + 56);
    sub_20C021818(&v2);
    v2 = (void **)(a1 + 32);
    sub_20C021818(&v2);
    v2 = (void **)(a1 + 8);
    sub_20C021818(&v2);
    *(_BYTE *)(a1 + 152) = 0;
  }
}

uint64_t sub_20C6AFEDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C3327A8(*(_BYTE **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C6AFF5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6[8];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C6B010C(a2, v6);
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)v4 = v6[0];
    sub_20C129CDC((void **)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v7 = 0uLL;
    v8 = 0;
    sub_20C129CDC((void **)(v4 + 32));
    *(_OWORD *)(v4 + 32) = v9;
    *(_QWORD *)(v4 + 48) = v10;
    v9 = 0uLL;
    v10 = 0;
    sub_20C129CDC((void **)(v4 + 56));
    *(_OWORD *)(v4 + 56) = v11;
    *(_QWORD *)(v4 + 72) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20C129CDC((void **)(v4 + 80));
    *(_OWORD *)(v4 + 80) = v13;
    *(_QWORD *)(v4 + 96) = v14;
    v13 = 0uLL;
    v14 = 0;
    sub_20C129CDC((void **)(v4 + 104));
    *(_OWORD *)(v4 + 104) = v15;
    *(_QWORD *)(v4 + 120) = v16;
    v15 = 0uLL;
    v16 = 0;
    sub_20C129CDC((void **)(v4 + 128));
    *(_OWORD *)(v4 + 128) = v17;
    *(_QWORD *)(v4 + 144) = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = (void **)&v17;
    sub_20BF8CA20(&v19);
    v19 = (void **)&v15;
    sub_20BF8CA20(&v19);
    v19 = (void **)&v13;
    sub_20BF8CA20(&v19);
    v19 = (void **)&v11;
    sub_20BF8CA20(&v19);
    v19 = (void **)&v9;
    sub_20BF8CA20(&v19);
    v19 = (void **)&v7;
    sub_20BF8CA20(&v19);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

char *sub_20C6B010C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  char *result;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)a2);
  v4 = (char *)sub_20C332B20(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Swap(v4, a2);
  v6 = a1[1];
  if (v6 && (a1[1] & 3) != 3)
    result = (char *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C6B016C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C0282CC(v1);
  _Unwind_Resume(a1);
}

void sub_20C6B0180(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void ***v16;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v4 = (_QWORD *)(a1 + 80);
  if (&v13 != (uint64_t *)(a1 + 80))
    sub_20C129B64((uint64_t)&v13, *(_QWORD **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4);
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(_QWORD **)(a1 + 40);
  while (v5 != v6)
  {
    v7 = v13;
    v8 = v14;
    if (v13 == v14)
    {
      v9 = v13;
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, v5) & 1) == 0)
      {
        v7 += 16;
        if (v7 == v8)
        {
          v7 = v8;
          break;
        }
      }
      v9 = v7;
      v7 = v14;
    }
    if (v9 == v7)
      sub_20C11AA68(&v13, v5);
    v5 += 2;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems((unsigned __int8 *)a1, (unsigned __int8 *)&v13);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems((unsigned __int8 *)a1, (unsigned __int8 *)&v10);
  v16 = &v10;
  sub_20BF8CA20((void ***)&v16);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems((unsigned __int8 *)a1, (unsigned __int8 *)&v10);
  v16 = &v10;
  sub_20BF8CA20((void ***)&v16);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v10 = (void **)&v13;
  sub_20BF8CA20(&v10);
}

void sub_20C6B034C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BF8CA20((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BF8CA20((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6B0388(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      sub_20C129CDC((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20C129CDC((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      sub_20C129CDC((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      sub_20C129CDC((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      sub_20C129CDC((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      sub_20C129CDC((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    sub_20C6B04B0(a1);
  }
  else
  {
    sub_20C6AE47C(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_20C6B04B0(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = (void **)(a1 + 128);
    sub_20BF8CA20(&v2);
    v2 = (void **)(a1 + 104);
    sub_20BF8CA20(&v2);
    v2 = (void **)(a1 + 80);
    sub_20BF8CA20(&v2);
    v2 = (void **)(a1 + 56);
    sub_20BF8CA20(&v2);
    v2 = (void **)(a1 + 32);
    sub_20BF8CA20(&v2);
    v2 = (void **)(a1 + 8);
    sub_20BF8CA20(&v2);
    *(_BYTE *)(a1 + 152) = 0;
  }
}

uint64_t **sub_20C6B0540@<X0>(uint64_t **a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20C0EC740(a2, a1);
}

void sub_20C6B056C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C6B0588(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C541370;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C6B05C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C541370;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C6B05E8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, _QWORD *a10)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, a3, a4, a5, *a6, a7, a8, *a9, *a10, *(_QWORD *)(a1 + 16));
}

uint64_t sub_20C6B0624(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5413F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6B0660()
{
  return &unk_24C5413F0;
}

_QWORD *sub_20C6B0674(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C541418;
  result[1] = v3;
  return result;
}

uint64_t sub_20C6B06AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C541418;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C6B06CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, _QWORD *a9, _QWORD *a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, a3, a4, *a5, a6, a7, *a8, *a9, *a10);
}

uint64_t sub_20C6B0708(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C541498))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6B0744()
{
  return &unk_24C541498;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClipsTopology(uint64_t *a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t *Instance;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  unint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v35;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v36;
  uint64_t v37;
  unint64_t v38;

  if (!sub_20C6B0A48(a1))
    return 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v4);
  memset(v29, 0, sizeof(v29));
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  if (!sub_20C6B0B10((uint64_t *)v29, a2, v6))
    goto LABEL_30;
  v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1[1];
  if (v7)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
      v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a1;
    else
      v7 = 0;
  }
  v28 = v7;
  sub_20BF1DD04((uint64_t *)&v28);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v38);
  v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v8);
  v10 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v10)
    v10 = (uint64_t *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  sub_20C6B3858(v29, v9, v10, (uint64_t)&v34);
  sub_20C1034E8(&v32, (uint64_t *)&v28);
  sub_20C1034E8(&v30, (uint64_t *)&v35);
  sub_20C6B39B0((pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, &v30);
  v11 = v31;
  if (v31)
  {
    v12 = (unsigned int *)(v31 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v15 = v33;
  if (v33)
  {
    v16 = (unsigned int *)(v33 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v20 = v38;
  v21 = atomic_load(Instance + 18);
  v22 = v20 >= v21
     || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v38, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
  if ((v37 & 7) != 0)
  {
    v24 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20C103234(&v36);
  sub_20C103234(&v35);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v38);
  sub_20C103234(&v28);
  if (v22)
  {
    v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v26, 0);
    v23 = 1;
  }
  else
  {
LABEL_30:
    v23 = 0;
  }
  v34 = (void **)v29;
  sub_20C248B78(&v34);
  return v23;
}

void sub_20C6B0988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  sub_20C6B3A80((uint64_t)&a18);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v18 - 40));
  sub_20C103234(&a10);
  a18 = (void **)&a11;
  sub_20C248B78(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B0A48(uint64_t *a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  const char *Identifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[4];
  char v13;

  v2 = sub_20BFD2F78(a1);
  if (!(v3 & 1 | (unint64_t)v2))
    return 1;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  Identifier = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
  if (!pxrInternal__aapl__pxrReserved__::TfIsFile(Identifier, 0))
    return 1;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v7 = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
  if ((pxrInternal__aapl__pxrReserved__::TfIsWritable(v7) & 1) != 0)
    return 1;
  v12[0] = "usdUtils/stitchClips.cpp";
  v12[1] = "_LayerIsWritable";
  v12[2] = 83;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_LayerIsWritable(const SdfLayerHandle &)";
  v13 = 0;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
  if (*(char *)(v10 + 23) >= 0)
    v11 = (const char *)v10;
  else
    v11 = *(const char **)v10;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Error: Layer %s is unwritable.", v11);
  return 0;
}

uint64_t sub_20C6B0B10(uint64_t *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  unint64_t *Instance;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v30;
  char IsDormant;
  void *v32;
  const char *v34;
  uint64_t v35;
  uint64_t *String;
  const char *v37;
  uint64_t **v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  char **v44;
  char *v45;
  uint64_t v46;
  const char *v47;
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v42 = a1;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
  sub_20C3C9FB4(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v8 = *a2;
  v7 = a2[1];
  v39 = &v42;
  v40 = a2;
  if (v7 != v8)
  {
    v12 = (v7 - v8) / 24;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      LODWORD(v44) = 0;
      v49 = 65539;
      v50 = 55;
      tbb::task_group_context::init((uint64_t)&v44, v9, v10, v11);
      v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v44;
      v13 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v43, 0x38uLL);
      *(_BYTE *)(v13 - 11) = 1;
      *(_QWORD *)v13 = &off_24C5414C8;
      *(_QWORD *)(v13 + 8) = v12;
      *(_OWORD *)(v13 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v13 + 32) = &v39;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(_BYTE *)(v13 + 52) = 5;
      *(_QWORD *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v13 - 40) + 16))(*(_QWORD *)(v13 - 40), v13, v13 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v44);
    }
    else
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *v40 + v15;
        v45 = 0;
        v46 = 0;
        v44 = &v45;
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v17, &v44, &v43);
        v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(**v39 + v16);
        v19 = *v18;
        *v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v43;
        v43 = 0;
        sub_20BF1D8F4((int)v18, v19);
        sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v43);
        sub_20BDE9D48((uint64_t)&v44, v45);
        v16 += 8;
        v15 += 24;
        --v12;
      }
      while (v12);
    }
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v21 = v41;
  v22 = atomic_load(Instance + 18);
  if (v21 < v22
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    goto LABEL_25;
  }
  v23 = *a2;
  if (a2[1] == *a2)
    goto LABEL_21;
  v24 = v42;
  v25 = (uint64_t *)*v42;
  v26 = *(_QWORD *)*v42;
  if (!v26)
  {
LABEL_16:
    v44 = (char **)"usdUtils/stitchClips.cpp";
    v45 = "_ClipLayersAreValid";
    v46 = 804;
    v47 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ClipLayersAreValid(const SdfLayerRefPtrVector &"
          ", const _ClipFileVector &, const SdfPath &)";
    v48 = 0;
    v34 = (const char *)(v23 + 24 * v26);
    if (v34[23] < 0)
      v34 = *(const char **)v34;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to open layer %s\n", v34);
    goto LABEL_25;
  }
  v27 = 0;
  v28 = 0;
  v29 = 1;
  while (1)
  {
    v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v25);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v30, a3, &v44);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v44);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v32, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v44);
    v28 |= IsDormant ^ 1;
    v23 = *a2;
    if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
      break;
    ++v27;
    v25 = (uint64_t *)(*v24 + 8 * v27);
    if (!*(_QWORD *)(*v24 + 8 * v29++))
    {
      v26 = v29 - 1;
      goto LABEL_16;
    }
  }
  if ((v28 & 1) == 0)
  {
LABEL_21:
    v44 = (char **)"usdUtils/stitchClips.cpp";
    v45 = "_ClipLayersAreValid";
    v46 = 814;
    v47 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ClipLayersAreValid(const SdfLayerRefPtrVector &"
          ", const _ClipFileVector &, const SdfPath &)";
    v48 = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
    if (*((char *)String + 23) >= 0)
      v37 = (const char *)String;
    else
      v37 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clip path specified <%s>", v37);
LABEL_25:
    v35 = 0;
    goto LABEL_26;
  }
  v35 = 1;
LABEL_26:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
  return v35;
}

void sub_20C6B0E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  tbb::task *v20;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a15, v20);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a17);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a13);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClipsManifest(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  void **v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  unint64_t *Instance;
  unint64_t v14;
  unint64_t v15;
  BOOL IsCleanImpl;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  uint64_t *v21[3];
  unint64_t v22;
  void **v23;

  if (sub_20C6B0A48(a1))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v8);
    memset(v21, 0, sizeof(v21));
    v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
    if (sub_20C6B0B10((uint64_t *)v21, a3, v10))
    {
      v11 = (void **)a1[1];
      if (v11)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
          v11 = (void **)*a1;
        else
          v11 = 0;
      }
      v23 = v11;
      sub_20BF1DD04((uint64_t *)&v23);
      v12 = a2[1];
      if (v12)
      {
        if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)a2 + 1) + 14))
          v12 = *a2;
        else
          v12 = 0;
      }
      v20 = v12;
      sub_20BF1DD04((uint64_t *)&v20);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22);
      sub_20C6B6160((std::string::size_type)&v23, (std::string::size_type)&v20, v21, a4);
      Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!Instance)
        Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v14 = v22;
      v15 = atomic_load(Instance + 18);
      if (v14 >= v15)
      {
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22);
        sub_20C103234(&v20);
        sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v23);
      }
      else
      {
        IsCleanImpl = pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22);
        sub_20C103234(&v20);
        sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v23);
        if (!IsCleanImpl)
          goto LABEL_15;
      }
      v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v18, 0);
      v17 = 1;
      goto LABEL_19;
    }
LABEL_15:
    v17 = 0;
LABEL_19:
    v23 = (void **)v21;
    sub_20C248B78(&v23);
    return v17;
  }
  return 0;
}

void sub_20C6B10B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20C103234(&a9);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a14);
  a14 = (void **)&a10;
  sub_20C248B78(&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClips(uint64_t *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, char a4, uint64_t *a5, double a6, double a7)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  void **Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  char v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  void **v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  char v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  std::string::size_type size;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  int IsDormant;
  void *v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  std::string::size_type v52;
  std::string::size_type *v53;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v54;
  uint64_t v55;
  char *v56;
  double *v57;
  uint64_t v58;
  char *v59;
  double *v60;
  unint64_t v61;
  std::string::size_type v62;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v63;
  void *v64;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v65;
  std::string::size_type v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  std::string::size_type v70;
  uint64_t v71;
  std::string::size_type v72;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v73;
  uint64_t RealPath;
  __int128 v75;
  uint64_t v76;
  std::string::size_type v77;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v78;
  uint64_t v79;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v80;
  uint64_t v81;
  void *v82;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v83;
  void *v84;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v85;
  uint64_t v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  uint64_t v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v91;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v92;
  pxrInternal__aapl__pxrReserved__::TfToken *v93;
  unint64_t v94;
  uint64_t *EmptyString;
  size_t v96;
  _BYTE *v97;
  pxrInternal__aapl__pxrReserved__::TfToken *v98;
  const void *v99;
  uint64_t *v100;
  std::string::size_type *v101;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  unsigned int *v107;
  unsigned int v108;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v109;
  _BOOL4 v110;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v111;
  uint64_t v112;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v113;
  uint64_t v114;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v115;
  uint64_t v116;
  std::string::size_type v117;
  unsigned int *v118;
  unsigned int v119;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v120;
  int v121;
  void *v122;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v123;
  uint64_t v124;
  int v125;
  const char *v126;
  uint64_t *String;
  const char *v128;
  const char *v129;
  std::string::size_type v130;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  double *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v142;
  uint64_t v143;
  char *v144;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v145;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v146;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v147;
  pxrInternal__aapl__pxrReserved__::TfToken *v148;
  const char **v149;
  unint64_t v150;
  uint64_t *v151;
  size_t v152;
  std::string *v153;
  pxrInternal__aapl__pxrReserved__::TfToken *v154;
  const void *v155;
  uint64_t *v156;
  int v157;
  const std::string::value_type *v158;
  std::string::size_type v159;
  std::string *v160;
  __int128 v161;
  unsigned int *v162;
  unsigned int v163;
  unint64_t *Instance;
  unint64_t v165;
  unint64_t v166;
  BOOL IsCleanImpl;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v168;
  const char *v169;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v170;
  const char *v171;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v172;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v173;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v174;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v176;
  const char **v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v181;
  void *v182[2];
  char v183;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v184;
  void *v185[2];
  char v186;
  unint64_t v187;
  char v188;
  void *v189[2];
  uint64_t v190;
  void *__p;
  double *v192;
  char v193;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v194;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v195;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v196;
  uint64_t v197;
  void *v198[2];
  char v199;
  _BYTE v200[32];
  uint64_t v201;
  std::string v202;
  uint64_t v203;
  __int128 __dst;
  uint64_t v205;
  uint64_t v206;

  if (!sub_20C6B0A48(a1))
    return 0;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v14);
  v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  Identifier = (void **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
  pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipTopologyName(Identifier, (uint64_t)v185);
  v189[1] = 0;
  v190 = 0;
  v189[0] = &v189[1];
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v185, v189, &v184);
  sub_20BDE9D48((uint64_t)v189, (_QWORD *)v189[1]);
  v17 = v184;
  if (!v184)
  {
    v189[1] = 0;
    v190 = 0;
    v189[0] = &v189[1];
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew((uint64_t)v185, (pxrInternal__aapl__pxrReserved__::TfToken *)v189, &v202);
    v18 = v184;
    v184 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v202.__r_.__value_.__r.__words[0];
    v202.__r_.__value_.__r.__words[0] = 0;
    sub_20BF1D8F4((int)&v184, v18);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v202);
    sub_20BDE9D48((uint64_t)v189, (_QWORD *)v189[1]);
  }
  sub_20C1034E8((uint64_t *)v189, (uint64_t *)&v184);
  v19 = sub_20C6B0A48((uint64_t *)v189);
  v20 = v189[1];
  if (v189[1])
  {
    v21 = (unsigned int *)((char *)v189[1] + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
  }
  if ((v19 & 1) != 0)
  {
    v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v184);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v24);
    v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    v26 = (void **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v25);
    pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipManifestName(v26, (uint64_t)v182);
    v189[1] = 0;
    v190 = 0;
    v189[0] = &v189[1];
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v182, v189, &v181);
    sub_20BDE9D48((uint64_t)v189, (_QWORD *)v189[1]);
    v27 = v181;
    if (!v181)
    {
      v189[1] = 0;
      v190 = 0;
      v189[0] = &v189[1];
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew((uint64_t)v182, (pxrInternal__aapl__pxrReserved__::TfToken *)v189, &v202);
      v28 = v181;
      v181 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v202.__r_.__value_.__r.__words[0];
      v202.__r_.__value_.__r.__words[0] = 0;
      sub_20BF1D8F4((int)&v181, v28);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v202);
      sub_20BDE9D48((uint64_t)v189, (_QWORD *)v189[1]);
    }
    sub_20C1034E8((uint64_t *)v189, (uint64_t *)&v181);
    v29 = sub_20C6B0A48((uint64_t *)v189);
    v30 = v189[1];
    if (v189[1])
    {
      v31 = (unsigned int *)((char *)v189[1] + 8);
      do
      {
        v32 = __ldxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
    }
    if ((v29 & 1) == 0)
    {
      v50 = 0;
      goto LABEL_216;
    }
    v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v181);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v34);
    v178 = 0;
    v179 = 0;
    v180 = 0;
    if (!sub_20C6B0B10((uint64_t *)&v178, a2, a3))
      goto LABEL_208;
    v188 = a4;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v187);
    v176 = v17;
    sub_20C6B3858((unint64_t *)&v178, a3, a5, (uint64_t)&v194);
    sub_20C1034E8((uint64_t *)v189, (uint64_t *)&v184);
    sub_20C1034E8((uint64_t *)&v202, (uint64_t *)&v195);
    sub_20C6B39B0((pxrInternal__aapl__pxrReserved__::SdfPath *)v189, (uint64_t *)&v202);
    size = v202.__r_.__value_.__l.__size_;
    if (v202.__r_.__value_.__l.__size_)
    {
      v36 = (unsigned int *)(v202.__r_.__value_.__l.__size_ + 8);
      do
      {
        v37 = __ldxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
    }
    v39 = v189[1];
    if (v189[1])
    {
      v40 = (unsigned int *)((char *)v189[1] + 8);
      do
      {
        v41 = __ldxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
        (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
    }
    v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v43, a3, v189);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v189);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v45, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v189);
    if (IsDormant)
    {
      sub_20C1034E8((uint64_t *)v189, (uint64_t *)&v196);
      sub_20C6B39B0((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (uint64_t *)v189);
      v46 = v189[1];
      if (v189[1])
      {
        v47 = (unsigned int *)((char *)v189[1] + 8);
        do
        {
          v48 = __ldxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
      }
    }
    else
    {
      v51 = (void *)a1[1];
      if (v51)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
          v51 = (void *)*a1;
        else
          v51 = 0;
      }
      v189[0] = v51;
      sub_20BF1DD04((uint64_t *)v189);
      sub_20C6B42B8((uint64_t *)v189, (uint64_t *)&v196, a3, a5);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v189);
    }
    v53 = (std::string::size_type *)(a1 + 1);
    v52 = a1[1];
    if (v52)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
        v52 = *a1;
      else
        v52 = 0;
    }
    v202.__r_.__value_.__r.__words[0] = v52;
    sub_20BF1DD04((uint64_t *)&v202);
    v54 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v54)
      v54 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    sub_20C6B4B78((uint64_t *)&v202, a3, v54, a5, (uint64_t)v189);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v202);
    sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v189, v55, v56);
    v57 = v192;
    sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v189, v58, v59);
    v60 = &v192[2 * (uint64_t)v189[0]];
    if (v57 != v60)
    {
      v61 = 0;
      do
      {
        v57[1] = (double)v61++;
        v57 += 2;
      }
      while (v57 != v60);
    }
    v62 = *v53;
    if (*v53)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
        v62 = *a1;
      else
        v62 = 0;
    }
    v202.__r_.__value_.__r.__words[0] = v62;
    sub_20BF1DD04((uint64_t *)&v202);
    v63 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v63)
      v63 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    sub_20C6B4ECC((uint64_t *)&v202, a3, v63, (uint64_t)v189, a5);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v202);
    sub_20BF5618C((uint64_t)v189);
    v64 = (void *)*v53;
    if (*v53)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
        v64 = (void *)*a1;
      else
        v64 = 0;
    }
    v189[0] = v64;
    sub_20BF1DD04((uint64_t *)v189);
    v65 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v65)
      v65 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    sub_20C6B4604((uint64_t *)v189, a3, (_QWORD *)v65 + 1, a5, (uint64_t)&v202);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v189);
    v66 = v202.__r_.__value_.__r.__words[0];
    v68 = v178;
    v67 = v179;
    v201 = 0;
    memset(v200, 0, sizeof(v200));
    sub_20C1FCD48((unint64_t *)v200, v202.__r_.__value_.__r.__words[0]);
    v69 = (v67 - (uint64_t)v68) >> 3;
    v70 = v66 - v69;
    if (v66 != v69)
    {
      v71 = 0;
      v72 = v70;
      do
      {
        sub_20C288B54((uint64_t)v200, (__int128 *)(v203 + v71));
        v71 += 48;
        --v72;
      }
      while (v72);
    }
    v73 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v73);
    if (*(char *)(RealPath + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, *(void **)RealPath, *(_QWORD *)(RealPath + 8));
    }
    else
    {
      v75 = *(_OWORD *)RealPath;
      v205 = *(_QWORD *)(RealPath + 16);
      __dst = v75;
    }
    if (v202.__r_.__value_.__r.__words[0] != v70)
    {
      v76 = 0;
      v77 = 0;
      do
      {
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(&v178[v76]);
        v79 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v78);
        v80 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(&v178[v76]);
        v81 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v80);
        sub_20C6B2FA8(v79, v81, (uint64_t)&__dst, (uint64_t)v198);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v189, v198);
        sub_20C1FCED4((uint64_t)v200, (__int128 *)v189);
        if (v193 < 0)
          operator delete(__p);
        if (SHIBYTE(v190) < 0)
          operator delete(v189[0]);
        if (v199 < 0)
          operator delete(v198[0]);
        ++v77;
        ++v76;
      }
      while (v77 < v202.__r_.__value_.__r.__words[0] - v70);
    }
    v82 = (void *)*v53;
    if (*v53)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
        v82 = (void *)*a1;
      else
        v82 = 0;
    }
    v189[0] = v82;
    sub_20BF1DD04((uint64_t *)v189);
    v83 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v83)
      v83 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    sub_20C6B48C0((uint64_t *)v189, a3, (_QWORD *)v83 + 1, (uint64_t)v200, a5);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v189);
    if (SHIBYTE(v205) < 0)
      operator delete((void *)__dst);
    sub_20C00A724(v200);
    sub_20C00A724(&v202);
    sub_20C6B6160((std::string::size_type)&v181, (std::string::size_type)&v184, &v178, a3);
    v84 = (void *)*v53;
    if (*v53)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
        v84 = (void *)*a1;
      else
        v84 = 0;
    }
    v198[0] = v84;
    sub_20BF1DD04((uint64_t *)v198);
    v85 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v181);
    v86 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v85);
    v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v181);
    v88 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v87);
    v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)v198);
    v90 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v89);
    sub_20C6B2FA8(v86, v88, v90, (uint64_t)&__dst);
    v91 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v91)
      v91 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    v92 = v27;
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v189, &__dst);
    v93 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8((uint64_t *)v198);
    v177 = (const char **)v93;
    v94 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v94)
    {
      v93 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v94 = (unint64_t)v93;
    }
    if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v93);
    if (*((char *)EmptyString + 23) >= 0)
      v96 = *((unsigned __int8 *)EmptyString + 23);
    else
      v96 = EmptyString[1];
    v97 = v200;
    v98 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)v200, v96 + 1);
    if (v200[23] < 0)
      v97 = *(_BYTE **)v200;
    if (v96)
    {
      if (*((char *)EmptyString + 23) >= 0)
        v99 = EmptyString;
      else
        v99 = (const void *)*EmptyString;
      v98 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v97, v99, v96);
    }
    *(_WORD *)&v97[v96] = 58;
    if ((*((_QWORD *)v91 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
      v100 = (uint64_t *)((*((_QWORD *)v91 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v100 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v98);
    v27 = v92;
    v101 = (std::string::size_type *)(a1 + 1);
    v102 = *((char *)v100 + 23);
    if (v102 >= 0)
      v103 = (const std::string::value_type *)v100;
    else
      v103 = (const std::string::value_type *)*v100;
    if (v102 >= 0)
      v104 = *((unsigned __int8 *)v100 + 23);
    else
      v104 = v100[1];
    v105 = std::string::append((std::string *)v200, v103, v104);
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v202.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v206);
    sub_20C6B6658(v177, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v94 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v206, (__int128 *)v189);
    if ((v206 & 7) != 0)
    {
      v107 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
      do
        v108 = __ldxr(v107);
      while (__stlxr(v108 - 2, v107));
    }
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if ((v200[23] & 0x80000000) != 0)
      operator delete(*(void **)v200);
    if (v193 < 0)
      operator delete(__p);
    if (SHIBYTE(v190) < 0)
      operator delete(v189[0]);
    if (SHIBYTE(v205) < 0)
      operator delete((void *)__dst);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v198);
    v109 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v184);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(v109, (uint64_t)v189);
    v110 = sub_20BFE52EC((uint64_t)v189);
    sub_20BFE6A54((uint64_t)v189);
    if (v110)
    {
      v189[0] = "usdUtils/stitchClips.cpp";
      v189[1] = "_StitchLayers";
      v190 = 729;
      __p = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_StitchLayers(const SdfLayerHandle &, const Sd"
            "fLayerRefPtr &, const SdfLayerRefPtr &, const SdfLayerRefPtrVector &, const SdfPath &, const TfToken &)";
      LOBYTE(v192) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v189, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to generate topology.");
    }
    else
    {
      v111 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v184);
      v112 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v111);
      v113 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v184);
      v114 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v113);
      v115 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      v116 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v115);
      sub_20C6B2FA8(v112, v114, v116, (uint64_t)v189);
      v117 = *v101;
      if (*v101)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
          v117 = *a1;
        else
          v117 = 0;
      }
      v202.__r_.__value_.__r.__words[0] = v117;
      sub_20BF1DD04((uint64_t *)&v202);
      sub_20C6B32AC((uint64_t *)&v202, (unsigned __int8 *)v189);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v202);
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
    }
    if ((v197 & 7) != 0)
    {
      v118 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
      do
        v119 = __ldxr(v118);
      while (__stlxr(v119 - 2, v118));
    }
    sub_20C103234(&v196);
    sub_20C103234(&v195);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v194 + 1);
    sub_20BFD265C(&v194);
    v120 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v120, a3, v189);
    v121 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v189);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v122, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v189);
    if (v121)
    {
      v189[0] = "usdUtils/stitchClips.cpp";
      v189[1] = "_SetTimeCodeRange";
      v190 = 541;
      __p = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SetTimeCodeRange(const SdfLayerHandle &, cons"
            "t SdfPath &, double, double, const TfToken &)";
      LOBYTE(v192) = 0;
      v123 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      v124 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v123);
      v125 = *(char *)(v124 + 23);
      v126 = *(const char **)v124;
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
      if (v125 >= 0)
        v128 = (const char *)v124;
      else
        v128 = v126;
      if (*((char *)String + 23) >= 0)
        v129 = (const char *)String;
      else
        v129 = (const char *)*String;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v189, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim in path: @%s@<%s>", v128, v129);
    }
    else
    {
      v130 = *v101;
      if (*v101)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
          v130 = *a1;
        else
          v130 = 0;
      }
      v202.__r_.__value_.__r.__words[0] = v130;
      sub_20BF1DD04((uint64_t *)&v202);
      v131 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v131)
        v131 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      sub_20C6B4B78((uint64_t *)&v202, a3, (_QWORD *)v131 + 10, a5, (uint64_t)v189);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v202);
      sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v189, v132, v133);
      v134 = (uint64_t)v192;
      sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v189, v135, v136);
      v137 = &v192[2 * (uint64_t)v189[0]];
      v138 = 126 - 2 * __clz(((uint64_t)v137 - v134) >> 4);
      if (v137 == (double *)v134)
        v139 = 0;
      else
        v139 = v138;
      sub_20C6B6710(v134, v137, v139, 1);
      if (v189[0])
      {
        if (a7 == 1.79769313e308)
        {
          sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v189, v140, v141);
          a7 = v192[2 * (uint64_t)v189[0] - 2];
        }
        v142 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(v142, a7);
        if (a6 == 1.79769313e308)
        {
          sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v189, v143, v144);
          a6 = *v192;
        }
        v145 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(v145, a6);
      }
      sub_20BF5618C((uint64_t)v189);
    }
    if (v188)
    {
      v146 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v101;
      if (*v101)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
          v146 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a1;
        else
          v146 = 0;
      }
      v194 = v146;
      sub_20BF1DD04((uint64_t *)&v194);
      v147 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v147)
        v147 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      v148 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8((uint64_t *)&v194);
      v149 = (const char **)v148;
      v150 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v150)
      {
        v148 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        v150 = (unint64_t)v148;
      }
      if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
        v151 = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v151 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v148);
      if (*((char *)v151 + 23) >= 0)
        v152 = *((unsigned __int8 *)v151 + 23);
      else
        v152 = v151[1];
      v153 = &v202;
      v154 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v202, v152 + 1);
      if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v153 = (std::string *)v202.__r_.__value_.__r.__words[0];
      if (v152)
      {
        if (*((char *)v151 + 23) >= 0)
          v155 = v151;
        else
          v155 = (const void *)*v151;
        v154 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v153, v155, v152);
      }
      *(_WORD *)((char *)&v153->__r_.__value_.__l.__data_ + v152) = 58;
      if ((*((_QWORD *)v147 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
        v156 = (uint64_t *)((*((_QWORD *)v147 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v156 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v154);
      v157 = *((char *)v156 + 23);
      if (v157 >= 0)
        v158 = (const std::string::value_type *)v156;
      else
        v158 = (const std::string::value_type *)*v156;
      if (v157 >= 0)
        v159 = *((unsigned __int8 *)v156 + 23);
      else
        v159 = v156[1];
      v160 = std::string::append(&v202, v158, v159);
      v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
      v190 = v160->__r_.__value_.__r.__words[2];
      *(_OWORD *)v189 = v161;
      v160->__r_.__value_.__l.__size_ = 0;
      v160->__r_.__value_.__r.__words[2] = 0;
      v160->__r_.__value_.__r.__words[0] = 0;
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v200);
      sub_20C6B723C(v149, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v150 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)v200, &v188);
      if ((v200[0] & 7) != 0)
      {
        v162 = (unsigned int *)(*(_QWORD *)v200 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v202.__r_.__value_.__l.__data_);
      sub_20C103234(&v194);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v165 = v187;
    v166 = atomic_load(Instance + 18);
    if (v165 >= v166)
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v187);
    }
    else
    {
      IsCleanImpl = pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v187, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v187);
      v17 = v176;
      if (!IsCleanImpl)
      {
LABEL_208:
        if (!v17)
        {
          v168 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v184);
          v169 = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v168);
          pxrInternal__aapl__pxrReserved__::TfDeleteFile(v169);
        }
        if (!v27)
        {
          v170 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v181);
          v171 = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v170);
          pxrInternal__aapl__pxrReserved__::TfDeleteFile(v171);
        }
        v50 = 0;
        goto LABEL_215;
      }
    }
    v172 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v184);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v172, 0);
    v173 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v181);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v173, 0);
    v174 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v174, 0);
    v50 = 1;
LABEL_215:
    v189[0] = &v178;
    sub_20C248B78((void ***)v189);
LABEL_216:
    sub_20C103234(&v181);
    if (v183 < 0)
      operator delete(v182[0]);
    goto LABEL_218;
  }
  v50 = 0;
LABEL_218:
  sub_20C103234(&v184);
  if (v186 < 0)
    operator delete(v185[0]);
  return v50;
}

void sub_20C6B2078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (*(char *)(v58 - 137) < 0)
    operator delete(*(void **)(v58 - 160));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a53);
  sub_20C6B3A80((uint64_t)&a49);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a33);
  a53 = &a16;
  sub_20C248B78((void ***)&a53);
  sub_20C103234(&a19);
  if (a25 < 0)
    operator delete(__p);
  sub_20C103234(&a26);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipTopologyName(void **a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  std::string::size_type v14;
  std::string::size_type v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string __dst;
  void *v23[2];
  char v24;
  const void *v25[2];
  char v26;

  sub_20BDDC0E4(v25, ".");
  v4 = *((char *)a1 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = (char *)*a1;
  if (v5)
    v7 = (char *)a1[1];
  else
    v7 = (char *)*((unsigned __int8 *)a1 + 23);
  v8 = (unsigned __int8 *)&v7[(_QWORD)v6];
  if (v7)
  {
    v9 = (unsigned __int8 *)v6;
    v10 = &v7[(_QWORD)v6];
    do
    {
      v11 = v9;
      v12 = v9;
      while (1)
      {
        v13 = *v12++;
        if (v13 == 46)
          break;
        v11 = v12;
        if (v12 == v8)
        {
          v11 = (unsigned __int8 *)v10;
          goto LABEL_16;
        }
      }
      v9 = v11 + 1;
      v10 = (char *)v11;
    }
    while (v12 != v8);
  }
  else
  {
    v11 = (unsigned __int8 *)v6;
  }
LABEL_16:
  v14 = v11 - (unsigned __int8 *)v6;
  if (v11 == v8)
    v15 = -1;
  else
    v15 = v14;
  sub_20BDDC0E4(v23, "topology");
  if (v15 == -1)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      sub_20BDDBFAC(&__dst, *a1, (unint64_t)a1[1]);
    else
      __dst = *(std::string *)a1;
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v25, (const void **)v23, (uint64_t)__p);
    if ((v21 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v17 = v21;
    else
      v17 = (std::string::size_type)__p[1];
    v18 = std::string::insert(&__dst, v15, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
    }
    else
    {
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v19;
    }
    if ((char)v21 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete((void *)v25[0]);
}

void sub_20C6B267C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipManifestName(void **a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  std::string::size_type v14;
  std::string::size_type v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string __dst;
  void *v23[2];
  char v24;
  const void *v25[2];
  char v26;

  sub_20BDDC0E4(v25, ".");
  v4 = *((char *)a1 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = (char *)*a1;
  if (v5)
    v7 = (char *)a1[1];
  else
    v7 = (char *)*((unsigned __int8 *)a1 + 23);
  v8 = (unsigned __int8 *)&v7[(_QWORD)v6];
  if (v7)
  {
    v9 = (unsigned __int8 *)v6;
    v10 = &v7[(_QWORD)v6];
    do
    {
      v11 = v9;
      v12 = v9;
      while (1)
      {
        v13 = *v12++;
        if (v13 == 46)
          break;
        v11 = v12;
        if (v12 == v8)
        {
          v11 = (unsigned __int8 *)v10;
          goto LABEL_16;
        }
      }
      v9 = v11 + 1;
      v10 = (char *)v11;
    }
    while (v12 != v8);
  }
  else
  {
    v11 = (unsigned __int8 *)v6;
  }
LABEL_16:
  v14 = v11 - (unsigned __int8 *)v6;
  if (v11 == v8)
    v15 = -1;
  else
    v15 = v14;
  sub_20BDDC0E4(v23, "manifest");
  if (v15 == -1)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      sub_20BDDBFAC(&__dst, *a1, (unint64_t)a1[1]);
    else
      __dst = *(std::string *)a1;
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v25, (const void **)v23, (uint64_t)__p);
    if ((v21 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v17 = v21;
    else
      v17 = (std::string::size_type)__p[1];
    v18 = std::string::insert(&__dst, v15, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
    }
    else
    {
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v19;
    }
    if ((char)v21 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete((void *)v25[0]);
}

void sub_20C6B2884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClipsTemplate(uint64_t *a1, uint64_t *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t a5, int a6, _QWORD *a7, double a8, double a9, double a10, double a11)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  uint64_t (*v24)(uint64_t *);
  char v25;
  uint64_t (*v26)(uint64_t *);
  char v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v30;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  uint64_t v39;
  void *v40;
  uint64_t *String;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v42;
  uint64_t *EmptyString;
  uint64_t *v44;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v45;
  uint64_t *v46;
  uint64_t *v47;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v63;
  uint64_t *v64;
  uint64_t *v65;
  pxrInternal__aapl__pxrReserved__::TfToken *v66;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v67;
  uint64_t *v68;
  pxrInternal__aapl__pxrReserved__::TfToken *v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v71;
  uint64_t *v72;
  pxrInternal__aapl__pxrReserved__::TfToken *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v77;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v78;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v79;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v80;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v81;
  unint64_t v82;
  _QWORD **v83;
  _QWORD **v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v89;
  void *v90[2];
  char v91;
  void *__p;
  char v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  result = sub_20C6B0A48(a1);
  if ((_DWORD)result)
  {
    v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v23);
    v24 = sub_20BFD2F78(a2);
    if (v25 & 1 | (unint64_t)v24 && (v26 = sub_20BFD2F78(a3), v27 & 1 | (unint64_t)v26))
    {
      pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a1, (uint64_t)a4, &v89);
      v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v28);
      v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v30);
      v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      v33 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v32);
      sub_20C6B2FA8(Identifier, RealPath, v33, (uint64_t)v87);
      v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
      v35 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v34);
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
      v37 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v36);
      v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      v39 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v38);
      sub_20C6B2FA8(v35, v37, v39, (uint64_t)v85);
      v40 = (void *)a1[1];
      if (v40)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
          v40 = (void *)*a1;
        else
          v40 = 0;
      }
      v90[0] = v40;
      sub_20BF1DD04((uint64_t *)v90);
      sub_20C6B32AC((uint64_t *)v90, (unsigned __int8 *)v87);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v90);
      v84 = 0;
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
      v42 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v42)
        v42 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if ((*((_QWORD *)v42 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)v42 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
      v44 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)EmptyString);
      sub_20C1D1478((uint64_t)v44, (uint64_t)String);
      v45 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v45)
        v45 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if ((*((_QWORD *)v45 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
        v46 = (uint64_t *)((*((_QWORD *)v45 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v46 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
      v47 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v46);
      sub_20C1D1478((uint64_t)v47, a5);
      v48 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v48)
        v48 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if ((*((_QWORD *)v48 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
        v49 = (uint64_t *)((*((_QWORD *)v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
      v50 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v49);
      v51 = v50;
      v52 = v50[1];
      if (v52 && (v50[1] & 3) != 3)
        (*(void (**)(uint64_t *))((v52 & 0xFFFFFFFFFFFFFFF8) + 32))(v50);
      v51[1] = (uint64_t)&unk_24C52064B;
      *(double *)v51 = a8;
      v53 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v53)
        v53 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if ((*((_QWORD *)v53 + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
        v54 = (uint64_t *)((*((_QWORD *)v53 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v53);
      v55 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v54);
      v56 = v55;
      v57 = v55[1];
      if (v57 && (v55[1] & 3) != 3)
        (*(void (**)(uint64_t *))((v57 & 0xFFFFFFFFFFFFFFF8) + 32))(v55);
      v56[1] = (uint64_t)&unk_24C52064B;
      *(double *)v56 = a9;
      v58 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v58)
        v58 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if ((*((_QWORD *)v58 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
        v59 = (uint64_t *)((*((_QWORD *)v58 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v59 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v58);
      v60 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v59);
      v61 = v60;
      v62 = v60[1];
      if (v62 && (v60[1] & 3) != 3)
        (*(void (**)(uint64_t *))((v62 & 0xFFFFFFFFFFFFFFF8) + 32))(v60);
      v61[1] = (uint64_t)&unk_24C52064B;
      *(double *)v61 = a10;
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v90, v85);
      v63 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v63)
        v63 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if ((*((_QWORD *)v63 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
        v64 = (uint64_t *)((*((_QWORD *)v63 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v64 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v63);
      v65 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v64);
      v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1D1BCC((uint64_t)v65, (__int128 *)v90);
      if (v93 < 0)
        operator delete(__p);
      if (v91 < 0)
        operator delete(v90[0]);
      if (a11 != 1.79769313e308)
      {
        v67 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v67)
          v67 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if ((*((_QWORD *)v67 + 9) & 0xFFFFFFFFFFFFFFF8) != 0)
          v68 = (uint64_t *)((*((_QWORD *)v67 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v68 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v67);
        v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v68);
        v69 = v66;
        v70 = *((_QWORD *)v66 + 1);
        if (v70 && (*((_QWORD *)v66 + 1) & 3) != 3)
          v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v70 & 0xFFFFFFFFFFFFFFF8) + 32))(v66);
        *((_QWORD *)v69 + 1) = &unk_24C52064B;
        *(double *)v69 = a11;
      }
      if (a6)
      {
        v71 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v71)
          v71 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if ((*((_QWORD *)v71 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
          v72 = (uint64_t *)((*((_QWORD *)v71 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v72 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v71);
        v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (__int128 *)v72);
        v73 = v66;
        v74 = *((_QWORD *)v66 + 1);
        if (v74 && (*((_QWORD *)v66 + 1) & 3) != 3)
          v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v74 & 0xFFFFFFFFFFFFFFF8) + 32))(v66);
        *((_QWORD *)v73 + 1) = &unk_24C51FCF3;
        *(_BYTE *)v73 = 1;
      }
      v83 = 0;
      if ((*a7 & 0xFFFFFFFFFFFFFFF8) != 0)
        v75 = (uint64_t *)((*a7 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v75 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
      v76 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v83, (__int128 *)v75);
      sub_20BF4D0C4((uint64_t)v76, (const void ****)&v84);
      v77 = sub_20C0B0CA4(&v89);
      v78 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v78)
        v78 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      sub_20C681788((const void ****)&v83, (pxrInternal__aapl__pxrReserved__::VtValue *)v90);
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v77, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v78 + 8), (const pxrInternal__aapl__pxrReserved__::VtValue *)v90);
      sub_20BF4C2D8((uint64_t)v90);
      v79 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(v79, a8);
      v80 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(v80, a9);
      v81 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v81, 0);
      sub_20BF49F14(&v83, 0);
      sub_20BF49F14(&v84, 0);
      if (v86 < 0)
        operator delete(v85[0]);
      v82 = v88;
      if ((v82 & 0x80000000) != 0)
        operator delete(v87[0]);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v82, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v89);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20C6B2EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  unint64_t v28;

  sub_20BF4C2D8((uint64_t)&a25);
  sub_20BF49F14((_QWORD ***)&a9, 0);
  sub_20BF49F14(&a10, 0);
  if (a16 < 0)
    operator delete(__p);
  v28 = a22;
  if ((v28 & 0x80000000) != 0)
    operator delete(a17);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v28, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a23);
  _Unwind_Resume(a1);
}

void sub_20C6B2FA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::string::size_type v9;
  char v10;
  std::string *v11;
  std::string::size_type v12;
  size_t v13;
  size_t v14;
  std::string *v15;
  std::string::size_type v16;
  unsigned int v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  std::string::size_type v22;
  std::string::size_type v23;
  _BOOL4 v24;
  std::string *v25;
  unint64_t v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string __str;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  memset(&v29, 0, sizeof(v29));
  pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)a1, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v28.__r_.__value_.__l.__size_;
    operator delete(v28.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_3;
LABEL_32:
    pxrInternal__aapl__pxrReserved__::TfNormPath(&v28, a1, 0);
    v19 = std::string::insert(&v28, 0, "./");
    v20 = v19->__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
    v29.__r_.__value_.__r.__words[0] = v20;
    v29.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = v17;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  if (!*((_BYTE *)&v28.__r_.__value_.__s + 23))
    goto LABEL_32;
LABEL_3:
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    v21 = 0;
    v24 = 1;
    v22 = v29.__r_.__value_.__l.__size_;
    goto LABEL_38;
  }
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v28, a3, 0);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&__str, a2, 0);
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&v28, &__p);
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p.__r_.__value_.__l.__size_;
  if (v9)
  {
    v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : __str.__r_.__value_.__l.__size_;
    v13 = strlen((const char *)v11);
    if (v12 >= v13)
    {
      v14 = v13;
      v15 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!strncmp((const char *)v15, (const char *)v11, v14))
      {
        std::string::operator=(&v29, &__str);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v16 = __p.__r_.__value_.__l.__size_;
        std::string::replace(&v29, 0, v16, "./");
        v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
    }
  }
  if (v10 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v17 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
LABEL_34:
  v21 = v17;
  v22 = v29.__r_.__value_.__l.__size_;
  v23 = v17;
  if ((v17 & 0x80u) != 0)
    v23 = v29.__r_.__value_.__l.__size_;
  v24 = v23 == 0;
LABEL_38:
  v25 = &v29;
  if (v24)
  {
    v25 = (std::string *)a1;
    v21 = *(_BYTE *)(a1 + 23);
  }
  if (v21 < 0)
  {
    if (v24)
      v26 = *(_QWORD *)(a1 + 8);
    else
      v26 = v22;
    sub_20BDDBFAC((_BYTE *)a4, v25->__r_.__value_.__l.__data_, v26);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_20C6B3238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_20C6B32AC(uint64_t *a1, unsigned __int8 *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  int v5;
  _BYTE *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _BYTE v15[8];
  std::__shared_weak_count *v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v4, (uint64_t)v15);
  v5 = sub_20C1038CC((uint64_t)v15);
  sub_20C0FBCF8((uint64_t)v15, (uint64_t)&v11);
  if (v5)
    v6 = v15;
  else
    v6 = 0;
  v19.n128_u64[1] = (unint64_t)v6;
  v20 = 0;
  v17 = v11;
  v18 = v12;
  sub_20C6B72C4(&v19, (uint64_t)&v17, a2, &v21);
  v13 = v21;
  v14 = v22;
  sub_20C0FBCF8((uint64_t)v15, (uint64_t)&v21);
  if (sub_20C104DA0((uint64_t)&v13, (uint64_t)&v21))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath(v7, (__int128 *)a2, 0);
  }
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20C6B33B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B33D4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C5414C8;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C5414C8;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C6B3774((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6B3774((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

void sub_20C6B3774(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  _QWORD **v10;
  _QWORD *v11[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 != v2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 8 * v2;
    v6 = 24 * v2;
    do
    {
      v7 = **(_QWORD **)(v4 + 8) + v6;
      v11[0] = 0;
      v11[1] = 0;
      v10 = v11;
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v7, &v10, &v12);
      v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(***(_QWORD ***)v4 + v5);
      v9 = *v8;
      *v8 = v12;
      v12 = 0;
      sub_20BF1D8F4((int)v8, v9);
      sub_20C103234(&v12);
      sub_20BDE9D48((uint64_t)&v10, v11[0]);
      v5 += 8;
      v6 += 24;
      --v3;
    }
    while (v3);
  }
}

void sub_20C6B3830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12)
{
  sub_20C103234(&a12);
  sub_20BDE9D48((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20C6B3858(unint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v13;
  _DWORD v14[32];
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C6B3ADC(a4, a2, a3);
  v9 = *a1;
  v10 = a1[1];
  if (*a1 < v10)
  {
    v14[0] = 1;
    v15 = 65539;
    v16 = 52;
    tbb::task_group_context::init((uint64_t)v14, v6, v7, v8);
    v13 = (tbb::task_group_context *)v14;
    v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v13, 0x40uLL);
    *(_BYTE *)(v11 - 11) = 1;
    *(_QWORD *)v11 = &off_24C541510;
    *(_QWORD *)(v11 + 8) = a4;
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = v9;
    *(_QWORD *)(v11 + 32) = 1;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
    *(_DWORD *)(v11 + 48) = 0;
    *(_BYTE *)(v11 + 52) = 5;
    *(_QWORD *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    *(_BYTE *)(v11 + 56) = 0;
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v11 - 40) + 16))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v14);
  }
}

void sub_20C6B3968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  tbb::task *v11;
  tbb::task *v12;

  v12 = v11;
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a9, v12);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a10);
  sub_20C6B3A80(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6B39B0(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4[0] = &off_24C5415A0;
  v5 = v4;
  pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C6B3A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C6B3A80(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 16));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C6B3ADC(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  std::string __p;

  v6 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  memset(&__p, 0, sizeof(__p));
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (uint64_t *)(a1 + 8));
  sub_20BDE9D48((uint64_t)&v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (uint64_t *)(a1 + 16));
  sub_20BDE9D48((uint64_t)&v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_20C6B3BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _DWORD *v17;
  _DWORD *v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v19;

  sub_20BDE9D48((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(__p);
  sub_20C103234(v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_20BFD265C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B3C60(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v30[16];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((_BYTE *)this + 56) == 2)
  {
    v4 = *((_QWORD *)this - 4);
    v5 = *(_QWORD *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      *((_QWORD *)this + 1) = sub_20C6B3ADC(v4 + 24, *((_DWORD **)this + 1), (uint64_t *)(*((_QWORD *)this + 1) + 24));
      *(_BYTE *)(v4 + 9) = 1;
    }
  }
  v6 = *((_QWORD *)this + 4);
  v7 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 3)) >> 3;
  if (v6 < v7)
  {
    v8 = *((_QWORD *)this + 5);
    if (v8 > 1)
      goto LABEL_15;
    if (v8 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        v9 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
        *((_QWORD *)this - 4) = v9;
        *(_QWORD *)(v9 - 24) = 2;
        v10 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v9, 0x40uLL);
        v11 = *((_BYTE *)this + 56);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &unk_24C520F68;
        __dmb(0xBu);
        *(_BYTE *)(v9 + 8) = 0;
        *(_QWORD *)v9 = off_24C541558;
        *(_BYTE *)(v9 + 9) = 0;
        *(_BYTE *)(v9 + 10) = v11;
        *(_QWORD *)(v9 + 16) = 0;
        *(_BYTE *)(v10 - 11) = 1;
        *(_QWORD *)v10 = &off_24C541510;
        *(_QWORD *)(v10 + 8) = *((_QWORD *)this + 1);
        *(_QWORD *)(v10 + 16) = *((_QWORD *)this + 2);
        v12 = *((_QWORD *)this + 3)
            + 8
            * ((((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 3)) >> 3)
              + (unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 3)) >> 3 < 0)) >> 1);
        *((_QWORD *)this + 2) = v12;
        *(_QWORD *)(v10 + 24) = v12;
        *(_QWORD *)(v10 + 32) = *((_QWORD *)this + 4);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v10 + 40) = v13;
        *(_DWORD *)(v10 + 48) = 2;
        *(_BYTE *)(v10 + 52) = *((_BYTE *)this + 52);
        *(_BYTE *)(v10 + 56) = 2;
        *((_BYTE *)this + 56) = 1;
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v10 - 40))(*(_QWORD *)(v10 - 40), v10, v10 - 8);
        v6 = *((_QWORD *)this + 4);
        v7 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 3)) >> 3;
        if (v6 >= v7)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v6 < v7 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v30 = 0x10000;
    v31 = *((_OWORD *)this + 1);
    v32 = *((_QWORD *)this + 4);
    while (1)
    {
      sub_20BF87AFC(v30, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v30[2];
      if (v30[2] < 2u)
      {
        v16 = v30[0];
        if (v30[v30[0] + 3] < v18
          && *((_QWORD *)&v31 + 3 * v30[0] + 2) < (unint64_t)((uint64_t)(*((_QWORD *)&v31 + 3 * v30[0])
                                                                             - *((_QWORD *)&v31 + 3 * v30[0] + 1)) >> 3))
        {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      v19 = v30[1];
      v20 = v30[v30[1] + 3];
      v21 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
      *((_QWORD *)this - 4) = v21;
      *(_QWORD *)(v21 - 24) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x40uLL);
      v23 = (char *)&v31 + 24 * v19;
      v24 = *((_BYTE *)this + 56);
      *(_BYTE *)(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      *(_BYTE *)(v21 + 8) = 0;
      *(_QWORD *)v21 = off_24C541558;
      *(_BYTE *)(v21 + 9) = 0;
      *(_BYTE *)(v21 + 10) = v24;
      *(_QWORD *)(v21 + 16) = 0;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C541510;
      *(_QWORD *)(v22 + 8) = *((_QWORD *)this + 1);
      v25 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 16) = v25;
      v26 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v26;
      *(_QWORD *)(v22 + 40) = v26;
      *(_DWORD *)(v22 + 48) = 2;
      LOBYTE(v26) = *((_BYTE *)this + 52);
      *(_BYTE *)(v22 + 56) = 2;
      *(_BYTE *)(v22 + 52) = v26 - v20;
      *((_BYTE *)this + 56) = 1;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v30[2];
      v30[1] = (v30[1] + 1) & 7;
LABEL_30:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        goto LABEL_34;
    }
    v16 = v30[0];
LABEL_25:
    sub_20C6B52E8(this, (uint64_t **)&v31 + 3 * v16);
    v17 = --v30[2];
    v30[0] = (v30[0] - 1) & 7;
    goto LABEL_30;
  }
  sub_20C6B52E8(this, (uint64_t **)this + 2);
LABEL_34:
  if (*((_BYTE *)this + 56) == 1)
  {
    v27 = *((_QWORD *)this - 4);
    v28 = *((_QWORD *)this + 1);
    __dmb(0xBu);
    *(_QWORD *)(v27 + 16) = v28;
  }
  return 0;
}

uint64_t sub_20C6B40C4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a1 = off_24C541558;
  if (*(_BYTE *)(a1 + 9))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
  }
  return a1;
}

void sub_20C6B413C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C6B40C4(a1);
  operator delete(v1);
}

uint64_t sub_20C6B4150(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  if (*(_BYTE *)(a1 + 9))
  {
    v2 = *(uint64_t **)(a1 + 16);
    sub_20C1034E8(&v16, v2 + 1);
    sub_20C1034E8(&v14, (uint64_t *)(a1 + 32));
    sub_20C6B39B0((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, &v14);
    v3 = v15;
    if (v15)
    {
      v4 = (unsigned int *)(v15 + 8);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v17;
    if (v17)
    {
      v8 = v17 + 2;
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v7 + 8))(v7);
    }
    if (*v2 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7))
      sub_20C6B42B8(v2 + 2, (uint64_t *)(a1 + 40), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v2, v2 + 3);
  }
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v11 = *(_QWORD *)(a1 - 32);
    v12 = *(_QWORD *)(a1 + 16);
    __dmb(0xBu);
    *(_QWORD *)(v11 + 16) = v12;
  }
  return 0;
}

void sub_20C6B424C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  if (a12)
  {
    v16 = a12 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C6B42B8(uint64_t *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _QWORD *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v15;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[5];

  v8 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v8)
    v8 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  v9 = (_QWORD *)((char *)v8 + 8);
  sub_20C6B4604(a1, a3, (_QWORD *)v8 + 1, a4, (uint64_t)v19);
  sub_20C6B4604(a2, a3, v9, a4, (uint64_t)v18);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_20C1FCD48((unint64_t *)v16, v18[0] + v19[0]);
  if (v19[0])
  {
    v10 = (__int128 *)v19[4];
    v11 = 48 * v19[0];
    do
    {
      sub_20C288B54((uint64_t)v16, v10);
      v10 += 3;
      v11 -= 48;
    }
    while (v11);
  }
  if (v18[0])
  {
    v12 = (__int128 *)v18[4];
    v13 = 48 * v18[0];
    do
    {
      sub_20C288B54((uint64_t)v16, v12);
      v12 += 3;
      v13 -= 48;
    }
    while (v13);
  }
  sub_20C6B48C0(a1, a3, v9, (uint64_t)v16, a4);
  sub_20C00A724(v16);
  sub_20C00A724(v18);
  sub_20C00A724(v19);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v14)
    v14 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C6B44A8(a1, a2, a3, (_QWORD *)v14 + 10, a4);
  v15 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v15)
    v15 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C6B44A8(a1, a2, a3, v15, a4);
}

void sub_20C6B4468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20C00A724((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C6B44A8(uint64_t *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _QWORD *a4, _QWORD *a5)
{
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _QWORD v16[5];
  _QWORD v17[5];

  sub_20C6B4B78(a1, a3, a4, a5, (uint64_t)v17);
  sub_20C6B4B78(a2, a3, a4, a5, (uint64_t)v16);
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  sub_20C6B4E34((unint64_t *)v14, v16[0] + v17[0]);
  if (v17[0])
  {
    v10 = (_OWORD *)v17[4];
    v11 = 16 * v17[0];
    do
    {
      sub_20C6B50CC((uint64_t)v14, v10++);
      v11 -= 16;
    }
    while (v11);
  }
  if (v16[0])
  {
    v12 = (_OWORD *)v16[4];
    v13 = 16 * v16[0];
    do
    {
      sub_20C6B50CC((uint64_t)v14, v12++);
      v13 -= 16;
    }
    while (v13);
  }
  sub_20C6B4ECC(a1, a3, a4, (uint64_t)v14, a5);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF5618C((uint64_t)v16);
  sub_20BF5618C((uint64_t)v17);
}

void sub_20C6B45C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B4604@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  unint64_t v11;
  uint64_t *EmptyString;
  size_t v13;
  std::string *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const void *v16;
  uint64_t *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8(a1);
  v10 = v9;
  v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v11 = (unint64_t)v9;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  if (*((char *)EmptyString + 23) >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = &v31;
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v31, v13 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0)
      v16 = EmptyString;
    else
      v16 = (const void *)*EmptyString;
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  v18 = *((char *)v17 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)v17;
  else
    v19 = (const std::string::value_type *)*v17;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v17 + 23);
  else
    v20 = v17[1];
  v21 = std::string::append(&v31, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v33 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
  if ((v34 & 7) != 0)
  {
    v23 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
  {
    if ((v36 & 4) != 0)
      v25 = (*(uint64_t (**)(uint64_t *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
    else
      v25 = v35;
    v26 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v25;
    *(_OWORD *)(a5 + 16) = v26;
    v27 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(a5 + 32) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 - 16);
      if (*(_QWORD *)(a5 + 24))
        v28 = *(unint64_t **)(a5 + 24);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    *(_QWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return sub_20BF4C2D8((uint64_t)&v35);
}

void sub_20C6B484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_20BF4C2D8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20C6B48C0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  const char **v10;
  unint64_t v11;
  uint64_t *EmptyString;
  size_t v13;
  std::string *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const void *v16;
  uint64_t *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  uint64_t v28;

  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8(a1);
  v10 = (const char **)v9;
  v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v11 = (unint64_t)v9;
  }
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  if (*((char *)EmptyString + 23) >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = &v25;
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v25, v13 + 1);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0)
      v16 = EmptyString;
    else
      v16 = (const void *)*EmptyString;
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  v18 = *((char *)v17 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)v17;
  else
    v19 = (const std::string::value_type *)*v17;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v17 + 23);
  else
    v20 = v17[1];
  v21 = std::string::append(&v25, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v27 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
  sub_20C6B4AC0(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, a4);
  if ((v28 & 7) != 0)
  {
    v23 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_20C6B4A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  unsigned int *v24;
  unsigned int v25;

  if ((a23 & 7) != 0)
  {
    v24 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6B4AC0(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[1] = &off_24C525670;
  sub_20BF56B40(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C6B4B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B4B78@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  unint64_t v11;
  uint64_t *EmptyString;
  size_t v13;
  std::string *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const void *v16;
  uint64_t *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8(a1);
  v10 = v9;
  v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v11 = (unint64_t)v9;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  if (*((char *)EmptyString + 23) >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = &v31;
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v31, v13 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0)
      v16 = EmptyString;
    else
      v16 = (const void *)*EmptyString;
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  v18 = *((char *)v17 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)v17;
  else
    v19 = (const std::string::value_type *)*v17;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v17 + 23);
  else
    v20 = v17[1];
  v21 = std::string::append(&v31, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v33 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
  if ((v34 & 7) != 0)
  {
    v23 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (sub_20BF5A0F8((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
  {
    if ((v36 & 4) != 0)
      v25 = (*(uint64_t (**)(uint64_t *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
    else
      v25 = v35;
    v26 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v25;
    *(_OWORD *)(a5 + 16) = v26;
    v27 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(a5 + 32) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 - 16);
      if (*(_QWORD *)(a5 + 24))
        v28 = *(unint64_t **)(a5 + 24);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    *(_QWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return sub_20BF4C2D8((uint64_t)&v35);
}

void sub_20C6B4DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_20BF4C2D8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20C6B4E34(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20BF59F18((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20BF59F18((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_OWORD *)&v6[v8] = *(_OWORD *)(v3 + v8 * 8);
        v8 += 2;
      }
      while (2 * v5 != v8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20C6B4ECC(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  const char **v10;
  unint64_t v11;
  uint64_t *EmptyString;
  size_t v13;
  std::string *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const void *v16;
  uint64_t *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  uint64_t v28;

  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8(a1);
  v10 = (const char **)v9;
  v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v11 = (unint64_t)v9;
  }
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  if (*((char *)EmptyString + 23) >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = &v25;
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v25, v13 + 1);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0)
      v16 = EmptyString;
    else
      v16 = (const void *)*EmptyString;
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  v18 = *((char *)v17 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)v17;
  else
    v19 = (const std::string::value_type *)*v17;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v17 + 23);
  else
    v20 = v17[1];
  v21 = std::string::append(&v25, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v27 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
  sub_20C6B5230(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, a4);
  if ((v28 & 7) != 0)
  {
    v23 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_20C6B5070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  unsigned int *v24;
  unsigned int v25;

  if ((a23 & 7) != 0)
  {
    v24 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C6B50CC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(__int128 **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF59F18(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 16 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2d &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_20C6B5230(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[1] = off_24C51EBA0;
  sub_20BF56B40(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C6B52CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6B52E8(_QWORD *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::string::size_type size;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v19;
  uint64_t *String;
  pxrInternal__aapl__pxrReserved__::TfToken *v21;
  const char **v22;
  unint64_t v23;
  uint64_t *EmptyString;
  size_t v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  std::string *v27;
  const void *v28;
  uint64_t *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  char IsDormant;
  void *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v47;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v48;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v49;
  unint64_t v50;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v51;
  char v52;
  void *v53;
  double v54;
  std::string::size_type v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v59;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v60;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v61;
  char v62;
  void *v63;
  std::string::size_type v64;
  std::string::size_type v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v69;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v70;
  double EndTimeCode;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v74;
  int HasInfo;
  void *v76;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v77;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v78;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v79;
  void *v80;
  std::string *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *__p[2];
  std::string::size_type v96;
  void *v97;
  char v98;
  void *v99;
  uint64_t v100;
  char v101;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v102;
  std::string v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v4 = (uint64_t *)result[1];
    v5 = v4 + 1;
    v90 = *a2;
    v91 = v4 + 3;
    do
    {
      sub_20C1034E8((uint64_t *)__p, v5);
      sub_20C1034E8((uint64_t *)&v103, v2);
      sub_20C6B39B0((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (uint64_t *)&v103);
      size = v103.__r_.__value_.__l.__size_;
      if (v103.__r_.__value_.__l.__size_)
      {
        v7 = (unsigned int *)(v103.__r_.__value_.__l.__size_ + 8);
        do
        {
          v8 = __ldxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p[1];
      if (__p[1])
      {
        v11 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v12 = __ldxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v10 + 8))(v10);
      }
      result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10);
      if (*v4 != *result)
      {
        sub_20C683A98(&v92, v2);
        sub_20C6B5DEC(&v92);
        sub_20C1034E8((uint64_t *)__p, v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer((uint64_t *)__p, (uint64_t)v4, &v94);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v94);
        v15 = __p[1];
        if (__p[1])
        {
          v16 = (unsigned int *)((char *)__p[1] + 8);
          do
          {
            v17 = __ldxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
        }
        v19 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v19)
          v19 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
        v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EEAF8(v4 + 2);
        v22 = (const char **)v21;
        v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v23)
        {
          v21 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          v23 = (unint64_t)v21;
        }
        if ((*v91 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*v91 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
        if (*((char *)EmptyString + 23) >= 0)
          v25 = *((unsigned __int8 *)EmptyString + 23);
        else
          v25 = EmptyString[1];
        v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v103, v25 + 1);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v103;
        else
          v27 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if (v25)
        {
          if (*((char *)EmptyString + 23) >= 0)
            v28 = EmptyString;
          else
            v28 = (const void *)*EmptyString;
          v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v27, v28, v25);
        }
        *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v25) = 58;
        if ((*((_QWORD *)v19 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
          v29 = (uint64_t *)((*((_QWORD *)v19 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
        v30 = *((char *)v29 + 23);
        if (v30 >= 0)
          v31 = (const std::string::value_type *)v29;
        else
          v31 = (const std::string::value_type *)*v29;
        if (v30 >= 0)
          v32 = *((unsigned __int8 *)v29 + 23);
        else
          v32 = v29[1];
        v33 = std::string::append(&v103, v31, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v96 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v99);
        sub_20C6B5FAC(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v23 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99, (uint64_t)String);
        if ((v99 & 7) != 0)
        {
          v35 = (unsigned int *)((unint64_t)v99 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        if (SHIBYTE(v96) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v37 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v37)
          v37 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        sub_20C6B4604(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (_QWORD *)v37 + 1, v91, (uint64_t)&v103);
        v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, __p);
        IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)__p);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v40, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
        if ((IsDormant & 1) == 0)
        {
          v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v2);
          Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v41);
          v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v2);
          RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v43);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v4 + 2);
          v46 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v45);
          sub_20C6B2FA8(Identifier, RealPath, v46, (uint64_t)&v99);
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, &v99);
          sub_20C1FCED4((uint64_t)&v103, (__int128 *)__p);
          if (v98 < 0)
            operator delete(v97);
          if (SHIBYTE(v96) < 0)
            operator delete(__p[0]);
          v47 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v47)
            v47 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C6B48C0(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (_QWORD *)v47 + 1, (uint64_t)&v103, v91);
          if (v101 < 0)
            operator delete(v99);
        }
        sub_20C00A724(&v103);
        v48 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v48)
          v48 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        sub_20C6B4B78(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, v48, v91, (uint64_t)__p);
        v49 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v49)
          v49 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        sub_20C6B4604(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (_QWORD *)v49 + 1, v91, (uint64_t)&v103);
        v50 = v103.__r_.__value_.__r.__words[0];
        sub_20C00A724(&v103);
        v51 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, &v103);
        v52 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v103);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v53, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v103);
        if ((v52 & 1) == 0)
        {
          sub_20C683A98((uint64_t *)&v103, v2);
          v54 = sub_20C6B5DEC((uint64_t *)&v103);
          v55 = v103.__r_.__value_.__l.__size_;
          if (v103.__r_.__value_.__l.__size_)
          {
            v56 = (unsigned int *)(v103.__r_.__value_.__l.__size_ + 8);
            do
            {
              v57 = __ldxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v55 + 8))(v55);
          }
          *(double *)&v103.__r_.__value_.__l.__data_ = v54;
          *(double *)&v103.__r_.__value_.__l.__size_ = (double)v50 + -1.0;
          sub_20C291350((uint64_t)__p, &v103);
          v59 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v59)
            v59 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C6B4ECC(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, v59, (uint64_t)__p, v91);
        }
        sub_20BF5618C((uint64_t)__p);
        v60 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v60)
          v60 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        sub_20C6B4B78(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (_QWORD *)v60 + 10, v91, (uint64_t)__p);
        v61 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v61, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, &v103);
        v62 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v103);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v63, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v103);
        v5 = v4 + 1;
        v3 = v90;
        if ((v62 & 1) == 0)
        {
          sub_20C683A98((uint64_t *)&v103, v2);
          *(double *)&v64 = sub_20C6B5DEC((uint64_t *)&v103);
          v65 = v103.__r_.__value_.__l.__size_;
          if (v103.__r_.__value_.__l.__size_)
          {
            v66 = (unsigned int *)(v103.__r_.__value_.__l.__size_ + 8);
            do
            {
              v67 = __ldxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v65 + 8))(v65);
          }
          sub_20C683A98((uint64_t *)&v99, v2);
          v69 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v99);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v69))
          {
            v70 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20C44DFA8((uint64_t *)&v99);
            EndTimeCode = pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(v70);
          }
          else
          {
            v72 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v99);
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v72, &v103);
            v73 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v103);
            v74 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v74)
              v74 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            HasInfo = pxrInternal__aapl__pxrReserved__::SdfSpec::HasInfo((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v74 + 480));
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v76, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v103);
            EndTimeCode = 0.0;
            if (HasInfo)
            {
              v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8((uint64_t *)&v99);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v77, &v102);
              v78 = sub_20C0B0CA4(&v102);
              v79 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v79)
                v79 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v78, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v79 + 480), &v103);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v80, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v102);
              if (sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
              {
                if ((v103.__r_.__value_.__s.__data_[8] & 4) != 0)
                  v81 = (std::string *)(*(uint64_t (**)(std::string *))((v103.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(&v103);
                else
                  v81 = &v103;
                EndTimeCode = *(double *)&v81->__r_.__value_.__l.__data_;
              }
              sub_20BF4C2D8((uint64_t)&v103);
            }
          }
          v82 = v100;
          if (v100)
          {
            v83 = (unsigned int *)(v100 + 8);
            do
            {
              v84 = __ldxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
              (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
          }
          v103.__r_.__value_.__r.__words[0] = v64;
          v103.__r_.__value_.__l.__size_ = v64;
          sub_20C291350((uint64_t)__p, &v103);
          if (EndTimeCode - *(double *)&v64 != 0.0)
          {
            *(double *)&v103.__r_.__value_.__l.__data_ = *(double *)&v64 + EndTimeCode - *(double *)&v64;
            *(double *)&v103.__r_.__value_.__l.__size_ = EndTimeCode;
            sub_20C291350((uint64_t)__p, &v103);
          }
          v86 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v86)
            v86 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C6B4ECC(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (_QWORD *)v86 + 10, (uint64_t)__p, v91);
        }
        sub_20BF5618C((uint64_t)__p);
        result = (_QWORD *)v93;
        if (v93)
        {
          v87 = (unsigned int *)(v93 + 8);
          do
          {
            v88 = __ldxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20C6B5B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;

  sub_20BF4C2D8((uint64_t)&a35);
  v41 = a29;
  if (a29)
  {
    v42 = (unsigned int *)(a29 + 8);
    do
    {
      v43 = __ldxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  sub_20BF5618C((uint64_t)&a15);
  if (a13)
  {
    v45 = a13 + 2;
    do
    {
      v46 = __ldxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(a1);
}

double sub_20C6B5DEC(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  int HasInfo;
  void *v9;
  double v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  void *v14;
  double *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v2))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20C44DFA8(a1);
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(v3);
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v5, &v17);
    v6 = sub_20C0B0CA4(&v17);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    HasInfo = pxrInternal__aapl__pxrReserved__::SdfSpec::HasInfo((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 488));
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
    v10 = 0.0;
    if (HasInfo)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C44DFA8(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v11, &v16);
      v12 = sub_20C0B0CA4(&v16);
      v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v13)
        v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v12, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 488), &v17);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
      if (sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
      {
        if ((v18 & 4) != 0)
          v15 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
        else
          v15 = (double *)&v17;
        v10 = *v15;
      }
      sub_20BF4C2D8((uint64_t)&v17);
    }
    return v10;
  }
}

void sub_20C6B5F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B5FAC(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  unsigned int *v10[3];

  v10[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v10[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C6B6048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_WORD *sub_20C6B606C(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C5415A0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20C6B60A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C5415A0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

BOOL sub_20C6B60C4(uint64_t a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return (*a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v3 + 54) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_20C6B6118(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C541680))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6B6154()
{
  return &unk_24C541680;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C6B6160(std::string::size_type a1, std::string::size_type a2, uint64_t **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  std::string::size_type *v10;
  std::string::size_type *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  std::string::size_type *v15;
  std::string::size_type v16[3];
  std::string::size_type *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v8 = a3[1];
  memset(v16, 0, sizeof(v16));
  sub_20C6B62D8((uint64_t *)v16, v7, v8, v8 - v7);
  pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifestFromLayers(v16, a4, (uint64_t *)&v14);
  v15 = v16;
  sub_20BEB4844((void ***)&v15);
  v9 = sub_20C0EEAF8((uint64_t *)&v14);
  v10 = (std::string::size_type *)operator new(0x20uLL);
  *v10 = (std::string::size_type)&off_24C5416A8;
  v10[1] = (std::string::size_type)&v14;
  v10[2] = a1;
  v10[3] = a2;
  v17 = v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(v9, a4, (uint64_t)v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return sub_20C103234(&v14);
}

void sub_20C6B6270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6B62D8(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = sub_20C20E618((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_20C6B633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEB4844(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C6B6364(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C5416A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C6B63A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C5416A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_20C6B63CC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  void *result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  int Variability;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  int IsCustom;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  void *v19;
  uint64_t TypeName;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
  if ((_DWORD)result)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1[1]);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath((uint64_t *)&v21, v5, this);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v21)
      || (v22 = "usdUtils/stitchClips.cpp",
          v23 = "operator()",
          v24 = 671,
          v25 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GenerateClipManifest(const SdfLayerRefPtr"
                " &, const SdfLayerRefPtr &, const SdfLayerRefPtrVector &, const SdfPath &)::(anonymous class)::operator("
                ")(const SdfPath &) const",
          v26 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v22, "generatedAttr", 0) & 1) != 0))
    {
      sub_20C1034E8((uint64_t *)&v22, a1[2]);
      v6 = sub_20C0AEAB8(&v21);
      TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(v6);
      v7 = sub_20C0AEAB8(&v21);
      Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(v7);
      v9 = sub_20C0AEAB8(&v21);
      IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(v9);
      pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer(&v22, this, (uint64_t)&TypeName, Variability, IsCustom);
      v11 = v23;
      if (v23)
      {
        v12 = (unsigned int *)(v23 + 8);
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
      }
      v23 = 0;
      v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1[3]);
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v15, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v16 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)&v22))
      {
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1[2]);
        v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v18)
          v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v17, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 88), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
      }
      sub_20BF4C2D8((uint64_t)&v22);
    }
    return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v21);
  }
  return result;
}

void sub_20C6B65A8(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B6610(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C541708))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C6B664C()
{
  return &unk_24C541708;
}

uint64_t sub_20C6B6658(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, __int128 *a5)
{
  char *v10[3];

  v10[2] = *(char **)MEMORY[0x24BDAC8D0];
  v10[1] = (char *)&off_24C5255B8;
  sub_20C00A0DC(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C6B66F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C6B6710(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  double *v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  unint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  double *v37;
  double v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double *v42;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  double *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  double *v57;
  double *v58;
  double v59;
  uint64_t v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  double *v72;
  double v73;
  uint64_t v74;
  double *v75;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double *v80;
  double v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

double *sub_20C6B6E64(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_20C6B6F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      sub_20C6B6E64((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_20C6B7174((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      sub_20C6B7174((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48));
      v21 = *(double *)(a2 - 16);
      v20 = (__int128 *)(a2 - 16);
      if (v21 < *(double *)(a1 + 48))
      {
        v22 = *v19;
        *v19 = *v20;
        *v20 = v22;
        if (*(double *)v19 < *(double *)v18)
        {
          v23 = *v18;
          *v18 = *v19;
          *v19 = v23;
          if (*(double *)v18 < *(double *)v17)
          {
            v24 = *v17;
            *v17 = *v18;
            *v18 = v24;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (double *)(a1 + 32);
      sub_20C6B6E64((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(double *)v16 = v12;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 sub_20C6B7174(double *a1, double *a2, double *a3, unint64_t *a4)
{
  __n128 result;

  sub_20C6B6E64(a1, a2, a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_20C6B723C(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, _BYTE *a5)
{
  _BYTE v6[8];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = &unk_24C51FCF3;
  v6[0] = *a5;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  return sub_20BF4C2D8((uint64_t)v6);
}

void sub_20C6B72B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C6B72C4@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v8;
  __n128 result;
  _QWORD v10[2];

  for (; !sub_20C104DA0((uint64_t)a1, a2); ++a1[1].n128_u64[0])
  {
    v8 = a1[1].n128_u64[0];
    v10[0] = a1->n128_u64[1];
    v10[1] = v8;
    if ((sub_20C6B7348((uint64_t)v10, a3) & 1) != 0)
      break;
  }
  result = *a1;
  *a4 = *a1;
  a4[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

uint64_t sub_20C6B7348(uint64_t a1, unsigned __int8 *a2)
{
  size_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void **p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  _BOOL8 v15;
  void *v16;
  void *__s1;
  size_t __n;
  unsigned __int8 v20;

  sub_20BFD46DC(*(uint64_t **)a1, *(_QWORD *)(a1 + 8), &__s1);
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = __n;
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 == v4)
  {
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(unsigned __int8 **)a2;
    if ((v20 & 0x80) != 0)
    {
      v16 = __s1;
      v15 = memcmp(__s1, v6, __n) == 0;
      goto LABEL_23;
    }
    if (!v20)
      return 1;
    v7 = v20 - 1;
    p_s1 = &__s1;
    do
    {
      v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v9 = v10;
      v12 = *v6++;
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
  }
  else
  {
    v15 = 0;
  }
  if ((v20 & 0x80) != 0)
  {
    v16 = __s1;
LABEL_23:
    operator delete(v16);
  }
  return v15;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::~UsdUtilsTimeCodeRangeTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)((char *)this + 24);
  sub_20BEEB2B8(&v10);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::UsdUtilsTimeCodeRangeTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "NONE", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, ":", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "x", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *)this;
}

void sub_20C6B7688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec(std::string *__str)
{
  std::string::size_type size;
  unsigned int **v3;
  uint64_t *EmptyString;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  unsigned int **v8;
  uint64_t *v9;
  double v10;
  void **v11;
  double v12;
  std::string *v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  double v24;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
  {
    v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    if (!v3)
      v3 = sub_20C6B8090(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    if (((unint64_t)v3[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)(((unint64_t)v3[1] & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v3);
    pxrInternal__aapl__pxrReserved__::TfStringSplit(__str, (char *)EmptyString, (uint64_t *)&v20);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v20 + 1) - v20) >> 3) < 3)
    {
      *(double *)&v15 = 0.0;
      if ((sub_20C6B7B4C(v20, (double *)&v15) & 1) != 0)
      {
        v6 = (std::string *)v20;
        if (*((_QWORD *)&v20 + 1) - (_QWORD)v20 == 24)
        {
          sub_20C6B7D98((double *)&v22, *(double *)&v15, *(double *)&v15);
LABEL_23:
          *(_QWORD *)&v16 = &v20;
          sub_20BDE5038((void ***)&v16);
          return;
        }
        v8 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
        if (!v8)
          v8 = sub_20C6B8090(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
        if (((unint64_t)v8[2] & 0xFFFFFFFFFFFFFFF8) != 0)
          v9 = (uint64_t *)(((unint64_t)v8[2] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
        pxrInternal__aapl__pxrReserved__::TfStringSplit(v6 + 1, (char *)v9, (uint64_t *)&v16);
        sub_20BE7598C((uint64_t *)&v20);
        v20 = v16;
        v21 = v17;
        v17 = 0;
        v16 = 0uLL;
        v24 = COERCE_DOUBLE(&v16);
        sub_20BDE5038((void ***)&v24);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v20 + 1) - v20) >> 3) < 3)
        {
          v10 = *(double *)&v15;
          v24 = *(double *)&v15;
          if ((sub_20C6B7B4C(v20, &v24) & 1) != 0)
          {
            v14 = 0x3FF0000000000000;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v20 + 1) - v20) >> 3) < 2)
            {
              v11 = *(void ***)&v24;
              v12 = 1.0;
              if (v24 < v10)
                v12 = -1.0;
            }
            else
            {
              if (!sub_20C6B7B4C(v20 + 24, (double *)&v14))
              {
                *(_QWORD *)&v16 = "usdUtils/timeCodeRange.cpp";
                *((_QWORD *)&v16 + 1) = "CreateFromFrameSpec";
                v17 = 122;
                v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFr"
                      "ameSpec(const std::string &)";
                v19 = 0;
                if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v13 = __str;
                else
                  v13 = (std::string *)__str->__r_.__value_.__r.__words[0];
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid FrameSpec: \"%s\"", (const char *)v13);
                goto LABEL_22;
              }
              v11 = *(void ***)&v24;
              v12 = *(double *)&v14;
            }
            sub_20C6B7DD0((double *)&v22, v10, *(double *)&v11, v12);
            goto LABEL_23;
          }
          *(_QWORD *)&v16 = "usdUtils/timeCodeRange.cpp";
          *((_QWORD *)&v16 + 1) = "CreateFromFrameSpec";
          v17 = 115;
          v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpe"
                "c(const std::string &)";
          v19 = 0;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v7 = __str;
          else
            v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        else
        {
          *(_QWORD *)&v16 = "usdUtils/timeCodeRange.cpp";
          *((_QWORD *)&v16 + 1) = "CreateFromFrameSpec";
          v17 = 109;
          v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpe"
                "c(const std::string &)";
          v19 = 0;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v7 = __str;
          else
            v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        *(_QWORD *)&v16 = "usdUtils/timeCodeRange.cpp";
        *((_QWORD *)&v16 + 1) = "CreateFromFrameSpec";
        v17 = 92;
        v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec("
              "const std::string &)";
        v19 = 0;
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = __str;
        else
          v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid FrameSpec: \"%s\"", (const char *)v7);
    }
    else
    {
      *(_QWORD *)&v16 = "usdUtils/timeCodeRange.cpp";
      *((_QWORD *)&v16 + 1) = "CreateFromFrameSpec";
      v17 = 86;
      v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec(co"
            "nst std::string &)";
      v19 = 0;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = __str;
      else
        v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid FrameSpec: \"%s\"", (const char *)v5);
    }
LABEL_22:
    v22 = xmmword_20CAF8050;
    v23 = 0x3FF0000000000000;
    goto LABEL_23;
  }
}

void sub_20C6B7B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a13 = (void **)&a19;
  sub_20BDE5038(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B7B4C(uint64_t a1, double *a2)
{
  double v4;
  uint64_t v5;
  size_t __idx;

  __idx = 0;
  v4 = std::stod((const std::string *)a1, &__idx);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (__idx != v5)
    return 0;
  *a2 = v4;
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::operator>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_20C52AFFC(a1, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec(&__p);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20C6B7D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double *sub_20C6B7D98(double *a1, double a2, double a3)
{
  double v3;

  v3 = -1.0;
  if (a3 >= a2)
    v3 = 1.0;
  return sub_20C6B7DD0(a1, a2, a3, v3);
}

double *sub_20C6B7DD0(double *a1, double a2, double a3, double a4)
{
  char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  char v10;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  if (a2 == -1.79769313e308)
  {
    v6 = "usdUtils/timeCodeRange.h";
    v7 = "UsdUtilsTimeCodeRange";
    v8 = 267;
    v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTime"
         "Code, const double)";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"startTimeCode cannot be UsdTimeCode::EarliestTime()");
  }
  else if (a3 == -1.79769313e308)
  {
    v6 = "usdUtils/timeCodeRange.h";
    v7 = "UsdUtilsTimeCodeRange";
    v8 = 279;
    v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTime"
         "Code, const double)";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"endTimeCode cannot be UsdTimeCode::EarliestTime()");
  }
  else if (a4 <= 0.0)
  {
    if (a4 < 0.0)
    {
      if (a3 <= a2)
        return a1;
      v6 = "usdUtils/timeCodeRange.h";
      v7 = "UsdUtilsTimeCodeRange";
      v8 = 302;
      v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTi"
           "meCode, const double)";
      v10 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"endTimeCode cannot be greater than startTimeCode with negative stride");
    }
    else
    {
      v6 = "usdUtils/timeCodeRange.h";
      v7 = "UsdUtilsTimeCodeRange";
      v8 = 307;
      v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTi"
           "meCode, const double)";
      v10 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"stride cannot be zero");
    }
  }
  else
  {
    if (a3 >= a2)
      return a1;
    v6 = "usdUtils/timeCodeRange.h";
    v7 = "UsdUtilsTimeCodeRange";
    v8 = 294;
    v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTime"
         "Code, const double)";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"endTimeCode cannot be less than startTimeCode with positive stride");
  }
  *(_OWORD *)a1 = xmmword_20CAF8050;
  a1[2] = 1.0;
  return a1;
}

_QWORD *sub_20C6B7FDC(_QWORD *result, pxrInternal__aapl__pxrReserved__::UsdTimeCode *this)
{
  unint64_t v2;
  double v3;

  *result = this;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  if (!this
    || (v2 = vcvtmd_u64_f64((*((double *)this + 1) - *(double *)this + *((double *)this + 2)) / *((double *)this + 2)),
        v3 = *(double *)this,
        result[2] = v2,
        *((double *)result + 3) = v3,
        result[1] >= v2))
  {
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
  }
  return result;
}

unsigned int **sub_20C6B8090(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C6B80D8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::~UsdUtilsTimeCodeRangeTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C6B80D8()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::UsdUtilsTimeCodeRangeTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C6B8104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage(__int128 *a1, const std::string *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  _QWORD v10[3];
  std::string __p;
  void **v12;

  sub_20BDDC0E4(&__p, "");
  memset(v10, 0, sizeof(v10));
  v8 = sub_20C6B81DC(a1, a2, a3, &__p, (uint64_t)v10, a4);
  v12 = (void **)v10;
  sub_20BDE5038(&v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_20C6B81B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  sub_20BDE5038((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B81DC(__int128 *a1, const std::string *a2, uint64_t a3, const std::string *a4, uint64_t a5, char a6)
{
  uint64_t v12;
  _QWORD v14[9];
  std::string v15[10];
  char v16;
  _BYTE v17[120];
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  sub_20C69E4A8((uint64_t)v14);
  v14[0] = &unk_24C541728;
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::UsdZipFileWriter(v18);
  std::string::operator=(v15, a4);
  if (v17 != (_BYTE *)a5)
    sub_20BE75818((uint64_t)v17, *(std::string **)a5, *(__int128 **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3));
  v16 = a6;
  if (pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build((pxrInternal__aapl__pxrReserved__ *)v14, a1, a3))
  {
    v12 = sub_20C6B8C5C((uint64_t)v14, a2);
  }
  else
  {
    v12 = 0;
  }
  v14[0] = &unk_24C541728;
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)v18);
  sub_20C69ED50((uint64_t)v14);
  return v12;
}

void sub_20C6B830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C69ED50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(char *a1, char *a2, uint64_t a3, char a4)
{
  uint64_t *Resolver;
  std::string::size_type size;
  uint64_t v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  char *v13;
  char v14;
  std::string *p_str;
  std::string::size_type v16;
  unsigned __int8 *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  unsigned __int8 *v21;
  int v22;
  int64_t v23;
  std::string::size_type v24;
  pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens_StaticTokenType *v25;
  uint64_t *EmptyString;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  char v32;
  char *v33;
  const char *v34;
  char *v35;
  char *v36;
  std::string *p_dst;
  std::string *v38;
  pxrInternal__aapl__pxrReserved__::UsdStage *v39;
  char v40;
  char *v41;
  void *v42;
  int v43;
  char *v44;
  std::string *v45;
  std::string __p;
  void *v48;
  char v49;
  char v50;
  void *p_p;
  void *v52;
  char *v53;
  pxrInternal__aapl__pxrReserved__ *v54;
  void *v55;
  char v56;
  std::string __str;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string __dst;
  std::string v68;
  void **v69;
  char v70;
  std::string v71;
  uint64_t v72;
  std::string v73;
  __int128 v74;

  *(_QWORD *)&v74 = *MEMORY[0x24BDAC8D0];
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  pxrInternal__aapl__pxrReserved__::ArchNormPath(a2, &v68);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20BDDBFAC(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    __dst = __p;
  }
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    v10 = 0;
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_98;
    goto LABEL_97;
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtils_ExtractExternalReferences((uint64_t)&__dst, 0, &v64, &v61, &v58);
  if (*(char *)(a3 + 23) < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if (v11)
    {
      sub_20BDDBFAC(&__str, *(void **)a3, v11);
      goto LABEL_15;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    __str = *(std::string *)a3;
    goto LABEL_15;
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a1, &__str);
LABEL_15:
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
  if (!v12)
    v12 = sub_20C52E780(&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
  v14 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(v12, (unsigned __int8 *)&v55);
  if ((v14 & 1) == 0)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v16 = __str.__r_.__value_.__l.__size_;
    v17 = (unsigned __int8 *)p_str + v16;
    if (v16)
    {
      v18 = p_str;
      v19 = (std::string *)((char *)p_str + v16);
      do
      {
        v20 = v18;
        v21 = (unsigned __int8 *)v18;
        while (1)
        {
          v22 = *v21++;
          if (v22 == 46)
            break;
          v20 = (std::string *)v21;
          if (v21 == v17)
          {
            v20 = v19;
            goto LABEL_33;
          }
        }
        v18 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
        v19 = v20;
      }
      while (v21 != v17);
    }
    else
    {
      v20 = p_str;
    }
LABEL_33:
    v23 = (char *)v20 - (char *)p_str;
    if (v20 == (std::string *)v17)
      v24 = 0;
    else
      v24 = v23 + 1;
    std::string::basic_string(&__p, &__str, 0, v24, (std::allocator<char> *)&p_p);
    v25 = (pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
    if (!v25)
      v25 = sub_20C52E780(&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
    if ((*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
    v27 = *((char *)EmptyString + 23);
    if (v27 >= 0)
      v28 = (const std::string::value_type *)EmptyString;
    else
      v28 = (const std::string::value_type *)*EmptyString;
    if (v27 >= 0)
      v29 = *((unsigned __int8 *)EmptyString + 23);
    else
      v29 = EmptyString[1];
    v30 = std::string::append(&__p, v28, v29);
    v31 = v30->__r_.__value_.__r.__words[0];
    v73.__r_.__value_.__r.__words[0] = v30->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
    v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v31;
    __str.__r_.__value_.__l.__size_ = v73.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v64 != v65 || v61 != v62 || v58 != v59)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/usdzPackage.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCreateNewARKitUsdzPackage";
    __p.__r_.__value_.__r.__words[2] = 178;
    v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(const SdfAssetPath &, const std::stri"
          "ng &, const std::string &, BOOL)";
    v49 = 0;
    if (a1[23] >= 0)
      v33 = a1;
    else
      v33 = *(char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"The given asset '%s' contains one or more composition arcs referencing external USD files. Flattening it to a single .usdc file before packaging. This will result in loss of features such as variantSets and all asset references to be absolutized.", v13, v33);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)&__dst, 0, &v54);
    sub_20BDDC0E4(&__p, ".usdc");
    pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName((uint64_t *)&__str, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (sub_20C68602C(0))
    {
      if (a1[23] >= 0)
        v36 = a1;
      else
        v36 = *(char **)a1;
      p_dst = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v38 = &v73;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = (std::string *)v73.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Flattening asset @%s@ located at '%s' to temporary layer at path '%s'.\n", v34, v35, v36, p_dst, v38);
    }
    v39 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v54);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    v40 = pxrInternal__aapl__pxrReserved__::UsdStage::Export(v39, (const char *)&v73, 0, (uint64_t)&__p);
    sub_20BDE9D48((uint64_t)&__p, (_QWORD *)__p.__r_.__value_.__l.__size_);
    if ((v40 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&__p, &v73);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_20BDDBFAC(&v71, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v71 = __dst;
      p_p = 0;
      v52 = 0;
      v53 = 0;
      v69 = &p_p;
      v70 = 0;
      p_p = operator new(0x18uLL);
      v52 = p_p;
      v53 = (char *)p_p + 24;
      v52 = sub_20BFB76A8((uint64_t)&v53, (__int128 *)&v71, (__int128 *)&v72, (char *)p_p);
      v43 = sub_20C6B81DC((__int128 *)&__p, &v68, (uint64_t)&__str, &__dst, (uint64_t)&p_p, a4);
      v69 = &p_p;
      sub_20BDE5038(&v69);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (v50 < 0)
        operator delete(v48);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v43)
          goto LABEL_83;
      }
      else if (v43)
      {
LABEL_83:
        pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)&v73);
        v10 = 1;
LABEL_89:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        sub_20C455C74(&v54);
        goto LABEL_92;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/usdzPackage.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCreateNewARKitUsdzPackage";
      __p.__r_.__value_.__r.__words[2] = 207;
      v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(const SdfAssetPath &, const std::st"
            "ring &, const std::string &, BOOL)";
      v49 = 0;
      v45 = &v73;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = (std::string *)v73.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to create a .usdz package from temporary, flattened layer '%s'.", v44, v45);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/usdzPackage.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCreateNewARKitUsdzPackage";
      __p.__r_.__value_.__r.__words[2] = 191;
      v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(const SdfAssetPath &, const std::st"
            "ring &, const std::string &, BOOL)";
      v49 = 0;
      pxrInternal__aapl__pxrReserved__::UsdDescribe(&v54, &p_p);
      if (SHIBYTE(v53) >= 0)
        v42 = &p_p;
      else
        v42 = p_p;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to flatten and export the USD stage '%s'.", v41, v42);
      if (SHIBYTE(v53) < 0)
        operator delete(p_p);
    }
    v10 = 0;
    goto LABEL_89;
  }
  if ((v14 & 1) != 0)
  {
    memset(&__p, 0, sizeof(__p));
    v10 = sub_20C6B81DC((__int128 *)a1, &v68, (uint64_t)&__str, &__dst, (uint64_t)&__p, a4);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_20BDE5038((void ***)&v73);
  }
  else
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_20BDDBFAC(&v73, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v73 = __dst;
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    LOBYTE(v52) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20BFB76A8((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)&v73, &v74, __p.__r_.__value_.__l.__data_);
    v10 = sub_20C6B81DC((__int128 *)a1, &v68, (uint64_t)&__str, &__dst, (uint64_t)&__p, a4);
    p_p = &__p;
    sub_20BDE5038((void ***)&p_p);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
LABEL_92:
  if (v56 < 0)
    operator delete(v55);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  sub_20BDE5038((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  sub_20BDE5038((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  sub_20BDE5038((void ***)&__p);
  if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_97:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_98:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  return v10;
}

void sub_20C6B8A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  a12 = &a40;
  sub_20BDE5038((void ***)&a12);
  a12 = &a43;
  sub_20BDE5038((void ***)&a12);
  a12 = &a46;
  sub_20BDE5038((void ***)&a12);
  if (*(char *)(v46 - 169) < 0)
    operator delete(*(void **)(v46 - 192));
  if (*(char *)(v46 - 145) < 0)
    operator delete(*(void **)(v46 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B8C5C(uint64_t a1, const std::string *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *v5;

  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::CreateNew((uint64_t)a2, &v5);
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::operator=((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile **)(a1 + 512), &v5);
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)&v5);
  result = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::Save((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile **)(a1 + 512));
  return result;
}

void sub_20C6B8CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6B8CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  void *v5[2];
  char v6;

  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::AddFile((FILE ***)(a1 + 512), a2, a3, (uint64_t)v5);
  if ((v6 & 0x80000000) == 0)
    return v6 != 0;
  v3 = v5[1] != 0;
  operator delete(v5[0]);
  return v3;
}

_QWORD *pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::MakeFullyQualifiedURL@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *result;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p[2];
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = *a2;
  v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v11);
  if (objc_msgSend(v12, "scheme"))
  {
    result = (_QWORD *)objc_msgSend((id)objc_msgSend(v12, "pathExtension"), "isEqualToString:", CFSTR("usdz"));
    if ((_DWORD)result)
    {
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v14 = (void *)objc_msgSend(MEMORY[0x24BDD1808], "componentsWithString:", v11);
      objc_msgSend(v14, "setQuery:", 0);
      sub_20BDDC0E4(__p, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "URL"), "absoluteString"), "UTF8String"));
      if (sub_20C6B92C0((uint64_t *)(a1 + 592), (uint64_t)&v49, __p))
      {
        if (*(_BYTE *)(v51 + 40))
        {
          v15 = (_QWORD *)(v51 + 48);
          if (*(char *)(v51 + 71) < 0)
            v15 = (_QWORD *)*v15;
          v16 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v15);
          v17 = objc_msgSend(v16, "stringByAddingPercentEncodingWithAllowedCharacters:", objc_msgSend(MEMORY[0x24BDD14A8], "URLQueryAllowedCharacterSet"));
          v18 = (void *)objc_msgSend(MEMORY[0x24BDD1808], "componentsWithString:", v11);
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v19 = (void *)objc_msgSend(v18, "queryItems");
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
          if (!v20)
            goto LABEL_18;
          v21 = 0;
          v22 = *(_QWORD *)v44;
          do
          {
            for (i = 0; i != v20; ++i)
            {
              if (*(_QWORD *)v44 != v22)
                objc_enumerationMutation(v19);
              v21 |= objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * i), "name"), "isEqualToString:", CFSTR("resource"));
            }
            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
          }
          while (v20);
          if ((v21 & 1) == 0)
          {
LABEL_18:
            objc_msgSend(v18, "setQuery:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("resource=%@"), v17));
            sub_20BDDC0E4(a5, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "URL"), "absoluteString"), "UTF8String"));
            if (v48 < 0)
              operator delete(__p[0]);
            v51 = 0;
            return sub_20BEBF29C(&v49);
          }
        }
      }
      else
      {
        *a4 = 0;
      }
      if (v48 < 0)
        operator delete(__p[0]);
      v51 = 0;
      result = sub_20BEBF29C(&v49);
    }
    if (*((char *)a2 + 23) < 0)
      return sub_20BDDBFAC(a5, *a2, (unint64_t)a2[1]);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    a5[2] = a2[2];
    return result;
  }
  if (!pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
    return sub_20BDDC0E4(a5, "");
  v24 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
  v25 = (void *)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v24));
  if (!objc_msgSend(v25, "scheme"))
    return sub_20BDDC0E4(a5, "");
  if (*((char *)a2 + 23) >= 0)
    v26 = a2;
  else
    v26 = *a2;
  v38 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v26);
  if (objc_msgSend((id)objc_msgSend(v25, "pathExtension"), "isEqualToString:", CFSTR("usdz")))
  {
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v37 = (void *)objc_msgSend(MEMORY[0x24BDD1808], "componentsWithString:", objc_msgSend(v25, "absoluteString"));
    v27 = (void *)objc_msgSend(v37, "queryItems");
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v39, v52, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v40;
      while (2)
      {
        for (j = 0; j != v28; ++j)
        {
          if (*(_QWORD *)v40 != v29)
            objc_enumerationMutation(v27);
          v31 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * j);
          if (objc_msgSend((id)objc_msgSend(v31, "name"), "isEqualToString:", CFSTR("resource")))
          {
            v33 = objc_msgSend((id)objc_msgSend(v31, "value"), "stringByRemovingPercentEncoding");
            v34 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:relativeToURL:", v38, objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v33)), "absoluteURL"), "absoluteString"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("//"), &stru_24C55D8D0);
            v35 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1838]), "initWithName:value:", CFSTR("resource"), v34);
            v36 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 1);
            objc_msgSend(v36, "addObject:", v35);
            objc_msgSend(v37, "setQueryItems:", v36);
            return sub_20BDDC0E4(a5, (char *)objc_msgSend((id)objc_msgSend(v37, "string"), "UTF8String"));
          }
        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v39, v52, 16);
        if (v28)
          continue;
        break;
      }
    }
  }
  if (*((char *)a2 + 23) >= 0)
    v32 = a2;
  else
    v32 = *a2;
  return sub_20BDDC0E4(a5, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:relativeToURL:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v32), v25), "absoluteURL"), "absoluteString"), "UTF8String"));
}

void sub_20C6B926C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a35 < 0)
    operator delete(__p);
  a38 = 0;
  sub_20BEBF29C(&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B92C0(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C6BAB9C(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _BYTE *, uint64_t))sub_20C6BAEF8, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::IsRelativePath(uint64_t a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::TfIsRelativePath(a2);
}

double pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::GetModificationTime()
{
  return 0.0;
}

void pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchFile(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[7];
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;

  v8 = operator new(0x30uLL);
  v8[2] = 0;
  *v8 = &unk_24C541830;
  v8[1] = 0;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  *(_QWORD *)&v31 = v8 + 3;
  *((_QWORD *)&v31 + 1) = v8;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v9 = (uint64_t *)(a1 + 8);
  if (sub_20C6B95D0(v9, (uint64_t)&v28, a2))
  {
    v10 = *(_QWORD *)(v30 + 48);
    *a4 = *(_QWORD *)(v30 + 40);
    a4[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    if ((char)a2[23] >= 0)
      v13 = a2;
    else
      v13 = *(_BYTE **)a2;
    v14 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13);
    v15 = (void *)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v14);
    if (objc_msgSend(v15, "scheme"))
    {
      v16 = dispatch_group_create();
      dispatch_group_enter(v16);
      v17 = (void *)objc_msgSend(MEMORY[0x24BDD1850], "sharedSession");
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3321888768;
      v26[2] = sub_20C6B9634;
      v26[3] = &unk_24C541760;
      v26[4] = v16;
      v26[5] = a2;
      v26[6] = a3;
      v27 = v31;
      if (*((_QWORD *)&v31 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      objc_msgSend((id)objc_msgSend(v17, "dataTaskWithURL:completionHandler:", v15, v26), "resume");
      dispatch_group_wait(v16, 0xFFFFFFFFFFFFFFFFLL);
      if (*(_QWORD *)(v31 + 8) == *(_QWORD *)v31)
        *a3 = 0;
      sub_20C6B98B0(v9, (uint64_t)&v28, a2);
      sub_20BDE881C((_QWORD *)(v30 + 40), (uint64_t *)&v31);
      *(_OWORD *)a4 = v31;
      v31 = 0uLL;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      *a3 = 0;
      *(_OWORD *)a4 = v31;
      v31 = 0uLL;
    }
  }
  v30 = 0;
  sub_20BEBF29C(&v28);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_20C6B958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v21;
  uint64_t v22;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v21);
  a21 = 0;
  sub_20BEBF29C(&a19);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v22 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B95D0(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C6BB40C(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _BYTE *, uint64_t))sub_20C6BB768, 0);
}

void sub_20C6B9634(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t *v6;
  NSObject *v7;
  const char *v8;
  uint32_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(uint64_t **)(a1 + 40);
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      v18 = 136315394;
      v19 = v6;
      v20 = 2112;
      v21 = objc_msgSend(a4, "localizedDescription");
      v7 = MEMORY[0x24BDACB70];
      v8 = "Encountered an error downloading %s : %@";
      v9 = 22;
LABEL_11:
      _os_log_impl(&dword_20BDBC000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v18, v9);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  v11 = objc_msgSend(a3, "statusCode");
  if ((unint64_t)(v11 - 204) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    v12 = v11;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(uint64_t **)(a1 + 40);
      if (*((char *)v13 + 23) < 0)
        v13 = (uint64_t *)*v13;
      v18 = 136315650;
      v19 = v13;
      v20 = 2048;
      v21 = v12;
      v22 = 2112;
      v23 = objc_msgSend(MEMORY[0x24BDD15B8], "localizedStringForStatusCode:", v12);
      v7 = MEMORY[0x24BDACB70];
      v8 = "Encountered an error downloading %s : (%ld) %@";
      v9 = 32;
      goto LABEL_11;
    }
LABEL_12:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    **(_BYTE **)(a1 + 48) = 0;
    return;
  }
  v14 = objc_msgSend(a2, "length");
  v15 = *(unint64_t **)(a1 + 56);
  v16 = v15[1] - *v15;
  if (v14 <= v16)
  {
    if (v14 < v16)
      v15[1] = *v15 + v14;
  }
  else
  {
    sub_20C6BBBDC(v15, v14 - v16);
  }
  v17 = (char *)objc_msgSend(a2, "bytes");
  sub_20C6BBD04(*(_QWORD **)(a1 + 56), v17, &v17[v14], v14);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_20C6B9834(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 3);
  v4 = *(_QWORD *)(a2 + 64);
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20C6B9884(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  _Block_object_dispose(*(const void **)(a1 + 32), 3);
}

uint64_t sub_20C6B98B0(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C6BB40C(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _BYTE *, uint64_t))sub_20C6BBE10, 0);
}

void pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchByteRange(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, _QWORD *a7@<X8>, _BYTE *a8)
{
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[7];
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int128 v42;

  v15 = operator new(0x30uLL);
  v15[2] = 0;
  *v15 = &unk_24C541830;
  v15[1] = 0;
  v15[4] = 0;
  v15[5] = 0;
  *((_QWORD *)&v42 + 1) = v15;
  v15[3] = 0;
  *(_QWORD *)&v42 = v15 + 3;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (a6 && sub_20C6B95D0((uint64_t *)(a1 + 8), (uint64_t)&v39, a2))
  {
    v16 = *(_QWORD *)(v41 + 48);
    *a7 = *(_QWORD *)(v41 + 40);
    a7[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    goto LABEL_28;
  }
  if ((char)a2[23] >= 0)
    v19 = a2;
  else
    v19 = *(_BYTE **)a2;
  v20 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v19);
  v21 = (void *)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v20);
  if (!objc_msgSend(v21, "scheme"))
  {
    *a8 = 0;
    *(_OWORD *)a7 = v42;
    v42 = 0uLL;
    goto LABEL_28;
  }
  if (a5)
    v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("bytes=%d-%d"), a3, a4 - 1);
  else
    v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("bytes=%d"), a3);
  v23 = v22;
  v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16B0]), "initWithURL:", v21);
  objc_msgSend(v24, "setValue:forHTTPHeaderField:", v23, CFSTR("Range"));
  v25 = (void *)objc_msgSend(MEMORY[0x24BDD1850], "sharedSession");
  v26 = dispatch_group_create();
  dispatch_group_enter(v26);
  v37[0] = MEMORY[0x24BDAC760];
  v37[1] = 3321888768;
  v37[2] = sub_20C6B9C44;
  v37[3] = &unk_24C541760;
  v37[4] = v26;
  v37[5] = a2;
  v37[6] = a8;
  v38 = v42;
  if (*((_QWORD *)&v42 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  objc_msgSend((id)objc_msgSend(v25, "dataTaskWithRequest:completionHandler:", v24, v37), "resume");
  dispatch_group_wait(v26, 0xFFFFFFFFFFFFFFFFLL);
  v29 = v42;
  if (*(_QWORD *)(v42 + 8) != *(_QWORD *)v42)
  {
    if (!a6)
      goto LABEL_23;
    goto LABEL_22;
  }
  *a8 = 0;
  if (a6)
  {
LABEL_22:
    sub_20C6B98B0((uint64_t *)(a1 + 8), (uint64_t)&v39, a2);
    sub_20BDE881C((_QWORD *)(v41 + 40), (uint64_t *)&v42);
    v29 = v42;
  }
LABEL_23:
  v30 = *((_QWORD *)&v42 + 1);
  *a7 = v29;
  a7[1] = v30;
  v42 = 0uLL;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_28:
  v41 = 0;
  sub_20BEBF29C(&v39);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20C6B9BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v23;
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v23);
  a23 = 0;
  sub_20BEBF29C(&a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 96));
  _Unwind_Resume(a1);
}

void sub_20C6B9C44(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t *v6;
  NSObject *v7;
  const char *v8;
  uint32_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  int v18;
  uint64_t *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(uint64_t **)(a1 + 40);
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      v18 = 136315394;
      v19 = v6;
      v20 = 2112;
      v21 = objc_msgSend(a4, "localizedDescription");
      v7 = MEMORY[0x24BDACB70];
      v8 = "Encountered an error downloading %s : %@";
      v9 = 22;
LABEL_13:
      _os_log_impl(&dword_20BDBC000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v18, v9);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  v11 = objc_msgSend(a3, "statusCode");
  if (v11 != 206)
  {
    v15 = v11;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(uint64_t **)(a1 + 40);
      if (*((char *)v16 + 23) < 0)
        v16 = (uint64_t *)*v16;
      v18 = 136315650;
      v19 = v16;
      v20 = 2048;
      v21 = v15;
      v22 = 2112;
      v23 = objc_msgSend(MEMORY[0x24BDD15B8], "localizedStringForStatusCode:", v15);
      v7 = MEMORY[0x24BDACB70];
      v8 = "Encountered an error downloading byte range for %s : (%ld) %@";
      v9 = 32;
      goto LABEL_13;
    }
LABEL_14:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    **(_BYTE **)(a1 + 48) = 0;
    return;
  }
  v12 = objc_msgSend(a2, "length");
  v13 = *(unint64_t **)(a1 + 56);
  v14 = v13[1] - *v13;
  if (v12 <= v14)
  {
    if (v12 < v14)
      v13[1] = *v13 + v12;
  }
  else
  {
    sub_20C6BBBDC(v13, v12 - v14);
  }
  v17 = (char *)objc_msgSend(a2, "bytes");
  sub_20C6BBD04(*(_QWORD **)(a1 + 56), v17, &v17[v12], v12);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::RegisterPackageInfo(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v4 = sub_20C6B9EF0((uint64_t *)(a1 + 592), (uint64_t)&v8, a2);
  v5 = v10;
  v6 = v10;
  *(_BYTE *)(v10 + 40) = *(_BYTE *)a3;
  std::string::operator=((std::string *)(v5 + 48), (const std::string *)(a3 + 8));
  if (v6 + 40 != a3)
  {
    *(_DWORD *)(v5 + 104) = *(_DWORD *)(a3 + 64);
    sub_20C6BA630((_QWORD *)(v5 + 72), *(uint64_t **)(a3 + 48), 0);
  }
  v10 = 0;
  sub_20BEBF29C(&v8);
  return v4;
}

void sub_20C6B9ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6B9EF0(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C6BAB9C(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _BYTE *, uint64_t))sub_20C6BBF14, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchPackageStreamInfo(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  void **v25;
  uint64_t *v28;
  _QWORD v29[4];
  char v30;
  char v31;
  __int128 __p;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  char v36;
  uint64_t v37;
  std::string __str;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v7);
  v9 = (void *)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v8);
  result = objc_msgSend(v9, "scheme");
  if (result)
  {
    result = objc_msgSend((id)objc_msgSend(v9, "pathExtension"), "isEqualToString:", CFSTR("usdz"));
    if ((_DWORD)result)
    {
      v11 = (void *)objc_msgSend(MEMORY[0x24BDD1808], "componentsWithString:", v8);
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v12 = (void *)objc_msgSend(v11, "queryItems");
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      if (v13)
      {
        v28 = (uint64_t *)(a1 + 592);
        v14 = *(_QWORD *)v42;
        v15 = 1;
LABEL_8:
        v16 = 0;
        while (1)
        {
          if (*(_QWORD *)v42 != v14)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v16);
          if (objc_msgSend((id)objc_msgSend(v17, "name"), "isEqualToString:", CFSTR("resource")))
          {
            v18 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithString:", objc_msgSend(v17, "value")), "stringByRemovingPercentEncoding");
            objc_msgSend(v11, "setQuery:", 0);
            sub_20BDDC0E4(v39, (char *)objc_msgSend((id)objc_msgSend(v11, "string"), "UTF8String"));
            sub_20BDDC0E4(&__str, (char *)objc_msgSend(v18, "UTF8String"));
            std::string::operator=((std::string *)a3, &__str);
            v35 = 0;
            v36 = 0;
            v37 = 0;
            if ((sub_20C6B92C0(v28, (uint64_t)&v35, v39) & 1) != 0)
            {
              v19 = v37;
              v31 = *(_BYTE *)(v37 + 40);
              if (*(char *)(v37 + 71) < 0)
              {
                sub_20BDDBFAC(&__p, *(void **)(v37 + 48), *(_QWORD *)(v37 + 56));
              }
              else
              {
                __p = *(_OWORD *)(v37 + 48);
                v33 = *(_QWORD *)(v37 + 64);
              }
              sub_20C6BA8AC((uint64_t)v34, v19 + 72);
              v21 = sub_20C535080(v34, (unsigned __int8 *)a3);
              if (v21)
              {
                v20 = 0;
                v22 = *((_DWORD *)v21 + 10);
                v23 = *((unsigned int *)v21 + 11);
                *a4 = v23;
                *a5 = (v23 + v22);
              }
              else
              {
                v29[0] = "aaplHttpResolver/aaplHttpFoundationResolverDelegate.mm";
                v29[1] = "FetchPackageStreamInfo";
                v29[2] = 320;
                v29[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchPackage"
                         "StreamInfo(const std::string &, std::string &, uint64_t &, uint64_t &) const";
                v30 = 0;
                if (*(char *)(a3 + 23) >= 0)
                  v24 = (const char *)a3;
                else
                  v24 = *(const char **)a3;
                v25 = v39;
                if (v40 < 0)
                  v25 = (void **)v39[0];
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not find resource %s in %s\n", v24, (const char *)v25);
                v20 = 1;
              }
              sub_20BEB3F28((uint64_t)v34);
              if (SHIBYTE(v33) < 0)
                operator delete((void *)__p);
            }
            else
            {
              v20 = 1;
            }
            v37 = 0;
            sub_20BEBF29C(&v35);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (v40 < 0)
              operator delete(v39[0]);
            v15 = 0;
            result = 0;
            if (v20)
              break;
          }
          if (v13 == ++v16)
          {
            v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
            if (v13)
              goto LABEL_8;
            return (v15 & 1) == 0;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_20C6BA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  sub_20C6BA338((uint64_t)&a20);
  a34 = 0;
  sub_20BEBF29C(&a32);
  if (a41 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BA338(uint64_t a1)
{
  sub_20BEB3F28(a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::GetExtension(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfGetExtension(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::AllowFileSystemResolve(pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate *this)
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::IsUrl(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2)), "scheme") != 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::GetIdentifier@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "AaplHttpFoundationResolverDelegate");
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::ClearCaches(pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate *this)
{
  sub_20C6BA40C((unint64_t *)this + 1);
  return sub_20C6BA4D8((unint64_t *)this + 74);
}

uint64_t sub_20C6BA40C(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C6BB904((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C6BC038((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C6BA4D8(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C6BB094((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C6BC084((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

void sub_20C6BA5A4(unint64_t *a1)
{
  *a1 = (unint64_t)off_24C5417A0;
  sub_20C6BA4D8(a1 + 74);
  sub_20C6BA40C(a1 + 1);
  pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate::~AaplHttpResolverDelegate((pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate *)a1);
}

void sub_20C6BA5E8(unint64_t *a1)
{
  void *v2;

  *a1 = (unint64_t)off_24C5417A0;
  sub_20C6BA4D8(a1 + 74);
  sub_20C6BA40C(a1 + 1);
  pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate::~AaplHttpResolverDelegate((pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate *)a1);
  operator delete(v2);
}

void sub_20C6BA630(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        v8[5] = (void *)v4[5];
        v10 = (void **)*v8;
        sub_20C6BA730(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    sub_20BEB3F60((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20C6BA790(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_20C6BA700(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_20BEB3F60(v1, v2);
  __cxa_rethrow();
}

void sub_20C6BA71C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BA730(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = sub_20BEF33B4((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  v6 = sub_20BFF2594((uint64_t)a1, v5, v4);
  sub_20BEC5B54(a1, a2, v6);
  return a2;
}

_QWORD *sub_20C6BA790(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  sub_20C6BA7EC((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_20C6BA730(a1, v4);
}

void sub_20C6BA7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C6BA7EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x30uLL);
  v8 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(v7 + 16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v9 = *(_OWORD *)a2;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_20BEF33B4(a1 + 24, (uint64_t)v9);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_20C6BA890(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  sub_20BEB52E4(v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BA8AC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_20C6BA920(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20C6BA908(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB3F28(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C6BA920(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20BEF33B4(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20BEF2BE0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20C6BAB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6BAB9C(uint64_t *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _BYTE *, uint64_t), _QWORD *a8)
{
  _BYTE *v13;
  char v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v36;
  unint64_t v37;
  tbb::spin_rw_mutex_v3 *v39;
  char v40;
  uint64_t v41;

  if ((char)a3[23] >= 0)
    v13 = a3;
  else
    v13 = *(_BYTE **)a3;
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = v13 + 1;
    do
    {
      v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      v17 = *v16++;
      v14 = v17;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  v37 = 0;
  v18 = *a1;
  __dmb(0xBu);
  v36 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C6BB0C4((uint64_t)&v39, (uint64_t)a1, v18 & v15, 0);
    v19 = v41 + 16;
    do
      v19 = *(_QWORD *)v19;
    while (v19 >= 0x40 && !sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2)
      break;
    if (v19)
    {
      v20 = 1;
LABEL_18:
      v21 = (uint64_t)a8;
      if (!a5)
        goto LABEL_59;
      goto LABEL_19;
    }
    v30 = *a1;
    __dmb(0xBu);
    if (v18 == v30 || !sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
    {
      sub_20BEBF29C(&v39);
      return 0;
    }
LABEL_42:
    sub_20BEBF29C(&v39);
    v18 = v30;
  }
  if (v19)
  {
LABEL_15:
    v20 = 0;
    goto LABEL_18;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v36, a3, a4);
  if (!v40)
  {
    v40 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v39) & 1) == 0)
    {
      v19 = v41 + 16;
      while (1)
      {
        v19 = *(_QWORD *)v19;
        if (v19 < 0x40)
          break;
        if (sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v40)
            goto LABEL_15;
          v31 = (unint64_t *)v39;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 3, v31));
          v20 = 0;
          v40 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  v30 = *a1;
  __dmb(0xBu);
  if (v18 != v30)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
      goto LABEL_44;
    goto LABEL_42;
  }
  v30 = v18;
LABEL_44:
  v37 = sub_20BECF26C((uint64_t)a1, v41, a8, v30);
  v21 = 0;
  v20 = 1;
  v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_59:
    sub_20BEBF29C(&v39);
    goto LABEL_54;
  }
LABEL_19:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v22 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        v24 = (unint64_t *)v39;
        v39 = 0;
        if (v40)
        {
          while (1)
          {
            v25 = *v24;
            v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v27 = __ldaxr(v24);
                if (v27 != v25)
                  break;
                if (!__stlxr(v26, v24))
                  goto LABEL_33;
              }
              __clrex();
              do
                v28 = __ldxr(v24);
              while (__stxr(v28, v24));
            }
            while (v28 == v25);
            sched_yield();
          }
        }
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 - 4, v24));
LABEL_33:
        sched_yield();
        v30 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v21;
        goto LABEL_42;
      }
    }
  }
  sub_20BEBF29C(&v39);
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = v15;
LABEL_54:
  if (v37)
    sub_20C6BAF00(a1, v37, v36, 0);
  if (v21)
    sub_20C6BB094((uint64_t)a1, v21);
  return v20;
}

void sub_20C6BAED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BAEF8()
{
  return 0;
}

void sub_20C6BAF00(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C6BB084(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BB094(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C6BB36C(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C6BB0C4(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C6BB19C(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C6BB188(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BB19C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  tbb::spin_rw_mutex_v3 *v20;
  char v21;
  uint64_t v22;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C6BB0C4(&v20, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v22 + 16);
  v12 = *(_QWORD *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v14 = *(_BYTE **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0)
        v14 = (_BYTE *)(v12 + 16);
      v15 = *v14;
      if (*v14)
      {
        v16 = 0;
        v17 = v14 + 1;
        do
        {
          v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          v18 = *v17++;
          v15 = v18;
        }
        while (v18);
      }
      else
      {
        v16 = 0;
      }
      if ((v16 & v13) != a3)
        break;
      if (v21 || (v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v20) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_31:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v20);
      }
      else
      {
        v11 = (unint64_t *)(v22 + 16);
        v12 = *(_QWORD *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v20);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_20BEBF29C(&v20);
}

void sub_20C6BB358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C6BB36C(uint64_t a1)
{
  sub_20BEB3F28(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C6BB3B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C541830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C6BB3CC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C541830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C6BB3F0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_20C6BB40C(uint64_t *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _BYTE *, uint64_t), _QWORD *a8)
{
  _BYTE *v13;
  char v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v36;
  unint64_t v37;
  tbb::spin_rw_mutex_v3 *v39;
  char v40;
  uint64_t v41;

  if ((char)a3[23] >= 0)
    v13 = a3;
  else
    v13 = *(_BYTE **)a3;
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = v13 + 1;
    do
    {
      v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      v17 = *v16++;
      v14 = v17;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  v37 = 0;
  v18 = *a1;
  __dmb(0xBu);
  v36 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C6BB934((uint64_t)&v39, (uint64_t)a1, v18 & v15, 0);
    v19 = v41 + 16;
    do
      v19 = *(_QWORD *)v19;
    while (v19 >= 0x40 && !sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2)
      break;
    if (v19)
    {
      v20 = 1;
LABEL_18:
      v21 = (uint64_t)a8;
      if (!a5)
        goto LABEL_59;
      goto LABEL_19;
    }
    v30 = *a1;
    __dmb(0xBu);
    if (v18 == v30 || !sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
    {
      sub_20BEBF29C(&v39);
      return 0;
    }
LABEL_42:
    sub_20BEBF29C(&v39);
    v18 = v30;
  }
  if (v19)
  {
LABEL_15:
    v20 = 0;
    goto LABEL_18;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v36, a3, a4);
  if (!v40)
  {
    v40 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v39) & 1) == 0)
    {
      v19 = v41 + 16;
      while (1)
      {
        v19 = *(_QWORD *)v19;
        if (v19 < 0x40)
          break;
        if (sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v40)
            goto LABEL_15;
          v31 = (unint64_t *)v39;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 3, v31));
          v20 = 0;
          v40 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  v30 = *a1;
  __dmb(0xBu);
  if (v18 != v30)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
      goto LABEL_44;
    goto LABEL_42;
  }
  v30 = v18;
LABEL_44:
  v37 = sub_20BECF26C((uint64_t)a1, v41, a8, v30);
  v21 = 0;
  v20 = 1;
  v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_59:
    sub_20BEBF29C(&v39);
    goto LABEL_54;
  }
LABEL_19:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v22 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        v24 = (unint64_t *)v39;
        v39 = 0;
        if (v40)
        {
          while (1)
          {
            v25 = *v24;
            v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v27 = __ldaxr(v24);
                if (v27 != v25)
                  break;
                if (!__stlxr(v26, v24))
                  goto LABEL_33;
              }
              __clrex();
              do
                v28 = __ldxr(v24);
              while (__stxr(v28, v24));
            }
            while (v28 == v25);
            sched_yield();
          }
        }
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 - 4, v24));
LABEL_33:
        sched_yield();
        v30 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v21;
        goto LABEL_42;
      }
    }
  }
  sub_20BEBF29C(&v39);
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = v15;
LABEL_54:
  if (v37)
    sub_20C6BB770(a1, v37, v36, 0);
  if (v21)
    sub_20C6BB904((uint64_t)a1, v21);
  return v20;
}

void sub_20C6BB748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BB768()
{
  return 0;
}

void sub_20C6BB770(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C6BB8F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BB904(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20BE78EA4(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C6BB934(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C6BBA0C(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C6BB9F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BBA0C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  tbb::spin_rw_mutex_v3 *v20;
  char v21;
  uint64_t v22;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C6BB934(&v20, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v22 + 16);
  v12 = *(_QWORD *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v14 = *(_BYTE **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0)
        v14 = (_BYTE *)(v12 + 16);
      v15 = *v14;
      if (*v14)
      {
        v16 = 0;
        v17 = v14 + 1;
        do
        {
          v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          v18 = *v17++;
          v15 = v18;
        }
        while (v18);
      }
      else
      {
        v16 = 0;
      }
      if ((v16 & v13) != a3)
        break;
      if (v21 || (v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v20) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_31:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v20);
      }
      else
      {
        v11 = (unint64_t *)(v22 + 16);
        v12 = *(_QWORD *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v20);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_20BEBF29C(&v20);
}

void sub_20C6BBBC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C6BBBDC(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_20BDDF694();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_20C6BBD04(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_20BDDF694();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20BDE2970(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t sub_20C6BBE10(uint64_t a1, __int128 *a2)
{
  __int128 *v3;

  v3 = a2;
  return sub_20C6BBE40(a1, (uint64_t)&unk_20CAC184C, &v3);
}

uint64_t sub_20C6BBE40(uint64_t a1, uint64_t a2, __int128 **a3)
{
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v11[2];

  v6 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v11[0] = v6;
  v11[1] = a1;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v7 = (_BYTE *)(v6 + 16);
  v8 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  v11[0] = 0;
  sub_20C6BBEE4(v11, v5);
  return v6;
}

void sub_20C6BBED0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C6BBEE4(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6BBEE4(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C6BBF14(uint64_t a1, __int128 *a2)
{
  __int128 *v3;

  v3 = a2;
  return sub_20C6BBF44(a1, (uint64_t)&unk_20CAC184C, &v3);
}

uint64_t sub_20C6BBF44(uint64_t a1, uint64_t a2, __int128 **a3)
{
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v11[2];

  v6 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x70);
  v11[0] = v6;
  v11[1] = a1;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v7 = (_BYTE *)(v6 + 16);
  v8 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  *(_QWORD *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_DWORD *)(v6 + 104) = 1065353216;
  v11[0] = 0;
  sub_20C6BC008(v11, v5);
  return v6;
}

void sub_20C6BBFF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C6BC008(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6BC008(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C6BC038(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

uint64_t sub_20C6BC084(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::AaplHttpAsset::AaplHttpAsset(_QWORD *a1, __n128 *a2, int a3)
{
  _QWORD *v5;
  __n128 result;

  v5 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(a1);
  *v5 = off_24C541880;
  result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *((_DWORD *)v5 + 6) = a3;
  return result;
}

{
  _QWORD *v5;
  __n128 result;

  v5 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(a1);
  *v5 = off_24C541880;
  result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *((_DWORD *)v5 + 6) = a3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::GetSize(pxrInternal__aapl__pxrReserved__::AaplHttpAsset *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8) - (**((_QWORD **)this + 1) + *((unsigned int *)this + 6));
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::GetBuffer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = **(_QWORD **)(this + 8) + *(unsigned int *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::AaplHttpAsset *this)
{
  return 0;
}

size_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::Read(pxrInternal__aapl__pxrReserved__::AaplHttpAsset *this, void *__dst, size_t a3, uint64_t a4)
{
  size_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v8;
  size_t v9;
  size_t v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  if (__CFADD__(a4, a3) || (v4 = a4 + a3, v5 = *((unsigned int *)this + 6), __CFADD__(v5, a4 + a3)))
  {
    v11 = "aaplHttpResolver/aaplHttpAsset.cpp";
    v12 = "Read";
    v13 = 34;
    v14 = "virtual size_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::Read(void *, size_t, size_t) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Read parameters would cause overflow.");
    return 0;
  }
  v8 = **((_QWORD **)this + 1);
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8) - v8;
  if (v4 + v5 > v9)
  {
    v11 = "aaplHttpResolver/aaplHttpAsset.cpp";
    v12 = "Read";
    v13 = 39;
    v14 = "virtual size_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::Read(void *, size_t, size_t) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Trying to read beyond end of buffer.");
    return 0;
  }
  v10 = v9 - v5;
  if (v10 < v4)
    v4 = v10;
  v6 = v4 - a4;
  memcpy(__dst, (const void *)(v8 + a4 + v5), a3);
  return v6;
}

void sub_20C6BC294(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C541880;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)a1);
}

void sub_20C6BC2C4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C541880;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)a1);
  operator delete(v2);
}

uint64_t sub_20C6BC2F8()
{
  uint64_t *v0;

  v0 = sub_20C6BD9DC();
  return sub_20C6BDAFC(v0);
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(pxrInternal__aapl__pxrReserved__::ArResolver *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplHttpResolver *CurrentContext;
  unint64_t Delegate;
  unint64_t v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  const char *v26;
  const char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  void *__p[2];
  uint64_t v33;
  const char *v34;
  char v35;
  void *__src[2];
  uint64_t v37;
  __int128 v38;
  char v39;
  int ResourceOffset;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  uint64_t v45[3];

  CurrentContext = (pxrInternal__aapl__pxrReserved__::AaplHttpResolver *)pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(v45, a1);
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v42 = 0;
  v41 = 0;
  ResourceOffset = 0;
  v39 = 1;
  v38 = 0uLL;
  Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(CurrentContext);
  v7 = Delegate;
  __src[0] = 0;
  __src[1] = 0;
  v37 = 0;
  if (!Delegate)
  {
    __p[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    __p[1] = "_OpenAsset";
    v33 = 40;
    v34 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(const ArResolvedPath &) const";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    __p[0] = 0;
    __p[1] = 0;
    v33 = 0;
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)__p, a3);
    goto LABEL_51;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(_QWORD *)Delegate
                                                                                                + 56))(Delegate, a2, v43, &v42, &v41))
  {
    v8 = (*(_QWORD *(**)(void **__return_ptr, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, void **, char *))(*(_QWORD *)v7 + 40))(__p, v7, a2, v42, v41, 1, 1, v45, __src, &v39);
    v9 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    v38 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!v39)
    {
      __p[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
      __p[1] = "_OpenAsset";
      v33 = 49;
      v34 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(const ArReso"
            "lvedPath &) const";
      v35 = 0;
      if (*(char *)(a2 + 23) >= 0)
        v26 = (const char *)a2;
      else
        v26 = *(const char **)a2;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to download bytes for %s", v26);
      goto LABEL_36;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    v31 = v38;
    if (*((_QWORD *)&v38 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    ResourceOffset = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset((uint64_t)v8, (uint64_t)v43, (uint64_t **)&v31, &v39);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      goto LABEL_30;
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, unint64_t, uint64_t, uint64_t *, void **, char *))(*(_QWORD *)v7 + 32))(__p, v7, a2, v45, __src, &v39);
    v21 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    v38 = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v25 = (unint64_t *)((char *)__p[1] + 8);
      do
        v20 = __ldaxr(v25);
      while (__stlxr(v20 - 1, v25));
LABEL_30:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
LABEL_36:
  if (v39)
  {
    if (*(_QWORD *)(v38 + 8) != *(_QWORD *)v38)
    {
      sub_20C6BDBEC((unint64_t *)&v38, &ResourceOffset, __p);
      *a3 = *(_OWORD *)__p;
      goto LABEL_54;
    }
    if (SHIBYTE(v37) < 0)
    {
      if (__src[1])
      {
        sub_20BDDBFAC(__p, __src[0], (unint64_t)__src[1]);
        goto LABEL_44;
      }
    }
    else if (HIBYTE(v37))
    {
      *(_OWORD *)__p = *(_OWORD *)__src;
      v33 = v37;
LABEL_44:
      pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)__p, a3);
      goto LABEL_51;
    }
  }
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v7 + 80))(v7)
    && ((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, a2) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)a2, a3);
    goto LABEL_54;
  }
  __p[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
  __p[1] = "_OpenAsset";
  v33 = 69;
  v34 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(const ArResolvedPath &) const";
  v35 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v27 = (const char *)a2;
  else
    v27 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to download %s", v27);
  __p[0] = 0;
  __p[1] = 0;
  v33 = 0;
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)__p, a3);
LABEL_51:
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
LABEL_54:
  if (SHIBYTE(v37) < 0)
    operator delete(__src[0]);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  __p[0] = v45;
  sub_20BDE9EB0((void ***)__p);
}

void sub_20C6BC7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (a26 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a27);
  if (*(char *)(v27 - 81) < 0)
    operator delete(*(void **)(v27 - 104));
  a13 = (void *)(v27 - 80);
  sub_20BDE9EB0((void ***)&a13);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *this)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;

  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate))
  {
    v2 = operator new(0x498uLL);
    bzero(v2, 0x498uLL);
    v3 = 0;
    *v2 = off_24C5417A0;
    v4 = v2 + 67;
    do
    {
      v2[v3 + 68] = 0;
      v3 += 3;
    }
    while (v3 != 6);
    v5 = 0;
    *((_OWORD *)v2 + 31) = 0u;
    *((_OWORD *)v2 + 32) = 0u;
    *((_OWORD *)v2 + 29) = 0u;
    *((_OWORD *)v2 + 30) = 0u;
    *((_OWORD *)v2 + 27) = 0u;
    *((_OWORD *)v2 + 28) = 0u;
    *((_OWORD *)v2 + 25) = 0u;
    *((_OWORD *)v2 + 26) = 0u;
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 24) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    __dmb(0xBu);
    v2[1] = 0;
    __dmb(0xBu);
    v2[66] = 0;
    *v4 = 0u;
    *(_OWORD *)(v2 + 69) = 0u;
    *(_OWORD *)(v2 + 71) = 0u;
    v2[2] = v4;
    __dmb(0xBu);
    v6 = v2 + 140;
    v2[1] = 1;
    do
    {
      v2[v5 + 141] = 0;
      v5 += 3;
    }
    while (v5 != 6);
    *(_OWORD *)(v2 + 105) = 0u;
    *(_OWORD *)(v2 + 103) = 0u;
    *(_OWORD *)(v2 + 101) = 0u;
    *(_OWORD *)(v2 + 99) = 0u;
    *(_OWORD *)(v2 + 97) = 0u;
    *(_OWORD *)(v2 + 95) = 0u;
    *(_OWORD *)(v2 + 93) = 0u;
    *(_OWORD *)(v2 + 91) = 0u;
    *(_OWORD *)(v2 + 89) = 0u;
    *(_OWORD *)(v2 + 87) = 0u;
    *(_OWORD *)(v2 + 85) = 0u;
    *(_OWORD *)(v2 + 83) = 0u;
    *(_OWORD *)(v2 + 81) = 0u;
    *(_OWORD *)(v2 + 79) = 0u;
    *(_OWORD *)(v2 + 77) = 0u;
    *(_OWORD *)(v2 + 75) = 0u;
    *(_OWORD *)(v2 + 135) = 0u;
    *(_OWORD *)(v2 + 137) = 0u;
    *(_OWORD *)(v2 + 131) = 0u;
    *(_OWORD *)(v2 + 133) = 0u;
    *(_OWORD *)(v2 + 127) = 0u;
    *(_OWORD *)(v2 + 129) = 0u;
    *(_OWORD *)(v2 + 123) = 0u;
    *(_OWORD *)(v2 + 125) = 0u;
    *(_OWORD *)(v2 + 119) = 0u;
    *(_OWORD *)(v2 + 121) = 0u;
    *(_OWORD *)(v2 + 115) = 0u;
    *(_OWORD *)(v2 + 117) = 0u;
    *(_OWORD *)(v2 + 111) = 0u;
    *(_OWORD *)(v2 + 113) = 0u;
    *(_OWORD *)(v2 + 107) = 0u;
    *(_OWORD *)(v2 + 109) = 0u;
    __dmb(0xBu);
    v2[74] = 0;
    __dmb(0xBu);
    v2[139] = 0;
    *v6 = 0u;
    *((_OWORD *)v2 + 71) = 0u;
    *((_OWORD *)v2 + 72) = 0u;
    v2[75] = v6;
    __dmb(0xBu);
    v2[74] = 1;
    atomic_store((unint64_t)v2, &pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
  }
  return atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(uint64_t a1, uint64_t a2, uint64_t **a3, _BYTE *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  void **v13;
  const char *v14;
  void *__p[2];
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  v5 = **a3;
  v6 = (*a3)[1] - v5;
  if (v6 == 30)
  {
LABEL_8:
    v9 = 0;
    *a4 = 0;
    return v9;
  }
  v8 = 30;
  while (*(_BYTE *)(v5 + v8 - 30) != 80
       || *(_BYTE *)(v5 + v8 - 29) != 75
       || *(_BYTE *)(v5 + v8 - 28) != 3
       || *(_BYTE *)(v5 + v8 - 27) != 4)
  {
    if (v6 == ++v8)
      goto LABEL_8;
  }
  if (v8 - 4 >= v6)
  {
    v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    v18 = "GetResourceOffset";
    v19 = 366;
    v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read uncompressed size for %s.");
    return 0;
  }
  if (v8 - 2 >= v6)
  {
    v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    v18 = "GetResourceOffset";
    v19 = 375;
    v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file name length for %s.");
    return 0;
  }
  if (v8 >= v6)
  {
    v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    v18 = "GetResourceOffset";
    v19 = 384;
    v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read extra field length for %s.");
    return 0;
  }
  v11 = *(unsigned __int16 *)(v5 + v8 - 4);
  if (v11 + v8 >= v6)
  {
    v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    v18 = "GetResourceOffset";
    v19 = 399;
    v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file name for %s.");
    return 0;
  }
  v12 = *(unsigned __int16 *)(v5 + v8 - 2);
  sub_20BDFC7D8(__p, (void *)(v5 + v8), *(unsigned __int16 *)(v5 + v8 - 4));
  if (sub_20C0F2904((unsigned __int8 *)__p, (unsigned __int8 *)a2))
  {
    *a4 = 0;
    v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    v18 = "GetResourceOffset";
    v19 = 407;
    v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    v21 = 0;
    if (v16 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Found %s but expected %s", (const char *)v13, v14);
    v9 = 0;
  }
  else
  {
    *a4 = 1;
    v9 = (v11 + v12 + 30);
  }
  if (v16 < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_20C6BCC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetModificationTimestamp(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *a1, uint64_t a2, char *a3)
{
  unint64_t Delegate;
  unint64_t v7;
  double result;
  _QWORD v9[4];
  char v10;

  Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(a1);
  if (Delegate)
  {
    v7 = Delegate;
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)Delegate + 80))(Delegate)
      && ((*(uint64_t (**)(unint64_t, char *))(*(_QWORD *)v7 + 72))(v7, a3) & 1) == 0)
    {
      return pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetModificationTimestamp((uint64_t)a1, a2, a3);
    }
    else
    {
      (*(void (**)(unint64_t, char *))(*(_QWORD *)v7 + 24))(v7, a3);
    }
  }
  else
  {
    v9[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    v9[1] = "_GetModificationTimestamp";
    v9[2] = 79;
    v9[3] = "virtual ArTimestamp pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetModificationTimestamp(const std:"
            ":string &, const ArResolvedPath &) const";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    return NAN;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_CreateIdentifier(pxrInternal__aapl__pxrReserved__::ArResolver *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplHttpResolver *CurrentContext;
  unint64_t Delegate;
  unint64_t v10;
  void *v11;
  void *v12[2];
  uint64_t v13;
  const char *v14;
  _OWORD v15[2];
  int v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  uint64_t v20[3];

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
      sub_20BDDBFAC((_BYTE *)a4, *(void **)a2, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    return;
  }
  CurrentContext = (pxrInternal__aapl__pxrReserved__::AaplHttpResolver *)pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(v20, this);
  v19 = 0;
  Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(CurrentContext);
  v10 = Delegate;
  if (Delegate)
  {
    (*(void (**)(void **__return_ptr, unint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)Delegate + 16))(__p, Delegate, a2, a3, &v19, v20);
    if (v19)
    {
      if (pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(this, (uint64_t)__p))
      {
        (*(void (**)(void **__return_ptr, unint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)v10 + 16))(v12, v10, a2, a3, &v19, v20);
        if (SHIBYTE(v18) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)v12;
        v18 = v13;
      }
      else
      {
        LOBYTE(v12[0]) = 0;
        sub_20BDDC0E4(&v12[1], "");
        memset(v15, 0, sizeof(v15));
        v16 = 1065353216;
        (*(void (**)(unint64_t, void **, void **))(*(_QWORD *)v10 + 48))(v10, __p, v12);
        sub_20BEB3F28((uint64_t)v15);
        if (SHIBYTE(v14) < 0)
          operator delete(v12[1]);
      }
    }
    v11 = (void *)HIBYTE(v18);
    if (v18 < 0)
      v11 = __p[1];
    if (v11)
    {
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 16) = v18;
      __p[1] = 0;
      v18 = 0;
      __p[0] = 0;
    }
    else if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v10 + 80))(v10)
           || ((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, a2) & 1) != 0
           || ((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, a3) & 1) != 0)
    {
      sub_20BDDC0E4((_QWORD *)a4, "");
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifier((uint64_t)this, a2, a3, a4);
    }
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v12[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    v12[1] = "_CreateIdentifier";
    v13 = 103;
    v14 = "virtual std::string pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_CreateIdentifier(const std::string &,"
          " const ArResolvedPath &) const";
    LOBYTE(v15[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    sub_20BDDC0E4((_QWORD *)a4, "");
  }
  v12[0] = v20;
  sub_20BDE9EB0((void ***)v12);
}

void sub_20C6BD008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  sub_20C6BA338((uint64_t)&a10);
  if (a24 < 0)
    operator delete(__p);
  a10 = v24 - 72;
  sub_20BDE9EB0((void ***)&a10);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(pxrInternal__aapl__pxrReserved__::ArResolver *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::AaplHttpResolver *CurrentContext;
  unint64_t Delegate;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  const char *v25;
  std::string __str;
  std::string __p;
  const char *v28;
  char v29;
  void **v30;
  std::string v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD v35[2];
  uint64_t *v36;
  std::__shared_weak_count *v37;
  void *v38[2];
  uint64_t v39;
  uint64_t v40[3];
  _BYTE v41[9];

  v41[0] = 1;
  CurrentContext = (pxrInternal__aapl__pxrReserved__::AaplHttpResolver *)pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(v40, a1);
  Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(CurrentContext);
  v5 = Delegate;
  if (!Delegate)
  {
    v30 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
    v31.__r_.__value_.__l.__size_ = 167;
    v31.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::"
                                                               "GetPackageContents(const std::string &) const";
    LOBYTE(v32) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    v10 = 0;
    goto LABEL_24;
  }
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  (*(void (**)(uint64_t **__return_ptr, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t *, void **, _BYTE *))(*(_QWORD *)Delegate + 40))(&v36, Delegate, a2, -128, 0, 0, 0, v40, v38, v41);
  if (v41[0])
  {
    v6 = *v36;
    v7 = v36[1] - *v36;
    if (v7 >= 0x14)
    {
      if (v7 == 20)
      {
LABEL_11:
        v30 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
        v31.__r_.__value_.__l.__size_ = 207;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolv"
                                                                   "er::GetPackageContents(const std::string &) const";
        LOBYTE(v32) = 0;
        if (*(char *)(a2 + 23) >= 0)
          v9 = (const char *)a2;
        else
          v9 = *(const char **)a2;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to find End of Central Directory record for %s", v9);
      }
      else
      {
        v8 = 0;
        while (*(_BYTE *)(v6 + v8) != 80
             || *(_BYTE *)(v6 + v8 + 1) != 75
             || *(_BYTE *)(v6 + v8 + 2) != 5
             || *(_BYTE *)(v6 + v8 + 3) != 6)
        {
          if (v7 - 20 == ++v8)
            goto LABEL_11;
        }
        if (v8 + 12 >= v7)
        {
          v30 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
          v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
          v31.__r_.__value_.__l.__size_ = 215;
          v31.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpReso"
                                                                     "lver::GetPackageContents(const std::string &) const";
          LOBYTE(v32) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read number of entries in End of Central Directory record.");
        }
        else if (v8 + 16 >= v7)
        {
          v30 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
          v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
          v31.__r_.__value_.__l.__size_ = 223;
          v31.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpReso"
                                                                     "lver::GetPackageContents(const std::string &) const";
          LOBYTE(v32) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read directory size in End of Central Directory record.");
        }
        else
        {
          if (v8 + 20 < v7)
          {
            (*(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t *, void **, _BYTE *))(*(_QWORD *)v5 + 40))(v35, v5, a2, *(unsigned int *)(v6 + v8 + 16), (*(_DWORD *)(v6 + v8 + 16) + *(_DWORD *)(v6 + v8 + 12)), 1, 0, v40, v38, v41);
            if (v41[0])
            {
              LOBYTE(v30) = 1;
              sub_20BDDC0E4(&v31, "");
              v33 = 0u;
              v32 = 0u;
              v34 = 1065353216;
              v15 = v35[0];
              v16 = *(_QWORD *)v35[0];
              v17 = *(_QWORD *)(v35[0] + 8) - *(_QWORD *)v35[0];
              if (v17 == 30)
              {
LABEL_65:
                v10 = 0;
              }
              else
              {
                v18 = 0;
                v19 = 0;
                do
                {
                  if (*(_BYTE *)(v16 + v19) == 80
                    && *(_BYTE *)(v19 + v16 + 1) == 75
                    && *(_BYTE *)(v19 + v16 + 2) == 1
                    && *(_BYTE *)(v19 + v16 + 3) == 2)
                  {
                    if (v19 + 28 >= v17)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 270;
                      v28 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      v29 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read uncompressed size for entry.");
                      goto LABEL_65;
                    }
                    if (v19 + 30 >= v17)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 279;
                      v28 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      v29 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file name length for entry.");
                      goto LABEL_65;
                    }
                    if (v19 + 32 >= v17)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 288;
                      v28 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      v29 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read extra field length for entry.");
                      goto LABEL_65;
                    }
                    v20 = v19 + 46;
                    if (v19 + 46 >= v17)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 297;
                      v28 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      v29 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file offset for entry");
                      goto LABEL_65;
                    }
                    v21 = *(unsigned __int16 *)(v16 + v19 + 28);
                    if (v20 + v21 >= v17)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 312;
                      v28 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      v29 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to file name for entry");
                      goto LABEL_65;
                    }
                    v22 = *(_DWORD *)(v19 + v16 + 24);
                    v23 = *(unsigned __int16 *)(v16 + v19 + 30);
                    v24 = *(unsigned int *)(v19 + v16 + 42);
                    sub_20BDFC7D8(&__str, (void *)(v16 + v20), *(unsigned __int16 *)(v16 + v19 + 28));
                    if (!v18)
                      std::string::operator=(&v31, &__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      sub_20BDDBFAC(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                    else
                      __p = __str;
                    v28 = (const char *)((v22 + v21 + v23 + 30) | (unint64_t)(v24 << 32));
                    sub_20C6BA920((uint64_t)&v32, (unsigned __int8 *)&__p, (uint64_t)&__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__str.__r_.__value_.__l.__data_);
                    ++v18;
                    v15 = v35[0];
                    v16 = *(_QWORD *)v35[0];
                    v19 = v20;
                  }
                  ++v19;
                  v17 = *(_QWORD *)(v15 + 8) - v16;
                }
                while (v19 < v17 - 30);
                if (!*((_QWORD *)&v33 + 1))
                  goto LABEL_65;
                (*(void (**)(unint64_t, uint64_t, void ***))(*(_QWORD *)v5 + 48))(v5, a2, &v30);
                v10 = v41[0] != 0;
              }
              sub_20C6BA338((uint64_t)&v30);
            }
            else
            {
              v30 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
              v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
              v31.__r_.__value_.__l.__size_ = 244;
              v31.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttp"
                                                                         "Resolver::GetPackageContents(const std::string &) const";
              LOBYTE(v32) = 0;
              if (*(char *)(a2 + 23) >= 0)
                v25 = (const char *)a2;
              else
                v25 = *(const char **)a2;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to fetch central directory for %s", v25);
              v10 = 0;
            }
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v35);
            goto LABEL_16;
          }
          v30 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
          v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
          v31.__r_.__value_.__l.__size_ = 232;
          v31.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpReso"
                                                                     "lver::GetPackageContents(const std::string &) const";
          LOBYTE(v32) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read directory offset in End of Central Directory record.");
        }
      }
    }
  }
  v10 = 0;
LABEL_16:
  v11 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
LABEL_24:
  v30 = (void **)v40;
  sub_20BDE9EB0(&v30);
  return v10;
}

void sub_20C6BD6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_20C6BA338((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a33);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a35);
  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  a24 = v35 - 120;
  sub_20BDE9EB0((void ***)&a24);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_Resolve(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t Delegate;
  unint64_t v8;
  _QWORD v9[4];
  char v10;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_10;
  Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(a1);
  if (!Delegate)
  {
    v9[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    v9[1] = "_Resolve";
    v9[2] = 149;
    v9[3] = "virtual ArResolvedPath pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_Resolve(const std::string &) const";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v8 = Delegate;
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)Delegate + 80))(Delegate)
    && ((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a2) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_Resolve(a1, a2, a3);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = *(_QWORD *)(a2 + 16);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetExtension@<X0>(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t Delegate;
  _QWORD v7[4];
  char v8;

  Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(a1);
  if (Delegate)
    return (_QWORD *)(*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)Delegate + 64))(Delegate, a2);
  v7[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
  v7[1] = "_GetExtension";
  v7[2] = 424;
  v7[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetExtension(const std::string &) const";
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
  return sub_20BDDC0E4(a3, "");
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::SetDelegate(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;

  if (a3)
  {
    if (atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate))
    {
      v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
      atomic_store(0, &pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
      if (v5)
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  atomic_store(a2, &pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
}

void sub_20C6BD9C8(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(a1);
  operator delete(v1);
}

uint64_t *sub_20C6BD9DC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BFC7D44((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6BDAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BDAFC(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C5419C0;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C6BDB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C6BDB8C(pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase::~Ar_ResolverFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *sub_20C6BDBA0()
{
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v0);
  *(_QWORD *)v0 = &off_24C5418E0;
  return v0;
}

void sub_20C6BDBD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BDBEC@<X0>(unint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  result = sub_20C6BDC4C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20C6BDC38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BDC4C(_QWORD *a1, unint64_t *a2, int *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24C541A00;
  a1[1] = 0;
  sub_20C6BDCF8((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_20C6BDC9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20C6BDCB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C541A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C6BDCC4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C541A00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C6BDCE8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20C6BDCF8(uint64_t a1, _QWORD *a2, unint64_t *a3, int *a4)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;

  v4 = a3[1];
  v11.n128_u64[0] = *a3;
  v11.n128_u64[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = pxrInternal__aapl__pxrReserved__::AaplHttpAsset::AaplHttpAsset(a2, &v11, *a4);
  v8 = (std::__shared_weak_count *)v11.n128_u64[1];
  if (v11.n128_u64[1])
  {
    v9 = (unint64_t *)(v11.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20C6BDD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::~UsdPhysicsPreliminary_InfiniteColliderPlane(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C541AD8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdPhysics/preliminary_InfiniteColliderPlane.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsPreliminary_InfiniteColliderPlane pxrInternal__aapl__pxrReserved__::UsdPhys"
                            "icsPreliminary_InfiniteColliderPlane::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C541AD8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6BDF2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BE18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BE18))
  {
    __cxa_guard_release(&qword_25498BE18);
  }
  return &qword_25498BE10;
}

void sub_20C6BDFB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BE18);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BE28);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *)__cxa_guard_acquire(&qword_25498BE28);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetStaticTfType(v3);
      byte_25498BE20 = sub_20C35BD7C((char *)&qword_25498BE10, v4, v5);
      __cxa_guard_release(&qword_25498BE28);
    }
  }
  return byte_25498BE20;
}

void sub_20C6BE034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BE28);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetStaticTfType(this);
  return &qword_25498BE10;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::GetPositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 16), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6BE10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::CreatePositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 216), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::GetNormalAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6BE264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::CreateNormalAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 240), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BE48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BE48))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 2);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v10 = *(unsigned int **)v9;
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498BE30, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BE30, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BE48);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BE68);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BE68))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_20C6BE57C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BE50, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BE68);
  }
  if (v1)
    return &qword_25498BE50;
  else
    return &qword_25498BE30;
}

void sub_20C6BE4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498BE48);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BE57C(uint64_t **a1)
{
  qword_25498BE58 = 0;
  unk_25498BE60 = 0;
  qword_25498BE50 = 0;
  sub_20BFC9A6C((char **)&qword_25498BE50, ((unk_25498BE38 - qword_25498BE30) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BE50, (_QWORD *)qword_25498BE58, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BE50, (_QWORD *)qword_25498BE58, (uint64_t *)qword_25498BE30, unk_25498BE38, (unk_25498BE38 - qword_25498BE30) >> 3);
}

void sub_20C6BE610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6BE630()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C556F18((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6BE704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *sub_20C6BE754(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *result;
  void *v4;

  result = sub_20C6BE79C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C6BE7DC((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *sub_20C6BE79C()
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::AaplUsdPhysicsTokensType(v0);
  return v0;
}

void sub_20C6BE7C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BE7DC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v29;

  v29 = (void **)(a1 + 72);
  sub_20BEEB2B8(&v29);
  v2 = *(_QWORD *)(a1 + 64);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 56);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 48);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 40);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 32);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 24);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 16);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 8);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v26 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::~UsdPhysicsPreliminary_PhysicsColliderAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C541B30;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdPhysics/preliminary_PhysicsColliderAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsColliderAPI pxrInternal__aapl__pxrReserved__::UsdPhysics"
                            "Preliminary_PhysicsColliderAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C541B30;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6BEAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  return 5;
}

uint64_t sub_20C6BEAF0(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BE70, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C6BECA8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C541B30;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C541B30;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C6BEC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6BECA8(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BE70, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsPreliminary_PhysicsColliderAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BE78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BE78))
  {
    __cxa_guard_release(&qword_25498BE78);
  }
  return &qword_25498BE70;
}

void sub_20C6BEDC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BE78);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BE88);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *)__cxa_guard_acquire(&qword_25498BE88);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(v3);
      byte_25498BE80 = sub_20C35BD7C((char *)&qword_25498BE70, v4, v5);
      __cxa_guard_release(&qword_25498BE88);
    }
  }
  return byte_25498BE80;
}

void sub_20C6BEE40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BE88);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(this);
  return &qword_25498BE70;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetPreliminaryPhysicsColliderConvexShapeRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 24), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6BEF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::CreatePreliminaryPhysicsColliderConvexShapeRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 24), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6BEFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498BEA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BEA8))
  {
    qword_25498BE90 = 0;
    *(_QWORD *)algn_25498BE98 = 0;
    qword_25498BEA0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BE90, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BEA8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BEC8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BEC8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498BEB0 = 0;
    *(_QWORD *)algn_25498BEB8 = 0;
    qword_25498BEC0 = 0;
    sub_20BFE538C(&qword_25498BEB0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BEB0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BEC8);
  }
  if (v1)
    return &qword_25498BEB0;
  else
    return &qword_25498BE90;
}

void sub_20C6BF0EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BEC8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6BF104()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6BF1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::~UsdPhysicsPreliminary_PhysicsForce(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C541B88;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdPhysics/preliminary_PhysicsForce.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsForce pxrInternal__aapl__pxrReserved__::UsdPhysicsPrelim"
                            "inary_PhysicsForce::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C541B88;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6BF3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BED8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BED8))
  {
    __cxa_guard_release(&qword_25498BED8);
  }
  return &qword_25498BED0;
}

void sub_20C6BF440(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BED8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BEE8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *)__cxa_guard_acquire(&qword_25498BEE8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetStaticTfType(v3);
      byte_25498BEE0 = sub_20C35BD7C((char *)&qword_25498BED0, v4, v5);
      __cxa_guard_release(&qword_25498BEE8);
    }
  }
  return byte_25498BEE0;
}

void sub_20C6BF4BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BEE8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetStaticTfType(this);
  return &qword_25498BED0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498BF08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BF08))
  {
    qword_25498BEF0 = 0;
    *(_QWORD *)algn_25498BEF8 = 0;
    qword_25498BF00 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BEF0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BF08);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BF28);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BF28))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_25498BF10 = 0;
    *(_QWORD *)algn_25498BF18 = 0;
    qword_25498BF20 = 0;
    sub_20BFE538C(&qword_25498BF10, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BF10, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BF28);
  }
  if (v1)
    return &qword_25498BF10;
  else
    return &qword_25498BEF0;
}

void sub_20C6BF5EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BF28);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6BF604()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6BF6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C6BF728()
{
  void *__p[2];
  char v1;

  sub_20C6C0044();
  sub_20BDDC0E4(__p, "Preliminary_PhysicsGravitationalForce");
  sub_20C6C0164((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C6BF774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::~UsdPhysicsPreliminary_PhysicsGravitationalForce(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::~UsdPhysicsPreliminary_PhysicsForce(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C541BE0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdPhysics/preliminary_PhysicsGravitationalForce.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsGravitationalForce pxrInternal__aapl__pxrReserved__::Usd"
                            "PhysicsPreliminary_PhysicsGravitationalForce::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C541BE0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6BF918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498BF38);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498BF38))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498BF30, "Preliminary_PhysicsGravitationalForce");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498BF30, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BF38);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498BF30, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C541BE0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "aaplUsdPhysics/preliminary_PhysicsGravitationalForce.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsGravitationalForce pxrInternal__aapl__pxrReserved__::Usd"
                            "PhysicsPreliminary_PhysicsGravitationalForce::Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C541BE0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C6BFB08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BF38);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BF48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BF48))
  {
    __cxa_guard_release(&qword_25498BF48);
  }
  return &qword_25498BF40;
}

void sub_20C6BFBAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BF48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BF58);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *)__cxa_guard_acquire(&qword_25498BF58);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetStaticTfType(v3);
      byte_25498BF50 = sub_20C35BD7C((char *)&qword_25498BF40, v4, v5);
      __cxa_guard_release(&qword_25498BF58);
    }
  }
  return byte_25498BF50;
}

void sub_20C6BFC28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BF58);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetStaticTfType(this);
  return &qword_25498BF40;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::GetPhysicsGravitationalForceAccelerationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 8), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6BFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::CreatePhysicsGravitationalForceAccelerationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 8), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 240), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BF78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BF78))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 1);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498BF60, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BF60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BF78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BF98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BF98))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *)1);
    sub_20C6BFF90((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BF80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BF98);
  }
  if (v1)
    return &qword_25498BF80;
  else
    return &qword_25498BF60;
}

void sub_20C6BFF40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BF78);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6BFF90(uint64_t **a1)
{
  qword_25498BF88 = 0;
  unk_25498BF90 = 0;
  qword_25498BF80 = 0;
  sub_20BFC9A6C((char **)&qword_25498BF80, ((unk_25498BF68 - qword_25498BF60) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BF80, (_QWORD *)qword_25498BF88, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BF80, (_QWORD *)qword_25498BF88, (uint64_t *)qword_25498BF60, unk_25498BF68, (unk_25498BF68 - qword_25498BF60) >> 3);
}

void sub_20C6C0024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6C0044()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C6C0214((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6C0118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C6C0164(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C6C01F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C6C0214(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C6C0280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::~UsdPhysicsPreliminary_PhysicsMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C541C38;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdPhysics/preliminary_PhysicsMaterialAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsMaterialAPI pxrInternal__aapl__pxrReserved__::UsdPhysics"
                            "Preliminary_PhysicsMaterialAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C541C38;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6C0438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  return 5;
}

uint64_t sub_20C6C0460(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BFA0, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C6C0618(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C541C38;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C541C38;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C6C0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6C0618(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BFA0, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsPreliminary_PhysicsMaterialAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BFA8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BFA8))
  {
    __cxa_guard_release(&qword_25498BFA8);
  }
  return &qword_25498BFA0;
}

void sub_20C6C0734(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BFA8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BFB8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *)__cxa_guard_acquire(&qword_25498BFB8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(v3);
      byte_25498BFB0 = sub_20C35BD7C((char *)&qword_25498BFA0, v4, v5);
      __cxa_guard_release(&qword_25498BFB8);
    }
  }
  return byte_25498BFB0;
}

void sub_20C6C07B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BFB8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(this);
  return &qword_25498BFA0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetPreliminaryPhysicsMaterialRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6C0888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::CreatePreliminaryPhysicsMaterialRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetPreliminaryPhysicsMaterialFrictionStaticAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 40), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6C09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::CreatePreliminaryPhysicsMaterialFrictionStaticAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetPreliminaryPhysicsMaterialFrictionDynamicAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 32), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6C0B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::CreatePreliminaryPhysicsMaterialFrictionDynamicAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BFD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BFD8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 6);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 5);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 4);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498BFC0, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BFC0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BFD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BFF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BFF8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C6C0ED0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BFE0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BFF8);
  }
  if (v1)
    return &qword_25498BFE0;
  else
    return &qword_25498BFC0;
}

void sub_20C6C0E40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BFD8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6C0ED0(uint64_t **a1)
{
  qword_25498BFE8 = 0;
  unk_25498BFF0 = 0;
  qword_25498BFE0 = 0;
  sub_20BFC9A6C((char **)&qword_25498BFE0, ((unk_25498BFC8 - qword_25498BFC0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BFE0, (_QWORD *)qword_25498BFE8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BFE0, (_QWORD *)qword_25498BFE8, (uint64_t *)qword_25498BFC0, unk_25498BFC8, (unk_25498BFC8 - qword_25498BFC0) >> 3);
}

void sub_20C6C0F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6C0F84()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6C1058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::~UsdPhysicsPreliminary_PhysicsRigidBodyAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C541C90;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdPhysics/preliminary_PhysicsRigidBodyAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsRigidBodyAPI pxrInternal__aapl__pxrReserved__::UsdPhysic"
                            "sPreliminary_PhysicsRigidBodyAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C541C90;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6C123C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  return 5;
}

uint64_t sub_20C6C1264(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C000, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C6C141C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C541C90;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C541C90;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C6C1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6C141C(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C000, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C008);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C008))
  {
    __cxa_guard_release(&qword_25498C008);
  }
  return &qword_25498C000;
}

void sub_20C6C1538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C008);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C018);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *)__cxa_guard_acquire(&qword_25498C018);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(v3);
      byte_25498C010 = sub_20C35BD7C((char *)&qword_25498C000, v4, v5);
      __cxa_guard_release(&qword_25498C018);
    }
  }
  return byte_25498C010;
}

void sub_20C6C15B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C018);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(this);
  return &qword_25498C000;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::GetPreliminaryPhysicsRigidBodyMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6C168C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::CreatePreliminaryPhysicsRigidBodyMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::GetPreliminaryPhysicsRigidBodyInitiallyActiveAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6C17E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::CreatePreliminaryPhysicsRigidBodyInitiallyActiveAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 56), v9, 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C038);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C038))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 8);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C6BE754(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 7);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C020, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C020, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C038);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C058);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C058))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C6C1AFC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C040, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C058);
  }
  if (v1)
    return &qword_25498C040;
  else
    return &qword_25498C020;
}

void sub_20C6C1A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C038);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6C1AFC(uint64_t **a1)
{
  qword_25498C048 = 0;
  unk_25498C050 = 0;
  qword_25498C040 = 0;
  sub_20BFC9A6C((char **)&qword_25498C040, ((unk_25498C028 - qword_25498C020) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C040, (_QWORD *)qword_25498C048, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C040, (_QWORD *)qword_25498C048, (uint64_t *)qword_25498C020, unk_25498C028, (unk_25498C028 - qword_25498C020) >> 3);
}

void sub_20C6C1B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6C1BB0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6C1C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::AaplUsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "normal", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "physics:gravitationalForce:acceleration", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "position", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "preliminary:physics:collider:convexShape", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "preliminary:physics:material:friction:dynamic", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "preliminary:physics:material:friction:static", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "preliminary:physics:material:restitution", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "preliminary:physics:rigidBody:initiallyActive", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "preliminary:physics:rigidBody:mass", 0);
  v3 = *(_QWORD *)this;
  v41 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v42 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v43 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v44 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v45 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v46 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v47 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v48 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v27 = *((_QWORD *)this + 8);
  v49 = v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v30 = operator new(0x48uLL);
  v31 = 0;
  *((_QWORD *)this + 9) = v30;
  *((_QWORD *)this + 10) = v30;
  *((_QWORD *)this + 11) = v30 + 9;
  do
  {
    v32 = *(&v41 + v31);
    *v30 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        *v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v31;
    ++v30;
  }
  while (v31 != 9);
  v35 = &v50;
  *((_QWORD *)this + 10) = v30;
  do
  {
    v37 = *--v35;
    v36 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
  }
  while (v35 != &v41);
  return this;
}

