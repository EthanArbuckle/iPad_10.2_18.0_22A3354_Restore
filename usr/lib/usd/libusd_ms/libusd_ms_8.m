void sub_20C104B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B408(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C104B28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20C104BCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B408(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C104BE4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  if (!sub_20C104C34(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return (uint64_t)(v3[1] - *v3) >> 3;
  }
  return result;
}

uint64_t sub_20C104C34(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy>"
            "::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_QWORD *sub_20C104CA8(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v5 = *a3;
  v6 = *((_QWORD *)a3 + 2);
  sub_20C104D24((uint64_t)a1, (uint64_t)&v7, (uint64_t)&v5);
  return a1;
}

void sub_20C104D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_20C104D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v7;
  _QWORD v8[2];

  for (result = sub_20C104DA0(a2, a3); !result; result = sub_20C104DA0(a2, a3))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8[0] = *(_QWORD *)(a2 + 8);
    v8[1] = v7;
    sub_20C104E1C((uint64_t **)a1, (uint64_t *)(a1 + 8), (uint64_t)v8);
    ++*(_QWORD *)(a2 + 16);
  }
  return result;
}

BOOL sub_20C104DA0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  v3[0] = "sdf/listProxy.h";
  v3[1] = "equal";
  v3[2] = 268;
  v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::"
          "_Iterator<pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePoli"
          "cy> *, pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
          "::_GetHelper>::equal(const This &) const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolic"
          "y, Owner = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePol"
          "icy> *, GetItem = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayer"
          "TypePolicy>::_GetHelper]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Comparing SdfListProxy iterators from different proxies!");
  return 0;
}

uint64_t *sub_20C104E1C(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  void **v7;
  uint64_t v9;
  const void **v10;
  void *__p;
  uint64_t v12;

  sub_20C104ECC((uint64_t)a1, a3, (uint64_t)&__p);
  v5 = (uint64_t **)sub_20BDEC0F8(a1, a2, &v10, &v9, (const void **)__p + 4);
  v6 = *v5;
  if (*v5)
  {
    v7 = (void **)__p;
    __p = 0;
    if (v7)
      sub_20BDEEB58((uint64_t)&v12, v7);
  }
  else
  {
    sub_20BDDE1B4(a1, (uint64_t)v10, v5, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v6;
}

void sub_20C104EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_20BDEEB58((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C104ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BFD46DC(*(uint64_t **)a2, *(_QWORD *)(a2 + 8), v6 + 4);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C104F30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_20C104F4C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = sub_20C020210(*v4, v4[1], a3);
  if (v5 == v4[1])
    return -1;
  else
    return 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 3);
}

char *sub_20C104FC0(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20C105038(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C105054(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char *a4@<X8>)
{
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  int v17;
  int v18[5];
  _QWORD **v19;

  v6 = a3[23];
  v7 = *((_QWORD *)a3 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = a1[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a1 + 1);
  if (v8 != v9)
    goto LABEL_17;
  if (v10 >= 0)
    v12 = a1;
  else
    v12 = *(unsigned __int8 **)a1;
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a3, v12, v7))
      goto LABEL_19;
LABEL_17:
    sub_20C029E64(a4, (__int128 *)a3);
    a4[56] = 1;
    return;
  }
  if ((_DWORD)v6)
  {
    v13 = a3;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v6)
        goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_19:
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    sub_20C029E64((char *)__p, (__int128 *)a3);
    sub_20C1051AC((uint64_t)__p, a2);
    sub_20C0E33FC((uint64_t)a4, (__int128 *)__p);
    sub_20BF49F14(&v19, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
    sub_20BFD265C(&v17);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *a4 = 0;
    a4[56] = 0;
  }
}

void sub_20C105198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C029F94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1051AC(uint64_t a1, uint64_t a2)
{
  void *v3[2];
  uint64_t v4;
  void *__p;
  char v6;
  __int128 __dst;
  uint64_t v8;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v3, a2);
  if (SHIBYTE(v4) < 0)
  {
    sub_20BDDBFAC(&__dst, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    __dst = *(_OWORD *)v3;
    v8 = v4;
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v8;
  HIBYTE(v8) = 0;
  LOBYTE(__dst) = 0;
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_20C105248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C10525C(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceType"
            "Policy>::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

char *sub_20C1052D0(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C105348(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C105364(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C528A98;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20C1053B4(void **__p)
{
  *__p = &unk_24C528A98;
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void *sub_20C105404(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = operator new(0x40uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &unk_24C528A98;
  *((_QWORD *)v2 + 1) = v3;
  sub_20C1052D0((char *)v2 + 16, (__int128 *)(a1 + 16));
  return v2;
}

void sub_20C10544C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C105460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C528A98;
  *(_QWORD *)(a2 + 8) = v2;
  return sub_20C1052D0((char *)(a2 + 16), (__int128 *)(a1 + 16));
}

void sub_20C105484(uint64_t a1)
{
  sub_20C105514(a1 + 8);
}

void sub_20C10548C(void *a1)
{
  sub_20C105514((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C1054B4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 40, a2);
}

uint64_t sub_20C1054CC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528B08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C105508()
{
  return &unk_24C528B08;
}

void sub_20C105514(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_20C105558(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;

  v6 = a3[23];
  v7 = *((_QWORD *)a3 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a3[23];
  else
    v8 = *((_QWORD *)a3 + 1);
  v9 = a1[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a1 + 1);
  if (v8 != v9)
    goto LABEL_20;
  if (v10 >= 0)
    v12 = a1;
  else
    v12 = *(unsigned __int8 **)a1;
  if ((v6 & 0x80) == 0)
  {
    if (a3[23])
    {
      v13 = a3;
      while (*v13 == *v12)
      {
        ++v13;
        ++v12;
        if (!--v6)
          goto LABEL_15;
      }
      goto LABEL_20;
    }
LABEL_15:
    v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v17 = *((_QWORD *)a3 + 2);
      goto LABEL_25;
    }
LABEL_27:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 48) = 0;
    return;
  }
  if (memcmp(*(const void **)a3, v12, *((_QWORD *)a3 + 1)))
  {
LABEL_20:
    sub_20C1057F0((_QWORD *)a4, (__int128 *)a3);
    return;
  }
  v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
    goto LABEL_27;
  sub_20BDDBFAC(__p, *(void **)a3, v7);
LABEL_25:
  sub_20BFD6E54(&v18, (_DWORD *)a3 + 6);
  sub_20BFD6EA4(&v19, (_DWORD *)a3 + 7);
  v20 = *((_OWORD *)a3 + 2);
  sub_20C105740((uint64_t)__p, a2);
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 16) = v17;
  __p[1] = 0;
  v17 = 0;
  __p[0] = 0;
  sub_20BFD38A4((_DWORD *)(a4 + 24), &v18);
  sub_20BFD38DC((_DWORD *)(a4 + 28), &v19);
  *(_OWORD *)(a4 + 32) = v20;
  *(_BYTE *)(a4 + 48) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_20C10572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C02CDE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C105740(uint64_t a1, uint64_t a2)
{
  void *v3[2];
  uint64_t v4;
  void *__p;
  char v6;
  __int128 __dst;
  uint64_t v8;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v3, a2);
  if (SHIBYTE(v4) < 0)
  {
    sub_20BDDBFAC(&__dst, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    __dst = *(_OWORD *)v3;
    v8 = v4;
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v8;
  HIBYTE(v8) = 0;
  LOBYTE(__dst) = 0;
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_20C1057DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1057F0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  *((_BYTE *)__dst + 48) = 1;
  return __dst;
}

uint64_t sub_20C105864(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePo"
            "licy>::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_20C1058D8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C528B30;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20C105928(void **__p)
{
  *__p = &unk_24C528B30;
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void *sub_20C105978(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = operator new(0x40uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &unk_24C528B30;
  *((_QWORD *)v2 + 1) = v3;
  sub_20C1052D0((char *)v2 + 16, (__int128 *)(a1 + 16));
  return v2;
}

void sub_20C1059C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C1059D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C528B30;
  *(_QWORD *)(a2 + 8) = v2;
  return sub_20C1052D0((char *)(a2 + 16), (__int128 *)(a1 + 16));
}

void sub_20C1059F8(uint64_t a1)
{
  sub_20C105514(a1 + 8);
}

void sub_20C105A00(void *a1)
{
  sub_20C105514((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C105A28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 40, a2);
}

uint64_t sub_20C105A40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528BA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C105A7C()
{
  return &unk_24C528BA0;
}

_QWORD *sub_20C105A88(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (uint64_t *)a1[1];
    v7 = &v6[a2];
    do
    {
      v8 = *a3;
      *v6 = *a3;
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          *v6 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v6;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C105B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C105B3C(_QWORD *a1, uint64_t **a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C526790;
  sub_20C030230(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C105BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20C105C08(uint64_t ***a1)
{
  uint64_t **v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t ***))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C03018C(a1);
}

_QWORD *sub_20C105C98(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[2 * a2];
    v8 = 8 * a2;
    do
    {
      sub_20BFD6E54(v6, a3);
      sub_20BFD6EA4(v6 + 1, a3 + 1);
      v6 += 2;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C105D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C105D40(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  *(_QWORD *)a1 = *a2;
  sub_20BF1DD04((uint64_t *)a1);
  *(_QWORD *)(a1 + 8) = *a3;
  sub_20BFD6E54((_DWORD *)(a1 + 16), a5);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a5 + 1);
  sub_20BFD6E54((_DWORD *)(a1 + 24), a6);
  sub_20BFD6EA4((_DWORD *)(a1 + 28), a6 + 1);
  return a1;
}

uint64_t sub_20C105DB8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  v5 = *a2;
  *v4 = &unk_24C528BD8;
  v4[1] = v5;
  sub_20C105FE8((uint64_t)(v4 + 2), (uint64_t)(a2 + 1));
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_20C105E14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C105E28(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C528BD8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 16));
  return a1;
}

void sub_20C105E88(void *a1)
{
  *(_QWORD *)a1 = &unk_24C528BD8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 11);
  sub_20BFD265C((_DWORD *)a1 + 10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
  sub_20BFD265C((_DWORD *)a1 + 8);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1 + 2);
  operator delete(a1);
}

_QWORD *sub_20C105EE8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &unk_24C528BD8;
  v2[1] = v3;
  sub_20C106050((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_20C105F30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C105F44(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &unk_24C528BD8;
  a2[1] = v2;
  return sub_20C106050((uint64_t)(a2 + 2), a1 + 16);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C105F68(uint64_t a1)
{
  return sub_20C1060B8(a1 + 8);
}

void sub_20C105F70(void *a1)
{
  sub_20C1060B8((uint64_t)a1 + 8);
  operator delete(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C105F98(uint64_t a1, uint64_t a2)
{
  return sub_20C106104(a1 + 8, a2);
}

uint64_t sub_20C105FA0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528C58))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C105FDC()
{
  return &unk_24C528C58;
}

uint64_t sub_20C105FE8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_20BFD38A4((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_20BFD38DC((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  return a1;
}

uint64_t sub_20C106050(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_20BF1DD04((uint64_t *)a1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_20BFD6E54((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_20BFD6EA4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1060B8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  return sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C106104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, _QWORD, uint64_t, uint64_t, uint64_t);
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;

  v4 = a1 + 24;
  v5 = a1 + 32;
  v6 = *(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, _QWORD, uint64_t, uint64_t, uint64_t))a1;
  v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
  sub_20BF1DD04((uint64_t *)&v8);
  v6(&v8, *(_QWORD *)(a1 + 16), a2, v4, v5);
  return sub_20C0EA270(&v8);
}

void sub_20C106174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C106190(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C528C80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C1061C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C528C80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C1061E8(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(*(unint64_t **)(a1 + 16), (uint64_t *)(*(_QWORD *)(a1 + 8) + 24), a2, 1);
}

uint64_t sub_20C1061FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528CE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C106238()
{
  return &unk_24C528CE0;
}

__n128 sub_20C10624C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C528D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C106288(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C528D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C1062AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20C1062B4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528D88))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C1062F0()
{
  return &unk_24C528D88;
}

uint64_t sub_20C1062FC(uint64_t a1, uint64_t ***a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t result;

  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    if (*(uint64_t ***)(a1 + 8) != v5)
      sub_20C106430(*(_QWORD **)(a1 + 8), *v5, v5[1], v5[1] - *v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C106390(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  void **v8;

  if (sub_20BFD222C(a2))
  {
    sub_20C1065C0((uint64_t)a2, (uint64_t **)&v6);
    v4 = *(_QWORD *)(a1 + 8);
    sub_20C0B4038((void **)v4);
    *(_OWORD *)v4 = v6;
    *(_QWORD *)(v4 + 16) = v7;
    v6 = 0uLL;
    v7 = 0;
    v8 = (void **)&v6;
    sub_20BEEB2B8(&v8);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_QWORD *sub_20C106430(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  v6 = a2;
  v7 = result;
  v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 3)
  {
    sub_20C0B4038((void **)result);
    if (a4 >> 61)
      sub_20BDDF694();
    v9 = v7[2] - *v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_20BDDF654(v7, v11);
    v12 = (uint64_t)v7;
    v13 = v6;
    v14 = a3;
    return (_QWORD *)sub_20BFE5400(v12, v13, v14);
  }
  v15 = (char *)result[1];
  v16 = (v15 - v8) >> 3;
  if (v16 < a4)
  {
    v17 = &a2[v16];
    if (v15 != v8)
    {
      v18 = 8 * v16;
      do
      {
        sub_20BF32220(v8, v6++);
        v8 += 8;
        v18 -= 8;
      }
      while (v18);
    }
    v12 = (uint64_t)v7;
    v13 = v17;
    v14 = a3;
    return (_QWORD *)sub_20BFE5400(v12, v13, v14);
  }
  if (a2 == a3)
  {
    v19 = (char *)*result;
  }
  else
  {
    v19 = (char *)*result;
    do
    {
      result = sub_20BF32220(v8, v6++);
      v8 += 8;
      v19 += 8;
    }
    while (v6 != a3);
    v15 = (char *)v7[1];
  }
  while (v15 != v19)
  {
    v21 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    v20 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  v7[1] = v19;
  return result;
}

uint64_t **sub_20C1065C0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_20C105C08((uint64_t ***)a1);
  v5 = *result;
  *result = 0;
  *a2 = v5;
  v6 = result[1];
  result[1] = 0;
  a2[1] = v6;
  v7 = result[2];
  result[2] = 0;
  a2[2] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && (*(_QWORD *)(a1 + 8) & 3) != 3)
    result = (uint64_t **)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_20C106640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C106658()
{
  sub_20C106970();
  return sub_20C106A70();
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  unsigned __int8 v1;
  int v3;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254985B90);
  if ((v1 & 1) == 0)
  {
    v4 = this;
    v3 = __cxa_guard_acquire(&qword_254985B90);
    this = v4;
    if (v3)
    {
      xmmword_254985B80 = xmmword_20CA52210;
      __cxa_guard_release(&qword_254985B90);
      this = v4;
    }
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)this, (double *)&xmmword_254985B80);
}

double *pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(double *this, double a2, double a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(double *a1, double *a2)
{
  double v2;

  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || ((_QWORD)a1[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v2 = *a2;
    if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
  }
  else
  {
    v2 = *a2;
  }
  return vabdd_f64(*a1, v2) < 0.000001 && vabdd_f64(a1[1], a2[1]) < 0.000001;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  return (*(_QWORD *)this & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

double pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  double v3;
  double v4;
  BOOL v5;
  double v6;

  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(this))
    return *(double *)this;
  v3 = *((double *)this + 1);
  v4 = 1.0 / v3;
  v5 = v3 == 0.0;
  v6 = INFINITY;
  if (!v5)
    v6 = v4;
  return -(*(double *)this * v6);
}

double pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(double *a1, double *a2)
{
  return a1[1] * *a2 + *a1;
}

{
  return *a2 * a1[1] + *a1;
}

double pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(double *a1, double a2)
{
  return a1[1] * a2 + *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator<(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v3 = a1[1];
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v4 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 1;
  v5 = a2[1];
  if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 1;
  if (vabdd_f64(v3, v5) >= 0.000001)
  {
    return v3 < v5;
  }
  else
  {
    if (vabdd_f64(v2, v4) < 0.000001)
      return 0;
    return v2 < v4;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(int8x16_t *this)
{
  int64x2_t v1;

  v1 = (int64x2_t)vbicq_s8(*this, (int8x16_t)vceqzq_f64(*(float64x2_t *)this));
  v1.i64[0] = vaddvq_s64(v1);
  return bswap64(0x9E3779B97F4A7C55 * (v1.i64[1] + ((unint64_t)(v1.i64[0] + v1.i64[0] * v1.i64[0]) >> 1)));
}

uint64_t *sub_20C106970()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C528DD8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C528DD8, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C106A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C106A70()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524700, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524700, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C106B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SdfLayerStateDelegateBase(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_24C528DF8;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_24C528DF8;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20BEBCE60((unsigned int **)this + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::IsDirty(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this
                                                                                                  + 16))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;

  v7 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 48))(this);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v7);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(v8, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;

  v5 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 56))(a1);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v5);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v6, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5, pxrInternal__aapl__pxrReserved__::VtValue *a6)
{
  uint64_t *v11;
  uint64_t v12;

  v11 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 64))(this);
  v12 = sub_20BFCF650(v11);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>(v12, a2, a3, a4, a5, a6, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t v12;

  v11 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 72))(a1);
  v12 = sub_20BFCF650(v11);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v12, a2, a3, a4, a5, a6, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 80))(this);
  v8 = sub_20BFCF650(v7);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(v8, a2, a4, 0, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(uint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  v8 = sub_20BFCF650(v7);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v8, a2, a3, 0, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::CreateSpec(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  v8 = sub_20BFCF650(v7);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec(v8, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::DeleteSpec(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, BOOL a3)
{
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;

  v5 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 104))(this);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v5);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(v6, a2, a3, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::MoveSpec(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;

  v5 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 112))(this);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v5);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(v6, a2, a3, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 120))(this);
  v8 = sub_20BFCF650(v7);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>(v8, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t *v7;
  uint64_t v8;

  v7 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 128))(this);
  v8 = sub_20BFCF650(v7);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>(v8, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t *v4;

  v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 136))(this);
  sub_20BFCF650(v4);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::TfToken>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t *v4;

  v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(_QWORD *)this + 144))(this);
  sub_20BFCF650(v4);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::SdfPath>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 24;
  sub_20BF2D298(a1 + 24, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_GetLayer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_GetLayerData@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  unint64_t result;
  char v5;
  uint64_t *v6;

  v3 = (uint64_t *)((char *)this + 24);
  result = (unint64_t)sub_20BFD2F78((_QWORD *)this + 3);
  if (v5 & 1 | result)
  {
    v6 = (uint64_t *)(sub_20BFCF650(v3) + 112);
    return (unint64_t)sub_20C0EA4AC(a2, v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::New@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x30uLL);
  result[2] = 1;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &off_24C528EA0;
  *((_BYTE *)result + 40) = 0;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::SdfSimpleLayerStateDelegate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_24C528EA0;
  *(_BYTE *)(this + 40) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_24C528EA0;
  *(_BYTE *)(this + 40) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_IsDirty(pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_MarkCurrentStateAsClean(uint64_t this)
{
  *(_BYTE *)(this + 40) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_MarkCurrentStateAsDirty(uint64_t this)
{
  *(_BYTE *)(this + 40) = 1;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnSetField(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnSetFieldDictValueByKey(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnSetTimeSample(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnCreateSpec(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnDeleteSpec(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnMoveSpec(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnPushChild(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnPopChild(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

void sub_20C10728C(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *a1, const void *a2)
{
  void *v2;

  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(a1, a2);
  operator delete(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::New@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  uint64_t result;

  v8 = operator new(0x50uLL);
  result = pxrInternal__aapl__pxrReserved__::SdfLayerTree::SdfLayerTree((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_20C1072F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::SdfLayerTree(uint64_t a1, _QWORD *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C528F98;
  v5 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20C1074E0((_QWORD *)(a1 + 56), *a3, a3[1], (a3[1] - *a3) >> 3);
  return a1;
}

void sub_20C10739C(_Unwind_Exception *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfRefBase *v2;
  unsigned int **v3;
  uint64_t v5;

  v5 = *((_QWORD *)v2 + 4);
  if (v5)
    sub_20C96B36C(v5);
  sub_20BEBCE60(v3, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetLayer(pxrInternal__aapl__pxrReserved__::SdfLayerTree *this)
{
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetOffset(pxrInternal__aapl__pxrReserved__::SdfLayerTree *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetChildTrees(pxrInternal__aapl__pxrReserved__::SdfLayerTree *this)
{
  return (uint64_t)this + 56;
}

void sub_20C1073DC(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void **v7;

  *(_QWORD *)a1 = &unk_24C528F98;
  v7 = (void **)(a1 + 56);
  sub_20C107614(&v7);
  v3 = *(unsigned int **)(a1 + 32);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20BEBCE60((unsigned int **)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20C10745C(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void **v8;

  *(_QWORD *)a1 = &unk_24C528F98;
  v8 = (void **)(a1 + 56);
  sub_20C107614(&v8);
  v3 = *(unsigned int **)(a1 + 32);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20BEBCE60((unsigned int **)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v7);
}

_QWORD *sub_20C1074E0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = (_QWORD *)sub_20C107564((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C107544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C107614(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C107564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      sub_20BF1DD04((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C1075C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      sub_20C1075E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1075E8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20C107614(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C1075E8(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  uint64_t v8;
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t RepositoryPath;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t RealPath;
  __int128 v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  uint64_t *FileFormat;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t *v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  uint64_t v23;
  _BYTE *v24;
  _BOOL4 v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v27;
  std::string::size_type size;
  uint64_t (*v29)(uint64_t *);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  std::string v40;
  std::string v41;
  void *__p;
  char v43;
  std::string v44[2];
  std::string __str;

  v6 = sub_20BFD2F78(a1);
  if (!(v7 & 1 | (unint64_t)v6))
  {
    v44[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layerUtils.cpp";
    v44[0].__r_.__value_.__l.__size_ = (std::string::size_type)"SdfComputeAssetPathRelativeToLayer";
    v44[0].__r_.__value_.__r.__words[2] = 87;
    v44[1].__r_.__value_.__r.__words[0] = (std::string::size_type)"string pxrInternal__aapl__pxrReserved__::SdfComputeAss"
                                                                  "etPathRelativeToLayer(const SdfLayerHandle &, const string &)";
    v44[1].__r_.__value_.__s.__data_[8] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid anchor layer");
LABEL_14:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    v44[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layerUtils.cpp";
    v44[0].__r_.__value_.__l.__size_ = (std::string::size_type)"SdfComputeAssetPathRelativeToLayer";
    v44[0].__r_.__value_.__r.__words[2] = 92;
    v44[1].__r_.__value_.__r.__words[0] = (std::string::size_type)"string pxrInternal__aapl__pxrReserved__::SdfComputeAss"
                                                                  "etPathRelativeToLayer(const SdfLayerHandle &, const string &)";
    v44[1].__r_.__value_.__s.__data_[8] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer path is empty");
    goto LABEL_14;
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v6);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(a1)
    || !pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
LABEL_47:
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      }
    }
    else
    {
      v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v26))
      {
        memset(v44, 0, 24);
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
        if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44[0].__r_.__value_.__l.__data_);
      }
      else
      {
        v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v27);
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
      }
    }
    return;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v10);
  if (*(char *)(RepositoryPath + 23) >= 0)
    v12 = *(unsigned __int8 *)(RepositoryPath + 23);
  else
    v12 = *(_QWORD *)(RepositoryPath + 8);
  v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if (v12)
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v13);
  else
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v13);
  if (*(char *)(RealPath + 23) < 0)
  {
    sub_20BDDBFAC(&__str, *(void **)RealPath, *(_QWORD *)(RealPath + 8));
  }
  else
  {
    v15 = *(_OWORD *)RealPath;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(RealPath + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
  }
  memset(v44, 0, sizeof(v44));
  v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v16);
  v18 = sub_20BFCF6F4(FileFormat);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
  {
    std::string::operator=(v44, &__str);
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    v20 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v19);
    v21 = sub_20BFCF6F4(v20);
    v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    v23 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(&v41, v21, v23);
    if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44[1].__r_.__value_.__l.__data_);
    v44[1] = v41;
    sub_20C107CB8((__int128 *)v44, (uint64_t)&v41);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)&__str, (uint64_t)&v41);
  }
  sub_20C107E68((uint64_t)v44, (__int128 *)&v41);
  if (v43 < 0)
    operator delete(__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v40, a2, 0);
  sub_20C107EE8(&v44[1], (uint64_t)&v40, &v41);
  if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44[1].__r_.__value_.__l.__data_);
  v44[1] = v41;
  pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v44, (std::string *)a3);
  if (*(char *)(a2 + 23) >= 0)
    v24 = (_BYTE *)a2;
  else
    v24 = *(_BYTE **)a2;
  if (*v24 == 46)
    goto LABEL_37;
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v41.__r_.__value_.__l.__size_;
    operator delete(v41.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_37;
  }
  else if (*((_BYTE *)&v41.__r_.__value_.__s + 23))
  {
LABEL_37:
    LOBYTE(v25) = 0;
    goto LABEL_38;
  }
  memset(&v41, 0, sizeof(v41));
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)v44, (uint64_t)&v41, &v38);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v29 = sub_20C0E9DAC(&v38);
  if (v30 & 1 | (unint64_t)v29
    && (v31 = sub_20BFCF6F4(&v38), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31)))
  {
    v32 = sub_20BFCF6F4(&v38);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v32 + 24))(&v41, v32, v44);
    if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44[1].__r_.__value_.__l.__data_);
    v44[1] = v41;
    sub_20C107CB8((__int128 *)v44, (uint64_t)&v41);
    sub_20C107E68((uint64_t)v44, (__int128 *)&v41);
    sub_20BE930F8((uint64_t)&v41);
    sub_20C107EE8(&v44[1], (uint64_t)&v40, &v41);
    if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44[1].__r_.__value_.__l.__data_);
    v44[1] = v41;
  }
  else
  {
    std::string::operator=(&v44[1], &v40);
  }
  pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v44, &v41);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v41;
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = v41.__r_.__value_.__l.__size_ == 0;
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  else
  {
    v25 = SHIBYTE(v41.__r_.__value_.__r.__words[2]) == 0;
  }
  v33 = v39;
  if (v39)
  {
    v34 = (unsigned int *)(v39 + 8);
    do
    {
      v35 = __ldxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  if (*(char *)(a3 + 23) < 0 && v25)
  {
    operator delete(*(void **)a3);
    LOBYTE(v25) = 1;
  }
LABEL_38:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v25)
    goto LABEL_47;
}

void sub_20C107BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  if (a11)
  {
    v35 = a11 + 2;
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  if (a17 < 0)
    operator delete(__p);
  sub_20BE930F8((uint64_t)&a27);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(a1);
}

char *sub_20C107CB8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char *result;
  void **v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  std::string __p;
  uint64_t v15;
  uint64_t v16;

  result = sub_20C107F98((char *)a2, a1);
  v4 = (void **)(a2 + 24);
  do
  {
    v5 = *(unsigned __int8 *)(a2 + 47);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a2 + 32);
    if (!v5)
      break;
    memset(&__p, 0, sizeof(__p));
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(a2 + 24, (uint64_t)&__p, &v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = sub_20C0E9DAC(&v15);
    if (v7 & 1 | (unint64_t)v6
      && (v8 = sub_20BFCF6F4(&v15), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) & 1) != 0))
    {
      pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(a2, a2 + 24, &__p);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(std::string *)a2 = __p;
      v9 = sub_20BFCF6F4(&v15);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(&__p, v9, a2);
      if (*(char *)(a2 + 47) < 0)
        operator delete(*v4);
      *(_OWORD *)v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 40) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
    result = (char *)v16;
    if (v16)
    {
      v11 = (unsigned int *)(v16 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    }
  }
  while ((v10 & 1) != 0);
  return result;
}

void sub_20C107E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int *a17)
{
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a17)
  {
    v19 = a17 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)a17 + 8))(a17);
  }
  sub_20BE930F8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C107E68(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

void sub_20C107EE8(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string::size_type size;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfGetPathName(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&__p.__r_.__value_.__l.__data_, a2, a3);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = *(_QWORD *)(a2 + 16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C107F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C107F98(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C108010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::CreateExplicit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems(a2, a1);
}

void sub_20C108080(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiEC1Ev(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 8);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE16SetExplicitItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems(a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems(a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems(a4, a3);
}

void sub_20C1081A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 56);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE17SetPrependedItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 80);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE16SetAppendedItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 104);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE15SetDeletedItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE4SwapERS1_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::HasItem(uint64_t a1, __int32 *a2)
{
  __int32 v4;
  __int32 **v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;

  v4 = *a2;
  if (*(_BYTE *)a1)
  {
    v5 = (__int32 **)(a1 + 16);
    v6 = *(__int32 **)(a1 + 16);
    v7 = wmemchr(*(__int32 **)(a1 + 8), v4, ((uint64_t)v6 - *(_QWORD *)(a1 + 8)) >> 2);
    if (v7)
      v8 = v7;
    else
      v8 = v6;
    return v8 != *v5;
  }
  v10 = *(__int32 **)(a1 + 40);
  v11 = wmemchr(*(__int32 **)(a1 + 32), v4, ((uint64_t)v10 - *(_QWORD *)(a1 + 32)) >> 2);
  if (v11)
    v12 = v11;
  else
    v12 = v10;
  if (v12 == *(__int32 **)(a1 + 40))
  {
    v13 = *(__int32 **)(a1 + 64);
    v14 = wmemchr(*(__int32 **)(a1 + 56), *a2, ((uint64_t)v13 - *(_QWORD *)(a1 + 56)) >> 2);
    v15 = v14 ? v14 : v13;
    if (v15 == *(__int32 **)(a1 + 64))
    {
      v16 = *(__int32 **)(a1 + 88);
      v17 = wmemchr(*(__int32 **)(a1 + 80), *a2, ((uint64_t)v16 - *(_QWORD *)(a1 + 80)) >> 2);
      v18 = v17 ? v17 : v16;
      if (v18 == *(__int32 **)(a1 + 88))
      {
        v19 = *(__int32 **)(a1 + 112);
        v20 = wmemchr(*(__int32 **)(a1 + 104), *a2, ((uint64_t)v19 - *(_QWORD *)(a1 + 104)) >> 2);
        v21 = v20 ? v20 : v19;
        if (v21 == *(__int32 **)(a1 + 112))
        {
          v23 = *(__int32 **)(a1 + 136);
          v5 = (__int32 **)(a1 + 136);
          v22 = v23;
          v24 = wmemchr(*(v5 - 1), *a2, v23 - *(v5 - 1));
          if (v24)
            v8 = v24;
          else
            v8 = v22;
          return v8 != *v5;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(SdfLis"
              "tOpType) const [T = int]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetAppliedItems@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(a1, (int **)a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C108744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;
  void *v17;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(_QWORD *result, int **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *i;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;

  if (a2)
  {
    v5 = (uint64_t)result;
    v13 = (uint64_t)&v13;
    v14 = &v13;
    v15 = 0;
    if (*(_BYTE *)result)
    {
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys((uint64_t)result, 0, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(result[8] - result[7]) >> 2)
           + ((uint64_t)(result[11] - result[10]) >> 2)
           + ((uint64_t)(result[5] - result[4]) >> 2)
           + ((uint64_t)(result[14] - result[13]) >> 2)
           + ((uint64_t)(result[17] - result[16]) >> 2)))
      {
        return sub_20BEB422C(&v13);
      }
      sub_20C1256F0((uint64_t)&v13, &v13, *a2, a2[1]);
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      for (i = v14; i != &v13; i = (uint64_t *)i[1])
      {
        v16 = i + 2;
        sub_20C1257EC(&v10, (int *)i + 4, (uint64_t)&unk_20CAC184C, &v16)[5] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_DeleteKeys(v5, 2, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys(v5, 1, a3, &v13, (uint64_t)&v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_PrependKeys(v5, 4, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AppendKeys(v5, 5, a3, &v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_ReorderKeys(v5, 3, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    v7 = *a2;
    a2[1] = *a2;
    if (v14 == &v13)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = v14;
      do
      {
        ++v8;
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != &v13);
    }
    sub_20C1258AC((uint64_t)a2, (char *)v7, v14, &v13, v8);
    return sub_20BEB422C(&v13);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE15ApplyOperationsEPNSt3__16vectorIiNS2_9allocatorIiEEEERKNS2_8functionIFNS2_8optionalIiEENS_13SdfListOpTypeERKiEEE(result, a2, a3);
}

void sub_20C1089A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEB422C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    *result = a2;
    *((_QWORD *)result + 2) = *((_QWORD *)result + 1);
    *((_QWORD *)result + 5) = *((_QWORD *)result + 4);
    *((_QWORD *)result + 8) = *((_QWORD *)result + 7);
    *((_QWORD *)result + 11) = *((_QWORD *)result + 10);
    *((_QWORD *)result + 14) = *((_QWORD *)result + 13);
    *((_QWORD *)result + 17) = *((_QWORD *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 32);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE13SetAddedItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 128);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE15SetOrderedItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE8SetItemsERKNSt3__16vectorIiNS2_9allocatorIiEEEENS_13SdfListOpTypeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Clear(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit(uint64_t result)
{
  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIiE20ClearAndMakeExplicitEv(result);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  int *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(a1, a2);
  v12 = result[1];
  v36 = *result;
  v37 = v12;
  if (v36 != v12)
  {
    v13 = (uint64_t *)(a5 + 8);
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEE5D0(&v36, v10, v11);
        LODWORD(v38) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        v16 = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)v15 + 48))(v15, &v38, v14);
        v35 = v16;
        if ((v16 & 0xFF00000000) == 0)
          goto LABEL_29;
        v17 = v16;
        v18 = *v13;
        if (*v13)
        {
          v19 = a5 + 8;
          do
          {
            v20 = *(_DWORD *)(v18 + 32);
            v21 = v20 < (int)v16;
            if (v20 >= (int)v16)
              v22 = (uint64_t *)v18;
            else
              v22 = (uint64_t *)(v18 + 8);
            if (!v21)
              v19 = v18;
            v18 = *v22;
          }
          while (*v22);
          if ((uint64_t *)v19 != v13 && *(_DWORD *)(v19 + 32) <= (int)v16)
            goto LABEL_29;
        }
        v23 = operator new(0x18uLL);
        v23[4] = v17;
        v24 = *a4;
        *(_QWORD *)(v24 + 8) = v23;
        *a4 = (uint64_t)v23;
        *(_QWORD *)v23 = v24;
        *((_QWORD *)v23 + 1) = a4;
        ++a4[2];
        v38 = &v35;
        v25 = (int *)&v35;
        v26 = (uint64_t **)a5;
      }
      else
      {
        v27 = (uint64_t *)sub_20BFEE5D0(&v36, v10, v11);
        v28 = *v13;
        v29 = *(_DWORD *)v27;
        if (*v13)
        {
          v30 = a5 + 8;
          do
          {
            v31 = *(_DWORD *)(v28 + 32);
            v32 = v31 < v29;
            if (v31 >= v29)
              v33 = (uint64_t *)v28;
            else
              v33 = (uint64_t *)(v28 + 8);
            if (!v32)
              v30 = v28;
            v28 = *v33;
          }
          while (*v33);
          if ((uint64_t *)v30 != v13 && v29 >= *(_DWORD *)(v30 + 32))
            goto LABEL_29;
        }
        v23 = operator new(0x18uLL);
        v23[4] = v29;
        v34 = *a4;
        *(_QWORD *)(v34 + 8) = v23;
        *a4 = (uint64_t)v23;
        *(_QWORD *)v23 = v34;
        *((_QWORD *)v23 + 1) = a4;
        ++a4[2];
        v38 = v27;
        v26 = (uint64_t **)a5;
        v25 = (int *)v27;
      }
      sub_20C1257EC(v26, v25, (uint64_t)&unk_20CAC184C, (_DWORD **)&v38)[5] = (uint64_t *)v23;
LABEL_29:
      result = sub_20BFEE64C(&v36);
    }
    while (v36 != v37);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIiEES2_RKiEEEPNS3_4listIiNS3_9allocatorIiEEEEPNS3_3mapIiNS3_15__list_iteratorIiPvEENS3_4lessIiEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(a1, a2);
  v12 = result[1];
  v31 = *result;
  v32 = v12;
  if (v31 != v12)
  {
    v13 = a5 + 1;
    do
    {
      v14 = *(_QWORD *)(a3 + 24);
      v15 = (_DWORD *)sub_20BFEE5D0(&v31, v10, v11);
      v16 = v15;
      if (v14)
      {
        v33 = a2;
        v17 = *(_QWORD *)(a3 + 24);
        if (!v17)
          sub_20BE9E974();
        v18 = (*(uint64_t (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v17 + 48))(v17, &v33, v16);
        if ((v18 & 0xFF00000000) == 0)
          goto LABEL_28;
        v19 = *v13;
        if (!*v13)
          goto LABEL_28;
        v20 = a5 + 1;
        do
        {
          v21 = *((_DWORD *)v19 + 8);
          v22 = v21 < (int)v18;
          if (v21 >= (int)v18)
            v23 = v19;
          else
            v23 = v19 + 1;
          if (!v22)
            v20 = (uint64_t **)v19;
          v19 = (uint64_t *)*v23;
        }
        while (*v23);
        if (v20 == v13 || *((_DWORD *)v20 + 8) > (int)v18)
          goto LABEL_28;
      }
      else
      {
        v24 = *v13;
        if (!*v13)
          goto LABEL_28;
        v25 = *v15;
        v20 = a5 + 1;
        do
        {
          v26 = *((_DWORD *)v24 + 8);
          v27 = v26 < v25;
          if (v26 >= v25)
            v28 = v24;
          else
            v28 = v24 + 1;
          if (!v27)
            v20 = (uint64_t **)v24;
          v24 = (uint64_t *)*v28;
        }
        while (*v28);
        if (v20 == v13 || v25 < *((_DWORD *)v20 + 8))
          goto LABEL_28;
      }
      v29 = v20[5];
      v30 = *v29;
      *(_QWORD *)(v30 + 8) = v29[1];
      *(_QWORD *)v29[1] = v30;
      --*(_QWORD *)(a4 + 16);
      operator delete(v29);
      sub_20BE10B80(a5, (uint64_t *)v20);
      operator delete(v20);
LABEL_28:
      result = sub_20BFEE64C(&v31);
    }
    while (v31 != v32);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIiEES2_RKiEEEPNS3_4listIiNS3_9allocatorIiEEEEPNS3_3mapIiNS3_15__list_iteratorIiPvEENS3_4lessIiEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  int v34;
  BOOL v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(a1, a2);
  v11 = *(uint64_t **)result;
  v10 = *(uint64_t **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *(uint64_t **)result)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v45) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        v10 = (uint64_t *)((char *)v10 - 4);
        result = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v45, v10);
        v44 = result;
        if ((result & 0xFF00000000) != 0)
        {
          v14 = result;
          v15 = *(uint64_t **)(a4 + 8);
          v16 = *v12;
          if (!*v12)
            goto LABEL_16;
          v17 = a5 + 1;
          do
          {
            v18 = *((_DWORD *)v16 + 8);
            v19 = v18 < (int)result;
            if (v18 >= (int)result)
              v20 = v16;
            else
              v20 = v16 + 1;
            if (!v19)
              v17 = (uint64_t **)v16;
            v16 = (uint64_t *)*v20;
          }
          while (*v20);
          if (v17 != v12 && *((_DWORD *)v17 + 8) <= (int)result)
          {
            v23 = v17[5];
            if (v23 != v15)
            {
              v24 = (uint64_t *)v23[1];
              if (v23 != v24)
              {
                v25 = *v24;
                v26 = *v23;
                *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 8);
                **(_QWORD **)(v25 + 8) = v26;
                v27 = *v15;
                *(_QWORD *)(v27 + 8) = v23;
                *v23 = v27;
                *v15 = v25;
                *(_QWORD *)(v25 + 8) = v15;
              }
            }
          }
          else
          {
LABEL_16:
            v21 = operator new(0x18uLL);
            v21[4] = v14;
            v22 = *v15;
            *(_QWORD *)(v22 + 8) = v21;
            *(_QWORD *)v21 = v22;
            *v15 = (uint64_t)v21;
            *((_QWORD *)v21 + 1) = v15;
            ++*(_QWORD *)(a4 + 16);
            v45 = &v44;
            result = (uint64_t)sub_20C1257EC(a5, (int *)&v44, (uint64_t)&unk_20CAC184C, (_DWORD **)&v45);
            *(_QWORD *)(result + 40) = v21;
          }
        }
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *(uint64_t **)result)
  {
    v28 = a5 + 1;
    do
    {
      v30 = *((_DWORD *)v10 - 1);
      v10 = (uint64_t *)((char *)v10 - 4);
      v29 = v30;
      v31 = *(uint64_t **)(a4 + 8);
      v32 = *v28;
      if (!*v28)
        goto LABEL_34;
      v33 = a5 + 1;
      do
      {
        v34 = *((_DWORD *)v32 + 8);
        v35 = v34 < v29;
        if (v34 >= v29)
          v36 = v32;
        else
          v36 = v32 + 1;
        if (!v35)
          v33 = (uint64_t **)v32;
        v32 = (uint64_t *)*v36;
      }
      while (*v36);
      if (v33 != v28 && v29 >= *((_DWORD *)v33 + 8))
      {
        v39 = v33[5];
        if (v39 != v31)
        {
          v40 = (uint64_t *)v39[1];
          if (v39 != v40)
          {
            v41 = *v40;
            v42 = *v39;
            *(_QWORD *)(v42 + 8) = *(_QWORD *)(v41 + 8);
            **(_QWORD **)(v41 + 8) = v42;
            v43 = *v31;
            *(_QWORD *)(v43 + 8) = v39;
            *v39 = v43;
            *v31 = v41;
            *(_QWORD *)(v41 + 8) = v31;
          }
        }
      }
      else
      {
LABEL_34:
        v37 = operator new(0x18uLL);
        v37[4] = v29;
        v38 = *v31;
        *(_QWORD *)(v38 + 8) = v37;
        *(_QWORD *)v37 = v38;
        *v31 = (uint64_t)v37;
        *((_QWORD *)v37 + 1) = v31;
        ++*(_QWORD *)(a4 + 16);
        v45 = v10;
        result = (uint64_t)sub_20C1257EC(a5, (int *)v10, (uint64_t)&unk_20CAC184C, (_DWORD **)&v45);
        *(_QWORD *)(result + 40) = v37;
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIiEES2_RKiEEEPNS3_4listIiNS3_9allocatorIiEEEEPNS3_3mapIiNS3_15__list_iteratorIiPvEENS3_4lessIiEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  int v29;
  uint64_t **v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(a1, a2);
  v10 = *(uint64_t **)result;
  v11 = *(uint64_t **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (*(uint64_t **)result != v11)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v42) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        result = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v42, v10);
        v41 = result;
        if ((result & 0xFF00000000) != 0)
        {
          v14 = result;
          v15 = *v12;
          if (!*v12)
            goto LABEL_16;
          v16 = a5 + 1;
          do
          {
            v17 = *((_DWORD *)v15 + 8);
            v18 = v17 < (int)result;
            if (v17 >= (int)result)
              v19 = v15;
            else
              v19 = v15 + 1;
            if (!v18)
              v16 = (uint64_t **)v15;
            v15 = (uint64_t *)*v19;
          }
          while (*v19);
          if (v16 != v12 && *((_DWORD *)v16 + 8) <= (int)result)
          {
            v22 = v16[5];
            if (v22 != a4)
            {
              v23 = (uint64_t *)v22[1];
              if (v22 != v23)
              {
                v24 = *v23;
                v25 = *v22;
                *(_QWORD *)(v25 + 8) = *(_QWORD *)(v24 + 8);
                **(_QWORD **)(v24 + 8) = v25;
                v26 = *a4;
                *(_QWORD *)(v26 + 8) = v22;
                *v22 = v26;
                *a4 = v24;
                *(_QWORD *)(v24 + 8) = a4;
              }
            }
          }
          else
          {
LABEL_16:
            v20 = operator new(0x18uLL);
            v20[4] = v14;
            v21 = *a4;
            *(_QWORD *)(v21 + 8) = v20;
            *a4 = (uint64_t)v20;
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = a4;
            ++a4[2];
            v42 = &v41;
            result = (uint64_t)sub_20C1257EC(a5, (int *)&v41, (uint64_t)&unk_20CAC184C, (_DWORD **)&v42);
            *(_QWORD *)(result + 40) = v20;
          }
        }
        v10 = (uint64_t *)((char *)v10 + 4);
      }
      while (v10 != v11);
    }
  }
  else if (*(uint64_t **)result != v11)
  {
    v27 = a5 + 1;
    do
    {
      v28 = *v27;
      v29 = *(_DWORD *)v10;
      if (!*v27)
        goto LABEL_34;
      v30 = a5 + 1;
      do
      {
        v31 = *((_DWORD *)v28 + 8);
        v32 = v31 < v29;
        if (v31 >= v29)
          v33 = v28;
        else
          v33 = v28 + 1;
        if (!v32)
          v30 = (uint64_t **)v28;
        v28 = (uint64_t *)*v33;
      }
      while (*v33);
      if (v30 != v27 && v29 >= *((_DWORD *)v30 + 8))
      {
        v36 = v30[5];
        if (v36 != a4)
        {
          v37 = (uint64_t *)v36[1];
          if (v36 != v37)
          {
            v38 = *v37;
            v39 = *v36;
            *(_QWORD *)(v39 + 8) = *(_QWORD *)(v38 + 8);
            **(_QWORD **)(v38 + 8) = v39;
            v40 = *a4;
            *(_QWORD *)(v40 + 8) = v36;
            *v36 = v40;
            *a4 = v38;
            *(_QWORD *)(v38 + 8) = a4;
          }
        }
      }
      else
      {
LABEL_34:
        v34 = operator new(0x18uLL);
        v34[4] = v29;
        v35 = *a4;
        *(_QWORD *)(v35 + 8) = v34;
        *a4 = (uint64_t)v34;
        *(_QWORD *)v34 = v35;
        *((_QWORD *)v34 + 1) = a4;
        ++a4[2];
        v42 = v10;
        result = (uint64_t)sub_20C1257EC(a5, (int *)v10, (uint64_t)&unk_20CAC184C, (_DWORD **)&v42);
        *(_QWORD *)(result + 40) = v34;
      }
      v10 = (uint64_t *)((char *)v10 + 4);
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIiEES2_RKiEEEPNS3_4listIiNS3_9allocatorIiEEEEPNS3_3mapIiNS3_15__list_iteratorIiPvEENS3_4lessIiEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _DWORD *v14;
  int v15;
  int *v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  _DWORD *v20;
  void *v21;
  _DWORD *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  _QWORD *v44;
  __int128 *p_i;
  int v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 i;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58[2];
  void *__p[2];
  char *v60;
  int v61;

  __p[0] = 0;
  __p[1] = 0;
  v60 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  for (i = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(a1, a2);
        (_QWORD)i != *((_QWORD *)&i + 1);
        sub_20BFEE64C(&i))
  {
    if (!*(_QWORD *)(a3 + 24))
    {
      v16 = (int *)sub_20BFEE5D0((uint64_t *)&i, v9, v10);
      sub_20C12637C(&v57, v16, v16);
      if ((v17 & 1) == 0)
        continue;
      v19 = (_DWORD *)sub_20BFEE5D0((uint64_t *)&i, v17, v18);
      v20 = v19;
      v14 = __p[1];
      if (__p[1] >= v60)
      {
        v22 = __p[0];
        v28 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          sub_20BDDF694();
        v30 = v60 - (char *)__p[0];
        if ((v60 - (char *)__p[0]) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v29;
        if (v26)
        {
          v27 = (char *)sub_20BDE1330((uint64_t)&v60, v26);
          v22 = __p[0];
          v14 = __p[1];
        }
        else
        {
          v27 = 0;
        }
        v31 = &v27[4 * v28];
        *(_DWORD *)v31 = *v20;
        v21 = v31 + 4;
        while (v14 != v22)
        {
          v33 = *--v14;
          *((_DWORD *)v31 - 1) = v33;
          v31 -= 4;
        }
        goto LABEL_37;
      }
      v15 = *v19;
LABEL_12:
      *v14 = v15;
      v21 = v14 + 1;
LABEL_39:
      __p[1] = v21;
      continue;
    }
    v11 = sub_20BFEE5D0((uint64_t *)&i, v9, v10);
    v61 = a2;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      sub_20BE9E974();
    *(_QWORD *)&v54 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(v12, &v61, v11);
    if ((v54 & 0xFF00000000) != 0)
    {
      sub_20C12637C(&v57, (int *)&v54, &v54);
      if ((v13 & 1) != 0)
      {
        v14 = __p[1];
        if (__p[1] < v60)
        {
          v15 = v54;
          goto LABEL_12;
        }
        v22 = __p[0];
        v23 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          sub_20BDDF694();
        v25 = v60 - (char *)__p[0];
        if ((v60 - (char *)__p[0]) >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_20BDE1330((uint64_t)&v60, v26);
          v22 = __p[0];
          v14 = __p[1];
        }
        else
        {
          v27 = 0;
        }
        v31 = &v27[4 * v23];
        *(_DWORD *)v31 = v54;
        v21 = v31 + 4;
        while (v14 != v22)
        {
          v32 = *--v14;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
LABEL_37:
        __p[0] = v31;
        __p[1] = v21;
        v60 = &v27[4 * v26];
        if (v22)
          operator delete(v22);
        goto LABEL_39;
      }
    }
  }
  if (__p[0] != __p[1])
  {
    *(_QWORD *)&i = &i;
    *((_QWORD *)&i + 1) = &i;
    v56 = 0;
    sub_20BEDEA80(&i, a4);
    v54 = *(_OWORD *)__p;
    v36 = (_QWORD *)(a5 + 8);
    while ((_QWORD)v54 != *((_QWORD *)&v54 + 1))
    {
      v37 = (int *)sub_20C10A9A0((uint64_t *)&v54, v34, v35);
      v38 = *v36;
      if (*v36)
      {
        v39 = *v37;
        v40 = v36;
        do
        {
          v41 = *(_DWORD *)(v38 + 32);
          v42 = v41 < v39;
          if (v41 >= v39)
            v43 = (uint64_t *)v38;
          else
            v43 = (uint64_t *)(v38 + 8);
          if (!v42)
            v40 = (_QWORD *)v38;
          v38 = *v43;
        }
        while (*v43);
        if (v40 != v36 && v39 >= *((_DWORD *)v40 + 8))
        {
          v44 = (_QWORD *)v40[5];
          p_i = &i;
          if ((__int128 *)v44[1] != &i)
          {
            p_i = (__int128 *)v44[1];
            do
            {
              if (v58[0])
              {
                v46 = *((_DWORD *)p_i + 4);
                v47 = v58[0];
                do
                {
                  v48 = *((_DWORD *)v47 + 7);
                  if (v46 >= v48)
                  {
                    if (v48 >= v46)
                      goto LABEL_64;
                    ++v47;
                  }
                  v47 = (_QWORD *)*v47;
                }
                while (v47);
              }
              p_i = (__int128 *)*((_QWORD *)p_i + 1);
            }
            while (p_i != &i);
            p_i = &i;
          }
LABEL_64:
          if (!v56)
            goto LABEL_69;
          sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&i, v44, p_i);
        }
      }
      sub_20C10AA1C(&v54);
    }
    v49 = v56;
    if (v56)
    {
      v50 = (uint64_t *)a4[1];
      v51 = i;
      v52 = **((_QWORD **)&i + 1);
      *(_QWORD *)(v52 + 8) = *(_QWORD *)(i + 8);
      **(_QWORD **)(v51 + 8) = v52;
      v53 = *v50;
      *(_QWORD *)(v53 + 8) = *((_QWORD *)&v51 + 1);
      **((_QWORD **)&v51 + 1) = v53;
      *v50 = v51;
      *(_QWORD *)(v51 + 8) = v50;
      a4[2] += v49;
      v56 = 0;
    }
LABEL_69:
    sub_20BEB422C(&i);
  }
  sub_20BE6100C((uint64_t)&v57, v58[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIiEES2_RKiEEEPNS3_4listIiNS3_9allocatorIiEEEEPNS3_3mapIiNS3_15__list_iteratorIiPvEENS3_4lessIiEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1097A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_20BEB422C(&a11);
  sub_20BE6100C((uint64_t)&a14, a15);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  __int32 *v8;
  __int32 *i;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int32 *v22;
  __int32 v23;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  __int32 *v27;
  __int32 *v28;
  char *v29;
  void *v30;
  __int32 *v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  __int32 *v35;
  char *v36;
  void *v37;
  __int32 *v38;
  uint64_t v39;
  void *__dst;
  __int32 *v41;
  uint64_t v42;
  void *__p;
  __int32 *v44;
  __int32 *v45;
  uint64_t v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C031ADC((uint64_t)a3, (uint64_t)a1);
    a3[152] = 1;
    return;
  }
  if (a1[4] != a1[5] || a1[16] != a1[17])
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    __p = 0;
    v44 = 0;
    v45 = 0;
    sub_20BE8B214(&__p, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    v48[0] = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(a1, (int **)&__p, (uint64_t)&v46);
    v6 = (uint64_t *)v48[0];
    if (v48[0] == &v46)
    {
      v7 = 4;
      v6 = &v46;
    }
    else
    {
      if (!v48[0])
      {
LABEL_51:
        LOBYTE(v46) = 0;
        *(_OWORD *)v47 = 0u;
        *(_OWORD *)v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems((uint64_t)&v46, (uint64_t)&__p);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v46);
        if (*((_QWORD *)&v54 + 1))
        {
          *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
          operator delete(*((void **)&v54 + 1));
        }
        if ((_QWORD)v53)
        {
          *((_QWORD *)&v53 + 1) = v53;
          operator delete((void *)v53);
        }
        if (*((_QWORD *)&v51 + 1))
        {
          *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
          operator delete(*((void **)&v51 + 1));
        }
        if ((_QWORD)v50)
        {
          *((_QWORD *)&v50 + 1) = v50;
          operator delete((void *)v50);
        }
        if (v48[1])
        {
          *(void **)&v49 = v48[1];
          operator delete(v48[1]);
        }
        v30 = v47[0];
        if (!v47[0])
          goto LABEL_64;
        v47[1] = v47[0];
        goto LABEL_63;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_51;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a2 + 128) != *(_QWORD *)(a2 + 136))
  {
LABEL_5:
    *a3 = 0;
    a3[152] = 0;
    return;
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  sub_20BE8B214(&__p, *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  __dst = 0;
  v41 = 0;
  v42 = 0;
  sub_20BE8B214(&__dst, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20BE8B214(&v37, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v8 = (__int32 *)a1[13];
  for (i = (__int32 *)a1[14]; v8 != i; ++v8)
  {
    v10 = sub_20C109EF0((__int32 *)__dst, v41, v8);
    if (v41 != v10)
      v41 = v10;
    v11 = sub_20C109EF0((__int32 *)v37, v38, v8);
    if (v38 != v11)
      v38 = v11;
    v12 = v44;
    v13 = wmemchr((__int32 *)__p, *v8, ((char *)v44 - (_BYTE *)__p) >> 2);
    if (v13)
      v14 = v13;
    else
      v14 = v12;
    if (v14 == v44)
    {
      if (v14 >= v45)
      {
        v16 = (__int32 *)__p;
        v17 = ((char *)v44 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_20BDDF694();
        v19 = (char *)v45 - (_BYTE *)__p;
        if (((char *)v45 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20BDE1330((uint64_t)&v45, v20);
          v16 = (__int32 *)__p;
          v14 = v44;
        }
        else
        {
          v21 = 0;
        }
        v22 = (__int32 *)&v21[4 * v17];
        *v22 = *v8;
        v15 = v22 + 1;
        while (v14 != v16)
        {
          v23 = *--v14;
          *--v22 = v23;
        }
        __p = v22;
        v44 = v15;
        v45 = (__int32 *)&v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = *v8;
        v15 = v14 + 1;
      }
      v44 = v15;
    }
  }
  v24 = (__int32 *)a1[7];
  v25 = (__int32 *)a1[8];
  if (v24 == v25)
  {
    v29 = (char *)a1[7];
  }
  else
  {
    do
    {
      v26 = sub_20C109EF0((__int32 *)__p, v44, v24);
      if (v44 != v26)
        v44 = v26;
      v27 = sub_20C109EF0((__int32 *)__dst, v41, v24);
      if (v41 != v27)
        v41 = v27;
      v28 = sub_20C109EF0((__int32 *)v37, v38, v24);
      if (v38 != v28)
        v38 = v28;
      ++v24;
    }
    while (v24 != v25);
    v29 = (char *)a1[7];
    v24 = (__int32 *)a1[8];
  }
  sub_20C125B2C((uint64_t)&__dst, (uint64_t)__dst, v29, (char *)v24, ((char *)v24 - v29) >> 2);
  v31 = (__int32 *)a1[10];
  v32 = (__int32 *)a1[11];
  if (v31 == v32)
  {
    v35 = v38;
    v36 = (char *)a1[10];
  }
  else
  {
    do
    {
      v33 = sub_20C109EF0((__int32 *)__p, v44, v31);
      if (v44 != v33)
        v44 = v33;
      v34 = sub_20C109EF0((__int32 *)__dst, v41, v31);
      if (v41 != v34)
        v41 = v34;
      v35 = sub_20C109EF0((__int32 *)v37, v38, v31);
      if (v38 != v35)
        v38 = v35;
      ++v31;
    }
    while (v31 != v32);
    v36 = (char *)a1[10];
    v31 = (__int32 *)a1[11];
  }
  sub_20C125B2C((uint64_t)&v37, (uint64_t)v35, v36, (char *)v31, ((char *)v31 - v36) >> 2);
  LOBYTE(v46) = 0;
  *(_OWORD *)v47 = 0u;
  *(_OWORD *)v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems((uint64_t)&v46, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems((uint64_t)&v46, (uint64_t)&__dst);
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems((uint64_t)&v46, (uint64_t)&v37);
  sub_20C1247A0((uint64_t)a3, (uint64_t)&v46);
  sub_20C031968(&v46);
  if (v37)
  {
    v38 = (__int32 *)v37;
    operator delete(v37);
  }
  v30 = __dst;
  if (__dst)
  {
    v41 = (__int32 *)__dst;
LABEL_63:
    operator delete(v30);
  }
LABEL_64:
  if (__p)
  {
    v44 = (__int32 *)__p;
    operator delete(__p);
  }
}

void sub_20C109E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__int32 *sub_20C109EF0(__int32 *a1, __int32 *a2, __int32 *a3)
{
  __int32 *result;
  __int32 *v6;

  result = wmemchr(a1, *a3, a2 - a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3)
        *result++ = *v6;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ModifyOperations(int **a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C10A018(a2, a1 + 1, a3);
  v7 = v6 | sub_20C10A018(a2, a1 + 4, a3);
  v8 = sub_20C10A018(a2, a1 + 7, a3);
  v9 = v7 | v8 | sub_20C10A018(a2, a1 + 10, a3);
  v10 = sub_20C10A018(a2, a1 + 13, a3);
  return v9 | v10 | sub_20C10A018(a2, a1 + 16, a3);
}

uint64_t sub_20C10A018(uint64_t a1, int **a2, int a3)
{
  int *v3;
  int *v4;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  __int128 v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  void *v39[2];
  __int128 v40;
  void *__p[2];
  _QWORD v42[2];

  __p[0] = 0;
  __p[1] = 0;
  v42[0] = 0;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    goto LABEL_49;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    v38 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, v3);
    v10 = BYTE4(v38);
    if (a3
      && BYTE4(v38)
      && (sub_20C125D38((uint64_t *)v39, (int *)&v38), v10 = BYTE4(v38), (v11 & 1) == 0)
      && BYTE4(v38)
      || !v10)
    {
      v8 = 1;
      goto LABEL_46;
    }
    v12 = v38;
    v13 = (char *)__p[1];
    if ((_DWORD)v38 == *v3)
    {
      if (__p[1] >= (void *)v42[0])
      {
        v16 = (char *)__p[0];
        v17 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          goto LABEL_58;
        v19 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20BDE1330((uint64_t)v42, v20);
          v16 = (char *)__p[0];
          v13 = (char *)__p[1];
          v12 = *v3;
        }
        else
        {
          v21 = 0;
        }
        v28 = &v21[4 * v17];
        *(_DWORD *)v28 = v12;
        v15 = v28 + 4;
        while (v13 != v16)
        {
          v29 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v28 - 1) = v29;
          v28 -= 4;
        }
        __p[0] = v28;
        __p[1] = v15;
        v42[0] = &v21[4 * v20];
        if (v16)
          operator delete(v16);
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      v14 = v13 + 4;
    }
    else
    {
      if (__p[1] >= (void *)v42[0])
      {
        v22 = (char *)__p[0];
        v23 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
LABEL_58:
          sub_20BDDF694();
        v25 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_20BDE1330((uint64_t)v42, v26);
          v22 = (char *)__p[0];
          v13 = (char *)__p[1];
          v12 = v38;
        }
        else
        {
          v27 = 0;
        }
        v30 = &v27[4 * v23];
        *(_DWORD *)v30 = v12;
        v15 = v30 + 4;
        while (v13 != v22)
        {
          v31 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        __p[0] = v30;
        __p[1] = v15;
        v42[0] = &v27[4 * v26];
        if (v22)
          operator delete(v22);
        v8 = 1;
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      v14 = v13 + 4;
      v8 = 1;
    }
    v15 = v14;
LABEL_45:
    __p[1] = v15;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) != 0)
  {
    v32 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_OWORD *)__p = v32;
    v33 = a2[2];
    a2[2] = (int *)v42[0];
    v42[0] = v33;
    v34 = 1;
    goto LABEL_50;
  }
LABEL_49:
  v34 = 0;
LABEL_50:
  v35 = *((_QWORD *)&v40 + 1);
  *((_QWORD *)&v40 + 1) = 0;
  if (v35)
  {
    v36 = (void *)sub_20BEB3FA4(v35);
    operator delete(v36);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v34;
}

void sub_20C10A2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_20C125EA8((uint64_t)&a11);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ReplaceOperations(_BYTE *a1, int a2, unint64_t a3, uint64_t a4, char **a5)
{
  BOOL v10;
  uint64_t Items;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int64_t v20;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *__p;
  char *v28;
  uint64_t v29;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (!v10 && (a4 || *a5 == a5[1]))
    return 0;
  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems((uint64_t)a1, a2);
  v28 = 0;
  v29 = 0;
  __p = 0;
  sub_20BE8B214(&__p, *(const void **)Items, *(_QWORD *)(Items + 8), (uint64_t)(*(_QWORD *)(Items + 8) - *(_QWORD *)Items) >> 2);
  v12 = __p;
  v13 = (v28 - (_BYTE *)__p) >> 2;
  if (v13 >= a3)
  {
    if (a4 + a3 <= v13)
    {
      v15 = *a5;
      v16 = a5[1];
      v17 = (v16 - *a5) >> 2;
      if (v17 == a4)
      {
        if (v16 != v15)
          memmove((char *)__p + 4 * a3, *a5, v16 - *a5);
      }
      else
      {
        if (a4)
        {
          v18 = (char *)__p + 4 * a3;
          v19 = &v18[4 * a4];
          v20 = v28 - v19;
          if (v28 != v19)
          {
            memmove((char *)__p + 4 * a3, v19, v28 - v19);
            v12 = __p;
            v15 = *a5;
            v16 = a5[1];
            v17 = (v16 - *a5) >> 2;
          }
          v28 = &v18[v20];
        }
        sub_20C125B2C((uint64_t)&__p, (uint64_t)v12 + 4 * a3, v15, v16, v17);
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetItems((uint64_t)a1, (uint64_t)&__p, a2);
      v14 = 1;
      goto LABEL_23;
    }
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 698;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ReplaceOperations(const SdfListOpType, size_t, size_t, "
          "const ItemVector &) [T = int]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v28 - (_BYTE *)__p) >> 2);
  }
  else
  {
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 693;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ReplaceOperations(const SdfListOpType, size_t, size_t, "
          "const ItemVector &) [T = int]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v28 - (_BYTE *)__p) >> 2);
  }
  v14 = 0;
LABEL_23:
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
  return v14;
}

void sub_20C10A4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  int **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  void **p_p;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20[2];
  uint64_t v21;
  uint64_t *v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems(a1, a2 + 8);
  Items = (int **)pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(a1, a3);
  sub_20C126274(&v21, *Items, Items[1]);
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  for (i = v22; i != &v21; i = (uint64_t *)i[1])
  {
    __p = i + 2;
    sub_20C1257EC(&v19, (int *)i + 4, (uint64_t)&unk_20CAC184C, (_DWORD **)&__p)[5] = i;
  }
  switch(a3)
  {
    case 1:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys(a2, 1, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 2:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys(a2, 2, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 3:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
      p_p = v26;
      if (v26 == &__p)
      {
        v14 = 4;
        p_p = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_15;
        v14 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*p_p + v14))(p_p, v11, v12);
LABEL_15:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_ReorderKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
LABEL_16:
      v15 = v26;
      if (v26 == &__p)
      {
        v16 = 4;
        v15 = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_21;
        v16 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*v15 + v16))(v15, v8, v9);
LABEL_21:
      v24 = 0;
      v25 = 0;
      __p = 0;
      if (v22 == &v21)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = v22;
        do
        {
          ++v17;
          v18 = (uint64_t *)v18[1];
        }
        while (v18 != &v21);
      }
      sub_20C126308((char *)&__p, (uint64_t)v22, (uint64_t)&v21, v17);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetItems(a1, (uint64_t)&__p, a3);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      sub_20BE6100C((uint64_t)&v19, v20[0]);
      result = (char *)sub_20BEB422C(&v21);
      break;
    case 4:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_PrependKeys(a2, 4, (uint64_t)&__p, (uint64_t)&v21, &v19);
      goto LABEL_16;
    case 5:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AppendKeys(a2, 5, (uint64_t)&__p, &v21, &v19);
      goto LABEL_16;
    default:
      goto LABEL_21;
  }
  return result;
}

void sub_20C10A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19)
{
  void **v19;
  void **p_p;
  uint64_t v22;

  p_p = a19;
  if (a19 == v19)
  {
    v22 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*((void (**)(void))*p_p + v22))();
LABEL_6:
  sub_20BE6100C((uint64_t)&a9, a10);
  sub_20BEB422C(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  const void *v18;
  size_t v19;
  const void *v20;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v5 = a1 + 1;
  v4 = (const void *)a1[1];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 1;
  v7 = (const void *)a2[1];
  if (v6 != v8[1] - (_QWORD)v7)
    return 0;
  if (memcmp(v4, v7, v6))
    return 0;
  v9 = (const void *)a1[4];
  v10 = a1[5] - (_QWORD)v9;
  v11 = (const void *)a2[4];
  if (v10 != a2[5] - (_QWORD)v11)
    return 0;
  if (memcmp(v9, v11, v10))
    return 0;
  v12 = (const void *)a1[7];
  v13 = a1[8] - (_QWORD)v12;
  v14 = (const void *)a2[7];
  if (v13 != a2[8] - (_QWORD)v14)
    return 0;
  if (!memcmp(v12, v14, v13)
    && (v15 = (const void *)a1[10], v16 = a1[11] - (_QWORD)v15, v17 = (const void *)a2[10], v16 == a2[11] - (_QWORD)v17)
    && !memcmp(v15, v17, v16)
    && (v18 = (const void *)a1[13], v19 = a1[14] - (_QWORD)v18, v20 = (const void *)a2[13], v19 == a2[14] - (_QWORD)v20)
    && !memcmp(v18, v20, v19))
  {
    return sub_20C10A94C((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIiEeqERKS1_(a1, a2);
}

BOOL sub_20C10A94C(uint64_t a1, uint64_t a2)
{
  const void *v2;
  size_t v4;
  const void *v5;

  v2 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8) - (_QWORD)v2;
  v5 = *(const void **)a2;
  return v4 == *(_QWORD *)(a2 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==(a1, a2);
}

uint64_t sub_20C10A9A0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<int>>::operator*() [T = std::vector<int>,"
            " Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C10AA14()
{
  JUMPOUT(0x20C10A9C4);
}

_QWORD *sub_20C10AA1C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<int>>::operator++() [T = st"
            "d::vector<int>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<int>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CF0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = int]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C126434(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C126434(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C126434(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C126434(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C126434(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C126434(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsIiEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEES6_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C10ACE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::CreateExplicit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems(a2, a1);
}

void sub_20C10ADA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjEC1Ev(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 8);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE16SetExplicitItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems(a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems(a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems(a4, a3);
}

void sub_20C10AEC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 56);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE17SetPrependedItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 80);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE16SetAppendedItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 104);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE15SetDeletedItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE4SwapERS1_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::HasItem(uint64_t a1, __int32 *a2)
{
  __int32 v4;
  __int32 **v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;

  v4 = *a2;
  if (*(_BYTE *)a1)
  {
    v5 = (__int32 **)(a1 + 16);
    v6 = *(__int32 **)(a1 + 16);
    v7 = wmemchr(*(__int32 **)(a1 + 8), v4, ((uint64_t)v6 - *(_QWORD *)(a1 + 8)) >> 2);
    if (v7)
      v8 = v7;
    else
      v8 = v6;
    return v8 != *v5;
  }
  v10 = *(__int32 **)(a1 + 40);
  v11 = wmemchr(*(__int32 **)(a1 + 32), v4, ((uint64_t)v10 - *(_QWORD *)(a1 + 32)) >> 2);
  if (v11)
    v12 = v11;
  else
    v12 = v10;
  if (v12 == *(__int32 **)(a1 + 40))
  {
    v13 = *(__int32 **)(a1 + 64);
    v14 = wmemchr(*(__int32 **)(a1 + 56), *a2, ((uint64_t)v13 - *(_QWORD *)(a1 + 56)) >> 2);
    v15 = v14 ? v14 : v13;
    if (v15 == *(__int32 **)(a1 + 64))
    {
      v16 = *(__int32 **)(a1 + 88);
      v17 = wmemchr(*(__int32 **)(a1 + 80), *a2, ((uint64_t)v16 - *(_QWORD *)(a1 + 80)) >> 2);
      v18 = v17 ? v17 : v16;
      if (v18 == *(__int32 **)(a1 + 88))
      {
        v19 = *(__int32 **)(a1 + 112);
        v20 = wmemchr(*(__int32 **)(a1 + 104), *a2, ((uint64_t)v19 - *(_QWORD *)(a1 + 104)) >> 2);
        v21 = v20 ? v20 : v19;
        if (v21 == *(__int32 **)(a1 + 112))
        {
          v23 = *(__int32 **)(a1 + 136);
          v5 = (__int32 **)(a1 + 136);
          v22 = v23;
          v24 = wmemchr(*(v5 - 1), *a2, v23 - *(v5 - 1));
          if (v24)
            v8 = v24;
          else
            v8 = v22;
          return v8 != *v5;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetIte"
              "ms(SdfListOpType) const [T = unsigned int]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetAppliedItems@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(a1, (int **)a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C10B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;
  void *v17;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(_QWORD *result, int **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *i;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;

  if (a2)
  {
    v5 = (uint64_t)result;
    v13 = (uint64_t)&v13;
    v14 = &v13;
    v15 = 0;
    if (*(_BYTE *)result)
    {
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys((uint64_t)result, 0, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(result[8] - result[7]) >> 2)
           + ((uint64_t)(result[11] - result[10]) >> 2)
           + ((uint64_t)(result[5] - result[4]) >> 2)
           + ((uint64_t)(result[14] - result[13]) >> 2)
           + ((uint64_t)(result[17] - result[16]) >> 2)))
      {
        return sub_20BEB422C(&v13);
      }
      sub_20C1256F0((uint64_t)&v13, &v13, *a2, a2[1]);
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      for (i = v14; i != &v13; i = (uint64_t *)i[1])
      {
        v16 = i + 2;
        sub_20C126558(&v10, (unsigned int *)i + 4, (uint64_t)&unk_20CAC184C, &v16)[5] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_DeleteKeys(v5, 2, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys(v5, 1, a3, &v13, (uint64_t)&v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_PrependKeys(v5, 4, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AppendKeys(v5, 5, a3, &v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_ReorderKeys(v5, 3, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    v7 = *a2;
    a2[1] = *a2;
    if (v14 == &v13)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = v14;
      do
      {
        ++v8;
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != &v13);
    }
    sub_20C1258AC((uint64_t)a2, (char *)v7, v14, &v13, v8);
    return sub_20BEB422C(&v13);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE15ApplyOperationsEPNSt3__16vectorIjNS2_9allocatorIjEEEERKNS2_8functionIFNS2_8optionalIjEENS_13SdfListOpTypeERKjEEE(result, a2, a3);
}

void sub_20C10B6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEB422C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    *result = a2;
    *((_QWORD *)result + 2) = *((_QWORD *)result + 1);
    *((_QWORD *)result + 5) = *((_QWORD *)result + 4);
    *((_QWORD *)result + 8) = *((_QWORD *)result + 7);
    *((_QWORD *)result + 11) = *((_QWORD *)result + 10);
    *((_QWORD *)result + 14) = *((_QWORD *)result + 13);
    *((_QWORD *)result + 17) = *((_QWORD *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 32);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE13SetAddedItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 128);
  if (result != (char *)a2)
    return sub_20BE8B37C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE15SetOrderedItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE8SetItemsERKNSt3__16vectorIjNS2_9allocatorIjEEEENS_13SdfListOpTypeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Clear(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit(uint64_t result)
{
  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIjE20ClearAndMakeExplicitEv(result);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(a1, a2);
  v12 = result[1];
  v36 = *result;
  v37 = v12;
  if (v36 != v12)
  {
    v13 = (uint64_t *)(a5 + 8);
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEEDA8(&v36, v10, v11);
        LODWORD(v38) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        v16 = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)v15 + 48))(v15, &v38, v14);
        v35 = v16;
        if ((v16 & 0xFF00000000) == 0)
          goto LABEL_31;
        v17 = v16;
        v18 = *v13;
        if (*v13)
        {
          v19 = a5 + 8;
          do
          {
            v20 = *(_DWORD *)(v18 + 32);
            v21 = v20 >= v16;
            if (v20 >= v16)
              v22 = (uint64_t *)v18;
            else
              v22 = (uint64_t *)(v18 + 8);
            if (v21)
              v19 = v18;
            v18 = *v22;
          }
          while (*v22);
          if ((uint64_t *)v19 != v13 && *(_DWORD *)(v19 + 32) <= v16)
            goto LABEL_31;
        }
        v23 = operator new(0x18uLL);
        v23[4] = v17;
        v24 = *a4;
        *(_QWORD *)(v24 + 8) = v23;
        *a4 = (uint64_t)v23;
        *(_QWORD *)v23 = v24;
        *((_QWORD *)v23 + 1) = a4;
        ++a4[2];
        v38 = &v35;
        v25 = (unsigned int *)&v35;
        v26 = (uint64_t **)a5;
      }
      else
      {
        v27 = (uint64_t *)sub_20BFEEDA8(&v36, v10, v11);
        v28 = *v13;
        v29 = *(_DWORD *)v27;
        if (*v13)
        {
          v30 = a5 + 8;
          do
          {
            v31 = *(_DWORD *)(v28 + 32);
            v32 = v31 >= v29;
            if (v31 >= v29)
              v33 = (uint64_t *)v28;
            else
              v33 = (uint64_t *)(v28 + 8);
            if (v32)
              v30 = v28;
            v28 = *v33;
          }
          while (*v33);
          if ((uint64_t *)v30 != v13 && v29 >= *(_DWORD *)(v30 + 32))
            goto LABEL_31;
        }
        v23 = operator new(0x18uLL);
        v23[4] = v29;
        v34 = *a4;
        *(_QWORD *)(v34 + 8) = v23;
        *a4 = (uint64_t)v23;
        *(_QWORD *)v23 = v34;
        *((_QWORD *)v23 + 1) = a4;
        ++a4[2];
        v38 = v27;
        v26 = (uint64_t **)a5;
        v25 = (unsigned int *)v27;
      }
      sub_20C126558(v26, v25, (uint64_t)&unk_20CAC184C, (_DWORD **)&v38)[5] = (uint64_t *)v23;
LABEL_31:
      result = sub_20BFEEE24(&v36);
    }
    while (v36 != v37);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIjEES2_RKjEEEPNS3_4listIjNS3_9allocatorIjEEEEPNS3_3mapIjNS3_15__list_iteratorIjPvEENS3_4lessIjEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(a1, a2);
  v12 = result[1];
  v31 = *result;
  v32 = v12;
  if (v31 != v12)
  {
    v13 = a5 + 1;
    do
    {
      v14 = *(_QWORD *)(a3 + 24);
      v15 = (_DWORD *)sub_20BFEEDA8(&v31, v10, v11);
      v16 = v15;
      if (v14)
      {
        v33 = a2;
        v17 = *(_QWORD *)(a3 + 24);
        if (!v17)
          sub_20BE9E974();
        v18 = (*(uint64_t (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v17 + 48))(v17, &v33, v16);
        if ((v18 & 0xFF00000000) == 0)
          goto LABEL_30;
        v19 = *v13;
        if (!*v13)
          goto LABEL_30;
        v20 = a5 + 1;
        do
        {
          v21 = *((_DWORD *)v19 + 8);
          v22 = v21 >= v18;
          if (v21 >= v18)
            v23 = v19;
          else
            v23 = v19 + 1;
          if (v22)
            v20 = (uint64_t **)v19;
          v19 = (uint64_t *)*v23;
        }
        while (*v23);
        if (v20 == v13 || *((_DWORD *)v20 + 8) > v18)
          goto LABEL_30;
      }
      else
      {
        v24 = *v13;
        if (!*v13)
          goto LABEL_30;
        v25 = *v15;
        v20 = a5 + 1;
        do
        {
          v26 = *((_DWORD *)v24 + 8);
          v27 = v26 >= v25;
          if (v26 >= v25)
            v28 = v24;
          else
            v28 = v24 + 1;
          if (v27)
            v20 = (uint64_t **)v24;
          v24 = (uint64_t *)*v28;
        }
        while (*v28);
        if (v20 == v13 || v25 < *((_DWORD *)v20 + 8))
          goto LABEL_30;
      }
      v29 = v20[5];
      v30 = *v29;
      *(_QWORD *)(v30 + 8) = v29[1];
      *(_QWORD *)v29[1] = v30;
      --*(_QWORD *)(a4 + 16);
      operator delete(v29);
      sub_20BE10B80(a5, (uint64_t *)v20);
      operator delete(v20);
LABEL_30:
      result = sub_20BFEEE24(&v31);
    }
    while (v31 != v32);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIjEES2_RKjEEEPNS3_4listIjNS3_9allocatorIjEEEEPNS3_3mapIjNS3_15__list_iteratorIjPvEENS3_4lessIjEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(a1, a2);
  v11 = *(uint64_t **)result;
  v10 = *(uint64_t **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *(uint64_t **)result)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v45) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        v10 = (uint64_t *)((char *)v10 - 4);
        result = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v45, v10);
        v44 = result;
        if ((result & 0xFF00000000) != 0)
        {
          v14 = result;
          v15 = *(uint64_t **)(a4 + 8);
          v16 = *v12;
          if (!*v12)
            goto LABEL_17;
          v17 = a5 + 1;
          do
          {
            v18 = *((_DWORD *)v16 + 8);
            v19 = v18 >= result;
            if (v18 >= result)
              v20 = v16;
            else
              v20 = v16 + 1;
            if (v19)
              v17 = (uint64_t **)v16;
            v16 = (uint64_t *)*v20;
          }
          while (*v20);
          if (v17 != v12 && *((_DWORD *)v17 + 8) <= result)
          {
            v23 = v17[5];
            if (v23 != v15)
            {
              v24 = (uint64_t *)v23[1];
              if (v23 != v24)
              {
                v25 = *v24;
                v26 = *v23;
                *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 8);
                **(_QWORD **)(v25 + 8) = v26;
                v27 = *v15;
                *(_QWORD *)(v27 + 8) = v23;
                *v23 = v27;
                *v15 = v25;
                *(_QWORD *)(v25 + 8) = v15;
              }
            }
          }
          else
          {
LABEL_17:
            v21 = operator new(0x18uLL);
            v21[4] = v14;
            v22 = *v15;
            *(_QWORD *)(v22 + 8) = v21;
            *(_QWORD *)v21 = v22;
            *v15 = (uint64_t)v21;
            *((_QWORD *)v21 + 1) = v15;
            ++*(_QWORD *)(a4 + 16);
            v45 = &v44;
            result = (uint64_t)sub_20C126558(a5, (unsigned int *)&v44, (uint64_t)&unk_20CAC184C, (_DWORD **)&v45);
            *(_QWORD *)(result + 40) = v21;
          }
        }
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *(uint64_t **)result)
  {
    v28 = a5 + 1;
    do
    {
      v30 = *((_DWORD *)v10 - 1);
      v10 = (uint64_t *)((char *)v10 - 4);
      v29 = v30;
      v31 = *(uint64_t **)(a4 + 8);
      v32 = *v28;
      if (!*v28)
        goto LABEL_36;
      v33 = a5 + 1;
      do
      {
        v34 = *((_DWORD *)v32 + 8);
        v35 = v34 >= v29;
        if (v34 >= v29)
          v36 = v32;
        else
          v36 = v32 + 1;
        if (v35)
          v33 = (uint64_t **)v32;
        v32 = (uint64_t *)*v36;
      }
      while (*v36);
      if (v33 != v28 && v29 >= *((_DWORD *)v33 + 8))
      {
        v39 = v33[5];
        if (v39 != v31)
        {
          v40 = (uint64_t *)v39[1];
          if (v39 != v40)
          {
            v41 = *v40;
            v42 = *v39;
            *(_QWORD *)(v42 + 8) = *(_QWORD *)(v41 + 8);
            **(_QWORD **)(v41 + 8) = v42;
            v43 = *v31;
            *(_QWORD *)(v43 + 8) = v39;
            *v39 = v43;
            *v31 = v41;
            *(_QWORD *)(v41 + 8) = v31;
          }
        }
      }
      else
      {
LABEL_36:
        v37 = operator new(0x18uLL);
        v37[4] = v29;
        v38 = *v31;
        *(_QWORD *)(v38 + 8) = v37;
        *(_QWORD *)v37 = v38;
        *v31 = (uint64_t)v37;
        *((_QWORD *)v37 + 1) = v31;
        ++*(_QWORD *)(a4 + 16);
        v45 = v10;
        result = (uint64_t)sub_20C126558(a5, (unsigned int *)v10, (uint64_t)&unk_20CAC184C, (_DWORD **)&v45);
        *(_QWORD *)(result + 40) = v37;
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIjEES2_RKjEEEPNS3_4listIjNS3_9allocatorIjEEEEPNS3_3mapIjNS3_15__list_iteratorIjPvEENS3_4lessIjEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t **v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(a1, a2);
  v10 = *(uint64_t **)result;
  v11 = *(uint64_t **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (*(uint64_t **)result != v11)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v42) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        result = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v42, v10);
        v41 = result;
        if ((result & 0xFF00000000) != 0)
        {
          v14 = result;
          v15 = *v12;
          if (!*v12)
            goto LABEL_17;
          v16 = a5 + 1;
          do
          {
            v17 = *((_DWORD *)v15 + 8);
            v18 = v17 >= result;
            if (v17 >= result)
              v19 = v15;
            else
              v19 = v15 + 1;
            if (v18)
              v16 = (uint64_t **)v15;
            v15 = (uint64_t *)*v19;
          }
          while (*v19);
          if (v16 != v12 && *((_DWORD *)v16 + 8) <= result)
          {
            v22 = v16[5];
            if (v22 != a4)
            {
              v23 = (uint64_t *)v22[1];
              if (v22 != v23)
              {
                v24 = *v23;
                v25 = *v22;
                *(_QWORD *)(v25 + 8) = *(_QWORD *)(v24 + 8);
                **(_QWORD **)(v24 + 8) = v25;
                v26 = *a4;
                *(_QWORD *)(v26 + 8) = v22;
                *v22 = v26;
                *a4 = v24;
                *(_QWORD *)(v24 + 8) = a4;
              }
            }
          }
          else
          {
LABEL_17:
            v20 = operator new(0x18uLL);
            v20[4] = v14;
            v21 = *a4;
            *(_QWORD *)(v21 + 8) = v20;
            *a4 = (uint64_t)v20;
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = a4;
            ++a4[2];
            v42 = &v41;
            result = (uint64_t)sub_20C126558(a5, (unsigned int *)&v41, (uint64_t)&unk_20CAC184C, (_DWORD **)&v42);
            *(_QWORD *)(result + 40) = v20;
          }
        }
        v10 = (uint64_t *)((char *)v10 + 4);
      }
      while (v10 != v11);
    }
  }
  else if (*(uint64_t **)result != v11)
  {
    v27 = a5 + 1;
    do
    {
      v28 = *v27;
      v29 = *(_DWORD *)v10;
      if (!*v27)
        goto LABEL_36;
      v30 = a5 + 1;
      do
      {
        v31 = *((_DWORD *)v28 + 8);
        v32 = v31 >= v29;
        if (v31 >= v29)
          v33 = v28;
        else
          v33 = v28 + 1;
        if (v32)
          v30 = (uint64_t **)v28;
        v28 = (uint64_t *)*v33;
      }
      while (*v33);
      if (v30 != v27 && v29 >= *((_DWORD *)v30 + 8))
      {
        v36 = v30[5];
        if (v36 != a4)
        {
          v37 = (uint64_t *)v36[1];
          if (v36 != v37)
          {
            v38 = *v37;
            v39 = *v36;
            *(_QWORD *)(v39 + 8) = *(_QWORD *)(v38 + 8);
            **(_QWORD **)(v38 + 8) = v39;
            v40 = *a4;
            *(_QWORD *)(v40 + 8) = v36;
            *v36 = v40;
            *a4 = v38;
            *(_QWORD *)(v38 + 8) = a4;
          }
        }
      }
      else
      {
LABEL_36:
        v34 = operator new(0x18uLL);
        v34[4] = v29;
        v35 = *a4;
        *(_QWORD *)(v35 + 8) = v34;
        *a4 = (uint64_t)v34;
        *(_QWORD *)v34 = v35;
        *((_QWORD *)v34 + 1) = a4;
        ++a4[2];
        v42 = v10;
        result = (uint64_t)sub_20C126558(a5, (unsigned int *)v10, (uint64_t)&unk_20CAC184C, (_DWORD **)&v42);
        *(_QWORD *)(result + 40) = v34;
      }
      v10 = (uint64_t *)((char *)v10 + 4);
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIjEES2_RKjEEEPNS3_4listIjNS3_9allocatorIjEEEEPNS3_3mapIjNS3_15__list_iteratorIjPvEENS3_4lessIjEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _DWORD *v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  _DWORD *v20;
  void *v21;
  _DWORD *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  BOOL v42;
  uint64_t *v43;
  _QWORD *v44;
  __int128 *p_i;
  unsigned int v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 i;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58[2];
  void *__p[2];
  char *v60;
  int v61;

  __p[0] = 0;
  __p[1] = 0;
  v60 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  for (i = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(a1, a2);
        (_QWORD)i != *((_QWORD *)&i + 1);
        sub_20BFEEE24(&i))
  {
    if (!*(_QWORD *)(a3 + 24))
    {
      v16 = (unsigned int *)sub_20BFEEDA8((uint64_t *)&i, v9, v10);
      sub_20BE68238(&v57, v16, v16);
      if ((v17 & 1) == 0)
        continue;
      v19 = (_DWORD *)sub_20BFEEDA8((uint64_t *)&i, v17, v18);
      v20 = v19;
      v14 = __p[1];
      if (__p[1] >= v60)
      {
        v22 = __p[0];
        v28 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          sub_20BDDF694();
        v30 = v60 - (char *)__p[0];
        if ((v60 - (char *)__p[0]) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v29;
        if (v26)
        {
          v27 = (char *)sub_20BDE1330((uint64_t)&v60, v26);
          v22 = __p[0];
          v14 = __p[1];
        }
        else
        {
          v27 = 0;
        }
        v31 = &v27[4 * v28];
        *(_DWORD *)v31 = *v20;
        v21 = v31 + 4;
        while (v14 != v22)
        {
          v33 = *--v14;
          *((_DWORD *)v31 - 1) = v33;
          v31 -= 4;
        }
        goto LABEL_37;
      }
      v15 = *v19;
LABEL_12:
      *v14 = v15;
      v21 = v14 + 1;
LABEL_39:
      __p[1] = v21;
      continue;
    }
    v11 = sub_20BFEEDA8((uint64_t *)&i, v9, v10);
    v61 = a2;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      sub_20BE9E974();
    *(_QWORD *)&v54 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(v12, &v61, v11);
    if ((v54 & 0xFF00000000) != 0)
    {
      sub_20BE68238(&v57, (unsigned int *)&v54, &v54);
      if ((v13 & 1) != 0)
      {
        v14 = __p[1];
        if (__p[1] < v60)
        {
          v15 = v54;
          goto LABEL_12;
        }
        v22 = __p[0];
        v23 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          sub_20BDDF694();
        v25 = v60 - (char *)__p[0];
        if ((v60 - (char *)__p[0]) >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_20BDE1330((uint64_t)&v60, v26);
          v22 = __p[0];
          v14 = __p[1];
        }
        else
        {
          v27 = 0;
        }
        v31 = &v27[4 * v23];
        *(_DWORD *)v31 = v54;
        v21 = v31 + 4;
        while (v14 != v22)
        {
          v32 = *--v14;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
LABEL_37:
        __p[0] = v31;
        __p[1] = v21;
        v60 = &v27[4 * v26];
        if (v22)
          operator delete(v22);
        goto LABEL_39;
      }
    }
  }
  if (__p[0] != __p[1])
  {
    *(_QWORD *)&i = &i;
    *((_QWORD *)&i + 1) = &i;
    v56 = 0;
    sub_20BEDEA80(&i, a4);
    v54 = *(_OWORD *)__p;
    v36 = (_QWORD *)(a5 + 8);
    while ((_QWORD)v54 != *((_QWORD *)&v54 + 1))
    {
      v37 = (unsigned int *)sub_20C10D620((uint64_t *)&v54, v34, v35);
      v38 = *v36;
      if (*v36)
      {
        v39 = *v37;
        v40 = v36;
        do
        {
          v41 = *(_DWORD *)(v38 + 32);
          v42 = v41 >= v39;
          if (v41 >= v39)
            v43 = (uint64_t *)v38;
          else
            v43 = (uint64_t *)(v38 + 8);
          if (v42)
            v40 = (_QWORD *)v38;
          v38 = *v43;
        }
        while (*v43);
        if (v40 != v36 && v39 >= *((_DWORD *)v40 + 8))
        {
          v44 = (_QWORD *)v40[5];
          p_i = &i;
          if ((__int128 *)v44[1] != &i)
          {
            p_i = (__int128 *)v44[1];
            do
            {
              if (v58[0])
              {
                v46 = *((_DWORD *)p_i + 4);
                v47 = v58[0];
                do
                {
                  v48 = *((_DWORD *)v47 + 7);
                  if (v46 >= v48)
                  {
                    if (v48 >= v46)
                      goto LABEL_65;
                    ++v47;
                  }
                  v47 = (_QWORD *)*v47;
                }
                while (v47);
              }
              p_i = (__int128 *)*((_QWORD *)p_i + 1);
            }
            while (p_i != &i);
            p_i = &i;
          }
LABEL_65:
          if (!v56)
            goto LABEL_70;
          sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&i, v44, p_i);
        }
      }
      sub_20C10D69C(&v54);
    }
    v49 = v56;
    if (v56)
    {
      v50 = (uint64_t *)a4[1];
      v51 = i;
      v52 = **((_QWORD **)&i + 1);
      *(_QWORD *)(v52 + 8) = *(_QWORD *)(i + 8);
      **(_QWORD **)(v51 + 8) = v52;
      v53 = *v50;
      *(_QWORD *)(v53 + 8) = *((_QWORD *)&v51 + 1);
      **((_QWORD **)&v51 + 1) = v53;
      *v50 = v51;
      *(_QWORD *)(v51 + 8) = v50;
      a4[2] += v49;
      v56 = 0;
    }
LABEL_70:
    sub_20BEB422C(&i);
  }
  sub_20BE6100C((uint64_t)&v57, v58[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIjEES2_RKjEEEPNS3_4listIjNS3_9allocatorIjEEEEPNS3_3mapIjNS3_15__list_iteratorIjPvEENS3_4lessIjEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C10C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_20BEB422C(&a11);
  sub_20BE6100C((uint64_t)&a14, a15);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  __int32 *v8;
  __int32 *i;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int32 *v22;
  __int32 v23;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  __int32 *v27;
  __int32 *v28;
  char *v29;
  void *v30;
  __int32 *v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  __int32 *v35;
  char *v36;
  void *v37;
  __int32 *v38;
  uint64_t v39;
  void *__dst;
  __int32 *v41;
  uint64_t v42;
  void *__p;
  __int32 *v44;
  __int32 *v45;
  uint64_t v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C033524((uint64_t)a3, (uint64_t)a1);
    a3[152] = 1;
    return;
  }
  if (a1[4] != a1[5] || a1[16] != a1[17])
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    __p = 0;
    v44 = 0;
    v45 = 0;
    sub_20BE8B28C(&__p, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    v48[0] = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(a1, (int **)&__p, (uint64_t)&v46);
    v6 = (uint64_t *)v48[0];
    if (v48[0] == &v46)
    {
      v7 = 4;
      v6 = &v46;
    }
    else
    {
      if (!v48[0])
      {
LABEL_51:
        LOBYTE(v46) = 0;
        *(_OWORD *)v47 = 0u;
        *(_OWORD *)v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems((uint64_t)&v46, (uint64_t)&__p);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v46);
        if (*((_QWORD *)&v54 + 1))
        {
          *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
          operator delete(*((void **)&v54 + 1));
        }
        if ((_QWORD)v53)
        {
          *((_QWORD *)&v53 + 1) = v53;
          operator delete((void *)v53);
        }
        if (*((_QWORD *)&v51 + 1))
        {
          *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
          operator delete(*((void **)&v51 + 1));
        }
        if ((_QWORD)v50)
        {
          *((_QWORD *)&v50 + 1) = v50;
          operator delete((void *)v50);
        }
        if (v48[1])
        {
          *(void **)&v49 = v48[1];
          operator delete(v48[1]);
        }
        v30 = v47[0];
        if (!v47[0])
          goto LABEL_64;
        v47[1] = v47[0];
        goto LABEL_63;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_51;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a2 + 128) != *(_QWORD *)(a2 + 136))
  {
LABEL_5:
    *a3 = 0;
    a3[152] = 0;
    return;
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  sub_20BE8B28C(&__p, *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  __dst = 0;
  v41 = 0;
  v42 = 0;
  sub_20BE8B28C(&__dst, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20BE8B28C(&v37, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v8 = (__int32 *)a1[13];
  for (i = (__int32 *)a1[14]; v8 != i; ++v8)
  {
    v10 = sub_20C109EF0((__int32 *)__dst, v41, v8);
    if (v41 != v10)
      v41 = v10;
    v11 = sub_20C109EF0((__int32 *)v37, v38, v8);
    if (v38 != v11)
      v38 = v11;
    v12 = v44;
    v13 = wmemchr((__int32 *)__p, *v8, ((char *)v44 - (_BYTE *)__p) >> 2);
    if (v13)
      v14 = v13;
    else
      v14 = v12;
    if (v14 == v44)
    {
      if (v14 >= v45)
      {
        v16 = (__int32 *)__p;
        v17 = ((char *)v44 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_20BDDF694();
        v19 = (char *)v45 - (_BYTE *)__p;
        if (((char *)v45 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20BDE1330((uint64_t)&v45, v20);
          v16 = (__int32 *)__p;
          v14 = v44;
        }
        else
        {
          v21 = 0;
        }
        v22 = (__int32 *)&v21[4 * v17];
        *v22 = *v8;
        v15 = v22 + 1;
        while (v14 != v16)
        {
          v23 = *--v14;
          *--v22 = v23;
        }
        __p = v22;
        v44 = v15;
        v45 = (__int32 *)&v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = *v8;
        v15 = v14 + 1;
      }
      v44 = v15;
    }
  }
  v24 = (__int32 *)a1[7];
  v25 = (__int32 *)a1[8];
  if (v24 == v25)
  {
    v29 = (char *)a1[7];
  }
  else
  {
    do
    {
      v26 = sub_20C109EF0((__int32 *)__p, v44, v24);
      if (v44 != v26)
        v44 = v26;
      v27 = sub_20C109EF0((__int32 *)__dst, v41, v24);
      if (v41 != v27)
        v41 = v27;
      v28 = sub_20C109EF0((__int32 *)v37, v38, v24);
      if (v38 != v28)
        v38 = v28;
      ++v24;
    }
    while (v24 != v25);
    v29 = (char *)a1[7];
    v24 = (__int32 *)a1[8];
  }
  sub_20C125B2C((uint64_t)&__dst, (uint64_t)__dst, v29, (char *)v24, ((char *)v24 - v29) >> 2);
  v31 = (__int32 *)a1[10];
  v32 = (__int32 *)a1[11];
  if (v31 == v32)
  {
    v35 = v38;
    v36 = (char *)a1[10];
  }
  else
  {
    do
    {
      v33 = sub_20C109EF0((__int32 *)__p, v44, v31);
      if (v44 != v33)
        v44 = v33;
      v34 = sub_20C109EF0((__int32 *)__dst, v41, v31);
      if (v41 != v34)
        v41 = v34;
      v35 = sub_20C109EF0((__int32 *)v37, v38, v31);
      if (v38 != v35)
        v38 = v35;
      ++v31;
    }
    while (v31 != v32);
    v36 = (char *)a1[10];
    v31 = (__int32 *)a1[11];
  }
  sub_20C125B2C((uint64_t)&v37, (uint64_t)v35, v36, (char *)v31, ((char *)v31 - v36) >> 2);
  LOBYTE(v46) = 0;
  *(_OWORD *)v47 = 0u;
  *(_OWORD *)v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems((uint64_t)&v46, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems((uint64_t)&v46, (uint64_t)&__dst);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems((uint64_t)&v46, (uint64_t)&v37);
  sub_20C1247A0((uint64_t)a3, (uint64_t)&v46);
  sub_20C031968(&v46);
  if (v37)
  {
    v38 = (__int32 *)v37;
    operator delete(v37);
  }
  v30 = __dst;
  if (__dst)
  {
    v41 = (__int32 *)__dst;
LABEL_63:
    operator delete(v30);
  }
LABEL_64:
  if (__p)
  {
    v44 = (__int32 *)__p;
    operator delete(__p);
  }
}

void sub_20C10CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ModifyOperations(int **a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C10CCD4(a2, a1 + 1, a3);
  v7 = v6 | sub_20C10CCD4(a2, a1 + 4, a3);
  v8 = sub_20C10CCD4(a2, a1 + 7, a3);
  v9 = v7 | v8 | sub_20C10CCD4(a2, a1 + 10, a3);
  v10 = sub_20C10CCD4(a2, a1 + 13, a3);
  return v9 | v10 | sub_20C10CCD4(a2, a1 + 16, a3);
}

uint64_t sub_20C10CCD4(uint64_t a1, int **a2, int a3)
{
  int *v3;
  int *v4;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  __int128 v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  void *v39[2];
  __int128 v40;
  void *__p[2];
  _QWORD v42[2];

  __p[0] = 0;
  __p[1] = 0;
  v42[0] = 0;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    goto LABEL_49;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    v38 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, v3);
    v10 = BYTE4(v38);
    if (a3
      && BYTE4(v38)
      && (sub_20C126618((uint64_t *)v39, (unsigned int *)&v38), v10 = BYTE4(v38), (v11 & 1) == 0)
      && BYTE4(v38)
      || !v10)
    {
      v8 = 1;
      goto LABEL_46;
    }
    v12 = v38;
    v13 = (char *)__p[1];
    if ((_DWORD)v38 == *v3)
    {
      if (__p[1] >= (void *)v42[0])
      {
        v16 = (char *)__p[0];
        v17 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          goto LABEL_58;
        v19 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20BDE1330((uint64_t)v42, v20);
          v16 = (char *)__p[0];
          v13 = (char *)__p[1];
          v12 = *v3;
        }
        else
        {
          v21 = 0;
        }
        v28 = &v21[4 * v17];
        *(_DWORD *)v28 = v12;
        v15 = v28 + 4;
        while (v13 != v16)
        {
          v29 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v28 - 1) = v29;
          v28 -= 4;
        }
        __p[0] = v28;
        __p[1] = v15;
        v42[0] = &v21[4 * v20];
        if (v16)
          operator delete(v16);
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      v14 = v13 + 4;
    }
    else
    {
      if (__p[1] >= (void *)v42[0])
      {
        v22 = (char *)__p[0];
        v23 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
LABEL_58:
          sub_20BDDF694();
        v25 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_20BDE1330((uint64_t)v42, v26);
          v22 = (char *)__p[0];
          v13 = (char *)__p[1];
          v12 = v38;
        }
        else
        {
          v27 = 0;
        }
        v30 = &v27[4 * v23];
        *(_DWORD *)v30 = v12;
        v15 = v30 + 4;
        while (v13 != v22)
        {
          v31 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        __p[0] = v30;
        __p[1] = v15;
        v42[0] = &v27[4 * v26];
        if (v22)
          operator delete(v22);
        v8 = 1;
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      v14 = v13 + 4;
      v8 = 1;
    }
    v15 = v14;
LABEL_45:
    __p[1] = v15;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) != 0)
  {
    v32 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_OWORD *)__p = v32;
    v33 = a2[2];
    a2[2] = (int *)v42[0];
    v42[0] = v33;
    v34 = 1;
    goto LABEL_50;
  }
LABEL_49:
  v34 = 0;
LABEL_50:
  v35 = *((_QWORD *)&v40 + 1);
  *((_QWORD *)&v40 + 1) = 0;
  if (v35)
  {
    v36 = (void *)sub_20BEB3FA4(v35);
    operator delete(v36);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v34;
}

void sub_20C10CF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_20C125EA8((uint64_t)&a11);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ReplaceOperations(_BYTE *a1, int a2, unint64_t a3, uint64_t a4, char **a5)
{
  BOOL v10;
  uint64_t Items;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int64_t v20;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *__p;
  char *v28;
  uint64_t v29;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (!v10 && (a4 || *a5 == a5[1]))
    return 0;
  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems((uint64_t)a1, a2);
  v28 = 0;
  v29 = 0;
  __p = 0;
  sub_20BE8B28C(&__p, *(const void **)Items, *(_QWORD *)(Items + 8), (uint64_t)(*(_QWORD *)(Items + 8) - *(_QWORD *)Items) >> 2);
  v12 = __p;
  v13 = (v28 - (_BYTE *)__p) >> 2;
  if (v13 >= a3)
  {
    if (a4 + a3 <= v13)
    {
      v15 = *a5;
      v16 = a5[1];
      v17 = (v16 - *a5) >> 2;
      if (v17 == a4)
      {
        if (v16 != v15)
          memmove((char *)__p + 4 * a3, *a5, v16 - *a5);
      }
      else
      {
        if (a4)
        {
          v18 = (char *)__p + 4 * a3;
          v19 = &v18[4 * a4];
          v20 = v28 - v19;
          if (v28 != v19)
          {
            memmove((char *)__p + 4 * a3, v19, v28 - v19);
            v12 = __p;
            v15 = *a5;
            v16 = a5[1];
            v17 = (v16 - *a5) >> 2;
          }
          v28 = &v18[v20];
        }
        sub_20C125B2C((uint64_t)&__p, (uint64_t)v12 + 4 * a3, v15, v16, v17);
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetItems((uint64_t)a1, (uint64_t)&__p, a2);
      v14 = 1;
      goto LABEL_23;
    }
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 698;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ReplaceOperations(const SdfListOpType, size_t,"
          " size_t, const ItemVector &) [T = unsigned int]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v28 - (_BYTE *)__p) >> 2);
  }
  else
  {
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 693;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ReplaceOperations(const SdfListOpType, size_t,"
          " size_t, const ItemVector &) [T = unsigned int]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v28 - (_BYTE *)__p) >> 2);
  }
  v14 = 0;
LABEL_23:
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
  return v14;
}

void sub_20C10D190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  int **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  void **p_p;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20[2];
  uint64_t v21;
  uint64_t *v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems(a1, a2 + 8);
  Items = (int **)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(a1, a3);
  sub_20C126274(&v21, *Items, Items[1]);
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  for (i = v22; i != &v21; i = (uint64_t *)i[1])
  {
    __p = i + 2;
    sub_20C126558(&v19, (unsigned int *)i + 4, (uint64_t)&unk_20CAC184C, (_DWORD **)&__p)[5] = i;
  }
  switch(a3)
  {
    case 1:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys(a2, 1, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 2:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys(a2, 2, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 3:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
      p_p = v26;
      if (v26 == &__p)
      {
        v14 = 4;
        p_p = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_15;
        v14 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*p_p + v14))(p_p, v11, v12);
LABEL_15:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_ReorderKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
LABEL_16:
      v15 = v26;
      if (v26 == &__p)
      {
        v16 = 4;
        v15 = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_21;
        v16 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*v15 + v16))(v15, v8, v9);
LABEL_21:
      v24 = 0;
      v25 = 0;
      __p = 0;
      if (v22 == &v21)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = v22;
        do
        {
          ++v17;
          v18 = (uint64_t *)v18[1];
        }
        while (v18 != &v21);
      }
      sub_20C126E14((char *)&__p, (uint64_t)v22, (uint64_t)&v21, v17);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetItems(a1, (uint64_t)&__p, a3);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      sub_20BE6100C((uint64_t)&v19, v20[0]);
      result = (char *)sub_20BEB422C(&v21);
      break;
    case 4:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_PrependKeys(a2, 4, (uint64_t)&__p, (uint64_t)&v21, &v19);
      goto LABEL_16;
    case 5:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AppendKeys(a2, 5, (uint64_t)&__p, &v21, &v19);
      goto LABEL_16;
    default:
      goto LABEL_21;
  }
  return result;
}

void sub_20C10D494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19)
{
  void **v19;
  void **p_p;
  uint64_t v22;

  p_p = a19;
  if (a19 == v19)
  {
    v22 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*((void (**)(void))*p_p + v22))();
LABEL_6:
  sub_20BE6100C((uint64_t)&a9, a10);
  sub_20BEB422C(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  const void *v18;
  size_t v19;
  const void *v20;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v5 = a1 + 1;
  v4 = (const void *)a1[1];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 1;
  v7 = (const void *)a2[1];
  if (v6 != v8[1] - (_QWORD)v7)
    return 0;
  if (memcmp(v4, v7, v6))
    return 0;
  v9 = (const void *)a1[4];
  v10 = a1[5] - (_QWORD)v9;
  v11 = (const void *)a2[4];
  if (v10 != a2[5] - (_QWORD)v11)
    return 0;
  if (memcmp(v9, v11, v10))
    return 0;
  v12 = (const void *)a1[7];
  v13 = a1[8] - (_QWORD)v12;
  v14 = (const void *)a2[7];
  if (v13 != a2[8] - (_QWORD)v14)
    return 0;
  if (!memcmp(v12, v14, v13)
    && (v15 = (const void *)a1[10], v16 = a1[11] - (_QWORD)v15, v17 = (const void *)a2[10], v16 == a2[11] - (_QWORD)v17)
    && !memcmp(v15, v17, v16)
    && (v18 = (const void *)a1[13], v19 = a1[14] - (_QWORD)v18, v20 = (const void *)a2[13], v19 == a2[14] - (_QWORD)v20)
    && !memcmp(v18, v20, v19))
  {
    return sub_20C10A94C((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIjEeqERKS1_(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==(a1, a2);
}

uint64_t sub_20C10D620(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned int>>::operator*() [T = std::vec"
            "tor<unsigned int>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C10D694()
{
  JUMPOUT(0x20C10D644);
}

_QWORD *sub_20C10D69C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned int>>::operator++("
            ") [T = std::vector<unsigned int>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D10, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = unsigned int]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C126E88(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C126E88(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C126E88(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C126E88(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C126E88(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C126E88(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsIjEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEES6_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C10D968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::CreateExplicit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems(a2, a1);
}

void sub_20C10DA24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxEC1Ev(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 8);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE16SetExplicitItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems(a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems(a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems(a4, a3);
}

void sub_20C10DB48(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 56);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE17SetPrependedItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 80);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE16SetAppendedItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 104);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE15SetDeletedItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE4SwapERS1_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::HasItem(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v2 = *(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      while (*v3 != *a2)
      {
        if (++v3 == v2)
          goto LABEL_5;
      }
    }
    return v3 != v2;
  }
  v6 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD **)(a1 + 40);
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(_QWORD **)(a1 + 64);
    if (v8 != v7)
    {
      while (*v8 != *a2)
      {
        if (++v8 == v7)
        {
          v8 = *(_QWORD **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v10 = *(_QWORD **)(a1 + 80);
      v9 = *(_QWORD **)(a1 + 88);
      if (v10 != v9)
      {
        while (*v10 != *a2)
        {
          if (++v10 == v9)
          {
            v10 = *(_QWORD **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        v12 = *(_QWORD **)(a1 + 104);
        v11 = *(_QWORD **)(a1 + 112);
        if (v12 != v11)
        {
          while (*v12 != *a2)
          {
            if (++v12 == v11)
            {
              v12 = *(_QWORD **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          v3 = *(_QWORD **)(a1 + 128);
          v2 = *(_QWORD **)(a1 + 136);
          if (v3 != v2)
          {
            while (*v3 != *a2)
            {
              if (++v3 == v2)
              {
LABEL_5:
                v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems("
              "SdfListOpType) const [T = long long]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetAppliedItems@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations(a1, (uint64_t **)a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C10E0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;
  void *v17;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations(_QWORD *result, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  if (a2)
  {
    v5 = (uint64_t)result;
    v13 = (uint64_t)&v13;
    v14 = &v13;
    v15 = 0;
    if (*(_BYTE *)result)
    {
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys((uint64_t)result, 0, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(result[8] - result[7]) >> 3)
           + ((uint64_t)(result[11] - result[10]) >> 3)
           + ((uint64_t)(result[5] - result[4]) >> 3)
           + ((uint64_t)(result[14] - result[13]) >> 3)
           + ((uint64_t)(result[17] - result[16]) >> 3)))
      {
        return sub_20BEB422C(&v13);
      }
      sub_20C126FAC((uint64_t)&v13, &v13, *a2, a2[1]);
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      for (i = v14; i != &v13; i = (uint64_t *)i[1])
      {
        v16 = i + 2;
        sub_20C1270A8(&v10, i + 2, (uint64_t)&unk_20CAC184C, &v16)[5] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_DeleteKeys(v5, 2, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys(v5, 1, a3, &v13, (uint64_t)&v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_PrependKeys(v5, 4, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AppendKeys(v5, 5, a3, &v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_ReorderKeys(v5, 3, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    v7 = *a2;
    a2[1] = *a2;
    if (v14 == &v13)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = v14;
      do
      {
        ++v8;
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != &v13);
    }
    sub_20C127164((uint64_t)a2, (char *)v7, v14, &v13, v8);
    return sub_20BEB422C(&v13);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE15ApplyOperationsEPNSt3__16vectorIxNS2_9allocatorIxEEEERKNS2_8functionIFNS2_8optionalIxEENS_13SdfListOpTypeERKxEEE(result, a2, a3);
}

void sub_20C10E358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEB422C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    *result = a2;
    *((_QWORD *)result + 2) = *((_QWORD *)result + 1);
    *((_QWORD *)result + 5) = *((_QWORD *)result + 4);
    *((_QWORD *)result + 8) = *((_QWORD *)result + 7);
    *((_QWORD *)result + 11) = *((_QWORD *)result + 10);
    *((_QWORD *)result + 14) = *((_QWORD *)result + 13);
    *((_QWORD *)result + 17) = *((_QWORD *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 32);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE13SetAddedItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 128);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE15SetOrderedItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE8SetItemsERKNSt3__16vectorIxNS2_9allocatorIxEEEENS_13SdfListOpTypeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Clear(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit(uint64_t result)
{
  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE20ClearAndMakeExplicitEv(result);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(a1, a2);
  v12 = result[1];
  v38 = *result;
  v39 = v12;
  if (v38 != v12)
  {
    v13 = (_QWORD *)(a5 + 8);
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEE958(&v38, v10, v11);
        LODWORD(v37[0]) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        v16 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v15 + 48))(v15, v37, v14);
        v37[0] = v16;
        v37[1] = v17;
        if (!(_BYTE)v17)
          goto LABEL_29;
        v18 = v16;
        v19 = (_QWORD *)*v13;
        if (*v13)
        {
          v20 = (_QWORD *)(a5 + 8);
          do
          {
            v21 = v19[4];
            v22 = v21 < v16;
            if (v21 >= v16)
              v23 = v19;
            else
              v23 = v19 + 1;
            if (!v22)
              v20 = v19;
            v19 = (_QWORD *)*v23;
          }
          while (*v23);
          if (v20 != v13 && v16 >= v20[4])
            goto LABEL_29;
        }
        v24 = operator new(0x18uLL);
        v24[2] = v18;
        v25 = *a4;
        *(_QWORD *)(v25 + 8) = v24;
        *a4 = (uint64_t)v24;
        *v24 = v25;
        v24[1] = a4;
        ++a4[2];
        v40 = v37;
        v26 = v37;
        v27 = &v40;
        v28 = (uint64_t **)a5;
      }
      else
      {
        v29 = (uint64_t *)sub_20BFEE958(&v38, v10, v11);
        v30 = (_QWORD *)*v13;
        v31 = *v29;
        if (*v13)
        {
          v32 = (_QWORD *)(a5 + 8);
          do
          {
            v33 = v30[4];
            v34 = v33 < v31;
            if (v33 >= v31)
              v35 = v30;
            else
              v35 = v30 + 1;
            if (!v34)
              v32 = v30;
            v30 = (_QWORD *)*v35;
          }
          while (*v35);
          if (v32 != v13 && v31 >= v32[4])
            goto LABEL_29;
        }
        v24 = operator new(0x18uLL);
        v24[2] = v31;
        v36 = *a4;
        *(_QWORD *)(v36 + 8) = v24;
        *a4 = (uint64_t)v24;
        *v24 = v36;
        v24[1] = a4;
        ++a4[2];
        v37[0] = v29;
        v27 = (uint64_t **)v37;
        v28 = (uint64_t **)a5;
        v26 = v29;
      }
      sub_20C1270A8(v28, v26, (uint64_t)&unk_20CAC184C, v27)[5] = (uint64_t)v24;
LABEL_29:
      result = sub_20BFEE9D4(&v38);
    }
    while (v38 != v39);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIxEES2_RKxEEEPNS3_4listIxNS3_9allocatorIxEEEEPNS3_3mapIxNS3_15__list_iteratorIxPvEENS3_4lessIxEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(a1, a2);
  v12 = result[1];
  v32 = *result;
  v33 = v12;
  if (v32 != v12)
  {
    v13 = (uint64_t *)(a5 + 1);
    do
    {
      v14 = *(_QWORD *)(a3 + 24);
      v15 = (_QWORD *)sub_20BFEE958(&v32, v10, v11);
      v16 = v15;
      if (v14)
      {
        v34 = a2;
        v17 = *(_QWORD *)(a3 + 24);
        if (!v17)
          sub_20BE9E974();
        v18 = (*(uint64_t (**)(uint64_t, int *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v34, v16);
        if (!v19)
          goto LABEL_28;
        v20 = (_QWORD *)*v13;
        if (!*v13)
          goto LABEL_28;
        v21 = (uint64_t *)(a5 + 1);
        do
        {
          v22 = v20[4];
          v23 = v22 < v18;
          if (v22 >= v18)
            v24 = v20;
          else
            v24 = v20 + 1;
          if (!v23)
            v21 = v20;
          v20 = (_QWORD *)*v24;
        }
        while (*v24);
        if (v21 == v13 || v18 < v21[4])
          goto LABEL_28;
      }
      else
      {
        v25 = (_QWORD *)*v13;
        if (!*v13)
          goto LABEL_28;
        v26 = *v15;
        v21 = (uint64_t *)(a5 + 1);
        do
        {
          v27 = v25[4];
          v28 = v27 < v26;
          if (v27 >= v26)
            v29 = v25;
          else
            v29 = v25 + 1;
          if (!v28)
            v21 = v25;
          v25 = (_QWORD *)*v29;
        }
        while (*v29);
        if (v21 == v13 || v26 < v21[4])
          goto LABEL_28;
      }
      v30 = (uint64_t *)v21[5];
      v31 = *v30;
      *(_QWORD *)(v31 + 8) = v30[1];
      *(_QWORD *)v30[1] = v31;
      --*(_QWORD *)(a4 + 16);
      operator delete(v30);
      sub_20BE10B80(a5, v21);
      operator delete(v21);
LABEL_28:
      result = sub_20BFEE9D4(&v32);
    }
    while (v32 != v33);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIxEES2_RKxEEEPNS3_4listIxNS3_9allocatorIxEEEEPNS3_3mapIxNS3_15__list_iteratorIxPvEENS3_4lessIxEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t v19;
  BOOL v20;
  uint64_t **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t v35;
  BOOL v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45[2];
  uint64_t **v46;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(a1, a2);
  v11 = *result;
  v10 = (uint64_t *)result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != (uint64_t *)*result)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v45[0]) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v45, --v10);
        v45[0] = result;
        v45[1] = v14;
        if ((_BYTE)v14)
        {
          v15 = result;
          v16 = *(uint64_t **)(a4 + 8);
          v17 = *v12;
          if (!*v12)
            goto LABEL_16;
          v18 = a5 + 1;
          do
          {
            v19 = v17[4];
            v20 = v19 < (uint64_t)result;
            if (v19 >= (uint64_t)result)
              v21 = (uint64_t **)v17;
            else
              v21 = (uint64_t **)(v17 + 1);
            if (!v20)
              v18 = (uint64_t **)v17;
            v17 = *v21;
          }
          while (*v21);
          if (v18 != v12 && (uint64_t)result >= (uint64_t)v18[4])
          {
            v24 = v18[5];
            if (v24 != v16)
            {
              v25 = (uint64_t *)v24[1];
              if (v24 != v25)
              {
                v26 = *v25;
                v27 = *v24;
                *(_QWORD *)(v27 + 8) = *(_QWORD *)(v26 + 8);
                **(_QWORD **)(v26 + 8) = v27;
                v28 = *v16;
                *(_QWORD *)(v28 + 8) = v24;
                *v24 = v28;
                *v16 = v26;
                *(_QWORD *)(v26 + 8) = v16;
              }
            }
          }
          else
          {
LABEL_16:
            v22 = operator new(0x18uLL);
            v22[2] = v15;
            v23 = *v16;
            *(_QWORD *)(v23 + 8) = v22;
            *v22 = v23;
            *v16 = (uint64_t)v22;
            v22[1] = v16;
            ++*(_QWORD *)(a4 + 16);
            v46 = v45;
            result = sub_20C1270A8(a5, (uint64_t *)v45, (uint64_t)&unk_20CAC184C, (uint64_t **)&v46);
            result[5] = (uint64_t)v22;
          }
        }
      }
      while (v10 != (uint64_t *)v11);
    }
  }
  else if (v10 != (uint64_t *)*result)
  {
    v29 = a5 + 1;
    do
    {
      v31 = *--v10;
      v30 = v31;
      v32 = *(uint64_t **)(a4 + 8);
      v33 = *v29;
      if (!*v29)
        goto LABEL_34;
      v34 = a5 + 1;
      do
      {
        v35 = v33[4];
        v36 = v35 < v30;
        if (v35 >= v30)
          v37 = (uint64_t **)v33;
        else
          v37 = (uint64_t **)(v33 + 1);
        if (!v36)
          v34 = (uint64_t **)v33;
        v33 = *v37;
      }
      while (*v37);
      if (v34 != v29 && v30 >= (uint64_t)v34[4])
      {
        v40 = v34[5];
        if (v40 != v32)
        {
          v41 = (uint64_t *)v40[1];
          if (v40 != v41)
          {
            v42 = *v41;
            v43 = *v40;
            *(_QWORD *)(v43 + 8) = *(_QWORD *)(v42 + 8);
            **(_QWORD **)(v42 + 8) = v43;
            v44 = *v32;
            *(_QWORD *)(v44 + 8) = v40;
            *v40 = v44;
            *v32 = v42;
            *(_QWORD *)(v42 + 8) = v32;
          }
        }
      }
      else
      {
LABEL_34:
        v38 = operator new(0x18uLL);
        v38[2] = v30;
        v39 = *v32;
        *(_QWORD *)(v39 + 8) = v38;
        *v38 = v39;
        *v32 = (uint64_t)v38;
        v38[1] = v32;
        ++*(_QWORD *)(a4 + 16);
        v45[0] = v10;
        result = sub_20C1270A8(a5, v10, (uint64_t)&unk_20CAC184C, v45);
        result[5] = (uint64_t)v38;
      }
    }
    while (v10 != (uint64_t *)v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIxEES2_RKxEEEPNS3_4listIxNS3_9allocatorIxEEEEPNS3_3mapIxNS3_15__list_iteratorIxPvEENS3_4lessIxEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t v18;
  BOOL v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  BOOL v33;
  uint64_t **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42[2];
  uint64_t **v43;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(a1, a2);
  v10 = (uint64_t *)*result;
  v11 = (uint64_t *)result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if ((uint64_t *)*result != v11)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v42[0]) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v42, v10);
        v42[0] = result;
        v42[1] = v14;
        if ((_BYTE)v14)
        {
          v15 = result;
          v16 = *v12;
          if (!*v12)
            goto LABEL_16;
          v17 = a5 + 1;
          do
          {
            v18 = v16[4];
            v19 = v18 < (uint64_t)result;
            if (v18 >= (uint64_t)result)
              v20 = (uint64_t **)v16;
            else
              v20 = (uint64_t **)(v16 + 1);
            if (!v19)
              v17 = (uint64_t **)v16;
            v16 = *v20;
          }
          while (*v20);
          if (v17 != v12 && (uint64_t)result >= (uint64_t)v17[4])
          {
            v23 = v17[5];
            if (v23 != a4)
            {
              v24 = (uint64_t *)v23[1];
              if (v23 != v24)
              {
                v25 = *v24;
                v26 = *v23;
                *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 8);
                **(_QWORD **)(v25 + 8) = v26;
                v27 = *a4;
                *(_QWORD *)(v27 + 8) = v23;
                *v23 = v27;
                *a4 = v25;
                *(_QWORD *)(v25 + 8) = a4;
              }
            }
          }
          else
          {
LABEL_16:
            v21 = operator new(0x18uLL);
            v21[2] = v15;
            v22 = *a4;
            *(_QWORD *)(v22 + 8) = v21;
            *a4 = (uint64_t)v21;
            *v21 = v22;
            v21[1] = a4;
            ++a4[2];
            v43 = v42;
            result = sub_20C1270A8(a5, (uint64_t *)v42, (uint64_t)&unk_20CAC184C, (uint64_t **)&v43);
            result[5] = (uint64_t)v21;
          }
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else if ((uint64_t *)*result != v11)
  {
    v28 = a5 + 1;
    do
    {
      v29 = *v28;
      v30 = *v10;
      if (!*v28)
        goto LABEL_34;
      v31 = a5 + 1;
      do
      {
        v32 = v29[4];
        v33 = v32 < v30;
        if (v32 >= v30)
          v34 = (uint64_t **)v29;
        else
          v34 = (uint64_t **)(v29 + 1);
        if (!v33)
          v31 = (uint64_t **)v29;
        v29 = *v34;
      }
      while (*v34);
      if (v31 != v28 && v30 >= (uint64_t)v31[4])
      {
        v37 = v31[5];
        if (v37 != a4)
        {
          v38 = (uint64_t *)v37[1];
          if (v37 != v38)
          {
            v39 = *v38;
            v40 = *v37;
            *(_QWORD *)(v40 + 8) = *(_QWORD *)(v39 + 8);
            **(_QWORD **)(v39 + 8) = v40;
            v41 = *a4;
            *(_QWORD *)(v41 + 8) = v37;
            *v37 = v41;
            *a4 = v39;
            *(_QWORD *)(v39 + 8) = a4;
          }
        }
      }
      else
      {
LABEL_34:
        v35 = operator new(0x18uLL);
        v35[2] = v30;
        v36 = *a4;
        *(_QWORD *)(v36 + 8) = v35;
        *a4 = (uint64_t)v35;
        *v35 = v36;
        v35[1] = a4;
        ++a4[2];
        v42[0] = v10;
        result = sub_20C1270A8(a5, v10, (uint64_t)&unk_20CAC184C, v42);
        result[5] = (uint64_t)v35;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIxEES2_RKxEEEPNS3_4listIxNS3_9allocatorIxEEEEPNS3_3mapIxNS3_15__list_iteratorIxPvEENS3_4lessIxEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 *p_i;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 i;
  uint64_t v56;
  __int128 v57;
  uint64_t *v58;
  _QWORD *v59[2];
  void *__p[2];
  char *v61;
  int v62;

  __p[0] = 0;
  __p[1] = 0;
  v61 = 0;
  v59[0] = 0;
  v59[1] = 0;
  v58 = (uint64_t *)v59;
  for (i = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(a1, a2);
        (_QWORD)i != *((_QWORD *)&i + 1);
        sub_20BFEE9D4(&i))
  {
    if (!*(_QWORD *)(a3 + 24))
    {
      v17 = (uint64_t *)sub_20BFEE958((uint64_t *)&i, v9, v10);
      sub_20C127C14(&v58, v17, v17);
      if ((v18 & 1) == 0)
        continue;
      v20 = (_QWORD *)sub_20BFEE958((uint64_t *)&i, v18, v19);
      v21 = v20;
      v15 = __p[1];
      if (__p[1] >= v61)
      {
        v23 = __p[0];
        v29 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          sub_20BDDF694();
        v31 = v61 - (char *)__p[0];
        if ((v61 - (char *)__p[0]) >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v30;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8((uint64_t)&v61, v27);
          v23 = __p[0];
          v15 = __p[1];
        }
        else
        {
          v28 = 0;
        }
        v32 = &v28[8 * v29];
        *(_QWORD *)v32 = *v21;
        v22 = v32 + 8;
        while (v15 != v23)
        {
          v34 = *--v15;
          *((_QWORD *)v32 - 1) = v34;
          v32 -= 8;
        }
        goto LABEL_37;
      }
      v16 = *v20;
LABEL_12:
      *v15 = v16;
      v22 = v15 + 1;
LABEL_39:
      __p[1] = v22;
      continue;
    }
    v11 = sub_20BFEE958((uint64_t *)&i, v9, v10);
    v62 = a2;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      sub_20BE9E974();
    *(_QWORD *)&v57 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(v12, &v62, v11);
    *((_QWORD *)&v57 + 1) = v13;
    if ((_BYTE)v13)
    {
      sub_20C127C14(&v58, (uint64_t *)&v57, (uint64_t *)&v57);
      if ((v14 & 1) != 0)
      {
        v15 = __p[1];
        if (__p[1] < v61)
        {
          v16 = v57;
          goto LABEL_12;
        }
        v23 = __p[0];
        v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          sub_20BDDF694();
        v26 = v61 - (char *)__p[0];
        if ((v61 - (char *)__p[0]) >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8((uint64_t)&v61, v27);
          v23 = __p[0];
          v15 = __p[1];
        }
        else
        {
          v28 = 0;
        }
        v32 = &v28[8 * v24];
        *(_QWORD *)v32 = v57;
        v22 = v32 + 8;
        while (v15 != v23)
        {
          v33 = *--v15;
          *((_QWORD *)v32 - 1) = v33;
          v32 -= 8;
        }
LABEL_37:
        __p[0] = v32;
        __p[1] = v22;
        v61 = &v28[8 * v27];
        if (v23)
          operator delete(v23);
        goto LABEL_39;
      }
    }
  }
  if (__p[0] != __p[1])
  {
    *(_QWORD *)&i = &i;
    *((_QWORD *)&i + 1) = &i;
    v56 = 0;
    sub_20BEDEA80(&i, a4);
    v57 = *(_OWORD *)__p;
    v37 = (_QWORD *)(a5 + 8);
    while ((_QWORD)v57 != *((_QWORD *)&v57 + 1))
    {
      v38 = (uint64_t *)sub_20C1102C4((uint64_t *)&v57, v35, v36);
      v39 = (_QWORD *)*v37;
      if (*v37)
      {
        v40 = *v38;
        v41 = v37;
        do
        {
          v42 = v39[4];
          v43 = v42 < v40;
          if (v42 >= v40)
            v44 = v39;
          else
            v44 = v39 + 1;
          if (!v43)
            v41 = v39;
          v39 = (_QWORD *)*v44;
        }
        while (*v44);
        if (v41 != v37 && v40 >= v41[4])
        {
          v45 = (_QWORD *)v41[5];
          p_i = &i;
          if ((__int128 *)v45[1] != &i)
          {
            p_i = (__int128 *)v45[1];
            do
            {
              if (v59[0])
              {
                v47 = *((_QWORD *)p_i + 2);
                v48 = v59[0];
                do
                {
                  v49 = v48[4];
                  if (v47 >= v49)
                  {
                    if (v49 >= v47)
                      goto LABEL_64;
                    ++v48;
                  }
                  v48 = (_QWORD *)*v48;
                }
                while (v48);
              }
              p_i = (__int128 *)*((_QWORD *)p_i + 1);
            }
            while (p_i != &i);
            p_i = &i;
          }
LABEL_64:
          if (!v56)
            goto LABEL_69;
          sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&i, v45, p_i);
        }
      }
      sub_20C110340(&v57);
    }
    v50 = v56;
    if (v56)
    {
      v51 = (uint64_t *)a4[1];
      v52 = i;
      v53 = **((_QWORD **)&i + 1);
      *(_QWORD *)(v53 + 8) = *(_QWORD *)(i + 8);
      **(_QWORD **)(v52 + 8) = v53;
      v54 = *v51;
      *(_QWORD *)(v54 + 8) = *((_QWORD *)&v52 + 1);
      **((_QWORD **)&v52 + 1) = v54;
      *v51 = v52;
      *(_QWORD *)(v52 + 8) = v51;
      a4[2] += v50;
      v56 = 0;
    }
LABEL_69:
    sub_20BEB422C(&i);
  }
  sub_20BE6100C((uint64_t)&v58, v59[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIxEES2_RKxEEEPNS3_4listIxNS3_9allocatorIxEEEEPNS3_3mapIxNS3_15__list_iteratorIxPvEENS3_4lessIxEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C10F15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_20BEB422C(&a9);
  sub_20BE6100C((uint64_t)&a16, a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *i;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  void *__dst;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46[2];
  void *v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C03298C((uint64_t)a3, (uint64_t)a1);
    a3[152] = 1;
    return;
  }
  if (a1[4] != a1[5] || a1[16] != a1[17])
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_20C032914(&v42, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    v47[0] = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations(a1, (uint64_t **)&v42, (uint64_t)&v45);
    v6 = (uint64_t *)v47[0];
    if (v47[0] == &v45)
    {
      v7 = 4;
      v6 = &v45;
    }
    else
    {
      if (!v47[0])
      {
LABEL_54:
        LOBYTE(v45) = 0;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems((uint64_t)&v45, (uint64_t)&v42);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v45);
        if (*((_QWORD *)&v53 + 1))
        {
          *(_QWORD *)&v54 = *((_QWORD *)&v53 + 1);
          operator delete(*((void **)&v53 + 1));
        }
        if ((_QWORD)v52)
        {
          *((_QWORD *)&v52 + 1) = v52;
          operator delete((void *)v52);
        }
        if (*((_QWORD *)&v50 + 1))
        {
          *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
          operator delete(*((void **)&v50 + 1));
        }
        if ((_QWORD)v49)
        {
          *((_QWORD *)&v49 + 1) = v49;
          operator delete((void *)v49);
        }
        if (v47[1])
        {
          *(void **)&v48 = v47[1];
          operator delete(v47[1]);
        }
        v29 = v46[0];
        if (!v46[0])
          goto LABEL_67;
        v46[1] = v46[0];
        goto LABEL_66;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_54;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a2 + 128) != *(_QWORD *)(a2 + 136))
  {
LABEL_5:
    *a3 = 0;
    a3[152] = 0;
    return;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  sub_20C032914(&v42, *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  __dst = 0;
  v40 = 0;
  v41 = 0;
  sub_20C032914(&__dst, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_20C032914(&v36, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  v8 = (_QWORD *)a1[13];
  for (i = (_QWORD *)a1[14]; v8 != i; ++v8)
  {
    v10 = sub_20BEBD100(__dst, v40, v8);
    if (v40 != v10)
      v40 = v10;
    v11 = sub_20BEBD100(v36, v37, v8);
    if (v37 != v11)
      v37 = v11;
    v12 = (char *)v42;
    v13 = v43;
    if (v42 == v43)
    {
      v14 = (char *)v42;
    }
    else
    {
      v14 = (char *)v42;
      while (*(_QWORD *)v14 != *v8)
      {
        v14 += 8;
        if (v14 == v43)
        {
          v14 = v43;
          break;
        }
      }
    }
    if (v14 == v43)
    {
      if ((unint64_t)v43 >= v44)
      {
        v16 = (v43 - (_BYTE *)v42) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_20BDDF694();
        v18 = v44 - (_QWORD)v42;
        if ((uint64_t)(v44 - (_QWORD)v42) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_20BDDF6A8((uint64_t)&v44, v19);
          v12 = (char *)v42;
          v13 = v43;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = *v8;
        v15 = v21 + 8;
        while (v13 != v12)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        v42 = v21;
        v43 = v15;
        v44 = (unint64_t)&v20[8 * v19];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_QWORD *)v43 = *v8;
        v15 = v13 + 8;
      }
      v43 = v15;
    }
  }
  v23 = (char *)a1[7];
  v24 = (char *)a1[8];
  if (v23 == v24)
  {
    v28 = (char *)a1[7];
  }
  else
  {
    do
    {
      v25 = (char *)sub_20BEBD100(v42, v43, v23);
      if (v43 != v25)
        v43 = v25;
      v26 = sub_20BEBD100(__dst, v40, v23);
      if (v40 != v26)
        v40 = v26;
      v27 = sub_20BEBD100(v36, v37, v23);
      if (v37 != v27)
        v37 = v27;
      v23 += 8;
    }
    while (v23 != v24);
    v28 = (char *)a1[7];
    v23 = (char *)a1[8];
  }
  sub_20BEF2D00((uint64_t)&__dst, (uint64_t)__dst, v28, v23, (v23 - v28) >> 3);
  v30 = (char *)a1[10];
  v31 = (char *)a1[11];
  if (v30 == v31)
  {
    v34 = v37;
    v35 = (char *)a1[10];
  }
  else
  {
    do
    {
      v32 = (char *)sub_20BEBD100(v42, v43, v30);
      if (v43 != v32)
        v43 = v32;
      v33 = sub_20BEBD100(__dst, v40, v30);
      if (v40 != v33)
        v40 = v33;
      v34 = sub_20BEBD100(v36, v37, v30);
      if (v37 != v34)
        v37 = v34;
      v30 += 8;
    }
    while (v30 != v31);
    v35 = (char *)a1[10];
    v30 = (char *)a1[11];
  }
  sub_20BEF2D00((uint64_t)&v36, (uint64_t)v34, v35, v30, (v30 - v35) >> 3);
  LOBYTE(v45) = 0;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems((uint64_t)&v45, (uint64_t)&v42);
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems((uint64_t)&v45, (uint64_t)&__dst);
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems((uint64_t)&v45, (uint64_t)&v36);
  sub_20C1247A0((uint64_t)a3, (uint64_t)&v45);
  sub_20C031968(&v45);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v29 = __dst;
  if (__dst)
  {
    v40 = __dst;
LABEL_66:
    operator delete(v29);
  }
LABEL_67:
  if (v42)
  {
    v43 = (char *)v42;
    operator delete(v42);
  }
}

void sub_20C10F7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ModifyOperations(__int128 *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C10F978(a2, (__int128 *)((char *)a1 + 8), a3);
  v7 = v6 | sub_20C10F978(a2, a1 + 2, a3);
  v8 = sub_20C10F978(a2, (__int128 *)((char *)a1 + 56), a3);
  v9 = v7 | v8 | sub_20C10F978(a2, a1 + 5, a3);
  v10 = sub_20C10F978(a2, (__int128 *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_20C10F978(a2, a1 + 8, a3);
}

uint64_t sub_20C10F978(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  void *v41[2];
  __int128 v42;
  void *__p[2];
  _QWORD v44[2];

  __p[0] = 0;
  __p[1] = 0;
  v44[0] = 0;
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  v3 = *(uint64_t **)a2;
  v4 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (*(uint64_t **)a2 == v4)
    goto LABEL_49;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    v39 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, v3);
    v40 = v10;
    v11 = v10;
    if (a3
      && (_BYTE)v10
      && (sub_20C1273E4((uint64_t *)v41, &v39), v11 = v40, (v12 & 1) == 0)
      && (_BYTE)v40
      || !v11)
    {
      v8 = 1;
      goto LABEL_46;
    }
    v13 = v39;
    v14 = (char *)__p[1];
    if (v39 == *v3)
    {
      if (__p[1] >= (void *)v44[0])
      {
        v17 = (char *)__p[0];
        v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          goto LABEL_58;
        v20 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)sub_20BDDF6A8((uint64_t)v44, v21);
          v17 = (char *)__p[0];
          v14 = (char *)__p[1];
          v13 = *v3;
        }
        else
        {
          v22 = 0;
        }
        v29 = (uint64_t *)&v22[8 * v18];
        *v29 = v13;
        v16 = v29 + 1;
        while (v14 != v17)
        {
          v30 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v29 = v30;
        }
        __p[0] = v29;
        __p[1] = v16;
        v44[0] = &v22[8 * v21];
        if (v17)
          operator delete(v17);
        goto LABEL_45;
      }
      *(_QWORD *)__p[1] = v39;
      v15 = v14 + 8;
    }
    else
    {
      if (__p[1] >= (void *)v44[0])
      {
        v23 = (char *)__p[0];
        v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
LABEL_58:
          sub_20BDDF694();
        v26 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8((uint64_t)v44, v27);
          v23 = (char *)__p[0];
          v14 = (char *)__p[1];
          v13 = v39;
        }
        else
        {
          v28 = 0;
        }
        v31 = (uint64_t *)&v28[8 * v24];
        *v31 = v13;
        v16 = v31 + 1;
        while (v14 != v23)
        {
          v32 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v31 = v32;
        }
        __p[0] = v31;
        __p[1] = v16;
        v44[0] = &v28[8 * v27];
        if (v23)
          operator delete(v23);
        v8 = 1;
        goto LABEL_45;
      }
      *(_QWORD *)__p[1] = v39;
      v15 = v14 + 8;
      v8 = 1;
    }
    v16 = v15;
LABEL_45:
    __p[1] = v16;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) != 0)
  {
    v33 = *a2;
    *a2 = *(_OWORD *)__p;
    *(_OWORD *)__p = v33;
    v34 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v44[0];
    v44[0] = v34;
    v35 = 1;
    goto LABEL_50;
  }
LABEL_49:
  v35 = 0;
LABEL_50:
  v36 = *((_QWORD *)&v42 + 1);
  *((_QWORD *)&v42 + 1) = 0;
  if (v36)
  {
    v37 = (void *)sub_20BEB3FA4(v36);
    operator delete(v37);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v35;
}

void sub_20C10FC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_20C125EA8((uint64_t)&a11);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ReplaceOperations(_BYTE *a1, int a2, unint64_t a3, uint64_t a4, char **a5)
{
  BOOL v10;
  uint64_t Items;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int64_t v20;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *__p;
  char *v28;
  uint64_t v29;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (!v10 && (a4 || *a5 == a5[1]))
    return 0;
  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems((uint64_t)a1, a2);
  v28 = 0;
  v29 = 0;
  __p = 0;
  sub_20C032914(&__p, *(const void **)Items, *(_QWORD *)(Items + 8), (uint64_t)(*(_QWORD *)(Items + 8) - *(_QWORD *)Items) >> 3);
  v12 = __p;
  v13 = (v28 - (_BYTE *)__p) >> 3;
  if (v13 >= a3)
  {
    if (a4 + a3 <= v13)
    {
      v15 = *a5;
      v16 = a5[1];
      v17 = (v16 - *a5) >> 3;
      if (v17 == a4)
      {
        if (v16 != v15)
          memmove((char *)__p + 8 * a3, *a5, v16 - *a5);
      }
      else
      {
        if (a4)
        {
          v18 = (char *)__p + 8 * a3;
          v19 = &v18[8 * a4];
          v20 = v28 - v19;
          if (v28 != v19)
          {
            memmove((char *)__p + 8 * a3, v19, v28 - v19);
            v12 = __p;
            v15 = *a5;
            v16 = a5[1];
            v17 = (v16 - *a5) >> 3;
          }
          v28 = &v18[v20];
        }
        sub_20BEF2D00((uint64_t)&__p, (uint64_t)v12 + 8 * a3, v15, v16, v17);
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetItems((uint64_t)a1, (uint64_t)&__p, a2);
      v14 = 1;
      goto LABEL_23;
    }
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 698;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ReplaceOperations(const SdfListOpType, size_t, si"
          "ze_t, const ItemVector &) [T = long long]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v28 - (_BYTE *)__p) >> 3);
  }
  else
  {
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 693;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ReplaceOperations(const SdfListOpType, size_t, si"
          "ze_t, const ItemVector &) [T = long long]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v28 - (_BYTE *)__p) >> 3);
  }
  v14 = 0;
LABEL_23:
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
  return v14;
}

void sub_20C10FE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  void **p_p;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20[2];
  uint64_t v21;
  uint64_t *v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems(a1, a2 + 8);
  Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(a1, a3);
  sub_20C127B0C(&v21, *Items, Items[1]);
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  for (i = v22; i != &v21; i = (uint64_t *)i[1])
  {
    __p = i + 2;
    sub_20C1270A8(&v19, i + 2, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p)[5] = (uint64_t)i;
  }
  switch(a3)
  {
    case 1:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys(a2, 1, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 2:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys(a2, 2, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 3:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
      p_p = v26;
      if (v26 == &__p)
      {
        v14 = 4;
        p_p = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_15;
        v14 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*p_p + v14))(p_p, v11, v12);
LABEL_15:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_ReorderKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
LABEL_16:
      v15 = v26;
      if (v26 == &__p)
      {
        v16 = 4;
        v15 = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_21;
        v16 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*v15 + v16))(v15, v8, v9);
LABEL_21:
      v24 = 0;
      v25 = 0;
      __p = 0;
      if (v22 == &v21)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = v22;
        do
        {
          ++v17;
          v18 = (uint64_t *)v18[1];
        }
        while (v18 != &v21);
      }
      sub_20C127BA0((char *)&__p, (uint64_t)v22, (uint64_t)&v21, v17);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetItems(a1, (uint64_t)&__p, a3);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      sub_20BE6100C((uint64_t)&v19, v20[0]);
      result = (char *)sub_20BEB422C(&v21);
      break;
    case 4:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_PrependKeys(a2, 4, (uint64_t)&__p, (uint64_t)&v21, &v19);
      goto LABEL_16;
    case 5:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AppendKeys(a2, 5, (uint64_t)&__p, &v21, &v19);
      goto LABEL_16;
    default:
      goto LABEL_21;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIxE17ComposeOperationsERKS1_NS_13SdfListOpTypeE(a1, a2, a3);
}

void sub_20C110138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19)
{
  void **v19;
  void **p_p;
  uint64_t v22;

  p_p = a19;
  if (a19 == v19)
  {
    v22 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*((void (**)(void))*p_p + v22))();
LABEL_6:
  sub_20BE6100C((uint64_t)&a9, a10);
  sub_20BEB422C(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  const void *v18;
  size_t v19;
  const void *v20;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v5 = a1 + 1;
  v4 = (const void *)a1[1];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 1;
  v7 = (const void *)a2[1];
  if (v6 != v8[1] - (_QWORD)v7)
    return 0;
  if (memcmp(v4, v7, v6))
    return 0;
  v9 = (const void *)a1[4];
  v10 = a1[5] - (_QWORD)v9;
  v11 = (const void *)a2[4];
  if (v10 != a2[5] - (_QWORD)v11)
    return 0;
  if (memcmp(v9, v11, v10))
    return 0;
  v12 = (const void *)a1[7];
  v13 = a1[8] - (_QWORD)v12;
  v14 = (const void *)a2[7];
  if (v13 != a2[8] - (_QWORD)v14)
    return 0;
  if (!memcmp(v12, v14, v13)
    && (v15 = (const void *)a1[10], v16 = a1[11] - (_QWORD)v15, v17 = (const void *)a2[10], v16 == a2[11] - (_QWORD)v17)
    && !memcmp(v15, v17, v16)
    && (v18 = (const void *)a1[13], v19 = a1[14] - (_QWORD)v18, v20 = (const void *)a2[13], v19 == a2[14] - (_QWORD)v20)
    && !memcmp(v18, v20, v19))
  {
    return sub_20C10A94C((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIxEeqERKS1_(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==(a1, a2);
}

uint64_t sub_20C1102C4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<long long>>::operator*() [T = std::vector"
            "<long long>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C110338()
{
  JUMPOUT(0x20C1102E8);
}

_QWORD *sub_20C110340(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<long long>>::operator++() ["
            "T = std::vector<long long>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<long long>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D00, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = long long]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C127CCC(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C127CCC(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C127CCC(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C127CCC(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C127CCC(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C127CCC(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsIxEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEES6_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C11060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::CreateExplicit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems(a2, a1);
}

void sub_20C1106C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyEC1Ev(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 8);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE16SetExplicitItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems(a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems(a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems(a4, a3);
}

void sub_20C1107EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C031968(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 56);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE17SetPrependedItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 80);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE16SetAppendedItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 104);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE15SetDeletedItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE4SwapERS1_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::HasItem(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v2 = *(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      while (*v3 != *a2)
      {
        if (++v3 == v2)
          goto LABEL_5;
      }
    }
    return v3 != v2;
  }
  v6 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD **)(a1 + 40);
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(_QWORD **)(a1 + 64);
    if (v8 != v7)
    {
      while (*v8 != *a2)
      {
        if (++v8 == v7)
        {
          v8 = *(_QWORD **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v10 = *(_QWORD **)(a1 + 80);
      v9 = *(_QWORD **)(a1 + 88);
      if (v10 != v9)
      {
        while (*v10 != *a2)
        {
          if (++v10 == v9)
          {
            v10 = *(_QWORD **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        v12 = *(_QWORD **)(a1 + 104);
        v11 = *(_QWORD **)(a1 + 112);
        if (v12 != v11)
        {
          while (*v12 != *a2)
          {
            if (++v12 == v11)
            {
              v12 = *(_QWORD **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          v3 = *(_QWORD **)(a1 + 128);
          v2 = *(_QWORD **)(a1 + 136);
          if (v3 != v2)
          {
            while (*v3 != *a2)
            {
              if (++v3 == v2)
              {
LABEL_5:
                v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::"
              "GetItems(SdfListOpType) const [T = unsigned long long]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetAppliedItems@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(a1, (uint64_t **)a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C110D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;
  void *v17;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(_QWORD *result, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  if (a2)
  {
    v5 = (uint64_t)result;
    v13 = (uint64_t)&v13;
    v14 = &v13;
    v15 = 0;
    if (*(_BYTE *)result)
    {
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys((uint64_t)result, 0, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(result[8] - result[7]) >> 3)
           + ((uint64_t)(result[11] - result[10]) >> 3)
           + ((uint64_t)(result[5] - result[4]) >> 3)
           + ((uint64_t)(result[14] - result[13]) >> 3)
           + ((uint64_t)(result[17] - result[16]) >> 3)))
      {
        return sub_20BEB422C(&v13);
      }
      sub_20C126FAC((uint64_t)&v13, &v13, *a2, a2[1]);
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t *)&v11;
      for (i = v14; i != &v13; i = (uint64_t *)i[1])
      {
        v16 = i + 2;
        sub_20C127DF0(&v10, (unint64_t *)i + 2, (uint64_t)&unk_20CAC184C, &v16)[5] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_DeleteKeys(v5, 2, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys(v5, 1, a3, &v13, (uint64_t)&v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_PrependKeys(v5, 4, a3, (uint64_t)&v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AppendKeys(v5, 5, a3, &v13, &v10);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_ReorderKeys(v5, 3, a3, &v13, (uint64_t)&v10);
      sub_20BE6100C((uint64_t)&v10, v11);
    }
    v7 = *a2;
    a2[1] = *a2;
    if (v14 == &v13)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = v14;
      do
      {
        ++v8;
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != &v13);
    }
    sub_20C127164((uint64_t)a2, (char *)v7, v14, &v13, v8);
    return sub_20BEB422C(&v13);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE15ApplyOperationsEPNSt3__16vectorIyNS2_9allocatorIyEEEERKNS2_8functionIFNS2_8optionalIyEENS_13SdfListOpTypeERKyEEE(result, a2, a3);
}

void sub_20C110FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEB422C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    *result = a2;
    *((_QWORD *)result + 2) = *((_QWORD *)result + 1);
    *((_QWORD *)result + 5) = *((_QWORD *)result + 4);
    *((_QWORD *)result + 8) = *((_QWORD *)result + 7);
    *((_QWORD *)result + 11) = *((_QWORD *)result + 10);
    *((_QWORD *)result + 14) = *((_QWORD *)result + 13);
    *((_QWORD *)result + 17) = *((_QWORD *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 32);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE13SetAddedItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  char *result;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  }
  result = (char *)(a1 + 128);
  if (result != (char *)a2)
    return sub_20BDDF7E4(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE15SetOrderedItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE8SetItemsERKNSt3__16vectorIyNS2_9allocatorIyEEEENS_13SdfListOpTypeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Clear(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit(uint64_t result)
{
  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 136) = *(_QWORD *)(result + 128);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpIyE20ClearAndMakeExplicitEv(result);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(a1, a2);
  v12 = result[1];
  v38 = *result;
  v39 = v12;
  if (v38 != v12)
  {
    v13 = (_QWORD *)(a5 + 8);
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEF130(&v38, v10, v11);
        LODWORD(v37[0]) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        v16 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v15 + 48))(v15, v37, v14);
        v37[0] = v16;
        v37[1] = v17;
        if (!(_BYTE)v17)
          goto LABEL_31;
        v18 = v16;
        v19 = (_QWORD *)*v13;
        if (*v13)
        {
          v20 = (_QWORD *)(a5 + 8);
          do
          {
            v21 = v19[4];
            v22 = v21 >= v16;
            if (v21 >= v16)
              v23 = v19;
            else
              v23 = v19 + 1;
            if (v22)
              v20 = v19;
            v19 = (_QWORD *)*v23;
          }
          while (*v23);
          if (v20 != v13 && v16 >= v20[4])
            goto LABEL_31;
        }
        v24 = operator new(0x18uLL);
        v24[2] = v18;
        v25 = *a4;
        *(_QWORD *)(v25 + 8) = v24;
        *a4 = (uint64_t)v24;
        *v24 = v25;
        v24[1] = a4;
        ++a4[2];
        v40 = v37;
        v26 = v37;
        v27 = &v40;
        v28 = (uint64_t **)a5;
      }
      else
      {
        v29 = (unint64_t *)sub_20BFEF130(&v38, v10, v11);
        v30 = (_QWORD *)*v13;
        v31 = *v29;
        if (*v13)
        {
          v32 = (_QWORD *)(a5 + 8);
          do
          {
            v33 = v30[4];
            v34 = v33 >= v31;
            if (v33 >= v31)
              v35 = v30;
            else
              v35 = v30 + 1;
            if (v34)
              v32 = v30;
            v30 = (_QWORD *)*v35;
          }
          while (*v35);
          if (v32 != v13 && v31 >= v32[4])
            goto LABEL_31;
        }
        v24 = operator new(0x18uLL);
        v24[2] = v31;
        v36 = *a4;
        *(_QWORD *)(v36 + 8) = v24;
        *a4 = (uint64_t)v24;
        *v24 = v36;
        v24[1] = a4;
        ++a4[2];
        v37[0] = v29;
        v27 = (uint64_t **)v37;
        v28 = (uint64_t **)a5;
        v26 = v29;
      }
      sub_20C127DF0(v28, v26, (uint64_t)&unk_20CAC184C, v27)[5] = (uint64_t)v24;
LABEL_31:
      result = sub_20BFEF1AC(&v38);
    }
    while (v38 != v39);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIyEES2_RKyEEEPNS3_4listIyNS3_9allocatorIyEEEEPNS3_3mapIyNS3_15__list_iteratorIyPvEENS3_4lessIyEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(a1, a2);
  v12 = result[1];
  v32 = *result;
  v33 = v12;
  if (v32 != v12)
  {
    v13 = (uint64_t *)(a5 + 1);
    do
    {
      v14 = *(_QWORD *)(a3 + 24);
      v15 = (_QWORD *)sub_20BFEF130(&v32, v10, v11);
      v16 = v15;
      if (v14)
      {
        v34 = a2;
        v17 = *(_QWORD *)(a3 + 24);
        if (!v17)
          sub_20BE9E974();
        v18 = (*(uint64_t (**)(uint64_t, int *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v34, v16);
        if (!v19)
          goto LABEL_30;
        v20 = (_QWORD *)*v13;
        if (!*v13)
          goto LABEL_30;
        v21 = (uint64_t *)(a5 + 1);
        do
        {
          v22 = v20[4];
          v23 = v22 >= v18;
          if (v22 >= v18)
            v24 = v20;
          else
            v24 = v20 + 1;
          if (v23)
            v21 = v20;
          v20 = (_QWORD *)*v24;
        }
        while (*v24);
        if (v21 == v13 || v18 < v21[4])
          goto LABEL_30;
      }
      else
      {
        v25 = (_QWORD *)*v13;
        if (!*v13)
          goto LABEL_30;
        v26 = *v15;
        v21 = (uint64_t *)(a5 + 1);
        do
        {
          v27 = v25[4];
          v28 = v27 >= v26;
          if (v27 >= v26)
            v29 = v25;
          else
            v29 = v25 + 1;
          if (v28)
            v21 = v25;
          v25 = (_QWORD *)*v29;
        }
        while (*v29);
        if (v21 == v13 || v26 < v21[4])
          goto LABEL_30;
      }
      v30 = (uint64_t *)v21[5];
      v31 = *v30;
      *(_QWORD *)(v31 + 8) = v30[1];
      *(_QWORD *)v30[1] = v31;
      --*(_QWORD *)(a4 + 16);
      operator delete(v30);
      sub_20BE10B80(a5, v21);
      operator delete(v21);
LABEL_30:
      result = sub_20BFEF1AC(&v32);
    }
    while (v32 != v33);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIyEES2_RKyEEEPNS3_4listIyNS3_9allocatorIyEEEEPNS3_3mapIyNS3_15__list_iteratorIyPvEENS3_4lessIyEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  BOOL v20;
  uint64_t **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  BOOL v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45[2];
  uint64_t **v46;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(a1, a2);
  v11 = *result;
  v10 = (uint64_t *)result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != (uint64_t *)*result)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v45[0]) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v45, --v10);
        v45[0] = result;
        v45[1] = v14;
        if ((_BYTE)v14)
        {
          v15 = result;
          v16 = *(uint64_t **)(a4 + 8);
          v17 = *v12;
          if (!*v12)
            goto LABEL_17;
          v18 = a5 + 1;
          do
          {
            v19 = v17[4];
            v20 = v19 >= (unint64_t)result;
            if (v19 >= (unint64_t)result)
              v21 = (uint64_t **)v17;
            else
              v21 = (uint64_t **)(v17 + 1);
            if (v20)
              v18 = (uint64_t **)v17;
            v17 = *v21;
          }
          while (*v21);
          if (v18 != v12 && result >= v18[4])
          {
            v24 = v18[5];
            if (v24 != v16)
            {
              v25 = (uint64_t *)v24[1];
              if (v24 != v25)
              {
                v26 = *v25;
                v27 = *v24;
                *(_QWORD *)(v27 + 8) = *(_QWORD *)(v26 + 8);
                **(_QWORD **)(v26 + 8) = v27;
                v28 = *v16;
                *(_QWORD *)(v28 + 8) = v24;
                *v24 = v28;
                *v16 = v26;
                *(_QWORD *)(v26 + 8) = v16;
              }
            }
          }
          else
          {
LABEL_17:
            v22 = operator new(0x18uLL);
            v22[2] = v15;
            v23 = *v16;
            *(_QWORD *)(v23 + 8) = v22;
            *v22 = v23;
            *v16 = (uint64_t)v22;
            v22[1] = v16;
            ++*(_QWORD *)(a4 + 16);
            v46 = v45;
            result = sub_20C127DF0(a5, (unint64_t *)v45, (uint64_t)&unk_20CAC184C, (uint64_t **)&v46);
            result[5] = (uint64_t)v22;
          }
        }
      }
      while (v10 != (uint64_t *)v11);
    }
  }
  else if (v10 != (uint64_t *)*result)
  {
    v29 = a5 + 1;
    do
    {
      v31 = *--v10;
      v30 = v31;
      v32 = *(uint64_t **)(a4 + 8);
      v33 = *v29;
      if (!*v29)
        goto LABEL_36;
      v34 = a5 + 1;
      do
      {
        v35 = v33[4];
        v36 = v35 >= v30;
        if (v35 >= v30)
          v37 = (uint64_t **)v33;
        else
          v37 = (uint64_t **)(v33 + 1);
        if (v36)
          v34 = (uint64_t **)v33;
        v33 = *v37;
      }
      while (*v37);
      if (v34 != v29 && v30 >= (unint64_t)v34[4])
      {
        v40 = v34[5];
        if (v40 != v32)
        {
          v41 = (uint64_t *)v40[1];
          if (v40 != v41)
          {
            v42 = *v41;
            v43 = *v40;
            *(_QWORD *)(v43 + 8) = *(_QWORD *)(v42 + 8);
            **(_QWORD **)(v42 + 8) = v43;
            v44 = *v32;
            *(_QWORD *)(v44 + 8) = v40;
            *v40 = v44;
            *v32 = v42;
            *(_QWORD *)(v42 + 8) = v32;
          }
        }
      }
      else
      {
LABEL_36:
        v38 = operator new(0x18uLL);
        v38[2] = v30;
        v39 = *v32;
        *(_QWORD *)(v39 + 8) = v38;
        *v38 = v39;
        *v32 = (uint64_t)v38;
        v38[1] = v32;
        ++*(_QWORD *)(a4 + 16);
        v45[0] = v10;
        result = sub_20C127DF0(a5, (unint64_t *)v10, (uint64_t)&unk_20CAC184C, v45);
        result[5] = (uint64_t)v38;
      }
    }
    while (v10 != (uint64_t *)v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIyEES2_RKyEEEPNS3_4listIyNS3_9allocatorIyEEEEPNS3_3mapIyNS3_15__list_iteratorIyPvEENS3_4lessIyEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  unint64_t v18;
  BOOL v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  BOOL v33;
  uint64_t **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42[2];
  uint64_t **v43;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(a1, a2);
  v10 = (uint64_t *)*result;
  v11 = (uint64_t *)result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if ((uint64_t *)*result != v11)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v42[0]) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v42, v10);
        v42[0] = result;
        v42[1] = v14;
        if ((_BYTE)v14)
        {
          v15 = result;
          v16 = *v12;
          if (!*v12)
            goto LABEL_17;
          v17 = a5 + 1;
          do
          {
            v18 = v16[4];
            v19 = v18 >= (unint64_t)result;
            if (v18 >= (unint64_t)result)
              v20 = (uint64_t **)v16;
            else
              v20 = (uint64_t **)(v16 + 1);
            if (v19)
              v17 = (uint64_t **)v16;
            v16 = *v20;
          }
          while (*v20);
          if (v17 != v12 && result >= v17[4])
          {
            v23 = v17[5];
            if (v23 != a4)
            {
              v24 = (uint64_t *)v23[1];
              if (v23 != v24)
              {
                v25 = *v24;
                v26 = *v23;
                *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 8);
                **(_QWORD **)(v25 + 8) = v26;
                v27 = *a4;
                *(_QWORD *)(v27 + 8) = v23;
                *v23 = v27;
                *a4 = v25;
                *(_QWORD *)(v25 + 8) = a4;
              }
            }
          }
          else
          {
LABEL_17:
            v21 = operator new(0x18uLL);
            v21[2] = v15;
            v22 = *a4;
            *(_QWORD *)(v22 + 8) = v21;
            *a4 = (uint64_t)v21;
            *v21 = v22;
            v21[1] = a4;
            ++a4[2];
            v43 = v42;
            result = sub_20C127DF0(a5, (unint64_t *)v42, (uint64_t)&unk_20CAC184C, (uint64_t **)&v43);
            result[5] = (uint64_t)v21;
          }
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else if ((uint64_t *)*result != v11)
  {
    v28 = a5 + 1;
    do
    {
      v29 = *v28;
      v30 = *v10;
      if (!*v28)
        goto LABEL_36;
      v31 = a5 + 1;
      do
      {
        v32 = v29[4];
        v33 = v32 >= v30;
        if (v32 >= v30)
          v34 = (uint64_t **)v29;
        else
          v34 = (uint64_t **)(v29 + 1);
        if (v33)
          v31 = (uint64_t **)v29;
        v29 = *v34;
      }
      while (*v34);
      if (v31 != v28 && v30 >= (unint64_t)v31[4])
      {
        v37 = v31[5];
        if (v37 != a4)
        {
          v38 = (uint64_t *)v37[1];
          if (v37 != v38)
          {
            v39 = *v38;
            v40 = *v37;
            *(_QWORD *)(v40 + 8) = *(_QWORD *)(v39 + 8);
            **(_QWORD **)(v39 + 8) = v40;
            v41 = *a4;
            *(_QWORD *)(v41 + 8) = v37;
            *v37 = v41;
            *a4 = v39;
            *(_QWORD *)(v39 + 8) = a4;
          }
        }
      }
      else
      {
LABEL_36:
        v35 = operator new(0x18uLL);
        v35[2] = v30;
        v36 = *a4;
        *(_QWORD *)(v36 + 8) = v35;
        *a4 = (uint64_t)v35;
        *v35 = v36;
        v35[1] = a4;
        ++a4[2];
        v42[0] = v10;
        result = sub_20C127DF0(a5, (unint64_t *)v10, (uint64_t)&unk_20CAC184C, v42);
        result[5] = (uint64_t)v35;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIyEES2_RKyEEEPNS3_4listIyNS3_9allocatorIyEEEEPNS3_3mapIyNS3_15__list_iteratorIyPvEENS3_4lessIyEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 *p_i;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 i;
  uint64_t v56;
  __int128 v57;
  uint64_t *v58;
  _QWORD *v59[2];
  void *__p[2];
  char *v61;
  int v62;

  __p[0] = 0;
  __p[1] = 0;
  v61 = 0;
  v59[0] = 0;
  v59[1] = 0;
  v58 = (uint64_t *)v59;
  for (i = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(a1, a2);
        (_QWORD)i != *((_QWORD *)&i + 1);
        sub_20BFEF1AC(&i))
  {
    if (!*(_QWORD *)(a3 + 24))
    {
      v17 = (unint64_t *)sub_20BFEF130((uint64_t *)&i, v9, v10);
      sub_20BEB968C(&v58, v17, (uint64_t *)v17);
      if ((v18 & 1) == 0)
        continue;
      v20 = (_QWORD *)sub_20BFEF130((uint64_t *)&i, v18, v19);
      v21 = v20;
      v15 = __p[1];
      if (__p[1] >= v61)
      {
        v23 = __p[0];
        v29 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          sub_20BDDF694();
        v31 = v61 - (char *)__p[0];
        if ((v61 - (char *)__p[0]) >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v30;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8((uint64_t)&v61, v27);
          v23 = __p[0];
          v15 = __p[1];
        }
        else
        {
          v28 = 0;
        }
        v32 = &v28[8 * v29];
        *(_QWORD *)v32 = *v21;
        v22 = v32 + 8;
        while (v15 != v23)
        {
          v34 = *--v15;
          *((_QWORD *)v32 - 1) = v34;
          v32 -= 8;
        }
        goto LABEL_37;
      }
      v16 = *v20;
LABEL_12:
      *v15 = v16;
      v22 = v15 + 1;
LABEL_39:
      __p[1] = v22;
      continue;
    }
    v11 = sub_20BFEF130((uint64_t *)&i, v9, v10);
    v62 = a2;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      sub_20BE9E974();
    *(_QWORD *)&v57 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(v12, &v62, v11);
    *((_QWORD *)&v57 + 1) = v13;
    if ((_BYTE)v13)
    {
      sub_20BEB968C(&v58, (unint64_t *)&v57, (uint64_t *)&v57);
      if ((v14 & 1) != 0)
      {
        v15 = __p[1];
        if (__p[1] < v61)
        {
          v16 = v57;
          goto LABEL_12;
        }
        v23 = __p[0];
        v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          sub_20BDDF694();
        v26 = v61 - (char *)__p[0];
        if ((v61 - (char *)__p[0]) >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8((uint64_t)&v61, v27);
          v23 = __p[0];
          v15 = __p[1];
        }
        else
        {
          v28 = 0;
        }
        v32 = &v28[8 * v24];
        *(_QWORD *)v32 = v57;
        v22 = v32 + 8;
        while (v15 != v23)
        {
          v33 = *--v15;
          *((_QWORD *)v32 - 1) = v33;
          v32 -= 8;
        }
LABEL_37:
        __p[0] = v32;
        __p[1] = v22;
        v61 = &v28[8 * v27];
        if (v23)
          operator delete(v23);
        goto LABEL_39;
      }
    }
  }
  if (__p[0] != __p[1])
  {
    *(_QWORD *)&i = &i;
    *((_QWORD *)&i + 1) = &i;
    v56 = 0;
    sub_20BEDEA80(&i, a4);
    v57 = *(_OWORD *)__p;
    v37 = (_QWORD *)(a5 + 8);
    while ((_QWORD)v57 != *((_QWORD *)&v57 + 1))
    {
      v38 = (unint64_t *)sub_20C112F68((uint64_t *)&v57, v35, v36);
      v39 = (_QWORD *)*v37;
      if (*v37)
      {
        v40 = *v38;
        v41 = v37;
        do
        {
          v42 = v39[4];
          v43 = v42 >= v40;
          if (v42 >= v40)
            v44 = v39;
          else
            v44 = v39 + 1;
          if (v43)
            v41 = v39;
          v39 = (_QWORD *)*v44;
        }
        while (*v44);
        if (v41 != v37 && v40 >= v41[4])
        {
          v45 = (_QWORD *)v41[5];
          p_i = &i;
          if ((__int128 *)v45[1] != &i)
          {
            p_i = (__int128 *)v45[1];
            do
            {
              if (v59[0])
              {
                v47 = *((_QWORD *)p_i + 2);
                v48 = v59[0];
                do
                {
                  v49 = v48[4];
                  if (v47 >= v49)
                  {
                    if (v49 >= v47)
                      goto LABEL_65;
                    ++v48;
                  }
                  v48 = (_QWORD *)*v48;
                }
                while (v48);
              }
              p_i = (__int128 *)*((_QWORD *)p_i + 1);
            }
            while (p_i != &i);
            p_i = &i;
          }
LABEL_65:
          if (!v56)
            goto LABEL_70;
          sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&i, v45, p_i);
        }
      }
      sub_20C112FE4(&v57);
    }
    v50 = v56;
    if (v56)
    {
      v51 = (uint64_t *)a4[1];
      v52 = i;
      v53 = **((_QWORD **)&i + 1);
      *(_QWORD *)(v53 + 8) = *(_QWORD *)(i + 8);
      **(_QWORD **)(v52 + 8) = v53;
      v54 = *v51;
      *(_QWORD *)(v54 + 8) = *((_QWORD *)&v52 + 1);
      **((_QWORD **)&v52 + 1) = v54;
      *v51 = v52;
      *(_QWORD *)(v52 + 8) = v51;
      a4[2] += v50;
      v56 = 0;
    }
LABEL_70:
    sub_20BEB422C(&i);
  }
  sub_20BE6100C((uint64_t)&v58, v59[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS3_8optionalIyEES2_RKyEEEPNS3_4listIyNS3_9allocatorIyEEEEPNS3_3mapIyNS3_15__list_iteratorIyPvEENS3_4lessIyEENSE_INS3_4pairIS7_SL_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C111E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_20BEB422C(&a9);
  sub_20BE6100C((uint64_t)&a16, a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *i;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  void *__dst;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46[2];
  void *v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C0340F4((uint64_t)a3, (uint64_t)a1);
    a3[152] = 1;
    return;
  }
  if (a1[4] != a1[5] || a1[16] != a1[17])
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_20BDE1364(&v42, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    v47[0] = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(a1, (uint64_t **)&v42, (uint64_t)&v45);
    v6 = (uint64_t *)v47[0];
    if (v47[0] == &v45)
    {
      v7 = 4;
      v6 = &v45;
    }
    else
    {
      if (!v47[0])
      {
LABEL_54:
        LOBYTE(v45) = 0;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems((uint64_t)&v45, (uint64_t)&v42);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v45);
        if (*((_QWORD *)&v53 + 1))
        {
          *(_QWORD *)&v54 = *((_QWORD *)&v53 + 1);
          operator delete(*((void **)&v53 + 1));
        }
        if ((_QWORD)v52)
        {
          *((_QWORD *)&v52 + 1) = v52;
          operator delete((void *)v52);
        }
        if (*((_QWORD *)&v50 + 1))
        {
          *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
          operator delete(*((void **)&v50 + 1));
        }
        if ((_QWORD)v49)
        {
          *((_QWORD *)&v49 + 1) = v49;
          operator delete((void *)v49);
        }
        if (v47[1])
        {
          *(void **)&v48 = v47[1];
          operator delete(v47[1]);
        }
        v29 = v46[0];
        if (!v46[0])
          goto LABEL_67;
        v46[1] = v46[0];
        goto LABEL_66;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_54;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a2 + 128) != *(_QWORD *)(a2 + 136))
  {
LABEL_5:
    *a3 = 0;
    a3[152] = 0;
    return;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  sub_20BDE1364(&v42, *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  __dst = 0;
  v40 = 0;
  v41 = 0;
  sub_20BDE1364(&__dst, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_20BDE1364(&v36, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  v8 = (_QWORD *)a1[13];
  for (i = (_QWORD *)a1[14]; v8 != i; ++v8)
  {
    v10 = sub_20BEBD100(__dst, v40, v8);
    if (v40 != v10)
      v40 = v10;
    v11 = sub_20BEBD100(v36, v37, v8);
    if (v37 != v11)
      v37 = v11;
    v12 = (char *)v42;
    v13 = v43;
    if (v42 == v43)
    {
      v14 = (char *)v42;
    }
    else
    {
      v14 = (char *)v42;
      while (*(_QWORD *)v14 != *v8)
      {
        v14 += 8;
        if (v14 == v43)
        {
          v14 = v43;
          break;
        }
      }
    }
    if (v14 == v43)
    {
      if ((unint64_t)v43 >= v44)
      {
        v16 = (v43 - (_BYTE *)v42) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_20BDDF694();
        v18 = v44 - (_QWORD)v42;
        if ((uint64_t)(v44 - (_QWORD)v42) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_20BDDF6A8((uint64_t)&v44, v19);
          v12 = (char *)v42;
          v13 = v43;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = *v8;
        v15 = v21 + 8;
        while (v13 != v12)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        v42 = v21;
        v43 = v15;
        v44 = (unint64_t)&v20[8 * v19];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_QWORD *)v43 = *v8;
        v15 = v13 + 8;
      }
      v43 = v15;
    }
  }
  v23 = (char *)a1[7];
  v24 = (char *)a1[8];
  if (v23 == v24)
  {
    v28 = (char *)a1[7];
  }
  else
  {
    do
    {
      v25 = (char *)sub_20BEBD100(v42, v43, v23);
      if (v43 != v25)
        v43 = v25;
      v26 = sub_20BEBD100(__dst, v40, v23);
      if (v40 != v26)
        v40 = v26;
      v27 = sub_20BEBD100(v36, v37, v23);
      if (v37 != v27)
        v37 = v27;
      v23 += 8;
    }
    while (v23 != v24);
    v28 = (char *)a1[7];
    v23 = (char *)a1[8];
  }
  sub_20BEF2D00((uint64_t)&__dst, (uint64_t)__dst, v28, v23, (v23 - v28) >> 3);
  v30 = (char *)a1[10];
  v31 = (char *)a1[11];
  if (v30 == v31)
  {
    v34 = v37;
    v35 = (char *)a1[10];
  }
  else
  {
    do
    {
      v32 = (char *)sub_20BEBD100(v42, v43, v30);
      if (v43 != v32)
        v43 = v32;
      v33 = sub_20BEBD100(__dst, v40, v30);
      if (v40 != v33)
        v40 = v33;
      v34 = sub_20BEBD100(v36, v37, v30);
      if (v37 != v34)
        v37 = v34;
      v30 += 8;
    }
    while (v30 != v31);
    v35 = (char *)a1[10];
    v30 = (char *)a1[11];
  }
  sub_20BEF2D00((uint64_t)&v36, (uint64_t)v34, v35, v30, (v30 - v35) >> 3);
  LOBYTE(v45) = 0;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems((uint64_t)&v45, (uint64_t)&v42);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems((uint64_t)&v45, (uint64_t)&__dst);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems((uint64_t)&v45, (uint64_t)&v36);
  sub_20C1247A0((uint64_t)a3, (uint64_t)&v45);
  sub_20C031968(&v45);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v29 = __dst;
  if (__dst)
  {
    v40 = __dst;
LABEL_66:
    operator delete(v29);
  }
LABEL_67:
  if (v42)
  {
    v43 = (char *)v42;
    operator delete(v42);
  }
}

void sub_20C112488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ModifyOperations(__int128 *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C11261C(a2, (__int128 *)((char *)a1 + 8), a3);
  v7 = v6 | sub_20C11261C(a2, a1 + 2, a3);
  v8 = sub_20C11261C(a2, (__int128 *)((char *)a1 + 56), a3);
  v9 = v7 | v8 | sub_20C11261C(a2, a1 + 5, a3);
  v10 = sub_20C11261C(a2, (__int128 *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_20C11261C(a2, a1 + 8, a3);
}

uint64_t sub_20C11261C(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  void *v41[2];
  __int128 v42;
  void *__p[2];
  _QWORD v44[2];

  __p[0] = 0;
  __p[1] = 0;
  v44[0] = 0;
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  v3 = *(uint64_t **)a2;
  v4 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (*(uint64_t **)a2 == v4)
    goto LABEL_49;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    v39 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, v3);
    v40 = v10;
    v11 = v10;
    if (a3
      && (_BYTE)v10
      && (sub_20C127EAC((uint64_t *)v41, &v39), v11 = v40, (v12 & 1) == 0)
      && (_BYTE)v40
      || !v11)
    {
      v8 = 1;
      goto LABEL_46;
    }
    v13 = v39;
    v14 = (char *)__p[1];
    if (v39 == *v3)
    {
      if (__p[1] >= (void *)v44[0])
      {
        v17 = (char *)__p[0];
        v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          goto LABEL_58;
        v20 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)sub_20BDDF6A8((uint64_t)v44, v21);
          v17 = (char *)__p[0];
          v14 = (char *)__p[1];
          v13 = *v3;
        }
        else
        {
          v22 = 0;
        }
        v29 = (uint64_t *)&v22[8 * v18];
        *v29 = v13;
        v16 = v29 + 1;
        while (v14 != v17)
        {
          v30 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v29 = v30;
        }
        __p[0] = v29;
        __p[1] = v16;
        v44[0] = &v22[8 * v21];
        if (v17)
          operator delete(v17);
        goto LABEL_45;
      }
      *(_QWORD *)__p[1] = v39;
      v15 = v14 + 8;
    }
    else
    {
      if (__p[1] >= (void *)v44[0])
      {
        v23 = (char *)__p[0];
        v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
LABEL_58:
          sub_20BDDF694();
        v26 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8((uint64_t)v44, v27);
          v23 = (char *)__p[0];
          v14 = (char *)__p[1];
          v13 = v39;
        }
        else
        {
          v28 = 0;
        }
        v31 = (uint64_t *)&v28[8 * v24];
        *v31 = v13;
        v16 = v31 + 1;
        while (v14 != v23)
        {
          v32 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v31 = v32;
        }
        __p[0] = v31;
        __p[1] = v16;
        v44[0] = &v28[8 * v27];
        if (v23)
          operator delete(v23);
        v8 = 1;
        goto LABEL_45;
      }
      *(_QWORD *)__p[1] = v39;
      v15 = v14 + 8;
      v8 = 1;
    }
    v16 = v15;
LABEL_45:
    __p[1] = v16;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) != 0)
  {
    v33 = *a2;
    *a2 = *(_OWORD *)__p;
    *(_OWORD *)__p = v33;
    v34 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v44[0];
    v44[0] = v34;
    v35 = 1;
    goto LABEL_50;
  }
LABEL_49:
  v35 = 0;
LABEL_50:
  v36 = *((_QWORD *)&v42 + 1);
  *((_QWORD *)&v42 + 1) = 0;
  if (v36)
  {
    v37 = (void *)sub_20BEB3FA4(v36);
    operator delete(v37);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v35;
}

void sub_20C1128BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_20C125EA8((uint64_t)&a11);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ReplaceOperations(_BYTE *a1, int a2, unint64_t a3, uint64_t a4, char **a5)
{
  BOOL v10;
  uint64_t Items;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int64_t v20;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *__p;
  char *v28;
  uint64_t v29;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (!v10 && (a4 || *a5 == a5[1]))
    return 0;
  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems((uint64_t)a1, a2);
  v28 = 0;
  v29 = 0;
  __p = 0;
  sub_20BDE1364(&__p, *(const void **)Items, *(_QWORD *)(Items + 8), (uint64_t)(*(_QWORD *)(Items + 8) - *(_QWORD *)Items) >> 3);
  v12 = __p;
  v13 = (v28 - (_BYTE *)__p) >> 3;
  if (v13 >= a3)
  {
    if (a4 + a3 <= v13)
    {
      v15 = *a5;
      v16 = a5[1];
      v17 = (v16 - *a5) >> 3;
      if (v17 == a4)
      {
        if (v16 != v15)
          memmove((char *)__p + 8 * a3, *a5, v16 - *a5);
      }
      else
      {
        if (a4)
        {
          v18 = (char *)__p + 8 * a3;
          v19 = &v18[8 * a4];
          v20 = v28 - v19;
          if (v28 != v19)
          {
            memmove((char *)__p + 8 * a3, v19, v28 - v19);
            v12 = __p;
            v15 = *a5;
            v16 = a5[1];
            v17 = (v16 - *a5) >> 3;
          }
          v28 = &v18[v20];
        }
        sub_20BEF2D00((uint64_t)&__p, (uint64_t)v12 + 8 * a3, v15, v16, v17);
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetItems((uint64_t)a1, (uint64_t)&__p, a2);
      v14 = 1;
      goto LABEL_23;
    }
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 698;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ReplaceOperations(const SdfListOpType, s"
          "ize_t, size_t, const ItemVector &) [T = unsigned long long]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v28 - (_BYTE *)__p) >> 3);
  }
  else
  {
    v22 = "sdf/listOp.cpp";
    v23 = "ReplaceOperations";
    v24 = 693;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ReplaceOperations(const SdfListOpType, s"
          "ize_t, size_t, const ItemVector &) [T = unsigned long long]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v28 - (_BYTE *)__p) >> 3);
  }
  v14 = 0;
LABEL_23:
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
  return v14;
}

void sub_20C112AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  void **p_p;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20[2];
  uint64_t v21;
  uint64_t *v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems(a1, a2 + 8);
  Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(a1, a3);
  sub_20C127B0C(&v21, *Items, Items[1]);
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  for (i = v22; i != &v21; i = (uint64_t *)i[1])
  {
    __p = i + 2;
    sub_20C127DF0(&v19, (unint64_t *)i + 2, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p)[5] = (uint64_t)i;
  }
  switch(a3)
  {
    case 1:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys(a2, 1, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 2:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys(a2, 2, (uint64_t)&__p, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 3:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
      p_p = v26;
      if (v26 == &__p)
      {
        v14 = 4;
        p_p = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_15;
        v14 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*p_p + v14))(p_p, v11, v12);
LABEL_15:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_ReorderKeys(a2, 3, (uint64_t)&__p, &v21, (uint64_t)&v19);
LABEL_16:
      v15 = v26;
      if (v26 == &__p)
      {
        v16 = 4;
        v15 = &__p;
      }
      else
      {
        if (!v26)
          goto LABEL_21;
        v16 = 5;
      }
      (*((void (**)(void **, uint64_t, uint64_t))*v15 + v16))(v15, v8, v9);
LABEL_21:
      v24 = 0;
      v25 = 0;
      __p = 0;
      if (v22 == &v21)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = v22;
        do
        {
          ++v17;
          v18 = (uint64_t *)v18[1];
        }
        while (v18 != &v21);
      }
      sub_20C1280FC((char *)&__p, (uint64_t)v22, (uint64_t)&v21, v17);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetItems(a1, (uint64_t)&__p, a3);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      sub_20BE6100C((uint64_t)&v19, v20[0]);
      result = (char *)sub_20BEB422C(&v21);
      break;
    case 4:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_PrependKeys(a2, 4, (uint64_t)&__p, (uint64_t)&v21, &v19);
      goto LABEL_16;
    case 5:
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AppendKeys(a2, 5, (uint64_t)&__p, &v21, &v19);
      goto LABEL_16;
    default:
      goto LABEL_21;
  }
  return result;
}

void sub_20C112DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19)
{
  void **v19;
  void **p_p;
  uint64_t v22;

  p_p = a19;
  if (a19 == v19)
  {
    v22 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*((void (**)(void))*p_p + v22))();
LABEL_6:
  sub_20BE6100C((uint64_t)&a9, a10);
  sub_20BEB422C(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  const void *v18;
  size_t v19;
  const void *v20;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v5 = a1 + 1;
  v4 = (const void *)a1[1];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 1;
  v7 = (const void *)a2[1];
  if (v6 != v8[1] - (_QWORD)v7)
    return 0;
  if (memcmp(v4, v7, v6))
    return 0;
  v9 = (const void *)a1[4];
  v10 = a1[5] - (_QWORD)v9;
  v11 = (const void *)a2[4];
  if (v10 != a2[5] - (_QWORD)v11)
    return 0;
  if (memcmp(v9, v11, v10))
    return 0;
  v12 = (const void *)a1[7];
  v13 = a1[8] - (_QWORD)v12;
  v14 = (const void *)a2[7];
  if (v13 != a2[8] - (_QWORD)v14)
    return 0;
  if (!memcmp(v12, v14, v13)
    && (v15 = (const void *)a1[10], v16 = a1[11] - (_QWORD)v15, v17 = (const void *)a2[10], v16 == a2[11] - (_QWORD)v17)
    && !memcmp(v15, v17, v16)
    && (v18 = (const void *)a1[13], v19 = a1[14] - (_QWORD)v18, v20 = (const void *)a2[13], v19 == a2[14] - (_QWORD)v20)
    && !memcmp(v18, v20, v19))
  {
    return sub_20C10A94C((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpIyEeqERKS1_(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==(a1, a2);
}

uint64_t sub_20C112F68(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned long long>>::operator*() [T = st"
            "d::vector<unsigned long long>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C112FDC()
{
  JUMPOUT(0x20C112F8CLL);
}

_QWORD *sub_20C112FE4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned long long>>::opera"
            "tor++() [T = std::vector<unsigned long long>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D20, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = unsigned long long]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C128170(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C128170(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C128170(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C128170(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C128170(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C128170(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsIyEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEES6_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C1132B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::CreateExplicit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems((uint64_t *)a2, a1);
}

void sub_20C11336C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C020EAC(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC1Ev(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 1);
  if (a1 + 1 != (uint64_t *)a2)
    sub_20BE75818((uint64_t)(a1 + 1), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE16SetExplicitItemsERKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems((uint64_t *)a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems((uint64_t *)a4, a2);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems((uint64_t *)a4, a3);
}

void sub_20C113484(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C020EAC(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 0);
  if (a1 + 7 != (uint64_t *)a2)
    sub_20BE75818((uint64_t)(a1 + 7), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE17SetPrependedItemsERKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 0);
  if (a1 + 10 != (uint64_t *)a2)
    sub_20BE75818((uint64_t)(a1 + 10), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE16SetAppendedItemsERKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 0);
  if (a1 + 13 != (uint64_t *)a2)
    sub_20BE75818((uint64_t)(a1 + 13), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE15SetDeletedItemsERKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE4SwapERS8_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE7HasKeysEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::HasItem(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  if (*(_BYTE *)a1)
  {
    v5 = (_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    return sub_20C020210(v6, v4, a2) != *v5;
  }
  if (sub_20C020210(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2) == *(_QWORD *)(a1 + 40)
    && sub_20C020210(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), a2) == *(_QWORD *)(a1 + 64)
    && sub_20C020210(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a2) == *(_QWORD *)(a1 + 88)
    && sub_20C020210(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), a2) == *(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 136);
    v5 = (_QWORD *)(a1 + 136);
    v4 = v8;
    v6 = *(v5 - 1);
    return sub_20C020210(v6, v4, a2) != *v5;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItem"
              "s(SdfListOpType) const [T = std::string]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetAppliedItems@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C1139B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20BDE5038(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13[2];
  uint64_t v14;
  __int128 *v15;

  if (a2)
  {
    v12 = (uint64_t)&v12;
    *(_QWORD *)v13 = &v12;
    v14 = 0;
    if (*(_BYTE *)a1)
    {
      v10 = 0;
      v11 = 0;
      v9 = &v10;
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys(a1, 0, a3, &v12, (uint64_t **)&v9);
      sub_20BDECAB8((uint64_t)&v9, v10);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
         - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3)
         - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3)
         - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3) == 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3))
      {
LABEL_15:
        sub_20BEDD928(&v12);
        return;
      }
      sub_20C128294((uint64_t)&v12, &v12, *a2, a2[1]);
      v10 = 0;
      v11 = 0;
      v9 = &v10;
      for (i = *(_QWORD *)v13; (uint64_t *)i != &v12; i = *(_QWORD *)(i + 8))
      {
        v15 = (__int128 *)(i + 16);
        sub_20BE9DDE4((uint64_t **)&v9, (const void **)(i + 16), (uint64_t)&unk_20CAC184C, &v15)[7] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_DeleteKeys(a1, 2, a3, (uint64_t)&v12, (uint64_t **)&v9);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys(a1, 1, a3, &v12, (uint64_t **)&v9);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_PrependKeys(a1, 4, a3, (uint64_t)&v12, (uint64_t **)&v9);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AppendKeys(a1, 5, a3, &v12, (uint64_t **)&v9);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_ReorderKeys(a1, 3, a3, &v12, (uint64_t)&v9);
      sub_20BDECAB8((uint64_t)&v9, v10);
    }
    sub_20BDE5078(a2);
    if (*(uint64_t **)v13 == &v12)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = *(uint64_t **)v13;
      do
      {
        ++v7;
        v8 = (uint64_t *)v8[1];
      }
      while (v8 != &v12);
    }
    sub_20C128410(a2, (__int128 *)a2[1], *(_QWORD **)v13, (uint64_t)&v12, v7);
    goto LABEL_15;
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE15ApplyOperationsEPNS1_6vectorIS7_NS5_IS7_EEEERKNS1_8functionIFNS1_8optionalIS7_EENS_13SdfListOpTypeERKS7_EEE(a1, a2, a3);
}

void sub_20C113C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEDD928((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(uint64_t *a1, int a2)
{
  uint64_t *v3;

  if (*(unsigned __int8 *)a1 != a2)
  {
    *(_BYTE *)a1 = a2;
    v3 = a1 + 16;
    sub_20BDE5078(a1 + 1);
    sub_20BDE5078(a1 + 4);
    sub_20BDE5078(a1 + 7);
    sub_20BDE5078(a1 + 10);
    sub_20BDE5078(a1 + 13);
    sub_20BDE5078(v3);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE12_SetExplicitEb(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 0);
  if (a1 + 4 != (uint64_t *)a2)
    sub_20BE75818((uint64_t)(a1 + 4), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE13SetAddedItemsERKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 0);
  if (a1 + 16 != (uint64_t *)a2)
    sub_20BE75818((uint64_t)(a1 + 16), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE15SetOrderedItemsERKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetItems(uint64_t *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems(a1, a2);
      break;
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems(a1, a2);
      break;
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems(a1, a2);
      break;
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems(a1, a2);
      break;
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems(a1, a2);
      break;
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems(a1, a2);
      break;
    default:
      return;
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE8SetItemsERKNS1_6vectorIS7_NS5_IS7_EEEENS_13SdfListOpTypeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Clear(uint64_t *a1)
{
  *(_BYTE *)a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 0);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit(uint64_t *a1)
{
  *(_BYTE *)a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(a1, 1);
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE20ClearAndMakeExplicitEv(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1, a2);
  v12 = result[1];
  v24 = *result;
  v25 = v12;
  if (v24 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BF44378(&v24, v10, v11);
        LODWORD(v26) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(void **__return_ptr, uint64_t, void ***, uint64_t))(*(_QWORD *)v15 + 48))(__p, v15, &v26, v14);
        if (v23)
        {
          if (v13 == (uint64_t **)sub_20BDEEBA4((uint64_t)a5, (const void **)__p))
          {
            v16 = sub_20BEDE334((uint64_t)a4, 0, 0, (uint64_t)__p);
            v17 = *a4;
            *(_QWORD *)(v17 + 8) = v16;
            *v16 = v17;
            *a4 = (uint64_t)v16;
            v16[1] = a4;
            ++a4[2];
            v26 = __p;
            sub_20BE9DDE4(a5, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v26)[7] = (uint64_t)v16;
          }
          if (v23)
          {
            if (v22 < 0)
              operator delete(__p[0]);
          }
        }
      }
      else
      {
        v18 = (void *)sub_20BF44378(&v24, v10, v11);
        if (v13 == (uint64_t **)sub_20BDEEBA4((uint64_t)a5, (const void **)v18))
        {
          v19 = sub_20BEDE334((uint64_t)a4, 0, 0, (uint64_t)v18);
          v20 = *a4;
          *(_QWORD *)(v20 + 8) = v19;
          *v19 = v20;
          *a4 = (uint64_t)v19;
          v19[1] = a4;
          ++a4[2];
          __p[0] = v18;
          sub_20BE9DDE4(a5, (const void **)v18, (uint64_t)&unk_20CAC184C, (__int128 **)__p)[7] = (uint64_t)v19;
        }
      }
      result = sub_20BF4457C(&v24);
    }
    while (v24 != v25);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE8_AddKeysENS_13SdfListOpTypeERKNS1_8functionIFNS1_8optionalIS7_EES9_RKS7_EEEPNS1_4listIS7_NS5_IS7_EEEEPNS1_3mapIS7_NS1_15__list_iteratorIS7_PvEENS1_4lessIS7_EENS5_INS1_4pairISD_SQ_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C113FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *__p[2];
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1, a2);
  v12 = result[1];
  v28 = *result;
  v29 = v12;
  if (v28 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BF44378(&v28, v10, v11);
        v30 = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(void **__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(__p, v15, &v30, v14);
        if (v27)
        {
          v16 = sub_20BDEEBA4((uint64_t)a5, (const void **)__p);
          v17 = v16;
          if (v13 != (uint64_t **)v16)
          {
            v18 = *(_QWORD *)(v16 + 56);
            v19 = *(_QWORD **)v18;
            v19[1] = *(_QWORD *)(v18 + 8);
            **(_QWORD **)(v18 + 8) = v19;
            --*(_QWORD *)(a4 + 16);
            sub_20BEDD988(a4, (void **)v18);
            sub_20BE10B40(a5, v17);
          }
          if (v27)
          {
            if (v26 < 0)
              operator delete(__p[0]);
          }
        }
      }
      else
      {
        v20 = (const void **)sub_20BF44378(&v28, v10, v11);
        v21 = sub_20BDEEBA4((uint64_t)a5, v20);
        if (v13 != (uint64_t **)v21)
        {
          v22 = v21;
          v23 = *(_QWORD *)(v21 + 56);
          v24 = *(_QWORD **)v23;
          v24[1] = *(_QWORD *)(v23 + 8);
          **(_QWORD **)(v23 + 8) = v24;
          --*(_QWORD *)(a4 + 16);
          sub_20BEDD988(a4, (void **)v23);
          sub_20BE10B40(a5, v22);
        }
      }
      result = sub_20BF4457C(&v28);
    }
    while (v28 != v29);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE11_DeleteKeysENS_13SdfListOpTypeERKNS1_8functionIFNS1_8optionalIS7_EES9_RKS7_EEEPNS1_4listIS7_NS5_IS7_EEEEPNS1_3mapIS7_NS1_15__list_iteratorIS7_PvEENS1_4lessIS7_EENS5_INS1_4pairISD_SQ_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C114130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  const void ***Items;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *__p[2];
  char v32;
  char v33;
  void **v34;

  Items = (const void ***)pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1, a2);
  v11 = *Items;
  v10 = Items[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *Items)
    {
      do
      {
        LODWORD(v34) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        v10 -= 3;
        (*(void (**)(void **__return_ptr, uint64_t, void ***, const void **))(*(_QWORD *)v12 + 48))(__p, v12, &v34, v10);
        if (v33)
        {
          v13 = *(uint64_t **)(a4 + 8);
          v14 = sub_20BDEEBA4((uint64_t)a5, (const void **)__p);
          if (a5 + 1 == (uint64_t **)v14)
          {
            v20 = sub_20BEDE334(a4, 0, 0, (uint64_t)__p);
            v21 = *v13;
            *(_QWORD *)(v21 + 8) = v20;
            *v20 = v21;
            *v13 = (uint64_t)v20;
            v20[1] = v13;
            ++*(_QWORD *)(a4 + 16);
            v34 = __p;
            sub_20BE9DDE4(a5, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v34)[7] = (uint64_t)v20;
          }
          else
          {
            v15 = *(uint64_t **)(v14 + 56);
            if (v15 != v13)
            {
              v16 = (uint64_t *)v15[1];
              if (v15 != v16)
              {
                v17 = *v16;
                v18 = *v15;
                *(_QWORD *)(v18 + 8) = *(_QWORD *)(v17 + 8);
                **(_QWORD **)(v17 + 8) = v18;
                v19 = *v13;
                *(_QWORD *)(v19 + 8) = v15;
                *v15 = v19;
                *v13 = v17;
                *(_QWORD *)(v17 + 8) = v13;
              }
            }
          }
          if (v33)
          {
            if (v32 < 0)
              operator delete(__p[0]);
          }
        }
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *Items)
  {
    do
    {
      v10 -= 3;
      v22 = *(uint64_t **)(a4 + 8);
      v23 = sub_20BDEEBA4((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)v23)
      {
        v29 = sub_20BEDE334(a4, 0, 0, (uint64_t)v10);
        v30 = *v22;
        *(_QWORD *)(v30 + 8) = v29;
        *v29 = v30;
        *v22 = (uint64_t)v29;
        v29[1] = v22;
        ++*(_QWORD *)(a4 + 16);
        __p[0] = v10;
        sub_20BE9DDE4(a5, v10, (uint64_t)&unk_20CAC184C, (__int128 **)__p)[7] = (uint64_t)v29;
      }
      else
      {
        v24 = *(uint64_t **)(v23 + 56);
        if (v24 != v22)
        {
          v25 = (uint64_t *)v24[1];
          if (v24 != v25)
          {
            v26 = *v25;
            v27 = *v24;
            *(_QWORD *)(v27 + 8) = *(_QWORD *)(v26 + 8);
            **(_QWORD **)(v26 + 8) = v27;
            v28 = *v22;
            *(_QWORD *)(v28 + 8) = v24;
            *v24 = v28;
            *v22 = v26;
            *(_QWORD *)(v26 + 8) = v22;
          }
        }
      }
    }
    while (v10 != v11);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE12_PrependKeysENS_13SdfListOpTypeERKNS1_8functionIFNS1_8optionalIS7_EES9_RKS7_EEEPNS1_4listIS7_NS5_IS7_EEEEPNS1_3mapIS7_NS1_15__list_iteratorIS7_PvEENS1_4lessIS7_EENS5_INS1_4pairISD_SQ_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1143B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t Items;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v30;
  char v31;
  void **v32;

  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1, a2);
  v10 = *(const void ***)Items;
  v11 = *(const void ***)(Items + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (*(const void ***)Items != v11)
    {
      do
      {
        LODWORD(v32) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        (*(void (**)(void **__return_ptr, uint64_t, void ***, const void **))(*(_QWORD *)v12 + 48))(__p, v12, &v32, v10);
        if (v31)
        {
          v13 = sub_20BDEEBA4((uint64_t)a5, (const void **)__p);
          if (a5 + 1 == (uint64_t **)v13)
          {
            v19 = sub_20BEDE334((uint64_t)a4, 0, 0, (uint64_t)__p);
            v20 = *a4;
            *(_QWORD *)(v20 + 8) = v19;
            *v19 = v20;
            *a4 = (uint64_t)v19;
            v19[1] = a4;
            ++a4[2];
            v32 = __p;
            sub_20BE9DDE4(a5, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v32)[7] = (uint64_t)v19;
          }
          else
          {
            v14 = *(uint64_t **)(v13 + 56);
            if (v14 != a4)
            {
              v15 = (uint64_t *)v14[1];
              if (v14 != v15)
              {
                v16 = *v15;
                v17 = *v14;
                *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
                **(_QWORD **)(v16 + 8) = v17;
                v18 = *a4;
                *(_QWORD *)(v18 + 8) = v14;
                *v14 = v18;
                *a4 = v16;
                *(_QWORD *)(v16 + 8) = a4;
              }
            }
          }
          if (v31)
          {
            if (v30 < 0)
              operator delete(__p[0]);
          }
        }
        v10 += 3;
      }
      while (v10 != v11);
    }
  }
  else if (*(const void ***)Items != v11)
  {
    do
    {
      v21 = sub_20BDEEBA4((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)v21)
      {
        v27 = sub_20BEDE334((uint64_t)a4, 0, 0, (uint64_t)v10);
        v28 = *a4;
        *(_QWORD *)(v28 + 8) = v27;
        *v27 = v28;
        *a4 = (uint64_t)v27;
        v27[1] = a4;
        ++a4[2];
        __p[0] = v10;
        sub_20BE9DDE4(a5, v10, (uint64_t)&unk_20CAC184C, (__int128 **)__p)[7] = (uint64_t)v27;
      }
      else
      {
        v22 = *(uint64_t **)(v21 + 56);
        if (v22 != a4)
        {
          v23 = (uint64_t *)v22[1];
          if (v22 != v23)
          {
            v24 = *v23;
            v25 = *v22;
            *(_QWORD *)(v25 + 8) = *(_QWORD *)(v24 + 8);
            **(_QWORD **)(v24 + 8) = v25;
            v26 = *a4;
            *(_QWORD *)(v26 + 8) = v22;
            *v22 = v26;
            *a4 = v24;
            *(_QWORD *)(v24 + 8) = a4;
          }
        }
      }
      v10 += 3;
    }
    while (v10 != v11);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE11_AppendKeysENS_13SdfListOpTypeERKNS1_8functionIFNS1_8optionalIS7_EES9_RKS7_EEEPNS1_4listIS7_NS5_IS7_EEEEPNS1_3mapIS7_NS1_15__list_iteratorIS7_PvEENS1_4lessIS7_EENS5_INS1_4pairISD_SQ_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C114628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  __int128 v15;
  const void **v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD **v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  uint64_t v39[3];
  char **v40;
  char *v41[2];
  __int128 v42;
  unint64_t v43;
  int v44;

  v42 = 0uLL;
  v43 = 0;
  v41[0] = 0;
  v41[1] = 0;
  v40 = v41;
  *(_OWORD *)v39 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1, a2);
  while (v39[0] != v39[1])
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v11 = sub_20BF44378(v39, v9, v10);
      v44 = a2;
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(void **__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(__p, v12, &v44, v11);
      if (v38)
      {
        sub_20BE74FC0((uint64_t **)&v40, (const void **)__p, (uint64_t)__p);
        if ((v13 & 1) != 0)
        {
          v14 = (_OWORD *)*((_QWORD *)&v42 + 1);
          if (*((_QWORD *)&v42 + 1) >= v43)
          {
            v22 = sub_20BE4EE50((uint64_t *)&v42, (__int128 *)__p);
          }
          else
          {
            if (SHIBYTE(v37) < 0)
            {
              sub_20BDDBFAC(*((_BYTE **)&v42 + 1), __p[0], (unint64_t)__p[1]);
            }
            else
            {
              v15 = *(_OWORD *)__p;
              *(_QWORD *)(*((_QWORD *)&v42 + 1) + 16) = v37;
              *v14 = v15;
            }
            v22 = (uint64_t)v14 + 24;
          }
          *((_QWORD *)&v42 + 1) = v22;
        }
        if (v38)
        {
          if (SHIBYTE(v37) < 0)
            operator delete(__p[0]);
        }
      }
    }
    else
    {
      v16 = (const void **)sub_20BF44378(v39, v9, v10);
      sub_20BE74FC0((uint64_t **)&v40, v16, (uint64_t)v16);
      if ((v17 & 1) != 0)
      {
        v19 = sub_20BF44378(v39, v17, v18);
        v20 = (__int128 *)*((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1) >= v43)
        {
          v23 = sub_20BE4EE50((uint64_t *)&v42, (__int128 *)v19);
        }
        else
        {
          if (*(char *)(v19 + 23) < 0)
          {
            sub_20BDDBFAC(*((_BYTE **)&v42 + 1), *(void **)v19, *(_QWORD *)(v19 + 8));
          }
          else
          {
            v21 = *(_OWORD *)v19;
            *(_QWORD *)(*((_QWORD *)&v42 + 1) + 16) = *(_QWORD *)(v19 + 16);
            *v20 = v21;
          }
          v23 = (uint64_t)v20 + 24;
        }
        *((_QWORD *)&v42 + 1) = v23;
      }
    }
    sub_20BF4457C(v39);
  }
  if ((_QWORD)v42 != *((_QWORD *)&v42 + 1))
  {
    __p[0] = __p;
    __p[1] = __p;
    v37 = 0;
    sub_20BEDEA80((__int128 *)__p, a4);
    *(_OWORD *)v39 = v42;
    while (v39[0] != v39[1])
    {
      v26 = (const void **)sub_20BEC9C74(v39, v24, v25);
      v27 = sub_20BDEEBA4(a5, v26);
      v28 = v27;
      if (a5 + 8 != v27)
      {
        v29 = *(void ***)(v27 + 56);
        while (1)
        {
          v29 = (void **)v29[1];
          if (v29 == __p)
            break;
          if (sub_20BDDDEF8((uint64_t)&v40, (const void **)v29 + 2))
            goto LABEL_35;
        }
        v29 = __p;
LABEL_35:
        if (!v37)
          goto LABEL_40;
        sub_20BEDE808((uint64_t)a4, a4, (uint64_t)__p, *(_QWORD **)(v28 + 56), v29);
      }
      sub_20BEC9CF0(v39);
    }
    v30 = v37;
    if (v37)
    {
      v31 = (_QWORD *)a4[1];
      v33 = (_QWORD **)__p[0];
      v32 = __p[1];
      v34 = *(_QWORD *)__p[1];
      *(_QWORD *)(v34 + 8) = *((_QWORD *)__p[0] + 1);
      *v33[1] = v34;
      v35 = *v31;
      *(_QWORD *)(v35 + 8) = v32;
      *v32 = v35;
      *v31 = v33;
      v33[1] = v31;
      a4[2] += v30;
      v37 = 0;
    }
LABEL_40:
    sub_20BEDD928(__p);
  }
  sub_20BDECAB8((uint64_t)&v40, v41[0]);
  __p[0] = &v42;
  sub_20BDE5038((void ***)__p);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE12_ReorderKeysENS_13SdfListOpTypeERKNS1_8functionIFNS1_8optionalIS7_EES9_RKS7_EEEPNS1_4listIS7_NS5_IS7_EEEEPNS1_3mapIS7_NS1_15__list_iteratorIS7_PvEENS1_4lessIS7_EENS5_INS1_4pairISD_SQ_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11491C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20,uint64_t a21,char a22,uint64_t a23)
{
  sub_20BDECAB8((uint64_t)&a19, a20);
  __p = &a22;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  uint64_t v28;
  int v29[2];
  uint64_t v30;
  int v31[2];
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  unint64_t v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C02F650((uint64_t)a3, a1);
    a3[152] = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    sub_20BE78B98((char *)&v34, *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    *(_QWORD *)&v39 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(a1, &v34, (uint64_t)&v37);
    v6 = (uint64_t **)v39;
    if ((uint64_t **)v39 == &v37)
    {
      v7 = 4;
      v6 = &v37;
    }
    else
    {
      if (!(_QWORD)v39)
      {
LABEL_26:
        LOBYTE(v37) = 0;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems((uint64_t *)&v37, (uint64_t)&v34);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v37);
        *(_QWORD *)v31 = (char *)&v45 + 8;
        sub_20BDE5038((void ***)v31);
        *(_QWORD *)v31 = &v44;
        sub_20BDE5038((void ***)v31);
        *(_QWORD *)v31 = (char *)&v42 + 8;
        sub_20BDE5038((void ***)v31);
        *(_QWORD *)v31 = &v41;
        sub_20BDE5038((void ***)v31);
        *(_QWORD *)v31 = (char *)&v39 + 8;
        sub_20BDE5038((void ***)v31);
        *(_QWORD *)v31 = &v38;
        sub_20BDE5038((void ***)v31);
        v37 = &v34;
LABEL_27:
        sub_20BDE5038((void ***)&v37);
        return;
      }
      v7 = 5;
    }
    ((void (*)(void))(*v6)[v7])();
    goto LABEL_26;
  }
  if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 128) == *(_QWORD *)(a2 + 136))
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    sub_20BE78B98((char *)&v34, *(__int128 **)(a2 + 104), *(__int128 **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    *(_QWORD *)v31 = 0;
    v32 = 0;
    v33 = 0;
    sub_20BE78B98((char *)v31, *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
    v28 = 0;
    *(_QWORD *)v29 = 0;
    v30 = 0;
    sub_20BE78B98((char *)&v28, *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
    v8 = *(_QWORD *)(a1 + 104);
    v9 = *(_QWORD *)(a1 + 112);
    while (v8 != v9)
    {
      v10 = sub_20C114F90(*(uint64_t *)v31, (uint64_t)v32, v8);
      sub_20C0F9EEC((uint64_t)v31, v10, v32);
      v11 = sub_20C114F90(v28, *(uint64_t *)v29, v8);
      sub_20C0F9EEC((uint64_t)&v28, v11, *(__int128 **)v29);
      v12 = sub_20C020210(v34, (uint64_t)v35, (unsigned __int8 **)v8);
      if ((__int128 *)v12 == v35)
      {
        v13 = v12;
        if (v12 >= v36)
        {
          v15 = (__int128 *)sub_20BE4EE50(&v34, (__int128 *)v8);
        }
        else
        {
          if (*(char *)(v8 + 23) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v12, *(void **)v8, *(_QWORD *)(v8 + 8));
          }
          else
          {
            v14 = *(_OWORD *)v8;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v12 = v14;
          }
          v15 = (__int128 *)(v13 + 24);
        }
        v35 = v15;
      }
      v8 += 24;
    }
    v16 = *(__int128 **)(a1 + 56);
    v17 = *(__int128 **)(a1 + 64);
    if (v16 == v17)
    {
      v21 = *(std::string **)(a1 + 56);
    }
    else
    {
      do
      {
        v18 = sub_20C114F90(v34, (uint64_t)v35, (uint64_t)v16);
        sub_20C0F9EEC((uint64_t)&v34, v18, v35);
        v19 = sub_20C114F90(*(uint64_t *)v31, (uint64_t)v32, (uint64_t)v16);
        sub_20C0F9EEC((uint64_t)v31, v19, v32);
        v20 = sub_20C114F90(v28, *(uint64_t *)v29, (uint64_t)v16);
        sub_20C0F9EEC((uint64_t)&v28, v20, *(__int128 **)v29);
        v16 = (__int128 *)((char *)v16 + 24);
      }
      while (v16 != v17);
      v21 = *(std::string **)(a1 + 56);
      v16 = *(__int128 **)(a1 + 64);
    }
    sub_20BFB74E8((uint64_t *)v31, *(std::string **)v31, v21, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v21) >> 3));
    v22 = *(__int128 **)(a1 + 80);
    v23 = *(__int128 **)(a1 + 88);
    if (v22 == v23)
    {
      v27 = *(std::string **)(a1 + 80);
    }
    else
    {
      do
      {
        v24 = sub_20C114F90(v34, (uint64_t)v35, (uint64_t)v22);
        sub_20C0F9EEC((uint64_t)&v34, v24, v35);
        v25 = sub_20C114F90(*(uint64_t *)v31, (uint64_t)v32, (uint64_t)v22);
        sub_20C0F9EEC((uint64_t)v31, v25, v32);
        v26 = sub_20C114F90(v28, *(uint64_t *)v29, (uint64_t)v22);
        sub_20C0F9EEC((uint64_t)&v28, v26, *(__int128 **)v29);
        v22 = (__int128 *)((char *)v22 + 24);
      }
      while (v22 != v23);
      v27 = *(std::string **)(a1 + 80);
      v22 = *(__int128 **)(a1 + 88);
    }
    sub_20BFB74E8(&v28, *(std::string **)v29, v27, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v27) >> 3));
    LOBYTE(v37) = 0;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems((uint64_t *)&v37, (uint64_t)&v34);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems((uint64_t *)&v37, (uint64_t)v31);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems((uint64_t *)&v37, (uint64_t)&v28);
    sub_20C1247A0((uint64_t)a3, (uint64_t)&v37);
    sub_20C020EAC((void **)&v37);
    v37 = &v28;
    sub_20BDE5038((void ***)&v37);
    v37 = (uint64_t *)v31;
    sub_20BDE5038((void ***)&v37);
    v37 = &v34;
    goto LABEL_27;
  }
LABEL_5:
  *a3 = 0;
  a3[152] = 0;
}

void sub_20C114E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_20BDE5038(&a19);
  a19 = (void **)&a13;
  sub_20BDE5038(&a19);
  a19 = (void **)&a16;
  sub_20BDE5038(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20C114F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;

  v5 = sub_20C020210(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2)
    return a2;
  v6 = v5;
  v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    v8 = v5;
    while (1)
    {
      v9 = v6;
      v6 = v7;
      v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v9 + 47);
      else
        v11 = *(_QWORD *)(v9 + 32);
      v12 = *(unsigned __int8 *)(a3 + 23);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a3 + 8);
      if (v11 != v12)
        goto LABEL_20;
      if (v13 >= 0)
        v14 = (unsigned __int8 *)a3;
      else
        v14 = *(unsigned __int8 **)a3;
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v6, v14, *(_QWORD *)(v9 + 32)))
          goto LABEL_20;
      }
      else if (*(_BYTE *)(v9 + 47))
      {
        v15 = 0;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15)
            goto LABEL_23;
        }
LABEL_20:
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        v16 = *(_OWORD *)v6;
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v8 = v16;
        v8 += 24;
        *(_BYTE *)(v9 + 47) = 0;
        *(_BYTE *)v6 = 0;
      }
LABEL_23:
      v7 = v6 + 24;
      if (v6 + 24 == a2)
        return v8;
    }
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ModifyOperations(unsigned __int8 **a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C115170(a2, a1 + 1, a3);
  v7 = v6 | sub_20C115170(a2, a1 + 4, a3);
  v8 = sub_20C115170(a2, a1 + 7, a3);
  v9 = v7 | v8 | sub_20C115170(a2, a1 + 10, a3);
  v10 = sub_20C115170(a2, a1 + 13, a3);
  return v9 | v10 | sub_20C115170(a2, a1 + 16, a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE16ModifyOperationsERKNS1_8functionIFNS1_8optionalIS7_EERKS7_EEEb(a1, a2, a3);
}

uint64_t sub_20C115170(uint64_t a1, unsigned __int8 **a2, int a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  void **v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void **v25;
  __int128 *v26;
  __int128 v27;
  void **v28;
  __int128 v29;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *__s1[2];
  void *v38;
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  void **v44[5];

  v42 = 0uLL;
  v43 = 0;
  v40 = 0u;
  v41 = 0u;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    goto LABEL_54;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      sub_20BE9E974();
    (*(void (**)(void **__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 48))(__s1, v8, v3);
    v9 = v39;
    if (a3)
    {
      if (v39)
      {
        sub_20C128798((uint64_t)&v40, (uint64_t)__s1);
        v9 = v39;
        if ((v10 & 1) == 0)
        {
          if (v39)
          {
            v7 = 1;
            if ((SHIBYTE(v38) & 0x80000000) == 0)
              goto LABEL_48;
LABEL_47:
            operator delete(__s1[0]);
            goto LABEL_48;
          }
        }
      }
    }
    if (!v9)
    {
      v7 = 1;
      goto LABEL_48;
    }
    v11 = HIBYTE(v38);
    if (SHIBYTE(v38) >= 0)
      v12 = (void *)HIBYTE(v38);
    else
      v12 = __s1[1];
    v13 = (void *)v3[23];
    v14 = (char)v13;
    v15 = *((_QWORD *)v3 + 1);
    if ((char)v13 < 0)
      v13 = (void *)*((_QWORD *)v3 + 1);
    if (v12 == v13)
    {
      v16 = *(unsigned __int8 **)v3;
      if (v14 >= 0)
        v17 = v3;
      else
        v17 = *(unsigned __int8 **)v3;
      if ((HIBYTE(v38) & 0x80) != 0)
      {
        if (!memcmp(__s1[0], v17, (size_t)__s1[1]))
        {
LABEL_38:
          v26 = (__int128 *)*((_QWORD *)&v42 + 1);
          if (*((_QWORD *)&v42 + 1) >= v43)
          {
            v21 = sub_20BE4EE50((uint64_t *)&v42, (__int128 *)v3);
          }
          else
          {
            if (v14 < 0)
            {
              sub_20BDDBFAC(*((_BYTE **)&v42 + 1), v16, v15);
            }
            else
            {
              v27 = *(_OWORD *)v3;
              *(_QWORD *)(*((_QWORD *)&v42 + 1) + 16) = *((_QWORD *)v3 + 2);
              *v26 = v27;
            }
            v21 = (uint64_t)v26 + 24;
          }
          goto LABEL_45;
        }
      }
      else
      {
        if (!HIBYTE(v38))
          goto LABEL_38;
        v18 = __s1;
        while (*(unsigned __int8 *)v18 == *v17)
        {
          v18 = (void **)((char *)v18 + 1);
          ++v17;
          if (!--v11)
            goto LABEL_38;
        }
      }
    }
    v19 = (_OWORD *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1) >= v43)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v43 - v42) >> 3) > v23)
        v23 = 0x5555555555555556 * ((uint64_t)(v43 - v42) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v42) >> 3) >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v23;
      v44[4] = (void **)&v43;
      if (v24)
        v25 = (void **)sub_20BDE4FF4((uint64_t)&v43, v24);
      else
        v25 = 0;
      v28 = &v25[3 * v22];
      v44[0] = v25;
      v44[1] = v28;
      v44[3] = &v25[3 * v24];
      v29 = *(_OWORD *)__s1;
      v28[2] = v38;
      *(_OWORD *)v28 = v29;
      __s1[1] = 0;
      v38 = 0;
      __s1[0] = 0;
      v44[2] = v28 + 3;
      sub_20BDF34C0((uint64_t *)&v42, v44);
      v21 = *((_QWORD *)&v42 + 1);
      sub_20BDF3648((uint64_t)v44);
    }
    else
    {
      v20 = *(_OWORD *)__s1;
      *(_QWORD *)(*((_QWORD *)&v42 + 1) + 16) = v38;
      *v19 = v20;
      __s1[1] = 0;
      v38 = 0;
      __s1[0] = 0;
      v21 = (uint64_t)v19 + 24;
    }
    v7 = 1;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v21;
    if (v39 && SHIBYTE(v38) < 0)
      goto LABEL_47;
LABEL_48:
    v3 += 24;
  }
  while (v3 != v4);
  if ((v7 & 1) != 0)
  {
    v30 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v42;
    v42 = v30;
    v31 = a2[2];
    a2[2] = (unsigned __int8 *)v43;
    v43 = (unint64_t)v31;
    v32 = 1;
    goto LABEL_55;
  }
LABEL_54:
  v32 = 0;
LABEL_55:
  v33 = *((_QWORD *)&v41 + 1);
  *((_QWORD *)&v41 + 1) = 0;
  if (v33)
  {
    v34 = (void *)sub_20BEB3F28(v33);
    operator delete(v34);
  }
  v44[0] = (void **)&v40;
  sub_20BDE5038(v44);
  v44[0] = (void **)&v42;
  sub_20BDE5038(v44);
  return v32;
}

void sub_20C1154A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  sub_20C12892C((uint64_t)&a18);
  a18 = &a22;
  sub_20BDE5038((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ReplaceOperations(uint64_t *a1, int a2, unint64_t a3, uint64_t a4, std::string **a5)
{
  BOOL v10;
  __int128 **Items;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  void **v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_BYTE *)a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (v10 || !a4 && *a5 != a5[1])
  {
    Items = (__int128 **)pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems((uint64_t)a1, a2);
    v22 = 0;
    v23 = 0;
    v21 = 0;
    sub_20BE78B98((char *)&v21, *Items, Items[1], 0xAAAAAAAAAAAAAAABLL * (((char *)Items[1] - (char *)*Items) >> 3));
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3);
    if (v12 >= a3)
    {
      if (a4 + a3 <= v12)
      {
        v14 = a5[1];
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)*a5) >> 3) == a4)
        {
          sub_20C128AE0(*a5, v14, (std::string *)(v21 + 24 * a3));
        }
        else
        {
          sub_20C0F9EEC((uint64_t)&v21, v21 + 24 * a3, (__int128 *)(v21 + 24 * a3 + 24 * a4));
          sub_20BFB74E8(&v21, (std::string *)(v21 + 24 * a3), *a5, (__int128 *)a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetItems(a1, (uint64_t)&v21, a2);
        v13 = 1;
        goto LABEL_18;
      }
      v16 = (void **)"sdf/listOp.cpp";
      v17 = "ReplaceOperations";
      v18 = 698;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ReplaceOperations(const SdfListOpType, size_t"
            ", size_t, const ItemVector &) [T = std::string]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3));
    }
    else
    {
      v16 = (void **)"sdf/listOp.cpp";
      v17 = "ReplaceOperations";
      v18 = 693;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ReplaceOperations(const SdfListOpType, size_t"
            ", size_t, const ItemVector &) [T = std::string]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3));
    }
    v13 = 0;
LABEL_18:
    v16 = (void **)&v21;
    sub_20BDE5038(&v16);
    return v13;
  }
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE17ReplaceOperationsENS_13SdfListOpTypeEmmRKNS1_6vectorIS7_NS5_IS7_EEEE(a1, a2, a3, a4, a5);
}

void sub_20C115714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_20BDE5038(&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ComposeOperations(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 **v12;
  uint64_t v13;
  __int128 **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  char **v18;
  char *v19[2];
  uint64_t v20;
  uint64_t *v21;
  __int128 **v22;
  __int128 *v23[3];
  __int128 **v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    Items = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems((uint64_t)a1, a3);
    sub_20C128B44(&v20, *Items, Items[1]);
    v19[0] = 0;
    v19[1] = 0;
    v18 = v19;
    for (i = v21; i != &v20; i = (uint64_t *)i[1])
    {
      v23[0] = (__int128 *)(i + 2);
      sub_20BE9DDE4((uint64_t **)&v18, (const void **)i + 2, (uint64_t)&unk_20CAC184C, v23)[7] = (uint64_t)i;
    }
    switch(a3)
    {
      case 1:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys(a2, 1, (uint64_t)v23, &v20, (uint64_t **)&v18);
        goto LABEL_16;
      case 2:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys(a2, 2, (uint64_t)v23, &v20, (uint64_t **)&v18);
        goto LABEL_16;
      case 3:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys(a2, 3, (uint64_t)v23, &v20, (uint64_t **)&v18);
        v12 = v24;
        if (v24 == v23)
        {
          v13 = 4;
          v12 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_15;
          v13 = 5;
        }
        (*((void (**)(__int128 **, uint64_t, uint64_t))*v12 + v13))(v12, v10, v11);
LABEL_15:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_ReorderKeys(a2, 3, (uint64_t)v23, &v20, (uint64_t)&v18);
LABEL_16:
        v14 = v24;
        if (v24 == v23)
        {
          v15 = 4;
          v14 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_21;
          v15 = 5;
        }
        (*((void (**)(__int128 **, uint64_t, uint64_t))*v14 + v15))(v14, v8, v9);
LABEL_21:
        memset(v23, 0, sizeof(v23));
        if (v21 == &v20)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = v21;
          do
          {
            ++v16;
            v17 = (uint64_t *)v17[1];
          }
          while (v17 != &v20);
        }
        sub_20C128BD4((char *)v23, (uint64_t)v21, (uint64_t)&v20, v16);
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetItems(a1, (uint64_t)v23, a3);
        v22 = v23;
        sub_20BDE5038((void ***)&v22);
        sub_20BDECAB8((uint64_t)&v18, v19[0]);
        sub_20BEDD928(&v20);
        break;
      case 4:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_PrependKeys(a2, 4, (uint64_t)v23, (uint64_t)&v20, (uint64_t **)&v18);
        goto LABEL_16;
      case 5:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AppendKeys(a2, 5, (uint64_t)v23, &v20, (uint64_t **)&v18);
        goto LABEL_16;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems(a1, a2 + 8);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE17ComposeOperationsERKS8_NS_13SdfListOpTypeE(a1, a2, a3);
}

void sub_20C115A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20BDECAB8((uint64_t)&a9, a10);
  sub_20BEDD928(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  if (*a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  v5 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  v6 = (unsigned __int8 *)a2[1];
  if (v5 - v4 != a2[2] - (_QWORD)v6)
    return 0;
  while (v4 != v5)
  {
    result = sub_20BEB4EF8((uint64_t)&v20, v4, v6);
    if (!(_DWORD)result)
      return result;
    v4 += 24;
    v6 += 24;
  }
  v8 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  v9 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  v10 = (unsigned __int8 *)a2[4];
  if (v9 - v8 != a2[5] - (_QWORD)v10)
    return 0;
  while (v8 != v9)
  {
    result = sub_20BEB4EF8((uint64_t)&v21, v8, v10);
    if (!(_DWORD)result)
      return result;
    v8 += 24;
    v10 += 24;
  }
  v11 = (unsigned __int8 *)*((_QWORD *)a1 + 7);
  v12 = (unsigned __int8 *)*((_QWORD *)a1 + 8);
  v13 = (unsigned __int8 *)a2[7];
  if (v12 - v11 != a2[8] - (_QWORD)v13)
    return 0;
  while (v11 != v12)
  {
    result = sub_20BEB4EF8((uint64_t)&v22, v11, v13);
    if (!(_DWORD)result)
      return result;
    v11 += 24;
    v13 += 24;
  }
  v14 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
  v15 = (unsigned __int8 *)*((_QWORD *)a1 + 11);
  v16 = (unsigned __int8 *)a2[10];
  if (v15 - v14 != a2[11] - (_QWORD)v16)
    return 0;
  while (v14 != v15)
  {
    result = sub_20BEB4EF8((uint64_t)&v23, v14, v16);
    if (!(_DWORD)result)
      return result;
    v14 += 24;
    v16 += 24;
  }
  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 13);
  v18 = (unsigned __int8 *)*((_QWORD *)a1 + 14);
  v19 = (unsigned __int8 *)a2[13];
  if (v18 - v17 != a2[14] - (_QWORD)v19)
    return 0;
  while (v17 != v18)
  {
    result = sub_20BEB4EF8((uint64_t)&v24, v17, v19);
    if (!(_DWORD)result)
      return result;
    v17 += 24;
    v19 += 24;
  }
  return sub_20C020C5C((unsigned __int8 **)a1 + 16, (uint64_t)(a2 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEeqERKS8_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator!=(unsigned __int8 *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==(a1, a2) ^ 1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<std::string>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D30, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = std::string]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C128C58(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C128C58(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C128C58(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C128C58(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C128C58(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C128C58(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEERNS1_13basic_ostreamIcS4_EESA_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C115EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::CreateExplicit@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems((unsigned __int8 *)a2, a1);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE14CreateExplicitERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void sub_20C115F68(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C03507C(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEC1Ev(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems(unsigned __int8 *a1, uint64_t **a2)
{
  _QWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 1);
  result = a1 + 8;
  if (a1 + 8 != (unsigned __int8 *)a2)
    return sub_20C106430(result, *a2, a2[1], a2[1] - *a2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE16SetExplicitItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Create@<X0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems((unsigned __int8 *)a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems((unsigned __int8 *)a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems((unsigned __int8 *)a4, a3);
}

void sub_20C116074(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C03507C(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems(unsigned __int8 *a1, uint64_t **a2)
{
  _QWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 0);
  result = a1 + 56;
  if (a1 + 56 != (unsigned __int8 *)a2)
    return sub_20C106430(result, *a2, a2[1], a2[1] - *a2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE17SetPrependedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems(unsigned __int8 *a1, uint64_t **a2)
{
  _QWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 0);
  result = a1 + 80;
  if (a1 + 80 != (unsigned __int8 *)a2)
    return sub_20C106430(result, *a2, a2[1], a2[1] - *a2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE16SetAppendedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems(unsigned __int8 *a1, uint64_t **a2)
{
  _QWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 0);
  result = a1 + 104;
  if (a1 + 104 != (unsigned __int8 *)a2)
    return sub_20C106430(result, *a2, a2[1], a2[1] - *a2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE15SetDeletedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE4SwapERS2_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::HasItem(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v2 = *(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v3 == v2)
          goto LABEL_5;
      }
    }
    return v3 != v2;
  }
  v6 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD **)(a1 + 40);
  if (v6 != v5)
  {
    while ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(_QWORD **)(a1 + 64);
    if (v8 != v7)
    {
      while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v8 == v7)
        {
          v8 = *(_QWORD **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v10 = *(_QWORD **)(a1 + 80);
      v9 = *(_QWORD **)(a1 + 88);
      if (v10 != v9)
      {
        while ((*v10 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v10 == v9)
          {
            v10 = *(_QWORD **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        v12 = *(_QWORD **)(a1 + 104);
        v11 = *(_QWORD **)(a1 + 112);
        if (v12 != v11)
        {
          while ((*v12 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v12 == v11)
            {
              v12 = *(_QWORD **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          v3 = *(_QWORD **)(a1 + 128);
          v2 = *(_QWORD **)(a1 + 136);
          if (v3 != v2)
          {
            while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
            {
              if (++v3 == v2)
              {
LABEL_5:
                v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::TfToken>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetAppliedItems@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(a1, (uint64_t **)a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C116618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20BEEB2B8(&a10);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(_QWORD *result, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t *v7;
  uint64_t *j;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;

  if (a2)
  {
    v5 = (uint64_t)result;
    v18 = (uint64_t)&v18;
    v19 = &v18;
    v20 = 0;
    if (*(_BYTE *)result)
    {
      v16 = 0;
      v17 = 0;
      v15 = (uint64_t *)&v16;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys((uint64_t)result, 0, a3, &v18, (uint64_t)&v15);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(result[8] - result[7]) >> 3)
           + ((uint64_t)(result[11] - result[10]) >> 3)
           + ((uint64_t)(result[5] - result[4]) >> 3)
           + ((uint64_t)(result[14] - result[13]) >> 3)
           + ((uint64_t)(result[17] - result[16]) >> 3)))
      {
        return sub_20C124874(&v18);
      }
      sub_20C128D90((uint64_t)&v18, &v18, *a2, a2[1]);
      v16 = 0;
      v17 = 0;
      v15 = (uint64_t *)&v16;
      for (i = v19; i != &v18; i = (uint64_t *)i[1])
      {
        v21 = i + 2;
        sub_20C128EE8((uint64_t)&v15, i + 2, (uint64_t)&unk_20CAC184C, &v21)[5] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_DeleteKeys(v5, 2, a3, (uint64_t)&v18, &v15);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys(v5, 1, a3, &v18, (uint64_t)&v15);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_PrependKeys(v5, 4, a3, (uint64_t)&v18, (uint64_t)&v15);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AppendKeys(v5, 5, a3, &v18, (uint64_t)&v15);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_ReorderKeys(v5, 3, a3, &v18, (uint64_t)&v15);
    }
    sub_20BF2B200((uint64_t)&v15, v16);
    v7 = *a2;
    for (j = a2[1]; j != v7; --j)
    {
      v10 = *(j - 1);
      v9 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
    }
    a2[1] = v7;
    if (v19 == &v18)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = v19;
      do
      {
        ++v13;
        v14 = (uint64_t *)v14[1];
      }
      while (v14 != &v18);
    }
    sub_20C129024((uint64_t *)a2, v7, v19, (uint64_t)&v18, v13);
    return sub_20C124874(&v18);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE15ApplyOperationsEPNSt3__16vectorIS1_NS3_9allocatorIS1_EEEERKNS3_8functionIFNS3_8optionalIS1_EENS_13SdfListOpTypeERKS1_EEE(result, a2, a3);
}

void sub_20C11688C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C124874((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t k;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t n;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t ii;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;

  if (*result != a2)
  {
    *result = a2;
    v2 = *((_QWORD *)result + 1);
    for (i = *((_QWORD *)result + 2); i != v2; i -= 8)
    {
      v5 = *(_QWORD *)(i - 8);
      v4 = v5;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
    }
    *((_QWORD *)result + 2) = v2;
    v8 = *((_QWORD *)result + 4);
    for (j = *((_QWORD *)result + 5); j != v8; j -= 8)
    {
      v11 = *(_QWORD *)(j - 8);
      v10 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
    }
    *((_QWORD *)result + 5) = v8;
    v14 = *((_QWORD *)result + 7);
    for (k = *((_QWORD *)result + 8); k != v14; k -= 8)
    {
      v17 = *(_QWORD *)(k - 8);
      v16 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    *((_QWORD *)result + 8) = v14;
    v20 = *((_QWORD *)result + 10);
    for (m = *((_QWORD *)result + 11); m != v20; m -= 8)
    {
      v23 = *(_QWORD *)(m - 8);
      v22 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
    }
    *((_QWORD *)result + 11) = v20;
    v26 = *((_QWORD *)result + 13);
    for (n = *((_QWORD *)result + 14); n != v26; n -= 8)
    {
      v29 = *(_QWORD *)(n - 8);
      v28 = v29;
      if ((v29 & 7) != 0)
      {
        v30 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
    }
    *((_QWORD *)result + 14) = v26;
    v32 = *((_QWORD *)result + 16);
    for (ii = *((_QWORD *)result + 17); ii != v32; ii -= 8)
    {
      v35 = *(_QWORD *)(ii - 8);
      v34 = v35;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    *((_QWORD *)result + 17) = v32;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE12_SetExplicitEb(result, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems(unsigned __int8 *a1, uint64_t **a2)
{
  _QWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 0);
  result = a1 + 32;
  if (a1 + 32 != (unsigned __int8 *)a2)
    return sub_20C106430(result, *a2, a2[1], a2[1] - *a2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE13SetAddedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems(unsigned __int8 *a1, uint64_t **a2)
{
  _QWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 0);
  result = a1 + 128;
  if (a1 + 128 != (unsigned __int8 *)a2)
    return sub_20C106430(result, *a2, a2[1], a2[1] - *a2);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE15SetOrderedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems(unsigned __int8 *a1, uint64_t **a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE8SetItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEENS_13SdfListOpTypeE(a1, a2, a3);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Clear(unsigned __int8 *a1)
{
  *a1 = 1;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 0);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit(unsigned __int8 *a1)
{
  *a1 = 0;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(a1, 1);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE20ClearAndMakeExplicitEv(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(a1, a2);
  v12 = result[1];
  v28 = *result;
  v29 = v12;
  if (v28 != v12)
  {
    v13 = (_QWORD *)(a5 + 8);
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEF7A8(&v28, v10, v11);
        LODWORD(v30) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t **, uint64_t))(*(_QWORD *)v15 + 48))(&v26, v15, &v30, v14);
        if (v27)
        {
          if (v13 == sub_20C1299E8(a5, &v26))
          {
            v16 = operator new(0x18uLL);
            *v16 = 0;
            v16[1] = 0;
            v17 = v26;
            v16[2] = v26;
            if ((v17 & 7) != 0)
            {
              v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 2, v18));
              if ((v19 & 1) == 0)
                v16[2] = v18;
            }
            v20 = *a4;
            *(_QWORD *)(v20 + 8) = v16;
            *a4 = (uint64_t)v16;
            *v16 = v20;
            v16[1] = a4;
            ++a4[2];
            v30 = &v26;
            sub_20C128EE8(a5, &v26, (uint64_t)&unk_20CAC184C, (uint64_t **)&v30)[5] = (uint64_t)v16;
          }
          if (v27 && (v26 & 7) != 0)
          {
            v21 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
            do
              v22 = __ldxr(v21);
            while (__stlxr(v22 - 2, v21));
          }
        }
      }
      else
      {
        v23 = (uint64_t *)sub_20BFEF7A8(&v28, v10, v11);
        if (v13 == sub_20C1299E8(a5, v23))
        {
          v24 = sub_20C128E84((uint64_t)a4, 0, 0, v23);
          v25 = *a4;
          *(_QWORD *)(v25 + 8) = v24;
          *v24 = v25;
          *a4 = (uint64_t)v24;
          v24[1] = a4;
          ++a4[2];
          v26 = (unint64_t)v23;
          sub_20C128EE8(a5, v23, (uint64_t)&unk_20CAC184C, (uint64_t **)&v26)[5] = (uint64_t)v24;
        }
      }
      result = sub_20BFEF824(&v28);
    }
    while (v28 != v29);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_28TfTokenFastArbitraryLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C116CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
    sub_20C96B3E4(&a9);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(a1, a2);
  v12 = result[1];
  v25 = *result;
  v26 = v12;
  if (v25 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEF7A8(&v25, v10, v11);
        v27 = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(&v23, v15, &v27, v14);
        if (v24)
        {
          v16 = sub_20C1299E8((uint64_t)a5, &v23);
          v17 = v16;
          if (v13 != (uint64_t **)v16)
          {
            sub_20C129884(a4, (uint64_t *)v16[5]);
            sub_20C1298E0(a5, v17);
          }
          if (v24 && (v23 & 7) != 0)
          {
            v18 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
            do
              v19 = __ldxr(v18);
            while (__stlxr(v19 - 2, v18));
          }
        }
      }
      else
      {
        v20 = (_QWORD *)sub_20BFEF7A8(&v25, v10, v11);
        v21 = sub_20C1299E8((uint64_t)a5, v20);
        if (v13 != (uint64_t **)v21)
        {
          v22 = v21;
          sub_20C129884(a4, (uint64_t *)v21[5]);
          sub_20C1298E0(a5, v22);
        }
      }
      result = sub_20BFEF824(&v25);
    }
    while (v25 != v26);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_28TfTokenFastArbitraryLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C116E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  if ((_BYTE)a11)
    sub_20C96B3E4(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t *v37;

  result = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(a1, a2);
  v11 = *result;
  v10 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *result)
    {
      do
      {
        LODWORD(v37) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        result = (uint64_t **)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, unint64_t **, uint64_t *))(*(_QWORD *)v12 + 48))(&v35, v12, &v37, --v10);
        if (v36)
        {
          v13 = *(uint64_t **)(a4 + 8);
          result = (uint64_t **)sub_20C1299E8(a5, &v35);
          if ((uint64_t **)(a5 + 8) == result)
          {
            v19 = (uint64_t *)operator new(0x18uLL);
            v20 = v19;
            *v19 = 0;
            v19[1] = 0;
            v21 = v35;
            v19[2] = v35;
            if ((v21 & 7) != 0)
            {
              v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 2, v22));
              if ((v23 & 1) == 0)
                v19[2] = (uint64_t)v22;
            }
            v24 = *v13;
            *(_QWORD *)(v24 + 8) = v19;
            *v19 = v24;
            *v13 = (uint64_t)v19;
            v19[1] = (uint64_t)v13;
            ++*(_QWORD *)(a4 + 16);
            v37 = &v35;
            result = (uint64_t **)sub_20C128EE8(a5, &v35, (uint64_t)&unk_20CAC184C, (uint64_t **)&v37);
            result[5] = v20;
          }
          else
          {
            v14 = result[5];
            if (v14 != v13)
            {
              v15 = (uint64_t *)v14[1];
              if (v14 != v15)
              {
                v16 = *v15;
                v17 = *v14;
                *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
                **(_QWORD **)(v16 + 8) = v17;
                v18 = *v13;
                *(_QWORD *)(v18 + 8) = v14;
                *v14 = v18;
                *v13 = v16;
                *(_QWORD *)(v16 + 8) = v13;
              }
            }
          }
          if (v36 && (v35 & 7) != 0)
          {
            v25 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stlxr(v26 - 2, v25));
          }
        }
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *result)
  {
    do
    {
      --v10;
      v27 = *(uint64_t **)(a4 + 8);
      result = (uint64_t **)sub_20C1299E8(a5, v10);
      if ((uint64_t **)(a5 + 8) == result)
      {
        v33 = sub_20C128E84(a4, 0, 0, v10);
        v34 = *v27;
        *(_QWORD *)(v34 + 8) = v33;
        *v33 = v34;
        *v27 = (uint64_t)v33;
        v33[1] = (uint64_t)v27;
        ++*(_QWORD *)(a4 + 16);
        v35 = (unint64_t)v10;
        result = (uint64_t **)sub_20C128EE8(a5, v10, (uint64_t)&unk_20CAC184C, (uint64_t **)&v35);
        result[5] = v33;
      }
      else
      {
        v28 = result[5];
        if (v28 != v27)
        {
          v29 = (uint64_t *)v28[1];
          if (v28 != v29)
          {
            v30 = *v29;
            v31 = *v28;
            *(_QWORD *)(v31 + 8) = *(_QWORD *)(v30 + 8);
            **(_QWORD **)(v30 + 8) = v31;
            v32 = *v27;
            *(_QWORD *)(v32 + 8) = v28;
            *v28 = v32;
            *v27 = v30;
            *(_QWORD *)(v30 + 8) = v27;
          }
        }
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_28TfTokenFastArbitraryLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C117100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
    sub_20C96B3E4(&a9);
  _Unwind_Resume(exception_object);
}

uint64_t **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t **result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t *v35;

  result = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(a1, a2);
  v10 = *result;
  v11 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (*result != v11)
    {
      do
      {
        LODWORD(v35) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        result = (uint64_t **)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, unint64_t **, uint64_t *))(*(_QWORD *)v12 + 48))(&v33, v12, &v35, v10);
        if (v34)
        {
          result = (uint64_t **)sub_20C1299E8(a5, &v33);
          if ((uint64_t **)(a5 + 8) == result)
          {
            v18 = (uint64_t *)operator new(0x18uLL);
            v19 = v18;
            *v18 = 0;
            v18[1] = 0;
            v20 = v33;
            v18[2] = v33;
            if ((v20 & 7) != 0)
            {
              v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 2, v21));
              if ((v22 & 1) == 0)
                v18[2] = (uint64_t)v21;
            }
            v23 = *a4;
            *(_QWORD *)(v23 + 8) = v18;
            *a4 = (uint64_t)v18;
            *v18 = v23;
            v18[1] = (uint64_t)a4;
            ++a4[2];
            v35 = &v33;
            result = (uint64_t **)sub_20C128EE8(a5, &v33, (uint64_t)&unk_20CAC184C, (uint64_t **)&v35);
            result[5] = v19;
          }
          else
          {
            v13 = result[5];
            if (v13 != a4)
            {
              v14 = (uint64_t *)v13[1];
              if (v13 != v14)
              {
                v15 = *v14;
                v16 = *v13;
                *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
                **(_QWORD **)(v15 + 8) = v16;
                v17 = *a4;
                *(_QWORD *)(v17 + 8) = v13;
                *v13 = v17;
                *a4 = v15;
                *(_QWORD *)(v15 + 8) = a4;
              }
            }
          }
          if (v34 && (v33 & 7) != 0)
          {
            v24 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
            do
              v25 = __ldxr(v24);
            while (__stlxr(v25 - 2, v24));
          }
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else if (*result != v11)
  {
    do
    {
      result = (uint64_t **)sub_20C1299E8(a5, v10);
      if ((uint64_t **)(a5 + 8) == result)
      {
        v31 = sub_20C128E84((uint64_t)a4, 0, 0, v10);
        v32 = *a4;
        *(_QWORD *)(v32 + 8) = v31;
        *v31 = v32;
        *a4 = (uint64_t)v31;
        v31[1] = (uint64_t)a4;
        ++a4[2];
        v33 = (unint64_t)v10;
        result = (uint64_t **)sub_20C128EE8(a5, v10, (uint64_t)&unk_20CAC184C, (uint64_t **)&v33);
        result[5] = v31;
      }
      else
      {
        v26 = result[5];
        if (v26 != a4)
        {
          v27 = (uint64_t *)v26[1];
          if (v26 != v27)
          {
            v28 = *v27;
            v29 = *v26;
            *(_QWORD *)(v29 + 8) = *(_QWORD *)(v28 + 8);
            **(_QWORD **)(v28 + 8) = v29;
            v30 = *a4;
            *(_QWORD *)(v30 + 8) = v26;
            *v26 = v30;
            *a4 = v28;
            *(_QWORD *)(v28 + 8) = a4;
          }
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_28TfTokenFastArbitraryLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1173A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
    sub_20C96B3E4(&a9);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 *p_i;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 i;
  uint64_t v45;
  uint64_t v46[3];
  void **v47;
  _QWORD *v48[2];
  __int128 v49;
  unint64_t v50;
  int v51;

  v49 = 0uLL;
  v50 = 0;
  v48[0] = 0;
  v48[1] = 0;
  v47 = (void **)v48;
  for (i = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(a1, a2); (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFEF824(&i))
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v11 = sub_20BFEF7A8((uint64_t *)&i, v9, v10);
      v51 = a2;
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(v46, v12, &v51, v11);
      if (LOBYTE(v46[1]))
      {
        sub_20C129930((uint64_t)&v47, v46, v46);
        if ((v13 & 1) != 0)
        {
          v14 = (_QWORD *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1) >= v50)
          {
            v18 = sub_20BFCA068((char **)&v49, v46);
          }
          else
          {
            v15 = v46[0];
            **((_QWORD **)&v49 + 1) = v46[0];
            if ((v15 & 7) != 0)
            {
              v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 2, v16));
              if ((v17 & 1) == 0)
                *v14 &= 0xFFFFFFFFFFFFFFF8;
            }
            v18 = (char *)(v14 + 1);
          }
          *((_QWORD *)&v49 + 1) = v18;
        }
        if (LOBYTE(v46[1]) && (v46[0] & 7) != 0)
        {
          v28 = (unsigned int *)(v46[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
      }
    }
    else
    {
      v19 = (uint64_t *)sub_20BFEF7A8((uint64_t *)&i, v9, v10);
      sub_20C129930((uint64_t)&v47, v19, v19);
      if ((v20 & 1) != 0)
      {
        v22 = (uint64_t *)sub_20BFEF7A8((uint64_t *)&i, v20, v21);
        v23 = (_QWORD *)*((_QWORD *)&v49 + 1);
        if (*((_QWORD *)&v49 + 1) >= v50)
        {
          v27 = sub_20BFCA068((char **)&v49, v22);
        }
        else
        {
          v24 = *v22;
          **((_QWORD **)&v49 + 1) = *v22;
          if ((v24 & 7) != 0)
          {
            v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 2, v25));
            if ((v26 & 1) == 0)
              *v23 &= 0xFFFFFFFFFFFFFFF8;
          }
          v27 = (char *)(v23 + 1);
        }
        *((_QWORD *)&v49 + 1) = v27;
      }
    }
  }
  if ((_QWORD)v49 != *((_QWORD *)&v49 + 1))
  {
    *(_QWORD *)&i = &i;
    *((_QWORD *)&i + 1) = &i;
    v45 = 0;
    sub_20BEDEA80(&i, a4);
    *(_OWORD *)v46 = v49;
    while (v46[0] != v46[1])
    {
      v32 = (_QWORD *)sub_20C023B14(v46, v30, v31);
      v33 = sub_20C1299E8(a5, v32);
      if ((_QWORD *)(a5 + 8) != v33)
      {
        v34 = (_QWORD *)v33[5];
        p_i = &i;
        if ((__int128 *)v34[1] != &i)
        {
          p_i = (__int128 *)v34[1];
          do
          {
            if (v48[0])
            {
              v36 = p_i[1] & 0xFFFFFFFFFFFFFFF8;
              v37 = v48[0];
              do
              {
                v38 = v37[4] & 0xFFFFFFFFFFFFFFF8;
                if (v36 >= v38)
                {
                  if (v38 >= v36)
                    goto LABEL_46;
                  ++v37;
                }
                v37 = (_QWORD *)*v37;
              }
              while (v37);
            }
            p_i = (__int128 *)*((_QWORD *)p_i + 1);
          }
          while (p_i != &i);
          p_i = &i;
        }
LABEL_46:
        if (!v45)
          goto LABEL_51;
        sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&i, v34, p_i);
      }
      sub_20C023C08(v46);
    }
    v39 = v45;
    if (v45)
    {
      v40 = (uint64_t *)a4[1];
      v41 = i;
      v42 = **((_QWORD **)&i + 1);
      *(_QWORD *)(v42 + 8) = *(_QWORD *)(i + 8);
      **(_QWORD **)(v41 + 8) = v42;
      v43 = *v40;
      *(_QWORD *)(v43 + 8) = *((_QWORD *)&v41 + 1);
      **((_QWORD **)&v41 + 1) = v43;
      *v40 = v41;
      *(_QWORD *)(v41 + 8) = v40;
      a4[2] += v39;
      v45 = 0;
    }
LABEL_51:
    sub_20C124874(&i);
  }
  sub_20BF2B200((uint64_t)&v47, v48[0]);
  v47 = (void **)&v49;
  sub_20BEEB2B8(&v47);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_28TfTokenFastArbitraryLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1176D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, _QWORD *a17)
{
  uint64_t v17;

  sub_20BF2B200((uint64_t)&a16, a17);
  a16 = (void **)(v17 - 64);
  sub_20BEEB2B8(&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t ***v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C0366AC((uint64_t)a3, (uint64_t)a1);
    a3[152] = 1;
    return;
  }
  if (a1[4] != a1[5] || a1[16] != a1[17])
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    sub_20BFE538C(&v36, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    *(_QWORD *)&v41 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(a1, &v36, (uint64_t)&v39);
    v6 = (uint64_t ***)v41;
    if ((uint64_t ***)v41 == &v39)
    {
      v7 = 4;
      v6 = &v39;
    }
    else
    {
      if (!(_QWORD)v41)
      {
LABEL_31:
        LOBYTE(v39) = 0;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems((unsigned __int8 *)&v39, &v36);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v39);
        v33 = (__int128 *)((char *)&v47 + 8);
        sub_20BEEB2B8((void ***)&v33);
        v33 = &v46;
        sub_20BEEB2B8((void ***)&v33);
        v33 = (__int128 *)((char *)&v44 + 8);
        sub_20BEEB2B8((void ***)&v33);
        v33 = &v43;
        sub_20BEEB2B8((void ***)&v33);
        v33 = (__int128 *)((char *)&v41 + 8);
        sub_20BEEB2B8((void ***)&v33);
        v33 = &v40;
        sub_20BEEB2B8((void ***)&v33);
        v39 = &v36;
        goto LABEL_32;
      }
      v7 = 5;
    }
    ((void (*)(void))(*v6)[v7])();
    goto LABEL_31;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a2 + 128) != *(_QWORD *)(a2 + 136))
  {
LABEL_5:
    *a3 = 0;
    a3[152] = 0;
    return;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_20BFE538C(&v36, *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_20BFE538C(&v33, *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_20BFE538C(&v30, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  v8 = (uint64_t *)a1[13];
  v9 = (uint64_t *)a1[14];
  while (v8 != v9)
  {
    v10 = sub_20C117D88((uint64_t *)v33, v34, v8);
    sub_20C117D14((uint64_t)&v33, v10, v34);
    v11 = sub_20C117D88(v30, v31, v8);
    sub_20C117D14((uint64_t)&v30, v11, v31);
    v13 = v36;
    v12 = v37;
    if (v36 != v37)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*v8 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v37)
        {
          v13 = v37;
          break;
        }
      }
    }
    if (v13 == v37)
    {
      if ((unint64_t)v37 >= v38)
      {
        v17 = (uint64_t *)sub_20BFCA068((char **)&v36, v8);
      }
      else
      {
        v14 = *v8;
        *v37 = *v8;
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            *v12 &= 0xFFFFFFFFFFFFFFF8;
        }
        v17 = v12 + 1;
      }
      v37 = v17;
    }
    ++v8;
  }
  v18 = (uint64_t *)a1[7];
  v19 = (uint64_t *)a1[8];
  if (v18 == v19)
  {
    v23 = (uint64_t *)a1[7];
  }
  else
  {
    do
    {
      v20 = sub_20C117D88(v36, v37, v18);
      sub_20C117D14((uint64_t)&v36, v20, v37);
      v21 = sub_20C117D88((uint64_t *)v33, v34, v18);
      sub_20C117D14((uint64_t)&v33, v21, v34);
      v22 = sub_20C117D88(v30, v31, v18);
      sub_20C117D14((uint64_t)&v30, v22, v31);
      ++v18;
    }
    while (v18 != v19);
    v23 = (uint64_t *)a1[7];
    v18 = (uint64_t *)a1[8];
  }
  sub_20C1292A0((uint64_t *)&v33, v33, v23, v18, v18 - v23);
  v24 = (uint64_t *)a1[10];
  v25 = (uint64_t *)a1[11];
  if (v24 == v25)
  {
    v29 = (uint64_t *)a1[10];
  }
  else
  {
    do
    {
      v26 = sub_20C117D88(v36, v37, v24);
      sub_20C117D14((uint64_t)&v36, v26, v37);
      v27 = sub_20C117D88((uint64_t *)v33, v34, v24);
      sub_20C117D14((uint64_t)&v33, v27, v34);
      v28 = sub_20C117D88(v30, v31, v24);
      sub_20C117D14((uint64_t)&v30, v28, v31);
      ++v24;
    }
    while (v24 != v25);
    v29 = (uint64_t *)a1[10];
    v24 = (uint64_t *)a1[11];
  }
  sub_20C1292A0((uint64_t *)&v30, v31, v29, v24, v24 - v29);
  LOBYTE(v39) = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems((unsigned __int8 *)&v39, &v36);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems((unsigned __int8 *)&v39, (uint64_t **)&v33);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems((unsigned __int8 *)&v39, &v30);
  sub_20C1247A0((uint64_t)a3, (uint64_t)&v39);
  sub_20C03507C((void **)&v39);
  v39 = &v30;
  sub_20BEEB2B8((void ***)&v39);
  v39 = (uint64_t **)&v33;
  sub_20BEEB2B8((void ***)&v39);
  v39 = &v36;
LABEL_32:
  sub_20BEEB2B8((void ***)&v39);
}

void sub_20C117C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_20BEEB2B8(&a19);
  a19 = (void **)&a13;
  sub_20BEEB2B8(&a19);
  a19 = (void **)&a16;
  sub_20BEEB2B8(&a19);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C117D14(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (a2 != a3)
  {
    sub_20C0D813C(a3, *(_QWORD **)(a1 + 8), a2);
    for (i = *(_QWORD *)(a1 + 8); i != v5; i -= 8)
    {
      v8 = *(_QWORD *)(i - 8);
      v7 = v8;
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t *sub_20C117D88(uint64_t *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *i;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      v4 = *i;
      if ((*i & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (i != result)
        {
          if ((*result & 7) != 0)
          {
            v5 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
            do
              v6 = __ldxr(v5);
            while (__stlxr(v6 - 2, v5));
            v4 = *i;
          }
          *result = v4;
          *i = 0;
        }
        ++result;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ModifyOperations(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C117EE8(a2, a1 + 8, a3);
  v7 = v6 | sub_20C117EE8(a2, a1 + 32, a3);
  v8 = sub_20C117EE8(a2, a1 + 56, a3);
  v9 = v7 | v8 | sub_20C117EE8(a2, a1 + 80, a3);
  v10 = sub_20C117EE8(a2, a1 + 104, a3);
  return v9 | v10 | sub_20C117EE8(a2, a1 + 128, a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE16ModifyOperationsERKNSt3__18functionIFNS3_8optionalIS1_EERKS1_EEEb(a1, a2, a3);
}

uint64_t sub_20C117EE8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  int64x2_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  int64x2_t v42;
  char *v43;
  int64x2_t *v44;
  int64x2_t v45;
  char *v46;
  char **v47;

  v42 = 0uLL;
  v43 = 0;
  v40 = 0u;
  v41 = 0u;
  v3 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v4)
    goto LABEL_44;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(&v38, v9, v3);
    v10 = v39;
    if (a3)
    {
      if (v39)
      {
        sub_20C129468((char **)&v40, &v38);
        v10 = v39;
        if ((v11 & 1) == 0)
        {
          if (v39)
          {
            v12 = v38;
            v8 = 1;
            goto LABEL_38;
          }
        }
      }
    }
    if (!v10)
    {
      v8 = 1;
      goto LABEL_41;
    }
    v13 = v38;
    v14 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    v15 = *v3;
    v16 = (_QWORD *)v42.i64[1];
    if ((v38 & 0xFFFFFFFFFFFFFFF8) == (*v3 & 0xFFFFFFFFFFFFFFF8))
    {
      if (v42.i64[1] >= (unint64_t)v43)
      {
        v17 = sub_20BFCA068((char **)&v42, v3);
      }
      else
      {
        *(_QWORD *)v42.i64[1] = v15;
        if ((v15 & 7) != 0)
        {
          do
            v18 = __ldxr(v14);
          while (__stxr(v18 + 2, v14));
          if ((v18 & 1) == 0)
            *v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        v17 = (char *)(v16 + 1);
      }
    }
    else
    {
      if (v42.i64[1] >= (unint64_t)v43)
      {
        v19 = (v42.i64[1] - v42.i64[0]) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          sub_20BDDF694();
        v20 = (uint64_t)&v43[-v42.i64[0]] >> 2;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)&v43[-v42.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v47 = &v43;
        if (v21)
        {
          v22 = (char *)sub_20BDDF6A8((uint64_t)&v43, v21);
          v13 = v38;
        }
        else
        {
          v22 = 0;
        }
        v23 = (uint64_t *)&v22[8 * v19];
        v24 = &v22[8 * v21];
        v46 = v24;
        *v23 = v13;
        v17 = (char *)(v23 + 1);
        v38 = 0;
        v45.i64[1] = (uint64_t)(v23 + 1);
        v25 = (_QWORD *)v42.i64[1];
        v26 = (_QWORD *)v42.i64[0];
        if (v42.i64[1] == v42.i64[0])
        {
          v28 = vdupq_n_s64(v42.u64[1]);
        }
        else
        {
          do
          {
            v27 = *--v25;
            *--v23 = v27;
            *v25 = 0;
          }
          while (v25 != v26);
          v28 = v42;
          v17 = (char *)v45.i64[1];
          v24 = v46;
        }
        v42.i64[0] = (uint64_t)v23;
        v42.i64[1] = (uint64_t)v17;
        v45 = v28;
        v29 = v43;
        v43 = v24;
        v46 = v29;
        v44 = (int64x2_t *)v28.i64[0];
        sub_20BF1EE98((uint64_t)&v44);
      }
      else
      {
        *(_QWORD *)v42.i64[1] = v38;
        v17 = (char *)(v16 + 1);
        v38 = 0;
      }
      v8 = 1;
    }
    v42.i64[1] = (uint64_t)v17;
    if (v39)
    {
      v12 = v38;
LABEL_38:
      if ((v12 & 7) != 0)
      {
        v30 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
    }
LABEL_41:
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) != 0)
  {
    v32 = *(int64x2_t *)a2;
    *(int64x2_t *)a2 = v42;
    v42 = v32;
    v33 = *(char **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v43;
    v43 = v33;
    v34 = 1;
    goto LABEL_45;
  }
LABEL_44:
  v34 = 0;
LABEL_45:
  v35 = *((_QWORD *)&v41 + 1);
  *((_QWORD *)&v41 + 1) = 0;
  if (v35)
  {
    v36 = (void *)sub_20BF20BCC(v35);
    operator delete(v36);
  }
  v44 = (int64x2_t *)&v40;
  sub_20BEEB2B8((void ***)&v44);
  v44 = &v42;
  sub_20BEEB2B8((void ***)&v44);
  return v34;
}

void sub_20C1181AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  unsigned int *v16;
  unsigned int v17;

  if (a10 && (a9 & 7) != 0)
  {
    v16 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  sub_20C1295D0((uint64_t)&a11);
  a11 = (void **)&a15;
  sub_20BEEB2B8(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations(unsigned __int8 *a1, int a2, unint64_t a3, uint64_t a4, uint64_t **a5)
{
  BOOL v10;
  uint64_t **Items;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void **v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (v10 || !a4 && *a5 != a5[1])
  {
    Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems((uint64_t)a1, a2);
    v24 = 0;
    v25 = 0;
    v23 = 0;
    sub_20BFE538C(&v23, *Items, Items[1], Items[1] - *Items);
    v12 = (v24 - (uint64_t)v23) >> 3;
    if (v12 >= a3)
    {
      if (a4 + a3 <= v12)
      {
        v14 = *a5;
        v15 = a5[1];
        if (a4 == v15 - *a5)
        {
          if (v14 != v15)
          {
            v16 = &v23[a3];
            do
              sub_20BF32220(v16++, v14++);
            while (v14 != v15);
          }
        }
        else
        {
          sub_20C117D14((uint64_t)&v23, &v23[a3], &v23[a3 + a4]);
          sub_20C1292A0((uint64_t *)&v23, &v23[a3], *a5, a5[1], a5[1] - *a5);
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems(a1, &v23, a2);
        v13 = 1;
        goto LABEL_21;
      }
      v18 = (void **)"sdf/listOp.cpp";
      v19 = "ReplaceOperations";
      v20 = 698;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperatio"
            "ns(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v24 - (uint64_t)v23) >> 3);
    }
    else
    {
      v18 = (void **)"sdf/listOp.cpp";
      v19 = "ReplaceOperations";
      v20 = 693;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperatio"
            "ns(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v24 - (uint64_t)v23) >> 3);
    }
    v13 = 0;
LABEL_21:
    v18 = (void **)&v23;
    sub_20BEEB2B8(&v18);
    return v13;
  }
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE17ReplaceOperationsENS_13SdfListOpTypeEmmRKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEE(a1, a2, a3, a4, a5);
}

void sub_20C1183F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_20BEEB2B8(&a11);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ComposeOperations(unsigned __int8 *a1, uint64_t a2, int a3)
{
  uint64_t **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD **v19;
  _QWORD *v20[2];
  uint64_t v21;
  uint64_t *v22;
  void **v23;
  uint64_t *v24[3];
  uint64_t **v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems(a1, (uint64_t **)(a2 + 8));
  Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems((uint64_t)a1, a3);
  sub_20C129770(&v21, *Items, Items[1]);
  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  for (i = v22; i != &v21; i = (uint64_t *)i[1])
  {
    v24[0] = i + 2;
    sub_20C128EE8((uint64_t)&v19, i + 2, (uint64_t)&unk_20CAC184C, v24)[5] = (uint64_t)i;
  }
  switch(a3)
  {
    case 1:
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys(a2, 1, (uint64_t)v24, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 2:
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys(a2, 2, (uint64_t)v24, &v21, (uint64_t)&v19);
      goto LABEL_16;
    case 3:
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys(a2, 3, (uint64_t)v24, &v21, (uint64_t)&v19);
      v13 = v25;
      if (v25 == v24)
      {
        v14 = 4;
        v13 = v24;
      }
      else
      {
        if (!v25)
          goto LABEL_15;
        v14 = 5;
      }
      ((void (*)(uint64_t **, uint64_t, uint64_t))(*v13)[v14])(v13, v11, v12);
LABEL_15:
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_ReorderKeys(a2, 3, (uint64_t)v24, &v21, (uint64_t)&v19);
LABEL_16:
      v15 = v25;
      if (v25 == v24)
      {
        v16 = 4;
        v15 = v24;
      }
      else
      {
        if (!v25)
          goto LABEL_21;
        v16 = 5;
      }
      ((void (*)(uint64_t **, uint64_t, uint64_t))(*v15)[v16])(v15, v8, v9);
LABEL_21:
      memset(v24, 0, sizeof(v24));
      if (v22 == &v21)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = v22;
        do
        {
          ++v17;
          v18 = (uint64_t *)v18[1];
        }
        while (v18 != &v21);
      }
      sub_20C129800(v24, (uint64_t)v22, (uint64_t)&v21, v17);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems(a1, v24, a3);
      v23 = (void **)v24;
      sub_20BEEB2B8(&v23);
      sub_20BF2B200((uint64_t)&v19, v20[0]);
      result = sub_20C124874(&v21);
      break;
    case 4:
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_PrependKeys(a2, 4, (uint64_t)v24, (uint64_t)&v21, (uint64_t)&v19);
      goto LABEL_16;
    case 5:
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AppendKeys(a2, 5, (uint64_t)v24, &v21, (uint64_t)&v19);
      goto LABEL_16;
    default:
      goto LABEL_21;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEE17ComposeOperationsERKS2_NS_13SdfListOpTypeE(a1, a2, a3);
}

void sub_20C118700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20BF2B200((uint64_t)&a9, a10);
  sub_20C124874(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(_QWORD *a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v3 = (char *)a1[1];
  v2 = (char *)a1[2];
  v4 = (_QWORD *)a2[1];
  if (v2 - v3 != a2[2] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != (*v4 & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v3 += 8;
    ++v4;
  }
  v6 = (char *)a1[4];
  v5 = (char *)a1[5];
  v7 = (_QWORD *)a2[4];
  if (v5 - v6 != a2[5] - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != (*v7 & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v6 += 8;
    ++v7;
  }
  v9 = (char *)a1[7];
  v8 = (char *)a1[8];
  v10 = (_QWORD *)a2[7];
  if (v8 - v9 != a2[8] - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != (*v10 & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v9 += 8;
    ++v10;
  }
  v12 = (char *)a1[10];
  v11 = (char *)a1[11];
  v13 = (_QWORD *)a2[10];
  if (v11 - v12 != a2[11] - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) != (*v13 & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v12 += 8;
    ++v13;
  }
  v15 = (char *)a1[13];
  v14 = (char *)a1[14];
  v16 = (_QWORD *)a2[13];
  if (v14 - v15 != a2[14] - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if ((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) != (*v16 & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v15 += 8;
    ++v16;
  }
  return sub_20C030130(a1 + 16, (uint64_t)(a2 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEeqERKS2_(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(a1, a2);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D40, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::TfToken]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C129A40(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C129A40(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C129A40(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C129A40(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C129A40(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C129A40(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsINS_7TfTokenEEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES7_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C118B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::CreateExplicit@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems((unsigned __int8 *)a2, a1);
}

void sub_20C118C24(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C0282CC(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEEC1Ev(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 1);
  result = (uint64_t)(a1 + 8);
  if (a1 + 8 != a2)
    return sub_20C129B64(result, *(_QWORD **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE16SetExplicitItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Create@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems((unsigned __int8 *)a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems((unsigned __int8 *)a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems((unsigned __int8 *)a4, a3);
}

void sub_20C118D30(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C0282CC(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 0);
  result = (uint64_t)(a1 + 56);
  if (a1 + 56 != a2)
    return sub_20C129B64(result, *(_QWORD **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE17SetPrependedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 0);
  result = (uint64_t)(a1 + 80);
  if (a1 + 80 != a2)
    return sub_20C129B64(result, *(_QWORD **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE16SetAppendedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 0);
  result = (uint64_t)(a1 + 104);
  if (a1 + 104 != a2)
    return sub_20C129B64(result, *(_QWORD **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE15SetDeletedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE4SwapERS2_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::HasItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (*(_BYTE *)a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 != v5)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, a2) & 1) == 0)
      {
        v4 += 16;
        if (v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
      v6 = v4;
      v4 = *(_QWORD *)(a1 + 16);
      return v6 != v4;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    if (v7 == v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, a2) & 1) == 0)
      {
        v7 += 16;
        if (v7 == v8)
        {
          v7 = v8;
          break;
        }
      }
      v9 = v7;
      v7 = *(_QWORD *)(a1 + 40);
    }
    if (v9 != v7)
      return 1;
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    if (v10 == v11)
    {
      v12 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v10, a2) & 1) == 0)
      {
        v10 += 16;
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
      v12 = v10;
      v10 = *(_QWORD *)(a1 + 64);
    }
    if (v12 != v10)
      return 1;
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_QWORD *)(a1 + 88);
    if (v13 == v14)
    {
      v15 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v13, a2) & 1) == 0)
      {
        v13 += 16;
        if (v13 == v14)
        {
          v13 = v14;
          break;
        }
      }
      v15 = v13;
      v13 = *(_QWORD *)(a1 + 88);
    }
    if (v15 != v13)
      return 1;
    v16 = *(_QWORD *)(a1 + 104);
    v17 = *(_QWORD *)(a1 + 112);
    if (v16 == v17)
    {
      v18 = *(_QWORD *)(a1 + 104);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v16, a2) & 1) == 0)
      {
        v16 += 16;
        if (v16 == v17)
        {
          v16 = v17;
          break;
        }
      }
      v18 = v16;
      v16 = *(_QWORD *)(a1 + 112);
    }
    if (v18 != v16)
      return 1;
    v4 = *(_QWORD *)(a1 + 128);
    v20 = *(_QWORD *)(a1 + 136);
    if (v4 != v20)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, a2) & 1) == 0)
      {
        v4 += 16;
        if (v4 == v20)
        {
          v4 = v20;
          break;
        }
      }
      v6 = v4;
      v4 = *(_QWORD *)(a1 + 136);
      return v6 != v4;
    }
  }
  v6 = v4;
  return v6 != v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfUnregisteredValue>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::S"
              "dfUnregisteredValue]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetAppliedItems@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C119324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20BF8CA20(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *i;
  uint64_t j;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;

  if (a2)
  {
    v14 = (uint64_t)&v14;
    v15 = &v14;
    v16 = 0;
    if (*(_BYTE *)a1)
    {
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys(a1, 0, a3, &v14, &v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4)
           + ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4)
           + ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4)
           + ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4)
           + ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4)))
      {
        goto LABEL_18;
      }
      sub_20C129D80((uint64_t)&v14, &v14, (_QWORD *)*a2, (_QWORD *)a2[1]);
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      for (i = v15; i != &v14; i = (uint64_t *)i[1])
      {
        v17 = i + 2;
        sub_20C129ED0(&v11, (pxrInternal__aapl__pxrReserved__::VtValue *)(i + 2), (uint64_t)&unk_20CAC184C, &v17)[6] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_DeleteKeys(a1, 2, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys(a1, 1, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PrependKeys(a1, 4, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AppendKeys(a1, 5, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_ReorderKeys(a1, 3, a3, &v14, (uint64_t)&v11);
    }
    sub_20C129D38((uint64_t)&v11, v12);
    v8 = (_QWORD *)*a2;
    for (j = a2[1]; (_QWORD *)j != v8; j = sub_20BF4C2D8(j - 16))
      ;
    a2[1] = (uint64_t)v8;
    if (v15 == &v14)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = v15;
      do
      {
        ++v9;
        v10 = (uint64_t *)v10[1];
      }
      while (v10 != &v14);
    }
    sub_20C12A1EC(a2, v8, v15, (uint64_t)&v14, v9);
LABEL_18:
    sub_20C1248F0(&v14);
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE15ApplyOperationsEPNSt3__16vectorIS1_NS3_9allocatorIS1_EEEERKNS3_8functionIFNS3_8optionalIS1_EENS_13SdfListOpTypeERKS1_EEE(a1, a2, a3);
}

void sub_20C119584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1248F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  uint64_t k;
  uint64_t v10;
  uint64_t m;
  uint64_t v12;
  unsigned __int8 *v13;

  if (*result != a2)
  {
    v2 = result;
    *result = a2;
    v3 = *((_QWORD *)result + 2);
    v4 = *((_QWORD *)v2 + 1);
    while (v3 != v4)
      v3 = sub_20BF4C2D8(v3 - 16);
    *((_QWORD *)v2 + 2) = v4;
    v6 = *((_QWORD *)v2 + 4);
    for (i = *((_QWORD *)v2 + 5); i != v6; i = sub_20BF4C2D8(i - 16))
      ;
    *((_QWORD *)v2 + 5) = v6;
    v8 = *((_QWORD *)v2 + 7);
    for (j = *((_QWORD *)v2 + 8); j != v8; j = sub_20BF4C2D8(j - 16))
      ;
    *((_QWORD *)v2 + 8) = v8;
    v10 = *((_QWORD *)v2 + 10);
    for (k = *((_QWORD *)v2 + 11); k != v10; k = sub_20BF4C2D8(k - 16))
      ;
    *((_QWORD *)v2 + 11) = v10;
    v12 = *((_QWORD *)v2 + 13);
    for (m = *((_QWORD *)v2 + 14); m != v12; m = sub_20BF4C2D8(m - 16))
      ;
    *((_QWORD *)v2 + 14) = v12;
    v13 = (unsigned __int8 *)*((_QWORD *)v2 + 16);
    for (result = (unsigned __int8 *)*((_QWORD *)v2 + 17);
          result != v13;
    *((_QWORD *)v2 + 17) = v13;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE12_SetExplicitEb(result, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 0);
  result = (uint64_t)(a1 + 32);
  if (a1 + 32 != a2)
    return sub_20C129B64(result, *(_QWORD **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE13SetAddedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 0);
  result = (uint64_t)(a1 + 128);
  if (a1 + 128 != a2)
    return sub_20C129B64(result, *(_QWORD **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE15SetOrderedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetItems(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE8SetItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEENS_13SdfListOpTypeE(a1, a2, a3);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Clear(unsigned __int8 *a1)
{
  *a1 = 1;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 0);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit(unsigned __int8 *a1)
{
  *a1 = 0;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(a1, 1);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE20ClearAndMakeExplicitEv(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(a1, a2);
  v12 = result[1];
  v21 = *result;
  v22 = v12;
  if (v21 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEFB30(&v21, v10, v11);
        LODWORD(v23) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v15 + 48))(v24, v15, &v23, v14);
        if (v25)
        {
          if (v13 == sub_20C12B614((uint64_t)a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v24))
          {
            v16 = sub_20C12B43C((uint64_t)a4, 0, 0, v24);
            v17 = *a4;
            *(_QWORD *)(v17 + 8) = v16;
            *v16 = v17;
            *a4 = (uint64_t)v16;
            v16[1] = a4;
            ++a4[2];
            v23 = v24;
            sub_20C129ED0(a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v24, (uint64_t)&unk_20CAC184C, &v23)[6] = (uint64_t)v16;
          }
          if (v25)
            sub_20BF4C2D8((uint64_t)v24);
        }
      }
      else
      {
        v18 = (_QWORD *)sub_20BFEFB30(&v21, v10, v11);
        if (v13 == sub_20C12B614((uint64_t)a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v18))
        {
          v19 = sub_20C12B43C((uint64_t)a4, 0, 0, v18);
          v20 = *a4;
          *(_QWORD *)(v20 + 8) = v19;
          *v19 = v20;
          *a4 = (uint64_t)v19;
          v19[1] = a4;
          ++a4[2];
          v24[0] = v18;
          sub_20C129ED0(a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v18, (uint64_t)&unk_20CAC184C, v24)[6] = (uint64_t)v19;
        }
      }
      result = sub_20BFEFBAC(&v21);
    }
    while (v21 != v22);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_16Sdf_ListOpTraitsIS1_E8LessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C119974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a15)
    sub_20BF4C2D8((uint64_t)&a13);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[2];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(a1, a2);
  v12 = result[1];
  v25 = *result;
  v26 = v12;
  if (v25 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEFB30(&v25, v10, v11);
        v27 = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(v28, v15, &v27, v14);
        if (v29)
        {
          v16 = sub_20C12B614((uint64_t)a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v28);
          v17 = v16;
          if (v13 != (uint64_t **)v16)
          {
            v18 = (uint64_t *)v16[6];
            v19 = *v18;
            *(_QWORD *)(v19 + 8) = v18[1];
            *(_QWORD *)v18[1] = v19;
            --*(_QWORD *)(a4 + 16);
            sub_20BF4C2D8((uint64_t)(v18 + 2));
            operator delete(v18);
            sub_20BE10B80(a5, v17);
            sub_20BF4C2D8((uint64_t)(v17 + 4));
            operator delete(v17);
          }
          if (v29)
            sub_20BF4C2D8((uint64_t)v28);
        }
      }
      else
      {
        v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BFEFB30(&v25, v10, v11);
        v21 = sub_20C12B614((uint64_t)a5, v20);
        v22 = v21;
        if (v13 != (uint64_t **)v21)
        {
          v23 = (uint64_t *)v21[6];
          v24 = *v23;
          *(_QWORD *)(v24 + 8) = v23[1];
          *(_QWORD *)v23[1] = v24;
          --*(_QWORD *)(a4 + 16);
          sub_20BF4C2D8((uint64_t)(v23 + 2));
          operator delete(v23);
          sub_20BE10B80(a5, v22);
          sub_20BF4C2D8((uint64_t)(v22 + 4));
          operator delete(v22);
        }
      }
      result = sub_20BFEFBAC(&v25);
    }
    while (v25 != v26);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_16Sdf_ListOpTraitsIS1_E8LessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C119B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a15)
    sub_20BF4C2D8((uint64_t)&a13);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::VtValue **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  pxrInternal__aapl__pxrReserved__::VtValue **result;
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::VtValue **v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  pxrInternal__aapl__pxrReserved__::VtValue *v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  pxrInternal__aapl__pxrReserved__::VtValue **v21;
  pxrInternal__aapl__pxrReserved__::VtValue *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  pxrInternal__aapl__pxrReserved__::VtValue *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::VtValue *v26;
  pxrInternal__aapl__pxrReserved__::VtValue *v27;
  pxrInternal__aapl__pxrReserved__::VtValue *v28;
  _QWORD *v29;
  _QWORD *v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  result = (pxrInternal__aapl__pxrReserved__::VtValue **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(a1, a2);
  v11 = *result;
  v10 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *result)
    {
      do
      {
        LODWORD(v29) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 - 16);
        result = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, _QWORD **, pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v12 + 48))(v30, v12, &v29, v10);
        if (v31)
        {
          v13 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)(a4 + 8);
          result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C12B614((uint64_t)a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v30);
          if (a5 + 1 == (uint64_t **)result)
          {
            v19 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C12B43C(a4, 0, 0, v30);
            v20 = *v13;
            *((_QWORD *)v20 + 1) = v19;
            *(_QWORD *)v19 = v20;
            *v13 = v19;
            *((_QWORD *)v19 + 1) = v13;
            ++*(_QWORD *)(a4 + 16);
            v29 = v30;
            result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C129ED0(a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v30, (uint64_t)&unk_20CAC184C, &v29);
            result[6] = v19;
          }
          else
          {
            v14 = result[6];
            if (v14 != (pxrInternal__aapl__pxrReserved__::VtValue *)v13)
            {
              v15 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)v14 + 1);
              if (v14 != v15)
              {
                v16 = *(pxrInternal__aapl__pxrReserved__::VtValue **)v15;
                v17 = *(_QWORD *)v14;
                *(_QWORD *)(v17 + 8) = *((_QWORD *)v16 + 1);
                **((_QWORD **)v16 + 1) = v17;
                v18 = *v13;
                *((_QWORD *)v18 + 1) = v14;
                *(_QWORD *)v14 = v18;
                *v13 = v16;
                *((_QWORD *)v16 + 1) = v13;
              }
            }
          }
          if (v31)
            result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20BF4C2D8((uint64_t)v30);
        }
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *result)
  {
    do
    {
      v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 - 16);
      v21 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)(a4 + 8);
      result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C12B614((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)result)
      {
        v27 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C12B43C(a4, 0, 0, v10);
        v28 = *v21;
        *((_QWORD *)v28 + 1) = v27;
        *(_QWORD *)v27 = v28;
        *v21 = v27;
        *((_QWORD *)v27 + 1) = v21;
        ++*(_QWORD *)(a4 + 16);
        v30[0] = v10;
        result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C129ED0(a5, v10, (uint64_t)&unk_20CAC184C, v30);
        result[6] = v27;
      }
      else
      {
        v22 = result[6];
        if (v22 != (pxrInternal__aapl__pxrReserved__::VtValue *)v21)
        {
          v23 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)v22 + 1);
          if (v22 != v23)
          {
            v24 = *(pxrInternal__aapl__pxrReserved__::VtValue **)v23;
            v25 = *(_QWORD *)v22;
            *(_QWORD *)(v25 + 8) = *((_QWORD *)v24 + 1);
            **((_QWORD **)v24 + 1) = v25;
            v26 = *v21;
            *((_QWORD *)v26 + 1) = v22;
            *(_QWORD *)v22 = v26;
            *v21 = v24;
            *((_QWORD *)v24 + 1) = v21;
          }
        }
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_16Sdf_ListOpTraitsIS1_E8LessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C119E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a13)
    sub_20BF4C2D8((uint64_t)&a11);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::VtValue **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, uint64_t **a5)
{
  pxrInternal__aapl__pxrReserved__::VtValue **result;
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::VtValue *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28[2];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  result = (pxrInternal__aapl__pxrReserved__::VtValue **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(a1, a2);
  v10 = *result;
  v11 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (*result != v11)
    {
      do
      {
        LODWORD(v27) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        result = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, _QWORD **, pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v12 + 48))(v28, v12, &v27, v10);
        if (v29)
        {
          result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C12B614((uint64_t)a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v28);
          if (a5 + 1 == (uint64_t **)result)
          {
            v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C12B43C((uint64_t)a4, 0, 0, v28);
            v19 = *(_QWORD *)a4;
            *(_QWORD *)(v19 + 8) = v18;
            *(_QWORD *)v18 = v19;
            *(_QWORD *)a4 = v18;
            *((_QWORD *)v18 + 1) = a4;
            ++*((_QWORD *)a4 + 2);
            v27 = v28;
            result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C129ED0(a5, (pxrInternal__aapl__pxrReserved__::VtValue *)v28, (uint64_t)&unk_20CAC184C, &v27);
            result[6] = v18;
          }
          else
          {
            v13 = result[6];
            if (v13 != a4)
            {
              v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)v13 + 1);
              if (v13 != v14)
              {
                v15 = *(_QWORD *)v14;
                v16 = *(_QWORD *)v13;
                *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
                **(_QWORD **)(v15 + 8) = v16;
                v17 = *(_QWORD *)a4;
                *(_QWORD *)(v17 + 8) = v13;
                *(_QWORD *)v13 = v17;
                *(_QWORD *)a4 = v15;
                *(_QWORD *)(v15 + 8) = a4;
              }
            }
          }
          if (v29)
            result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20BF4C2D8((uint64_t)v28);
        }
        v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      }
      while (v10 != v11);
    }
  }
  else if (*result != v11)
  {
    do
    {
      result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C12B614((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)result)
      {
        v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C12B43C((uint64_t)a4, 0, 0, v10);
        v26 = *(_QWORD *)a4;
        *(_QWORD *)(v26 + 8) = v25;
        *(_QWORD *)v25 = v26;
        *(_QWORD *)a4 = v25;
        *((_QWORD *)v25 + 1) = a4;
        ++*((_QWORD *)a4 + 2);
        v28[0] = v10;
        result = (pxrInternal__aapl__pxrReserved__::VtValue **)sub_20C129ED0(a5, v10, (uint64_t)&unk_20CAC184C, v28);
        result[6] = v25;
      }
      else
      {
        v20 = result[6];
        if (v20 != a4)
        {
          v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)v20 + 1);
          if (v20 != v21)
          {
            v22 = *(_QWORD *)v21;
            v23 = *(_QWORD *)v20;
            *(_QWORD *)(v23 + 8) = *(_QWORD *)(v22 + 8);
            **(_QWORD **)(v22 + 8) = v23;
            v24 = *(_QWORD *)a4;
            *(_QWORD *)(v24 + 8) = v20;
            *(_QWORD *)v20 = v24;
            *(_QWORD *)a4 = v22;
            *(_QWORD *)(v22 + 8) = a4;
          }
        }
      }
      v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_16Sdf_ListOpTraitsIS1_E8LessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11A0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a13)
    sub_20BF4C2D8((uint64_t)&a11);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];
  __int128 *v30;
  _QWORD *v31[2];
  __int128 v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v32 = 0uLL;
  v33 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30 = (__int128 *)v31;
  *(_OWORD *)v29 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(a1, a2);
  while (v29[0] != v29[1])
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v11 = sub_20BFEFB30(v29, v9, v10);
      v34 = a2;
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(__int128 *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(&v35, v12, &v34, v11);
      if ((_BYTE)v36)
      {
        sub_20C12B51C((uint64_t **)&v30, (pxrInternal__aapl__pxrReserved__::VtValue *)&v35, &v35);
        if ((v13 & 1) != 0)
          sub_20C11AA68(&v32, &v35);
        if ((_BYTE)v36)
          sub_20BF4C2D8((uint64_t)&v35);
      }
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BFEFB30(v29, v9, v10);
      sub_20C12B51C((uint64_t **)&v30, v14, v14);
      if ((v15 & 1) != 0)
      {
        v17 = (_QWORD *)sub_20BFEFB30(v29, v15, v16);
        sub_20C11AA68(&v32, v17);
      }
    }
    sub_20BFEFBAC(v29);
  }
  if ((_QWORD)v32 != *((_QWORD *)&v32 + 1))
  {
    *(_QWORD *)&v35 = &v35;
    *((_QWORD *)&v35 + 1) = &v35;
    v36 = 0;
    sub_20BEDEA80(&v35, a4);
    *(_OWORD *)v29 = v32;
    while (v29[0] != v29[1])
    {
      v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C11B5A8(v29, v18, v19);
      v21 = sub_20C12B614(a5, v20);
      v22 = v21;
      if ((_QWORD *)(a5 + 8) != v21)
      {
        v23 = (__int128 *)v21[6];
        while (1)
        {
          v23 = (__int128 *)*((_QWORD *)v23 + 1);
          if (v23 == &v35)
            break;
          if (sub_20C12B6A0((uint64_t)&v30, (pxrInternal__aapl__pxrReserved__::VtValue *)(v23 + 1)))
            goto LABEL_22;
        }
        v23 = &v35;
LABEL_22:
        if (!v36)
          goto LABEL_27;
        sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&v35, (_QWORD *)v22[6], v23);
      }
      sub_20C11B624(v29);
    }
    v24 = v36;
    if (v36)
    {
      v25 = (uint64_t *)a4[1];
      v26 = v35;
      v27 = **((_QWORD **)&v35 + 1);
      *(_QWORD *)(v27 + 8) = *(_QWORD *)(v35 + 8);
      **(_QWORD **)(v26 + 8) = v27;
      v28 = *v25;
      *(_QWORD *)(v28 + 8) = *((_QWORD *)&v26 + 1);
      **((_QWORD **)&v26 + 1) = v28;
      *v25 = v26;
      *(_QWORD *)(v26 + 8) = v25;
      a4[2] += v24;
      v36 = 0;
    }
LABEL_27:
    sub_20C1248F0((uint64_t *)&v35);
  }
  sub_20C129D38((uint64_t)&v30, v31[0]);
  v30 = &v32;
  sub_20BF8CA20((void ***)&v30);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS_16Sdf_ListOpTraitsIS1_E8LessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, _QWORD *a13, uint64_t a14, char a15)
{
  sub_20C129D38((uint64_t)&a12, a13);
  a12 = (void **)&a15;
  sub_20BF8CA20(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  void ****v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void **v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  void ***v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C036FFC((uint64_t)a3, a1);
    a3[152] = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    sub_20C037170(&v33, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
    *(_QWORD *)&v38 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(a1, (uint64_t *)&v33, (uint64_t)&v36);
    v6 = (void ****)v38;
    if ((void ****)v38 == &v36)
    {
      v7 = 4;
      v6 = &v36;
    }
    else
    {
      if (!(_QWORD)v38)
      {
LABEL_26:
        LOBYTE(v36) = 0;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems((unsigned __int8 *)&v36, (unsigned __int8 *)&v33);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v36);
        v30 = (void **)&v44 + 1;
        sub_20BF8CA20(&v30);
        v30 = (void **)&v43;
        sub_20BF8CA20(&v30);
        v30 = (void **)&v41 + 1;
        sub_20BF8CA20(&v30);
        v30 = (void **)&v40;
        sub_20BF8CA20(&v30);
        v30 = (void **)&v38 + 1;
        sub_20BF8CA20(&v30);
        v30 = (void **)&v37;
        sub_20BF8CA20(&v30);
        v36 = (void ***)&v33;
LABEL_27:
        sub_20BF8CA20((void ***)&v36);
        return;
      }
      v7 = 5;
    }
    ((void (*)(void))(*v6)[v7])();
    goto LABEL_26;
  }
  if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 128) == *(_QWORD *)(a2 + 136))
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    sub_20C037170(&v33, *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    sub_20C037170(&v30, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    sub_20C037170(&v27, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4);
    v8 = *(_QWORD **)(a1 + 104);
    v9 = *(_QWORD **)(a1 + 112);
    while (v8 != v9)
    {
      v10 = sub_20C11A9D4(v30, v31, (uint64_t)v8);
      sub_20C11A938((uint64_t)&v30, v10, (uint64_t)v31);
      v11 = sub_20C11A9D4(v27, v28, (uint64_t)v8);
      sub_20C11A938((uint64_t)&v27, v11, (uint64_t)v28);
      v12 = v33;
      v13 = v34;
      if (v33 == v34)
      {
        v14 = v33;
      }
      else
      {
        while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v12, v8) & 1) == 0)
        {
          v12 += 2;
          if (v12 == v13)
          {
            v12 = v13;
            break;
          }
        }
        v14 = v12;
        v12 = v34;
      }
      if (v14 == v12)
        sub_20C11AA68(&v33, v8);
      v8 += 2;
    }
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    if (v15 == v16)
    {
      v20 = *(_QWORD **)(a1 + 56);
    }
    else
    {
      do
      {
        v17 = sub_20C11A9D4(v33, v34, v15);
        sub_20C11A938((uint64_t)&v33, v17, (uint64_t)v34);
        v18 = sub_20C11A9D4(v30, v31, v15);
        sub_20C11A938((uint64_t)&v30, v18, (uint64_t)v31);
        v19 = sub_20C11A9D4(v27, v28, v15);
        sub_20C11A938((uint64_t)&v27, v19, (uint64_t)v28);
        v15 += 16;
      }
      while (v15 != v16);
      v20 = *(_QWORD **)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 64);
    }
    sub_20C12A604((uint64_t *)&v30, v30, v20, v15, (v15 - (uint64_t)v20) >> 4);
    v21 = *(_QWORD *)(a1 + 80);
    v22 = *(_QWORD *)(a1 + 88);
    if (v21 == v22)
    {
      v26 = *(_QWORD **)(a1 + 80);
    }
    else
    {
      do
      {
        v23 = sub_20C11A9D4(v33, v34, v21);
        sub_20C11A938((uint64_t)&v33, v23, (uint64_t)v34);
        v24 = sub_20C11A9D4(v30, v31, v21);
        sub_20C11A938((uint64_t)&v30, v24, (uint64_t)v31);
        v25 = sub_20C11A9D4(v27, v28, v21);
        sub_20C11A938((uint64_t)&v27, v25, (uint64_t)v28);
        v21 += 16;
      }
      while (v21 != v22);
      v26 = *(_QWORD **)(a1 + 80);
      v21 = *(_QWORD *)(a1 + 88);
    }
    sub_20C12A604((uint64_t *)&v27, v28, v26, v21, (v21 - (uint64_t)v26) >> 4);
    LOBYTE(v36) = 0;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems((unsigned __int8 *)&v36, (unsigned __int8 *)&v33);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems((unsigned __int8 *)&v36, (unsigned __int8 *)&v30);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems((unsigned __int8 *)&v36, (unsigned __int8 *)&v27);
    sub_20C1247A0((uint64_t)a3, (uint64_t)&v36);
    sub_20C0282CC((void **)&v36);
    v36 = (void ***)&v27;
    sub_20BF8CA20((void ***)&v36);
    v36 = &v30;
    sub_20BF8CA20((void ***)&v36);
    v36 = (void ***)&v33;
    goto LABEL_27;
  }
LABEL_5:
  *a3 = 0;
  a3[152] = 0;
}

void sub_20C11A844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_20BF8CA20(&a19);
  a19 = (void **)&a13;
  sub_20BF8CA20(&a19);
  a19 = (void **)&a16;
  sub_20BF8CA20(&a19);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C11A938(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != (_QWORD *)a3)
  {
    v5 = a3;
    v6 = *(_QWORD **)(a1 + 8);
    if ((_QWORD *)a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 2 * ((a3 - (uint64_t)a2) >> 4);
      v8 = a2;
      do
      {
        sub_20BF4B5D8(v8, &v8[v7]);
        v8 += 2;
      }
      while (&v8[v7] != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while ((_QWORD *)v5 != v8)
      v5 = sub_20BF4C2D8(v5 - 16);
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

_QWORD *sub_20C11A9D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *i;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v5, a3) & 1) == 0)
    {
      v5 += 2;
      if (v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 2; i != a2; i += 2)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(i, a3) & 1) == 0)
      {
        sub_20BF4B5D8(v5, i);
        v5 += 2;
      }
    }
  }
  return v5;
}

uint64_t sub_20C11AA68(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20BDEA2F0(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[16 * v10];
    v18 = &v14[16 * v13];
    sub_20BF4C6D0(v16, a2);
    v17 = v16 + 16;
    sub_20BFC397C(a1, &v15);
    v9 = a1[1];
    result = sub_20BFC3A00((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_20BF4C6D0(*(_QWORD **)(v4 - 8), a2);
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_20C11AB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ModifyOperations(__int128 *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C11AC38(a2, (__int128 *)((char *)a1 + 8), a3);
  v7 = v6 | sub_20C11AC38(a2, a1 + 2, a3);
  v8 = sub_20C11AC38(a2, (__int128 *)((char *)a1 + 56), a3);
  v9 = v7 | v8 | sub_20C11AC38(a2, a1 + 5, a3);
  v10 = sub_20C11AC38(a2, (__int128 *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_20C11AC38(a2, a1 + 8, a3);
}

uint64_t sub_20C11AC38(uint64_t a1, __int128 *a2, int a3)
{
  std::type_info *v3;
  std::type_info *v4;
  char v8;
  uint64_t v9;
  char *v10;
  int v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void **v23[2];
  unsigned __int8 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v21 = 0uLL;
  v22 = 0;
  v19 = 0u;
  v20 = 0u;
  v3 = *(std::type_info **)a2;
  v4 = (std::type_info *)*((_QWORD *)a2 + 1);
  if (*(std::type_info **)a2 == v4)
    goto LABEL_19;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    (*(void (**)(void ***__return_ptr, uint64_t, std::type_info *))(*(_QWORD *)v9 + 48))(v23, v9, v3);
    v11 = v24;
    if (a3)
    {
      if (v24)
      {
        sub_20C12A7BC((uint64_t *)&v19, (pxrInternal__aapl__pxrReserved__::VtValue *)v23);
        v11 = v24;
        if ((v12 & 1) == 0)
        {
          if (v24)
          {
            v8 = 1;
LABEL_15:
            sub_20BF4C2D8((uint64_t)v23);
            goto LABEL_16;
          }
        }
      }
    }
    if (!v11)
    {
      v8 = 1;
      goto LABEL_16;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator!=((pxrInternal__aapl__pxrReserved__::VtValue *)v23, v3, v10))
    {
      sub_20C12A900(&v21, v23);
      v8 = 1;
    }
    else
    {
      sub_20C11AA68(&v21, v3);
    }
    if (v24)
      goto LABEL_15;
LABEL_16:
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) != 0)
  {
    v13 = *a2;
    *a2 = v21;
    v21 = v13;
    v14 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v22;
    v22 = v14;
    v15 = 1;
    goto LABEL_20;
  }
LABEL_19:
  v15 = 0;
LABEL_20:
  v16 = *((_QWORD *)&v20 + 1);
  *((_QWORD *)&v20 + 1) = 0;
  if (v16)
  {
    v17 = (void *)sub_20C12AA6C(v16);
    operator delete(v17);
  }
  v23[0] = (void **)&v19;
  sub_20BF8CA20(v23);
  *(_QWORD *)&v19 = &v21;
  sub_20BF8CA20((void ***)&v19);
  return v15;
}

void sub_20C11ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19)
    sub_20BF4C2D8((uint64_t)&a17);
  sub_20C12AA00((uint64_t)&a9);
  a9 = (void **)&a13;
  sub_20BF8CA20(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ReplaceOperations(unsigned __int8 *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v10;
  uint64_t *Items;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (v10 || !a4 && *(_QWORD *)a5 != *(_QWORD *)(a5 + 8))
  {
    Items = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems((uint64_t)a1, a2);
    v24 = 0;
    v25 = 0;
    v23 = 0;
    sub_20C037170(&v23, *Items, Items[1], (Items[1] - *Items) >> 4);
    v12 = (v24 - v23) >> 4;
    if (v12 >= a3)
    {
      if (a4 + a3 <= v12)
      {
        v14 = *(_QWORD **)a5;
        v15 = *(_QWORD **)(a5 + 8);
        if (a4 == ((uint64_t)v15 - *(_QWORD *)a5) >> 4)
        {
          if (v14 != v15)
          {
            v16 = (_QWORD *)(v23 + 16 * a3);
            do
            {
              sub_20BF4A9BC(v16, v14);
              v14 += 2;
              v16 += 2;
            }
            while (v14 != v15);
          }
        }
        else
        {
          sub_20C11A938((uint64_t)&v23, (_QWORD *)(v23 + 16 * a3), v23 + 16 * a3 + 16 * a4);
          sub_20C12A604(&v23, (_QWORD *)(v23 + 16 * a3), *(_QWORD **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetItems(a1, (unsigned __int8 *)&v23, a2);
        v13 = 1;
        goto LABEL_21;
      }
      v18 = (void **)"sdf/listOp.cpp";
      v19 = "ReplaceOperations";
      v20 = 698;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Re"
            "placeOperations(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved"
            "__::SdfUnregisteredValue]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v24 - v23) >> 4);
    }
    else
    {
      v18 = (void **)"sdf/listOp.cpp";
      v19 = "ReplaceOperations";
      v20 = 693;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Re"
            "placeOperations(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved"
            "__::SdfUnregisteredValue]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v24 - v23) >> 4);
    }
    v13 = 0;
LABEL_21:
    v18 = (void **)&v23;
    sub_20BF8CA20(&v18);
    return v13;
  }
  return 0;
}

void sub_20C11B000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_20BF8CA20(&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ComposeOperations(unsigned __int8 *a1, uint64_t a2, int a3)
{
  _QWORD **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19[2];
  uint64_t v20;
  uint64_t *v21;
  void **v22;
  _QWORD *v23[3];
  _QWORD **v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    Items = (_QWORD **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems((uint64_t)a1, a3);
    sub_20C12B3AC(&v20, *Items, Items[1]);
    v19[0] = 0;
    v19[1] = 0;
    v18 = (uint64_t *)v19;
    for (i = v21; i != &v20; i = (uint64_t *)i[1])
    {
      v23[0] = i + 2;
      sub_20C129ED0(&v18, (pxrInternal__aapl__pxrReserved__::VtValue *)(i + 2), (uint64_t)&unk_20CAC184C, v23)[6] = (uint64_t)i;
    }
    switch(a3)
    {
      case 1:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys(a2, 1, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      case 2:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys(a2, 2, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      case 3:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys(a2, 3, (uint64_t)v23, &v20, &v18);
        v12 = v24;
        if (v24 == v23)
        {
          v13 = 4;
          v12 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_15;
          v13 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v10, v11);
LABEL_15:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_ReorderKeys(a2, 3, (uint64_t)v23, &v20, (uint64_t)&v18);
LABEL_16:
        v14 = v24;
        if (v24 == v23)
        {
          v15 = 4;
          v14 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_21;
          v15 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v14 + 8 * v15))(v14, v8, v9);
LABEL_21:
        memset(v23, 0, sizeof(v23));
        if (v21 == &v20)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = v21;
          do
          {
            ++v16;
            v17 = (uint64_t *)v17[1];
          }
          while (v17 != &v20);
        }
        sub_20C12B498(v23, (uint64_t)v21, (uint64_t)&v20, v16);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetItems(a1, (unsigned __int8 *)v23, a3);
        v22 = (void **)v23;
        sub_20BF8CA20(&v22);
        sub_20C129D38((uint64_t)&v18, v19[0]);
        sub_20C1248F0(&v20);
        break;
      case 4:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PrependKeys(a2, 4, (uint64_t)v23, (uint64_t)&v20, &v18);
        goto LABEL_16;
      case 5:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AppendKeys(a2, 5, (uint64_t)v23, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20, &v18);
        goto LABEL_16;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems(a1, (unsigned __int8 *)(a2 + 8));
  }
}

void sub_20C11B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20C129D38((uint64_t)&a9, a10);
  sub_20C1248F0(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  if (v5 - v4 != a2[2] - v6)
    return 0;
  while (v4 != v5)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, v6))
      return 0;
    v4 += 16;
    v6 += 16;
  }
  v7 = a1[4];
  v8 = a1[5];
  v9 = a2[4];
  if (v8 - v7 != a2[5] - v9)
    return 0;
  while (v7 != v8)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, v9))
      return 0;
    v7 += 16;
    v9 += 16;
  }
  v10 = a1[7];
  v11 = a1[8];
  v12 = a2[7];
  if (v11 - v10 != a2[8] - v12)
    return 0;
  while (v10 != v11)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v10, v12))
      return 0;
    v10 += 16;
    v12 += 16;
  }
  v13 = a1[10];
  v14 = a1[11];
  v15 = a2[10];
  if (v14 - v13 != a2[11] - v15)
    return 0;
  while (v13 != v14)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v13, v15))
      return 0;
    v13 += 16;
    v15 += 16;
  }
  v16 = a1[13];
  v17 = a1[14];
  v18 = a2[13];
  if (v17 - v16 != a2[14] - v18)
    return 0;
  while (v16 != v17)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v16, v18))
      return 0;
    v16 += 16;
    v18 += 16;
  }
  return sub_20C11B520(a1 + 16, a2 + 16);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEEeqERKS2_(a1, a2);
}

uint64_t sub_20C11B520(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==(a1, a2) ^ 1;
}

uint64_t sub_20C11B5A8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnre"
            "gisteredValue>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C11B61C()
{
  JUMPOUT(0x20C11B5CCLL);
}

_QWORD *sub_20C11B624(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfUnregisteredValue>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregister"
            "edValue>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D60, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C12B71C(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C12B71C(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C12B71C(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C12B71C(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C12B71C(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C12B71C(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsINS_20SdfUnregisteredValueEEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES7_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C11B8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::CreateExplicit@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems((_DWORD *)a2, a1);
}

void sub_20C11B9AC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20BFD6A50(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEEC1Ev(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems(_DWORD *a1, _DWORD **a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 1);
  result = a1 + 2;
  if (a1 + 2 != (_DWORD *)a2)
    return sub_20C0E29B0((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE16SetExplicitItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems((_DWORD *)a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems((_DWORD *)a4, a2);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems((_DWORD *)a4, a3);
}

void sub_20C11BAB8(_Unwind_Exception *a1)
{
  void **v1;

  sub_20BFD6A50(v1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems(_DWORD *a1, _DWORD **a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 0);
  result = a1 + 14;
  if (a1 + 14 != (_DWORD *)a2)
    return sub_20C0E29B0((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE17SetPrependedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems(_DWORD *a1, _DWORD **a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 0);
  result = a1 + 20;
  if (a1 + 20 != (_DWORD *)a2)
    return sub_20C0E29B0((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE16SetAppendedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems(_DWORD *a1, _DWORD **a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 0);
  result = a1 + 26;
  if (a1 + 26 != (_DWORD *)a2)
    return sub_20C0E29B0((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE15SetDeletedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE4SwapERS2_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE7HasKeysEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasItem(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v2 = *(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      while (*v3 != *a2)
      {
        if (++v3 == v2)
          goto LABEL_5;
      }
    }
    return v3 != v2;
  }
  v6 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD **)(a1 + 40);
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(_QWORD **)(a1 + 64);
    if (v8 != v7)
    {
      while (*v8 != *a2)
      {
        if (++v8 == v7)
        {
          v8 = *(_QWORD **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v10 = *(_QWORD **)(a1 + 80);
      v9 = *(_QWORD **)(a1 + 88);
      if (v10 != v9)
      {
        while (*v10 != *a2)
        {
          if (++v10 == v9)
          {
            v10 = *(_QWORD **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        v12 = *(_QWORD **)(a1 + 104);
        v11 = *(_QWORD **)(a1 + 112);
        if (v12 != v11)
        {
          while (*v12 != *a2)
          {
            if (++v12 == v11)
            {
              v12 = *(_QWORD **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          v3 = *(_QWORD **)(a1 + 128);
          v2 = *(_QWORD **)(a1 + 136);
          if (v3 != v2)
          {
            while (*v3 != *a2)
            {
              if (++v3 == v2)
              {
LABEL_5:
                v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE7HasItemERKS1_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfPath>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::SdfPath]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetAppliedItems@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C11C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20BFD6F90(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t i;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  _DWORD *v17;

  if (a2)
  {
    v14 = (uint64_t *)&v14;
    v15 = &v14;
    v16 = 0;
    if (*(_BYTE *)a1)
    {
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys(a1, 0, a3, &v14, &v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && !(((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3)
           + ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
           + ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3)
           + ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3)
           + ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3)))
      {
LABEL_17:
        sub_20C124960(&v14);
        return;
      }
      sub_20C12B8B4((uint64_t)&v14, (uint64_t *)&v14, (_DWORD *)*a2, (_DWORD *)a2[1]);
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      for (i = (uint64_t)v15; (uint64_t **)i != &v14; i = *(_QWORD *)(i + 8))
      {
        v17 = (_DWORD *)(i + 16);
        sub_20C12B9FC(&v11, (unint64_t *)(i + 16), (uint64_t)&unk_20CAC184C, &v17)[5] = (uint64_t *)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_DeleteKeys(a1, 2, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys(a1, 1, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_PrependKeys(a1, 4, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AppendKeys(a1, 5, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_ReorderKeys(a1, 3, a3, (uint64_t *)&v14, (uint64_t)&v11);
    }
    sub_20C12B840((uint64_t)&v11, v12);
    v7 = (int *)*a2;
    v8 = (int *)a2[1];
    if (v8 != (int *)*a2)
    {
      do
      {
        v8 -= 2;
        sub_20BFD6F64((uint64_t)(a2 + 2), v8);
      }
      while (v8 != v7);
    }
    a2[1] = (uint64_t)v7;
    if (v15 == &v14)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = (uint64_t)v15;
      do
      {
        ++v9;
        v10 = *(_QWORD *)(v10 + 8);
      }
      while ((uint64_t **)v10 != &v14);
    }
    sub_20C12BB34(a2, v7, (uint64_t)v15, (uint64_t)&v14, v9);
    goto LABEL_17;
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE15ApplyOperationsEPNSt3__16vectorIS1_NS3_9allocatorIS1_EEEERKNS3_8functionIFNS3_8optionalIS1_EENS_13SdfListOpTypeERKS1_EEE(a1, a2, a3);
}

void sub_20C11C29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C124960((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(_DWORD *result, int a2)
{
  _QWORD *v2;
  _DWORD *i;
  _DWORD *v4;
  _DWORD *j;
  _DWORD *v6;
  _DWORD *k;
  _DWORD *v8;
  _DWORD *m;
  _DWORD *v10;
  _DWORD *n;
  _DWORD *v12;
  _DWORD *ii;
  _DWORD *v14;

  if (*(unsigned __int8 *)result != a2)
  {
    v2 = result;
    *(_BYTE *)result = a2;
    v4 = (_DWORD *)*((_QWORD *)result + 1);
    for (i = (_DWORD *)*((_QWORD *)result + 2); i != v4; result = sub_20BFD6F64((uint64_t)(v2 + 3), i))
      i -= 2;
    v2[2] = v4;
    v6 = (_DWORD *)v2[4];
    for (j = (_DWORD *)v2[5]; j != v6; result = sub_20BFD6F64((uint64_t)(v2 + 6), j))
      j -= 2;
    v2[5] = v6;
    v8 = (_DWORD *)v2[7];
    for (k = (_DWORD *)v2[8]; k != v8; result = sub_20BFD6F64((uint64_t)(v2 + 9), k))
      k -= 2;
    v2[8] = v8;
    v10 = (_DWORD *)v2[10];
    for (m = (_DWORD *)v2[11]; m != v10; result = sub_20BFD6F64((uint64_t)(v2 + 12), m))
      m -= 2;
    v2[11] = v10;
    v12 = (_DWORD *)v2[13];
    for (n = (_DWORD *)v2[14]; n != v12; result = sub_20BFD6F64((uint64_t)(v2 + 15), n))
      n -= 2;
    v2[14] = v12;
    v14 = (_DWORD *)v2[16];
    for (ii = (_DWORD *)v2[17]; ii != v14; result = sub_20BFD6F64((uint64_t)(v2 + 18), ii))
      ii -= 2;
    v2[17] = v14;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE12_SetExplicitEb(result, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems(_DWORD *a1, _DWORD **a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 0);
  result = a1 + 8;
  if (a1 + 8 != (_DWORD *)a2)
    return sub_20C0E29B0((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE13SetAddedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems(_DWORD *a1, _DWORD **a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 0);
  result = a1 + 32;
  if (a1 + 32 != (_DWORD *)a2)
    return sub_20C0E29B0((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE15SetOrderedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetItems(_DWORD *a1, _DWORD **a2, int a3)
{
  switch(a3)
  {
    case 0:
      a1 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems(a1, a2);
      break;
    case 1:
      a1 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems(a1, a2);
      break;
    case 2:
      a1 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems(a1, a2);
      break;
    case 3:
      a1 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems(a1, a2);
      break;
    case 4:
      a1 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems(a1, a2);
      break;
    case 5:
      a1 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems(a1, a2);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE8SetItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEENS_13SdfListOpTypeE(a1, a2, a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Clear(_DWORD *a1)
{
  *(_BYTE *)a1 = 1;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 0);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit(_DWORD *a1)
{
  *(_BYTE *)a1 = 0;
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(a1, 1);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE20ClearAndMakeExplicitEv(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  unint64_t v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1, a2);
  v12 = result[1];
  v35 = *result;
  v36 = v12;
  if (v35 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFED860(&v35, v10, v11);
        LODWORD(v37) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)v15 + 48))(&v33, v15, &v37, v14);
        if (v34)
        {
          v16 = *v13;
          if (!*v13)
            goto LABEL_17;
          v17 = a5 + 1;
          do
          {
            v18 = v16[4];
            v19 = v18 >= (unint64_t)v33;
            if (v18 >= (unint64_t)v33)
              v20 = (uint64_t **)v16;
            else
              v20 = (uint64_t **)(v16 + 1);
            if (v19)
              v17 = (uint64_t **)v16;
            v16 = *v20;
          }
          while (*v20);
          if (v17 == v13 || v33 < v17[4])
          {
LABEL_17:
            v21 = sub_20C12B9A8((uint64_t)a4, 0, 0, &v33);
            v22 = (uint64_t)*a4;
            *(_QWORD *)(v22 + 8) = v21;
            *v21 = v22;
            *a4 = v21;
            v21[1] = (uint64_t)a4;
            a4[2] = (uint64_t *)((char *)a4[2] + 1);
            v37 = &v33;
            sub_20C12B9FC(a5, (unint64_t *)&v33, (uint64_t)&unk_20CAC184C, (_DWORD **)&v37)[5] = v21;
          }
        }
        sub_20BFD8AF4((uint64_t)&v33);
      }
      else
      {
        v23 = (uint64_t *)sub_20BFED860(&v35, v10, v11);
        v24 = v23;
        v25 = *v13;
        if (!*v13)
          goto LABEL_30;
        v26 = *v23;
        v27 = a5 + 1;
        do
        {
          v28 = v25[4];
          v29 = v28 >= v26;
          if (v28 >= v26)
            v30 = (uint64_t **)v25;
          else
            v30 = (uint64_t **)(v25 + 1);
          if (v29)
            v27 = (uint64_t **)v25;
          v25 = *v30;
        }
        while (*v30);
        if (v27 == v13 || v26 < (unint64_t)v27[4])
        {
LABEL_30:
          v31 = sub_20C12B9A8((uint64_t)a4, 0, 0, v23);
          v32 = (uint64_t)*a4;
          *(_QWORD *)(v32 + 8) = v31;
          *v31 = v32;
          *a4 = v31;
          v31[1] = (uint64_t)a4;
          a4[2] = (uint64_t *)((char *)a4[2] + 1);
          v33 = v24;
          sub_20C12B9FC(a5, (unint64_t *)v24, (uint64_t)&unk_20CAC184C, (_DWORD **)&v33)[5] = v31;
        }
      }
      result = sub_20BFED8DC(&v35);
    }
    while (v35 != v36);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS1_12FastLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFD8AF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  unint64_t v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t **v26;
  unint64_t v27;
  BOOL v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1, a2);
  v12 = result[1];
  v34 = *result;
  v35 = v12;
  if (v34 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFED860(&v34, v10, v11);
        v36 = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(unint64_t *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(&v32, v15, &v36, v14);
        if (v33)
        {
          v16 = *v13;
          if (*v13)
          {
            v17 = a5 + 1;
            do
            {
              v18 = v16[4];
              v19 = v18 >= v32;
              if (v18 >= v32)
                v20 = (uint64_t **)v16;
              else
                v20 = (uint64_t **)(v16 + 1);
              if (v19)
                v17 = (uint64_t **)v16;
              v16 = *v20;
            }
            while (*v20);
            if (v17 != v13 && v32 >= (unint64_t)v17[4])
            {
              v21 = v17[5];
              v22 = *v21;
              *(_QWORD *)(v22 + 8) = v21[1];
              *(_QWORD *)v21[1] = v22;
              --*(_QWORD *)(a4 + 16);
              sub_20BFD7654((_DWORD *)v21 + 4);
              operator delete(v21);
              sub_20BE10B80(a5, (uint64_t *)v17);
              sub_20C12B888((_DWORD *)v17 + 8);
              operator delete(v17);
            }
          }
        }
        sub_20BFD8AF4((uint64_t)&v32);
      }
      else
      {
        v23 = (unint64_t *)sub_20BFED860(&v34, v10, v11);
        v24 = *v13;
        if (*v13)
        {
          v25 = *v23;
          v26 = a5 + 1;
          do
          {
            v27 = v24[4];
            v28 = v27 >= v25;
            if (v27 >= v25)
              v29 = (uint64_t **)v24;
            else
              v29 = (uint64_t **)(v24 + 1);
            if (v28)
              v26 = (uint64_t **)v24;
            v24 = *v29;
          }
          while (*v29);
          if (v26 != v13 && v25 >= (unint64_t)v26[4])
          {
            v30 = v26[5];
            v31 = *v30;
            *(_QWORD *)(v31 + 8) = v30[1];
            *(_QWORD *)v30[1] = v31;
            --*(_QWORD *)(a4 + 16);
            sub_20BFD7654((_DWORD *)v30 + 4);
            operator delete(v30);
            sub_20BE10B80(a5, (uint64_t *)v26);
            sub_20C12B888((_DWORD *)v26 + 8);
            operator delete(v26);
          }
        }
      }
      result = sub_20BFED8DC(&v34);
    }
    while (v34 != v35);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS1_12FastLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

uint64_t **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t **result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  unint64_t v17;
  BOOL v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  BOOL v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  uint64_t **v44;

  result = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1, a2);
  v11 = *result;
  v10 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *result)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v44) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t ***, uint64_t *))(*(_QWORD *)v13 + 48))(&v42, v13, &v44, --v10);
        if (v43)
        {
          v14 = *(uint64_t ***)(a4 + 8);
          v15 = *v12;
          if (!*v12)
            goto LABEL_17;
          v16 = a5 + 1;
          do
          {
            v17 = v15[4];
            v18 = v17 >= (unint64_t)v42;
            if (v17 >= (unint64_t)v42)
              v19 = (uint64_t **)v15;
            else
              v19 = (uint64_t **)(v15 + 1);
            if (v18)
              v16 = (uint64_t **)v15;
            v15 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v42 >= v16[4])
          {
            v22 = (uint64_t **)v16[5];
            if (v22 != v14)
            {
              v23 = (uint64_t **)v22[1];
              if (v22 != v23)
              {
                v24 = *v23;
                v25 = *v22;
                v25[1] = v24[1];
                *(_QWORD *)v24[1] = v25;
                v26 = *v14;
                v26[1] = (uint64_t)v22;
                *v22 = v26;
                *v14 = v24;
                v24[1] = (uint64_t)v14;
              }
            }
          }
          else
          {
LABEL_17:
            v20 = sub_20C12B9A8(a4, 0, 0, &v42);
            v21 = (uint64_t)*v14;
            *(_QWORD *)(v21 + 8) = v20;
            *v20 = v21;
            *v14 = v20;
            v20[1] = (uint64_t)v14;
            ++*(_QWORD *)(a4 + 16);
            v44 = &v42;
            sub_20C12B9FC(a5, (unint64_t *)&v42, (uint64_t)&unk_20CAC184C, (_DWORD **)&v44)[5] = v20;
          }
        }
        result = (uint64_t **)sub_20BFD8AF4((uint64_t)&v42);
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *result)
  {
    v27 = a5 + 1;
    do
    {
      --v10;
      v28 = *(uint64_t **)(a4 + 8);
      v29 = *v27;
      if (!*v27)
        goto LABEL_36;
      v30 = *v10;
      v31 = a5 + 1;
      do
      {
        v32 = v29[4];
        v33 = v32 >= v30;
        if (v32 >= v30)
          v34 = (uint64_t **)v29;
        else
          v34 = (uint64_t **)(v29 + 1);
        if (v33)
          v31 = (uint64_t **)v29;
        v29 = *v34;
      }
      while (*v34);
      if (v31 != v27 && v30 >= (unint64_t)v31[4])
      {
        v37 = v31[5];
        if (v37 != v28)
        {
          v38 = (uint64_t *)v37[1];
          if (v37 != v38)
          {
            v39 = *v38;
            v40 = *v37;
            *(_QWORD *)(v40 + 8) = *(_QWORD *)(v39 + 8);
            **(_QWORD **)(v39 + 8) = v40;
            v41 = *v28;
            *(_QWORD *)(v41 + 8) = v37;
            *v37 = v41;
            *v28 = v39;
            *(_QWORD *)(v39 + 8) = v28;
          }
        }
      }
      else
      {
LABEL_36:
        v35 = sub_20C12B9A8(a4, 0, 0, v10);
        v36 = *v28;
        *(_QWORD *)(v36 + 8) = v35;
        *v35 = v36;
        *v28 = (uint64_t)v35;
        v35[1] = (uint64_t)v28;
        ++*(_QWORD *)(a4 + 16);
        v42 = v10;
        result = sub_20C12B9FC(a5, (unint64_t *)v10, (uint64_t)&unk_20CAC184C, (_DWORD **)&v42);
        result[5] = v35;
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS1_12FastLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11CBB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD8AF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  unint64_t v16;
  BOOL v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t **v29;
  unint64_t v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  char v41;
  uint64_t **v42;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1, a2);
  v10 = *(uint64_t **)result;
  v11 = *(uint64_t **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (*(uint64_t **)result != v11)
    {
      v12 = a5 + 1;
      do
      {
        LODWORD(v42) = a2;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          sub_20BE9E974();
        (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t ***, uint64_t *))(*(_QWORD *)v13 + 48))(&v40, v13, &v42, v10);
        if (v41)
        {
          v14 = *v12;
          if (!*v12)
            goto LABEL_17;
          v15 = a5 + 1;
          do
          {
            v16 = v14[4];
            v17 = v16 >= (unint64_t)v40;
            if (v16 >= (unint64_t)v40)
              v18 = (uint64_t **)v14;
            else
              v18 = (uint64_t **)(v14 + 1);
            if (v17)
              v15 = (uint64_t **)v14;
            v14 = *v18;
          }
          while (*v18);
          if (v15 != v12 && v40 >= v15[4])
          {
            v21 = (uint64_t **)v15[5];
            if (v21 != a4)
            {
              v22 = (uint64_t **)v21[1];
              if (v21 != v22)
              {
                v23 = *v22;
                v24 = *v21;
                v24[1] = v23[1];
                *(_QWORD *)v23[1] = v24;
                v25 = *a4;
                v25[1] = (uint64_t)v21;
                *v21 = v25;
                *a4 = v23;
                v23[1] = (uint64_t)a4;
              }
            }
          }
          else
          {
LABEL_17:
            v19 = sub_20C12B9A8((uint64_t)a4, 0, 0, &v40);
            v20 = (uint64_t)*a4;
            *(_QWORD *)(v20 + 8) = v19;
            *v19 = v20;
            *a4 = v19;
            v19[1] = (uint64_t)a4;
            a4[2] = (uint64_t *)((char *)a4[2] + 1);
            v42 = &v40;
            sub_20C12B9FC(a5, (unint64_t *)&v40, (uint64_t)&unk_20CAC184C, (_DWORD **)&v42)[5] = v19;
          }
        }
        result = sub_20BFD8AF4((uint64_t)&v40);
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else if (*(uint64_t **)result != v11)
  {
    v26 = a5 + 1;
    do
    {
      v27 = *v26;
      if (!*v26)
        goto LABEL_36;
      v28 = *v10;
      v29 = a5 + 1;
      do
      {
        v30 = v27[4];
        v31 = v30 >= v28;
        if (v30 >= v28)
          v32 = (uint64_t **)v27;
        else
          v32 = (uint64_t **)(v27 + 1);
        if (v31)
          v29 = (uint64_t **)v27;
        v27 = *v32;
      }
      while (*v32);
      if (v29 != v26 && v28 >= (unint64_t)v29[4])
      {
        v35 = (uint64_t **)v29[5];
        if (v35 != a4)
        {
          v36 = (uint64_t **)v35[1];
          if (v35 != v36)
          {
            v37 = *v36;
            v38 = *v35;
            v38[1] = v37[1];
            *(_QWORD *)v37[1] = v38;
            v39 = *a4;
            v39[1] = (uint64_t)v35;
            *v35 = v39;
            *a4 = v37;
            v37[1] = (uint64_t)a4;
          }
        }
      }
      else
      {
LABEL_36:
        v33 = sub_20C12B9A8((uint64_t)a4, 0, 0, v10);
        v34 = *a4;
        v34[1] = (uint64_t)v33;
        *v33 = (uint64_t)v34;
        *a4 = v33;
        v33[1] = (uint64_t)a4;
        a4[2] = (uint64_t *)((char *)a4[2] + 1);
        v40 = v10;
        result = (uint64_t)sub_20C12B9FC(a5, (unint64_t *)v10, (uint64_t)&unk_20CAC184C, (_DWORD **)&v40);
        *(_QWORD *)(result + 40) = v33;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS1_12FastLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11CE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD8AF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 *p_i;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 i;
  uint64_t v44;
  __int128 *v45;
  _QWORD *v46[2];
  __int128 v47;
  unint64_t v48;
  int v49;

  v47 = 0uLL;
  v48 = 0;
  v46[0] = 0;
  v46[1] = 0;
  v45 = (__int128 *)v46;
  for (i = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1, a2); (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFED8DC(&i))
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v11 = sub_20BFED860((uint64_t *)&i, v9, v10);
      v49 = a2;
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(__int128 *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(&v42, v12, &v49, v11);
      if (BYTE8(v42))
      {
        sub_20C12C730((uint64_t **)&v45, (unint64_t *)&v42, &v42);
        if ((v13 & 1) != 0)
        {
          v14 = *((_QWORD *)&v47 + 1);
          if (*((_QWORD *)&v47 + 1) >= v48)
          {
            v15 = sub_20BFD7890((uint64_t *)&v47, &v42);
          }
          else
          {
            sub_20BFD6E54(*((_DWORD **)&v47 + 1), &v42);
            sub_20BFD6EA4((_DWORD *)(v14 + 4), (_DWORD *)&v42 + 1);
            v15 = v14 + 8;
          }
          *((_QWORD *)&v47 + 1) = v15;
        }
      }
      sub_20BFD8AF4((uint64_t)&v42);
    }
    else
    {
      v16 = (unint64_t *)sub_20BFED860((uint64_t *)&i, v9, v10);
      sub_20C12C730((uint64_t **)&v45, v16, v16);
      if ((v17 & 1) != 0)
      {
        v19 = (_DWORD *)sub_20BFED860((uint64_t *)&i, v17, v18);
        v20 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1) >= v48)
        {
          v21 = sub_20BFD7890((uint64_t *)&v47, v19);
        }
        else
        {
          sub_20BFD6E54(*((_DWORD **)&v47 + 1), v19);
          sub_20BFD6EA4((_DWORD *)(v20 + 4), v19 + 1);
          v21 = v20 + 8;
        }
        *((_QWORD *)&v47 + 1) = v21;
      }
    }
  }
  if ((_QWORD)v47 != *((_QWORD *)&v47 + 1))
  {
    *(_QWORD *)&i = &i;
    *((_QWORD *)&i + 1) = &i;
    v44 = 0;
    sub_20BEDEA80(&i, a4);
    v42 = v47;
    v24 = (_QWORD *)(a5 + 8);
    while ((_QWORD)v42 != *((_QWORD *)&v42 + 1))
    {
      v25 = (unint64_t *)sub_20BFD71C4((uint64_t *)&v42, v22, v23);
      v26 = (_QWORD *)*v24;
      if (*v24)
      {
        v27 = *v25;
        v28 = v24;
        do
        {
          v29 = v26[4];
          v30 = v29 >= v27;
          if (v29 >= v27)
            v31 = v26;
          else
            v31 = v26 + 1;
          if (v30)
            v28 = v26;
          v26 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v28 != v24 && v27 >= v28[4])
        {
          v32 = (_QWORD *)v28[5];
          p_i = &i;
          if ((__int128 *)v32[1] != &i)
          {
            p_i = (__int128 *)v32[1];
            do
            {
              if (v46[0])
              {
                v34 = *((_QWORD *)p_i + 2);
                v35 = v46[0];
                do
                {
                  v36 = *(_QWORD *)((char *)v35 + 28);
                  if (v34 >= v36)
                  {
                    if (v36 >= v34)
                      goto LABEL_42;
                    ++v35;
                  }
                  v35 = (_QWORD *)*v35;
                }
                while (v35);
              }
              p_i = (__int128 *)*((_QWORD *)p_i + 1);
            }
            while (p_i != &i);
            p_i = &i;
          }
LABEL_42:
          if (!v44)
            goto LABEL_47;
          sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&i, v32, p_i);
        }
      }
      sub_20BFD7240(&v42);
    }
    v37 = v44;
    if (v44)
    {
      v38 = (uint64_t *)a4[1];
      v39 = i;
      v40 = **((_QWORD **)&i + 1);
      *(_QWORD *)(v40 + 8) = *(_QWORD *)(i + 8);
      **(_QWORD **)(v39 + 8) = v40;
      v41 = *v38;
      *(_QWORD *)(v41 + 8) = *((_QWORD *)&v39 + 1);
      **((_QWORD **)&v39 + 1) = v41;
      *v38 = v39;
      *(_QWORD *)(v39 + 8) = v38;
      a4[2] += v37;
      v44 = 0;
    }
LABEL_47:
    sub_20C124960(&i);
  }
  sub_20BFD7C28((uint64_t)&v45, v46[0]);
  v45 = &v47;
  sub_20BFD6F90((void ***)&v45);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS1_12FastLessThanENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, _QWORD *a15, uint64_t a16, char a17)
{
  sub_20BFD7C28((uint64_t)&a14, a15);
  a14 = (void **)&a17;
  sub_20BFD6F90(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  char *v15;
  char *v16;
  int *v17;
  int *v18;
  int *v19;
  char *v20;
  char *v21;
  char *v22;
  int *v23;
  int *v24;
  int *v25;
  char *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  int *v34;
  unint64_t v35;
  int **v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20BFD6BC4((uint64_t)a3, a1);
    a3[152] = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    sub_20BFD6D38(&v33, *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    *(_QWORD *)&v38 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(a1, (uint64_t *)&v33, (uint64_t)&v36);
    v6 = (int ***)v38;
    if ((int ***)v38 == &v36)
    {
      v7 = 4;
      v6 = &v36;
    }
    else
    {
      if (!(_QWORD)v38)
      {
LABEL_26:
        LOBYTE(v36) = 0;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems(&v36, &v33);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v36);
        v30 = (int *)&v44 + 2;
        sub_20BFD6F90((void ***)&v30);
        v30 = (int *)&v43;
        sub_20BFD6F90((void ***)&v30);
        v30 = (int *)&v41 + 2;
        sub_20BFD6F90((void ***)&v30);
        v30 = (int *)&v40;
        sub_20BFD6F90((void ***)&v30);
        v30 = (int *)&v38 + 2;
        sub_20BFD6F90((void ***)&v30);
        v30 = (int *)&v37;
        sub_20BFD6F90((void ***)&v30);
        v36 = &v33;
        goto LABEL_27;
      }
      v7 = 5;
    }
    ((void (*)(void))(*v6)[v7])();
    goto LABEL_26;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a2 + 128) != *(_QWORD *)(a2 + 136))
  {
LABEL_5:
    *a3 = 0;
    a3[152] = 0;
    return;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_20BFD6D38(&v33, *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_20BFD6D38(&v30, *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_20BFD6D38(&v27, *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  while (v8 != v9)
  {
    v10 = sub_20C11D810(v30, v31, (_QWORD *)v8);
    sub_20C11D784((uint64_t)&v30, v10, v31);
    v11 = sub_20C11D810(v27, v28, (_QWORD *)v8);
    sub_20C11D784((uint64_t)&v27, v11, v28);
    v12 = v33;
    v13 = v34;
    if (v33 != v34)
    {
      while (*(_QWORD *)v12 != *(_QWORD *)v8)
      {
        v12 += 2;
        if (v12 == v34)
        {
          v12 = v34;
          break;
        }
      }
    }
    if (v12 == v34)
    {
      if ((unint64_t)v34 >= v35)
      {
        v14 = (int *)sub_20BFD7890((uint64_t *)&v33, (_DWORD *)v8);
      }
      else
      {
        sub_20BFD6E54(v34, (_DWORD *)v8);
        sub_20BFD6EA4(v13 + 1, (_DWORD *)(v8 + 4));
        v14 = v13 + 2;
      }
      v34 = v14;
    }
    v8 += 8;
  }
  v15 = *(char **)(a1 + 56);
  v16 = *(char **)(a1 + 64);
  if (v15 == v16)
  {
    v20 = *(char **)(a1 + 56);
  }
  else
  {
    do
    {
      v17 = sub_20C11D810(v33, v34, v15);
      sub_20C11D784((uint64_t)&v33, v17, v34);
      v18 = sub_20C11D810(v30, v31, v15);
      sub_20C11D784((uint64_t)&v30, v18, v31);
      v19 = sub_20C11D810(v27, v28, v15);
      sub_20C11D784((uint64_t)&v27, v19, v28);
      v15 += 8;
    }
    while (v15 != v16);
    v20 = *(char **)(a1 + 56);
    v15 = *(char **)(a1 + 64);
  }
  sub_20C031044((uint64_t *)&v30, v30, v20, v15, (v15 - v20) >> 3);
  v21 = *(char **)(a1 + 80);
  v22 = *(char **)(a1 + 88);
  if (v21 == v22)
  {
    v26 = *(char **)(a1 + 80);
  }
  else
  {
    do
    {
      v23 = sub_20C11D810(v33, v34, v21);
      sub_20C11D784((uint64_t)&v33, v23, v34);
      v24 = sub_20C11D810(v30, v31, v21);
      sub_20C11D784((uint64_t)&v30, v24, v31);
      v25 = sub_20C11D810(v27, v28, v21);
      sub_20C11D784((uint64_t)&v27, v25, v28);
      v21 += 8;
    }
    while (v21 != v22);
    v26 = *(char **)(a1 + 80);
    v21 = *(char **)(a1 + 88);
  }
  sub_20C031044((uint64_t *)&v27, v28, v26, v21, (v21 - v26) >> 3);
  LOBYTE(v36) = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems(&v36, &v33);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems(&v36, &v30);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems(&v36, &v27);
  sub_20C1247A0((uint64_t)a3, (uint64_t)&v36);
  sub_20BFD6A50((void **)&v36);
  v36 = &v27;
  sub_20BFD6F90((void ***)&v36);
  v36 = &v30;
  sub_20BFD6F90((void ***)&v36);
  v36 = &v33;
LABEL_27:
  sub_20BFD6F90((void ***)&v36);
}

void sub_20C11D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_20BFD6F90(&a19);
  a19 = (void **)&a13;
  sub_20BFD6F90(&a19);
  a19 = (void **)&a16;
  sub_20BFD6F90(&a19);
  _Unwind_Resume(a1);
}

int *sub_20C11D784(uint64_t a1, int *a2, int *a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  char v9;

  if (a2 != a3)
  {
    sub_20C0D8454((uint64_t)&v9, a3, *(int **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_DWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 2;
        sub_20BFD6F64(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

int *sub_20C11D810(int *a1, int *a2, _QWORD *a3)
{
  int *v5;
  int *i;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while (*(_QWORD *)v5 != *a3)
    {
      v5 += 2;
      if (v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 2; i != a2; i += 2)
    {
      if (*(_QWORD *)i != *a3)
      {
        sub_20BFD3EBC(v5, i);
        sub_20BFD3F10(v5 + 1, i + 1);
        v5 += 2;
      }
    }
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations(__int128 *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C11D970(a2, (__int128 *)((char *)a1 + 8), a3);
  v7 = v6 | sub_20C11D970(a2, a1 + 2, a3);
  v8 = sub_20C11D970(a2, (__int128 *)((char *)a1 + 56), a3);
  v9 = v7 | v8 | sub_20C11D970(a2, a1 + 5, a3);
  v10 = sub_20C11D970(a2, (__int128 *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_20C11D970(a2, a1 + 8, a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE16ModifyOperationsERKNSt3__18functionIFNS3_8optionalIS1_EERKS1_EEEb(a1, a2, a3);
}

uint64_t sub_20C11D970(uint64_t a1, __int128 *a2, int a3)
{
  void ***v3;
  void ***v4;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void **v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;

  v24 = 0uLL;
  v25 = 0;
  v22 = 0u;
  v23 = 0u;
  v3 = *(void ****)a2;
  v4 = (void ***)*((_QWORD *)a2 + 1);
  if (*(void ****)a2 == v4)
    goto LABEL_23;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    (*(void (**)(void ***__return_ptr, uint64_t, void ***))(*(_QWORD *)v9 + 48))(&v20, v9, v3);
    v10 = v21;
    if (a3 && v21)
    {
      sub_20C12BE84((uint64_t *)&v22, (unsigned int *)&v20);
      if ((v11 & 1) == 0)
        sub_20C12C4F4(&v20);
      v10 = v21;
    }
    if (v10)
    {
      v12 = *((_QWORD *)&v24 + 1);
      if (v20 == *v3)
      {
        if (*((_QWORD *)&v24 + 1) >= v25)
        {
          v13 = sub_20BFD7890((uint64_t *)&v24, v3);
        }
        else
        {
          sub_20BFD6E54(*((_DWORD **)&v24 + 1), v3);
          sub_20BFD6EA4((_DWORD *)(v12 + 4), (_DWORD *)v3 + 1);
          v13 = v12 + 8;
        }
      }
      else
      {
        if (*((_QWORD *)&v24 + 1) >= v25)
        {
          v13 = sub_20C12C530((uint64_t *)&v24, &v20);
        }
        else
        {
          sub_20BFD38A4(*((_DWORD **)&v24 + 1), &v20);
          sub_20BFD38DC((_DWORD *)(v12 + 4), (_DWORD *)&v20 + 1);
          v13 = v12 + 8;
        }
        v8 = 1;
      }
      *((_QWORD *)&v24 + 1) = v13;
    }
    else
    {
      v8 = 1;
    }
    sub_20BFD8AF4((uint64_t)&v20);
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    v16 = 0;
  }
  else
  {
    v14 = *a2;
    *a2 = v24;
    v24 = v14;
    v15 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v25;
    v25 = v15;
    v16 = 1;
  }
  v17 = *((_QWORD *)&v23 + 1);
  *((_QWORD *)&v23 + 1) = 0;
  if (v17)
  {
    v18 = (void *)sub_20BFD28D4(v17);
    operator delete(v18);
  }
  v20 = (void **)&v22;
  sub_20BFD6F90(&v20);
  *(_QWORD *)&v22 = &v24;
  sub_20BFD6F90((void ***)&v22);
  return v16;
}

void sub_20C11DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BFD8AF4((uint64_t)&a9);
  sub_20C12C028((uint64_t)&a11);
  a11 = (void **)&a15;
  sub_20BFD6F90(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ReplaceOperations(_DWORD *a1, int a2, unint64_t a3, uint64_t a4, _DWORD **a5)
{
  BOOL v10;
  _DWORD **Items;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  void **v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  if (*(_BYTE *)a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (v10 || !a4 && *a5 != a5[1])
  {
    Items = (_DWORD **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems((uint64_t)a1, a2);
    v23 = 0;
    v24 = 0;
    v22 = 0;
    sub_20BFD6D38(&v22, *Items, Items[1], ((char *)Items[1] - (char *)*Items) >> 3);
    v12 = (v23 - (uint64_t)v22) >> 3;
    if (v12 >= a3)
    {
      if (a4 + a3 <= v12)
      {
        v14 = (char *)a5[1];
        v15 = &v22[2 * a3];
        if (a4 == (v14 - (char *)*a5) >> 3)
        {
          sub_20C031408((uint64_t)&v25, *a5, v14, v15);
        }
        else
        {
          sub_20C11D784((uint64_t)&v22, &v22[2 * a3], &v15[2 * a4]);
          sub_20C031044((uint64_t *)&v22, &v22[2 * a3], *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 3);
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetItems(a1, &v22, a2);
        v13 = 1;
        goto LABEL_18;
      }
      v17 = (void **)"sdf/listOp.cpp";
      v18 = "ReplaceOperations";
      v19 = 698;
      v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ReplaceOperatio"
            "ns(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::SdfPath]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, (v23 - (uint64_t)v22) >> 3);
    }
    else
    {
      v17 = (void **)"sdf/listOp.cpp";
      v18 = "ReplaceOperations";
      v19 = 693;
      v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ReplaceOperatio"
            "ns(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::SdfPath]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, (v23 - (uint64_t)v22) >> 3);
    }
    v13 = 0;
LABEL_18:
    v17 = (void **)&v22;
    sub_20BFD6F90(&v17);
    return v13;
  }
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE17ReplaceOperationsENS_13SdfListOpTypeEmmRKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEE(a1, a2, a3, a4, a5);
}

void sub_20C11DD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ComposeOperations(_DWORD *a1, uint64_t a2, int a3)
{
  _DWORD **Items;
  uint64_t **i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19[2];
  uint64_t *v20;
  uint64_t **v21;
  void **v22;
  _DWORD *v23[3];
  _DWORD **v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    Items = (_DWORD **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems((uint64_t)a1, a3);
    sub_20C12C61C((uint64_t *)&v20, *Items, Items[1]);
    v19[0] = 0;
    v19[1] = 0;
    v18 = (uint64_t *)v19;
    for (i = v21; i != &v20; i = (uint64_t **)i[1])
    {
      v23[0] = i + 2;
      sub_20C12B9FC(&v18, (unint64_t *)i + 2, (uint64_t)&unk_20CAC184C, v23)[5] = (uint64_t *)i;
    }
    switch(a3)
    {
      case 1:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys(a2, 1, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      case 2:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys(a2, 2, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      case 3:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys(a2, 3, (uint64_t)v23, &v20, &v18);
        v12 = v24;
        if (v24 == v23)
        {
          v13 = 4;
          v12 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_15;
          v13 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v10, v11);
LABEL_15:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_ReorderKeys(a2, 3, (uint64_t)v23, (uint64_t *)&v20, (uint64_t)&v18);
LABEL_16:
        v14 = v24;
        if (v24 == v23)
        {
          v15 = 4;
          v14 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_21;
          v15 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v14 + 8 * v15))(v14, v8, v9);
LABEL_21:
        memset(v23, 0, sizeof(v23));
        if (v21 == &v20)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = v21;
          do
          {
            ++v16;
            v17 = (uint64_t **)v17[1];
          }
          while (v17 != &v20);
        }
        sub_20C12C6AC(v23, (uint64_t)v21, (uint64_t)&v20, v16);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetItems(a1, v23, a3);
        v22 = (void **)v23;
        sub_20BFD6F90(&v22);
        sub_20C12B840((uint64_t)&v18, v19[0]);
        sub_20C124960(&v20);
        break;
      case 4:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_PrependKeys(a2, 4, (uint64_t)v23, (uint64_t)&v20, &v18);
        goto LABEL_16;
      case 5:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AppendKeys(a2, 5, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems(a1, (_DWORD **)(a2 + 8));
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEE17ComposeOperationsERKS2_NS_13SdfListOpTypeE(a1, a2, a3);
}

void sub_20C11E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20C12B840((uint64_t)&a9, a10);
  sub_20C124960(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==(_QWORD *a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 result;
  BOOL v23;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v3 = (char *)a1[1];
  v2 = (char *)a1[2];
  v4 = (_QWORD *)a2[1];
  if (v2 - v3 != a2[2] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*(_QWORD *)v3 != *v4)
      return 0;
    v3 += 8;
    ++v4;
  }
  v6 = (char *)a1[4];
  v5 = (char *)a1[5];
  v7 = (_QWORD *)a2[4];
  if (v5 - v6 != a2[5] - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*(_QWORD *)v6 != *v7)
      return 0;
    v6 += 8;
    ++v7;
  }
  v9 = (char *)a1[7];
  v8 = (char *)a1[8];
  v10 = (_QWORD *)a2[7];
  if (v8 - v9 != a2[8] - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*(_QWORD *)v9 != *v10)
      return 0;
    v9 += 8;
    ++v10;
  }
  v12 = (char *)a1[10];
  v11 = (char *)a1[11];
  v13 = (_QWORD *)a2[10];
  if (v11 - v12 != a2[11] - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*(_QWORD *)v12 != *v13)
      return 0;
    v12 += 8;
    ++v13;
  }
  v15 = (char *)a1[13];
  v14 = (char *)a1[14];
  v16 = (_QWORD *)a2[13];
  if (v14 - v15 != a2[14] - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*(_QWORD *)v15 != *v16)
      return 0;
    v15 += 8;
    ++v16;
  }
  v18 = a1[16];
  v17 = a1[17];
  v19 = (uint64_t *)a2[16];
  if (v17 - v18 != a2[17] - (_QWORD)v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 8;
  do
  {
    v21 = *v19++;
    result = *(_QWORD *)(v20 - 8) == v21;
    v23 = *(_QWORD *)(v20 - 8) != v21 || v20 == v17;
    v20 += 8;
  }
  while (!v23);
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEEeqERKS2_(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==(a1, a2);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5249B8, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfPath]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C12C81C(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C12C81C(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C12C81C(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C12C81C(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C12C81C(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C12C81C(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsINS_7SdfPathEEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES7_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C11E4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::CreateExplicit(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems((unsigned __int8 *)a2, a1);
}

void sub_20C11E584(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C029B80(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEEC1Ev(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems(unsigned __int8 *a1, __int128 **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 1);
  if (a1 + 8 != (unsigned __int8 *)a2)
    sub_20C0E2FAC((uint64_t)(a1 + 8), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE16SetExplicitItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Create(__int128 **a1@<X0>, __int128 **a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems((unsigned __int8 *)a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems((unsigned __int8 *)a4, a2);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems((unsigned __int8 *)a4, a3);
}

void sub_20C11E6A4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C029B80(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems(unsigned __int8 *a1, __int128 **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 0);
  if (a1 + 56 != (unsigned __int8 *)a2)
    sub_20C0E2FAC((uint64_t)(a1 + 56), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE17SetPrependedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems(unsigned __int8 *a1, __int128 **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 0);
  if (a1 + 80 != (unsigned __int8 *)a2)
    sub_20C0E2FAC((uint64_t)(a1 + 80), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE16SetAppendedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems(unsigned __int8 *a1, __int128 **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 0);
  if (a1 + 104 != (unsigned __int8 *)a2)
    sub_20C0E2FAC((uint64_t)(a1 + 104), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE15SetDeletedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE4SwapERS2_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE7HasKeysEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::HasItem(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v20;

  if (*(_BYTE *)a1)
  {
    v4 = *(unsigned __int8 **)(a1 + 8);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if (v4 != v5)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v4, a2) & 1) == 0)
      {
        v4 += 56;
        if (v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
      v6 = v4;
      v4 = *(unsigned __int8 **)(a1 + 16);
      return v6 != v4;
    }
  }
  else
  {
    v7 = *(unsigned __int8 **)(a1 + 32);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (v7 == v8)
    {
      v9 = *(unsigned __int8 **)(a1 + 32);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, a2) & 1) == 0)
      {
        v7 += 56;
        if (v7 == v8)
        {
          v7 = v8;
          break;
        }
      }
      v9 = v7;
      v7 = *(unsigned __int8 **)(a1 + 40);
    }
    if (v9 != v7)
      return 1;
    v10 = *(unsigned __int8 **)(a1 + 56);
    v11 = *(unsigned __int8 **)(a1 + 64);
    if (v10 == v11)
    {
      v12 = *(unsigned __int8 **)(a1 + 56);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v10, a2) & 1) == 0)
      {
        v10 += 56;
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
      v12 = v10;
      v10 = *(unsigned __int8 **)(a1 + 64);
    }
    if (v12 != v10)
      return 1;
    v13 = *(unsigned __int8 **)(a1 + 80);
    v14 = *(unsigned __int8 **)(a1 + 88);
    if (v13 == v14)
    {
      v15 = *(unsigned __int8 **)(a1 + 80);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v13, a2) & 1) == 0)
      {
        v13 += 56;
        if (v13 == v14)
        {
          v13 = v14;
          break;
        }
      }
      v15 = v13;
      v13 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v15 != v13)
      return 1;
    v16 = *(unsigned __int8 **)(a1 + 104);
    v17 = *(unsigned __int8 **)(a1 + 112);
    if (v16 == v17)
    {
      v18 = *(unsigned __int8 **)(a1 + 104);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v16, a2) & 1) == 0)
      {
        v16 += 56;
        if (v16 == v17)
        {
          v16 = v17;
          break;
        }
      }
      v18 = v16;
      v16 = *(unsigned __int8 **)(a1 + 112);
    }
    if (v18 != v16)
      return 1;
    v4 = *(unsigned __int8 **)(a1 + 128);
    v20 = *(unsigned __int8 **)(a1 + 136);
    if (v4 != v20)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v4, a2) & 1) == 0)
      {
        v4 += 56;
        if (v4 == v20)
        {
          v4 = v20;
          break;
        }
      }
      v6 = v4;
      v4 = *(unsigned __int8 **)(a1 + 136);
      return v6 != v4;
    }
  }
  v6 = v4;
  return v6 != v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfReference>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::SdfReference]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetAppliedItems@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(a1, (__int128 **)a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C11ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20C021740(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(uint64_t a1, __int128 **a2, uint64_t a3)
{
  uint64_t *i;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 *v17;

  if (a2)
  {
    v14 = (uint64_t)&v14;
    v15 = &v14;
    v16 = 0;
    if (*(_BYTE *)a1)
    {
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys(a1, 0, a3, &v14, &v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
         + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3)
         + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3)
         + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3) == 0x9249249249249249 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3))
      {
LABEL_17:
        sub_20C1249D0(&v14);
        return;
      }
      sub_20C12C9DC((uint64_t)&v14, &v14, *a2, a2[1]);
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      for (i = v15; i != &v14; i = (uint64_t *)i[1])
      {
        v17 = (__int128 *)(i + 2);
        sub_20C12CB2C(&v11, (unsigned __int8 *)i + 16, (uint64_t)&unk_20CAC184C, &v17)[11] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_DeleteKeys(a1, 2, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys(a1, 1, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_PrependKeys(a1, 4, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AppendKeys(a1, 5, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_ReorderKeys(a1, 3, a3, &v14, (uint64_t)&v11);
    }
    sub_20C12C940((uint64_t)&v11, v12);
    v7 = *a2;
    v8 = (uint64_t)a2[1];
    if ((__int128 *)v8 != *a2)
    {
      do
      {
        v8 -= 56;
        sub_20C0217C4((uint64_t)(a2 + 2), v8);
      }
      while ((__int128 *)v8 != v7);
    }
    a2[1] = v7;
    if (v15 == &v14)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = v15;
      do
      {
        ++v9;
        v10 = (uint64_t *)v10[1];
      }
      while (v10 != &v14);
    }
    sub_20C12CD18((uint64_t *)a2, (std::string *)v7, v15, (uint64_t)&v14, v9);
    goto LABEL_17;
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE15ApplyOperationsEPNSt3__16vectorIS1_NS3_9allocatorIS1_EEEERKNS3_8functionIFNS3_8optionalIS1_EENS_13SdfListOpTypeERKS1_EEE(a1, a2, a3);
}

void sub_20C11EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1249D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(unsigned __int8 *a1, int a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v8;
  uint64_t m;
  uint64_t v10;
  uint64_t n;
  uint64_t v12;
  uint64_t ii;
  uint64_t v14;

  if (*a1 != a2)
  {
    *a1 = a2;
    v4 = *((_QWORD *)a1 + 1);
    for (i = *((_QWORD *)a1 + 2); i != v4; sub_20C0217C4((uint64_t)(a1 + 24), i))
      i -= 56;
    *((_QWORD *)a1 + 2) = v4;
    v6 = *((_QWORD *)a1 + 4);
    for (j = *((_QWORD *)a1 + 5); j != v6; sub_20C0217C4((uint64_t)(a1 + 48), j))
      j -= 56;
    *((_QWORD *)a1 + 5) = v6;
    v8 = *((_QWORD *)a1 + 7);
    for (k = *((_QWORD *)a1 + 8); k != v8; sub_20C0217C4((uint64_t)(a1 + 72), k))
      k -= 56;
    *((_QWORD *)a1 + 8) = v8;
    v10 = *((_QWORD *)a1 + 10);
    for (m = *((_QWORD *)a1 + 11); m != v10; sub_20C0217C4((uint64_t)(a1 + 96), m))
      m -= 56;
    *((_QWORD *)a1 + 11) = v10;
    v12 = *((_QWORD *)a1 + 13);
    for (n = *((_QWORD *)a1 + 14); n != v12; sub_20C0217C4((uint64_t)(a1 + 120), n))
      n -= 56;
    *((_QWORD *)a1 + 14) = v12;
    v14 = *((_QWORD *)a1 + 16);
    for (ii = *((_QWORD *)a1 + 17); ii != v14; sub_20C0217C4((uint64_t)(a1 + 144), ii))
      ii -= 56;
    *((_QWORD *)a1 + 17) = v14;
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE12_SetExplicitEb(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems(unsigned __int8 *a1, __int128 **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 0);
  if (a1 + 32 != (unsigned __int8 *)a2)
    sub_20C0E2FAC((uint64_t)(a1 + 32), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE13SetAddedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems(unsigned __int8 *a1, __int128 **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 0);
  if (a1 + 128 != (unsigned __int8 *)a2)
    sub_20C0E2FAC((uint64_t)(a1 + 128), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE15SetOrderedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetItems(unsigned __int8 *a1, __int128 **a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems(a1, a2);
      break;
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems(a1, a2);
      break;
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems(a1, a2);
      break;
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems(a1, a2);
      break;
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems(a1, a2);
      break;
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems(a1, a2);
      break;
    default:
      return;
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE8SetItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEENS_13SdfListOpTypeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Clear(unsigned __int8 *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 0);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit(unsigned __int8 *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(a1, 1);
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE20ClearAndMakeExplicitEv(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21[3];
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1, a2);
  v12 = result[1];
  v23 = *result;
  v24 = v12;
  if (v23 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEE248(&v23, v10, v11);
        LODWORD(v25) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 **, uint64_t))(*(_QWORD *)v15 + 48))(v21, v15, &v25, v14);
        if (v22)
        {
          if (v13 == (uint64_t **)sub_20C12EC90((uint64_t)a5, (unsigned __int8 *)v21))
          {
            v16 = sub_20C12EA2C((uint64_t)a4, 0, 0, v21);
            v17 = *a4;
            *(_QWORD *)(v17 + 8) = v16;
            *v16 = v17;
            *a4 = (uint64_t)v16;
            v16[1] = a4;
            ++a4[2];
            v25 = v21;
            sub_20C12CB2C(a5, (unsigned __int8 *)v21, (uint64_t)&unk_20CAC184C, &v25)[11] = (uint64_t)v16;
          }
        }
        sub_20C124A94((uint64_t)v21);
      }
      else
      {
        v18 = (__int128 *)sub_20BFEE248(&v23, v10, v11);
        if (v13 == (uint64_t **)sub_20C12EC90((uint64_t)a5, (unsigned __int8 *)v18))
        {
          v19 = sub_20C12EA2C((uint64_t)a4, 0, 0, v18);
          v20 = *a4;
          *(_QWORD *)(v20 + 8) = v19;
          *v19 = v20;
          *a4 = (uint64_t)v19;
          v19[1] = a4;
          ++a4[2];
          *(_QWORD *)&v21[0] = v18;
          sub_20C12CB2C(a5, (unsigned __int8 *)v18, (uint64_t)&unk_20CAC184C, (__int128 **)v21)[11] = (uint64_t)v19;
        }
      }
      result = sub_20BFEE2C4(&v23);
    }
    while (v23 != v24);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11F3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C124A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[7];
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1, a2);
  v12 = result[1];
  v28 = *result;
  v29 = v12;
  if (v28 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEE248(&v28, v10, v11);
        v30 = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(v26, v15, &v30, v14);
        if (v27)
        {
          v16 = sub_20C12EC90((uint64_t)a5, (unsigned __int8 *)v26);
          v17 = (uint64_t *)v16;
          if (v13 != (uint64_t **)v16)
          {
            v18 = *(uint64_t **)(v16 + 88);
            v19 = *v18;
            *(_QWORD *)(v19 + 8) = v18[1];
            *(_QWORD *)v18[1] = v19;
            --*(_QWORD *)(a4 + 16);
            sub_20C124A40((uint64_t)(v18 + 2));
            operator delete(v18);
            sub_20BE10B80(a5, v17);
            sub_20C12C988((uint64_t)(v17 + 4));
            operator delete(v17);
          }
        }
        sub_20C124A94((uint64_t)v26);
      }
      else
      {
        v20 = (unsigned __int8 *)sub_20BFEE248(&v28, v10, v11);
        v21 = sub_20C12EC90((uint64_t)a5, v20);
        if (v13 != (uint64_t **)v21)
        {
          v22 = (uint64_t *)v21;
          v23 = v21 + 32;
          v24 = *(uint64_t **)(v21 + 88);
          v25 = *v24;
          *(_QWORD *)(v25 + 8) = v24[1];
          *(_QWORD *)v24[1] = v25;
          --*(_QWORD *)(a4 + 16);
          sub_20C124A40((uint64_t)(v24 + 2));
          operator delete(v24);
          sub_20BE10B80(a5, v22);
          sub_20C12C988(v23);
          operator delete(v22);
        }
      }
      result = sub_20BFEE2C4(&v28);
    }
    while (v28 != v29);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11F56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C124A94((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unsigned __int8 **result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  __int128 v30[3];
  char v31;
  __int128 *v32;

  result = (unsigned __int8 **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1, a2);
  v11 = *result;
  v10 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *result)
    {
      do
      {
        LODWORD(v32) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        v10 -= 56;
        (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 **, unsigned __int8 *))(*(_QWORD *)v12 + 48))(v30, v12, &v32, v10);
        if (v31)
        {
          v13 = *(uint64_t **)(a4 + 8);
          v14 = sub_20C12EC90((uint64_t)a5, (unsigned __int8 *)v30);
          if (a5 + 1 == (uint64_t **)v14)
          {
            v20 = sub_20C12EA2C(a4, 0, 0, v30);
            v21 = *v13;
            *(_QWORD *)(v21 + 8) = v20;
            *v20 = v21;
            *v13 = (uint64_t)v20;
            v20[1] = v13;
            ++*(_QWORD *)(a4 + 16);
            v32 = v30;
            sub_20C12CB2C(a5, (unsigned __int8 *)v30, (uint64_t)&unk_20CAC184C, &v32)[11] = (uint64_t)v20;
          }
          else
          {
            v15 = *(uint64_t **)(v14 + 88);
            if (v15 != v13)
            {
              v16 = (uint64_t *)v15[1];
              if (v15 != v16)
              {
                v17 = *v16;
                v18 = *v15;
                *(_QWORD *)(v18 + 8) = *(_QWORD *)(v17 + 8);
                **(_QWORD **)(v17 + 8) = v18;
                v19 = *v13;
                *(_QWORD *)(v19 + 8) = v15;
                *v15 = v19;
                *v13 = v17;
                *(_QWORD *)(v17 + 8) = v13;
              }
            }
          }
        }
        result = (unsigned __int8 **)sub_20C124A94((uint64_t)v30);
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *result)
  {
    do
    {
      v10 -= 56;
      v22 = *(unsigned __int8 **)(a4 + 8);
      result = (unsigned __int8 **)sub_20C12EC90((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)result)
      {
        v28 = (unsigned __int8 *)sub_20C12EA2C(a4, 0, 0, (__int128 *)v10);
        v29 = *(_QWORD *)v22;
        *(_QWORD *)(v29 + 8) = v28;
        *(_QWORD *)v28 = v29;
        *(_QWORD *)v22 = v28;
        *((_QWORD *)v28 + 1) = v22;
        ++*(_QWORD *)(a4 + 16);
        *(_QWORD *)&v30[0] = v10;
        result = (unsigned __int8 **)sub_20C12CB2C(a5, v10, (uint64_t)&unk_20CAC184C, (__int128 **)v30);
        result[11] = v28;
      }
      else
      {
        v23 = result[11];
        if (v23 != v22)
        {
          v24 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
          if (v23 != v24)
          {
            v25 = *(_QWORD *)v24;
            v26 = *(_QWORD *)v23;
            *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 8);
            **(_QWORD **)(v25 + 8) = v26;
            v27 = *(_QWORD *)v22;
            *(_QWORD *)(v27 + 8) = v23;
            *(_QWORD *)v23 = v27;
            *(_QWORD *)v22 = v25;
            *(_QWORD *)(v25 + 8) = v22;
          }
        }
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11F7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C124A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28[3];
  char v29;
  __int128 *v30;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1, a2);
  v10 = *(unsigned __int8 **)result;
  v11 = *(unsigned __int8 **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (*(unsigned __int8 **)result != v11)
    {
      do
      {
        LODWORD(v30) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 **, unsigned __int8 *))(*(_QWORD *)v12 + 48))(v28, v12, &v30, v10);
        if (v29)
        {
          v13 = sub_20C12EC90((uint64_t)a5, (unsigned __int8 *)v28);
          if (a5 + 1 == (uint64_t **)v13)
          {
            v19 = sub_20C12EA2C((uint64_t)a4, 0, 0, v28);
            v20 = *a4;
            *(_QWORD *)(v20 + 8) = v19;
            *v19 = v20;
            *a4 = (uint64_t)v19;
            v19[1] = a4;
            ++a4[2];
            v30 = v28;
            sub_20C12CB2C(a5, (unsigned __int8 *)v28, (uint64_t)&unk_20CAC184C, &v30)[11] = (uint64_t)v19;
          }
          else
          {
            v14 = *(uint64_t **)(v13 + 88);
            if (v14 != a4)
            {
              v15 = (uint64_t *)v14[1];
              if (v14 != v15)
              {
                v16 = *v15;
                v17 = *v14;
                *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
                **(_QWORD **)(v16 + 8) = v17;
                v18 = *a4;
                *(_QWORD *)(v18 + 8) = v14;
                *v14 = v18;
                *a4 = v16;
                *(_QWORD *)(v16 + 8) = a4;
              }
            }
          }
        }
        result = sub_20C124A94((uint64_t)v28);
        v10 += 56;
      }
      while (v10 != v11);
    }
  }
  else if (*(unsigned __int8 **)result != v11)
  {
    do
    {
      result = sub_20C12EC90((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)result)
      {
        v26 = sub_20C12EA2C((uint64_t)a4, 0, 0, (__int128 *)v10);
        v27 = *a4;
        *(_QWORD *)(v27 + 8) = v26;
        *v26 = v27;
        *a4 = (uint64_t)v26;
        v26[1] = a4;
        ++a4[2];
        *(_QWORD *)&v28[0] = v10;
        result = (uint64_t)sub_20C12CB2C(a5, v10, (uint64_t)&unk_20CAC184C, (__int128 **)v28);
        *(_QWORD *)(result + 88) = v26;
      }
      else
      {
        v21 = *(uint64_t **)(result + 88);
        if (v21 != a4)
        {
          v22 = (uint64_t *)v21[1];
          if (v21 != v22)
          {
            v23 = *v22;
            v24 = *v21;
            *(_QWORD *)(v24 + 8) = *(_QWORD *)(v23 + 8);
            **(_QWORD **)(v23 + 8) = v24;
            v25 = *a4;
            *(_QWORD *)(v25 + 8) = v21;
            *v21 = v25;
            *a4 = v23;
            *(_QWORD *)(v23 + 8) = a4;
          }
        }
      }
      v10 += 56;
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11FA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C124A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36[3];
  uint64_t *v37;
  _QWORD *v38[2];
  __int128 v39;
  unint64_t v40;
  int v41;

  v39 = 0uLL;
  v40 = 0;
  v38[0] = 0;
  v38[1] = 0;
  v37 = (uint64_t *)v38;
  *(_OWORD *)v36 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1, a2);
  while (v36[0] != v36[1])
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v11 = sub_20BFEE248(v36, v9, v10);
      v41 = a2;
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(__int128 *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(&v33, v12, &v41, v11);
      if (v35)
      {
        sub_20C12EB54(&v37, (unsigned __int8 *)&v33, &v33);
        if ((v13 & 1) != 0)
        {
          v14 = *((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1) >= v40)
          {
            v15 = sub_20C12D654((uint64_t *)&v39, &v33);
          }
          else
          {
            sub_20C029E64(*((char **)&v39 + 1), &v33);
            v15 = v14 + 56;
          }
          *((_QWORD *)&v39 + 1) = v15;
        }
      }
      sub_20C124A94((uint64_t)&v33);
    }
    else
    {
      v16 = (unsigned __int8 *)sub_20BFEE248(v36, v9, v10);
      sub_20C12EB54(&v37, v16, (__int128 *)v16);
      if ((v17 & 1) != 0)
      {
        v19 = (__int128 *)sub_20BFEE248(v36, v17, v18);
        v20 = *((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1) >= v40)
        {
          v21 = sub_20C12D654((uint64_t *)&v39, v19);
        }
        else
        {
          sub_20C029E64(*((char **)&v39 + 1), v19);
          v21 = v20 + 56;
        }
        *((_QWORD *)&v39 + 1) = v21;
      }
    }
    sub_20BFEE2C4(v36);
  }
  if ((_QWORD)v39 != *((_QWORD *)&v39 + 1))
  {
    *(_QWORD *)&v33 = &v33;
    *((_QWORD *)&v33 + 1) = &v33;
    v34 = 0;
    sub_20BEDEA80(&v33, a4);
    *(_OWORD *)v36 = v39;
    while (v36[0] != v36[1])
    {
      v24 = (unsigned __int8 *)sub_20C022B90(v36, v22, v23);
      v25 = sub_20C12EC90(a5, v24);
      v26 = v25;
      if (a5 + 8 != v25)
      {
        v27 = *(__int128 **)(v25 + 88);
        while (1)
        {
          v27 = (__int128 *)*((_QWORD *)v27 + 1);
          if (v27 == &v33)
            break;
          if (sub_20C12ED08((uint64_t)&v37, (unsigned __int8 *)v27 + 16))
            goto LABEL_27;
        }
        v27 = &v33;
LABEL_27:
        if (!v34)
          goto LABEL_32;
        sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&v33, *(_QWORD **)(v26 + 88), v27);
      }
      sub_20C022C0C(v36);
    }
    v28 = v34;
    if (v34)
    {
      v29 = (uint64_t *)a4[1];
      v30 = v33;
      v31 = **((_QWORD **)&v33 + 1);
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
      **(_QWORD **)(v30 + 8) = v31;
      v32 = *v29;
      *(_QWORD *)(v32 + 8) = *((_QWORD *)&v30 + 1);
      **((_QWORD **)&v30 + 1) = v32;
      *v29 = v30;
      *(_QWORD *)(v30 + 8) = v29;
      a4[2] += v28;
      v34 = 0;
    }
LABEL_32:
    sub_20C1249D0((uint64_t *)&v33);
  }
  sub_20C12EB0C((uint64_t)&v37, v38[0]);
  *(_QWORD *)&v33 = &v39;
  sub_20C021740((void ***)&v33);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C11FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  uint64_t v21;

  sub_20C12EB0C((uint64_t)&a20, a21);
  a9 = (void **)(v21 - 80);
  sub_20C021740(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  __int128 ***v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _QWORD ***v10;
  _QWORD ***v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  __int128 *v14;
  void *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD ***v18;
  _QWORD ***v19;
  _QWORD ***v20;
  std::string *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD ***v24;
  _QWORD ***v25;
  _QWORD ***v26;
  std::string *v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  void *__dst;
  unint64_t v36;
  __int128 **v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C02BDC4((uint64_t)a3, a1);
    a3[152] = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v34 = 0;
    __dst = 0;
    v36 = 0;
    sub_20C029D40((char *)&v34, *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    *(_QWORD *)&v39 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(a1, (__int128 **)&v34, (uint64_t)&v37);
    v6 = (__int128 ***)v39;
    if ((__int128 ***)v39 == &v37)
    {
      v7 = 4;
      v6 = &v37;
    }
    else
    {
      if (!(_QWORD)v39)
      {
LABEL_29:
        LOBYTE(v37) = 0;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems((unsigned __int8 *)&v37, (__int128 **)&v34);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v37);
        v31 = (__int128 *)((char *)&v45 + 8);
        sub_20C021740((void ***)&v31);
        v31 = &v44;
        sub_20C021740((void ***)&v31);
        v31 = (__int128 *)((char *)&v42 + 8);
        sub_20C021740((void ***)&v31);
        v31 = &v41;
        sub_20C021740((void ***)&v31);
        v31 = (__int128 *)((char *)&v39 + 8);
        sub_20C021740((void ***)&v31);
        v31 = &v38;
        sub_20C021740((void ***)&v31);
        v37 = (__int128 **)&v34;
LABEL_30:
        sub_20C021740((void ***)&v37);
        return;
      }
      v7 = 5;
    }
    ((void (*)(void))(*v6)[v7])();
    goto LABEL_29;
  }
  if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 128) == *(_QWORD *)(a2 + 136))
  {
    v34 = 0;
    __dst = 0;
    v36 = 0;
    sub_20C029D40((char *)&v34, *(__int128 **)(a2 + 104), *(__int128 **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    v31 = 0;
    v32 = 0;
    v33 = 0;
    sub_20C029D40((char *)&v31, *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
    v28 = 0;
    v29 = 0;
    v30 = 0;
    sub_20C029D40((char *)&v28, *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
    v8 = *(unsigned __int8 **)(a1 + 104);
    v9 = *(unsigned __int8 **)(a1 + 112);
    while (v8 != v9)
    {
      v10 = sub_20C1203E0((_QWORD ***)v31, (_QWORD ***)v32, v8);
      sub_20C120354((uint64_t)&v31, (uint64_t)v10, v32);
      v11 = sub_20C1203E0((_QWORD ***)v28, (_QWORD ***)v29, v8);
      sub_20C120354((uint64_t)&v28, (uint64_t)v11, v29);
      v12 = v34;
      v13 = (unsigned __int8 *)__dst;
      if (v34 == __dst)
      {
        v14 = (__int128 *)v34;
      }
      else
      {
        while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v12, v8) & 1) == 0)
        {
          v12 += 56;
          if (v12 == v13)
          {
            v12 = v13;
            break;
          }
        }
        v14 = (__int128 *)v12;
        v12 = (unsigned __int8 *)__dst;
      }
      if (v14 == (__int128 *)v12)
      {
        if ((unint64_t)v12 >= v36)
        {
          v15 = (void *)sub_20C12D654((uint64_t *)&v34, (__int128 *)v8);
        }
        else
        {
          sub_20C029E64((char *)v12, (__int128 *)v8);
          v15 = v12 + 56;
        }
        __dst = v15;
      }
      v8 += 56;
    }
    v16 = *(unsigned __int8 **)(a1 + 56);
    v17 = *(unsigned __int8 **)(a1 + 64);
    if (v16 == v17)
    {
      v21 = *(std::string **)(a1 + 56);
    }
    else
    {
      do
      {
        v18 = sub_20C1203E0((_QWORD ***)v34, (_QWORD ***)__dst, v16);
        sub_20C120354((uint64_t)&v34, (uint64_t)v18, (__int128 *)__dst);
        v19 = sub_20C1203E0((_QWORD ***)v31, (_QWORD ***)v32, v16);
        sub_20C120354((uint64_t)&v31, (uint64_t)v19, v32);
        v20 = sub_20C1203E0((_QWORD ***)v28, (_QWORD ***)v29, v16);
        sub_20C120354((uint64_t)&v28, (uint64_t)v20, v29);
        v16 += 56;
      }
      while (v16 != v17);
      v21 = *(std::string **)(a1 + 56);
      v16 = *(unsigned __int8 **)(a1 + 64);
    }
    sub_20C12D7E4((uint64_t *)&v31, (std::string *)v31, v21, (__int128 *)v16, 0x6DB6DB6DB6DB6DB7 * ((v16 - (unsigned __int8 *)v21) >> 3));
    v22 = *(unsigned __int8 **)(a1 + 80);
    v23 = *(unsigned __int8 **)(a1 + 88);
    if (v22 == v23)
    {
      v27 = *(std::string **)(a1 + 80);
    }
    else
    {
      do
      {
        v24 = sub_20C1203E0((_QWORD ***)v34, (_QWORD ***)__dst, v22);
        sub_20C120354((uint64_t)&v34, (uint64_t)v24, (__int128 *)__dst);
        v25 = sub_20C1203E0((_QWORD ***)v31, (_QWORD ***)v32, v22);
        sub_20C120354((uint64_t)&v31, (uint64_t)v25, v32);
        v26 = sub_20C1203E0((_QWORD ***)v28, (_QWORD ***)v29, v22);
        sub_20C120354((uint64_t)&v28, (uint64_t)v26, v29);
        v22 += 56;
      }
      while (v22 != v23);
      v27 = *(std::string **)(a1 + 80);
      v22 = *(unsigned __int8 **)(a1 + 88);
    }
    sub_20C12D7E4((uint64_t *)&v28, (std::string *)v29, v27, (__int128 *)v22, 0x6DB6DB6DB6DB6DB7 * ((v22 - (unsigned __int8 *)v27) >> 3));
    LOBYTE(v37) = 0;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems((unsigned __int8 *)&v37, (__int128 **)&v34);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems((unsigned __int8 *)&v37, &v31);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems((unsigned __int8 *)&v37, &v28);
    sub_20C1247A0((uint64_t)a3, (uint64_t)&v37);
    sub_20C029B80((void **)&v37);
    v37 = &v28;
    sub_20C021740((void ***)&v37);
    v37 = &v31;
    sub_20C021740((void ***)&v37);
    v37 = (__int128 **)&v34;
    goto LABEL_30;
  }
LABEL_5:
  *a3 = 0;
  a3[152] = 0;
}

void sub_20C120254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_20C021740(&a19);
  a19 = (void **)&a13;
  sub_20C021740(&a19);
  a19 = (void **)&a16;
  sub_20C021740(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20C120354(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    sub_20C12D5AC((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 56;
        sub_20C0217C4(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

_QWORD ***sub_20C1203E0(_QWORD ***a1, _QWORD ***a2, unsigned __int8 *a3)
{
  _QWORD ***v6;
  _QWORD ***v7;
  __int128 v8;
  _QWORD **v9;
  _QWORD ***v10;

  if (a1 == a2)
  {
LABEL_5:
    v6 = a2;
  }
  else
  {
    v6 = a1;
    while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==((unsigned __int8 *)v6, a3) & 1) == 0)
    {
      v6 += 7;
      if (v6 == a2)
        goto LABEL_5;
    }
  }
  if (v6 != a2 && v6 + 7 != a2)
  {
    v7 = &a1[v6 - a1 + 13];
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==((unsigned __int8 *)v7 - 48, a3) & 1) == 0)
      {
        if (*((char *)v6 + 23) < 0)
          operator delete(*v6);
        v8 = *((_OWORD *)v7 - 3);
        v6[2] = *(v7 - 4);
        *(_OWORD *)v6 = v8;
        *((_BYTE *)v7 - 25) = 0;
        *((_BYTE *)v7 - 48) = 0;
        sub_20BFD3EBC((int *)v6 + 6, (int *)v7 - 6);
        sub_20BFD3F10((int *)v6 + 7, (int *)v7 - 5);
        *((_OWORD *)v6 + 2) = *((_OWORD *)v7 - 1);
        v9 = *v7;
        *v7 = 0;
        sub_20BF49F14(v6 + 6, v9);
        v6 += 7;
      }
      v10 = v7 + 1;
      v7 += 7;
    }
    while (v10 != a2);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations(__int128 *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C1205C0(a2, (__int128 *)((char *)a1 + 8), a3);
  v7 = v6 | sub_20C1205C0(a2, a1 + 2, a3);
  v8 = sub_20C1205C0(a2, (__int128 *)((char *)a1 + 56), a3);
  v9 = v7 | v8 | sub_20C1205C0(a2, a1 + 5, a3);
  v10 = sub_20C1205C0(a2, (__int128 *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_20C1205C0(a2, a1 + 8, a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE16ModifyOperationsERKNSt3__18functionIFNS3_8optionalIS1_EERKS1_EEEb(a1, a2, a3);
}

uint64_t sub_20C1205C0(uint64_t a1, __int128 *a2, int a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;

  v32 = 0uLL;
  v33 = 0;
  v30 = 0u;
  v31 = 0u;
  v3 = *(unsigned __int8 **)a2;
  v4 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (*(unsigned __int8 **)a2 == v4)
    goto LABEL_23;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)v9 + 48))(&v23, v9, v3);
    v10 = v29;
    if (a3 && v29)
    {
      sub_20C12DA90((uint64_t)&v30, &v23);
      if ((v11 & 1) == 0)
        sub_20C12E7F4((uint64_t)&v23);
      v10 = v29;
    }
    if (v10)
    {
      v12 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==((unsigned __int8 *)&v23, v3);
      v13 = *((_QWORD *)&v32 + 1);
      if ((v12 & 1) != 0)
      {
        if (*((_QWORD *)&v32 + 1) >= v33)
        {
          v14 = sub_20C12D654((uint64_t *)&v32, (__int128 *)v3);
        }
        else
        {
          sub_20C029E64(*((char **)&v32 + 1), (__int128 *)v3);
          v14 = v13 + 56;
        }
      }
      else
      {
        if (*((_QWORD *)&v32 + 1) >= v33)
        {
          v14 = sub_20C12E84C((uint64_t *)&v32, &v23);
        }
        else
        {
          v15 = v23;
          *(_QWORD *)(*((_QWORD *)&v32 + 1) + 16) = v24;
          *(_OWORD *)v13 = v15;
          v24 = 0;
          v23 = 0uLL;
          sub_20BFD38A4((_DWORD *)(v13 + 24), &v25);
          sub_20BFD38DC((_DWORD *)(v13 + 28), &v26);
          *(_OWORD *)(v13 + 32) = v27;
          v16 = v28;
          v28 = 0;
          *(_QWORD *)(v13 + 48) = v16;
          v14 = v13 + 56;
        }
        v8 = 1;
      }
      *((_QWORD *)&v32 + 1) = v14;
    }
    else
    {
      v8 = 1;
    }
    sub_20C124A94((uint64_t)&v23);
    v3 += 56;
  }
  while (v3 != v4);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    v19 = 0;
  }
  else
  {
    v17 = *a2;
    *a2 = v32;
    v32 = v17;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v33;
    v33 = v18;
    v19 = 1;
  }
  v20 = *((_QWORD *)&v31 + 1);
  *((_QWORD *)&v31 + 1) = 0;
  if (v20)
  {
    v21 = (void *)sub_20C12DCE4(v20);
    operator delete(v21);
  }
  *(_QWORD *)&v23 = &v30;
  sub_20C021740((void ***)&v23);
  *(_QWORD *)&v23 = &v32;
  sub_20C021740((void ***)&v23);
  return v19;
}

void sub_20C1207B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20C124A94((uint64_t)&a9);
  sub_20C12DC78((uint64_t)&a17);
  a9 = (void **)&a21;
  sub_20C021740(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ReplaceOperations(unsigned __int8 *a1, int a2, unint64_t a3, uint64_t a4, std::string **a5)
{
  BOOL v10;
  __int128 **Items;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  void **v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (v10 || !a4 && *a5 != a5[1])
  {
    Items = (__int128 **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems((uint64_t)a1, a2);
    v23 = 0;
    v24 = 0;
    v22 = 0;
    sub_20C029D40((char *)&v22, *Items, Items[1], 0x6DB6DB6DB6DB6DB7 * (((char *)Items[1] - (char *)*Items) >> 3));
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v22) >> 3);
    if (v12 >= a3)
    {
      if (a4 + a3 <= v12)
      {
        v14 = a5[1];
        v15 = (std::string *)((char *)v22 + 56 * a3);
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)*a5) >> 3) == a4)
        {
          sub_20C0E31B8((int)&v25, *a5, v14, v15);
        }
        else
        {
          sub_20C120354((uint64_t)&v22, (uint64_t)v22 + 56 * a3, (__int128 *)((char *)v15 + 56 * a4));
          sub_20C12D7E4((uint64_t *)&v22, (std::string *)((char *)v22 + 56 * a3), *a5, (__int128 *)a5[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a5[1] - (char *)*a5) >> 3));
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetItems(a1, &v22, a2);
        v13 = 1;
        goto LABEL_18;
      }
      v17 = (void **)"sdf/listOp.cpp";
      v18 = "ReplaceOperations";
      v19 = 698;
      v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ReplaceOpe"
            "rations(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::SdfReference]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, 0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v22) >> 3));
    }
    else
    {
      v17 = (void **)"sdf/listOp.cpp";
      v18 = "ReplaceOperations";
      v19 = 693;
      v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ReplaceOpe"
            "rations(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::SdfReference]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, 0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v22) >> 3));
    }
    v13 = 0;
LABEL_18:
    v17 = (void **)&v22;
    sub_20C021740(&v17);
    return v13;
  }
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE17ReplaceOperationsENS_13SdfListOpTypeEmmRKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEE(a1, a2, a3, a4, a5);
}

void sub_20C120A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_20C021740(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ComposeOperations(unsigned __int8 *a1, uint64_t a2, int a3)
{
  __int128 **Items;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 **v12;
  uint64_t v13;
  __int128 **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19[2];
  uint64_t v20;
  uint64_t *v21;
  __int128 **v22;
  __int128 *v23[3];
  __int128 **v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    Items = (__int128 **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems((uint64_t)a1, a3);
    sub_20C12E99C(&v20, *Items, Items[1]);
    v19[0] = 0;
    v19[1] = 0;
    v18 = (uint64_t *)v19;
    for (i = v21; i != &v20; i = (uint64_t *)i[1])
    {
      v23[0] = (__int128 *)(i + 2);
      sub_20C12CB2C(&v18, (unsigned __int8 *)i + 16, (uint64_t)&unk_20CAC184C, v23)[11] = (uint64_t)i;
    }
    switch(a3)
    {
      case 1:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys(a2, 1, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      case 2:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys(a2, 2, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      case 3:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys(a2, 3, (uint64_t)v23, &v20, &v18);
        v12 = v24;
        if (v24 == v23)
        {
          v13 = 4;
          v12 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_15;
          v13 = 5;
        }
        (*((void (**)(__int128 **, uint64_t, uint64_t))*v12 + v13))(v12, v10, v11);
LABEL_15:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_ReorderKeys(a2, 3, (uint64_t)v23, &v20, (uint64_t)&v18);
LABEL_16:
        v14 = v24;
        if (v24 == v23)
        {
          v15 = 4;
          v14 = v23;
        }
        else
        {
          if (!v24)
            goto LABEL_21;
          v15 = 5;
        }
        (*((void (**)(__int128 **, uint64_t, uint64_t))*v14 + v15))(v14, v8, v9);
LABEL_21:
        memset(v23, 0, sizeof(v23));
        if (v21 == &v20)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = v21;
          do
          {
            ++v16;
            v17 = (uint64_t *)v17[1];
          }
          while (v17 != &v20);
        }
        sub_20C12EA88((char *)v23, (uint64_t)v21, (uint64_t)&v20, v16);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetItems(a1, v23, a3);
        v22 = v23;
        sub_20C021740((void ***)&v22);
        sub_20C12C940((uint64_t)&v18, v19[0]);
        sub_20C1249D0(&v20);
        break;
      case 4:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_PrependKeys(a2, 4, (uint64_t)v23, (uint64_t)&v20, &v18);
        goto LABEL_16;
      case 5:
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AppendKeys(a2, 5, (uint64_t)v23, &v20, &v18);
        goto LABEL_16;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems(a1, (__int128 **)(a2 + 8));
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEE17ComposeOperationsERKS2_NS_13SdfListOpTypeE(a1, a2, a3);
}

void sub_20C120D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20C12C940((uint64_t)&a9, a10);
  sub_20C1249D0(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  if (*a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  v5 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  v6 = (unsigned __int8 *)a2[1];
  if (v5 - v4 != a2[2] - (_QWORD)v6)
    return 0;
  while (v4 != v5)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v4, v6))
      return 0;
    v4 += 56;
    v6 += 56;
  }
  v7 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  v8 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  v9 = (unsigned __int8 *)a2[4];
  if (v8 - v7 != a2[5] - (_QWORD)v9)
    return 0;
  while (v7 != v8)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, v9))
      return 0;
    v7 += 56;
    v9 += 56;
  }
  v10 = (unsigned __int8 *)*((_QWORD *)a1 + 7);
  v11 = (unsigned __int8 *)*((_QWORD *)a1 + 8);
  v12 = (unsigned __int8 *)a2[7];
  if (v11 - v10 != a2[8] - (_QWORD)v12)
    return 0;
  while (v10 != v11)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v10, v12))
      return 0;
    v10 += 56;
    v12 += 56;
  }
  v13 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
  v14 = (unsigned __int8 *)*((_QWORD *)a1 + 11);
  v15 = (unsigned __int8 *)a2[10];
  if (v14 - v13 != a2[11] - (_QWORD)v15)
    return 0;
  while (v13 != v14)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v13, v15))
      return 0;
    v13 += 56;
    v15 += 56;
  }
  v16 = (unsigned __int8 *)*((_QWORD *)a1 + 13);
  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 14);
  v18 = (unsigned __int8 *)a2[13];
  if (v17 - v16 != a2[14] - (_QWORD)v18)
    return 0;
  while (v16 != v17)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v16, v18))
      return 0;
    v16 += 56;
    v18 += 56;
  }
  return sub_20C120F34((unsigned __int8 **)a1 + 16, (uint64_t)(a2 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEEeqERKS2_(a1, a2);
}

uint64_t sub_20C120F34(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 56;
    v4 += 56;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator!=(unsigned __int8 *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==(a1, a2) ^ 1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CE0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfReference]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C12ED70(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C12ED70(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C12ED70(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C12ED70(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C12ED70(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C12ED70(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsINS_12SdfReferenceEEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES7_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C12120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::CreateExplicit(std::string **a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems((unsigned __int8 *)a2, a1);
}

void sub_20C1212C8(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C02C9C4(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEEC1Ev(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems(unsigned __int8 *a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 1);
  if (a1 + 8 != (unsigned __int8 *)a2)
    sub_20C0E376C((uint64_t)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE16SetExplicitItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Create(std::string **a1@<X0>, std::string **a2@<X1>, std::string **a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems((unsigned __int8 *)a4, a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems((unsigned __int8 *)a4, a2);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems((unsigned __int8 *)a4, a3);
}

void sub_20C1213E0(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C02C9C4(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems(unsigned __int8 *a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 0);
  if (a1 + 56 != (unsigned __int8 *)a2)
    sub_20C0E376C((uint64_t)(a1 + 56), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE17SetPrependedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems(unsigned __int8 *a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 0);
  if (a1 + 80 != (unsigned __int8 *)a2)
    sub_20C0E376C((uint64_t)(a1 + 80), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE16SetAppendedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems(unsigned __int8 *a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 0);
  if (a1 + 104 != (unsigned __int8 *)a2)
    sub_20C0E376C((uint64_t)(a1 + 104), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE15SetDeletedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Swap(char *result, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)result + 13);
  *((_QWORD *)result + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  v16 = *((_QWORD *)result + 14);
  *((_QWORD *)result + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v16;
  v17 = *((_QWORD *)result + 15);
  *((_QWORD *)result + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v17;
  v18 = *((_QWORD *)result + 16);
  *((_QWORD *)result + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)result + 17);
  *((_QWORD *)result + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)result + 18);
  *((_QWORD *)result + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE4SwapERS2_(result, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::HasKeys(uint64_t a1)
{
  return *(_BYTE *)a1
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32)
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56)
      || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80)
      || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104)
      || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE7HasKeysEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::HasItem(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v20;

  if (*(_BYTE *)a1)
  {
    v4 = *(unsigned __int8 **)(a1 + 8);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if (v4 != v5)
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v4, a2))
      {
        v4 += 48;
        if (v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
      v6 = v4;
      v4 = *(unsigned __int8 **)(a1 + 16);
      return v6 != v4;
    }
  }
  else
  {
    v7 = *(unsigned __int8 **)(a1 + 32);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (v7 == v8)
    {
      v9 = *(unsigned __int8 **)(a1 + 32);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, a2))
      {
        v7 += 48;
        if (v7 == v8)
        {
          v7 = v8;
          break;
        }
      }
      v9 = v7;
      v7 = *(unsigned __int8 **)(a1 + 40);
    }
    if (v9 != v7)
      return 1;
    v10 = *(unsigned __int8 **)(a1 + 56);
    v11 = *(unsigned __int8 **)(a1 + 64);
    if (v10 == v11)
    {
      v12 = *(unsigned __int8 **)(a1 + 56);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v10, a2))
      {
        v10 += 48;
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
      v12 = v10;
      v10 = *(unsigned __int8 **)(a1 + 64);
    }
    if (v12 != v10)
      return 1;
    v13 = *(unsigned __int8 **)(a1 + 80);
    v14 = *(unsigned __int8 **)(a1 + 88);
    if (v13 == v14)
    {
      v15 = *(unsigned __int8 **)(a1 + 80);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v13, a2))
      {
        v13 += 48;
        if (v13 == v14)
        {
          v13 = v14;
          break;
        }
      }
      v15 = v13;
      v13 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v15 != v13)
      return 1;
    v16 = *(unsigned __int8 **)(a1 + 104);
    v17 = *(unsigned __int8 **)(a1 + 112);
    if (v16 == v17)
    {
      v18 = *(unsigned __int8 **)(a1 + 104);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v16, a2))
      {
        v16 += 48;
        if (v16 == v17)
        {
          v16 = v17;
          break;
        }
      }
      v18 = v16;
      v16 = *(unsigned __int8 **)(a1 + 112);
    }
    if (v18 != v16)
      return 1;
    v4 = *(unsigned __int8 **)(a1 + 128);
    v20 = *(unsigned __int8 **)(a1 + 136);
    if (v4 != v20)
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v4, a2))
      {
        v4 += 48;
        if (v4 == v20)
        {
          v4 = v20;
          break;
        }
      }
      v6 = v4;
      v4 = *(unsigned __int8 **)(a1 + 136);
      return v6 != v4;
    }
  }
  v6 = v4;
  return v6 != v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;

  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 104;
      break;
    case 3:
      result = a1 + 128;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfPayload>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
      v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      result = a1 + 8;
      break;
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE8GetItemsENS_13SdfListOpTypeE(a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetAppliedItems@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20C1219F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20C021818(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __n128 **i;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 **v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 **v15;
  uint64_t v16;
  __int128 *v17;

  if (a2)
  {
    v14 = (__n128 *)&v14;
    v15 = &v14;
    v16 = 0;
    if (*(_BYTE *)a1)
    {
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys(a1, 0, a3, &v14, &v11);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 24)
        && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4)
         - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4)
         - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4)
         - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4) == 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4))
      {
LABEL_17:
        sub_20C124AEC((uint64_t *)&v14);
        return;
      }
      sub_20C12EF24((uint64_t)&v14, &v14, *a2, a2[1]);
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t *)&v12;
      for (i = v15; i != &v14; i = (__n128 **)i[1])
      {
        v17 = (__int128 *)(i + 2);
        sub_20C12F088(&v11, (const void **)i + 2, (uint64_t)&unk_20CAC184C, &v17)[10] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_DeleteKeys(a1, 2, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys(a1, 1, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PrependKeys(a1, 4, a3, (uint64_t)&v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AppendKeys(a1, 5, a3, &v14, &v11);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_ReorderKeys(a1, 3, a3, (uint64_t *)&v14, (uint64_t)&v11);
    }
    sub_20C12EE94((uint64_t)&v11, v12);
    v7 = (std::string *)*a2;
    v8 = a2[1];
    if (v8 != *a2)
    {
      do
      {
        v8 -= 48;
        sub_20C02189C((uint64_t)(a2 + 2), v8);
      }
      while ((std::string *)v8 != v7);
    }
    a2[1] = (uint64_t)v7;
    if (v15 == &v14)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = v15;
      do
      {
        ++v9;
        v10 = (__n128 **)v10[1];
      }
      while (v10 != &v14);
    }
    sub_20C12F2DC(a2, v7, v15, (uint64_t)&v14, v9);
    goto LABEL_17;
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE15ApplyOperationsEPNSt3__16vectorIS1_NS3_9allocatorIS1_EEEERKNS3_8functionIFNS3_8optionalIS1_EENS_13SdfListOpTypeERKS1_EEE(a1, a2, a3);
}

void sub_20C121C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C124AEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(unsigned __int8 *a1, int a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v8;
  uint64_t m;
  uint64_t v10;
  uint64_t n;
  uint64_t v12;
  uint64_t ii;
  uint64_t v14;

  if (*a1 != a2)
  {
    *a1 = a2;
    v4 = *((_QWORD *)a1 + 1);
    for (i = *((_QWORD *)a1 + 2); i != v4; sub_20C02189C((uint64_t)(a1 + 24), i))
      i -= 48;
    *((_QWORD *)a1 + 2) = v4;
    v6 = *((_QWORD *)a1 + 4);
    for (j = *((_QWORD *)a1 + 5); j != v6; sub_20C02189C((uint64_t)(a1 + 48), j))
      j -= 48;
    *((_QWORD *)a1 + 5) = v6;
    v8 = *((_QWORD *)a1 + 7);
    for (k = *((_QWORD *)a1 + 8); k != v8; sub_20C02189C((uint64_t)(a1 + 72), k))
      k -= 48;
    *((_QWORD *)a1 + 8) = v8;
    v10 = *((_QWORD *)a1 + 10);
    for (m = *((_QWORD *)a1 + 11); m != v10; sub_20C02189C((uint64_t)(a1 + 96), m))
      m -= 48;
    *((_QWORD *)a1 + 11) = v10;
    v12 = *((_QWORD *)a1 + 13);
    for (n = *((_QWORD *)a1 + 14); n != v12; sub_20C02189C((uint64_t)(a1 + 120), n))
      n -= 48;
    *((_QWORD *)a1 + 14) = v12;
    v14 = *((_QWORD *)a1 + 16);
    for (ii = *((_QWORD *)a1 + 17); ii != v14; sub_20C02189C((uint64_t)(a1 + 144), ii))
      ii -= 48;
    *((_QWORD *)a1 + 17) = v14;
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE12_SetExplicitEb(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems(unsigned __int8 *a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 0);
  if (a1 + 32 != (unsigned __int8 *)a2)
    sub_20C0E376C((uint64_t)(a1 + 32), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE13SetAddedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems(unsigned __int8 *a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 0);
  if (a1 + 128 != (unsigned __int8 *)a2)
    sub_20C0E376C((uint64_t)(a1 + 128), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE15SetOrderedItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetItems(unsigned __int8 *a1, std::string **a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems(a1, a2);
      break;
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems(a1, a2);
      break;
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems(a1, a2);
      break;
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems(a1, a2);
      break;
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems(a1, a2);
      break;
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems(a1, a2);
      break;
    default:
      return;
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE8SetItemsERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEENS_13SdfListOpTypeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Clear(unsigned __int8 *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 0);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit(unsigned __int8 *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(a1, 1);
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE20ClearAndMakeExplicitEv(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys(uint64_t a1, int a2, uint64_t a3, __n128 **a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v16;
  unint64_t v17;
  __int128 *v18;
  __n128 *v19;
  unint64_t v20;
  __int128 *v21[6];
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 **v25;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1, a2);
  v12 = result[1];
  v23 = *result;
  v24 = v12;
  if (v23 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEDCBC(&v23, v10, v11);
        LODWORD(v25) = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(__int128 **__return_ptr, uint64_t, __int128 ***, uint64_t))(*(_QWORD *)v15 + 48))(v21, v15, &v25, v14);
        if (v22)
        {
          if (v13 == (uint64_t **)sub_20C131220((uint64_t)a5, (unsigned __int8 *)v21))
          {
            v16 = sub_20C130FA4((int)a4, 0, 0, (uint64_t)v21);
            v17 = (unint64_t)*a4;
            *(_QWORD *)(v17 + 8) = v16;
            v16->n128_u64[0] = v17;
            *a4 = v16;
            v16->n128_u64[1] = (unint64_t)a4;
            a4[2] = (__n128 *)((char *)a4[2] + 1);
            v25 = v21;
            sub_20C12F088(a5, (const void **)v21, (uint64_t)&unk_20CAC184C, (__int128 **)&v25)[10] = (uint64_t)v16;
          }
        }
        sub_20C124BA4((uint64_t)v21);
      }
      else
      {
        v18 = (__int128 *)sub_20BFEDCBC(&v23, v10, v11);
        if (v13 == (uint64_t **)sub_20C131220((uint64_t)a5, (unsigned __int8 *)v18))
        {
          v19 = sub_20C130FA4((int)a4, 0, 0, (uint64_t)v18);
          v20 = (unint64_t)*a4;
          *(_QWORD *)(v20 + 8) = v19;
          v19->n128_u64[0] = v20;
          *a4 = v19;
          v19->n128_u64[1] = (unint64_t)a4;
          a4[2] = (__n128 *)((char *)a4[2] + 1);
          v21[0] = v18;
          sub_20C12F088(a5, (const void **)v18, (uint64_t)&unk_20CAC184C, v21)[10] = (uint64_t)v19;
        }
      }
      result = sub_20BFEDD38(&v23);
    }
    while (v23 != v24);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE8_AddKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1220C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C124BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_DeleteKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[6];
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1, a2);
  v12 = result[1];
  v28 = *result;
  v29 = v12;
  if (v28 != v12)
  {
    v13 = a5 + 1;
    do
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v14 = sub_20BFEDCBC(&v28, v10, v11);
        v30 = a2;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          sub_20BE9E974();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(v26, v15, &v30, v14);
        if (v27)
        {
          v16 = sub_20C131220((uint64_t)a5, (unsigned __int8 *)v26);
          v17 = (uint64_t *)v16;
          if (v13 != (uint64_t **)v16)
          {
            v18 = *(uint64_t **)(v16 + 80);
            v19 = *v18;
            *(_QWORD *)(v19 + 8) = v18[1];
            *(_QWORD *)v18[1] = v19;
            --*(_QWORD *)(a4 + 16);
            sub_20C124B5C((uint64_t)(v18 + 2));
            operator delete(v18);
            sub_20BE10B80(a5, v17);
            sub_20C12EEDC((uint64_t)(v17 + 4));
            operator delete(v17);
          }
        }
        sub_20C124BA4((uint64_t)v26);
      }
      else
      {
        v20 = (unsigned __int8 *)sub_20BFEDCBC(&v28, v10, v11);
        v21 = sub_20C131220((uint64_t)a5, v20);
        if (v13 != (uint64_t **)v21)
        {
          v22 = (uint64_t *)v21;
          v23 = v21 + 32;
          v24 = *(uint64_t **)(v21 + 80);
          v25 = *v24;
          *(_QWORD *)(v25 + 8) = v24[1];
          *(_QWORD *)v24[1] = v25;
          --*(_QWORD *)(a4 + 16);
          sub_20C124B5C((uint64_t)(v24 + 2));
          operator delete(v24);
          sub_20BE10B80(a5, v22);
          sub_20C12EEDC(v23);
          operator delete(v22);
        }
      }
      result = sub_20BFEDD38(&v28);
    }
    while (v28 != v29);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE11_DeleteKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C12226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C124BA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PrependKeys(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unsigned __int8 **result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  __n128 **v13;
  uint64_t v14;
  __n128 **v15;
  __n128 **v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  unint64_t v21;
  __n128 **v22;
  __n128 **v23;
  __n128 **v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  __int128 *v30[6];
  char v31;
  __int128 **v32;

  result = (unsigned __int8 **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1, a2);
  v11 = *result;
  v10 = result[1];
  if (*(_QWORD *)(a3 + 24))
  {
    if (v10 != *result)
    {
      do
      {
        LODWORD(v32) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        v10 -= 48;
        (*(void (**)(__int128 **__return_ptr, uint64_t, __int128 ***, unsigned __int8 *))(*(_QWORD *)v12 + 48))(v30, v12, &v32, v10);
        if (v31)
        {
          v13 = *(__n128 ***)(a4 + 8);
          v14 = sub_20C131220((uint64_t)a5, (unsigned __int8 *)v30);
          if (a5 + 1 == (uint64_t **)v14)
          {
            v20 = sub_20C130FA4(a4, 0, 0, (uint64_t)v30);
            v21 = (unint64_t)*v13;
            *(_QWORD *)(v21 + 8) = v20;
            v20->n128_u64[0] = v21;
            *v13 = v20;
            v20->n128_u64[1] = (unint64_t)v13;
            ++*(_QWORD *)(a4 + 16);
            v32 = v30;
            sub_20C12F088(a5, (const void **)v30, (uint64_t)&unk_20CAC184C, (__int128 **)&v32)[10] = (uint64_t)v20;
          }
          else
          {
            v15 = *(__n128 ***)(v14 + 80);
            if (v15 != v13)
            {
              v16 = (__n128 **)v15[1];
              if (v15 != v16)
              {
                v17 = *v16;
                v18 = *v15;
                v18->n128_u64[1] = v17->n128_u64[1];
                *(_QWORD *)v17->n128_u64[1] = v18;
                v19 = *v13;
                v19->n128_u64[1] = (unint64_t)v15;
                *v15 = v19;
                *v13 = v17;
                v17->n128_u64[1] = (unint64_t)v13;
              }
            }
          }
        }
        result = (unsigned __int8 **)sub_20C124BA4((uint64_t)v30);
      }
      while (v10 != v11);
    }
  }
  else if (v10 != *result)
  {
    do
    {
      v10 -= 48;
      v22 = *(__n128 ***)(a4 + 8);
      result = (unsigned __int8 **)sub_20C131220((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)result)
      {
        v28 = sub_20C130FA4(a4, 0, 0, (uint64_t)v10);
        v29 = (unint64_t)*v22;
        *(_QWORD *)(v29 + 8) = v28;
        v28->n128_u64[0] = v29;
        *v22 = v28;
        v28->n128_u64[1] = (unint64_t)v22;
        ++*(_QWORD *)(a4 + 16);
        v30[0] = (__int128 *)v10;
        result = (unsigned __int8 **)sub_20C12F088(a5, (const void **)v10, (uint64_t)&unk_20CAC184C, v30);
        result[10] = (unsigned __int8 *)v28;
      }
      else
      {
        v23 = (__n128 **)result[10];
        if (v23 != v22)
        {
          v24 = (__n128 **)v23[1];
          if (v23 != v24)
          {
            v25 = *v24;
            v26 = *v23;
            v26->n128_u64[1] = v25->n128_u64[1];
            *(_QWORD *)v25->n128_u64[1] = v26;
            v27 = *v22;
            v27->n128_u64[1] = (unint64_t)v23;
            *v23 = v27;
            *v22 = v25;
            v25->n128_u64[1] = (unint64_t)v22;
          }
        }
      }
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE12_PrependKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1224CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C124BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AppendKeys(uint64_t a1, int a2, uint64_t a3, __n128 **a4, uint64_t **a5)
{
  uint64_t result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 **v14;
  __n128 **v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  unint64_t v20;
  __n128 **v21;
  __n128 **v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  __int128 *v28[6];
  char v29;
  __int128 **v30;

  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1, a2);
  v10 = *(unsigned __int8 **)result;
  v11 = *(unsigned __int8 **)(result + 8);
  if (*(_QWORD *)(a3 + 24))
  {
    if (*(unsigned __int8 **)result != v11)
    {
      do
      {
        LODWORD(v30) = a2;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          sub_20BE9E974();
        (*(void (**)(__int128 **__return_ptr, uint64_t, __int128 ***, unsigned __int8 *))(*(_QWORD *)v12 + 48))(v28, v12, &v30, v10);
        if (v29)
        {
          v13 = sub_20C131220((uint64_t)a5, (unsigned __int8 *)v28);
          if (a5 + 1 == (uint64_t **)v13)
          {
            v19 = sub_20C130FA4((int)a4, 0, 0, (uint64_t)v28);
            v20 = (unint64_t)*a4;
            *(_QWORD *)(v20 + 8) = v19;
            v19->n128_u64[0] = v20;
            *a4 = v19;
            v19->n128_u64[1] = (unint64_t)a4;
            a4[2] = (__n128 *)((char *)a4[2] + 1);
            v30 = v28;
            sub_20C12F088(a5, (const void **)v28, (uint64_t)&unk_20CAC184C, (__int128 **)&v30)[10] = (uint64_t)v19;
          }
          else
          {
            v14 = *(__n128 ***)(v13 + 80);
            if (v14 != a4)
            {
              v15 = (__n128 **)v14[1];
              if (v14 != v15)
              {
                v16 = *v15;
                v17 = *v14;
                v17->n128_u64[1] = v16->n128_u64[1];
                *(_QWORD *)v16->n128_u64[1] = v17;
                v18 = *a4;
                v18->n128_u64[1] = (unint64_t)v14;
                *v14 = v18;
                *a4 = v16;
                v16->n128_u64[1] = (unint64_t)a4;
              }
            }
          }
        }
        result = sub_20C124BA4((uint64_t)v28);
        v10 += 48;
      }
      while (v10 != v11);
    }
  }
  else if (*(unsigned __int8 **)result != v11)
  {
    do
    {
      result = sub_20C131220((uint64_t)a5, v10);
      if (a5 + 1 == (uint64_t **)result)
      {
        v26 = sub_20C130FA4((int)a4, 0, 0, (uint64_t)v10);
        v27 = (unint64_t)*a4;
        *(_QWORD *)(v27 + 8) = v26;
        v26->n128_u64[0] = v27;
        *a4 = v26;
        v26->n128_u64[1] = (unint64_t)a4;
        a4[2] = (__n128 *)((char *)a4[2] + 1);
        v28[0] = (__int128 *)v10;
        result = (uint64_t)sub_20C12F088(a5, (const void **)v10, (uint64_t)&unk_20CAC184C, v28);
        *(_QWORD *)(result + 80) = v26;
      }
      else
      {
        v21 = *(__n128 ***)(result + 80);
        if (v21 != a4)
        {
          v22 = (__n128 **)v21[1];
          if (v21 != v22)
          {
            v23 = *v22;
            v24 = *v21;
            v24->n128_u64[1] = v23->n128_u64[1];
            *(_QWORD *)v23->n128_u64[1] = v24;
            v25 = *a4;
            v25->n128_u64[1] = (unint64_t)v21;
            *v21 = v25;
            *a4 = v23;
            v23->n128_u64[1] = (unint64_t)a4;
          }
        }
      }
      v10 += 48;
    }
    while (v10 != v11);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE11_AppendKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C122724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C124BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_ReorderKeys(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36[3];
  uint64_t *v37;
  _QWORD *v38[2];
  __int128 v39;
  unint64_t v40;
  int v41;
  uint64_t vars0;

  v39 = 0uLL;
  v40 = 0;
  v38[0] = 0;
  v38[1] = 0;
  v37 = (uint64_t *)v38;
  *(_OWORD *)v36 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1, a2);
  while (v36[0] != v36[1])
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v11 = sub_20BFEDCBC(v36, v9, v10);
      v41 = a2;
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(__int128 *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 48))(&v33, v12, &v41, v11);
      if (v35)
      {
        sub_20C1310E0(&v37, (const void **)&v33, (uint64_t)&v33);
        if ((v13 & 1) != 0)
        {
          v14 = *((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1) >= v40)
          {
            v15 = sub_20C12FBAC((uint64_t *)&v39, (uint64_t)&v33);
          }
          else
          {
            sub_20C02CCF8(&vars0 - 64, *((__n128 **)&v39 + 1), (uint64_t)&v33);
            v15 = v14 + 48;
          }
          *((_QWORD *)&v39 + 1) = v15;
        }
      }
      sub_20C124BA4((uint64_t)&v33);
    }
    else
    {
      v16 = (const void **)sub_20BFEDCBC(v36, v9, v10);
      sub_20C1310E0(&v37, v16, (uint64_t)v16);
      if ((v17 & 1) != 0)
      {
        v19 = sub_20BFEDCBC(v36, v17, v18);
        v20 = *((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1) >= v40)
        {
          v21 = sub_20C12FBAC((uint64_t *)&v39, v19);
        }
        else
        {
          sub_20C02CCF8(&vars0 - 64, *((__n128 **)&v39 + 1), v19);
          v21 = v20 + 48;
        }
        *((_QWORD *)&v39 + 1) = v21;
      }
    }
    sub_20BFEDD38(v36);
  }
  if ((_QWORD)v39 != *((_QWORD *)&v39 + 1))
  {
    *(_QWORD *)&v33 = &v33;
    *((_QWORD *)&v33 + 1) = &v33;
    v34 = 0;
    sub_20BEDEA80(&v33, a4);
    *(_OWORD *)v36 = v39;
    while (v36[0] != v36[1])
    {
      v24 = (unsigned __int8 *)sub_20C0231B4(v36, v22, v23);
      v25 = sub_20C131220(a5, v24);
      v26 = v25;
      if (a5 + 8 != v25)
      {
        v27 = *(__int128 **)(v25 + 80);
        while (1)
        {
          v27 = (__int128 *)*((_QWORD *)v27 + 1);
          if (v27 == &v33)
            break;
          if (sub_20C131298((uint64_t)&v37, (unsigned __int8 *)v27 + 16))
            goto LABEL_27;
        }
        v27 = &v33;
LABEL_27:
        if (!v34)
          goto LABEL_32;
        sub_20BEDE808((uint64_t)a4, a4, (uint64_t)&v33, *(_QWORD **)(v26 + 80), v27);
      }
      sub_20C023230(v36);
    }
    v28 = v34;
    if (v34)
    {
      v29 = (uint64_t *)a4[1];
      v30 = v33;
      v31 = **((_QWORD **)&v33 + 1);
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
      **(_QWORD **)(v30 + 8) = v31;
      v32 = *v29;
      *(_QWORD *)(v32 + 8) = *((_QWORD *)&v30 + 1);
      **((_QWORD **)&v30 + 1) = v32;
      *v29 = v30;
      *(_QWORD *)(v30 + 8) = v29;
      a4[2] += v28;
      v34 = 0;
    }
LABEL_32:
    sub_20C124AEC((uint64_t *)&v33);
  }
  sub_20C131098((uint64_t)&v37, v38[0]);
  *(_QWORD *)&v33 = &v39;
  sub_20C021818((void ***)&v33);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE12_ReorderKeysENS_13SdfListOpTypeERKNSt3__18functionIFNS4_8optionalIS1_EES3_RKS1_EEEPNS4_4listIS1_NS4_9allocatorIS1_EEEEPNS4_3mapIS1_NS4_15__list_iteratorIS1_PvEENS4_4lessIS1_EENSF_INS4_4pairIS8_SM_EEEEEE(a1, a2, a3, a4, a5);
}

void sub_20C1229CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  uint64_t v21;

  sub_20C131098((uint64_t)&a20, a21);
  a10 = (void **)(v21 - 80);
  sub_20C021818(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  __n128 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *i;
  _OWORD *v10;
  _OWORD *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  std::string *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  std::string *v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  __n128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    sub_20C02E924((uint64_t)a3, a1);
    a3[152] = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
    goto LABEL_5;
  if (*(_BYTE *)a2)
  {
    v32 = 0uLL;
    v33 = 0;
    sub_20C02CB7C(&v32, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
    *(_QWORD *)&v36 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(a1, (uint64_t *)&v32, (uint64_t)&v34);
    v6 = (__n128 **)v36;
    if ((__n128 **)v36 == &v34)
    {
      v7 = 4;
      v6 = &v34;
    }
    else
    {
      if (!(_QWORD)v36)
      {
LABEL_31:
        LOBYTE(v34) = 0;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems((unsigned __int8 *)&v34, (std::string **)&v32);
        sub_20C1247A0((uint64_t)a3, (uint64_t)&v34);
        v30.n128_u64[0] = (unint64_t)&v42 + 8;
        sub_20C021818((void ***)&v30);
        v30.n128_u64[0] = (unint64_t)&v41;
        sub_20C021818((void ***)&v30);
        v30.n128_u64[0] = (unint64_t)&v39 + 8;
        sub_20C021818((void ***)&v30);
        v30.n128_u64[0] = (unint64_t)&v38;
        sub_20C021818((void ***)&v30);
        v30.n128_u64[0] = (unint64_t)&v36 + 8;
        sub_20C021818((void ***)&v30);
        v30.n128_u64[0] = (unint64_t)&v35;
        sub_20C021818((void ***)&v30);
        v34 = &v32;
LABEL_32:
        sub_20C021818((void ***)&v34);
        return;
      }
      v7 = 5;
    }
    ((void (*)(void))(*v6)->n128_u64[v7])();
    goto LABEL_31;
  }
  if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 128) == *(_QWORD *)(a2 + 136))
  {
    v32 = 0uLL;
    v33 = 0;
    sub_20C02CB7C(&v32, *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4));
    v30 = 0uLL;
    v31 = 0;
    sub_20C02CB7C(&v30, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4));
    v28 = 0uLL;
    v29 = 0;
    sub_20C02CB7C(&v28, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4));
    v8 = *(unsigned __int8 **)(a1 + 104);
    for (i = *(unsigned __int8 **)(a1 + 112); v8 != i; v8 += 48)
    {
      v10 = sub_20C1230E4(v30.n128_u64[0], (_OWORD *)v30.n128_u64[1], v8);
      sub_20C123058((uint64_t)&v30, (uint64_t)v10, (__int128 *)v30.n128_u64[1]);
      v11 = sub_20C1230E4(v28.n128_u64[0], (_OWORD *)v28.n128_u64[1], v8);
      sub_20C123058((uint64_t)&v28, (uint64_t)v11, (__int128 *)v28.n128_u64[1]);
      v13 = v32.n128_u64[1];
      v12 = (__n128 *)v32.n128_u64[0];
      if (v32.n128_u64[0] == v32.n128_u64[1])
      {
        v14 = v32.n128_u64[0];
      }
      else
      {
        while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v12, v8))
        {
          v12 += 3;
          if (v12 == (__n128 *)v13)
          {
            v12 = (__n128 *)v13;
            break;
          }
        }
        v14 = (unint64_t)v12;
        v12 = (__n128 *)v32.n128_u64[1];
      }
      if ((__n128 *)v14 == v12)
      {
        if ((unint64_t)v12 >= v33)
        {
          v15 = sub_20C12FBAC((uint64_t *)&v32, (uint64_t)v8);
        }
        else
        {
          sub_20C02CCF8((int)&v33, v12, (uint64_t)v8);
          v15 = (uint64_t)&v12[3];
        }
        v32.n128_u64[1] = v15;
      }
    }
    v16 = *(unsigned __int8 **)(a1 + 56);
    v17 = *(unsigned __int8 **)(a1 + 64);
    if (v16 == v17)
    {
      v21 = *(std::string **)(a1 + 56);
    }
    else
    {
      do
      {
        v18 = sub_20C1230E4(v32.n128_u64[0], (_OWORD *)v32.n128_u64[1], v16);
        sub_20C123058((uint64_t)&v32, (uint64_t)v18, (__int128 *)v32.n128_u64[1]);
        v19 = sub_20C1230E4(v30.n128_u64[0], (_OWORD *)v30.n128_u64[1], v16);
        sub_20C123058((uint64_t)&v30, (uint64_t)v19, (__int128 *)v30.n128_u64[1]);
        v20 = sub_20C1230E4(v28.n128_u64[0], (_OWORD *)v28.n128_u64[1], v16);
        sub_20C123058((uint64_t)&v28, (uint64_t)v20, (__int128 *)v28.n128_u64[1]);
        v16 += 48;
      }
      while (v16 != v17);
      v21 = *(std::string **)(a1 + 56);
      v16 = *(unsigned __int8 **)(a1 + 64);
    }
    sub_20C12FD2C((uint64_t *)&v30, (std::string *)v30.n128_u64[0], v21, (uint64_t)v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - (unsigned __int8 *)v21) >> 4));
    v22 = *(unsigned __int8 **)(a1 + 80);
    v23 = *(unsigned __int8 **)(a1 + 88);
    if (v22 == v23)
    {
      v27 = *(std::string **)(a1 + 80);
    }
    else
    {
      do
      {
        v24 = sub_20C1230E4(v32.n128_u64[0], (_OWORD *)v32.n128_u64[1], v22);
        sub_20C123058((uint64_t)&v32, (uint64_t)v24, (__int128 *)v32.n128_u64[1]);
        v25 = sub_20C1230E4(v30.n128_u64[0], (_OWORD *)v30.n128_u64[1], v22);
        sub_20C123058((uint64_t)&v30, (uint64_t)v25, (__int128 *)v30.n128_u64[1]);
        v26 = sub_20C1230E4(v28.n128_u64[0], (_OWORD *)v28.n128_u64[1], v22);
        sub_20C123058((uint64_t)&v28, (uint64_t)v26, (__int128 *)v28.n128_u64[1]);
        v22 += 48;
      }
      while (v22 != v23);
      v27 = *(std::string **)(a1 + 80);
      v22 = *(unsigned __int8 **)(a1 + 88);
    }
    sub_20C12FD2C((uint64_t *)&v28, (std::string *)v28.n128_u64[1], v27, (uint64_t)v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned __int8 *)v27) >> 4));
    LOBYTE(v34) = 0;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems((unsigned __int8 *)&v34, (std::string **)&v32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems((unsigned __int8 *)&v34, (std::string **)&v30);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems((unsigned __int8 *)&v34, (std::string **)&v28);
    sub_20C1247A0((uint64_t)a3, (uint64_t)&v34);
    sub_20C02C9C4((void **)&v34);
    v34 = &v28;
    sub_20C021818((void ***)&v34);
    v34 = &v30;
    sub_20C021818((void ***)&v34);
    v34 = &v32;
    goto LABEL_32;
  }
LABEL_5:
  *a3 = 0;
  a3[152] = 0;
}

void sub_20C122F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_20C021818(&a19);
  a19 = (void **)&a13;
  sub_20C021818(&a19);
  a19 = (void **)&a16;
  sub_20C021818(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20C123058(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    sub_20C12FB14((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 48;
        sub_20C02189C(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

_OWORD *sub_20C1230E4(_OWORD *a1, _OWORD *a2, unsigned __int8 *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;

  if (a1 == a2)
  {
LABEL_5:
    v6 = a2;
  }
  else
  {
    v6 = a1;
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v6, a3))
    {
      v6 += 3;
      if (v6 == a2)
        goto LABEL_5;
    }
  }
  if (v6 != a2 && v6 + 3 != a2)
  {
    v7 = &a1[v6 - a1 + 5];
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v7 - 32, a3))
      {
        if (*((char *)v6 + 23) < 0)
          operator delete(*(void **)v6);
        v8 = *(v7 - 2);
        *((_QWORD *)v6 + 2) = *((_QWORD *)v7 - 2);
        *v6 = v8;
        *((_BYTE *)v7 - 9) = 0;
        *((_BYTE *)v7 - 32) = 0;
        sub_20BFD3EBC((int *)v6 + 6, (int *)v7 - 2);
        sub_20BFD3F10((int *)v6 + 7, (int *)v7 - 1);
        v6[2] = *v7;
        v6 += 3;
      }
      v9 = v7 + 1;
      v7 += 3;
    }
    while (v9 != a2);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations(__int128 *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(a2 + 24))
    return 0;
  v6 = sub_20C1232AC(a2, (__int128 *)((char *)a1 + 8), a3);
  v7 = v6 | sub_20C1232AC(a2, a1 + 2, a3);
  v8 = sub_20C1232AC(a2, (__int128 *)((char *)a1 + 56), a3);
  v9 = v7 | v8 | sub_20C1232AC(a2, a1 + 5, a3);
  v10 = sub_20C1232AC(a2, (__int128 *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_20C1232AC(a2, a1 + 8, a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE16ModifyOperationsERKNSt3__18functionIFNS3_8optionalIS1_EERKS1_EEEb(a1, a2, a3);
}

uint64_t sub_20C1232AC(uint64_t a1, __int128 *a2, int a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v22;
  uint64_t v23;
  int v24;
  int v25;
  __int128 v26;
  unsigned __int8 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;

  v30 = 0uLL;
  v31 = 0;
  v28 = 0u;
  v29 = 0u;
  v3 = *(unsigned __int8 **)a2;
  v4 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (*(unsigned __int8 **)a2 == v4)
    goto LABEL_23;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      sub_20BE9E974();
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)v9 + 48))(&v22, v9, v3);
    v10 = v27;
    if (a3 && v27)
    {
      sub_20C12FFC4((uint64_t)&v28, &v22);
      if ((v11 & 1) == 0)
        sub_20C130D9C((uint64_t)&v22);
      v10 = v27;
    }
    if (v10)
    {
      v12 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)&v22, v3);
      v13 = *((_QWORD *)&v30 + 1);
      if (v12)
      {
        if (*((_QWORD *)&v30 + 1) >= v31)
        {
          v14 = sub_20C12FBAC((uint64_t *)&v30, (uint64_t)v3);
        }
        else
        {
          sub_20C02CCF8((int)&v31, *((__n128 **)&v30 + 1), (uint64_t)v3);
          v14 = v13 + 48;
        }
      }
      else
      {
        if (*((_QWORD *)&v30 + 1) >= v31)
        {
          v14 = sub_20C130DE8((uint64_t *)&v30, &v22);
        }
        else
        {
          v15 = v22;
          *(_QWORD *)(*((_QWORD *)&v30 + 1) + 16) = v23;
          *(_OWORD *)v13 = v15;
          v23 = 0;
          v22 = 0uLL;
          sub_20BFD38A4((_DWORD *)(v13 + 24), &v24);
          sub_20BFD38DC((_DWORD *)(v13 + 28), &v25);
          *(_OWORD *)(v13 + 32) = v26;
          v14 = v13 + 48;
        }
        v8 = 1;
      }
      *((_QWORD *)&v30 + 1) = v14;
    }
    else
    {
      v8 = 1;
    }
    sub_20C124BA4((uint64_t)&v22);
    v3 += 48;
  }
  while (v3 != v4);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    v18 = 0;
  }
  else
  {
    v16 = *a2;
    *a2 = v30;
    v30 = v16;
    v17 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v31;
    v31 = v17;
    v18 = 1;
  }
  v19 = *((_QWORD *)&v29 + 1);
  *((_QWORD *)&v29 + 1) = 0;
  if (v19)
  {
    v20 = (void *)sub_20C130250(v19);
    operator delete(v20);
  }
  *(_QWORD *)&v22 = &v28;
  sub_20C021818((void ***)&v22);
  *(_QWORD *)&v22 = &v30;
  sub_20C021818((void ***)&v22);
  return v18;
}

void sub_20C1234A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20C124BA4((uint64_t)&a10);
  sub_20C1301E4((uint64_t)&a17);
  a10 = (void **)&a21;
  sub_20C021818(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ReplaceOperations(unsigned __int8 *a1, int a2, unint64_t a3, uint64_t a4, std::string **a5)
{
  BOOL v10;
  uint64_t *Items;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  __n128 *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  __n128 v22;
  uint64_t v23;
  char v24;

  if (*a1)
    v10 = a2 == 0;
  else
    v10 = a2 != 0;
  if (v10 || !a4 && *a5 != a5[1])
  {
    Items = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems((uint64_t)a1, a2);
    v23 = 0;
    v22 = 0uLL;
    sub_20C02CB7C(&v22, *Items, Items[1], 0xAAAAAAAAAAAAAAABLL * ((Items[1] - *Items) >> 4));
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.n128_u64[1] - v22.n128_u64[0]) >> 4);
    if (v12 >= a3)
    {
      if (a4 + a3 <= v12)
      {
        v14 = a5[1];
        v15 = (std::string *)(v22.n128_u64[0] + 48 * a3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)*a5) >> 4) == a4)
        {
          sub_20C0E3958((int)&v24, *a5, v14, v15);
        }
        else
        {
          sub_20C123058((uint64_t)&v22, v22.n128_u64[0] + 48 * a3, (__int128 *)&v15[2 * a4]);
          sub_20C12FD2C((uint64_t *)&v22, (std::string *)(v22.n128_u64[0] + 48 * a3), *a5, (uint64_t)a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 4));
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetItems(a1, (std::string **)&v22, a2);
        v13 = 1;
        goto LABEL_18;
      }
      v17 = (__n128 *)"sdf/listOp.cpp";
      v18 = "ReplaceOperations";
      v19 = 698;
      v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ReplaceOpera"
            "tions(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid end index %zd (size is %zd)", a4 + a3 - 1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.n128_u64[1] - v22.n128_u64[0]) >> 4));
    }
    else
    {
      v17 = (__n128 *)"sdf/listOp.cpp";
      v18 = "ReplaceOperations";
      v19 = 693;
      v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ReplaceOpera"
            "tions(const SdfListOpType, size_t, size_t, const ItemVector &) [T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid start index %zd (size is %zd)", a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.n128_u64[1] - v22.n128_u64[0]) >> 4));
    }
    v13 = 0;
LABEL_18:
    v17 = &v22;
    sub_20C021818((void ***)&v17);
    return v13;
  }
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE17ReplaceOperationsENS_13SdfListOpTypeEmmRKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEE(a1, a2, a3, a4, a5);
}

void sub_20C1236EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_20C021818(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ComposeOperations(unsigned __int8 *a1, uint64_t a2, int a3)
{
  uint64_t *Items;
  __n128 **i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  unint64_t v16;
  __n128 **v17;
  uint64_t *v18;
  _QWORD *v19[2];
  __n128 *v20;
  __n128 **v21;
  __n128 *v22;
  __n128 v23;
  uint64_t v24;
  __n128 *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    Items = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems((uint64_t)a1, a3);
    sub_20C130F14(&v20, *Items, Items[1]);
    v19[0] = 0;
    v19[1] = 0;
    v18 = (uint64_t *)v19;
    for (i = v21; i != &v20; i = (__n128 **)i[1])
    {
      v23.n128_u64[0] = (unint64_t)(i + 2);
      sub_20C12F088(&v18, (const void **)i + 2, (uint64_t)&unk_20CAC184C, (__int128 **)&v23)[10] = (uint64_t)i;
    }
    switch(a3)
    {
      case 1:
        v25 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys(a2, 1, (uint64_t)&v23, &v20, &v18);
        goto LABEL_16;
      case 2:
        v25 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys(a2, 2, (uint64_t)&v23, &v20, &v18);
        goto LABEL_16;
      case 3:
        v25 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys(a2, 3, (uint64_t)&v23, &v20, &v18);
        v12 = v25;
        if (v25 == &v23)
        {
          v13 = 4;
          v12 = &v23;
        }
        else
        {
          if (!v25)
            goto LABEL_15;
          v13 = 5;
        }
        (*(void (**)(__n128 *, uint64_t, uint64_t))(v12->n128_u64[0] + 8 * v13))(v12, v10, v11);
LABEL_15:
        v25 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_ReorderKeys(a2, 3, (uint64_t)&v23, (uint64_t *)&v20, (uint64_t)&v18);
LABEL_16:
        v14 = v25;
        if (v25 == &v23)
        {
          v15 = 4;
          v14 = &v23;
        }
        else
        {
          if (!v25)
            goto LABEL_21;
          v15 = 5;
        }
        (*(void (**)(__n128 *, uint64_t, uint64_t))(v14->n128_u64[0] + 8 * v15))(v14, v8, v9);
LABEL_21:
        v24 = 0;
        v23 = 0uLL;
        if (v21 == &v20)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = v21;
          do
          {
            ++v16;
            v17 = (__n128 **)v17[1];
          }
          while (v17 != &v20);
        }
        sub_20C131014(&v23, (uint64_t)v21, (uint64_t)&v20, v16);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetItems(a1, (std::string **)&v23, a3);
        v22 = &v23;
        sub_20C021818((void ***)&v22);
        sub_20C12EE94((uint64_t)&v18, v19[0]);
        sub_20C124AEC((uint64_t *)&v20);
        break;
      case 4:
        v25 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PrependKeys(a2, 4, (uint64_t)&v23, (uint64_t)&v20, &v18);
        goto LABEL_16;
      case 5:
        v25 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AppendKeys(a2, 5, (uint64_t)&v23, &v20, &v18);
        goto LABEL_16;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems(a1, (std::string **)(a2 + 8));
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEE17ComposeOperationsERKS2_NS_13SdfListOpTypeE(a1, a2, a3);
}

void sub_20C1239F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20C12EE94((uint64_t)&a9, a10);
  sub_20C124AEC(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  if (*a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  v5 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  v6 = (unsigned __int8 *)a2[1];
  if (v5 - v4 != a2[2] - (_QWORD)v6)
    return 0;
  while (v4 != v5)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v4, v6))
      return 0;
    v4 += 48;
    v6 += 48;
  }
  v7 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  v8 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  v9 = (unsigned __int8 *)a2[4];
  if (v8 - v7 != a2[5] - (_QWORD)v9)
    return 0;
  while (v7 != v8)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, v9))
      return 0;
    v7 += 48;
    v9 += 48;
  }
  v10 = (unsigned __int8 *)*((_QWORD *)a1 + 7);
  v11 = (unsigned __int8 *)*((_QWORD *)a1 + 8);
  v12 = (unsigned __int8 *)a2[7];
  if (v11 - v10 != a2[8] - (_QWORD)v12)
    return 0;
  while (v10 != v11)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v10, v12))
      return 0;
    v10 += 48;
    v12 += 48;
  }
  v13 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
  v14 = (unsigned __int8 *)*((_QWORD *)a1 + 11);
  v15 = (unsigned __int8 *)a2[10];
  if (v14 - v13 != a2[11] - (_QWORD)v15)
    return 0;
  while (v13 != v14)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v13, v15))
      return 0;
    v13 += 48;
    v15 += 48;
  }
  v16 = (unsigned __int8 *)*((_QWORD *)a1 + 13);
  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 14);
  v18 = (unsigned __int8 *)a2[13];
  if (v17 - v16 != a2[14] - (_QWORD)v18)
    return 0;
  while (v16 != v17)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v16, v18))
      return 0;
    v16 += 48;
    v18 += 48;
  }
  return sub_20C123C0C((unsigned __int8 **)a1 + 16, (uint64_t)(a2 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEEeqERKS2_(a1, a2);
}

BOOL sub_20C123C0C(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v2, v4);
    if (!result)
      break;
    v2 += 48;
    v4 += 48;
  }
  while (v2 != v3);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator!=(unsigned __int8 *a1, _QWORD *a2)
{
  return !pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==(a1, a2);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root;
  const std::type_info *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[3];

  Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CD0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    v17 = 809;
    v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfPayload]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    v9 = v20[0];
  }
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = sub_20BDDC1C8(a1, v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"(", 1);
  v15 = 1;
  if (*(_BYTE *)a2)
  {
    sub_20BDDC0E4(__p, "Explicit");
    sub_20C131300(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_20BDDC0E4(__p, "Deleted");
    sub_20C131300(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Added");
    sub_20C131300(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Prepended");
    sub_20C131300(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Appended");
    sub_20C131300(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, "Ordered");
    sub_20C131300(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_20BDE5038((void ***)__p);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__lsINS_10SdfPayloadEEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES7_RKNS_9SdfListOpIT_EE(a1, a2);
}

void sub_20C123EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfApplyListOrdering<std::string>(uint64_t *a1, _QWORD *a2)
{
  void ***v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];
  void **v9[3];
  void ***v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*a2 != a2[1] && *a1 != a1[1])
  {
    LOBYTE(v5) = 0;
    memset(v6, 0, sizeof(v6));
    memset(v7, 0, sizeof(v7));
    memset(v8, 0, sizeof(v8));
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems(&v5, (uint64_t)a2);
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations((uint64_t)&v5, a1, (uint64_t)v9);
    v3 = v10;
    if (v10 == v9)
    {
      v4 = 4;
      v3 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_8:
        v9[0] = (void **)&v8[1] + 1;
        sub_20BDE5038(v9);
        v9[0] = (void **)v8;
        sub_20BDE5038(v9);
        v9[0] = (void **)&v7[1] + 1;
        sub_20BDE5038(v9);
        v9[0] = (void **)v7;
        sub_20BDE5038(v9);
        v9[0] = (void **)&v6[1] + 1;
        sub_20BDE5038(v9);
        v9[0] = (void **)v6;
        sub_20BDE5038(v9);
        return;
      }
      v4 = 5;
    }
    ((void (*)(void))(*v3)[v4])();
    goto LABEL_8;
  }
}

void sub_20C12409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 48);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 72);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_20C020EAC(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfApplyListOrdering<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t a2)
{
  void ***v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];
  void **v9[3];
  void ***v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) && *(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    LOBYTE(v5) = 0;
    memset(v6, 0, sizeof(v6));
    memset(v7, 0, sizeof(v7));
    memset(v8, 0, sizeof(v8));
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems((unsigned __int8 *)&v5, (uint64_t **)a2);
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(&v5, (uint64_t **)a1, (uint64_t)v9);
    v3 = v10;
    if (v10 == v9)
    {
      v4 = 4;
      v3 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_8:
        v9[0] = (void **)&v8[1] + 1;
        sub_20BEEB2B8(v9);
        v9[0] = (void **)v8;
        sub_20BEEB2B8(v9);
        v9[0] = (void **)&v7[1] + 1;
        sub_20BEEB2B8(v9);
        v9[0] = (void **)v7;
        sub_20BEEB2B8(v9);
        v9[0] = (void **)&v6[1] + 1;
        sub_20BEEB2B8(v9);
        v9[0] = (void **)v6;
        sub_20BEEB2B8(v9);
        return;
      }
      v4 = 5;
    }
    ((void (*)(void))(*v3)[v4])();
    goto LABEL_8;
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__20SdfApplyListOrderingINS_7TfTokenEEEvPNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKS7_(a1, a2);
}

void sub_20C124234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 48);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 72);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_20C03507C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12427C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *__p[2];
  char v22;

  v0 = sub_20C124BF0();
  v1 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_20BDDC0E4(__p, "SdfTokenListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v2 = sub_20C124CF0();
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_20BDDC0E4(__p, "SdfPathListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v4 = sub_20C124DF0();
  v5 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v4);
  sub_20BDDC0E4(__p, "SdfStringListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v4, v5, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v6 = sub_20C124EF0();
  v7 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v6);
  sub_20BDDC0E4(__p, "SdfReferenceListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v6, v7, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v8 = sub_20C124FF0();
  v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v8);
  sub_20BDDC0E4(__p, "SdfPayloadListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v8, v9, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = sub_20C1250F0();
  v11 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v10);
  sub_20BDDC0E4(__p, "SdfIntListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v10, v11, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v12 = sub_20C1251F0();
  v13 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v12);
  sub_20BDDC0E4(__p, "SdfUIntListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v12, v13, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v14 = sub_20C1252F0();
  v15 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  sub_20BDDC0E4(__p, "SdfInt64ListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v14, v15, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v16 = sub_20C1253F0();
  v17 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v16);
  sub_20BDDC0E4(__p, "SdfUInt64ListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v16, v17, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v18 = sub_20C1254F0();
  v19 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v18);
  sub_20BDDC0E4(__p, "SdfUnregisteredValueListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v18, v19, (char *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  return sub_20C1255F0();
}

void sub_20C124520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C124560()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfListOpTypeExplicit");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C528FE0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfListOpTypeAdded");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C528FE0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfListOpTypePrepended");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C528FE0, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfListOpTypeAppended");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C528FE0, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfListOpTypeDeleted");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C528FE0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfListOpTypeOrdered");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C528FE0, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C124760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C1247A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 1;
  return result;
}

_QWORD *sub_20C124874(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v5 = (_QWORD *)result[1];
        v4 = result[2];
        if ((v4 & 7) != 0)
        {
          v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        operator delete(result);
        result = v5;
      }
      while (v5 != v1);
    }
  }
  return result;
}

void sub_20C1248F0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_20BF4C2D8((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_20C124960(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (_QWORD *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (_QWORD *)v3[1];
        sub_20BFD7654((_DWORD *)v3 + 4);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_20C1249D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_20C124A40((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_20C124A40(uint64_t a1)
{
  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C124A94(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20C124AEC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_20C124B5C((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_20C124B5C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C124BA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_20C124BF0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D40, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D40, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C124CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C124CF0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5249B8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5249B8, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C124DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C124DF0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D30, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D30, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C124EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C124EF0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524CE0, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C124FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C124FF0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CD0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524CD0, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1250AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1250F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524CF0, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1251AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1251F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D10, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D10, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1252AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1252F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D00, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D00, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1253AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1253F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D20, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D20, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1254AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1254F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D60, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D60, (char *)0x98, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1255AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1255F0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C528FE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C528FE0, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1256AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1256F0(uint64_t a1, uint64_t *a2, int *a3, int *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v11 = *a3;
    v10 = a3 + 1;
    *((_DWORD *)v8 + 4) = v11;
    v12 = 1;
    if (v10 != a4)
    {
      v13 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        v14 = *v10++;
        *v8 = v13;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = v14;
        v13[1] = v8;
        ++v12;
        v13 = v8;
      }
      while (v10 != a4);
    }
    v15 = *a2;
    *(_QWORD *)(v15 + 8) = v9;
    *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_20C1257B8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20C1257D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t **sub_20C1257EC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_20C1258AC(uint64_t a1, char *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v29;
  _DWORD *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(char **)(v9 - 8);
    if (a5 <= (v11 - (uint64_t)v12) >> 2)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)v20[1];
        --v19;
      }
      while (v19 > 1);
      v21 = (v12 - __src) >> 2;
      if (v21 >= a5)
      {
        v23 = *(char **)(v9 - 8);
        v21 = a5;
      }
      else
      {
        if (v12 - __src <= -4)
        {
          v27 = (v12 - __src) >> 2;
          v20 = a3;
          do
            v20 = (_QWORD *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if (v12 == __src)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)v20[1];
            --v22;
          }
          while (v22 > 1);
        }
        v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          v29 = v20;
          v30 = *(_DWORD **)(v9 - 8);
          do
          {
            *v30++ = *((_DWORD *)v29 + 4);
            v29 = (_QWORD *)v29[1];
            v23 += 4;
          }
          while (v29 != a4);
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        v31 = &__src[4 * a5];
        v32 = &v23[-4 * a5];
        v33 = v23;
        if (v32 < v12)
        {
          v33 = v23;
          do
          {
            v34 = *(_DWORD *)v32;
            v32 += 4;
            *(_DWORD *)v33 = v34;
            v33 += 4;
          }
          while (v32 < v12);
        }
        *(_QWORD *)(a1 + 8) = v33;
        if (v23 != v31)
          memmove(&v23[-4 * ((v23 - v31) >> 2)], __src, v23 - v31);
        if (v20 != v7)
        {
          v35 = v5;
          do
          {
            *(_DWORD *)v35 = *((_DWORD *)v7 + 4);
            v35 += 4;
            v7 = (_QWORD *)v7[1];
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)&v12[-*(_QWORD *)a1] >> 2);
      if (v14 >> 62)
        sub_20BDDF694();
      v15 = (__src - v13) >> 2;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 1 > v14)
        v14 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v41 = v9;
      if (v17)
        v18 = (char *)sub_20BDE1330(v9, v17);
      else
        v18 = 0;
      v24 = &v18[4 * v15];
      __p = v18;
      v38 = v24;
      v40 = &v18[4 * v17];
      v25 = 4 * a5;
      v26 = &v24[4 * a5];
      do
      {
        *(_DWORD *)v24 = *((_DWORD *)v7 + 4);
        v24 += 4;
        v7 = (_QWORD *)v7[1];
        v25 -= 4;
      }
      while (v25);
      v39 = v26;
      v5 = sub_20BE8CE1C((void **)a1, (uint64_t)&__p, v5);
      if (v39 != v38)
        v39 += (v38 - v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_20C125AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C125B2C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      sub_20BDDF694();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_20BDE1330(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = sub_20BE8CE1C((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_20C125D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C125D38(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _DWORD *result;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  int v19;
  __int128 v20;

  v4 = a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 2;
    LODWORD(v20) = *a2;
    *((_QWORD *)&v20 + 1) = v5;
    v6 = sub_20BF2E0C8(v4, (int *)&v20, &v20);
    if (!v7)
      return (_DWORD *)(*a1 + 4 * v6[3]);
    result = (_DWORD *)a1[1];
  }
  else
  {
    result = (_DWORD *)sub_20C125EE4(a1, a2);
    if ((_DWORD *)a1[1] != result)
      return result;
  }
  v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    v11 = (_DWORD *)*a1;
    v12 = ((uint64_t)result - *a1) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_20BDDF694();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_20BDE1330((uint64_t)(a1 + 2), v15);
      v11 = (_DWORD *)*a1;
      result = (_DWORD *)a1[1];
    }
    else
    {
      v16 = 0;
    }
    v17 = (int *)&v16[4 * v12];
    v18 = &v16[4 * v15];
    *v17 = *a2;
    v10 = v17 + 1;
    while (result != v11)
    {
      v19 = *--result;
      *--v17 = v19;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *result = *a2;
    v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_20C125F58(a1);
  return (_DWORD *)(a1[1] - 4);
}

uint64_t sub_20C125EA8(uint64_t a1)
{
  void *v2;

  sub_20BF2B090((uint64_t *)(a1 + 24), 0);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20C125EE4(_QWORD *a1, int *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t result;
  _DWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20BF2E2F8(v3, a2);
    if (v4)
      return *a1 + 4 * v4[3];
    else
      return a1[1];
  }
  else
  {
    v6 = (_DWORD *)*a1;
    result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *a2)
      {
        if (++v6 == (_DWORD *)result)
          return result;
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_20C125F58(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x1FD)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BF2B090(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (_DWORD *)(v4 + v5);
          sub_20C12603C(v7, (int *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[3] = v6++;
          v4 = *a1;
          v5 += 4;
        }
        while (v6 < (a1[1] - *a1) >> 2);
      }
    }
  }
}

void sub_20C126024(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3FA4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12603C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = **a4;
  v12[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20C126260(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C126274(_QWORD *a1, int *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 1;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *v5++;
      v8[4] = v9;
      *(_QWORD *)v8 = v7;
      *((_QWORD *)v8 + 1) = a1;
      *((_QWORD *)v7 + 1) = v8;
      *a1 = v8;
      a1[2] = v6++;
      v7 = v8;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C1262F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEB422C(v1);
  _Unwind_Resume(a1);
}

char *sub_20C126308(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_DWORD *)(a2 + 16);
      a2 = *(_QWORD *)(a2 + 8);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C126360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20C12637C(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *sub_20C126434(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  __int128 v21;
  __int128 v22;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v21 = *a3;
    *((_QWORD *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_20BFEE5D0((uint64_t *)&v21, v15, v16);
      v19 = (_QWORD *)std::ostream::operator<<();
      v22 = v21;
      sub_20BFEE64C(&v22);
      if ((_QWORD)v22 == *((_QWORD *)&v22 + 1))
        v20 = "";
      else
        v20 = ", ";
      sub_20BDDC1C8(v19, (uint64_t)v20, 2 * ((_QWORD)v22 != *((_QWORD *)&v22 + 1)));
      sub_20BFEE64C(&v21);
      v18 = *((_QWORD *)&v21 + 1);
      v17 = v21;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t **sub_20C126558(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_DWORD *sub_20C126618(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _DWORD *result;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  char *v18;
  unsigned int v19;
  __int128 v20;

  v4 = a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 2;
    LODWORD(v20) = *a2;
    *((_QWORD *)&v20 + 1) = v5;
    v6 = sub_20C1268E0(v4, (unsigned int *)&v20, &v20);
    if (!v7)
      return (_DWORD *)(*a1 + 4 * v6[3]);
    result = (_DWORD *)a1[1];
  }
  else
  {
    result = (_DWORD *)sub_20C126788(a1, a2);
    if ((_DWORD *)a1[1] != result)
      return result;
  }
  v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    v11 = (_DWORD *)*a1;
    v12 = ((uint64_t)result - *a1) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_20BDDF694();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_20BDE1330((uint64_t)(a1 + 2), v15);
      v11 = (_DWORD *)*a1;
      result = (_DWORD *)a1[1];
    }
    else
    {
      v16 = 0;
    }
    v17 = (unsigned int *)&v16[4 * v12];
    v18 = &v16[4 * v15];
    *v17 = *a2;
    v10 = v17 + 1;
    while (result != v11)
    {
      v19 = *--result;
      *--v17 = v19;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *result = *a2;
    v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_20C1267FC(a1);
  return (_DWORD *)(a1[1] - 4);
}

uint64_t sub_20C126788(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t result;
  _DWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20C126B10(v3, a2);
    if (v4)
      return *a1 + 4 * v4[3];
    else
      return a1[1];
  }
  else
  {
    v6 = (_DWORD *)*a1;
    result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *a2)
      {
        if (++v6 == (_DWORD *)result)
          return result;
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_20C1267FC(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x1FD)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BF2B090(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (_DWORD *)(v4 + v5);
          sub_20C126BDC(v7, (unsigned int *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[3] = v6++;
          v4 = *a1;
          v5 += 4;
        }
        while (v6 < (a1[1] - *a1) >> 2);
      }
    }
  }
}

void sub_20C1268C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3FA4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1268E0(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_20C126AFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C126B10(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t *)*result)
  {
    v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v2)
          v9 %= *(_QWORD *)&v2;
      }
      else
      {
        v9 &= *(_QWORD *)&v2 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_20C126BDC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = **a4;
  v12[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20C126E00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C126E14(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_DWORD *)(a2 + 16);
      a2 = *(_QWORD *)(a2 + 8);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C126E6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C126E88(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  __int128 v21;
  __int128 v22;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v21 = *a3;
    *((_QWORD *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_20BFEEDA8((uint64_t *)&v21, v15, v16);
      v19 = (_QWORD *)std::ostream::operator<<();
      v22 = v21;
      sub_20BFEEE24(&v22);
      if ((_QWORD)v22 == *((_QWORD *)&v22 + 1))
        v20 = "";
      else
        v20 = ", ";
      sub_20BDDC1C8(v19, (uint64_t)v20, 2 * ((_QWORD)v22 != *((_QWORD *)&v22 + 1)));
      sub_20BFEEE24(&v21);
      v18 = *((_QWORD *)&v21 + 1);
      v17 = v21;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t *sub_20C126FAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v11 = *a3;
    v10 = a3 + 1;
    v8[2] = v11;
    v12 = 1;
    if (v10 != a4)
    {
      v13 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        v14 = *v10++;
        *v8 = v13;
        v8[1] = 0;
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        v13 = v8;
      }
      while (v10 != a4);
    }
    v15 = *a2;
    *(_QWORD *)(v15 + 8) = v9;
    *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_20C127074(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20C127094(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1270A8(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *sub_20C127164(uint64_t a1, char *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(char **)(v9 - 8);
    if (a5 <= (v11 - (uint64_t)v12) >> 3)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)v20[1];
        --v19;
      }
      while (v19 > 1);
      v21 = (v12 - __src) >> 3;
      if (v21 >= a5)
      {
        v23 = *(char **)(v9 - 8);
        v21 = a5;
      }
      else
      {
        if (v12 - __src <= -8)
        {
          v27 = (v12 - __src) >> 3;
          v20 = a3;
          do
            v20 = (_QWORD *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if (v12 == __src)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)v20[1];
            --v22;
          }
          while (v22 > 1);
        }
        v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          v29 = v20;
          v30 = *(_QWORD **)(v9 - 8);
          do
          {
            *v30++ = v29[2];
            v29 = (_QWORD *)v29[1];
            v23 += 8;
          }
          while (v29 != a4);
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        v31 = &__src[8 * a5];
        v32 = &v23[-8 * a5];
        v33 = v23;
        if (v32 < v12)
        {
          v33 = v23;
          do
          {
            v34 = *(_QWORD *)v32;
            v32 += 8;
            *(_QWORD *)v33 = v34;
            v33 += 8;
          }
          while (v32 < v12);
        }
        *(_QWORD *)(a1 + 8) = v33;
        if (v23 != v31)
          memmove(&v23[-8 * ((v23 - v31) >> 3)], __src, v23 - v31);
        if (v20 != v7)
        {
          v35 = v5;
          do
          {
            *(_QWORD *)v35 = v7[2];
            v35 += 8;
            v7 = (_QWORD *)v7[1];
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
      if (v14 >> 61)
        sub_20BDDF694();
      v15 = (__src - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v41 = v9;
      if (v17)
        v18 = (char *)sub_20BDDF6A8(v9, v17);
      else
        v18 = 0;
      v24 = &v18[8 * v15];
      __p = v18;
      v38 = v24;
      v40 = &v18[8 * v17];
      v25 = 8 * a5;
      v26 = &v24[8 * a5];
      do
      {
        *(_QWORD *)v24 = v7[2];
        v24 += 8;
        v7 = (_QWORD *)v7[1];
        v25 -= 8;
      }
      while (v25);
      v39 = v26;
      v5 = sub_20BEF2F0C((void **)a1, (uint64_t)&__p, v5);
      if (v39 != v38)
        v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_20C1273AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C1273E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *result;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;

  v4 = a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 3;
    *(_QWORD *)&v20 = *a2;
    *((_QWORD *)&v20 + 1) = v5;
    v6 = sub_20C1276A8(v4, &v20, &v20);
    if (!v7)
      return (_QWORD *)(*a1 + 8 * v6[3]);
    result = (_QWORD *)a1[1];
  }
  else
  {
    result = (_QWORD *)sub_20C127550(a1, a2);
    if ((_QWORD *)a1[1] != result)
      return result;
  }
  v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    v11 = (_QWORD *)*a1;
    v12 = ((uint64_t)result - *a1) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20BDDF694();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 2), v15);
      v11 = (_QWORD *)*a1;
      result = (_QWORD *)a1[1];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = *a2;
    v10 = v17 + 8;
    while (result != v11)
    {
      v19 = *--result;
      *((_QWORD *)v17 - 1) = v19;
      v17 -= 8;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *result = *a2;
    v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_20C1275C4(a1);
  return (_QWORD *)(a1[1] - 8);
}

uint64_t sub_20C127550(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20BEDE9B4(v3, a2);
    if (v4)
      return *a1 + 8 * v4[3];
    else
      return a1[1];
  }
  else
  {
    v6 = (_QWORD *)*a1;
    result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *a2)
      {
        if (++v6 == (_QWORD *)result)
          return result;
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_20C1275C4(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BF2B090(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (_QWORD *)(v4 + v5);
          sub_20C1278D8(v7, (_QWORD *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[3] = v6++;
          v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_20C127690(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3FA4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1276A8(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C1278C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1278D8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C127AF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C127B0C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 1;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *v5++;
      v8[1] = a1;
      v8[2] = v9;
      *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = v6++;
      v7 = v8;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C127B8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEB422C(v1);
  _Unwind_Resume(a1);
}

char *sub_20C127BA0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_QWORD *)(a2 + 16);
      a2 = *(_QWORD *)(a2 + 8);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C127BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C127C14(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *sub_20C127CCC(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  __int128 v21;
  __int128 v22;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v21 = *a3;
    *((_QWORD *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_20BFEE958((uint64_t *)&v21, v15, v16);
      v19 = (_QWORD *)std::ostream::operator<<();
      v22 = v21;
      sub_20BFEE9D4(&v22);
      if ((_QWORD)v22 == *((_QWORD *)&v22 + 1))
        v20 = "";
      else
        v20 = ", ";
      sub_20BDDC1C8(v19, (uint64_t)v20, 2 * ((_QWORD)v22 != *((_QWORD *)&v22 + 1)));
      sub_20BFEE9D4(&v21);
      v18 = *((_QWORD *)&v21 + 1);
      v17 = v21;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t *sub_20C127DF0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *sub_20C127EAC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *result;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;

  v4 = a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 3;
    *(_QWORD *)&v20 = *a2;
    *((_QWORD *)&v20 + 1) = v5;
    v6 = sub_20C1276A8(v4, &v20, &v20);
    if (!v7)
      return (_QWORD *)(*a1 + 8 * v6[3]);
    result = (_QWORD *)a1[1];
  }
  else
  {
    result = (_QWORD *)sub_20C127550(a1, a2);
    if ((_QWORD *)a1[1] != result)
      return result;
  }
  v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    v11 = (_QWORD *)*a1;
    v12 = ((uint64_t)result - *a1) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20BDDF694();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 2), v15);
      v11 = (_QWORD *)*a1;
      result = (_QWORD *)a1[1];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = *a2;
    v10 = v17 + 8;
    while (result != v11)
    {
      v19 = *--result;
      *((_QWORD *)v17 - 1) = v19;
      v17 -= 8;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *result = *a2;
    v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_20C128018(a1);
  return (_QWORD *)(a1[1] - 8);
}

void sub_20C128018(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BF2B090(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (_QWORD *)(v4 + v5);
          sub_20C1278D8(v7, (_QWORD *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[3] = v6++;
          v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_20C1280E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3FA4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

char *sub_20C1280FC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_QWORD *)(a2 + 16);
      a2 = *(_QWORD *)(a2 + 8);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C128154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C128170(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  __int128 v21;
  __int128 v22;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v21 = *a3;
    *((_QWORD *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_20BFEF130((uint64_t *)&v21, v15, v16);
      v19 = (_QWORD *)std::ostream::operator<<();
      v22 = v21;
      sub_20BFEF1AC(&v22);
      if ((_QWORD)v22 == *((_QWORD *)&v22 + 1))
        v20 = "";
      else
        v20 = ", ";
      sub_20BDDC1C8(v19, (uint64_t)v20, 2 * ((_QWORD)v22 != *((_QWORD *)&v22 + 1)));
      sub_20BFEF1AC(&v21);
      v18 = *((_QWORD *)&v21 + 1);
      v17 = v21;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t *sub_20C128294(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_20C128398(a1, 0, 0, a3);
    v9 = v8;
    v10 = a3 + 24;
    v11 = 1;
    if (a3 + 24 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_20C128398(a1, v12, 0, v10);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 += 24;
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20C128360(void *a1)
{
  int v1;
  void **v2;
  void **v3;

  __cxa_begin_catch(a1);
  do
  {
    v3 = v2;
    v2 = (void **)*v2;
    sub_20BEDD988(v1, v3);
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20C128380(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C128398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _BYTE *v8;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20BDDBFAC(v8, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  return v7;
}

void sub_20C1283FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_20C128410(uint64_t *a1, __int128 *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v27;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = (uint64_t)a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = a5 + 1;
      v21 = a3;
      do
      {
        v21 = (_QWORD *)v21[1];
        --v20;
      }
      while (v20 > 1);
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
      v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) <= -24)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
          v21 = a3;
          do
            v21 = (_QWORD *)*v21;
          while (!__CFADD__(v25++, 1));
        }
        else if ((__int128 *)v12 == a2)
        {
          v21 = a3;
        }
        else
        {
          v24 = v22 + 1;
          v21 = a3;
          do
          {
            v21 = (_QWORD *)v21[1];
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = (uint64_t)sub_20C1286D8(v9, (uint64_t)v21, a4, *(char **)(v9 - 8));
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v5) >> 3);
      }
      if (v23 >= 1)
      {
        sub_20BE752D4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 24 * a5);
        if (v21 != (_QWORD *)v7)
        {
          v27 = (std::string *)v5;
          do
          {
            std::string::operator=(v27, (const std::string *)(v7 + 16));
            v7 = *(_QWORD *)(v7 + 8);
            ++v27;
          }
          while ((_QWORD *)v7 != v21);
        }
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v33 = v9;
      if (v18)
        v19 = (char *)sub_20BDE4FF4(v9, v18);
      else
        v19 = 0;
      v29 = v19;
      v30 = &v19[24 * v15];
      v31 = v30;
      v32 = &v19[24 * v18];
      sub_20C128644(&v29, v7, a5);
      v5 = (__int128 *)sub_20BE753F0((uint64_t)a1, &v29, v5);
      sub_20BDF3648((uint64_t)&v29);
    }
  }
  return v5;
}

void sub_20C128624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C128644(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 24 * a3;
    v7 = 24 * a3;
    do
    {
      if (*(char *)(a2 + 39) < 0)
      {
        result = sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
      }
      else
      {
        v8 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v4 = v8;
      }
      v4 += 24;
      a2 = *(_QWORD *)(a2 + 8);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_20C1286D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

char *sub_20C1286D8(uint64_t a1, uint64_t a2, uint64_t a3, char *__dst)
{
  char *v4;
  uint64_t v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*(char *)(v6 + 39) < 0)
      {
        sub_20BDDBFAC(v4, *(void **)(v6 + 16), *(_QWORD *)(v6 + 24));
        v4 = v12;
      }
      else
      {
        v7 = *(_OWORD *)(v6 + 16);
        *((_QWORD *)v4 + 2) = *(_QWORD *)(v6 + 32);
        *(_OWORD *)v4 = v7;
      }
      v6 = *(_QWORD *)(v6 + 8);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20BE75618((uint64_t)v9);
  return v4;
}

void sub_20C128784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE75618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C128798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v13[2];
  uint64_t v14;
  unint64_t v15;
  void *__p[2];
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(v13, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)a2;
      v14 = *(_QWORD *)(a2 + 16);
    }
    *(_OWORD *)__p = *(_OWORD *)v13;
    v7 = v14;
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    v15 = v5;
    v17 = v7;
    v18 = v5;
    v8 = sub_20BEF2938(v4, (unsigned __int8 *)__p, (uint64_t)__p);
    v10 = v9;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
    if (!v10)
      return *(_QWORD *)a1 + 24 * *((_QWORD *)v8 + 5);
    v6 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = sub_20C12896C((unsigned __int8 **)a1, (unsigned __int8 *)a2);
    if (*(_QWORD *)(a1 + 8) != v6)
      return v6;
  }
  if (v6 >= *(_QWORD *)(a1 + 16))
  {
    v11 = sub_20BE4EE50((uint64_t *)a1, (__int128 *)a2);
  }
  else
  {
    sub_20BE4EDF4((_QWORD *)a1, (__int128 *)a2);
    v11 = v6 + 24;
  }
  *(_QWORD *)(a1 + 8) = v11;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - *(_QWORD *)a1) >> 3) >= 0x80)
  {
    sub_20C1289F4((uint64_t *)a1);
    v11 = *(_QWORD *)(a1 + 8);
  }
  return v11 - 24;
}

void sub_20C128908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20C96B564((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12892C(uint64_t a1)
{
  void **v3;

  sub_20BEEC0B8((uint64_t *)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20BDE5038(&v3);
  return a1;
}

uint64_t sub_20C12896C(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v4 = a1[3];
  if (v4)
  {
    v5 = sub_20BEC301C(v4, a2);
    if (v5)
      return (uint64_t)&(*a1)[24 * *((_QWORD *)v5 + 5)];
    else
      return (uint64_t)a1[1];
  }
  else
  {
    v7 = *a1;
    v6 = a1[1];
    while (v7 != v6)
    {
      if ((sub_20BEB4EF8((uint64_t)a1, v7, a2) & 1) != 0)
        return (uint64_t)v7;
      v7 += 24;
    }
  }
  return (uint64_t)v6;
}

void sub_20C1289F4(uint64_t *a1)
{
  uint64_t *v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v1 = a1 + 3;
  if (!a1[3])
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
    sub_20BEEC0B8(v1, (uint64_t)v3);
    v4 = *a1;
    if (a1[1] != *a1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = a1[3];
        v8 = (__int128 *)(v4 + v5);
        *((_QWORD *)sub_20BEC286C(v7, (unsigned __int8 *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8) + 5) = v6++;
        v4 = *a1;
        v5 += 24;
      }
      while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
  }
}

void sub_20C128AC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3F28(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

std::string *sub_20C128AE0(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v3;
  const std::string *v4;
  std::string *v6;

  v3 = this;
  v4 = __str;
  if (__str != a2)
  {
    v6 = this;
    do
    {
      std::string::operator=(v6++, v4++);
      ++v3;
    }
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t *sub_20C128B44(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = sub_20BEDE334((uint64_t)a1, 0, 0, v5);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C128BC0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEDD928(v1);
  _Unwind_Resume(a1);
}

char *sub_20C128BD4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = sub_20C1286D8((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20C128C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C128C58(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  __int128 v25;
  __int128 v26;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v25 = *a3;
    *((_QWORD *)&v25 + 1) = v18;
    while (v17 != v18)
    {
      v19 = sub_20BF44378((uint64_t *)&v25, v15, v16);
      v20 = *(char *)(v19 + 23);
      if (v20 >= 0)
        v21 = v19;
      else
        v21 = *(_QWORD *)v19;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v19 + 23);
      else
        v22 = *(_QWORD *)(v19 + 8);
      v23 = sub_20BDDC1C8(v8, v21, v22);
      v26 = v25;
      sub_20BF4457C(&v26);
      if ((_QWORD)v26 == *((_QWORD *)&v26 + 1))
        v24 = "";
      else
        v24 = ", ";
      sub_20BDDC1C8(v23, (uint64_t)v24, 2 * ((_QWORD)v26 != *((_QWORD *)&v26 + 1)));
      sub_20BF4457C(&v25);
      v18 = *((_QWORD *)&v25 + 1);
      v17 = v25;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t *sub_20C128D90(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_20C128E84(a1, 0, 0, a3);
    v9 = v8;
    v10 = a3 + 1;
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_20C128E84(a1, v12, 0, v10);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        ++v10;
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20C128E5C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  sub_20C96B584(v1);
  __cxa_rethrow();
}

void sub_20C128E70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C128E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new(0x18uLL);
  *result = a2;
  result[1] = a3;
  v8 = *a4;
  result[2] = *a4;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      result[2] = v9;
  }
  return result;
}

uint64_t *sub_20C128EE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4] & 0xFFFFFFFFFFFFFFF8;
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_20C128FA8(a1, a4, (uint64_t)&v11);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

_QWORD *sub_20C128FA8@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *sub_20C129024(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)v20[1];
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
      v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) <= -8)
        {
          v29 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
          v20 = a3;
          do
            v20 = (_QWORD *)*v20;
          while (!__CFADD__(v29++, 1));
        }
        else if ((_QWORD *)v12 == a2)
        {
          v20 = a3;
        }
        else
        {
          v23 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)v20[1];
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = (uint64_t)sub_20C129250(v9, (uint64_t)v20, a4, *(_QWORD **)(v9 - 8));
        v22 = (uint64_t)(v12 - (_QWORD)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_20C0D8194((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
        if (v20 != v7)
        {
          v31 = v5;
          do
          {
            sub_20BF32220(v31, v7 + 2);
            v7 = (_QWORD *)v7[1];
            ++v31;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 3;
      v16 = v10 - v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v33[4] = v9;
      if (v17)
        v18 = (char *)sub_20BDDF6A8(v9, v17);
      else
        v18 = 0;
      v24 = &v18[8 * v15];
      v33[0] = v18;
      v33[1] = v24;
      v33[3] = &v18[8 * v17];
      v25 = &v24[8 * a5];
      do
      {
        v26 = v7[2];
        *(_QWORD *)v24 = v26;
        if ((v26 & 7) != 0)
        {
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 2, v27));
          if ((v28 & 1) == 0)
            *(_QWORD *)v24 &= 0xFFFFFFFFFFFFFFF8;
        }
        v24 += 8;
        v7 = (_QWORD *)v7[1];
      }
      while (v24 != v25);
      v33[2] = v25;
      v5 = (_QWORD *)sub_20C0D81DC(a1, v33, v5);
      sub_20BF1EE98((uint64_t)v33);
    }
  }
  return v5;
}

void sub_20C129230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C129250(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = a4;
  while (a2 != a3)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *result = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        *result &= 0xFFFFFFFFFFFFFFF8;
    }
    a2 = *(_QWORD *)(a2 + 8);
    ++result;
  }
  return result;
}

_QWORD *sub_20C1292A0(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD v28[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = v12 - (_QWORD)a2;
      if (a5 <= (uint64_t)(v12 - (_QWORD)a2) >> 3)
      {
        v20 = &a3[a5];
      }
      else
      {
        v20 = &a3[v19 >> 3];
        sub_20BFE5400((uint64_t)a1, v20, a4);
        if (v19 < 1)
          return v5;
      }
      sub_20C0D8194((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
      if (v20 != v7)
      {
        v21 = v5;
        do
          sub_20BF32220(v21++, v7++);
        while (v7 != v20);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 3;
      v16 = v10 - v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v28[4] = v9;
      if (v17)
        v18 = (char *)sub_20BDDF6A8(v9, v17);
      else
        v18 = 0;
      v22 = (uint64_t *)&v18[8 * v15];
      v28[0] = v18;
      v28[1] = v22;
      v28[3] = &v18[8 * v17];
      v23 = &v22[a5];
      do
      {
        v24 = *v7;
        *v22 = *v7;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
        ++v7;
      }
      while (v22 != v23);
      v28[2] = v23;
      v5 = (_QWORD *)sub_20C0D81DC(a1, v28, v5);
      sub_20BF1EE98((uint64_t)v28);
    }
  }
  return v5;
}

void sub_20C129454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EE98((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20C129468(char **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  char *result;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18[2];

  v4 = (uint64_t)a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 3;
    v6 = *a2;
    if ((*a2 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18[0] = v6;
    v18[1] = v5;
    v9 = sub_20BF2D7C8(v4, v18, v18);
    if ((v18[0] & 7) != 0)
    {
      v11 = (unsigned int *)(v18[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if (!v10)
      return &(*a1)[8 * v9[3]];
    result = a1[1];
  }
  else
  {
    result = (char *)sub_20C129610(a1, a2);
    if (a1[1] != result)
      return result;
  }
  if (result >= a1[2])
  {
    v17 = sub_20BFCA068(a1, a2);
  }
  else
  {
    v14 = *a2;
    *(_QWORD *)result = *a2;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = result + 8;
  }
  a1[1] = v17;
  sub_20C12968C((uint64_t *)a1);
  return a1[1] - 8;
}

uint64_t sub_20C1295D0(uint64_t a1)
{
  void **v3;

  sub_20BF2B064((uint64_t *)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20BEEB2B8(&v3);
  return a1;
}

uint64_t sub_20C129610(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20BF2B388(v3, a2);
    if (v4)
      return *a1 + 8 * v4[3];
    else
      return a1[1];
  }
  else
  {
    v6 = (_QWORD *)*a1;
    result = a1[1];
    if (*a1 != result)
    {
      while ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v6 == (_QWORD *)result)
          return result;
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_20C12968C(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BF2B064(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (uint64_t *)(v4 + v5);
          sub_20BF2B45C(v7, (_QWORD *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[3] = v6++;
          v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_20C129758(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BF20BCC(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C129770(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = sub_20C128E84((uint64_t)a1, 0, 0, v5);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C1297EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C124874(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C129800(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = sub_20C129250((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C129864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C129884(uint64_t a1, uint64_t *__p)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *__p;
  v3 = __p[1];
  *(_QWORD *)(v2 + 8) = v3;
  v4 = __p[2];
  *(_QWORD *)__p[1] = v2;
  --*(_QWORD *)(a1 + 16);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  operator delete(__p);
  return v3;
}

uint64_t *sub_20C1298E0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = sub_20BE10B80(a1, a2);
  v4 = a2[4];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  operator delete(a2);
  return v3;
}

uint64_t *sub_20C129930(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = v4[4] & 0xFFFFFFFFFFFFFFF8;
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_20BFD25E8(a1, a3, (uint64_t)&v10);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_QWORD *sub_20C1299E8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = v2;
  do
  {
    v7 = v3[4] & 0xFFFFFFFFFFFFFFF8;
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < (v6[4] & 0xFFFFFFFFFFFFFFF8))
    return v2;
  return v6;
}

_QWORD *sub_20C129A40(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v22 = *a3;
    *((_QWORD *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      v19 = (_QWORD *)sub_20BFEF7A8((uint64_t *)&v22, v15, v16);
      v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      v23 = v22;
      sub_20BFEF824(&v23);
      if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        v21 = "";
      else
        v21 = ", ";
      sub_20BDDC1C8(v20, (uint64_t)v21, 2 * ((_QWORD)v23 != *((_QWORD *)&v23 + 1)));
      sub_20BFEF824(&v22);
      v18 = *((_QWORD *)&v22 + 1);
      v17 = v22;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t sub_20C129B64(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v6 = a2;
  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_20C129CDC((void **)a1);
    if (a4 >> 60)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BE90F0C((_QWORD *)a1, v12);
    result = sub_20C0371F4(v8, (uint64_t)v6, a3, *(_QWORD *)(a1 + 8));
LABEL_15:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v14 = (result - (uint64_t)v9) >> 4;
  if (v14 < a4)
  {
    v15 = (uint64_t)&a2[2 * v14];
    if ((_QWORD *)result != v9)
    {
      v16 = 16 * v14;
      do
      {
        sub_20BF4A9BC(v9, v6);
        v6 += 2;
        v9 += 2;
        v16 -= 16;
      }
      while (v16);
      v9 = *(_QWORD **)(a1 + 8);
    }
    result = sub_20C0371F4(v8, v15, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == (_QWORD *)a3)
  {
    v17 = v9;
  }
  else
  {
    v17 = v9;
    do
    {
      sub_20BF4A9BC(v9, v6);
      v6 += 2;
      v9 += 2;
      v17 += 2;
    }
    while (v6 != (_QWORD *)a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((_QWORD *)result != v17)
    result = sub_20BF4C2D8(result - 16);
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_20C129CD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C129CDC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_20BF4C2D8(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20C129D38(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C129D38(a1, *a2);
    sub_20C129D38(a1, a2[1]);
    sub_20BF4C2D8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C129D80(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_20C129E74(a1, 0, 0, a3);
    v9 = v8;
    v10 = a3 + 2;
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_20C129E74(a1, v12, 0, v10);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 += 2;
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20C129E4C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_20C96B5C8();
  __cxa_rethrow();
}

void sub_20C129E60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C129E74(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;

  v7 = operator new(0x20uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_20BF4C6D0(v7 + 2, a4);
  return v7;
}

void sub_20C129EBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C129ED0(uint64_t **a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C129F78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C12A014((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C12A1A8((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C129F78(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  int v7;
  _QWORD *v8;
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 4);
        if (!sub_20C12A084(v7, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_20C12A084(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *sub_20C12A014@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BF4C6D0(v6 + 4, *a2);
  v6[6] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C12A06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12A1A8(v1, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20C12A084(int a1, pxrInternal__aapl__pxrReserved__::VtValue *this, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  unint64_t Hash;
  unint64_t v6;
  _BOOL8 v7;
  int v9;
  void *v10;
  unsigned __int8 v11;
  size_t v12;
  void **v13;
  size_t v14;
  _QWORD *v15;
  size_t v16;
  int v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  void *__p[2];
  unsigned __int8 v21;

  Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  v6 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(a3);
  if (Hash < v6)
    return 1;
  if (Hash > v6 || (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(this, a3) & 1) != 0)
    return 0;
  sub_20BFEFC28((uint64_t)this);
  sub_20BFEFC28((uint64_t)a3);
  v9 = (char)v19;
  v10 = (void *)v18[0];
  v11 = v21;
  if ((v21 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (size_t)__p[1];
  if ((v21 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v14 = v19;
  else
    v14 = v18[1];
  if ((v19 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (_QWORD *)v18[0];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  if (v17)
    v7 = v17 < 0;
  else
    v7 = v12 < v14;
  if (v9 < 0)
  {
    operator delete(v10);
    v11 = v21;
  }
  if ((v11 & 0x80) != 0)
    operator delete(__p[0]);
  return v7;
}

void sub_20C12A18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C12A1A8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF4C2D8((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *sub_20C12A1EC(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v29;
  _QWORD v31[2];
  char *v32;
  char *v33;
  uint64_t v34;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)v20[1];
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)a2) >> 4;
      v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) <= -16)
        {
          v27 = (uint64_t)(v12 - (_QWORD)a2) >> 4;
          v20 = a3;
          do
            v20 = (_QWORD *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if ((_QWORD *)v12 == a2)
        {
          v20 = a3;
        }
        else
        {
          v23 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)v20[1];
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = sub_20C12A584(v9, (uint64_t)v20, a4, *(_QWORD *)(v9 - 8));
        v22 = (uint64_t)(v12 - (_QWORD)v5) >> 4;
      }
      if (v22 >= 1)
      {
        sub_20C12A400((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
        if (v20 != v7)
        {
          v29 = v5;
          do
          {
            sub_20BF4A9BC(v29, v7 + 2);
            v7 = (_QWORD *)v7[1];
            v29 += 2;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 4;
      v16 = v10 - v13;
      if (v16 >> 3 > v14)
        v14 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v34 = v9;
      if (v17)
        v18 = (char *)sub_20BDEA2F0(v9, v17);
      else
        v18 = 0;
      v24 = &v18[16 * v15];
      v31[0] = v18;
      v31[1] = v24;
      v32 = v24;
      v33 = &v18[16 * v17];
      v25 = 16 * a5;
      v26 = &v24[16 * a5];
      do
      {
        sub_20BF4C6D0(v24, v7 + 2);
        v24 += 16;
        v7 = (_QWORD *)v7[1];
        v25 -= 16;
      }
      while (v25);
      v32 = v26;
      v5 = sub_20C12A4AC(a1, v31, v5);
      sub_20BFC3A00((uint64_t)v31);
    }
  }
  return v5;
}

void sub_20C12A3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C12A400(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 - a4;
  v9 = (_QWORD *)(a2 + v7 - a4);
  if ((unint64_t)v9 >= a3)
  {
    result = *(_QWORD **)(a1 + 8);
  }
  else
  {
    result = *(_QWORD **)(a1 + 8);
    do
    {
      v12 = sub_20BF4C200(result, v9);
      v9 += 2;
      result = v12 + 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = result;
  if (v7 != a4)
  {
    v13 = (_QWORD *)(v7 - 16);
    v14 = 16 * (v8 >> 4);
    v15 = a2 - 16;
    do
    {
      result = sub_20BF4B5D8(v13, (_QWORD *)(v15 + v14));
      v13 -= 2;
      v14 -= 16;
    }
    while (v14);
  }
  return result;
}

_QWORD *sub_20C12A4AC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = (_QWORD *)a2[1];
  v7 = (_QWORD *)*a1;
  v8 = v6;
  if (v7 != a3)
  {
    v9 = a3;
    v8 = (_QWORD *)a2[1];
    do
    {
      v9 -= 2;
      v8 = sub_20BF4C200(v8 - 2, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = (_QWORD *)a1[1];
  v11 = (_QWORD *)a2[2];
  if (v10 != v3)
  {
    do
    {
      sub_20BF4C200(v11, v3);
      v3 += 2;
      v11 += 2;
    }
    while (v3 != v10);
    v8 = (_QWORD *)a2[1];
  }
  a2[2] = v11;
  v12 = (_QWORD *)*a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C12A584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      sub_20BF4C6D0((_QWORD *)(a4 + v7), (_QWORD *)(v6 + 16));
      v6 = *(_QWORD *)(v6 + 8);
      v7 += 16;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C12A5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 16;
    do
    {
      sub_20BF4C2D8(v4 + v2);
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C12A604(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 4;
      if (v20 >= a5)
      {
        v21 = (uint64_t)&a3[2 * a5];
      }
      else
      {
        v21 = (uint64_t)&a3[2 * v20];
        a1[1] = sub_20C0283AC(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_20C12A400((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      if ((_QWORD *)v21 != v7)
      {
        v22 = v5;
        do
        {
          sub_20BF4A9BC(v22, v7);
          v7 += 2;
          v22 += 2;
        }
        while (v7 != (_QWORD *)v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 4;
      v16 = v10 - v13;
      if (v16 >> 3 > v14)
        v14 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v30 = v9;
      if (v17)
        v18 = (char *)sub_20BDEA2F0(v9, v17);
      else
        v18 = 0;
      v23 = &v18[16 * v15];
      v27[0] = v18;
      v27[1] = v23;
      v28 = v23;
      v29 = &v18[16 * v17];
      v24 = 16 * a5;
      v25 = &v23[16 * a5];
      do
      {
        sub_20BF4C6D0(v23, v7);
        v23 += 16;
        v7 += 2;
        v24 -= 16;
      }
      while (v24);
      v28 = v25;
      v5 = sub_20C12A4AC(a1, v27, v5);
      sub_20BFC3A00((uint64_t)v27);
    }
  }
  return v5;
}

void sub_20C12A790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C12A7BC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t result;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  v4 = a1[3];
  if (v4)
  {
    v6 = *a1;
    v5 = a1[1];
    sub_20BF4C6D0(v10, a2);
    v11 = (v5 - v6) >> 4;
    sub_20BF4C200(v12, v10);
    v12[2] = v11;
    v7 = sub_20C12AC44(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v12, v12);
    LOBYTE(v5) = v8;
    sub_20BF4C2D8((uint64_t)v12);
    sub_20BF4C2D8((uint64_t)v10);
    if (!(_BYTE)v5)
      return *a1 + 16 * v7[4];
  }
  else
  {
    result = sub_20C12AAE0(a1, a2);
    if (a1[1] != result)
      return result;
  }
  sub_20C11AA68(a1, a2);
  sub_20C12AB60(a1);
  return a1[1] - 16;
}

void sub_20C12A8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12A900(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20BDEA2F0(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[16 * v10];
    v18 = &v14[16 * v13];
    sub_20BF4C200(v16, a2);
    v17 = v16 + 16;
    sub_20BFC397C(a1, &v15);
    v9 = a1[1];
    result = sub_20BFC3A00((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_20BF4C200(*(_QWORD **)(v4 - 8), a2);
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_20C12A9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFC3A00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12AA00(uint64_t a1)
{
  void **v3;

  sub_20C12AA40((uint64_t *)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20BF8CA20(&v3);
  return a1;
}

void sub_20C12AA40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C12AA6C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C12AA6C(uint64_t a1)
{
  void *v2;

  sub_20C12AAA4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C12AAA4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF4C2D8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C12AAE0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (_QWORD *)a1[3];
  if (v4)
  {
    v5 = sub_20C12AF8C(v4, a2);
    if (v5)
      return *a1 + 16 * v5[4];
    else
      return a1[1];
  }
  else
  {
    v8 = a1;
    v7 = *a1;
    v6 = v8[1];
    while (v7 != v6)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, a2) & 1) != 0)
        return v7;
      v7 += 16;
    }
  }
  return v6;
}

void sub_20C12AB60(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x7F1)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20C12AA40(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (_QWORD *)(v4 + v5);
          sub_20C12B098(v7, (pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[4] = v6++;
          v4 = *a1;
          v5 += 16;
        }
        while (v6 < (a1[1] - *a1) >> 4);
      }
    }
  }
}

void sub_20C12AC2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20C12AA6C(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12AC44(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[3];

  v7 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v12 + 2, this) & 1) != 0)
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_20C12AEC4(a1, v7, a3, (uint64_t)v23);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8)
          v21 %= v8;
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v12 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C12AF48((uint64_t)v23, 0);
  return v12;
}

void sub_20C12AEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12AF48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12AEC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20BF4C6D0(v8 + 2, a3);
  v8[4] = a3[2];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C12AF30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12AF48(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C12AF48(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF4C2D8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C12AF8C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t Hash;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = bswap64(0x9E3779B97F4A7C55 * Hash);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v6;
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v6;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v11 + 2, this) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *sub_20C12B098(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v8 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v13 + 2, this) & 1) != 0)
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_20C12B330(a1, v8, a4, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C12AF48((uint64_t)v24, 0);
  return v13;
}

void sub_20C12B318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12AF48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12B330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20BF4C6D0(v8 + 2, *a3);
  v8[4] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C12B394(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12AF48(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12B3AC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = sub_20C12B43C((uint64_t)a1, 0, 0, v5);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C12B428(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20C1248F0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12B43C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;

  v7 = operator new(0x20uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_20BF4C6D0(v7 + 2, a4);
  return v7;
}

void sub_20C12B484(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12B498(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = (_QWORD *)sub_20C12A584((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C12B4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BF8CA20(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12B51C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20C129F78((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C12B5AC((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20C12A1A8((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *sub_20C12B5AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BF4C6D0(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C12B5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12A1A8(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12B614(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_20C12A084(v5, (pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_20C12A084(v5, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t sub_20C12B6A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!sub_20C12A084(v4, this, (pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 4)))
      {
        if (!sub_20C12A084(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 4), this))
          return v5;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *sub_20C12B71C(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v22 = *a3;
    *((_QWORD *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      v19 = sub_20BFEFB30((uint64_t *)&v22, v15, v16);
      v20 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      v23 = v22;
      sub_20BFEFBAC(&v23);
      if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        v21 = "";
      else
        v21 = ", ";
      sub_20BDDC1C8(v20, (uint64_t)v21, 2 * ((_QWORD)v23 != *((_QWORD *)&v23 + 1)));
      sub_20BFEFBAC(&v22);
      v18 = *((_QWORD *)&v22 + 1);
      v17 = v22;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

void sub_20C12B840(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C12B840(a1, *a2);
    sub_20C12B840(a1, a2[1]);
    sub_20C12B888((_DWORD *)a2 + 8);
    operator delete(a2);
  }
}

_DWORD *sub_20C12B888(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t *sub_20C12B8B4(uint64_t a1, uint64_t *a2, _DWORD *a3, _DWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_20C12B9A8(a1, 0, 0, a3);
    v9 = v8;
    v10 = a3 + 2;
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_20C12B9A8(a1, v12, 0, v10);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 += 2;
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20C12B980(void *a1)
{
  __cxa_begin_catch(a1);
  sub_20C96B5F4();
  __cxa_rethrow();
}

void sub_20C12B994(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12B9A8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v7;

  v7 = operator new(0x18uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_20BFD6E54((_DWORD *)v7 + 4, a4);
  sub_20BFD6EA4((_DWORD *)v7 + 5, a4 + 1);
  return v7;
}

uint64_t **sub_20C12B9FC(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _QWORD v15[2];
  char v16;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x30uLL);
    v15[1] = v7;
    v13 = *a4;
    sub_20BFD6E54(v12 + 8, v13);
    sub_20BFD6EA4(v12 + 9, v13 + 1);
    *((_QWORD *)v12 + 5) = 0;
    v16 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0] = 0;
    sub_20C12BAF0((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_20C12BAF0(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C12B888(v2 + 8);
    operator delete(v2);
  }
}

int *sub_20C12BB34(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = a5 + 1;
      v20 = (_QWORD *)a3;
      do
      {
        v20 = (_QWORD *)v20[1];
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
      v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) <= -8)
        {
          v24 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
          v20 = (_QWORD *)a3;
          do
            v20 = (_QWORD *)*v20;
          while (!__CFADD__(v24++, 1));
        }
        else if ((int *)v12 == a2)
        {
          v20 = (_QWORD *)a3;
        }
        else
        {
          v23 = v21 + 1;
          v20 = (_QWORD *)a3;
          do
          {
            v20 = (_QWORD *)v20[1];
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = (uint64_t)sub_20C12BD80(v9, (uint64_t)v20, a4, *(_DWORD **)(v9 - 8));
        v22 = (uint64_t)(v12 - (_QWORD)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_20C0311C4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
        sub_20C12BE18((uint64_t)&v27, a3, (uint64_t)v20, v5);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 3;
      v16 = v10 - v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v31 = v9;
      if (v17)
        v18 = (char *)sub_20BDDF6A8(v9, v17);
      else
        v18 = 0;
      v27 = v18;
      v28 = &v18[8 * v15];
      v29 = v28;
      v30 = &v18[8 * v17];
      sub_20C12BD10(&v27, a3, a5);
      v5 = (int *)sub_20C0312D8((uint64_t)a1, &v27, v5);
      sub_20BFD7B28(&v27);
    }
  }
  return v5;
}

void sub_20C12BCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C12BD10(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;
  _DWORD *v7;

  v3 = result;
  v4 = (_DWORD *)*((_QWORD *)result + 2);
  if (a3)
  {
    v6 = 8 * a3;
    v7 = &v4[2 * a3];
    do
    {
      sub_20BFD6E54(v4, (_DWORD *)(a2 + 16));
      result = sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 20));
      v4 += 2;
      a2 = *(_QWORD *)(a2 + 8);
      v6 -= 8;
    }
    while (v6);
    v4 = v7;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

_DWORD *sub_20C12BD80(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _DWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD6E54(v4, (_DWORD *)(v6 + 16));
      sub_20BFD6EA4(v4 + 1, (_DWORD *)(v6 + 20));
      v6 = *(_QWORD *)(v6 + 8);
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20BFD6EE0((uint64_t)v8);
  return v4;
}

uint64_t sub_20C12BE18(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C01A074(a4, (_DWORD *)(v5 + 16));
    sub_20C01A0C8(a4 + 1, (_DWORD *)(v5 + 20));
    v5 = *(_QWORD *)(v5 + 8);
    a4 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C12BE84(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v4 = a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 3;
    sub_20BFD6E54(&v11, a2);
    sub_20BFD6EA4(&v12, a2 + 1);
    v13 = v5;
    v14 = v11;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v11);
    v15 = v12;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v12);
    v16 = v13;
    v6 = sub_20C0AD358(v4, &v14, (uint64_t)&v14);
    LOBYTE(v5) = v7;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
    if (!(_BYTE)v5)
      return *a1 + 8 * v6[3];
    v8 = (_DWORD *)a1[1];
  }
  else
  {
    v8 = (_DWORD *)sub_20C12C0C0(a1, a2);
    if ((_DWORD *)a1[1] != v8)
      return (uint64_t)v8;
  }
  if ((unint64_t)v8 >= a1[2])
  {
    v9 = sub_20BFD7890(a1, a2);
  }
  else
  {
    sub_20BFD6E54(v8, a2);
    sub_20BFD6EA4(v8 + 1, a2 + 1);
    v9 = (uint64_t)(v8 + 2);
  }
  a1[1] = v9;
  sub_20C12C134(a1);
  return a1[1] - 8;
}

void sub_20C12C004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  sub_20C12C068(&a11);
  sub_20C12C094(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12C028(uint64_t a1)
{
  void **v3;

  sub_20BFD28A8((uint64_t *)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20BFD6F90(&v3);
  return a1;
}

_DWORD *sub_20C12C068(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_DWORD *sub_20C12C094(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C12C0C0(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20C0AD934(v3, a2);
    if (v4)
      return *a1 + 8 * v4[3];
    else
      return a1[1];
  }
  else
  {
    v6 = (_QWORD *)*a1;
    result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *(_QWORD *)a2)
      {
        if (++v6 == (_QWORD *)result)
          return result;
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_20C12C134(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BFD28A8(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          v8 = (_DWORD *)(v4 + v5);
          sub_20C12C218(v7, (unsigned int *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8)[3] = v6++;
          v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_20C12C200(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BFD28D4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12C218(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C12C484(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C0AD634((uint64_t)v21, 0);
  return v10;
}

void sub_20C12C46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0AD634((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C12C484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  sub_20BFD6E54((_DWORD *)v8 + 4, v9);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, v9 + 1);
  v8[3] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_DWORD *sub_20C12C4F4(_DWORD *result)
{
  _DWORD *v1;

  if (*((_BYTE *)result + 8))
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(result + 1);
    result = sub_20BFD265C(v1);
    *((_BYTE *)v1 + 8) = 0;
  }
  return result;
}

uint64_t sub_20C12C530(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  sub_20BFD38A4(v14, a2);
  sub_20BFD38DC((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  sub_20BFD797C(a1, &v13);
  v11 = a1[1];
  sub_20BFD7B28(&v13);
  return v11;
}

void sub_20C12C608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12C61C(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = sub_20C12B9A8((uint64_t)a1, 0, 0, v5);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C12C698(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C124960(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12C6AC(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = sub_20C12BD80((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C12C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C12C730(uint64_t **a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *(uint64_t *)((char *)v5 + 28);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x28uLL);
    v13[1] = v6;
    sub_20BFD6E54((_DWORD *)v11 + 7, a3);
    sub_20BFD6EA4((_DWORD *)v11 + 8, a3 + 1);
    v14 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_20BFD7610((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

_QWORD *sub_20C12C81C(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  _QWORD *v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v22 = *a3;
    *((_QWORD *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFED860((uint64_t *)&v22, v15, v16);
      v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      v23 = v22;
      sub_20BFED8DC(&v23);
      if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        v21 = "";
      else
        v21 = ", ";
      sub_20BDDC1C8(v20, (uint64_t)v21, 2 * ((_QWORD)v23 != *((_QWORD *)&v23 + 1)));
      sub_20BFED8DC(&v22);
      v18 = *((_QWORD *)&v22 + 1);
      v17 = v22;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

void sub_20C12C940(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C12C940(a1, *a2);
    sub_20C12C940(a1, a2[1]);
    sub_20C12C988((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C12C988(uint64_t a1)
{
  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_20C12C9DC(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_20C12CAD0(a1, 0, 0, a3);
    v9 = v8;
    v10 = (__int128 *)((char *)a3 + 56);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_20C12CAD0(a1, v12, 0, v10);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 = (__int128 *)((char *)v10 + 56);
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20C12CAA8(void *a1)
{
  __cxa_begin_catch(a1);
  sub_20C96B620();
  __cxa_rethrow();
}

void sub_20C12CABC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_20C12CAD0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  void *v7;

  v7 = operator new(0x48uLL);
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  sub_20C029E64((char *)v7 + 16, a4);
  return v7;
}

void sub_20C12CB18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12CB2C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C12CBD4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C12CC64((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C12CCD4((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C12CBD4(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int8 *)(v4 + 32);
        if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a3, (unsigned __int8 *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

char *sub_20C12CC64@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C029E64(v6 + 32, *a2);
  *((_QWORD *)v6 + 11) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C12CCBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12CCD4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C12CCD4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C12C988((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::string *sub_20C12CD18(uint64_t *a1, std::string *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v31[2];
  char *v32;
  char *v33;
  uint64_t v34;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = (uint64_t)a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = a5 + 1;
      v21 = a3;
      do
      {
        v21 = (_QWORD *)v21[1];
        --v20;
      }
      while (v20 > 1);
      v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
      v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) <= -56)
        {
          v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
          v21 = a3;
          do
            v21 = (_QWORD *)*v21;
          while (!__CFADD__(v28++, 1));
        }
        else if ((std::string *)v12 == a2)
        {
          v21 = a3;
        }
        else
        {
          v24 = v22 + 1;
          v21 = a3;
          do
          {
            v21 = (_QWORD *)v21[1];
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = (uint64_t)sub_20C12D110(v9, (uint64_t)v21, a4, *(char **)(v9 - 8));
        v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)v5) >> 3);
      }
      if (v23 >= 1)
      {
        sub_20C12CF88((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 56 * a5);
        sub_20C12D27C((int)v31, v7, (uint64_t)v21, v5);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492)
        sub_20BDDF694();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v34 = v9;
      if (v18)
        v19 = (char *)sub_20BE16B34(v9, v18);
      else
        v19 = 0;
      v25 = &v19[56 * v15];
      v31[0] = v19;
      v31[1] = v25;
      v32 = v25;
      v33 = &v19[56 * v18];
      v26 = 56 * a5;
      v27 = &v25[56 * a5];
      do
      {
        sub_20C029E64(v25, (__int128 *)(v7 + 16));
        v25 += 56;
        v7 = *(_QWORD *)(v7 + 8);
        v26 -= 56;
      }
      while (v26);
      v32 = v27;
      v5 = (std::string *)sub_20C12D060(a1, v31, (uint64_t)v5);
      sub_20C12D538(v31);
    }
  }
  return v5;
}

void sub_20C12CF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C12CF88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v16;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)(v7 + v10);
      v12 = v6 + v10;
      v13 = *(_OWORD *)(v7 + v10);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v7 + v10 + 16);
      *(_OWORD *)v12 = v13;
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      sub_20BFD38A4((_DWORD *)(v6 + v10 + 24), (_DWORD *)(v7 + v10 + 24));
      sub_20BFD38DC((_DWORD *)(v6 + v10 + 28), (_DWORD *)(v7 + v10 + 28));
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v7 + v10 + 32);
      v14 = *(_QWORD *)(v7 + v10 + 48);
      v11[6] = 0;
      *(_QWORD *)(v12 + 48) = v14;
      v10 += 56;
    }
    while ((unint64_t)(v11 + 7) < a3);
    v8 = v6 + v10;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C12D1B0((uint64_t)&v16, a2, v7, v6);
}

uint64_t sub_20C12D060(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C12D308((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C12D3E8(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

char *sub_20C12D110(uint64_t a1, uint64_t a2, uint64_t a3, char *__dst)
{
  char *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C029E64(v4, (__int128 *)(v6 + 16));
      v6 = *(_QWORD *)(v6 + 8);
      v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C029F10((uint64_t)v8);
  return v4;
}

void sub_20C12D19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C029F10((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12D1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 *v10;
  __int128 v11;
  _QWORD **v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (void **)(a4 + v7 - 56);
      if (*(char *)(a4 + v7 - 33) < 0)
        operator delete(*v9);
      v10 = (__int128 *)(a3 + v7 - 56);
      v11 = *v10;
      *(_QWORD *)(a4 + v7 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_OWORD *)v9 = v11;
      *(_BYTE *)(a3 + v7 - 33) = 0;
      *(_BYTE *)v10 = 0;
      sub_20BFD3EBC((int *)(v8 - 32), (int *)(a3 + v7 - 32));
      sub_20BFD3F10((int *)(v8 - 28), (int *)(a3 + v7 - 28));
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(a3 + v7 - 24);
      v12 = *(_QWORD ***)(a3 + v7 - 8);
      *(_QWORD *)(a3 + v7 - 8) = 0;
      sub_20BF49F14((_QWORD ***)(v8 - 8), v12);
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_20C12D27C(int a1, uint64_t a2, uint64_t a3, std::string *this)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::string::operator=(this, (const std::string *)(v5 + 16));
    sub_20C01A074((int *)&this[1], (_DWORD *)(v5 + 40));
    sub_20C01A0C8((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)(v5 + 44));
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v5 + 48);
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)&this[2], (const void ****)(v5 + 64));
    v5 = *(_QWORD *)(v5 + 8);
    this = (std::string *)((char *)this + 56);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C12D308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_OWORD *)(v9 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(v9 - 40);
      *(_OWORD *)(v7 - 56) = v10;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      sub_20BFD38A4((_DWORD *)(v7 - 32), (_DWORD *)(v9 - 32));
      sub_20BFD38DC((_DWORD *)(v7 - 28), (_DWORD *)(v9 - 28));
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      v11 = *(_QWORD *)(v9 - 8);
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v7 - 8) = v11;
      v7 = *((_QWORD *)&v17 + 1) - 56;
      *((_QWORD *)&v17 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C12D4B4((uint64_t)v14);
  return v12;
}

uint64_t sub_20C12D3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 28;
    do
    {
      v7 = *(_OWORD *)(v6 - 28);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v6 - 12);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v6 - 12) = 0;
      *(_QWORD *)(v6 - 20) = 0;
      *(_QWORD *)(v6 - 28) = 0;
      sub_20BFD38A4((_DWORD *)(v4 + 24), (_DWORD *)(v6 - 4));
      sub_20BFD38DC((_DWORD *)(v4 + 28), (_DWORD *)v6);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 4);
      v8 = *(_QWORD *)(v6 + 20);
      *(_QWORD *)(v6 + 20) = 0;
      *(_QWORD *)(v4 + 48) = v8;
      v4 = v14 + 56;
      v14 += 56;
      v9 = v6 + 28;
      v6 += 56;
    }
    while (v9 != a3);
  }
  v12 = 1;
  sub_20C029F10((uint64_t)v11);
  return v4;
}

uint64_t sub_20C12D4B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C12D4E8((uint64_t *)a1);
  return a1;
}

void sub_20C12D4E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C0217C4(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_20C12D538(void **a1)
{
  sub_20C12D568(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C12D568(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_20C0217C4(v4, i - 56);
  }
}

__int128 *sub_20C12D5AC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  _QWORD **v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      sub_20BFD3EBC((int *)(a4 + 24), (int *)v5 + 6);
      sub_20BFD3F10((int *)(a4 + 28), (int *)v5 + 7);
      *(_OWORD *)(a4 + 32) = v5[2];
      v8 = (_QWORD **)*((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = 0;
      sub_20BF49F14((_QWORD ***)(a4 + 48), v8);
      a4 += 56;
      v5 = (__int128 *)((char *)v5 + 56);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C12D654(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE16B34(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  sub_20C029E64(v14, a2);
  v15 = v14 + 56;
  sub_20C12D770(a1, &v13);
  v11 = a1[1];
  sub_20C12D538(&v13);
  return v11;
}

void sub_20C12D75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12D538((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12D770(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C12D308((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *sub_20C12D7E4(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::string *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 3) >= a5)
      {
        v21 = (__int128 *)((char *)a3 + 56 * a5);
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        a1[1] = (uint64_t)sub_20C12D9F0(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20C12CF88((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 56 * a5);
      sub_20C0E31B8((int)v26, v7, (std::string *)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492)
        sub_20BDDF694();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)sub_20BE16B34(v9, v18);
      else
        v19 = 0;
      v22 = &v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[56 * v18];
      v23 = 56 * a5;
      v24 = &v22[56 * a5];
      do
      {
        sub_20C029E64(v22, (__int128 *)v7);
        v22 += 56;
        v7 = (std::string *)((char *)v7 + 56);
        v23 -= 56;
      }
      while (v23);
      v27 = v24;
      v5 = (std::string *)sub_20C12D060(a1, v26, (uint64_t)v5);
      sub_20C12D538(v26);
    }
  }
  return v5;
}

void sub_20C12D9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

char *sub_20C12D9F0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C029E64(v4, v6);
      v6 = (__int128 *)((char *)v6 + 56);
      v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C029F10((uint64_t)v8);
  return v4;
}

void sub_20C12DA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C029F10((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12DA90(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  char v7;
  char v8;
  char *v9;
  uint64_t v10;
  void *v12[2];
  char v13;
  int v14;
  _DWORD v15[5];
  _QWORD **v16[2];
  int8x16_t __p;
  char v18;
  int v19;
  _DWORD v20[5];
  _QWORD **v21;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    sub_20C029E64((char *)v12, a2);
    v16[1] = (_QWORD **)v5;
    sub_20C12E238((uint64_t)&__p, (__int128 *)v12);
    v6 = sub_20C12DED0(v4, &__p, (uint64_t)&__p);
    v8 = v7;
    sub_20BF49F14(&v21, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v20);
    sub_20BFD265C(&v19);
    if (v18 < 0)
      operator delete((void *)__p.i64[0]);
    sub_20BF49F14(v16, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
    sub_20BFD265C(&v14);
    if (v13 < 0)
      operator delete(v12[0]);
    if (!v8)
      return *(_QWORD *)a1 + 56 * *((_QWORD *)v6 + 9);
    v9 = *(char **)(a1 + 8);
  }
  else
  {
    v9 = (char *)sub_20C12DE4C((unsigned __int8 **)a1, (int8x16_t *)a2);
    if (*(char **)(a1 + 8) != v9)
      return (uint64_t)v9;
  }
  if ((unint64_t)v9 >= *(_QWORD *)(a1 + 16))
  {
    v10 = sub_20C12D654((uint64_t *)a1, a2);
  }
  else
  {
    sub_20C029E64(v9, a2);
    v10 = (uint64_t)(v9 + 56);
    *(_QWORD *)(a1 + 8) = v9 + 56;
  }
  *(_QWORD *)(a1 + 8) = v10;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v10 - *(_QWORD *)a1) >> 3)) >= 0x80)
  {
    sub_20C12E3CC((uint64_t *)a1);
    v10 = *(_QWORD *)(a1 + 8);
  }
  return v10 - 56;
}

void sub_20C12DC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C12DC78(uint64_t a1)
{
  void **v3;

  sub_20C12DCB8((uint64_t *)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20C021740(&v3);
  return a1;
}

void sub_20C12DCB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C12DCE4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C12DCE4(uint64_t a1)
{
  void *v2;

  sub_20C12DD1C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C12DD1C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C12DD58((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C12DD58(uint64_t a1)
{
  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C12DDAC(uint64_t a1)
{
  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C12DDFC(uint64_t a1)
{
  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C12DE4C(unsigned __int8 **a1, int8x16_t *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;

  v4 = a1[3];
  if (v4)
  {
    v5 = sub_20C12E298(v4, a2);
    if (v5)
      return (uint64_t)&(*a1)[56 * *((_QWORD *)v5 + 9)];
    else
      return (uint64_t)a1[1];
  }
  else
  {
    v8 = a1;
    v7 = *a1;
    v6 = v8[1];
    while (v7 != v6)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, (unsigned __int8 *)a2) & 1) != 0)
        return (uint64_t)v7;
      v7 += 56;
    }
  }
  return (uint64_t)v6;
}

unsigned __int8 *sub_20C12DED0(uint64_t a1, int8x16_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  unsigned __int8 **v20;
  unint64_t v21;
  unsigned __int8 *v23;
  char v24;

  v23 = 0;
  v24 = 0;
  sub_20C02C578((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v23, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  v7 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v23));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v7)
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(i + 16, (unsigned __int8 *)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  sub_20C12E170(a1, v7, a3, (uint64_t)&v23);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23 = *v20;
    *v20 = v23;
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v23)
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8)
          v21 %= v8;
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23;
    }
  }
  i = v23;
  v23 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C12E1F4((uint64_t)&v23, 0);
  return i;
}

void sub_20C12E158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12E1F4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20C12E170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_20C029E64((char *)v8 + 16, (__int128 *)a3);
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a3 + 56);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C12E1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12E1F4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C12E1F4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C12DD58((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C12E238(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  sub_20BFD38DC((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  v5 = *((_QWORD *)a2 + 6);
  v6 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  return a1;
}

unsigned __int8 *sub_20C12E298(_QWORD *a1, int8x16_t *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  uint64_t v13;
  char v14;

  v13 = 0;
  v14 = 0;
  sub_20C02C578((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v13));
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v4)
      v8 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v8 = v5 & (*(_QWORD *)&v4 - 1);
  }
  v9 = *(unsigned __int8 ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (i = *v9; i; i = *(unsigned __int8 **)i)
  {
    v11 = *((_QWORD *)i + 1);
    if (v11 == v5)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(i + 16, (unsigned __int8 *)a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(_QWORD *)&v4)
          v11 %= *(_QWORD *)&v4;
      }
      else
      {
        v11 &= *(_QWORD *)&v4 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return i;
}

void sub_20C12E3CC(uint64_t *a1)
{
  uint64_t *v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v1 = a1 + 3;
  if (!a1[3])
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
    sub_20C12DCB8(v1, (uint64_t)v3);
    v4 = *a1;
    if (a1[1] != *a1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = a1[3];
        v8 = (__int128 *)(v4 + v5);
        *((_QWORD *)sub_20C12E4C0(v7, (int8x16_t *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8) + 9) = v6++;
        v4 = *a1;
        v5 += 56;
      }
      while (v6 < 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3));
    }
  }
}

void sub_20C12E4A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20C12DCE4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C12E4C0(uint64_t a1, int8x16_t *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unsigned __int8 **v21;
  unint64_t v22;
  unsigned __int8 *v24;
  char v25;

  v24 = 0;
  v25 = 0;
  sub_20C02C578((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v24));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(i + 16, (unsigned __int8 *)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  sub_20C12E778(a1, v8, a4, (uint64_t)&v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24 = *v21;
    *v21 = v24;
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v24)
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24;
    }
  }
  i = v24;
  v24 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C12E1F4((uint64_t)&v24, 0);
  return i;
}

void sub_20C12E760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12E1F4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20C12E778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_20C029E64((char *)v8 + 16, *a3);
  *((_QWORD *)v8 + 9) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C12E7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12E1F4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C12E7F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
}

uint64_t sub_20C12E84C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE16B34(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[56 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_20BFD38A4((_DWORD *)v11 + 6, (_DWORD *)a2 + 6);
  sub_20BFD38DC((_DWORD *)v11 + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)v11 + 2) = a2[2];
  v13 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)v11 + 6) = v13;
  v16[2] = v11 + 56;
  sub_20C12D770(a1, v16);
  v14 = a1[1];
  sub_20C12D538(v16);
  return v14;
}

void sub_20C12E988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12D538((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12E99C(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = sub_20C12EA2C((uint64_t)a1, 0, 0, v5);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 = (__int128 *)((char *)v5 + 56);
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C12EA18(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20C1249D0(v1);
  _Unwind_Resume(a1);
}

void *sub_20C12EA2C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  void *v7;

  v7 = operator new(0x48uLL);
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  sub_20C029E64((char *)v7 + 16, a4);
  return v7;
}

void sub_20C12EA74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C12EA88(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE1B554(result, a4);
    result = sub_20C12D110((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20C12EAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C021740(&a9);
  _Unwind_Resume(a1);
}

void sub_20C12EB0C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C12EB0C(a1, *a2);
    sub_20C12EB0C(a1, a2[1]);
    sub_20C124A40((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C12EB54(uint64_t **a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20C12CBD4((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C12EBE4((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20C12EC4C((uint64_t)v9, 0);
  }
  return v6;
}

char *sub_20C12EBE4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C029E64(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C12EC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12EC4C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C12EC4C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C124A40((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C12EC90(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, (unsigned __int8 *)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t sub_20C12ED08(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;

  v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, v2 + 32))
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v2 + 32, a2))
          return v4;
        v2 += 8;
      }
      v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *sub_20C12ED70(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v22 = *a3;
    *((_QWORD *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      v19 = sub_20BFEE248((uint64_t *)&v22, v15, v16);
      v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      v23 = v22;
      sub_20BFEE2C4(&v23);
      if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        v21 = "";
      else
        v21 = ", ";
      sub_20BDDC1C8(v20, (uint64_t)v21, 2 * ((_QWORD)v23 != *((_QWORD *)&v23 + 1)));
      sub_20BFEE2C4(&v22);
      v18 = *((_QWORD *)&v22 + 1);
      v17 = v22;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

void sub_20C12EE94(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C12EE94(a1, *a2);
    sub_20C12EE94(a1, a2[1]);
    sub_20C12EEDC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C12EEDC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

__n128 *sub_20C12EF24(uint64_t a1, __n128 **a2, uint64_t a3, uint64_t a4)
{
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;

  if (a3 != a4)
  {
    v8 = sub_20C12F018(a1, 0, 0, a3);
    v9 = v8;
    v10 = a3 + 48;
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (unint64_t)v8;
      do
      {
        v8 = sub_20C12F018(a1, v12, 0, v10);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 += 48;
        v12 = (unint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    v13->n128_u64[1] = (unint64_t)v9;
    v9->n128_u64[0] = (unint64_t)v13;
    *a2 = v8;
    v8->n128_u64[1] = (unint64_t)a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return (__n128 *)a2;
}

void sub_20C12EFF0(void *a1)
{
  __cxa_begin_catch(a1);
  sub_20C96B64C();
  __cxa_rethrow();
}

void sub_20C12F004(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

__n128 *sub_20C12F018(int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  int v7;
  __n128 *v8;

  v7 = a1 + 16;
  v8 = (__n128 *)operator new(0x40uLL);
  v8->n128_u64[0] = a2;
  v8->n128_u64[1] = a3;
  sub_20C02CCF8(v7, v8 + 1, a4);
  return v8;
}

void sub_20C12F074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C12F088(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C12F130((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C12F1C0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C12F298((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C12F130(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const void **v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const void **)(v4 + 32);
        if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a3, (unsigned __int8 *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v8, (unsigned __int8 *)a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *sub_20C12F1C0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C12F228(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C12F210(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12F298(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C12F228(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = 0;
  return __dst;
}

void sub_20C12F298(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C12EEDC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::string *sub_20C12F2DC(uint64_t *a1, std::string *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  __n128 *v25;
  uint64_t v26;
  __n128 *v27;
  uint64_t v28;
  unint64_t v29;
  void *v32[2];
  __n128 *v33;
  char *v34;
  int v35[2];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = (uint64_t)a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = a5 + 1;
      v21 = a3;
      do
      {
        v21 = (_QWORD *)v21[1];
        --v20;
      }
      while (v20 > 1);
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 4);
      v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - (_QWORD)a2) <= -48)
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 4);
          v21 = a3;
          do
            v21 = (_QWORD *)*v21;
          while (!__CFADD__(v29++, 1));
        }
        else if ((std::string *)v12 == a2)
        {
          v21 = a3;
        }
        else
        {
          v24 = v22 + 1;
          v21 = a3;
          do
          {
            v21 = (_QWORD *)v21[1];
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = (uint64_t)sub_20C12F6A4(v9, (uint64_t)v21, a4, *(__n128 **)(v9 - 8));
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v5) >> 4);
      }
      if (v23 >= 1)
      {
        sub_20C12F528((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
        sub_20C12F808((int)v32, v7, (uint64_t)v21, v5);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      *(_QWORD *)v35 = v9;
      if (v18)
        v19 = (char *)sub_20BE6D0B4(v9, v18);
      else
        v19 = 0;
      v25 = (__n128 *)&v19[48 * v15];
      v32[0] = v19;
      v32[1] = v25;
      v33 = v25;
      v34 = &v19[48 * v18];
      v26 = 3 * a5;
      v27 = &v25[3 * a5];
      v28 = 16 * v26;
      do
      {
        sub_20C02CCF8(v35[0], v25, v7 + 16);
        v25 += 3;
        v7 = *(_QWORD *)(v7 + 8);
        v28 -= 48;
      }
      while (v28);
      v33 = v27;
      v5 = (std::string *)sub_20C12F5F4(a1, v32, (uint64_t)v5);
      sub_20C12FAA0(v32);
    }
  }
  return v5;
}

void sub_20C12F4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C12F528(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)(v7 + v10);
      v12 = v6 + v10;
      v13 = *(_OWORD *)(v7 + v10);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v7 + v10 + 16);
      *(_OWORD *)v12 = v13;
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      sub_20BFD38A4((_DWORD *)(v6 + v10 + 24), (_DWORD *)(v7 + v10 + 24));
      sub_20BFD38DC((_DWORD *)(v6 + v10 + 28), (_DWORD *)(v7 + v10 + 28));
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v7 + v10 + 32);
      v10 += 48;
    }
    while ((unint64_t)(v11 + 6) < a3);
    v8 = v6 + v10;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C12F74C((uint64_t)&v15, a2, v7, v6);
}

uint64_t sub_20C12F5F4(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C12F888((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C12F95C(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *sub_20C12F6A4(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *__dst)
{
  __n128 *v4;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  char v10;
  __n128 *v11;
  __n128 *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_20C02CCF8(v7, v4, v6 + 16);
      v6 = *(_QWORD *)(v6 + 8);
      v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C02CD60((uint64_t)v9);
  return v4;
}

void sub_20C12F738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C02CD60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12F74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 *v10;
  __int128 v11;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0)
        operator delete(*v9);
      v10 = (__int128 *)(a3 + v7 - 48);
      v11 = *v10;
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_OWORD *)v9 = v11;
      *(_BYTE *)(a3 + v7 - 25) = 0;
      *(_BYTE *)v10 = 0;
      sub_20BFD3EBC((int *)(v8 - 24), (int *)(a3 + v7 - 24));
      sub_20BFD3F10((int *)(v8 - 20), (int *)(a3 + v7 - 20));
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + v7 - 16);
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_20C12F808(int a1, uint64_t a2, uint64_t a3, std::string *this)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::string::operator=(this, (const std::string *)(v5 + 16));
    sub_20C01A074((int *)&this[1], (_DWORD *)(v5 + 40));
    sub_20C01A0C8((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)(v5 + 44));
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v5 + 48);
    v5 = *(_QWORD *)(v5 + 8);
    this += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C12F888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 24;
    do
    {
      v10 = v9 - 24;
      v11 = *(_OWORD *)(v9 - 24);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(v9 - 8);
      *(_OWORD *)(v7 - 48) = v11;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      sub_20BFD38A4((_DWORD *)(v7 - 24), (_DWORD *)v9);
      sub_20BFD38DC((_DWORD *)(v7 - 20), (_DWORD *)(v9 + 4));
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 + 8);
      v7 = *((_QWORD *)&v17 + 1) - 48;
      *((_QWORD *)&v17 + 1) -= 48;
      v9 -= 48;
    }
    while (v10 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C12FA1C((uint64_t)v14);
  return v12;
}

uint64_t sub_20C12F95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 28;
    do
    {
      v7 = *(_OWORD *)(v6 - 28);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v6 - 12);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v6 - 12) = 0;
      *(_QWORD *)(v6 - 20) = 0;
      *(_QWORD *)(v6 - 28) = 0;
      sub_20BFD38A4((_DWORD *)(v4 + 24), (_DWORD *)(v6 - 4));
      sub_20BFD38DC((_DWORD *)(v4 + 28), (_DWORD *)v6);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 4);
      v4 = v13 + 48;
      v13 += 48;
      v8 = v6 + 20;
      v6 += 48;
    }
    while (v8 != a3);
  }
  v11 = 1;
  sub_20C02CD60((uint64_t)v10);
  return v4;
}

uint64_t sub_20C12FA1C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C12FA50((uint64_t *)a1);
  return a1;
}

void sub_20C12FA50(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C02189C(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_20C12FAA0(void **a1)
{
  sub_20C12FAD0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C12FAD0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_20C02189C(v4, i - 48);
  }
}

__int128 *sub_20C12FB14(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      sub_20BFD3EBC((int *)(a4 + 24), (int *)v5 + 6);
      sub_20BFD3F10((int *)(a4 + 28), (int *)v5 + 7);
      *(_OWORD *)(a4 + 32) = v5[2];
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C12FBAC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  __n128 *v11;
  __n128 *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE6D0B4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (__n128 *)&v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_20C02CCF8((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 3;
  sub_20C12FCB8(a1, &v10);
  v8 = a1[1];
  sub_20C12FAA0(&v10);
  return v8;
}

void sub_20C12FCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12FAA0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12FCB8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C12F888((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *sub_20C12FD2C(uint64_t *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  std::string *v5;
  std::string *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  std::string *v21;
  __n128 *v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  void *v27[2];
  __n128 *v28;
  char *v29;
  int v30[2];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 4)) >= a5)
      {
        v21 = &a3[2 * a5];
      }
      else
      {
        v21 = (std::string *)((char *)a3 + 16 * ((uint64_t)(v12 - (_QWORD)a2) >> 4));
        a1[1] = (uint64_t)sub_20C12FF1C(v9, (uint64_t)v21, a4, *(__n128 **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20C12F528((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      sub_20C0E3958((int)v27, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      *(_QWORD *)v30 = v9;
      if (v18)
        v19 = (char *)sub_20BE6D0B4(v9, v18);
      else
        v19 = 0;
      v22 = (__n128 *)&v19[48 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[48 * v18];
      v23 = 3 * a5;
      v24 = &v22[3 * a5];
      v25 = 16 * v23;
      do
      {
        sub_20C02CCF8(v30[0], v22, (uint64_t)v7);
        v22 += 3;
        v7 += 2;
        v25 -= 48;
      }
      while (v25);
      v28 = v24;
      v5 = (std::string *)sub_20C12F5F4(a1, v27, (uint64_t)v5);
      sub_20C12FAA0(v27);
    }
  }
  return v5;
}

void sub_20C12FEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__n128 *sub_20C12FF1C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *__dst)
{
  __n128 *v4;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  char v10;
  __n128 *v11;
  __n128 *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_20C02CCF8(v7, v4, v6);
      v6 += 48;
      v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C02CD60((uint64_t)v9);
  return v4;
}

void sub_20C12FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C02CD60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C12FFC4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  char v6;
  char v7;
  __n128 *v8;
  uint64_t v9;
  unint64_t v11;
  void *__dst[2];
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
    sub_20C1307E0(__dst, a2, &v11);
    *(_OWORD *)__p = *(_OWORD *)__dst;
    v19 = v13;
    __dst[1] = 0;
    v13 = 0;
    __dst[0] = 0;
    v20 = v14;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v14);
    v21 = v15;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v15);
    v22 = v16;
    v23 = v17;
    v5 = sub_20C130418(v4, (int8x16_t *)__p, (__int128 *)__p);
    v7 = v6;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_20BFD265C(&v20);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (SHIBYTE(v13) < 0)
      operator delete(__dst[0]);
    if (!v7)
      return *(_QWORD *)a1 + 48 * *((_QWORD *)v5 + 8);
    v8 = *(__n128 **)(a1 + 8);
  }
  else
  {
    v8 = (__n128 *)sub_20C130394((unsigned __int8 **)a1, (int8x16_t *)a2);
    if (*(__n128 **)(a1 + 8) != v8)
      return (uint64_t)v8;
  }
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 16))
  {
    v9 = sub_20C12FBAC((uint64_t *)a1, (uint64_t)a2);
  }
  else
  {
    sub_20C02CCF8(a1 + 16, v8, (uint64_t)a2);
    v9 = (uint64_t)&v8[3];
    *(_QWORD *)(a1 + 8) = v8 + 3;
  }
  *(_QWORD *)(a1 + 8) = v9;
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)a1) >> 4) >= 0x80)
  {
    sub_20C130990((uint64_t *)a1);
    v9 = *(_QWORD *)(a1 + 8);
  }
  return v9 - 48;
}

void sub_20C1301AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1301E4(uint64_t a1)
{
  void **v3;

  sub_20C130224((uint64_t *)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20C021818(&v3);
  return a1;
}

void sub_20C130224(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C130250(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C130250(uint64_t a1)
{
  void *v2;

  sub_20C130288(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C130288(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C1302C4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C1302C4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C13030C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C130350(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C130394(unsigned __int8 **a1, int8x16_t *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;

  v4 = a1[3];
  if (v4)
  {
    v5 = sub_20C130860(v4, a2);
    if (v5)
      return (uint64_t)&(*a1)[48 * *((_QWORD *)v5 + 8)];
    else
      return (uint64_t)a1[1];
  }
  else
  {
    v8 = a1;
    v7 = *a1;
    v6 = v8[1];
    while (v7 != v6)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, (unsigned __int8 *)a2))
        return (uint64_t)v7;
      v7 += 48;
    }
  }
  return (uint64_t)v6;
}

unsigned __int8 *sub_20C130418(uint64_t a1, int8x16_t *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  unsigned __int8 **v20;
  unint64_t v21;
  unsigned __int8 *v23;
  char v24;

  v23 = 0;
  v24 = 0;
  sub_20C02F0AC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v23, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  v7 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v23));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v7)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  sub_20C1306B4(a1, v7, a3, (uint64_t)&v23);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23 = *v20;
    *v20 = v23;
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v23)
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8)
          v21 %= v8;
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23;
    }
  }
  i = v23;
  v23 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C13079C((uint64_t)&v23, 0);
  return i;
}

void sub_20C13069C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C13079C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1306B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C130728(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C130710(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C13079C(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C130728(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = *((_QWORD *)a2 + 6);
  return __dst;
}

void sub_20C13079C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C1302C4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C1307E0(_QWORD *__dst, __int128 *a2, _QWORD *a3)
{
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v6;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = *a3;
  return __dst;
}

unsigned __int8 *sub_20C130860(_QWORD *a1, int8x16_t *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  uint64_t v13;
  char v14;

  v13 = 0;
  v14 = 0;
  sub_20C02F0AC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v13));
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v4)
      v8 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v8 = v5 & (*(_QWORD *)&v4 - 1);
  }
  v9 = *(unsigned __int8 ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (i = *v9; i; i = *(unsigned __int8 **)i)
  {
    v11 = *((_QWORD *)i + 1);
    if (v11 == v5)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2))
        return i;
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(_QWORD *)&v4)
          v11 %= *(_QWORD *)&v4;
      }
      else
      {
        v11 &= *(_QWORD *)&v4 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return i;
}

void sub_20C130990(uint64_t *a1)
{
  uint64_t *v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v1 = a1 + 3;
  if (!a1[3])
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
    sub_20C130224(v1, (uint64_t)v3);
    v4 = *a1;
    if (a1[1] != *a1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = a1[3];
        v8 = (__int128 *)(v4 + v5);
        *((_QWORD *)sub_20C130A7C(v7, (int8x16_t *)(v4 + v5), (uint64_t)&unk_20CAC184C, &v8) + 8) = v6++;
        v4 = *a1;
        v5 += 48;
      }
      while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
    }
  }
}

void sub_20C130A64(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20C130250(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C130A7C(uint64_t a1, int8x16_t *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unsigned __int8 **v21;
  unint64_t v22;
  unsigned __int8 *v24;
  char v25;

  v24 = 0;
  v25 = 0;
  sub_20C02F0AC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v24));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  sub_20C130D30(a1, v8, a4, (uint64_t)&v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24 = *v21;
    *v21 = v24;
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v24)
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24;
    }
  }
  i = v24;
  v24 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C13079C((uint64_t)&v24, 0);
  return i;
}

void sub_20C130D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C13079C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C130D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C12F228(v8 + 2, *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C130D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C13079C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C130D9C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
}

uint64_t sub_20C130DE8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE6D0B4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_20BFD38A4((_DWORD *)v11 + 6, (_DWORD *)a2 + 6);
  sub_20BFD38DC((_DWORD *)v11 + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)v11 + 2) = a2[2];
  v15[2] = v11 + 48;
  sub_20C12FCB8(a1, v15);
  v13 = a1[1];
  sub_20C12FAA0(v15);
  return v13;
}

void sub_20C130F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12FAA0((void **)va);
  _Unwind_Resume(a1);
}

__n128 **sub_20C130F14(__n128 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 *v6;
  unint64_t v7;

  *a1 = (__n128 *)a1;
  a1[1] = (__n128 *)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = sub_20C130FA4((int)a1, 0, 0, v5);
      v7 = (unint64_t)*a1;
      v6->n128_u64[0] = (unint64_t)*a1;
      v6->n128_u64[1] = (unint64_t)a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = v6;
      a1[2] = (__n128 *)((char *)a1[2] + 1);
      v5 += 48;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20C130F90(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20C124AEC(v1);
  _Unwind_Resume(a1);
}

__n128 *sub_20C130FA4(int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  int v7;
  __n128 *v8;

  v7 = a1 + 16;
  v8 = (__n128 *)operator new(0x40uLL);
  v8->n128_u64[0] = a2;
  v8->n128_u64[1] = a3;
  sub_20C02CCF8(v7, v8 + 1, a4);
  return v8;
}

void sub_20C131000(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 *sub_20C131014(__n128 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __n128 *v6;

  if (a4)
  {
    v6 = result;
    sub_20C02CC00(result, a4);
    result = sub_20C12F6A4((uint64_t)&v6[1], a2, a3, (__n128 *)v6->n128_u64[1]);
    v6->n128_u64[1] = (unint64_t)result;
  }
  return result;
}

void sub_20C131078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C021818(&a9);
  _Unwind_Resume(a1);
}

void sub_20C131098(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C131098(a1, *a2);
    sub_20C131098(a1, a2[1]);
    sub_20C124B5C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C1310E0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20C12F130((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C131170((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20C1311DC((uint64_t)v9, 0);
  }
  return v6;
}

void sub_20C131170(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;

  v5 = a1 + 8;
  v6 = (__n128 *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  sub_20C02CCF8(v5, v6 + 2, a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_20C1311C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1311DC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C1311DC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C124B5C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C131220(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a2, (unsigned __int8 *)(v5 + 32)))
  {
    return v2;
  }
  return v5;
}

uint64_t sub_20C131298(uint64_t a1, unsigned __int8 *a2)
{
  const void **v2;
  uint64_t v4;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a2, (unsigned __int8 *)v2 + 32))
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v2 + 4, a2))
          return v4;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *sub_20C131300(_QWORD *result, uint64_t a2, uint64_t *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4)
      v9 = "";
    else
      v9 = ", ";
    v10 = sub_20BDDC1C8(result, (uint64_t)v9, 2 * (*a4 == 0));
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = sub_20BDDC1C8(v10, v12, v13);
    sub_20BDDC1C8(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    v17 = *a3;
    v18 = a3[1];
    *(_QWORD *)&v22 = *a3;
    *((_QWORD *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      v19 = sub_20BFEDCBC((uint64_t *)&v22, v15, v16);
      v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      v23 = v22;
      sub_20BFEDD38(&v23);
      if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        v21 = "";
      else
        v21 = ", ";
      sub_20BDDC1C8(v20, (uint64_t)v21, 2 * ((_QWORD)v23 != *((_QWORD *)&v23 + 1)));
      sub_20BFEDD38(&v22);
      v18 = *((_QWORD *)&v22 + 1);
      v17 = v22;
    }
    return sub_20BDDC1C8(v8, (uint64_t)"]", 1);
  }
  return result;
}

void sub_20C13142C()
{
  void *v0;

  operator delete(v0);
}

uint64_t sub_20C131434()
{
  uint64_t v0;

  return v0 + 16;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_MapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_MapEditor(_QWORD *result)
{
  *result = &unk_24C529000;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_LsdMapEditor(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  const void ****v10;
  void **v11;
  void *__p[2];
  char v14;
  _QWORD v15[4];
  char v16;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C529078;
  v4 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v9 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  if (v18)
  {
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v17))
    {
      v10 = (const void ****)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a1 + 24), v10);
    }
    else
    {
      v15[0] = "sdf/mapEditor.cpp";
      v15[1] = "Sdf_LsdMapEditor";
      v15[2] = 77;
      v15[3] = "pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_L"
               "sdMapEditor(const SdfSpecHandle &, const TfToken &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary]";
      v16 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"%s does not hold value of expected type.", (const char *)v11);
      if (v14 < 0)
        operator delete(__p[0]);
    }
  }
  sub_20BF4C2D8((uint64_t)v17);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__16Sdf_LsdMapEditorINS_12VtDictionaryEEC2ERKNS_9SdfHandleINS_7SdfSpecEEERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C1315EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v21;
  _QWORD *v22;
  _QWORD ***v23;
  unsigned int *v25;
  unsigned int v26;

  if (a15 < 0)
    operator delete(__p);
  sub_20BF4C2D8((uint64_t)&a21);
  sub_20BF49F14(v23, 0);
  if ((*v22 & 7) != 0)
  {
    v25 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::GetLocation(uint64_t a1)
{
  unint64_t v1;
  const char *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  const char *Text;
  const char *v5;
  char *v6;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0)
      v2 = *(const char **)v2;
  }
  else
  {
    v2 = "";
  }
  v3 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v8);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"field '%s' in <%s>", v5, v6, v2, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C1316EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::GetOwner@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = v2;
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::IsExpired(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::GetData(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Copy(uint64_t a1, const void ****a2)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a1 + 24), a2);
  return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v2;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  _QWORD v6[4];
  char v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Sdf", (uint64_t)"Sdf_LsdMapEditor::_UpdateDataInSpec");
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8))
    || (v6[0] = "sdf/mapEditor.cpp",
        v6[1] = "_UpdateDataInSpec",
        v6[2] = 163,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>:"
                ":_UpdateDataInSpec() [T = pxrInternal__aapl__pxrReserved__::VtDictionary]",
        v7 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "_owner", 0),
        (result & 1) != 0))
  {
    if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 24)))
    {
      v2 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    }
    else
    {
      v4 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      result = sub_20C131B44(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const void ****)(a1 + 24));
    }
  }
  while (v9--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__16Sdf_LsdMapEditorINS_12VtDictionaryEE17_UpdateDataInSpecEv(a1);
}

void sub_20C13184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Set(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 24), a2);
  sub_20BF4A9BC(v5, a3);
  return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Insert@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::VtDictionary::insert((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 24), a2, a3);
  if (*(_BYTE *)(a3 + 16))
    return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec(a1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Erase(uint64_t a1, const void **a2)
{
  uint64_t **v3;

  v3 = pxrInternal__aapl__pxrReserved__::VtDictionary::erase((uint64_t ***)(a1 + 24), a2);
  if (v3)
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec(a1);
  return v3 != 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::IsValidKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *result;

  v6 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
    return sub_20C13197C(result, a2, a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t *sub_20C13197C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, unsigned int **);
  uint64_t v4;
  unsigned int *v5[3];

  v5[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, unsigned int **))result[10];
  if (v3)
  {
    v4 = *result;
    v5[1] = (unsigned int *)&off_24C520700;
    sub_20BF77444(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C131A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::IsValidValue@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *result;

  v6 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
    return sub_20C131A98(result, a2, a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t *sub_20C131A98@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, _QWORD *);
  uint64_t v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, _QWORD *))result[11];
  if (v3)
  {
    v4 = *result;
    sub_20BF4C6D0(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C131B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C131B44(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ****a3)
{
  _BOOL8 v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C51D8C8;
  sub_20BF4D058(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C131BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>@<X0>(unsigned int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  uint64_t result;

  v6 = operator new(0x20uLL);
  result = pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_LsdMapEditor((uint64_t)v6, a1, a2);
  *a3 = v6;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__19Sdf_CreateMapEditorINS_12VtDictionaryEEENSt3__110unique_ptrINS_13Sdf_MapEditorIT_EENS2_14default_deleteIS6_EEEERKNS_9SdfHandleINS_7SdfSpecEEERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C131C34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_MapEditor<std::map<std::string,std::string>>::Sdf_MapEditor(_QWORD *result)
{
  *result = &unk_24C5290F0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Sdf_LsdMapEditor(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t v11;
  void **v12;
  void *__p[2];
  char v15;
  _QWORD v16[4];
  char v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C529168;
  v4 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v9 = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  if (v19)
  {
    if (sub_20C0302AC((pxrInternal__aapl__pxrReserved__::VtValue *)v18))
    {
      v11 = sub_20C02470C((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      if (v9 != v11)
        sub_20BDFC4AC((uint64_t **)(a1 + 24), *(__int128 **)v11, (__int128 *)(v11 + 8));
    }
    else
    {
      v16[0] = "sdf/mapEditor.cpp";
      v16[1] = "Sdf_LsdMapEditor";
      v16[2] = 77;
      v16[3] = "pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string, std::string>>::Sdf_LsdMapEditor("
               "const SdfSpecHandle &, const TfToken &) [T = std::map<std::string, std::string>]";
      v17 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v15 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"%s does not hold value of expected type.", (const char *)v12);
      if (v15 < 0)
        operator delete(__p[0]);
    }
  }
  sub_20BF4C2D8((uint64_t)v18);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__16Sdf_LsdMapEditorINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_NS1_4lessIS8_EENS6_INS1_4pairIKS8_S8_EEEEEEEC2ERKNS_9SdfHandleINS_7SdfSpecEEERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C131E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD **v24;
  unsigned int *v26;
  unsigned int v27;

  if (a15 < 0)
    operator delete(__p);
  sub_20BF4C2D8((uint64_t)&a21);
  sub_20BDE9D48(v23, *v24);
  if ((*v22 & 7) != 0)
  {
    v26 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::GetLocation(uint64_t a1)
{
  unint64_t v1;
  const char *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  const char *Text;
  const char *v5;
  char *v6;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0)
      v2 = *(const char **)v2;
  }
  else
  {
    v2 = "";
  }
  v3 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v8);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"field '%s' in <%s>", v5, v6, v2, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C131F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::GetOwner@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = v2;
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::IsExpired(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::GetData(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;

  v3 = (uint64_t **)(a1 + 24);
  if (v3 != (uint64_t **)a2)
    sub_20BDFC4AC(v3, *(__int128 **)a2, (__int128 *)(a2 + 8));
  return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v2;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  _QWORD v6[4];
  char v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Sdf", (uint64_t)"Sdf_LsdMapEditor::_UpdateDataInSpec");
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8))
    || (v6[0] = "sdf/mapEditor.cpp",
        v6[1] = "_UpdateDataInSpec",
        v6[2] = 163,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string, std::string>>::_UpdateData"
                "InSpec() [T = std::map<std::string, std::string>]",
        v7 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "_owner", 0),
        (result & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v2 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      result = sub_20C1322E8(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const void ***)(a1 + 24));
    }
    else
    {
      v4 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    }
  }
  while (v9--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__16Sdf_LsdMapEditorINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_NS1_4lessIS8_EENS6_INS1_4pairIKS8_S8_EEEEEEE17_UpdateDataInSpecEv(a1);
}

void sub_20C13206C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB24F4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Set(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v5;
  __int128 *v7;

  v7 = a2;
  v5 = sub_20BDDDFDC((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&unk_20CAC184C, &v7);
  std::string::operator=((std::string *)(v5 + 7), a3);
  return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Insert(uint64_t a1, const void **a2)
{
  uint64_t *v3;
  char v4;

  v3 = sub_20BE9A330((uint64_t **)(a1 + 24), a2, (__int128 *)a2);
  if ((v4 & 1) != 0)
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec(a1);
  return v3;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Erase(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = sub_20BE9DD48((uint64_t **)(a1 + 24), a2);
  if (v3)
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec(a1);
  return v3 != 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::IsValidKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *result;

  v6 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
    return sub_20C13197C(result, a2, a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::IsValidValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *result;

  v6 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
    return sub_20C132230(result, a2, a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t *sub_20C132230@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, unsigned int **);
  uint64_t v4;
  unsigned int *v5[3];

  v5[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, unsigned int **))result[11];
  if (v3)
  {
    v4 = *result;
    v5[1] = (unsigned int *)&off_24C520700;
    sub_20BF77444(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C1322CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C1322E8(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ***a3)
{
  _BOOL8 v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526858;
  sub_20C0307AC(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C132374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<std::map<std::string,std::string>>@<X0>(unsigned int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  uint64_t result;

  v6 = operator new(0x30uLL);
  result = pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Sdf_LsdMapEditor((uint64_t)v6, a1, a2);
  *a3 = v6;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__19Sdf_CreateMapEditorINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_NS1_4lessIS8_EENS6_INS1_4pairIKS8_S8_EEEEEEEENS1_10unique_ptrINS_13Sdf_MapEditorIT_EENS1_14default_deleteISJ_EEEERKNS_9SdfHandleINS_7SdfSpecEEERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C1323D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_MapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Sdf_MapEditor(_QWORD *result)
{
  *result = &unk_24C5291E0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Sdf_LsdMapEditor(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t v11;
  void **v12;
  void *__p[2];
  char v15;
  _QWORD v16[4];
  char v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C529258;
  v4 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v9 = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  if (v19)
  {
    if (sub_20C0E3D20((pxrInternal__aapl__pxrReserved__::VtValue *)v18))
    {
      v11 = sub_20C13261C((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      if (v9 != v11)
        sub_20C0E3D98((uint64_t **)(a1 + 24), *(_QWORD **)v11, (_QWORD *)(v11 + 8));
    }
    else
    {
      v16[0] = "sdf/mapEditor.cpp";
      v16[1] = "Sdf_LsdMapEditor";
      v16[2] = 77;
      v16[3] = "pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, px"
               "rInternal__aapl__pxrReserved__::SdfPath>>::Sdf_LsdMapEditor(const SdfSpecHandle &, const TfToken &) [T = "
               "std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>]";
      v17 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v15 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"%s does not hold value of expected type.", (const char *)v12);
      if (v15 < 0)
        operator delete(__p[0]);
    }
  }
  sub_20BF4C2D8((uint64_t)v18);
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__16Sdf_LsdMapEditorINSt3__13mapINS_7SdfPathES3_NS1_4lessIS3_EENS1_9allocatorINS1_4pairIKS3_S3_EEEEEEEC2ERKNS_9SdfHandleINS_7SdfSpecEEERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C1325B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD **v24;
  unsigned int *v26;
  unsigned int v27;

  if (a15 < 0)
    operator delete(__p);
  sub_20BF4C2D8((uint64_t)&a21);
  sub_20BFE4CE8(v23, *v24);
  if ((*v22 & 7) != 0)
  {
    v26 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20C13261C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20C0E3D20(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C132F38, (uint64_t)&stru_24C528000);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::GetLocation(uint64_t a1)
{
  unint64_t v1;
  const char *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  const char *Text;
  const char *v5;
  char *v6;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0)
      v2 = *(const char **)v2;
  }
  else
  {
    v2 = "";
  }
  v3 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v8);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"field '%s' in <%s>", v5, v6, v2, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C132718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::GetOwner@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = v2;
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::IsExpired(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::GetData(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Copy(uint64_t a1, uint64_t **a2)
{
  uint64_t **v3;

  v3 = (uint64_t **)(a1 + 24);
  if (v3 != a2)
    sub_20C0E3D98(v3, *a2, a2 + 1);
  return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v2;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  _QWORD v6[4];
  char v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Sdf", (uint64_t)"Sdf_LsdMapEditor::_UpdateDataInSpec");
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8))
    || (v6[0] = "sdf/mapEditor.cpp",
        v6[1] = "_UpdateDataInSpec",
        v6[2] = 163,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPa"
                "th, pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec() [T = std::map<pxrInternal__aapl__px"
                "rReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>]",
        v7 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "_owner", 0),
        (result & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v2 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      result = sub_20C132BF4(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), a1 + 24);
    }
    else
    {
      v4 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    }
  }
  while (v9--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__16Sdf_LsdMapEditorINSt3__13mapINS_7SdfPathES3_NS1_4lessIS3_EENS1_9allocatorINS1_4pairIKS3_S3_EEEEEEE17_UpdateDataInSpecEv(a1);
}

void sub_20C132878(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB24F4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Set(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v5;
  _DWORD *v7;

  v7 = a2;
  v5 = sub_20C0E4490((uint64_t **)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)&unk_20CAC184C, &v7);
  sub_20C01A074((int *)v5 + 9, a3);
  sub_20C01A0C8((int *)v5 + 10, a3 + 1);
  return pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  char v4;

  v3 = sub_20C132FB4((uint64_t **)(a1 + 24), a2, a2);
  if ((v4 & 1) != 0)
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec(a1);
  return v3;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Erase(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;

  v3 = sub_20C133060((uint64_t **)(a1 + 24), a2);
  if (v3)
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec(a1);
  return v3 != 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::IsValidKey@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *result;

  v6 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
    return sub_20C1329F0(result, a2, a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t *sub_20C1329F0@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, int *);
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, int *))result[10];
  if (v3)
  {
    v5 = *result;
    v8 = (char *)&off_24C524B10 + 1;
    sub_20BFD6E54(&v6, a2);
    sub_20BFD6EA4(&v7, a2 + 1);
    v3(v5, &v6);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)&v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C132AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::IsValidValue@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *result;

  v6 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
    return sub_20C132B24(result, a2, a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t *sub_20C132B24@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, int *);
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, int *))result[11];
  if (v3)
  {
    v5 = *result;
    v8 = (char *)&off_24C524B10 + 1;
    sub_20BFD6E54(&v6, a2);
    sub_20BFD6EA4(&v7, a2 + 1);
    v3(v5, &v6);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)&v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C132BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C132BF4(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL8 v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C528048;
  sub_20C0E4994(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C132C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>@<X0>(unsigned int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  uint64_t result;

  v6 = operator new(0x30uLL);
  result = pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Sdf_LsdMapEditor((uint64_t)v6, a1, a2);
  *a3 = v6;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__19Sdf_CreateMapEditorINSt3__13mapINS_7SdfPathES3_NS1_4lessIS3_EENS1_9allocatorINS1_4pairIKS3_S3_EEEEEEEENS1_10unique_ptrINS_13Sdf_MapEditorIT_EENS1_14default_deleteISF_EEEERKNS_9SdfHandleINS_7SdfSpecEEERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C132CE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C132CF8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a1 = &unk_24C529078;
  sub_20BF49F14((_QWORD ***)(a1 + 24), 0);
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C132D58(_QWORD ***a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = (_QWORD **)&unk_24C529078;
  sub_20BF49F14(a1 + 3, 0);
  v2 = (unint64_t)a1[2];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_20C132DB8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a1 = &unk_24C529168;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C132E18(_QWORD **a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = &unk_24C529168;
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  v2 = (unint64_t)a1[2];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_20C132E78(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a1 = &unk_24C529258;
  sub_20BFE4CE8(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C132ED8(_QWORD **a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = &unk_24C529258;
  sub_20BFE4CE8((uint64_t)(a1 + 3), a1[4]);
  v2 = (unint64_t)a1[2];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  operator delete(a1);
}

_QWORD *sub_20C132F38@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *a1 = result;
  a1[1] = sub_20C132F84;
  a1[2] = &stru_24C528000;
  return result;
}

void sub_20C132F84(_QWORD **a1)
{
  if (a1)
  {
    sub_20BFE4CE8((uint64_t)a1, a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_20C132FB4(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20BFD74FC((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    v9[1] = a1 + 1;
    sub_20C0D9B58((_DWORD *)v6 + 7, a3);
    v10 = 1;
    sub_20BDDE1B4(a1, v11, v7, v6);
    v9[0] = 0;
    sub_20BFE4C64((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_20C133060(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_20BFE4AF0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_20BE10B80(a1, v3);
  sub_20BFE4CA8((_DWORD *)v4 + 7);
  operator delete(v4);
  return 1;
}

void sub_20C1330B8()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfNamespaceEditDetail::Error");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529380, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfNamespaceEditDetail::Unbatched");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529380, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfNamespaceEditDetail::Okay");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529380, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C1331C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::GetChild(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  _DWORD v8[5];
  _QWORD **v9;
  int v10;
  int v11;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v8);
  sub_20BFD265C(&v7);
  sub_20C13675C((uint64_t)&v7, a2);
  v4 = sub_20C1374B0(*((_QWORD *)this + 3), (uint64_t)&v7);
  if ((_QWORD *)(*((_QWORD *)this + 3) + 8) == v4)
    v5 = 0;
  else
    v5 = v4[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  sub_20C136834(&v9, 0);
  sub_20C136BA4((uint64_t)&v7);
  return v5;
}

{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  _DWORD v8[5];
  _QWORD **v9;
  int v10;
  int v11;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v8);
  sub_20BFD265C(&v7);
  sub_20C13675C((uint64_t)&v7, a2);
  v4 = sub_20C1374B0(*((_QWORD *)this + 3), (uint64_t)&v7);
  if ((_QWORD *)(*((_QWORD *)this + 3) + 8) == v4)
    v5 = 0;
  else
    v5 = v4[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  sub_20C136834(&v9, 0);
  sub_20C136BA4((uint64_t)&v7);
  return v5;
}

void sub_20C1332B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1332C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1332C8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  sub_20C136834((_QWORD ***)(a1 + 24), 0);
  return sub_20C136BA4(a1);
}

void sub_20C1333BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1332C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *NameToken;
  _QWORD *v5;
  uint64_t **v6;
  void *v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  int v12;
  _DWORD v13[5];
  _QWORD **v14;
  int v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(&v12);
  NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
  sub_20C136918((uint64_t)&v12, NameToken);
  v5 = sub_20C1374B0(*((_QWORD *)this + 3), (uint64_t)&v12);
  if ((_QWORD *)(*((_QWORD *)this + 3) + 8) == v5)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v11, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)((char *)this + 32), 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_20BFD265C(&v10);
    v6 = (uint64_t **)*((_QWORD *)this + 3);
    v7 = operator new(0x28uLL);
    sub_20C136990((uint64_t)v7, (uint64_t)this, (uint64_t)&v12, &v11);
    v10 = v7;
    v5 = sub_20C1375D0(v6, (uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
    sub_20BFD265C(&v11);
  }
  v8 = v5[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  sub_20C136834(&v14, 0);
  sub_20C136BA4((uint64_t)&v12);
  return v8;
}

void sub_20C13350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  sub_20BFD1A18(&a12);
  sub_20C1332C8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, BOOL *a4)
{
  _QWORD *v8;
  BOOL v9;
  uint64_t **v10;
  void *v11;
  uint64_t v12;
  void *v14;
  int v15;
  _DWORD v16[3];
  _BYTE v17[24];
  _QWORD **v18;
  int v19;
  int v20;

  sub_20BFD6E54(&v15, a2);
  sub_20BFD6EA4(v16, (_DWORD *)a2 + 1);
  v16[1] = 2;
  sub_20C136BFC((uint64_t)v17, (uint64_t)&v15);
  sub_20C136BA4((uint64_t)&v15);
  v8 = sub_20C1374B0(*((_QWORD *)this + 3), (uint64_t)v17);
  v9 = *((_QWORD *)this + 3) + 8 == (_QWORD)v8;
  *a4 = v9;
  if (v9)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)((char *)this + 32), a3, &v15);
    v10 = (uint64_t **)*((_QWORD *)this + 3);
    v11 = operator new(0x28uLL);
    sub_20C136990((uint64_t)v11, (uint64_t)this, (uint64_t)v17, &v15);
    v14 = v11;
    v8 = sub_20C1375D0(v10, (uint64_t *)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
    sub_20BFD265C(&v15);
  }
  v12 = v8[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  sub_20C136834(&v18, 0);
  sub_20C136BA4((uint64_t)v17);
  return v12;
}

void sub_20C133684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char a12)
{
  void *v12;

  operator delete(v12);
  sub_20BFD1A18(&a10);
  sub_20C1332C8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 || !*(_DWORD *)(a1 + 8))
  {
    if (v4)
      goto LABEL_4;
    goto LABEL_10;
  }
  v9 = "sdf/namespaceEdit.cpp";
  v10 = "Remove";
  v11 = 350;
  v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
  v13 = 0;
  if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "!IsRemoved()", 0))
  {
    v8 = "Coding error: Node has no parent";
    goto LABEL_18;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_10:
    v9 = "sdf/namespaceEdit.cpp";
    v10 = "Remove";
    v11 = 354;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
    v13 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "_parent", 0))
    {
      v8 = "Coding error: Removing root";
      goto LABEL_18;
    }
    v4 = *(_QWORD *)(a1 + 16);
  }
LABEL_4:
  v5 = sub_20C1374B0(*(_QWORD *)(v4 + 24), a1);
  if ((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 8) == v5)
  {
    v9 = "sdf/namespaceEdit.cpp";
    v10 = "Remove";
    v11 = 360;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
    v13 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "i != _parent->_children->end()", 0) & 1) == 0)
    {
      v8 = "Coding error: Node not found under parent";
LABEL_18:
      MEMORY[0x212B929D0](a2, v8);
      return 0;
    }
  }
  if (v5[4] != a1)
  {
    v9 = "sdf/namespaceEdit.cpp";
    v10 = "Remove";
    v11 = 365;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
    v13 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "i->get() == this", 0) & 1) == 0)
    {
      v8 = "Coding error: Found wrong node by key";
      goto LABEL_18;
    }
  }
  sub_20BE10B80(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 24), v5);
  v9 = (char *)v5;
  v6 = 1;
  BYTE1(v10) = 1;
  v5[4] = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C137770((uint64_t **)&v9);
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  const char *v10;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  int v17;
  _DWORD v18[5];
  _QWORD **v19;
  int v20;
  int v21;
  uint64_t v22;

  v22 = a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_20BFD265C(&v17);
  sub_20C13675C((uint64_t)&v17, a3);
  if ((_QWORD *)(*(_QWORD *)(a1 + 24) + 8) != sub_20C1374B0(*(_QWORD *)(a1 + 24), (uint64_t)&v17))
  {
    v12 = "sdf/namespaceEdit.cpp";
    v13 = "Reparent";
    v14 = 390;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(_Node *, const SdfPath &, std::string *)";
    v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_children->find(keyNode) == _children->end()", 0) & 1) == 0)
    {
      v10 = "Coding error: Object with new path already exists";
LABEL_12:
      MEMORY[0x212B929D0](a4, v10);
      goto LABEL_13;
    }
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    if (*(_DWORD *)(a2 + 8))
    {
      v12 = "sdf/namespaceEdit.cpp";
      v13 = "Reparent";
      v14 = 396;
      v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(_Node *, const SdfPath &, std::string *)";
      v16 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "!node->IsRemoved()", 0) & 1) == 0)
      {
        v10 = "Coding error: Object at path has been removed";
        goto LABEL_12;
      }
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(a2, a4))
  {
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
  sub_20C136C3C(a2, (uint64_t)&v17);
  sub_20C1375D0(*(uint64_t ***)(a1 + 24), &v22);
  if ((v8 & 1) == 0)
  {
    v12 = "sdf/namespaceEdit.cpp";
    v13 = "Reparent";
    v14 = 410;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(_Node *, const SdfPath &, std::string *)";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_children->emplace(node).second", 0);
  }
  *(_QWORD *)(v22 + 16) = a1;
  v9 = 1;
LABEL_14:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  sub_20C136834(&v19, 0);
  sub_20C136BA4((uint64_t)&v17);
  return v9;
}

void sub_20C133AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C1332C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::FindOrCreateOriginalPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *NodeAtPath;

  NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath(this, a2);
  if (NodeAtPath)
    return (uint64_t *)((char *)NodeAtPath + 32);
  else
    return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *Child;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t *TargetPath;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  BOOL v11;
  pxrInternal__aapl__pxrReserved__::SdfPath **v12;

  if (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_IsDeadspace(this, a2))
    return 0;
  v11 = 0;
  Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)((char *)this + 8);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, (uint64_t *)&v9);
  v5 = v9;
  for (i = v10; v5 != i; v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(v5))
    {
      TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v5);
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_UneditPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, (uint64_t *)&v12);
      Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(Child, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v11);
      if (v11 && *(_BYTE *)this)
        pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddBackpointer((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, Child);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      sub_20BFD265C(&v12);
    }
    else
    {
      Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(Child, v5);
    }
  }
  v12 = &v9;
  sub_20BFD6F90((void ***)&v12);
  return Child;
}

void sub_20C133C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BFD6F90(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL8 IsDeadspace;
  uint64_t *v7;

  IsDeadspace = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_IsDeadspace(this, a2);
  if (IsDeadspace)
  {
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsDeadspace);
    sub_20BFD6E54(a3, v7);
    sub_20BFD6EA4((_DWORD *)a3 + 1, (_DWORD *)v7 + 1);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_UneditPath(this, a2, a3);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_IsDeadspace(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v4 = (_QWORD *)((char *)this + 56);
  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5)
  {
    do
    {
      v6 = sub_20BFD758C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28));
      v7 = v5 + 1;
      if (v6)
      {
        v7 = v5;
        v4 = v5;
      }
      v5 = (_QWORD *)*v7;
    }
    while (*v7);
  }
  if (v4 == *((_QWORD **)this + 6))
    return 0;
  v8 = (_QWORD *)*v4;
  if (*v4)
  {
    do
    {
      v9 = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      v9 = (_QWORD *)v4[2];
      v10 = *v9 == (_QWORD)v4;
      v4 = v9;
    }
    while (v10);
  }
  return pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28));
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_UneditPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t Child;
  char *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v12;

  v5 = (char *)this + 8;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, (uint64_t *)&v10);
  v6 = v10;
  v7 = v11;
  if (v10 == v11)
  {
    v9 = v5;
LABEL_6:
    v12 = &v10;
    sub_20BFD6F90((void ***)&v12);
    sub_20BFD6E54(a3, (_DWORD *)v9 + 8);
    sub_20BFD6EA4((_DWORD *)a3 + 1, (_DWORD *)v9 + 9);
  }
  else
  {
    while (1)
    {
      Child = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::GetChild((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)v5, v6);
      v9 = (char *)Child;
      if (!Child)
        break;
      v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
      v5 = (char *)Child;
      if (v6 == v7)
        goto LABEL_6;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v6, &v12);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32), 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_20BFD265C(&v12);
    v12 = &v10;
    sub_20BFD6F90((void ***)&v12);
  }
}

void sub_20C133E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_20BFD1A18(&a12);
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::Apply(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *a1, _DWORD *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2))
    return pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Remove(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a3);
  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
    return 1;
  return pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v6, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Remove(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *NodeAtPath;
  uint64_t v7;
  uint64_t result;
  void *v9;
  _QWORD v10[4];
  char v11;

  NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(a1, a2);
  if (!NodeAtPath)
  {
    v10[0] = "sdf/namespaceEdit.cpp";
    v10[1] = "_Remove";
    v10[2] = 514;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Remove(const SdfPath &, std::string *)";
    v11 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "node", 0) & 1) != 0)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(0, a3) & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      MEMORY[0x212B929D0](a3, "Coding error: Object at path doesn't exist");
    }
    return 0;
  }
  v7 = (uint64_t)NodeAtPath;
  result = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove((uint64_t)NodeAtPath, a3);
  if (!(_DWORD)result)
    return result;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v7 + 36));
  sub_20BFD265C((_DWORD *)(v7 + 32));
  sub_20C136834((_QWORD ***)(v7 + 24), 0);
  v9 = (void *)sub_20C136BA4(v7);
  operator delete(v9);
LABEL_4:
  if (*(_BYTE *)a1)
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveBackpointers(a1, a2);
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace((uint64_t **)a1, a2);
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *NodeAtPath;
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *v9;
  uint64_t result;
  const char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;

  NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(a1, a2);
  if (!NodeAtPath)
  {
    v12 = "sdf/namespaceEdit.cpp";
    v13 = "_Move";
    v14 = 546;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(const SdfPath &, const SdfPath &, std::string *)";
    v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "node", 0) & 1) == 0)
    {
      v11 = "Coding error: Object at path doesn't exist";
LABEL_12:
      MEMORY[0x212B929D0](a4, v11);
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v12);
  v9 = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_20BFD265C(&v12);
  if (!v9)
  {
    v12 = "sdf/namespaceEdit.cpp";
    v13 = "_Move";
    v14 = 553;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(const SdfPath &, const SdfPath &, std::string *)";
    v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "newParent", 0) & 1) == 0)
    {
      v11 = "Coding error: New parent object doesn't exist";
      goto LABEL_12;
    }
  }
  result = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent((uint64_t)v9, (uint64_t)NodeAtPath, a3, a4);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)a1)
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FixBackpointers(a1, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants(a1, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace((uint64_t **)a1, a2);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveDeadspace((uint64_t **)a1, a3);
    return 1;
  }
  return result;
}

void sub_20C1341B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *Child;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t v4;
  uint64_t v6[3];
  void **v7;

  Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)((char *)this + 8);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, v6);
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6[0];
  v4 = v6[1];
  while (v3 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4)
  {
    Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::GetChild(Child, v3);
    if (!Child)
      break;
    v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 8);
  }
  v7 = (void **)v6;
  sub_20BFD6F90(&v7);
  return Child;
}

void sub_20C13423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddBackpointer(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *a3)
{
  uint64_t *v3;
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *v5;
  _DWORD *v6;

  v5 = a3;
  v6 = a2;
  v3 = sub_20C1377B0(this + 9, a2, (uint64_t)&unk_20CAC184C, &v6);
  return sub_20BEB968C((uint64_t **)v3 + 5, (unint64_t *)&v5, (uint64_t *)&v5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveBackpointers(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;

  v3 = (uint64_t *)((char *)this + 80);
  v4 = (_QWORD *)*((_QWORD *)this + 10);
  if (v4)
  {
    v6 = (uint64_t *)((char *)this + 80);
    do
    {
      v7 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), a2);
      v8 = v4 + 1;
      if (!v7)
      {
        v8 = v4;
        v6 = v4;
      }
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v6 != v3)
    {
      v9 = v6;
      while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4), a2))
      {
        v10 = (uint64_t *)v9[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v9[2];
            v12 = *v11 == (_QWORD)v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
        if (v11 == v3)
          return sub_20C137994((uint64_t **)this + 9, v6, v3);
      }
      v3 = v9;
    }
  }
  else
  {
    v6 = (uint64_t *)((char *)this + 80);
  }
  return sub_20C137994((uint64_t **)this + 9, v6, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;

  if (*(_QWORD *)a2 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this))
    return (uint64_t)sub_20C0A7BE0(this + 6, a2, a2);
  v5[0] = "sdf/namespaceEdit.cpp";
  v5[1] = "_AddDeadspace";
  v5[2] = 645;
  v5[3] = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace(const SdfPath &)";
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "path != SdfPath::AbsoluteRootPath()", 0);
  if ((result & 1) != 0)
    return (uint64_t)sub_20C0A7BE0(this + 6, a2, a2);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FixBackpointers(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  _QWORD *v26;
  uint64_t *v27;
  int v28;
  _QWORD *v29;
  const char *v30;
  char *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;

  v6 = (uint64_t *)((char *)this + 80);
  v5 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v5)
  {
    v10 = (uint64_t *)((char *)this + 80);
    v7 = (uint64_t *)((char *)this + 80);
LABEL_41:
    v44 = 0;
    v45 = 0;
    v43 = (uint64_t *)&v44;
    goto LABEL_42;
  }
  v7 = (uint64_t *)((char *)this + 80);
  do
  {
    v8 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4), a2);
    v9 = v5 + 1;
    if (!v8)
    {
      v9 = v5;
      v7 = v5;
    }
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  v10 = v6;
  if (v7 != v6)
  {
    v10 = v7;
    while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4), a2))
    {
      v11 = (uint64_t *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
      if (v12 == v6)
      {
        v10 = v6;
        break;
      }
    }
  }
  if (v7 == v10)
    goto LABEL_41;
  v14 = v7;
  do
  {
    v15 = (uint64_t *)v14[5];
    if (v15 != v14 + 6)
    {
      do
      {
        v16 = v15[4];
        if (*(_DWORD *)(v16 + 8) != 2)
          sub_20BF1C1FC();
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15[4], a2, a3, 0);
        LODWORD(v38) = (_DWORD)v43;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v43);
        HIDWORD(v38) = HIDWORD(v43);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v43 + 1);
        LODWORD(v39) = 2;
        sub_20C136C3C(v16, (uint64_t)&v38);
        sub_20C136BA4((uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
        sub_20BFD265C(&v43);
        v17 = (uint64_t *)v15[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v15[2];
            v13 = *v18 == (_QWORD)v15;
            v15 = v18;
          }
          while (!v13);
        }
        v15 = v18;
      }
      while (v18 != v14 + 6);
    }
    v19 = (uint64_t *)v14[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (uint64_t *)v14[2];
        v13 = *v20 == (_QWORD)v14;
        v14 = v20;
      }
      while (!v13);
    }
    v14 = v20;
  }
  while (v20 != v10);
  v44 = 0;
  v45 = 0;
  v43 = (uint64_t *)&v44;
  v21 = v7;
  do
  {
    v38 = v21 + 4;
    v22 = sub_20C1377B0(&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 4), (uint64_t)&unk_20CAC184C, (_DWORD **)&v38);
    sub_20BF07C64(v22 + 5, (uint64_t)(v21 + 5));
    v23 = (uint64_t *)v21[1];
    if (v23)
    {
      do
      {
        v24 = v23;
        v23 = (uint64_t *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        v24 = (uint64_t *)v21[2];
        v13 = *v24 == (_QWORD)v21;
        v21 = v24;
      }
      while (!v13);
    }
    v21 = v24;
  }
  while (v24 != v10);
LABEL_42:
  v25 = (uint64_t **)(v6 - 1);
  sub_20C137994((uint64_t **)v6 - 1, v7, v10);
  v26 = (_QWORD *)*v6;
  if (!*v6)
    goto LABEL_49;
  v27 = v6;
  do
  {
    v28 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v26 + 4), a3);
    v29 = v26 + 1;
    if (!v28)
    {
      v29 = v26;
      v27 = v26;
    }
    v26 = (_QWORD *)*v29;
  }
  while (*v29);
  if (v27 == v6
    || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 4), a2)
    || (v38 = (uint64_t *)"sdf/namespaceEdit.cpp",
        v39 = "_FixBackpointers",
        v40 = 613,
        v41 = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FixBackpointers(const SdfPath &, const SdfPath &)",
        v42 = 0,
        v36 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Found backpointers under new path", v30, v31), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "i == _nodesWithPath.end() || !i->first.HasPrefix(currentPath)", v36) & 1) != 0))
  {
LABEL_49:
    v32 = v43;
    if (v43 != (uint64_t *)&v44)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v37, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v32 + 4), a2, a3, 1);
        v38 = &v37;
        v33 = sub_20C1379F8(v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (uint64_t)&unk_20CAC184C, (_DWORD **)&v38);
        sub_20BF07C64(v33 + 5, (uint64_t)(v32 + 5));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
        sub_20BFD265C(&v37);
        v34 = (uint64_t *)v32[1];
        if (v34)
        {
          do
          {
            v35 = v34;
            v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (uint64_t *)v32[2];
            v13 = *v35 == (_QWORD)v32;
            v32 = v35;
          }
          while (!v13);
        }
        v32 = v35;
      }
      while (v35 != (uint64_t *)&v44);
    }
  }
  sub_20C137430((uint64_t)&v43, v44);
}

void sub_20C1347EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  sub_20C137430((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  char *v20;
  void **v21[4];
  char v22;
  char *v23;
  char *v24;
  unint64_t v25;
  const char *v26;
  char v27;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  if (*(_QWORD *)a2 != *(_QWORD *)v6
    || (v23 = "sdf/namespaceEdit.cpp",
        v24 = "_MoveDeadspaceDescendants",
        v25 = 675,
        v26 = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants(const SdfPath"
              " &, const SdfPath &)",
        v27 = 0,
        v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "from != SdfPath::AbsoluteRootPath()", 0), (_DWORD)v6))
  {
    if (*(_QWORD *)a3 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6)
      || (v21[0] = (void **)"sdf/namespaceEdit.cpp",
          v21[1] = (void **)"_MoveDeadspaceDescendants",
          v21[2] = (void **)676,
          v21[3] = (void **)"void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants"
                            "(const SdfPath &, const SdfPath &)",
          v22 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "to != SdfPath::AbsoluteRootPath()", 0) & 1) != 0))
    {
      v8 = (_QWORD *)*((_QWORD *)this + 6);
      v7 = (char *)this + 48;
      v9 = sub_20C134B30(v8, (_QWORD *)v7 + 1, a2, &v23);
      v10 = v9;
      v12 = v11;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      if (v9 != v11)
      {
        v13 = v9;
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), a2, a3, 1);
          v14 = v24;
          if ((unint64_t)v24 >= v25)
          {
            v15 = (char *)sub_20C12C530((uint64_t *)&v23, v21);
          }
          else
          {
            sub_20BFD38A4(v24, v21);
            sub_20BFD38DC((_DWORD *)v14 + 1, (_DWORD *)v21 + 1);
            v15 = v14 + 8;
          }
          v24 = v15;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
          sub_20BFD265C(v21);
          v16 = (uint64_t *)v13[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v13[2];
              v18 = *v17 == (_QWORD)v13;
              v13 = v17;
            }
            while (!v18);
          }
          v13 = v17;
        }
        while (v17 != v12);
      }
      sub_20C137C48((uint64_t **)v7, v10, v12);
      v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23;
      v20 = v24;
      while (v19 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)v20)
      {
        sub_20BFD72BC((uint64_t **)v7, (_QWORD *)v7 + 1, v19, v19);
        v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 + 8);
      }
      v21[0] = (void **)&v23;
      sub_20BFD6F90(v21);
    }
  }
}

void sub_20C134A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveDeadspace(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;

  if (*(_QWORD *)a2 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this))
    return sub_20C137B08(this + 6, a2);
  v5[0] = "sdf/namespaceEdit.cpp";
  v5[1] = "_RemoveDeadspace";
  v5[2] = 656;
  v5[3] = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveDeadspace(const SdfPath &)";
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "path != SdfPath::AbsoluteRootPath()", 0);
  if ((result & 1) != 0)
    return sub_20C137B08(this + 6, a2);
  return result;
}

_QWORD *sub_20C134B30(_QWORD *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;

  v18 = a4;
  v6 = sub_20C137B60(a1, a2, a3);
  v7 = v6;
  if (v6 != a2)
  {
    v8 = 0;
    v9 = v6;
    do
    {
      v10 = (_QWORD *)v9[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v9[2];
          v12 = *v11 == (_QWORD)v9;
          v9 = v11;
        }
        while (!v12);
      }
      ++v8;
      v9 = v11;
    }
    while (v11 != a2);
    v13 = v6;
    do
    {
      v14 = v8 >> 1;
      v18 = v13;
      sub_20BE754A0(&v18, v8 >> 1);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28), a3))
      {
        v15 = v18;
        v16 = (_QWORD *)v18[1];
        if (v16)
        {
          do
          {
            v13 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v15[2];
            v12 = *v13 == (_QWORD)v15;
            v15 = v13;
          }
          while (!v12);
        }
        v14 = v8 + ~v14;
      }
      v8 = v14;
    }
    while (v14);
  }
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, _DWORD *a2)
{
  _BOOL4 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  sub_20C136EC8(&v15);
  v6 = *(_QWORD *)a2 != v15 || *((_QWORD *)a2 + 1) != v16 || a2[4] != (unint64_t)v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v6)
  {
    v7 = sub_20BDDC1C8(a1, (uint64_t)"(", 1);
    v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    v9 = sub_20BDDC1C8(v8, (uint64_t)",", 1);
    v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
    sub_20BDDC1C8(v10, (uint64_t)",", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = ")";
    v13 = 1;
  }
  else
  {
    v12 = "()";
    v11 = a1;
    v13 = 2;
  }
  return sub_20BDDC1C8(v11, (uint64_t)v12, v13);
}

_DWORD *sub_20C134DB8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

void sub_20C134ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)(v17 - 40) = &a9;
  sub_20BDE5038((void ***)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C134F0C(_DWORD *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C134FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail *pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail(pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail *this)
{
  *(_DWORD *)this = 2;
  sub_20C136EC8((_DWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

{
  *(_DWORD *)this = 2;
  sub_20C136EC8((_DWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail(uint64_t a1, int a2, _DWORD *a3, __int128 *a4)
{
  _BYTE *v7;
  __int128 v8;

  *(_DWORD *)a1 = a2;
  sub_20BFD6E54((_DWORD *)(a1 + 4), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 8), a3 + 1);
  sub_20BFD6E54((_DWORD *)(a1 + 12), a3 + 2);
  sub_20BFD6EA4((_DWORD *)(a1 + 16), a3 + 3);
  *(_DWORD *)(a1 + 20) = a3[4];
  v7 = (_BYTE *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

void sub_20C1350D4(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20C134DB8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_QWORD *)(a1 + 4) != *(_QWORD *)(a2 + 4)
    || *(_QWORD *)(a1 + 12) != *(_QWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  v2 = *(unsigned __int8 *)(a1 + 47);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 47);
  else
    v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned __int8 *)(a2 + 47);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 32);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 24);
  v9 = *(unsigned __int8 **)(a2 + 24);
  v7 = (unsigned __int8 *)(a2 + 24);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 32)) == 0;
  if (!*(_BYTE *)(a1 + 47))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator!=(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator==(a1, a2) ^ 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, unsigned int *a2)
{
  int v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  LODWORD(__p) = 2;
  sub_20C136EC8((_DWORD *)&__p + 1);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator==((uint64_t)a2, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C((_DWORD *)&v25 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C((_DWORD *)&__p + 1);
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C529380, *a2, (uint64_t)&__p);
    if ((v27 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v27 & 0x80u) == 0)
      v6 = v27;
    else
      v6 = v25;
    v7 = sub_20BDDC1C8(a1, (uint64_t)p_p, v6);
  }
  else
  {
    v8 = sub_20BDDC1C8(a1, (uint64_t)"(", 1);
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C529380, *a2, (uint64_t)&__p);
    if ((v27 & 0x80u) == 0)
      v9 = &__p;
    else
      v9 = __p;
    if ((v27 & 0x80u) == 0)
      v10 = v27;
    else
      v10 = v25;
    v11 = sub_20BDDC1C8(v8, (uint64_t)v9, v10);
    v12 = sub_20BDDC1C8(v11, (uint64_t)",", 1);
    v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, a2 + 1);
    v14 = sub_20BDDC1C8(v13, (uint64_t)",", 1);
    v17 = *((_QWORD *)a2 + 3);
    v16 = a2 + 6;
    v15 = v17;
    v18 = *((char *)v16 + 23);
    if (v18 >= 0)
      v19 = (uint64_t)v16;
    else
      v19 = v15;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)v16 + 23);
    else
      v20 = *((_QWORD *)v16 + 1);
    v21 = sub_20BDDC1C8(v14, v19, v20);
    v7 = sub_20BDDC1C8(v21, (uint64_t)")", 1);
  }
  v22 = v7;
  if ((char)v27 < 0)
    operator delete(__p);
  return v22;
}

{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  void *__p[2];
  unsigned __int8 v9;
  std::locale v10;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&stru_24C527CB0, *a2, (uint64_t)__p);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a1, (uint64_t)v3, v4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v10, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C13536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C135394(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
  sub_20BFD265C((_DWORD *)(a1 + 12));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8));
  sub_20BFD265C((_DWORD *)(a1 + 4));
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string *v9[3];
  std::string __p;
  std::string **v11;

  memset(v9, 0, sizeof(v9));
  v3 = *a2;
  v4 = a2[1];
  v11 = v9;
  while (v3 != v4)
  {
    sub_20C135500(v3);
    sub_20C137CAC((uint64_t **)&v11, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v3 += 12;
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = sub_20BDDC1C8(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  sub_20BDE5038((void ***)&__p);
  return v7;
}

void sub_20C1354C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)(v17 - 40) = &a9;
  sub_20BDE5038((void ***)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C135500(unsigned int *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C1355B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *this, const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  sub_20C137DF0(this, *(_DWORD **)a2, *((_DWORD **)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2));
  return this;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  sub_20C137DF0(this, *(_DWORD **)a2, *((_DWORD **)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2));
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit(_QWORD *a1, _DWORD **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20C137DF0(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20C137DF0(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit(void **this)
{
  void **v1;

  v1 = this;
  sub_20C103D8C(&v1);
}

{
  void **v1;

  v1 = this;
  sub_20C103D8C(&v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::operator=(uint64_t a1, _DWORD **a2)
{
  if ((_DWORD **)a1 != a2)
    sub_20C137FD8(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::Process(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  char IsPrimPath;
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *NodeAtPath;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *v18;
  uint64_t *v19;
  uint64_t v20;
  const pxrInternal__aapl__pxrReserved__::SdfPath *i;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *j;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v55;
  void *v59[2];
  char v60;
  uint64_t v61;
  int v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  void **v66;
  int v67;
  int v68;
  int v69;
  void *__p;
  char v71;
  _BYTE v72[8];
  _BYTE v73[24];
  _QWORD **v74;
  int v75;
  int v76;
  _QWORD **v77;
  _QWORD *v78[2];
  _QWORD **v79;
  _QWORD *v80[3];

  if (a2)
  {
    v10 = *a2;
    v9 = (_DWORD *)a2[1];
    if (v9 != (_DWORD *)*a2)
    {
      do
      {
        v9 -= 5;
        sub_20C103E10((uint64_t)(a2 + 2), v9);
      }
      while (v9 != (_DWORD *)v10);
    }
    a2[1] = v10;
  }
  v72[0] = a6;
  sub_20C136F1C((uint64_t)v73);
  v77 = v78;
  v78[0] = 0;
  v80[0] = 0;
  v80[1] = 0;
  v78[1] = 0;
  v79 = v80;
  v11 = *(_DWORD **)a1;
  v12 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v12)
  {
LABEL_132:
    v17 = 2;
    goto LABEL_163;
  }
  v55 = (uint64_t)(a5 + 2);
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
    {
      IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2));
    }
    else
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
      {
        if (!a5)
          goto LABEL_162;
        sub_20BDDC0E4(&v64, "Unsupported object type");
        pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
        v46 = a5[1];
        if (v46 >= a5[2])
        {
          v47 = sub_20C138250(a5, (uint64_t)&v66);
        }
        else
        {
          sub_20C138358(v55, a5[1], (uint64_t)&v66);
          v47 = v46 + 48;
        }
        a5[1] = v47;
        if (v71 < 0)
          operator delete(__p);
        goto LABEL_160;
      }
      IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2));
    }
    if ((IsPrimPath & 1) == 0
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v11 + 2))
    {
      if (!a5)
        goto LABEL_162;
      sub_20BDDC0E4(&v64, "Path type mismatch");
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
      v48 = a5[1];
      if (v48 >= a5[2])
      {
        v49 = sub_20C138250(a5, (uint64_t)&v66);
      }
      else
      {
        sub_20C138358(v55, a5[1], (uint64_t)&v66);
        v49 = v48 + 48;
      }
      a5[1] = v49;
      if (v71 < 0)
        operator delete(__p);
      goto LABEL_160;
    }
    NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
    v15 = NodeAtPath ? (uint64_t *)((char *)NodeAtPath + 32) : pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v15))
      break;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v11 + 2))
    {
      if (!a5)
        goto LABEL_162;
      sub_20BDDC0E4(&v64, "Object was removed");
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
      v50 = a5[1];
      if (v50 >= a5[2])
      {
        v51 = sub_20C138250(a5, (uint64_t)&v66);
      }
      else
      {
        sub_20C138358(v55, a5[1], (uint64_t)&v66);
        v51 = v50 + 48;
      }
      a5[1] = v51;
      if (v71 < 0)
        operator delete(__p);
      goto LABEL_160;
    }
LABEL_131:
    v11 += 5;
    if (v11 == v12)
      goto LABEL_132;
  }
  v16 = *(_QWORD *)(a3 + 24);
  if (!v16 || ((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, v15) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v63);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v11 + 2))
      goto LABEL_33;
    if (*(_QWORD *)v11 == *((_QWORD *)v11 + 1) && v11[4] == -2)
    {
      v17 = 3;
      goto LABEL_129;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), v59);
    v18 = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v59);
    if (v18)
      v19 = (uint64_t *)((char *)v18 + 32);
    else
      v19 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v19))
    {
      v20 = *(_QWORD *)(a3 + 24);
      if (v20 && ((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, v19) & 1) == 0)
      {
        if (a5)
        {
          sub_20BDDC0E4(&v64, "New parent does not exist");
          pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
          v41 = a5[1];
          if (v41 >= a5[2])
          {
            v42 = sub_20C138250(a5, (uint64_t)&v66);
          }
          else
          {
            sub_20C138358(v55, a5[1], (uint64_t)&v66);
            v42 = v41 + 48;
          }
          a5[1] = v42;
          if (v71 < 0)
            operator delete(__p);
          goto LABEL_124;
        }
      }
      else
      {
        if (*(_QWORD *)v11 == *((_QWORD *)v11 + 1))
        {
LABEL_32:
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v19, 1);
          sub_20BFD3EBC(&v62, (int *)&v66);
          sub_20BFD3F10(&v63, (int *)&v66 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
          sub_20BFD265C(&v66);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
          sub_20BFD265C(v59);
LABEL_33:
          if ((a6 & 1) == 0)
          {
            v64 = 0uLL;
            v65 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)v11, (uint64_t *)&v64);
            v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v64 + 1);
            for (i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
                  i != v22;
                  i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8))
            {
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, i, &v61);
              if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v61)
                && v61 != *(_QWORD *)i)
              {
                if (a5)
                {
                  sub_20BDDC0E4(v59, "Current target was edited");
                  pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, (__int128 *)v59);
                  v35 = a5[1];
                  if (v35 >= a5[2])
                  {
                    v36 = sub_20C138250(a5, (uint64_t)&v66);
                  }
                  else
                  {
                    sub_20C138358(v55, a5[1], (uint64_t)&v66);
                    v36 = v35 + 48;
                  }
                  a5[1] = v36;
                  if (v71 < 0)
                    operator delete(__p);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
                  sub_20BFD265C(&v68);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
                  sub_20BFD265C((_DWORD *)&v66 + 1);
                  if (v60 < 0)
                    operator delete(v59[0]);
                }
                goto LABEL_107;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
              sub_20BFD265C(&v61);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)(v11 + 2), (uint64_t *)&v64);
            v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v64 + 1);
            for (j = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
                  ;
                  j = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)j + 8))
            {
              if (j == v24)
              {
                v66 = (void **)&v64;
                sub_20BFD6F90(&v66);
                goto LABEL_45;
              }
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, j, &v61);
              if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v61)
                && v61 != *(_QWORD *)j)
              {
                break;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
              sub_20BFD265C(&v61);
            }
            if (a5)
            {
              sub_20BDDC0E4(v59, "New target was edited");
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, (__int128 *)v59);
              v37 = a5[1];
              if (v37 >= a5[2])
              {
                v38 = sub_20C138250(a5, (uint64_t)&v66);
              }
              else
              {
                sub_20C138358(v55, a5[1], (uint64_t)&v66);
                v38 = v37 + 48;
              }
              a5[1] = v38;
              if (v71 < 0)
                operator delete(__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
              sub_20BFD265C(&v68);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
              sub_20BFD265C((_DWORD *)&v66 + 1);
              if (v60 < 0)
                operator delete(v59[0]);
            }
LABEL_107:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
            sub_20BFD265C(&v61);
            v66 = (void **)&v64;
            sub_20BFD6F90(&v66);
            goto LABEL_128;
          }
LABEL_45:
          v64 = 0uLL;
          v65 = 0;
          if (!*(_QWORD *)(a4 + 24))
            goto LABEL_48;
          sub_20C136FB4(&v66, v15, &v62, v11[4]);
          v59[0] = &v64;
          v25 = *(_QWORD *)(a4 + 24);
          if (!v25)
            sub_20BE9E974();
          v26 = (*(uint64_t (**)(uint64_t, void ***, void **))(*(_QWORD *)v25 + 48))(v25, &v66, v59);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
          sub_20BFD265C(&v67);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
          sub_20BFD265C(&v66);
          if ((v26 & 1) == 0)
          {
            if (a5)
            {
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
              v31 = a5[1];
              if (v31 >= a5[2])
              {
                v32 = sub_20C138250(a5, (uint64_t)&v66);
              }
              else
              {
                sub_20C138358(v55, a5[1], (uint64_t)&v66);
                v32 = v31 + 48;
              }
              a5[1] = v32;
              if (v71 < 0)
                operator delete(__p);
              goto LABEL_77;
            }
          }
          else
          {
LABEL_48:
            if ((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::Apply((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, v11, (uint64_t)&v64) & 1) != 0)
            {
              if (a2)
              {
                v27 = a2[1];
                if (v27 >= a2[2])
                {
                  v28 = sub_20C137014(a2, v11);
                }
                else
                {
                  sub_20C13711C((uint64_t)(a2 + 2), (_DWORD *)a2[1], v11);
                  v28 = v27 + 20;
                }
                v17 = 0;
                a2[1] = v28;
              }
              else
              {
                v17 = 0;
              }
LABEL_79:
              if (SHIBYTE(v65) < 0)
                operator delete((void *)v64);
LABEL_129:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
              sub_20BFD265C(&v62);
              if (v17 != 3 && v17)
                goto LABEL_163;
              goto LABEL_131;
            }
            if (a5)
            {
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
              v29 = a5[1];
              if (v29 >= a5[2])
              {
                v30 = sub_20C138250(a5, (uint64_t)&v66);
              }
              else
              {
                sub_20C138358(v55, a5[1], (uint64_t)&v66);
                v30 = v29 + 48;
              }
              a5[1] = v30;
              if (v71 < 0)
                operator delete(__p);
LABEL_77:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
              sub_20BFD265C(&v68);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
              sub_20BFD265C((_DWORD *)&v66 + 1);
            }
          }
          v17 = 1;
          goto LABEL_79;
        }
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2)))
        {
          if (a5)
          {
            sub_20BDDC0E4(&v64, "Object cannot be an ancestor of itself");
            pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
            v39 = a5[1];
            if (v39 >= a5[2])
            {
              v40 = sub_20C138250(a5, (uint64_t)&v66);
            }
            else
            {
              sub_20C138358(v55, a5[1], (uint64_t)&v66);
              v40 = v39 + 48;
            }
            a5[1] = v40;
            if (v71 < 0)
              operator delete(__p);
LABEL_124:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
            sub_20BFD265C(&v68);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
            sub_20BFD265C((_DWORD *)&v66 + 1);
LABEL_125:
            if (SHIBYTE(v65) < 0)
              operator delete((void *)v64);
          }
        }
        else if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
        {
          if (a5)
          {
            sub_20BDDC0E4(&v64, "Object cannot be a descendant of itself");
            pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
            v43 = a5[1];
            if (v43 >= a5[2])
            {
              v44 = sub_20C138250(a5, (uint64_t)&v66);
            }
            else
            {
              sub_20C138358(v55, a5[1], (uint64_t)&v66);
              v44 = v43 + 48;
            }
            a5[1] = v44;
            if (v71 < 0)
              operator delete(__p);
            goto LABEL_124;
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), (uint64_t *)&v66);
          sub_20BFD3EBC(&v62, (int *)&v66);
          sub_20BFD3F10(&v63, (int *)&v66 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
          sub_20BFD265C(&v66);
          if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v62))
            goto LABEL_32;
          v45 = *(_QWORD *)(a3 + 24);
          if (!v45 || !(*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v45 + 48))(v45, &v62))
            goto LABEL_32;
          if (a5)
          {
            sub_20BDDC0E4(&v64, "Object already exists");
            pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
            sub_20C1366A8(a5, (uint64_t)&v66);
            sub_20C135394((uint64_t)&v66);
            goto LABEL_125;
          }
        }
      }
    }
    else if (a5)
    {
      sub_20BDDC0E4(&v64, "New parent was removed");
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
      v33 = a5[1];
      if (v33 >= a5[2])
      {
        v34 = sub_20C138250(a5, (uint64_t)&v66);
      }
      else
      {
        sub_20C138358(v55, a5[1], (uint64_t)&v66);
        v34 = v33 + 48;
      }
      a5[1] = v34;
      if (v71 < 0)
        operator delete(__p);
      goto LABEL_124;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
    sub_20BFD265C(v59);
LABEL_128:
    v17 = 1;
    goto LABEL_129;
  }
  if (!a5)
    goto LABEL_162;
  sub_20BDDC0E4(&v64, "Object does not exist");
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
  v52 = a5[1];
  if (v52 >= a5[2])
  {
    v53 = sub_20C138250(a5, (uint64_t)&v66);
  }
  else
  {
    sub_20C138358(v55, a5[1], (uint64_t)&v66);
    v53 = v52 + 48;
  }
  a5[1] = v53;
  if (v71 < 0)
    operator delete(__p);
LABEL_160:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
  sub_20BFD265C(&v68);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
  sub_20BFD265C((_DWORD *)&v66 + 1);
  if (SHIBYTE(v65) < 0)
    operator delete((void *)v64);
LABEL_162:
  v17 = 1;
LABEL_163:
  sub_20C137430((uint64_t)&v79, v80[0]);
  sub_20BFD7C28((uint64_t)&v77, v78[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
  sub_20BFD265C(&v75);
  sub_20C136834(&v74, 0);
  sub_20C136BA4((uint64_t)v73);
  return v17 == 2;
}

void sub_20C136460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,int a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  uint64_t v37;

  sub_20C135394((uint64_t)&a37);
  if (a36 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a22);
  sub_20BFD1A18(&a30);
  sub_20C1366F8(v37 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1366A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = sub_20C138250(a1, a2);
  }
  else
  {
    sub_20C138358(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 48;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_20C1366F8(uint64_t a1)
{
  sub_20C137430(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_20BFD7C28(a1 + 48, *(_QWORD **)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  sub_20C136834((_QWORD ***)(a1 + 32), 0);
  sub_20C136BA4(a1 + 8);
  return a1;
}

uint64_t sub_20C13675C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_20C1367A4(a2, (_DWORD *)a1);
  *(_QWORD *)(a1 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  return a1;
}

uint64_t *sub_20C1367A4@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t *TargetPath;
  uint64_t *result;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a1))
  {
    TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a1);
    sub_20BFD6E54(a2, TargetPath);
    result = (uint64_t *)sub_20BFD6EA4(a2 + 1, (_DWORD *)TargetPath + 1);
    v6 = 2;
  }
  else
  {
    result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a1);
    v7 = *result;
    *(_QWORD *)a2 = *result;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *(_QWORD *)a2 = v8;
    }
    v6 = 1;
  }
  a2[2] = v6;
  return result;
}

void sub_20C136834(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20C136874((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

void sub_20C136874(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C136874(a1, *a2);
    sub_20C136874(a1, a2[1]);
    sub_20C1368C0(a2 + 4, 0);
    operator delete(a2);
  }
}

void sub_20C1368C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 36));
    sub_20BFD265C((_DWORD *)(v2 + 32));
    sub_20C136834(v2 + 24, 0);
    v3 = (void *)sub_20C136BA4(v2);
    operator delete(v3);
  }
}

uint64_t sub_20C136918(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  return a1;
}

uint64_t sub_20C136990(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v6;

  *(_QWORD *)(sub_20C136A14(a1, a3) + 16) = a2;
  v6 = operator new(0x18uLL);
  v6[2] = 0;
  v6[1] = 0;
  *v6 = v6 + 1;
  *(_QWORD *)(a1 + 24) = v6;
  sub_20BFD6E54((_DWORD *)(a1 + 32), a4);
  sub_20BFD6EA4((_DWORD *)(a1 + 36), a4 + 1);
  return a1;
}

void sub_20C136A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C136BA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C136A14(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  sub_20C136A58(a1, a2);
  return a1;
}

void sub_20C136A44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C136BA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C136A58(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C529338[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C529350[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void sub_20C136AE8(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

_DWORD *sub_20C136B0C(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

void sub_20C136B3C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
}

_DWORD *sub_20C136B74(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a2, a3);
  return sub_20BFD6EA4(v4 + 1, a3 + 1);
}

uint64_t sub_20C136BA4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C529338[v2])(&v4, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

uint64_t sub_20C136BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_20C136A14(a1, a2);
  *(_QWORD *)(v3 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v3 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  return a1;
}

uint64_t sub_20C136C3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C529338[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C529368[v4])(&v5, result, a2);
}

uint64_t sub_20C136CC8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 8))
    return sub_20C136CF0(result);
  return result;
}

_QWORD *sub_20C136CE0(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  return sub_20C136D44(*a1, a2, a3);
}

int *sub_20C136CE8(_DWORD **a1, int *a2, _DWORD *a3)
{
  return sub_20C136DFC(*a1, a2, a3);
}

uint64_t sub_20C136CF0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C529338[v2])(&v4, a1);
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

_QWORD *sub_20C136D44(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 8) == 1)
    return sub_20BF32220(a2, a3);
  else
    return (_QWORD *)sub_20C136D64(a1, a3);
}

uint64_t sub_20C136D64(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C529338[v4])(&v9, a1);
  *(_DWORD *)(a1 + 8) = -1;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 8) = 1;
  return a1;
}

int *sub_20C136DFC(_DWORD *a1, int *a2, _DWORD *a3)
{
  if (a1[2] != 2)
    return sub_20C136E4C(a1, a3);
  sub_20C01A074(a2, a3);
  return sub_20C01A0C8(a2 + 1, a3 + 1);
}

_DWORD *sub_20C136E4C(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[2];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C529338[v4])(&v6, a1);
  a1[2] = -1;
  sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(a1 + 1, a2 + 1);
  a1[2] = 2;
  return a1;
}

_DWORD *sub_20C136EC8(_DWORD *a1)
{
  _DWORD *v2;

  v2 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a1 + 3);
  a1[4] = -1;
  return a1;
}

uint64_t sub_20C136F1C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  _DWORD *v3;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x18uLL);
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)v2 = (char *)v2 + 8;
  *(_QWORD *)(a1 + 24) = v2;
  v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v2);
  sub_20BFD6E54((_DWORD *)(a1 + 32), v3);
  sub_20BFD6EA4((_DWORD *)(a1 + 36), v3 + 1);
  return a1;
}

void sub_20C136F8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD ***v2;

  sub_20C136834(v2, 0);
  sub_20C136BA4(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C136FB4(_DWORD *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  _DWORD *v8;

  v8 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v8 + 1, a2 + 1);
  sub_20BFD6E54(a1 + 2, a3);
  sub_20BFD6EA4(a1 + 3, a3 + 1);
  a1[4] = a4;
  return a1;
}

uint64_t sub_20C137014(uint64_t *a1, _DWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL)
    sub_20BDDF694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 2) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 2) >= 0x666666666666666)
    v6 = 0xCCCCCCCCCCCCCCCLL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20C1371E8((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[20 * v3];
  v13 = &v7[20 * v6];
  sub_20C13711C((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 20;
  sub_20C137174(a1, &v10);
  v8 = a1[1];
  sub_20C1373BC(&v10);
  return v8;
}

void sub_20C137108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1373BC((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C13711C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  sub_20BFD6E54(a2, a3);
  sub_20BFD6EA4(a2 + 1, a3 + 1);
  sub_20BFD6E54(a2 + 2, a3 + 2);
  result = sub_20BFD6EA4(a2 + 3, a3 + 3);
  a2[4] = a3[4];
  return result;
}

uint64_t sub_20C137174(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C13722C((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20C1371E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    sub_20BDDF5B4();
  return operator new(20 * a2);
}

uint64_t sub_20C13722C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 5;
      sub_20C1372E0(a1, (_DWORD *)(v7 - 20), v9);
      v7 = *((_QWORD *)&v16 + 1) - 20;
      *((_QWORD *)&v16 + 1) -= 20;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C137338((uint64_t)v13);
  return v11;
}

_DWORD *sub_20C1372E0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  sub_20BFD38A4(a2, a3);
  sub_20BFD38DC(a2 + 1, a3 + 1);
  sub_20BFD38A4(a2 + 2, a3 + 2);
  result = sub_20BFD38DC(a2 + 3, a3 + 3);
  a2[4] = a3[4];
  return result;
}

uint64_t sub_20C137338(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C13736C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C13736C(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C103E10(v3, v1);
      v1 += 5;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C1373BC(void **a1)
{
  sub_20C1373EC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C1373EC(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 20;
      result = sub_20C103E10(v4, (_DWORD *)(v1 - 20));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_20C137430(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C137430(a1, *a2);
    sub_20C137430(a1, a2[1]);
    sub_20C137478((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_20C137478(uint64_t a1)
{
  sub_20BE6100C(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_QWORD *sub_20C1374B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_20C137528(v3[4], a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_20C137528(a2, v5[4]))
    return v2;
  return v5;
}

uint64_t sub_20C137528(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  char v5;
  char *v6;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2 == -1)
    return 0;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1 || v3 < v2)
    return 1;
  if (v3 > v2)
    return 0;
  v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))off_24C529390[v3])(&v6, a1, a2);
}

uint64_t sub_20C13759C()
{
  return 0;
}

uint64_t sub_20C1375A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char v4;

  return sub_20BF1E6D8((uint64_t)&v4, a2, a3);
}

uint64_t sub_20C1375C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return sub_20BFD758C(a2, a3);
}

uint64_t *sub_20C1375D0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9[3];
  char v10;

  v4 = (uint64_t)(a1 + 1);
  v5 = (uint64_t *)operator new(0x28uLL);
  v9[2] = v4;
  v5[4] = *a2;
  v10 = 1;
  v6 = (uint64_t **)sub_20C1376A8((uint64_t)a1, v9, v5 + 4);
  v7 = *v6;
  if (*v6)
  {
    sub_20C1368C0(v5 + 4, 0);
    operator delete(v5);
    return v7;
  }
  else
  {
    sub_20BDDE1B4(a1, v9[0], v6, v5);
  }
  return v5;
}

void sub_20C13768C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_20C13772C(v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1376A8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!sub_20C137528(*a3, v4[4]))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20C137528(v7[4], *a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_20C13772C(uint64_t a1, uint64_t *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20C1368C0(__p + 4, 0);
  if (__p)
    operator delete(__p);
}

uint64_t **sub_20C137770(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  if (*a1)
  {
    sub_20C1368C0(v2 + 4, 0);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_20C1377B0(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C137858((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C1378E8((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C137950((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C137858(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4);
        if (!sub_20BFD758C(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20BFD758C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *sub_20C1378E8@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  sub_20BFD6E54(v6 + 8, v7);
  result = sub_20BFD6EA4(v6 + 9, v7 + 1);
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = v6 + 12;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C137950(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C137478((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_20C137994(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = sub_20BE10B80(a1, v4);
      sub_20C137478((uint64_t)(v4 + 4));
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t *sub_20C1379F8(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C137858((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C137AA0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C137950((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_20C137AA0@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  sub_20BFD38A4(v6 + 8, v7);
  result = sub_20BFD38DC(v6 + 9, v7 + 1);
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = v6 + 12;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20C137B08(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_20BFE4AF0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_20BE10B80(a1, v3);
  sub_20BFD7654((_DWORD *)v4 + 7);
  operator delete(v4);
  return 1;
}

_QWORD *sub_20C137B60(_QWORD *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v14;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      ++v5;
      v6 = v8;
    }
    while (v8 != a2);
    do
    {
      v10 = v5 >> 1;
      v14 = v3;
      sub_20BE754A0(&v14, v5 >> 1);
      if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 28), a3))
      {
        v11 = v14;
        v12 = (_QWORD *)v14[1];
        if (v12)
        {
          do
          {
            v3 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v3 = (_QWORD *)v11[2];
            v9 = *v3 == (_QWORD)v11;
            v11 = v3;
          }
          while (!v9);
        }
        v10 = v5 + ~v10;
      }
      v5 = v10;
    }
    while (v10);
  }
  return v3;
}

uint64_t *sub_20C137C48(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = sub_20BE10B80(a1, v4);
      sub_20BFD7654((_DWORD *)v4 + 7);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t **sub_20C137CAC(uint64_t **a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD v20[5];

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    v20[4] = v7;
    if (v15)
      v16 = (char *)sub_20BDE4FF4(v7, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[24 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v20[2] = v17 + 24;
    sub_20BDF34C0(v4, v20);
    v11 = v4[1];
    sub_20BDF3648((uint64_t)v20);
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_20C137DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C137DF0(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C137E74(result, a4);
    result = sub_20C137EC4((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C137E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C103D8C(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C137E74(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    sub_20BDDF694();
  result = (char *)sub_20C1371E8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

_DWORD *sub_20C137EC4(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v9[3];
  char v10;
  _DWORD *v11;
  _DWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C13711C(a1, v4, v6);
      v6 += 5;
      v4 = v12 + 5;
      v12 += 5;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C137F54((uint64_t)v9);
  return v4;
}

uint64_t sub_20C137F54(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C137F88((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C137F88(uint64_t *result)
{
  _DWORD **v1;
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_DWORD **)result[2];
  v3 = *v1;
  v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 5;
      result = (uint64_t *)sub_20C103E10(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_20C137FD8(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *result;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(int **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2) < a4)
  {
    sub_20C138158((_QWORD *)a1);
    if (a4 > 0xCCCCCCCCCCCCCCCLL)
      sub_20BDDF694();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2) >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v10;
    sub_20C137E74((_QWORD *)a1, v11);
    result = sub_20C137EC4(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 2) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 2];
    sub_20C1381C4((uint64_t)&v17, a2, v13, v9);
    result = sub_20C137EC4(v8, v13, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C1381C4((uint64_t)&v18, a2, a3, v9);
  v15 = v14;
  v16 = *(_DWORD **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 5;
      result = sub_20C103E10(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_20C138148(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C138150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C138158(_QWORD *a1)
{
  _DWORD *v1;
  _DWORD *v3;
  _DWORD *v4;

  v1 = (_DWORD *)*a1;
  if (*a1)
  {
    v3 = (_DWORD *)a1[1];
    v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 5;
        sub_20C103E10((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_20C1381C4(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C01A074(a4, v5);
    sub_20C01A0C8(a4 + 1, v5 + 1);
    sub_20C01A074(a4 + 2, v5 + 2);
    sub_20C01A0C8(a4 + 3, v5 + 3);
    a4[4] = v5[4];
    a4 += 5;
    v5 += 5;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C138250(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE6D0B4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_20C138358((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 48;
  sub_20C1383D0(a1, &v10);
  v8 = a1[1];
  sub_20C1385CC(&v10);
  return v8;
}

void sub_20C138344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1385CC((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C138358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  sub_20BFD38A4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  sub_20BFD38DC((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_20BFD38A4((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  sub_20BFD38DC((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
  result = *(__n128 *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_20C1383D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C138444((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C138444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 48;
      sub_20C138358(a1, v7 - 48, v9);
      v7 = *((_QWORD *)&v16 + 1) - 48;
      *((_QWORD *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C1384F8((uint64_t)v13);
  return v11;
}

uint64_t sub_20C1384F8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C13852C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C13852C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C13857C(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
  return result;
}

_DWORD *sub_20C13857C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 16));
  sub_20BFD265C((_DWORD *)(a2 + 12));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 8));
  return sub_20BFD265C((_DWORD *)(a2 + 4));
}

void **sub_20C1385CC(void **a1)
{
  sub_20C1385FC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C1385FC(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 48;
      result = sub_20C13857C(v4, v1 - 48);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t *sub_20C138640()
{
  sub_20C138CC8();
  sub_20C138DE8();
  sub_20C138F08();
  sub_20C139028();
  sub_20C139148();
  sub_20C139268();
  sub_20C139388();
  sub_20C1394A8();
  sub_20C1395C8();
  return sub_20C1396E8();
}

void *pxrInternal__aapl__pxrReserved__::SdfNotice::BaseLayersDidChange::GetLayers@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  void *result;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v9;
  char *v10;
  __int128 **v11;
  __int128 i;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_20C138740(a2, 0x34F72C234F72C235 * ((uint64_t)(*((_QWORD *)*this + 1) - *(_QWORD *)*this) >> 3));
  for (i = **this; (_QWORD)i != *((_QWORD *)&i + 1); result = sub_20C138970(&i))
  {
    v7 = sub_20C1387D0(&i, v5, v6);
    v8 = sub_20BFD2F78((_QWORD *)*v7);
    if (v9 & 1 | (unint64_t)v8)
    {
      v11 = (__int128 **)sub_20C1387D0(&i, v9, v10);
      sub_20C138848(a2, *v11);
    }
  }
  return result;
}

void sub_20C138724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEB4844(&a9);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C138740(uint64_t *a1, unint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (unsigned int *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDEA2F0((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_20C139948(a1, v7);
    return sub_20BEB5F68((unsigned int *)v7);
  }
  return result;
}

void sub_20C1387BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1387D0(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal__aapl__pxrRes"
            "erved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved__::SdfChangeL"
            "ist>>>::operator->() [T = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInterna"
            "l__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved__::SdfChangeList>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

unsigned int *sub_20C138848(uint64_t *a1, __int128 *a2)
{
  unsigned int *result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (unsigned int *)(a1 + 2);
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20BDDF694();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)sub_20BDEA2F0((uint64_t)result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    sub_20C139948(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = sub_20BEB5F68((unsigned int *)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_20C13895C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C138970(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal"
            "__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved"
            "__::SdfChangeList>>>::operator++() [T = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfWeak"
            "Ptr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved__::SdfChangeList>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 232;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::LayerIdentifierDidChange(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_QWORD *)a1 = off_24C5293B8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  v6 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_20C138A7C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
    operator delete(*v2);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice((pxrInternal__aapl__pxrReserved__::TfNotice *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::Base::~Base(pxrInternal__aapl__pxrReserved__::SdfNotice::Base *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange::~LayersDidChange(pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer::~LayersDidChangeSentPerLayer(pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange::~LayerInfoDidChange(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C5293D8;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C5293D8;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  void *v4;

  *(_QWORD *)this = off_24C5293D8;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v4);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::~LayerIdentifierDidChange(void **this)
{
  *this = off_24C5293B8;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice((pxrInternal__aapl__pxrReserved__::TfNotice *)this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::~LayerIdentifierDidChange(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent::~LayerDidReplaceContent(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent::~LayerDidReloadContent(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile::~LayerDidSaveLayerToFile(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged(void **this)
{
  *this = off_24C5293F8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice((pxrInternal__aapl__pxrReserved__::TfNotice *)this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged(this);
  operator delete(v1);
}

uint64_t *sub_20C138CC8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C138D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C138DE8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C138EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C138F08()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C138FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C139028()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1390FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C139148()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C13921C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C139268()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C13933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C139388()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1398AC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C13945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1394A8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C13957C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1395C8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C13969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1396E8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C13980C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1397BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C13980C(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C139878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1398AC(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C139918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C139948(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1399BC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1399BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C139A4C((uint64_t)v12);
  return v10;
}

uint64_t sub_20C139A4C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEB5F08((unsigned int *)a1);
  return a1;
}

uint64_t *sub_20C139A80()
{
  sub_20C139AA4();
  return sub_20C139BA4();
}

uint64_t *sub_20C139AA4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D80, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D80, (char *)1, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C139B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C139BA4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5257E0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5257E0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C139C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C139CA4()
{
  uint64_t *v0;
  uint64_t v1;
  void *__p[2];
  char v3;

  sub_20C141A98();
  v0 = sub_20C141B98();
  v1 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_20BDDC0E4(__p, "vector<SdfPath>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20C139D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(int *a1, __int128 *a2)
{
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v11[4];
  char v12;
  std::string __p;
  uint64_t v14;
  int v15;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4 + 1);
  sub_20BEB59B0((uint64_t)&v14, (uint64_t)"Sdf", (uint64_t)"SdfPath::SdfPath(string)");
  memset(&__p, 0, sizeof(__p));
  if (*((char *)a2 + 23) < 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (v5 >= 0x401)
    {
      v6 = 0;
      v7 = *(unsigned __int8 **)a2;
      do
      {
        v8 = *v7++;
        if (v8 == 47)
          ++v6;
        --v5;
      }
      while (v5);
      if (v6 >= 0x201)
        goto LABEL_9;
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParsePath(a2, a1, (uint64_t)&__p) & 1) == 0)
  {
LABEL_9:
    v11[0] = "sdf/path.cpp";
    v11[1] = "SdfPath";
    v11[2] = 155;
    v11[3] = "pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(const std::string &)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v11, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  while (v15--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v14);
  return a1;
}

void sub_20C139E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  if (a19 < 0)
    operator delete(__p);
  sub_20BEB24F4(v21 - 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v20);
  sub_20BFD265C(v19);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254985BA0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985BA0))
  {
    sub_20C019BD0(&qword_254985B98);
    __cxa_atexit((void (*)(void *))sub_20BFD1A18, &qword_254985B98, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985BA0);
  }
  return &qword_254985B98;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v3;
  uint64_t AbsoluteRootNode;

  v1 = atomic_load((unsigned __int8 *)&qword_254985BB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985BB0))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)operator new(8uLL);
    AbsoluteRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(v3);
    sub_20C141C98(v3, AbsoluteRootNode, 0);
    qword_254985BA8 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985BB0);
  }
  return qword_254985BA8;
}

void sub_20C139F74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985BB0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v3;
  uint64_t RelativeRootNode;

  v1 = atomic_load((unsigned __int8 *)&qword_254985BC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985BC0))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)operator new(8uLL);
    RelativeRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(v3);
    sub_20C141C98(v3, RelativeRootNode, 0);
    qword_254985BB8 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985BC0);
  }
  return qword_254985BB8;
}

void sub_20C13A010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985BC0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
    v2 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
                             + 12);
  else
    v2 = 0;
  v3 = (_DWORD *)((char *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3))
    v4 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v3)
                             + 12);
  else
    v4 = 0;
  return v4 + v2;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _BOOL8 result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
    return *(_BYTE *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
                    + 15) & 1;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _BOOL8 result;
  uint64_t Ptr;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    return *(_BYTE *)(Ptr + 15) & (*(_WORD *)(Ptr + 12) == 0);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfPath *Ptr;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    return *((_BYTE *)Ptr + 14) == 1
        || *(_QWORD *)this == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(Ptr);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfPath *Ptr;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    if (*((_BYTE *)Ptr + 14) == 1)
      return 1;
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(Ptr);
    return *(_QWORD *)this == *(_QWORD *)v4
        || *(_QWORD *)this == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    if (!result)
      return result;
    if ((*(_BYTE *)(result + 15) & 1) != 0)
      return *(unsigned __int16 *)(result + 12) == 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;
  int v2;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
  {
    v2 = *(unsigned __int8 *)(result + 14);
    return v2 == 3 || v2 == 6;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsNamespacedPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;
  uint64_t v2;
  int v3;
  int v5;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 14);
    if (v3 == 6 || v3 == 3)
    {
      result = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_IsNamespacedImpl((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)result);
      if ((_DWORD)result)
      {
        v5 = *(unsigned __int8 *)(v2 + 14);
        return v5 == 3 || v5 == 6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 2;
  return result;
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unsigned __int8 *result;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    return 0;
  result = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (result)
  {
    if (result[14] - 1 >= 2)
      return (unsigned __int8 *)(*(_QWORD *)this == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)result));
    else
      return (unsigned __int8 *)1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (result)
    return (*(unsigned __int8 *)(result + 15) >> 1) & 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return (*(unsigned __int8 *)(result + 15) >> 2) & 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 7;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
    return *(unsigned __int8 *)(result + 14) == 8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAsToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v6;
  const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v7;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if ((_DWORD)result)
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    v6 = (const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetPathAsToken(Ptr, v6, v7);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetAsToken(this, &v8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    result = (char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    result = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  if (result[23] < 0)
  {
    result = (char *)sub_20BDDBFAC((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
    *(_OWORD *)a2 = v5;
  }
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  std::string *v3;
  const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v4;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v6;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    v3 = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetPathToken(Ptr, v3, v4);
  }
  else
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v6)
      v6 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    return (uint64_t *)((char *)v6 + 88);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::TfToken *Token;

  Token = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this);
  if ((*(_QWORD *)Token & 0xFFFFFFFFFFFFFFF8) != 0)
    return (uint64_t *)((*(_QWORD *)Token & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    return pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Token);
}

const char *pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unint64_t v1;
  const char *result;

  v1 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
  if (!v1)
    return "";
  result = (const char *)(v1 + 16);
  if (*(char *)(v1 + 39) < 0)
    return *(const char **)result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(this, a2, 0);
}

void sub_20C13A728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a1, a2, 0);
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(this, a3, a2);
}

void sub_20C13A780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, unint64_t a3)
{
  _QWORD *Ptr;
  _QWORD *v7;
  unint64_t PathElementCount;
  void *result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int Handle;
  int v17;

  Ptr = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a1 + 1);
  v7 = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a1);
  if (a3 - 1 >= PathElementCount)
    a3 = PathElementCount;
  result = sub_20C13A924(a2, a3);
  v10 = a2[1];
  if (Ptr && a3)
  {
    v11 = (unsigned int *)(v7 + 1);
    do
    {
      Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v7);
      if (v7)
      {
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)Ptr);
      v13 = v10 - 8;
      sub_20BFD3EBC((int *)(v10 - 8), &Handle);
      sub_20BFD3F10((int *)(v10 - 4), &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      result = sub_20BFD265C(&Handle);
      Ptr = (_QWORD *)*Ptr;
      --a3;
      if (!Ptr)
        break;
      v10 -= 8;
    }
    while (a3);
  }
  else
  {
    v13 = a2[1];
  }
  if (v7 && a3)
  {
    do
    {
      Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v7);
      v14 = (unsigned int *)(v7 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
      sub_20BFD3EBC((int *)(v13 - 8), &Handle);
      sub_20BFD3F10((int *)(v13 - 4), &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      result = sub_20BFD265C(&Handle);
      v7 = (_QWORD *)*v7;
      if (!v7)
        break;
      v13 -= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t *sub_20C13A924(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _DWORD *v3;
  unint64_t v4;
  uint64_t i;

  v2 = result;
  v3 = (_DWORD *)result[1];
  v4 = ((uint64_t)v3 - *result) >> 3;
  if (a2 > v4)
    return (uint64_t *)sub_20C143A04(result, a2 - v4);
  if (a2 < v4)
  {
    for (i = *result + 8 * a2; v3 != (_DWORD *)i; result = (uint64_t *)sub_20BFD6F64((uint64_t)(v2 + 2), v3))
      v3 -= 2;
    v2[1] = i;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetAncestorsRange@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = sub_20BFD6E54(a2, this);
  return sub_20BFD6EA4(v3 + 1, (_DWORD *)this + 1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetName(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;

  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
  if ((*(_QWORD *)NameToken & 0xFFFFFFFFFFFFFFF8) != 0)
    return (uint64_t *)((*(_QWORD *)NameToken & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    return pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _DWORD *v2;
  _BYTE *Ptr;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v5;
  char v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v7;

  v2 = (_DWORD *)((char *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    Ptr = (_BYTE *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v2);
    switch(Ptr[14])
    {
      case 0:
        goto LABEL_9;
      case 1:
      case 3:
      case 6:
      case 7:
        goto LABEL_5;
      case 2:
        goto LABEL_13;
      case 8:
        goto LABEL_14;
      default:
        goto LABEL_6;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    Ptr = (_BYTE *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    switch(Ptr[14])
    {
      case 0:
LABEL_9:
        v6 = Ptr[15];
        result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if ((v6 & 1) != 0)
        {
          if (!result)
            result = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        }
        else
        {
          if (!result)
            result = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)result + 8);
        }
        break;
      case 1:
      case 3:
      case 6:
      case 7:
LABEL_5:
        result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(Ptr + 16);
        break;
      case 2:
LABEL_13:
        result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)Ptr);
        break;
      case 8:
LABEL_14:
        v7 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if (!v7)
          v7 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v7 + 64);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v5)
      v5 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    return (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v5 + 88);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfPath::GetElementString@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(this, (unsigned int **)&v8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    result = (char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    result = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (result[23] < 0)
  {
    result = (char *)sub_20BDDBFAC((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
    *(_OWORD *)a2 = v5;
  }
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, unsigned int **a2@<X8>)
{
  _DWORD *v4;
  std::string *Ptr;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (_DWORD *)((char *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    Ptr = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v4);
    v6 = Ptr->__r_.__value_.__s.__data_[14];
    if (v6 == 1)
    {
      v7 = (unsigned int *)Ptr->__r_.__value_.__r.__words[2];
      *a2 = v7;
      if ((v7 & 7) == 0)
        return;
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
LABEL_10:
    *a2 = 0;
    return;
  }
  Ptr = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  v6 = Ptr->__r_.__value_.__s.__data_[14];
  if (v6 != 1)
  {
LABEL_9:
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetElementImpl(Ptr, (uint64_t)a2);
      return;
    }
    goto LABEL_10;
  }
  v10 = (unsigned int *)Ptr->__r_.__value_.__r.__words[2];
  *a2 = v10;
  if ((v10 & 7) == 0)
    return;
  v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 2, v8));
LABEL_16:
  if ((v9 & 1) == 0)
    *a2 = v8;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  uint64_t Ptr;
  uint64_t v7;
  unint64_t v9;
  const char *v10;
  _QWORD v11[4];
  char v12;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
    return sub_20BFD265C(v11);
  }
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (Ptr && *(_BYTE *)(Ptr + 14) == 3)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
    return sub_20BFD265C(v11);
  }
  v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (v7 && *(_BYTE *)(v7 + 14) == 6)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
    return sub_20BFD265C(v11);
  }
  v11[0] = "sdf/path.cpp";
  v11[1] = "ReplaceName";
  v11[2] = 474;
  v11[3] = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(const TfToken &) const";
  v12 = 0;
  v9 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
  {
    v10 = (const char *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0)
      v10 = *(const char **)v10;
  }
  else
  {
    v10 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"%s is not a prim, property, or relational attribute path", v10);
  *(_QWORD *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
}

void sub_20C13AE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t *Ptr;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameImpl;
  char v9;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v14;
  int v15;
  int v16;
  char v17;
  int Handle;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    {
      Ptr = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(*Ptr);
      sub_20BFD6E54(a2, this);
      sub_20BFD6EA4(a2 + 1, &Handle);
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&Handle);
    }
    else
    {
      v6 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      v7 = (uint64_t)v6;
      if ((*((_BYTE *)v6 + 15) & 1) != 0)
        return sub_20C141C98(a2, *(_QWORD *)v7, 0);
      if (v6 == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(v6))
        goto LABEL_26;
      switch(*(_BYTE *)(v7 + 14))
      {
        case 0:
          v9 = *(_BYTE *)(v7 + 15);
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          if ((v9 & 1) != 0)
          {
            if (!NameImpl)
              NameImpl = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          }
          else
          {
            if (!NameImpl)
              NameImpl = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)NameImpl + 8);
          }
          break;
        case 1:
        case 3:
        case 6:
        case 7:
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(v7 + 16);
          break;
        case 2:
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)v7);
          break;
        case 8:
          v11 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          if (!v11)
            v11 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v11 + 64);
          break;
        default:
          v10 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          if (!v10)
            v10 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v10 + 88);
          break;
      }
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v12)
      {
        v14 = NameImpl;
        v12 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        NameImpl = v14;
      }
      if ((*(_QWORD *)NameImpl & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_26:
        v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if (!v13)
          v13 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim(v7, (uint64_t *)v13 + 6, (uint64_t)&v17, (uint64_t (*)(uint64_t))sub_20C141CF8, &v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
        sub_20BFD38A4(a2, &v16);
        sub_20BFD38DC(a2 + 1, &v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        return sub_20BFD265C(&v16);
      }
      else
      {
        return sub_20C141C98(a2, *(_QWORD *)v7, 0);
      }
    }
  }
  else
  {
    sub_20BFD6E54(a2, this);
    return sub_20BFD6EA4(a2 + 1, (_DWORD *)this + 1);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t Ptr;
  unint64_t v18;
  const char *v19;
  uint64_t *v20;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v21;
  char *v22;
  unint64_t v23;
  const char *v24;
  pxrInternal__aapl__pxrReserved__::SdfPath *v25;
  int v26;
  int v27;
  void **v28;
  int v29;
  int v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  char v35;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    v31 = "sdf/path.cpp";
    v32 = "AppendChild";
    v33 = 840;
    v34 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(const TfToken &) const";
    v35 = 0;
    v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0)
        v19 = *(const char **)v19;
    }
    else
    {
      v19 = "";
    }
    v23 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Cannot append child '%s' to path '%s'.", v22, v19, v24);
    pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v25);
    sub_20BFD6E54(a3, &qword_254985B98);
    return sub_20BFD6EA4(a3 + 1, (_DWORD *)&qword_254985B98 + 1);
  }
  else
  {
    v6 = (uint64_t *)off_254740B10();
    v7 = *v6;
    if (!*v6)
    {
      v20 = v6;
      v7 = off_254740B28();
      *v20 = sub_20C143B60(v7);
    }
    v8 = 0;
    v9 = bswap64(0x9E3779B97F4A7C55 * (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8));
    v10 = bswap64(0x9E3779B97F4A7C55* (((v9+ ((unint64_t)*(unsigned int *)this >> 8)+ (v9 + ((unint64_t)*(unsigned int *)this >> 8))* (v9 + ((unint64_t)*(unsigned int *)this >> 8))) >> 1)+ ((unint64_t)*(unsigned int *)this >> 8)));
    while (1)
    {
      v11 = (v10 + (_WORD)v8) & 0x3FFF;
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==((_DWORD *)(v7 + 16 * v11), this))
      {
        v12 = v7 + 16 * v11;
        if ((*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          break;
      }
      v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v7 + 16 * v11));
      if (v8++ == 1 || !v13)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
        goto LABEL_13;
      }
    }
    sub_20BFD6E54(&v31, (_DWORD *)(v12 + 4));
LABEL_13:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
    v29 = (int)v31;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v31);
    v30 = (int)v28;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v31);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29))
    {
      sub_20BFD38A4(a3, &v29);
      sub_20BFD38DC(a3 + 1, &v30);
    }
    else
    {
      v28 = 0;
      v31 = (char *)this;
      v32 = (const char *)a2;
      v33 = (uint64_t)&v28;
      Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim(Ptr, (uint64_t *)a2, (uint64_t)&v31, sub_20C141D00, &v27);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_16;
      v21 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v21)
        v21 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v21 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_16:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v26);
        sub_20BFD38A4(a3, &v27);
        sub_20BFD38DC(a3 + 1, &v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, a3);
      }
      sub_20BFD265C(&v27);
      sub_20C13C778(&v28);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    return sub_20BFD265C(&v29);
  }
}

void sub_20C13B428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, void **a13, int a14)
{
  sub_20BFD265C(&a12);
  sub_20C13C778(&a13);
  sub_20BFD1A18(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  const char *v21;
  uint64_t (*v22)(void);
  uint64_t *v23;
  char *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  void *v30;
  int v31;
  int v32;
  void **v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  unsigned int *v39;
  int v40;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    v34 = "sdf/path.cpp";
    v35 = "AppendProperty";
    v36 = 937;
    v37 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(const TfToken &) const";
    v38 = 0;
    v20 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0)
        v21 = *(const char **)v21;
    }
    else
    {
      v21 = "";
    }
    v25 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
    if (v25)
    {
      v26 = (const char *)(v25 + 16);
      if (*(char *)(v25 + 39) < 0)
        v26 = *(const char **)v26;
    }
    else
    {
      v26 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"Can only append a property '%s' to a prim path (%s)", v24, v21, v26);
  }
  else
  {
    v33 = 0;
    v34 = (char *)this;
    v35 = (const char *)a2;
    v36 = (uint64_t)&v33;
    v6 = *(_QWORD *)off_254740B40();
    if (!v6)
    {
      v22 = off_254740B70;
      if ((*(_BYTE *)off_254740B70() & 1) == 0)
      {
        v27 = 0;
        v28 = off_254740B58;
        do
        {
          v29 = v28(&off_254740B58) + v27;
          *(_QWORD *)v29 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v29 + 8));
          v27 += 16;
        }
        while (v27 != 0x4000);
        v30 = (void *)v28(&off_254740B58);
        _tlv_atexit((void (__cdecl *)(void *))sub_20C143BB8, v30);
        *(_BYTE *)((uint64_t (*)(uint64_t (**)(void)))v22)(&off_254740B70) = 1;
      }
      v6 = off_254740B58(&off_254740B58);
      *v23 = v6;
    }
    v7 = 0;
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    v9 = bswap64((2135587925 * v8)) >> 54;
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 16 * (((_WORD)v9 + (_WORD)v7) & 0x3FF));
      if ((v10 & 0xFFFFFFFFFFFFFFF8) == v8)
        break;
      if (v10)
        v11 = v7 == 1;
      else
        v11 = 1;
      ++v7;
      if (v11)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v32);
        goto LABEL_12;
      }
    }
    sub_20BFD6EA4(&v32, (_DWORD *)(v6 + 16 * (((_WORD)v9 + (_WORD)v7) & 0x3FF) + 8));
    v9 = 0;
LABEL_12:
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty(a2, (uint64_t)&v34, sub_20C142330, &v39);
      sub_20BFD3F10(&v32, (int *)&v39);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32))
      {
        sub_20BFD6EA4(&v31, &v32);
        v12 = *(unsigned int **)a2;
        v39 = v12;
        if ((v12 & 7) != 0)
        {
          v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 2, v13));
          if ((v14 & 1) == 0)
            v39 = v13;
        }
        sub_20BFD6EA4(&v40, &v31);
        v15 = v6 + 16 * v9;
        if (&v39 != (unsigned int **)v15)
        {
          if ((*(_QWORD *)v15 & 7) != 0)
          {
            v16 = (unsigned int *)(*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          *(_QWORD *)v15 = v39;
          v39 = 0;
        }
        sub_20BFD3F10((int *)(v15 + 8), &v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
        if ((v39 & 7) != 0)
        {
          v18 = (unsigned int *)((unint64_t)v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      }
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32))
    {
      sub_20C01A074(a3, this);
      sub_20BFD3F10(a3 + 1, &v32);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20C13C778(&v33);
  }
}

void sub_20C13B7F8(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t Ptr;
  int v8;
  _QWORD v9[3];
  void **v10;

  v9[0] = this;
  v9[1] = a2;
  v9[2] = &v10;
  v10 = 0;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateRelationalAttribute(Ptr, (uint64_t *)a2, (uint64_t)v9, (uint64_t (*)(uint64_t))sub_20C142A94, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_20BFD6E54(a3, this);
    sub_20BFD6EA4(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_20C13C778(&v10);
}

void sub_20C13B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C13C778((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _DWORD *v1;
  uint64_t Ptr;
  int v3;

  v1 = (_DWORD *)((char *)this + 4);
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
  if ((Ptr & 1) != 0)
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v1);
    if (Ptr)
    {
      if ((*(_BYTE *)(Ptr + 15) & 4) != 0)
      {
        while (1)
        {
          v3 = *(unsigned __int8 *)(Ptr + 14);
          if ((v3 & 0xFE) == 4)
            break;
          Ptr = *(_QWORD *)Ptr;
          if (!Ptr)
            goto LABEL_10;
        }
        if (v3 == 4 || v3 == 5)
          return (uint64_t *)(Ptr + 16);
      }
    }
  }
LABEL_10:
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Ptr);
  return &qword_254985B98;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively(uint64_t a1, uint64_t *a2)
{
  _DWORD *v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = (_DWORD *)(a1 + 4);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v3);
    if (result)
    {
      v5 = result;
      if ((*(_BYTE *)(result + 15) & 4) != 0)
      {
        while ((*(_BYTE *)(v5 + 14) & 0xFE) != 4)
        {
          v5 = *(_QWORD *)v5;
          if (!v5)
            return result;
        }
        while (1)
        {
          v6 = *(unsigned __int8 *)(v5 + 14);
          if (v6 == 4 || v6 == 5)
          {
            v7 = (uint64_t *)(v5 + 16);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result);
            v7 = &qword_254985B98;
          }
          v8 = a2[1];
          if (v8 >= a2[2])
          {
            v9 = sub_20BFD7890(a2, v7);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)a2[1], v7);
            sub_20BFD6EA4((_DWORD *)(v8 + 4), (_DWORD *)v7 + 1);
            v9 = v8 + 8;
          }
          a2[1] = v9;
          result = pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively(v7, a2);
          v5 = *(_QWORD *)v5;
          if (!v5 || (*(_BYTE *)(v5 + 15) & 4) == 0)
            break;
          while ((*(_BYTE *)(v5 + 14) & 0xFE) != 4)
          {
            v5 = *(_QWORD *)v5;
            if (!v5)
              return result;
          }
        }
      }
    }
  }
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  std::string *result;
  uint64_t Ptr;
  _QWORD *v6;
  const std::string *EmptyString;
  std::string *v8;
  const std::string *v9;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  result = (std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(this);
  if ((_DWORD)result)
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    if (*(_BYTE *)(Ptr + 14) == 2)
    {
      v6 = *(_QWORD **)(Ptr + 16);
    }
    else
    {
      Ptr = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetEmptyVariantSelection((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)Ptr);
      v6 = (_QWORD *)Ptr;
    }
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const std::string *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Ptr);
    v8 = std::string::operator=((std::string *)a2, EmptyString);
    if ((v6[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      v9 = (const std::string *)((v6[1] & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v9 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
    return std::string::operator=((std::string *)(a2 + 24), v9);
  }
  return result;
}

void sub_20C13BB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE930F8(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _BOOL8 result;
  _DWORD *v5;
  _QWORD *Ptr;
  uint64_t v7;
  BOOL v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
    if ((_DWORD)result)
    {
      v5 = (_DWORD *)((char *)a2 + 4);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 1))
      {
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator!=(this, a2))
        {
          result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
          if (!(_DWORD)result)
            return result;
          Ptr = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
          v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v5);
          if (Ptr && Ptr != (_QWORD *)v7)
          {
            do
            {
              Ptr = (_QWORD *)*Ptr;
              if (Ptr)
                v8 = Ptr == (_QWORD *)v7;
              else
                v8 = 1;
            }
            while (!v8);
          }
          return Ptr == (_QWORD *)v7;
        }
      }
      else
      {
        v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        v11 = v10;
        if ((*((_BYTE *)v10 + 15) & 1) != 0
          && *(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10))
        {
          return 1;
        }
        v12 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
        v13 = *(unsigned __int16 *)(v12 + 12);
        v14 = *((unsigned __int16 *)v11 + 6);
        if (v14 >= v13)
        {
          if (v14 > v13)
          {
            do
            {
              v11 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v11;
              --v14;
            }
            while ((int)v14 > (int)v13);
          }
          return v11 == (pxrInternal__aapl__pxrReserved__::SdfPath *)v12;
        }
      }
      return 0;
    }
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t i;

  for (i = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        i;
        i = *(_QWORD *)i)
  {
    if (*(_BYTE *)(i + 14) == 1)
      break;
  }
  return sub_20C141C98(a2, i, 0);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t i;

  for (i = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        i;
        i = *(_QWORD *)i)
  {
    if (*(unsigned __int8 *)(i + 14) - 1 < 2)
      break;
  }
  return sub_20C141C98(a2, i, 0);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  if (*(_QWORD *)this != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this))
    return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(this, a2);
  sub_20BFD6E54(a2, this);
  return sub_20BFD6EA4(a2 + 1, (_DWORD *)this + 1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, int *a2@<X8>)
{
  uint64_t Ptr;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  void *__p;
  uint64_t *v20;
  uint64_t *v21;

  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (Ptr && (*(_BYTE *)(Ptr + 15) & 2) != 0)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    v6 = 0;
    do
    {
      if (*(_BYTE *)(v5 + 14) != 2)
      {
        if (v6 >= v21)
        {
          v7 = ((char *)v6 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v7 + 1) >> 61)
            sub_20BDDF694();
          v8 = ((char *)v21 - (_BYTE *)__p) >> 2;
          if (v8 <= v7 + 1)
            v8 = v7 + 1;
          if ((unint64_t)((char *)v21 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v9 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v9 = v8;
          if (v9)
            v10 = (char *)sub_20BDDF6A8((uint64_t)&v21, v9);
          else
            v10 = 0;
          v11 = (uint64_t *)&v10[8 * v7];
          *v11 = v5;
          v6 = v11 + 1;
          v13 = (char *)__p;
          v12 = (char *)v20;
          if (v20 != __p)
          {
            do
            {
              v14 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              *--v11 = v14;
            }
            while (v12 != v13);
            v12 = (char *)__p;
          }
          __p = v11;
          v20 = v6;
          v21 = (uint64_t *)&v10[8 * v9];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v6++ = v5;
        }
        v20 = v6;
      }
      v5 = *(_QWORD *)v5;
    }
    while (v5);
    sub_20C141C98(a2, *(v6 - 1), 0);
    v15 = (char *)(v20 - 1);
    if (v20 - 1 != __p)
    {
      do
      {
        v16 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v16, &v17);
        sub_20BFD3EBC(a2, &v17);
        sub_20BFD3F10(a2 + 1, &v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_20BFD265C(&v17);
      }
      while (v15 != __p);
    }
    sub_20C01A0C8(a2 + 1, (_DWORD *)this + 1);
    if (__p)
    {
      v20 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_20BFD6E54(a2, this);
    sub_20BFD6EA4(a2 + 1, (_DWORD *)this + 1);
  }
}

void sub_20C13BF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C13BFA4(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  int v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t *EmptyString;
  _QWORD v10[4];
  char v11;

  v4 = *(unsigned __int8 *)(a2 + 14);
  v5 = this;
  switch(*(_BYTE *)(a2 + 14))
  {
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), a3);
      break;
    case 2:
      v7 = *(_QWORD **)(a2 + 16);
      if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else
      {
        this = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
        v8 = this;
      }
      if ((v7[1] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((v7[1] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(v5, (uint64_t)v8, (uint64_t)EmptyString, a3);
      break;
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), a3);
      break;
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), a3);
      break;
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), a3);
      break;
    case 6:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), a3);
      break;
    case 7:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), a3);
      break;
    case 8:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(this, a3);
      break;
    default:
      v10[0] = "sdf/path.cpp";
      v10[1] = "_AppendNode";
      v10[2] = 671;
      v10[3] = "SdfPath pxrInternal__aapl__pxrReserved__::_AppendNode(const SdfPath &, const Sdf_PathNode *)";
      v11 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected node type %i", v4);
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v6);
      sub_20BFD6E54(a3, &qword_254985B98);
      sub_20BFD6EA4(a3 + 1, (_DWORD *)&qword_254985B98 + 1);
      break;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  const char *v8;
  _BOOL8 IsAbsolutePath;
  int v10;
  void **v11;
  char *v12;
  void **v13;
  void **v14;
  unsigned int v15;
  _BOOL4 v16;
  char *v17;
  int v18;
  uint64_t Ptr;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *RelativeRootNode;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *i;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode **v37;
  char *v38;
  char *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v40;
  char *v41;
  pxrInternal__aapl__pxrReserved__::SdfPath *v42;
  char *v43;
  pxrInternal__aapl__pxrReserved__::SdfPath *v44;
  uint64_t v45;
  void *__p[2];
  char v47;
  void *v48;
  char *v49;
  char *v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  char v55;

  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(this);
  if (*(_QWORD *)this == qword_254985B98)
  {
    v51 = "sdf/path.cpp";
    v52 = "AppendPath";
    v53 = 704;
    v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append to invalid path");
LABEL_19:
    pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
    sub_20BFD6E54(a3, &qword_254985B98);
    sub_20BFD6EA4(a3 + 1, (_DWORD *)&qword_254985B98 + 1);
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  if (*(_QWORD *)a2 == qword_254985B98)
  {
    v51 = "sdf/path.cpp";
    v52 = "AppendPath";
    v53 = 709;
    v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)&v48);
    if (SHIBYTE(v50) >= 0)
      v8 = (const char *)&v48;
    else
      v8 = (const char *)v48;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append invalid path to <%s>", v8);
LABEL_17:
    if (SHIBYTE(v50) < 0)
      operator delete(v48);
    goto LABEL_19;
  }
  IsAbsolutePath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2);
  if (IsAbsolutePath)
  {
    v51 = "sdf/path.cpp";
    v52 = "AppendPath";
    v53 = 714;
    v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(a2, (uint64_t)&v48);
    v10 = SHIBYTE(v50);
    v11 = (void **)v48;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (v10 >= 0)
      v13 = &v48;
    else
      v13 = v11;
    if (v47 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Cannot append absolute path <%s> to another path <%s>.", v12, v13, v14);
    if (v47 < 0)
      operator delete(__p[0]);
    goto LABEL_17;
  }
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsAbsolutePath))
  {
    sub_20BFD6E54(a3, this);
    sub_20BFD6EA4(a3 + 1, (_DWORD *)this + 1);
    return;
  }
  v15 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
                           + 14);
  v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
  v18 = v15 > 2 || v16;
  if (v18 == 1)
  {
    v51 = "sdf/path.cpp";
    v52 = "AppendPath";
    v53 = 726;
    v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Cannot append a path to another path that is not a root or a prim path.", v17);
    goto LABEL_19;
  }
  v48 = 0;
  v49 = 0;
  v50 = 0;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
  if (Ptr)
  {
    v20 = (_QWORD *)Ptr;
    v21 = 0;
    do
    {
      if (v21 >= v50)
      {
        v22 = (v21 - (_BYTE *)v48) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
LABEL_76:
          sub_20BDDF694();
        v23 = (v50 - (_BYTE *)v48) >> 2;
        if (v23 <= v22 + 1)
          v23 = v22 + 1;
        if ((unint64_t)(v50 - (_BYTE *)v48) >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)sub_20BDDF6A8((uint64_t)&v50, v24);
        else
          v25 = 0;
        v26 = &v25[8 * v22];
        *(_QWORD *)v26 = v20;
        v21 = v26 + 8;
        v28 = (char *)v48;
        v27 = v49;
        if (v49 != v48)
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          v27 = (char *)v48;
        }
        v48 = v26;
        v49 = v21;
        v50 = &v25[8 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_QWORD *)v21 = v20;
        v21 += 8;
      }
      v49 = v21;
      v20 = (_QWORD *)*v20;
    }
    while (v20);
  }
  RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  for (i = RelativeRootNode; ; i = *(pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)i)
  {
    RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(RelativeRootNode);
    v32 = v49;
    if (i == RelativeRootNode)
      break;
    if (v49 >= v50)
    {
      v34 = (v49 - (_BYTE *)v48) >> 3;
      if ((unint64_t)(v34 + 1) >> 61)
        goto LABEL_76;
      v35 = (v50 - (_BYTE *)v48) >> 2;
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      if ((unint64_t)(v50 - (_BYTE *)v48) >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)sub_20BDDF6A8((uint64_t)&v50, v36);
      else
        RelativeRootNode = 0;
      v37 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)((char *)RelativeRootNode + 8 * v34);
      *v37 = i;
      v33 = (char *)(v37 + 1);
      v39 = (char *)v48;
      v38 = v49;
      if (v49 != v48)
      {
        do
        {
          v40 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)*((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v37 = v40;
        }
        while (v38 != v39);
        v38 = (char *)v48;
      }
      v48 = v37;
      v49 = v33;
      v50 = (char *)RelativeRootNode + 8 * v36;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v49 = i;
      v33 = v32 + 8;
    }
    v49 = v33;
  }
  if (*(_BYTE *)(*((_QWORD *)v49 - 1) + 14) == 3
    && *(_QWORD *)this == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(RelativeRootNode))
  {
    v51 = "sdf/path.cpp";
    v52 = "AppendPath";
    v53 = 747;
    v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Cannot append a property path to the absolute root path.", v41);
    pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v42);
    sub_20BFD6E54(a3, &qword_254985B98);
    sub_20BFD6EA4(a3 + 1, (_DWORD *)&qword_254985B98 + 1);
LABEL_69:
    v43 = (char *)v48;
    goto LABEL_74;
  }
  sub_20BFD6E54(a3, this);
  v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6EA4(a3 + 1, (_DWORD *)this + 1);
  v43 = v49;
  if (v49 != v48)
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v44);
      if (*(_QWORD *)a3 == qword_254985B98)
        goto LABEL_69;
      v45 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, v45, (int *)&v51);
      sub_20BFD3EBC(a3, (int *)&v51);
      sub_20BFD3F10(a3 + 1, (int *)&v51 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
      v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v51);
      if (v43 == v48)
        goto LABEL_75;
    }
  }
LABEL_74:
  if (v43)
  {
LABEL_75:
    v49 = v43;
    operator delete(v43);
  }
}

void sub_20C13C708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_20C13C778(void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  char v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = (char *)*v2;
    v4 = (char *)v2[1];
    if (*v2 != v4)
    {
      do
      {
        if (*(_DWORD *)v3 == 1)
        {
          v6 = "sdf/path.cpp";
          v7 = "~_DeferredDiagnostics";
          v8 = 82;
          v9 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DeferredDiagnostics::~_DeferredDiagnostics()";
          v10 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1);
        }
        else if (*(_DWORD *)v3 == 6)
        {
          v6 = "sdf/path.cpp";
          v7 = "~_DeferredDiagnostics";
          v8 = 79;
          v9 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DeferredDiagnostics::~_DeferredDiagnostics()";
          v10 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v6, (std::string *)(v3 + 8));
        }
        v3 += 32;
      }
      while (v3 != v4);
    }
  }
  sub_20C1421A8(a1, 0);
  return a1;
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t Ptr;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[4];
  void **v15;

  v15 = 0;
  v14[0] = a1;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = &v15;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimVariantSelection(Ptr, &v12, &v11, (uint64_t)v14, (uint64_t (*)(uint64_t))sub_20C142554, &v13);
  sub_20BFD38A4(a4, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  sub_20BFD265C(&v13);
  if ((v11 & 7) != 0)
  {
    v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v12 & 7) != 0)
  {
    v8 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return sub_20C13C778(&v15);
}

void sub_20C13C940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  if ((a9 & 7) != 0)
  {
    v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((a10 & 7) != 0)
  {
    v14 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  sub_20C13C778((void ***)(v10 - 40));
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t Ptr;
  int v8;
  _QWORD v9[3];
  void **v10;

  v9[0] = this;
  v9[1] = a2;
  v9[2] = &v10;
  v10 = 0;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateTarget(Ptr, (unsigned int *)a2, (uint64_t)v9, sub_20C142734, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_20BFD6E54(a3, this);
    sub_20BFD6EA4(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_20C13C778(&v10);
}

void sub_20C13CA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C13C778((void ***)va);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t Ptr;
  int v8;
  _QWORD v9[3];
  void **v10;

  v9[0] = this;
  v9[1] = a2;
  v9[2] = &v10;
  v10 = 0;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapper(Ptr, (unsigned int *)a2, (uint64_t)v9, (uint64_t (*)(uint64_t))sub_20C142D14, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_20BFD6E54(a3, this);
    sub_20BFD6EA4(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_20C13C778(&v10);
}

void sub_20C13CB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C13C778((void ***)va);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t Ptr;
  int v8;
  _QWORD v9[3];
  void **v10;

  v9[0] = this;
  v9[1] = a2;
  v9[2] = &v10;
  v10 = 0;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapperArg(Ptr, (uint64_t *)a2, (uint64_t)v9, (uint64_t (*)(uint64_t))sub_20C1430C4, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_20BFD6E54(a3, this);
    sub_20BFD6EA4(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_20C13C778(&v10);
}

void sub_20C13CC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C13C778((void ***)va);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t Ptr;
  int v6;
  _QWORD v7[2];
  void **v8;

  v7[0] = this;
  v7[1] = &v8;
  v8 = 0;
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateExpression(Ptr, (uint64_t)v7, (uint64_t (*)(uint64_t))sub_20C14332C, &v6);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6))
  {
    sub_20BFD6E54(a2, this);
    sub_20BFD6EA4(a2 + 1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
    *(_QWORD *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  return sub_20C13C778(&v8);
}

void sub_20C13CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C13C778((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementString(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, int *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6, a2);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  uint64_t *EmptyString;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t Ptr;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  char v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  std::string::size_type v20;
  const char *v21;
  size_t v22;
  size_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  std::string::size_type v29;
  pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v41;
  uint64_t *v42;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v43;
  uint64_t *v44;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v45;
  uint64_t *v46;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v47;
  uint64_t *v48;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v49;
  uint64_t *v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string v56;
  const char *v57;
  char v58;
  unint64_t v59;
  char v60;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    v7 = (unsigned __int8 *)EmptyString;
    if (*((char *)EmptyString + 23) < 0)
      v7 = (unsigned __int8 *)*EmptyString;
    v8 = *v7;
    if (v8 == 91)
    {
      v9 = *((unsigned __int8 *)EmptyString + 23);
      if ((v9 & 0x80) != 0)
        v9 = EmptyString[1];
      std::string::basic_string(&v56, (const std::string *)EmptyString, 1uLL, v9 - 2, (std::allocator<char> *)&v60);
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath((int *)&v59, (__int128 *)&v56);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
      goto LABEL_16;
    }
    if (v8 != 46)
    {
      if (v8 != 123)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(this, a2, a3);
        return;
      }
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)EmptyString, "{=}", &v56);
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3);
      if (v32 == 1)
      {
        v33 = 0;
      }
      else
      {
        if (v32 != 2)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v31);
          sub_20BFD6E54(a3, &qword_254985B98);
          sub_20BFD6EA4(a3 + 1, (_DWORD *)&qword_254985B98 + 1);
          v33 = 0;
LABEL_81:
          if ((v33 & 7) != 0)
          {
            v39 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stlxr(v40 - 2, v39));
          }
          v59 = (unint64_t)&v56;
          sub_20BDE5038((void ***)&v59);
          return;
        }
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v59);
        v33 = v59;
      }
      v34 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v59);
      if ((v59 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v35 = (v59 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        v34 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v34);
        v35 = (uint64_t)v34;
      }
      if ((v33 & 0xFFFFFFFFFFFFFFF8) != 0)
        v36 = (uint64_t *)((v33 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v34);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(this, v35, (uint64_t)v36, a3);
      if ((v59 & 7) != 0)
      {
        v37 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      goto LABEL_81;
    }
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    if (!Ptr)
      goto LABEL_46;
    v11 = *(unsigned __int8 *)(Ptr + 14);
    if (v11 != 6 && v11 != 3)
      goto LABEL_46;
    v12 = atomic_load((unsigned __int8 *)&qword_254985BE0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254985BE0))
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v41)
        v41 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*((_QWORD *)v41 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
        v42 = (uint64_t *)((*((_QWORD *)v41 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v42 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
      v45 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v45)
        v45 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*((_QWORD *)v45 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
        v46 = (uint64_t *)((*((_QWORD *)v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v46 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v42, (const void **)v46, (uint64_t)&v56);
      v49 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v49)
        v49 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*((_QWORD *)v49 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
        v50 = (uint64_t *)((*((_QWORD *)v49 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v50 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v49);
      v51 = *((char *)v50 + 23);
      if (v51 >= 0)
        v52 = (const std::string::value_type *)v50;
      else
        v52 = (const std::string::value_type *)*v50;
      if (v51 >= 0)
        v53 = *((unsigned __int8 *)v50 + 23);
      else
        v53 = v50[1];
      v54 = std::string::append(&v56, v52, v53);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      unk_254985BD8 = *((_QWORD *)&v54->__r_.__value_.__l + 2);
      xmmword_254985BC8 = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254985BC8, &dword_20BDBC000);
      __cxa_guard_release(&qword_254985BE0);
    }
    v13 = atomic_load((unsigned __int8 *)&qword_254985C00);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254985C00))
    {
      v43 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v43)
        v43 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*((_QWORD *)v43 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
        v44 = (uint64_t *)((*((_QWORD *)v43 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
      v47 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v47)
        v47 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*((_QWORD *)v47 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
        v48 = (uint64_t *)((*((_QWORD *)v47 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v48 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v44, (const void **)v48, (uint64_t)&qword_254985BE8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254985BE8, &dword_20BDBC000);
      __cxa_guard_release(&qword_254985C00);
    }
    v14 = *((_BYTE *)EmptyString + 23);
    if (v14 >= 0)
      v15 = *((unsigned __int8 *)EmptyString + 23);
    else
      v15 = EmptyString[1];
    v16 = qword_254985BF0;
    if (byte_254985BFF >= 0)
      v16 = byte_254985BFF;
    if (v15 == v16)
    {
      if (byte_254985BFF >= 0)
        v17 = &qword_254985BE8;
      else
        v17 = (uint64_t *)qword_254985BE8;
      if ((*((_BYTE *)EmptyString + 23) & 0x80) == 0)
      {
        if (*((_BYTE *)EmptyString + 23))
        {
          v18 = EmptyString;
          v19 = *((unsigned __int8 *)EmptyString + 23);
          while (*(unsigned __int8 *)v18 == *(unsigned __int8 *)v17)
          {
            v18 = (uint64_t *)((char *)v18 + 1);
            v17 = (uint64_t *)((char *)v17 + 1);
            if (!--v19)
              goto LABEL_57;
          }
          goto LABEL_38;
        }
LABEL_57:
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(this, a3);
        return;
      }
      if (!memcmp((const void *)*EmptyString, v17, EmptyString[1]))
        goto LABEL_57;
    }
LABEL_38:
    v20 = byte_254985BDF;
    if (byte_254985BDF >= 0)
      v21 = (const char *)&xmmword_254985BC8;
    else
      v21 = (const char *)xmmword_254985BC8;
    v22 = strlen(v21);
    if (v15 < v22
      || ((v23 = v22, v14 >= 0) ? (v24 = (const char *)EmptyString) : (v24 = (const char *)*EmptyString),
          strncmp(v24, v21, v23)))
    {
LABEL_46:
      std::string::basic_string(&v56, (const std::string *)EmptyString, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v60);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v59);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v25 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      if (v25 && *(_BYTE *)(v25 + 14) == 5)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59, a3);
      }
      else
      {
        v26 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
        if (v26 && *(_BYTE *)(v26 + 14) == 4)
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59, a3);
        else
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59, a3);
      }
      if ((v59 & 7) != 0)
      {
        v27 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      return;
    }
    if ((v20 & 0x80u) == 0)
      v29 = v20;
    else
      v29 = *((_QWORD *)&xmmword_254985BC8 + 1);
    std::string::basic_string(&v56, (const std::string *)EmptyString, v29, v15 + ~v29, (std::allocator<char> *)&v60);
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath((int *)&v59, (__int128 *)&v56);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
LABEL_16:
    sub_20BFD265C(&v59);
    return;
  }
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/path.cpp";
  v56.__r_.__value_.__l.__size_ = (std::string::size_type)"AppendElementToken";
  v56.__r_.__value_.__r.__words[2] = 1117;
  v57 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(const TfToken &) const";
  v58 = 0;
  if (*((char *)EmptyString + 23) < 0)
    EmptyString = (uint64_t *)*EmptyString;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append element '%s' to the EmptyPath.", (const char *)EmptyString);
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v30);
  sub_20BFD6E54(a3, &qword_254985B98);
  sub_20BFD6EA4(a3 + 1, (_DWORD *)&qword_254985B98 + 1);
}

void sub_20C13D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254985BE0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePrimPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int *a4@<X8>)
{
  uint64_t Ptr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *NameImpl;
  char v26;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v28;
  int v29;
  int v30;
  char v31;
  _OWORD v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  v10 = *(unsigned __int16 *)(v9 + 12);
  v11 = *(unsigned __int16 *)(Ptr + 12);
  if (v11 < v10)
  {
    sub_20BFD6E54(a4, this);
    sub_20BFD6EA4(a4 + 1, (_DWORD *)this + 1);
    return;
  }
  v12 = v9;
  v13 = v11 - v10;
  memset(v32, 0, sizeof(v32));
  if ((v11 - v10) < 0x11)
  {
    v15 = 0;
    v16 = (uint64_t *)v32;
  }
  else
  {
    if (v13 < 0)
      v14 = -1;
    else
      v14 = 8 * v13;
    v15 = (uint64_t *)operator new[](v14);
    v16 = v15;
  }
  if (v11 <= v10)
  {
    v17 = 0;
  }
  else
  {
    v17 = (v11 - v10);
    v18 = v16;
    v19 = v13;
    do
    {
      *v18++ = Ptr;
      Ptr = *(_QWORD *)Ptr;
      --v19;
    }
    while (v19);
  }
  if (Ptr != v12)
  {
    sub_20BFD6E54(a4, this);
    sub_20BFD6EA4(a4 + 1, (_DWORD *)this + 1);
    if (!v15)
      return;
    goto LABEL_16;
  }
  sub_20BFD6E54(a4, a3);
  sub_20BFD6EA4(a4 + 1, (_DWORD *)a3 + 1);
  if (v17)
  {
    v20 = (char *)(v16 - 1);
    v21 = 8 * v17;
    do
    {
      v22 = *(_QWORD *)&v20[v21];
      if (*(_BYTE *)(v22 + 14) == 1)
      {
        v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a4);
        v24 = *(uint64_t **)&v20[v21];
        switch(*((_BYTE *)v24 + 14))
        {
          case 0:
            v26 = *((_BYTE *)v24 + 15);
            NameImpl = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            if ((v26 & 1) != 0)
            {
              if (!NameImpl)
                NameImpl = (uint64_t *)sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            }
            else
            {
              if (!NameImpl)
                NameImpl = (uint64_t *)sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              ++NameImpl;
            }
            break;
          case 1:
          case 3:
          case 6:
          case 7:
            NameImpl = v24 + 2;
            break;
          case 2:
            NameImpl = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)v24);
            break;
          case 8:
            v28 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            if (!v28)
              v28 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            NameImpl = (uint64_t *)((char *)v28 + 64);
            break;
          default:
            v27 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            if (!v27)
              v27 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            NameImpl = (uint64_t *)((char *)v27 + 88);
            break;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim(v23, NameImpl, (uint64_t)&v31, (uint64_t (*)(uint64_t))sub_20C1434B8, &v29);
        sub_20BFD3EBC(a4, &v29);
      }
      else
      {
        sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v22, &v29);
        sub_20BFD3EBC(a4, &v29);
        sub_20BFD3F10(a4 + 1, &v30);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      }
      sub_20BFD265C(&v29);
      v21 -= 8;
    }
    while (v21);
  }
  sub_20C01A0C8(a4 + 1, (_DWORD *)this + 1);
  if (v15)
LABEL_16:
    operator delete[](v15);
}

void sub_20C13D8D0(_Unwind_Exception *a1)
{
  _DWORD *v1;
  void *v2;

  sub_20BFD1A18(v1);
  if (v2)
    operator delete[](v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int *a4@<X8>)
{
  _DWORD *v8;
  uint64_t Ptr;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  _OWORD v25[8];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = (_DWORD *)((char *)this + 4);
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if ((*(_BYTE *)(Ptr + 15) & 4) == 0)
  {
    sub_20BFD6E54(a4, this);
    sub_20BFD6EA4(a4 + 1, v8);
    return;
  }
  v10 = Ptr;
  memset(v25, 0, sizeof(v25));
  v11 = *(unsigned __int16 *)(Ptr + 12);
  if (v11 < 0x11)
  {
    v12 = 0;
    v13 = v25;
  }
  else
  {
    v12 = operator new[](8 * v11);
    v13 = v12;
  }
  v14 = 0;
  while ((*(_BYTE *)(v10 + 15) & 4) != 0)
  {
    v15 = v14 + 1;
    *((_QWORD *)v13 + v14) = v10;
    v10 = *(_QWORD *)v10;
    ++v14;
    if (!v10)
      goto LABEL_11;
  }
  v15 = v14;
LABEL_11:
  v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  sub_20C141C98(a4, v16, v10);
  if (v15)
  {
    v17 = (char *)v13 - 8;
    while (1)
    {
      v18 = *(_QWORD *)&v17[8 * v15];
      v19 = *(unsigned __int8 *)(v18 + 14);
      if (v19 != 3)
        break;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty((_QWORD *)(v18 + 16), (uint64_t)&v24, (uint64_t (*)(uint64_t))sub_20C1434C0, &v22);
      sub_20BFD3F10(a4 + 1, &v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
LABEL_22:
      if (!--v15)
        goto LABEL_23;
    }
    if (v19 == 4)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16), a2, a3, 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v22);
      sub_20BFD3EBC(a4, &v22);
      sub_20BFD3F10(a4 + 1, &v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_20BFD265C(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    }
    else
    {
      if (v19 != 5)
      {
        sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v18, &v22);
        sub_20BFD3EBC(a4, &v22);
        sub_20BFD3F10(a4 + 1, &v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
        v20 = (uint64_t *)&v22;
        goto LABEL_21;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16), a2, a3, 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v22);
      sub_20BFD3EBC(a4, &v22);
      sub_20BFD3F10(a4 + 1, &v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_20BFD265C(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    }
    v20 = &v21;
LABEL_21:
    sub_20BFD265C(v20);
    goto LABEL_22;
  }
LABEL_23:
  if (v12)
    operator delete[](v12);
}

void sub_20C13DBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  void *v11;

  if (v11)
    operator delete[](v11);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix@<X0>(uint64_t *__return_ptr a1@<X8>, pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a4@<X2>, int a5@<W3>)
{
  _BOOL8 v11;
  uint64_t Ptr;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this)
    && *(_QWORD *)a3 != *(_QWORD *)a4)
  {
    v11 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
    if (!v11
      || !(v11 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4)))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
      sub_20BFD6E54(a1, &qword_254985B98);
      return (uint64_t *)sub_20BFD6EA4((_DWORD *)a1 + 1, (_DWORD *)&qword_254985B98 + 1);
    }
    if (*(_QWORD *)this == *(_QWORD *)a3)
    {
      sub_20BFD6E54(a1, a4);
      return (uint64_t *)sub_20BFD6EA4((_DWORD *)a1 + 1, (_DWORD *)a4 + 1);
    }
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v17);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a3 + 1))
    {
      if (!v13)
      {
LABEL_15:
        sub_20BFD6E54(a1, this);
        sub_20BFD6EA4((_DWORD *)a1 + 1, (_DWORD *)this + 1);
LABEL_25:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        return (uint64_t *)sub_20BFD265C(&v16);
      }
      if (Ptr == pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePropPrefix(this, a3, a4, a5, &v14);
        sub_20BFD3EBC(&v16, &v14);
LABEL_23:
        sub_20BFD3F10(&v17, &v15);
        sub_20BFD1A18(&v14);
LABEL_24:
        sub_20BFD38A4(a1, &v16);
        sub_20BFD38DC((_DWORD *)a1 + 1, &v17);
        goto LABEL_25;
      }
      if (!a5 || (*(_BYTE *)(v13 + 15) & 4) == 0)
        goto LABEL_15;
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(this, a3, a4, &v14);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePrimPrefix(this, a3, a4, &v14);
      sub_20BFD3EBC(&v16, &v14);
      sub_20BFD3F10(&v17, &v15);
      sub_20BFD1A18(&v14);
      if (!a5 || !v13 || (*(_BYTE *)(v13 + 15) & 4) == 0)
        goto LABEL_24;
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, a3, a4, &v14);
    }
    sub_20BFD3EBC(&v16, &v14);
    goto LABEL_23;
  }
  sub_20BFD6E54(a1, this);
  return (uint64_t *)sub_20BFD6EA4((_DWORD *)a1 + 1, (_DWORD *)this + 1);
}

void sub_20C13DEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePropPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int a4@<W3>, int *a5@<X8>)
{
  _DWORD *v10;
  uint64_t Ptr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  uint64_t v18;
  size_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  void *__p;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  _OWORD v38[8];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v10 = (_DWORD *)((char *)this + 4);
  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  v12 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
  v13 = *(unsigned __int16 *)(v12 + 12);
  v14 = *(unsigned __int16 *)(Ptr + 12);
  if (v14 < v13)
  {
    if (a4 && (*(_BYTE *)(Ptr + 15) & 4) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(this, a2, a3, a5);
    }
    else
    {
      sub_20BFD6E54(a5, this);
      sub_20BFD6EA4(a5 + 1, v10);
    }
    return;
  }
  v15 = v12;
  v33 = a4;
  v16 = a2;
  v17 = a3;
  v18 = v14 - v13;
  memset(v38, 0, sizeof(v38));
  if ((v14 - v13) < 0x11)
  {
    __p = 0;
    v20 = v38;
  }
  else
  {
    if (v18 < 0)
      v19 = -1;
    else
      v19 = 8 * v18;
    v20 = operator new[](v19);
    __p = v20;
  }
  if (v14 <= v13)
  {
    v21 = 0;
  }
  else
  {
    v21 = (v14 - v13);
    v22 = (uint64_t *)v20;
    v23 = v18;
    do
    {
      *v22++ = Ptr;
      Ptr = *(_QWORD *)Ptr;
      --v23;
    }
    while (v23);
  }
  v24 = v16;
  if (Ptr == v15)
  {
    v26 = v20;
    sub_20BFD6E54(a5, v17);
    sub_20BFD6EA4(a5 + 1, (_DWORD *)v17 + 1);
    if (!v21)
      goto LABEL_38;
    v27 = (char *)v26 - 8;
    v28 = 8 * v21;
    while (1)
    {
      v29 = *(_QWORD *)&v27[v28];
      v30 = *(unsigned __int8 *)(v29 + 14);
      if (v30 == 5)
        break;
      if (v30 == 4)
      {
        if (v33)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v34, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 + 16), v24, v17, 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v35);
          sub_20BFD3EBC(a5, &v35);
          sub_20BFD3F10(a5 + 1, &v36);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
          sub_20BFD265C(&v35);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
LABEL_31:
          v31 = &v34;
LABEL_33:
          sub_20BFD265C(v31);
          goto LABEL_34;
        }
LABEL_32:
        sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, v29, &v35);
        sub_20BFD3EBC(a5, &v35);
        sub_20BFD3F10(a5 + 1, &v36);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
        v31 = (uint64_t *)&v35;
        goto LABEL_33;
      }
      if (v30 != 3)
        goto LABEL_32;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty((_QWORD *)(v29 + 16), (uint64_t)&v37, (uint64_t (*)(uint64_t))sub_20C1434C8, &v35);
      sub_20BFD3F10(a5 + 1, &v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
LABEL_34:
      v28 -= 8;
      if (!v28)
        goto LABEL_38;
    }
    if (v33)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v34, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 + 16), v24, v17, 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v35);
      sub_20BFD3EBC(a5, &v35);
      sub_20BFD3F10(a5 + 1, &v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_20BFD265C(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  if (v33
    && (v25 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v10)) != 0
    && (*(_BYTE *)(v25 + 15) & 4) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(this, v16, v17, a5);
  }
  else
  {
    sub_20BFD6E54(a5, this);
    sub_20BFD6EA4(a5 + 1, v10);
  }
LABEL_38:
  if (__p)
    operator delete[](__p);
}

void sub_20C13E324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, int a10, char a11)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  char *v6;
  uint64_t Ptr;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v13[4];
  char v14;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 1)
      && !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator!=(this, a2))
    {
      Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
      v9 = 0;
    }
    else
    {
      Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
      v9 = 1;
    }
    v10 = *(unsigned __int16 *)(Ptr + 12);
    v11 = *(unsigned __int16 *)(v8 + 12);
    if (v10 <= v11)
    {
      if (v10 < v11)
      {
        do
        {
          v8 = *(_QWORD *)v8;
          --v11;
        }
        while (v11 > v10);
      }
    }
    else
    {
      do
      {
        Ptr = *(_QWORD *)Ptr;
        --v10;
      }
      while (v10 > v11);
    }
    while (Ptr != v8)
    {
      Ptr = *(_QWORD *)Ptr;
      v8 = *(_QWORD *)v8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    if (v9)
    {
      return sub_20C13E568(a3, Ptr);
    }
    else
    {
      sub_20C01A074(a3, this);
      return sub_20C13E5CC(a3 + 1, Ptr);
    }
  }
  else
  {
    v13[0] = "sdf/path.cpp";
    v13[1] = "GetCommonPrefix";
    v13[2] = 1464;
    v13[3] = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(const SdfPath &) const";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"GetCommonPrefix(): invalid path.", v6);
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

int *sub_20C13E568(int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  int Handle;

  Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(a2);
  if (a2)
  {
    v4 = (unsigned int *)(a2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&Handle, a1);
  sub_20BFD265C(&Handle);
  return a1;
}

int *sub_20C13E5CC(int *a1, uint64_t a2)
{
  int Handle;

  Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&Handle, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&Handle);
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::RemoveCommonSuffix@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, char a3@<W2>, _DWORD *a4@<X8>)
{
  _BOOL4 v8;
  _QWORD *Ptr;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int Handle;
  int v31;
  int v32;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
    return sub_20C028354(a4, this, a2);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
    return sub_20C028354(a4, this, a2);
  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
  if (v8 != pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 1))
    return sub_20C028354(a4, this, a2);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    goto LABEL_16;
  Ptr = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  v11 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
  v12 = (_QWORD *)v11;
  v13 = Ptr != 0;
  v14 = v11 != 0;
  if (!Ptr || !v11)
  {
LABEL_14:
    if (v13 || v14)
    {
      Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)Ptr);
      sub_20BFD6E54(&v31, this);
      sub_20BFD6EA4(&v32, &Handle);
      v27 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v12);
      sub_20BFD6E54(&v28, a2);
      sub_20BFD6EA4(&v29, &v27);
      sub_20C1434D0(a4, &v31, &v28);
      sub_20BFD1A18(&v28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
      sub_20BFD1A18(&v31);
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&Handle);
    }
LABEL_16:
    v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
    v18 = *(unsigned __int16 *)(v16 + 12);
    if (v18 >= 2)
    {
      while (1)
      {
        if (*(unsigned __int16 *)(v17 + 12) < 2u)
        {
          v18 = 1;
          goto LABEL_22;
        }
        if ((sub_20C13EA5C(v16, v17) & 1) == 0)
          break;
        v16 = *(_QWORD *)v16;
        v17 = *(_QWORD *)v17;
        v18 = *(unsigned __int16 *)(v16 + 12);
        if (v18 <= 1)
          goto LABEL_22;
      }
      v31 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v16);
      v23 = (unsigned int *)(v16 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v32 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
      v28 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v17);
      v25 = (unsigned int *)(v17 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      goto LABEL_34;
    }
LABEL_22:
    if (v18 && (a3 & 1) == 0 && *(_WORD *)(v17 + 12) && (sub_20C13EA5C(v16, v17) & 1) != 0)
    {
      v16 = *(_QWORD *)v16;
      v17 = *(_QWORD *)v17;
      v31 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v16);
      if (!v16)
        goto LABEL_31;
    }
    else
    {
      v31 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v16);
    }
    v19 = (unsigned int *)(v16 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
LABEL_31:
    v32 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
    v28 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v17);
    if (v17)
    {
      v21 = (unsigned int *)(v17 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
LABEL_34:
    v29 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
    sub_20C1434D0(a4, &v31, &v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_20BFD265C(&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    return sub_20BFD265C(&v31);
  }
  while ((sub_20C13EA5C((uint64_t)Ptr, (uint64_t)v12) & 1) != 0)
  {
    Ptr = (_QWORD *)*Ptr;
    v12 = (_QWORD *)*v12;
    v13 = Ptr != 0;
    v14 = v12 != 0;
    if (Ptr)
      v15 = v12 == 0;
    else
      v15 = 1;
    if (v15)
      goto LABEL_14;
  }
  Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)Ptr);
  sub_20BFD6E54(&v31, this);
  sub_20BFD6EA4(&v32, &Handle);
  v27 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v12);
  sub_20BFD6E54(&v28, a2);
  sub_20BFD6EA4(&v29, &v27);
  sub_20C1434D0(a4, &v31, &v28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&Handle);
}

uint64_t sub_20C13EA5C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[4];
  char v11;

  v2 = *(unsigned __int8 *)(a1 + 14);
  if (v2 != *(unsigned __int8 *)(a2 + 14))
    return 0;
  result = 1;
  switch(v2)
  {
    case 0:
      v7 = ((*(unsigned __int8 *)(a2 + 15) ^ *(unsigned __int8 *)(a1 + 15)) & 1) == 0;
      goto LABEL_6;
    case 1:
    case 3:
    case 6:
    case 7:
      v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
      v6 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_5;
    case 2:
      v8 = *(_QWORD **)(a1 + 16);
      v9 = *(_QWORD **)(a2 + 16);
      if ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*v9 & 0xFFFFFFFFFFFFFFF8))
        return 0;
      v7 = (v8[1] & 0xFFFFFFFFFFFFFFF8) == (v9[1] & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_6;
    case 4:
    case 5:
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a2 + 16);
LABEL_5:
      v7 = v5 == v6;
LABEL_6:
      result = v7;
      break;
    case 8:
      return result;
    default:
      v10[0] = "sdf/pathNode.h";
      v10[1] = "Compare";
      v10[2] = 665;
      v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_PathNode::Compare(const Sdf_PathNode &) const [Comp = pxrInter"
               "nal__aapl__pxrReserved__::(anonymous namespace)::_NodeEqual]";
      v11 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled Sdf_PathNode::NodeType enumerant");
      return 0;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *result;
  _BYTE *Ptr;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameImpl;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  uint64_t *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v17;
  char v18;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v20;
  int v21;
  int v22;
  uint64_t v23[4];
  char v24;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    v23[0] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v23);
    v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v23 + 1);
    v7 = *(_QWORD *)a2;
    v8 = v23[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
    sub_20BFD265C(v23);
    if (v7 == v8)
    {
      v23[0] = (uint64_t)"sdf/path.cpp";
      v23[1] = (uint64_t)"ReplaceTargetPath";
      v23[2] = 1598;
      v23[3] = (uint64_t)"SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(const SdfPath &) const";
      v24 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v23, (pxrInternal__aapl__pxrReserved__ *)"ReplaceTargetPath(): invalid new target path.", v9);
      *(_QWORD *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    }
    else if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    {
      Ptr = (_BYTE *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      switch(*(_BYTE *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1)
                        + 14))
      {
        case 4:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v23);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, a2, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          goto LABEL_15;
        case 5:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v23);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, a2, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
LABEL_15:
          v14 = v23;
          goto LABEL_45;
        case 6:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v21);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
          switch(Ptr[14])
          {
            case 0:
              v15 = Ptr[15];
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if ((v15 & 1) != 0)
              {
                if (!NameImpl)
                  NameImpl = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              else
              {
                if (!NameImpl)
                  NameImpl = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
                NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)NameImpl + 8);
              }
              break;
            case 1:
            case 3:
            case 6:
            case 7:
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(Ptr + 16);
              break;
            case 2:
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)Ptr);
              break;
            case 8:
              v17 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v17)
                v17 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v17 + 64);
              break;
            default:
              v16 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v16)
                v16 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v16 + 88);
              break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, NameImpl, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_20BFD265C(v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          goto LABEL_44;
        case 7:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v21);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
          switch(Ptr[14])
          {
            case 0:
              v18 = Ptr[15];
              v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if ((v18 & 1) != 0)
              {
                if (!v13)
                  v13 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              else
              {
                if (!v13)
                  v13 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
                v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v13 + 8);
              }
              break;
            case 1:
            case 3:
            case 6:
            case 7:
              v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(Ptr + 16);
              break;
            case 2:
              v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)Ptr);
              break;
            case 8:
              v20 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v20)
                v20 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v20 + 64);
              break;
            default:
              v19 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v19)
                v19 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v19 + 88);
              break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, v13, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_20BFD265C(v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          goto LABEL_44;
        case 8:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v21);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_20BFD265C(v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
LABEL_44:
          v14 = (uint64_t *)&v21;
LABEL_45:
          result = sub_20BFD265C(v14);
          break;
        default:
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      sub_20BFD6E54(a3, this);
      return sub_20BFD6EA4(a3 + 1, (_DWORD *)this + 1);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return result;
}

void sub_20C13EFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  _DWORD *v6;
  void *v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t Ptr;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  BOOL v21;
  uint64_t *TargetPath;
  int v23;
  int v24;
  uint64_t v25;
  void *__p;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  __p = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__p);
  v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__p + 1);
  v7 = *(void **)a2;
  v8 = __p;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
  sub_20BFD265C(&__p);
  if (v7 == v8)
  {
    __p = "sdf/path.cpp";
    v27 = "MakeAbsolutePath";
    v28 = 1632;
    v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath(): anchor is the empty path.", v9);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2) & 1) == 0)
    {
      __p = "sdf/path.cpp";
      v27 = "MakeAbsolutePath";
      v28 = 1645;
      v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
      v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath() requires a prim path as an argument.", v11);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this))
      {
        sub_20C01A074(a3, this);
        sub_20C01A0C8(a3 + 1, (_DWORD *)this + 1);
      }
      else
      {
        Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        if (*(__int16 *)(Ptr + 12) < 0)
        {
          __p = "sdf/path.cpp";
          v27 = "MakeAbsolutePath";
          v28 = 1664;
          v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
          v30 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath() found an invalid element count.", v13);
          return;
        }
        v14 = (_QWORD *)Ptr;
        v15 = *(unsigned __int16 *)(Ptr + 12);
        sub_20C143C10(&__p, v15);
        if ((_DWORD)v15)
        {
          v16 = 8 * v15 - 8;
          do
          {
            *(_QWORD *)((char *)__p + v16) = v14;
            v14 = (_QWORD *)*v14;
            v16 -= 8;
          }
          while (v16 != -8);
        }
        sub_20C01A074(a3, a2);
        sub_20C01A0C8(a3 + 1, (_DWORD *)a2 + 1);
        v17 = (char *)__p;
        v18 = (char *)v27;
        if (__p != v27)
        {
          v19 = (char *)__p + 8;
          do
          {
            sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, *((_QWORD *)v19 - 1), (int *)&v25);
            sub_20BFD3EBC(a3, (int *)&v25);
            sub_20BFD3F10(a3 + 1, (int *)&v25 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_20BFD265C(&v25);
            v20 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
            v21 = v19 != v18 && v20;
            v19 += 8;
          }
          while (v21);
          v17 = (char *)__p;
        }
        if (v17)
        {
          v27 = v17;
          operator delete(v17);
        }
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3))
      {
        sub_20C01A0C8(a3 + 1, (_DWORD *)this + 1);
        TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(TargetPath))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(&v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v23);
          sub_20BFD3EBC(a3, &v23);
          sub_20BFD3F10(a3 + 1, &v24);
          sub_20BFD1A18(&v23);
          sub_20BFD1A18(&v25);
          sub_20BFD1A18(&__p);
        }
      }
    }
  }
  else
  {
    __p = "sdf/path.cpp";
    v27 = "MakeAbsolutePath";
    v28 = 1638;
    v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath() requires an absolute path as an argument.", v10);
  }
}

void sub_20C13F380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13)
{
  _DWORD *v13;

  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&__p);
  sub_20BFD1A18(v13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, char **a2@<X1>, int *a3@<X8>)
{
  _DWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *Ptr;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void *p_p;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  void *__p;
  char *v41;
  char *v42;
  char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  char v47;
  int v48;

  v43 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v43);
  v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v43 + 1);
  v7 = *a2;
  v8 = v43;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
  sub_20BFD265C(&v43);
  if (v7 == v8)
  {
    v43 = "sdf/path.cpp";
    v44 = "MakeRelativePath";
    v45 = 1716;
    v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
    v47 = 0;
    v10 = "MakeRelativePath(): anchor is the invalid path.";
LABEL_29:
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)v10, v9);
    goto LABEL_30;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
  {
    v43 = "sdf/path.cpp";
    v44 = "MakeRelativePath";
    v45 = 1722;
    v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
    v47 = 0;
    v10 = "MakeRelativePath() requires an absolute path as an argument.";
    goto LABEL_29;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) == 0)
  {
    v43 = "sdf/path.cpp";
    v44 = "MakeRelativePath";
    v45 = 1731;
    v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
    v47 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)&__p);
    if (SHIBYTE(v42) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)"MakeRelativePath() requires a prim, prim variant selection, or absolute root path as an anchor (got '%s').", v25, p_p);
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
    goto LABEL_30;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
LABEL_30:
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (int *)&v43);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_20BFD265C(&v43);
    return;
  }
  __p = 0;
  v41 = 0;
  v42 = 0;
  v11 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
                            + 12);
  v12 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2)
                            + 12);
  Ptr = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  v16 = v14;
  if (v11 <= v12)
  {
    if (v11 < v12)
    {
      v27 = v12 - v11;
      v28 = v27;
      do
      {
        v16 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v16;
        --v28;
      }
      while (v28);
      goto LABEL_44;
    }
    if ((_DWORD)v11 != (_DWORD)v12)
    {
      v43 = "sdf/path.cpp";
      v44 = "MakeRelativePath";
      v45 = 1778;
      v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
      v47 = 0;
      v48 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v43, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v15, "thisCount == anchorCount");
    }
  }
  else
  {
    v17 = v41;
    do
    {
      if (v17 >= v42)
      {
        v18 = (v17 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
LABEL_70:
          sub_20BDDF694();
        v19 = (v42 - (_BYTE *)__p) >> 2;
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        if ((unint64_t)(v42 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDF6A8((uint64_t)&v42, v20);
        else
          v14 = 0;
        v21 = (char *)v14 + 8 * v18;
        *(_QWORD *)v21 = Ptr;
        v17 = v21 + 8;
        v23 = (char *)__p;
        v22 = v41;
        if (v41 != __p)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = (char *)__p;
        }
        __p = v21;
        v41 = v17;
        v42 = (char *)v14 + 8 * v20;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v17 = Ptr;
        v17 += 8;
      }
      v41 = v17;
      Ptr = *(pxrInternal__aapl__pxrReserved__::SdfPath **)Ptr;
      --v11;
    }
    while (v11 > v12);
  }
  v27 = 0;
LABEL_44:
  if (Ptr != v16)
  {
    v29 = v41;
    do
    {
      if (v29 >= v42)
      {
        v30 = (v29 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_70;
        v31 = (v42 - (_BYTE *)__p) >> 2;
        if (v31 <= v30 + 1)
          v31 = v30 + 1;
        if ((unint64_t)(v42 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDF6A8((uint64_t)&v42, v32);
        else
          v14 = 0;
        v33 = (char *)v14 + 8 * v30;
        *(_QWORD *)v33 = Ptr;
        v29 = v33 + 8;
        v35 = (char *)__p;
        v34 = v41;
        if (v41 != __p)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v33 - 1) = v36;
            v33 -= 8;
          }
          while (v34 != v35);
          v34 = (char *)__p;
        }
        __p = v33;
        v41 = v29;
        v42 = (char *)v14 + 8 * v32;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v29 = Ptr;
        v29 += 8;
      }
      v41 = v29;
      ++v27;
      Ptr = *(pxrInternal__aapl__pxrReserved__::SdfPath **)Ptr;
      v16 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v16;
    }
    while (Ptr != v16);
  }
  v37 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(v14);
  sub_20BFD6E54(a3, v37);
  sub_20BFD6EA4(a3 + 1, v37 + 1);
  while (v27)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v43);
    sub_20BFD3EBC(a3, (int *)&v43);
    sub_20BFD3F10(a3 + 1, (int *)&v43 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    --v27;
    sub_20BFD265C(&v43);
  }
  v38 = v41;
  while (v38 != __p)
  {
    v39 = *((_QWORD *)v38 - 1);
    v38 -= 8;
    sub_20C13BFA4((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, v39, (int *)&v43);
    sub_20BFD3EBC(a3, (int *)&v43);
    sub_20BFD3F10(a3 + 1, (int *)&v43 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_20BFD265C(&v43);
  }
  sub_20C01A0C8(a3 + 1, (_DWORD *)this + 1);
  if (__p)
  {
    v41 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20C13F938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16)
{
  sub_20BFD1A18(&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__ *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t IsUtf8CodePointXidContinue;
  unint64_t v10;
  unint64_t v11;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v3 = v2 >= 0 ? a1 : *(_QWORD *)a1;
  v10 = v3;
  v11 = v3 + v1;
  LODWORD(v4) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
  v5 = ((_DWORD)v4 - 57344) >= 0xFFFFF800 || v4 >= 0x110000;
  v4 = v5 ? (pxrInternal__aapl__pxrReserved__ *)65533 : (pxrInternal__aapl__pxrReserved__ *)v4;
  if ((_DWORD)v4 != 95 && !pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart(v4))
    return 0;
  sub_20C140040(&v10);
  if (v10 >= v11)
    return 1;
  do
  {
    LODWORD(v6) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
    if ((v6 - 57344) >= 0xFFFFF800 || v6 >= 0x110000)
      v6 = 65533;
    else
      v6 = v6;
    IsUtf8CodePointXidContinue = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v6);
    if (!(_DWORD)IsUtf8CodePointXidContinue)
      break;
    sub_20C140040(&v10);
  }
  while (v10 < v11);
  return IsUtf8CodePointXidContinue;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier(size_t *__s)
{
  char *v1;
  size_t v2;
  _BYTE *v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char *v13;
  unint64_t v14;

  v1 = (char *)__s;
  if ((*((char *)__s + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)__s + 23);
    if (*((_BYTE *)__s + 23))
      goto LABEL_6;
    return 0;
  }
  v2 = __s[1];
  if (!v2)
    return 0;
  v1 = (char *)*__s;
  do
  {
LABEL_6:
    v3 = memchr(v1, 58, v2);
    if (v3)
      v4 = v3 - v1;
    else
      v4 = -1;
    if (v4)
      v5 = v4 == v2 - 1;
    else
      v5 = 1;
    v6 = !v5;
    if (v5)
      break;
    if (v2 >= v4)
      v7 = v4;
    else
      v7 = v2;
    v13 = v1;
    v14 = (unint64_t)&v1[v7];
    LODWORD(v8) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v13);
    if ((v8 - 57344) >= 0xFFFFF800 || v8 >= 0x110000)
      v8 = 65533;
    else
      v8 = v8;
    if ((_DWORD)v8 != 95
      && !pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v8))
    {
      return 0;
    }
    while (1)
    {
      sub_20C140040((unint64_t *)&v13);
      if ((unint64_t)v13 >= v14)
        break;
      LODWORD(v10) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v13);
      if ((v10 - 57344) >= 0xFFFFF800 || v10 >= 0x110000)
        v10 = 65533;
      else
        v10 = v10;
      if (!pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v10))
        return 0;
    }
    if (v4 == -1)
      break;
    if (v2 <= v4)
      sub_20BEB9194("string_view::substr");
    v1 += v4 + 1;
    v2 -= v4 + 1;
  }
  while (v2);
  return v6;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  unint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  char IsUtf8CodePointXidStart;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  void *__p[2];
  uint64_t v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v4)
    v4 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  v5 = *((_QWORD *)v4 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(const char **)v6;
  }
  else
  {
    v6 = "";
  }
  v7 = *(unsigned __int8 *)v6;
  if ((char)a1[23] < 0)
  {
    v8 = *((_QWORD *)a1 + 1);
    if (!v8)
      return;
    v10 = *(_QWORD *)a1;
    v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + v8 - 1);
  }
  else
  {
    v8 = a1[23];
    if (!a1[23])
      return;
    v9 = a1[v8 - 1];
    v10 = (unint64_t)a1;
  }
  if (v9 != v7)
  {
    v48 = (char *)v10;
    v49 = v10 + v8;
    LODWORD(v11) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48);
    v12 = ((_DWORD)v11 - 57344) >= 0xFFFFF800 || v11 >= 0x110000;
    v11 = v12 ? (pxrInternal__aapl__pxrReserved__ *)65533 : (pxrInternal__aapl__pxrReserved__ *)v11;
    if ((_DWORD)v11 == 95 || (pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart(v11) & 1) != 0)
    {
      v13 = a1[23];
      if ((v13 & 0x80u) == 0)
        v14 = a1;
      else
        v14 = *(unsigned __int8 **)a1;
      v15 = 0;
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)a1 + 1);
      for (; v13; --v13)
      {
        v16 = *v14++;
        if (v16 == v7)
          ++v15;
      }
      sub_20BE71C2C(a2, v15 + 1);
      sub_20C140040((unint64_t *)&v48);
      while (1)
      {
        if ((unint64_t)v48 >= v49)
        {
          sub_20BE93368(__p, (char *)v10, v48, (unint64_t)&v48[-v10]);
          v35 = a2[1];
          v34 = a2[2];
          if (v35 >= v34)
          {
            v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *a2) >> 3);
            v38 = v37 + 1;
            if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a2) >> 3);
            if (2 * v39 > v38)
              v38 = 2 * v39;
            if (v39 >= 0x555555555555555)
              v40 = 0xAAAAAAAAAAAAAAALL;
            else
              v40 = v38;
            v53 = a2 + 2;
            if (v40)
              v41 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v40);
            else
              v41 = 0;
            v42 = &v41[24 * v37];
            *(_QWORD *)&v50 = v41;
            *((_QWORD *)&v50 + 1) = v42;
            v52 = &v41[24 * v40];
            v43 = *(_OWORD *)__p;
            *((_QWORD *)v42 + 2) = v47;
            *(_OWORD *)v42 = v43;
            __p[1] = 0;
            v47 = 0;
            __p[0] = 0;
            v51 = (uint64_t)(v42 + 24);
            sub_20BDF34C0(a2, &v50);
            v44 = a2[1];
            sub_20BDF3648((uint64_t)&v50);
            v45 = SHIBYTE(v47);
            a2[1] = v44;
            if (v45 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v36 = *(_OWORD *)__p;
            *(_QWORD *)(v35 + 16) = v47;
            *(_OWORD *)v35 = v36;
            a2[1] = v35 + 24;
          }
          return;
        }
        if (pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48) == 58)
        {
          sub_20BE93368(__p, (char *)v10, v48, (unint64_t)&v48[-v10]);
          v18 = a2[1];
          v17 = a2[2];
          if (v18 >= v17)
          {
            v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a2) >> 3);
            v24 = v23 + 1;
            if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
            if (2 * v25 > v24)
              v24 = 2 * v25;
            if (v25 >= 0x555555555555555)
              v26 = 0xAAAAAAAAAAAAAAALL;
            else
              v26 = v24;
            v53 = a2 + 2;
            if (v26)
              v27 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v26);
            else
              v27 = 0;
            v28 = &v27[24 * v23];
            *(_QWORD *)&v50 = v27;
            *((_QWORD *)&v50 + 1) = v28;
            v52 = &v27[24 * v26];
            v29 = *(_OWORD *)__p;
            *((_QWORD *)v28 + 2) = v47;
            *(_OWORD *)v28 = v29;
            __p[1] = 0;
            v47 = 0;
            __p[0] = 0;
            v51 = (uint64_t)(v28 + 24);
            sub_20BDF34C0(a2, &v50);
            v30 = a2[1];
            sub_20BDF3648((uint64_t)&v50);
            v31 = SHIBYTE(v47);
            a2[1] = v30;
            if (v31 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v19 = *(_OWORD *)__p;
            *(_QWORD *)(v18 + 16) = v47;
            *(_OWORD *)v18 = v19;
            a2[1] = v18 + 24;
          }
          v10 = *sub_20C140040((unint64_t *)&v48);
          LODWORD(v32) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48);
          if ((v32 - 57344) >= 0xFFFFF800 || v32 >= 0x110000)
            v32 = 65533;
          else
            v32 = v32;
          if ((_DWORD)v32 == 95)
            goto LABEL_62;
          IsUtf8CodePointXidStart = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v32);
        }
        else
        {
          LODWORD(v20) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48);
          if ((v20 - 57344) >= 0xFFFFF800 || v20 >= 0x110000)
            v20 = 65533;
          else
            v20 = v20;
          IsUtf8CodePointXidStart = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v20);
        }
        if ((IsUtf8CodePointXidStart & 1) == 0)
        {
          v50 = *(_OWORD *)a2;
          *a2 = 0;
          a2[1] = 0;
          v51 = a2[2];
          a2[2] = 0;
          __p[0] = &v50;
          sub_20BDE5038((void ***)__p);
          return;
        }
LABEL_62:
        sub_20C140040((unint64_t *)&v48);
      }
    }
  }
}

void sub_20C13FFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t *sub_20C140040(unint64_t *result)
{
  unint64_t v1;
  char *v2;
  int v3;
  int v4;
  char *v5;

  v2 = (char *)*result;
  v1 = result[1];
  if (*result >= v1)
    goto LABEL_3;
  v3 = *v2;
  if ((v3 & 0x80000000) == 0)
    goto LABEL_3;
  if ((v3 & 0xE0) == 0xC0)
  {
    v4 = 2;
  }
  else if ((v3 & 0xF0) == 0xE0)
  {
    v4 = 3;
  }
  else
  {
    if ((v3 & 0xF8) != 0xF0)
    {
LABEL_3:
      *result = (unint64_t)(v2 + 1);
      return result;
    }
    v4 = 4;
  }
  v5 = v2 + 1;
  *result = (unint64_t)v5;
  do
  {
    if ((unint64_t)v5 >= v1)
      break;
    if (*v5 > -65)
      break;
    *result = (unint64_t)++v5;
    --v4;
  }
  while (v4 > 1u);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier(a1, &v9);
  sub_20C143C84(a2, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
  if (v10 != v9)
  {
    v3 = 0;
    v4 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
      v5 = *a2;
      v6 = v11;
      v11 = *(_QWORD *)(*a2 + 8 * v3);
      *(_QWORD *)(v5 + 8 * v3) = v6;
      if ((v11 & 7) != 0)
      {
        v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = (unint64_t)&v9;
  sub_20BDE5038((void ***)&v11);
}

void sub_20C1401A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BDE5038(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(std::string **a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v14;
  unint64_t v15;
  char *v16;
  std::string *v17[3];
  std::string **v18;
  std::string **v19;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_7:
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v8)
      v8 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    v9 = *((_QWORD *)v8 + 10) & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      v10 = (char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v10 = *(char **)v10;
    }
    else
    {
      v10 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(v10, a1, a2);
  }
  else
  {
    v6 = *a1;
    while (1)
    {
      size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0)
        size = v6->__r_.__value_.__l.__size_;
      if (!size)
        break;
      if (++v6 == v5)
        goto LABEL_7;
    }
    memset(v17, 0, sizeof(v17));
    sub_20BE71C2C((uint64_t *)v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3));
    v12 = *a1;
    v11 = a1[1];
    v18 = v17;
    while (v12 != v11)
    {
      v13 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
      if ((v13 & 0x80u) != 0)
        v13 = v12->__r_.__value_.__l.__size_;
      if (v13)
        sub_20BFD449C((uint64_t **)&v18, (__int128 *)v12);
      ++v12;
    }
    v14 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v14)
      v14 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    v15 = *((_QWORD *)v14 + 10) & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      v16 = (char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v16 = *(char **)v16;
    }
    else
    {
      v16 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(v16, v17, a2);
    v19 = v17;
    sub_20BDE5038((void ***)&v19);
  }
}

void sub_20C140364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BDE5038(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *EmptyString;
  __int128 *v11;
  __int128 v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  unint64_t v14;
  char *v15;
  std::string *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  unint64_t v18;
  std::string **v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BE71C2C((uint64_t *)&v16, (uint64_t)(a1[1] - *a1) >> 3);
  v5 = a1[1] - *a1;
  if (v5)
  {
    v6 = 0;
    v7 = v5 >> 3;
    do
    {
      v8 = *(_QWORD *)(*a1 + 8 * v6);
      if (v8)
      {
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if (v9)
          EmptyString = (uint64_t *)(v9 + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
        v11 = (__int128 *)v17;
        if ((unint64_t)v17 >= v18)
        {
          v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BE4EE50((uint64_t *)&v16, (__int128 *)EmptyString);
        }
        else
        {
          if (*((char *)EmptyString + 23) < 0)
          {
            sub_20BDDBFAC(v17, (void *)*EmptyString, EmptyString[1]);
          }
          else
          {
            v12 = *(_OWORD *)EmptyString;
            *((_QWORD *)v17 + 2) = EmptyString[2];
            *v11 = v12;
          }
          v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v11 + 24);
        }
        v17 = v4;
      }
      ++v6;
    }
    while (v7 != v6);
  }
  v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v13)
    v13 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  v14 = *((_QWORD *)v13 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v14)
  {
    v15 = (char *)(v14 + 16);
    if (*(char *)(v14 + 39) < 0)
      v15 = *(char **)v15;
  }
  else
  {
    v15 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(v15, &v16, a2);
  v19 = &v16;
  sub_20BDE5038((void ***)&v19);
}

void sub_20C1404CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BDE5038(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  std::string *p_p;
  char *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void *v23;
  std::string __p;

  v5 = a1[23];
  v6 = *((_QWORD *)a1 + 1);
  if (v5 >= 0)
    v7 = a1[23];
  else
    v7 = *((_QWORD *)a1 + 1);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (!v7)
  {
    if ((v8 & 0x80) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      v13 = *(_QWORD *)(a2 + 16);
LABEL_17:
      *(_QWORD *)(a3 + 16) = v13;
      return;
    }
    v23 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
LABEL_42:
    sub_20BDDBFAC((_BYTE *)a3, v23, v6);
    return;
  }
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    if ((v5 & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      v13 = *((_QWORD *)a1 + 2);
      goto LABEL_17;
    }
    v23 = *(void **)a1;
    goto LABEL_42;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v10)
    v10 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  v11 = *((_QWORD *)v10 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v11)
  {
    v12 = (const char *)(v11 + 16);
    if (*(char *)(v11 + 39) < 0)
      v12 = *(const char **)v12;
  }
  else
  {
    v12 = "";
  }
  if (a1[23] >= 0)
    v14 = a1[23];
  else
    v14 = *((_QWORD *)a1 + 1);
  v15 = strlen(v12);
  p_p = &__p;
  sub_20BDF6BDC((uint64_t)&__p, v14 + v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v14)
  {
    if (a1[23] >= 0)
      v17 = a1;
    else
      v17 = *(char **)a1;
    memmove(p_p, v17, v14);
  }
  if (v15)
    memmove((char *)p_p + v14, v12, v15);
  p_p->__r_.__value_.__s.__data_[v14 + v15] = 0;
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = std::string::append(&__p, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v21->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C1406D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t *EmptyString;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = (char *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    v6 = (char *)this;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(v6, (uint64_t)EmptyString, a3);
}

std::string *pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  unint64_t v5;
  const char *v6;
  std::string *result;
  char v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v4)
    v4 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  v5 = *((_QWORD *)v4 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(const char **)v6;
  }
  else
  {
    v6 = "";
  }
  result = (std::string *)std::string::rfind(this, *v6, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1)
    return std::string::basic_string(a2, this, (std::string::size_type)result->__r_.__value_.__r.__words + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v8);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    return (std::string *)sub_20BDDBFAC(a2, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = this->__r_.__value_.__r.__words[2];
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  std::string *EmptyString;
  std::string __p;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace(EmptyString, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C14088C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace@<D0>(const std::string *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v5;
  int v6;
  std::string::size_type v7;
  const char *v8;
  int v9;
  unint64_t size;
  size_t v11;
  size_t v12;
  const char *v13;
  void *v14;
  std::string *v15;
  unint64_t v16;
  __int128 v17;
  const std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v22;
  unint64_t v23;
  const char *v24;
  std::string v26;
  char v27;

  v5 = atomic_load((unsigned __int8 *)&qword_254985C10);
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v21 = __cxa_guard_acquire(&qword_254985C10);
    a2 = v20;
    if (v21)
    {
      v22 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v22)
        v22 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v23 = *((_QWORD *)v22 + 10) & 0xFFFFFFFFFFFFFFF8;
      if (v23)
      {
        v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0)
          v24 = *(const char **)v24;
      }
      else
      {
        v24 = "";
      }
      byte_254985C08 = *v24;
      __cxa_guard_release(&qword_254985C10);
      a2 = v20;
    }
  }
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    if (v6 >= 0)
      v8 = (const char *)a2;
    else
      v8 = *(const char **)a2;
    v9 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    size = a1->__r_.__value_.__l.__size_;
    if (v9 >= 0)
      v11 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v11 = a1->__r_.__value_.__l.__size_;
    v12 = strlen(v8);
    if (v11 < v12
      || (v9 >= 0 ? (v13 = (const char *)a1) : (v13 = (const char *)a1->__r_.__value_.__r.__words[0]),
          strncmp(v13, v8, v12)))
    {
LABEL_17:
      if (v9 < 0)
      {
        v14 = (void *)a1->__r_.__value_.__r.__words[0];
        v15 = a3;
        v16 = size;
LABEL_22:
        sub_20BDDBFAC(v15, v14, v16);
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    if (v8[v7 - 1] == byte_254985C08)
    {
      v18 = a1;
      v19 = v7;
    }
    else
    {
      if (v13[v7] != byte_254985C08)
        goto LABEL_17;
      v19 = v7 + 1;
      v18 = a1;
    }
    std::string::basic_string(&v26, v18, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
    *(_QWORD *)&v17 = v26.__r_.__value_.__r.__words[0];
    *a3 = v26;
    a3[1].__r_.__value_.__s.__data_[0] = 1;
    return *(double *)&v17;
  }
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = (void *)a1->__r_.__value_.__r.__words[0];
    v16 = a1->__r_.__value_.__l.__size_;
    v15 = a3;
    goto LABEL_22;
  }
LABEL_20:
  v17 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
LABEL_23:
  a3[1].__r_.__value_.__s.__data_[0] = 0;
  return *(double *)&v17;
}

void sub_20C140A8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985C10);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(__int128 *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ParsePath(a1, 0, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t Ptr;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  v7 = *(unsigned __int8 *)(Ptr + 15);
  if (((v7 ^ *(unsigned __int8 *)(v6 + 15)) & 1) != 0)
    return v7 & 1;
  if (Ptr == v6)
  {
    v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
    if (!v16 || !v17)
    {
      LOBYTE(v7) = v16 == 0;
      return v7 & 1;
    }
    return sub_20C140C6C(v16, v17);
  }
  else
  {
    v7 = *(unsigned __int16 *)(Ptr + 12);
    v8 = *(unsigned __int16 *)(v6 + 12);
    if (*(_WORD *)(Ptr + 12))
      v9 = v8 == 0;
    else
      v9 = 1;
    if (v9)
    {
      if (*(_WORD *)(Ptr + 12))
        v10 = 1;
      else
        v10 = v8 == 0;
      LOBYTE(v7) = !v10;
      return v7 & 1;
    }
    if ((int)(v8 - v7) < 0)
    {
      v12 = v7 - v8;
      while (Ptr)
      {
        Ptr = *(_QWORD *)Ptr;
        if (!--v12)
          goto LABEL_23;
      }
      v18 = "sdf/path.cpp";
      v19 = "_LessThanCompareNodes";
      v20 = 2113;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Left path node is null");
      goto LABEL_29;
    }
    if (v8 != v7)
    {
      v11 = v8 - v7 + 1;
      while (v6)
      {
        v6 = *(_QWORD *)v6;
        if (--v11 <= 1)
          goto LABEL_23;
      }
      v18 = "sdf/path.cpp";
      v19 = "_LessThanCompareNodes";
      v20 = 2123;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Right path node is null");
LABEL_29:
      LOBYTE(v7) = 0;
      return v7 & 1;
    }
LABEL_23:
    if (Ptr == v6)
    {
      LOBYTE(v7) = v7 < v8;
      return v7 & 1;
    }
    do
    {
      v13 = v6;
      v14 = Ptr;
      v6 = *(_QWORD *)v6;
      Ptr = *(_QWORD *)Ptr;
    }
    while (Ptr != v6);
    return sub_20C143528(v14, v13);
  }
}

uint64_t sub_20C140C6C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  v2 = *(unsigned __int16 *)(a1 + 12);
  v3 = *(unsigned __int16 *)(a2 + 12);
  if (*(_WORD *)(a1 + 12))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (*(_WORD *)(a1 + 12))
      v5 = 1;
    else
      v5 = v3 == 0;
    return !v5;
  }
  else
  {
    if ((int)(v3 - v2) < 0)
    {
      v8 = v2 - v3;
      while (a1)
      {
        a1 = *(_QWORD *)a1;
        if (!--v8)
          goto LABEL_21;
      }
      v11 = "sdf/path.cpp";
      v12 = "_LessThanCompareNodes";
      v13 = 2113;
      v14 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      v15 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Left path node is null");
      return 0;
    }
    if (v3 != v2)
    {
      v7 = v3 - v2 + 1;
      while (a2)
      {
        a2 = *(_QWORD *)a2;
        if (--v7 <= 1)
          goto LABEL_21;
      }
      v11 = "sdf/path.cpp";
      v12 = "_LessThanCompareNodes";
      v13 = 2123;
      v14 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      v15 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Right path node is null");
      return 0;
    }
LABEL_21:
    if (a1 == a2)
    {
      return v2 < v3;
    }
    else
    {
      do
      {
        v9 = a2;
        v10 = a1;
        a2 = *(_QWORD *)a2;
        a1 = *(_QWORD *)a1;
      }
      while (a1 != a2);
      return sub_20C143528(v10, v9);
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t *String;
  int v4;
  uint64_t v5;
  uint64_t v6;

  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(this);
  v4 = *((char *)String + 23);
  if (v4 >= 0)
    v5 = (uint64_t)String;
  else
    v5 = *String;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)String + 23);
  else
    v6 = String[1];
  return sub_20BDDC1C8(a1, v5, v6);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths(_DWORD **a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath **v6;
  uint64_t v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath **v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  char **v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  char *v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 i;
  unint64_t v47;
  int v48;
  int v49;
  void **v50;
  char *v51;
  unint64_t v52;
  const char *v53;
  char v54;
  _DWORD *v55;
  _DWORD *v56;
  unint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  char *v64[2];

  v61 = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  for (i = *(_OWORD *)a1; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFED8DC(&i))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath **)sub_20C1414F0(&i, a2, a3);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(*v6))
    {
      v50 = (void **)"sdf/path.cpp";
      v51 = "GetConciseRelativePaths";
      v52 = 2190;
      v53 = "static SdfPathVector pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths(const SdfPathVector &)";
      v54 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v50, (pxrInternal__aapl__pxrReserved__ *)"argument to GetConciseRelativePaths contains a relative path.", v8);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_20BFD6D38(a4, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 3);
      goto LABEL_63;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)sub_20C1414F0(&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(*v9, &v50);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, v64);
    v10 = v62;
    if ((unint64_t)v62 >= v63)
    {
      v11 = (_DWORD *)sub_20BFD7890(&v61, &v50);
    }
    else
    {
      sub_20BFD6E54(v62, &v50);
      sub_20BFD6EA4(v10 + 1, (_DWORD *)&v50 + 1);
      v11 = v10 + 2;
    }
    v62 = v11;
    v12 = v59;
    if ((unint64_t)v59 >= v60)
    {
      v13 = (_DWORD *)sub_20BFD7890((uint64_t *)&v58, v64);
    }
    else
    {
      sub_20BFD6E54(v59, v64);
      sub_20BFD6EA4(v12 + 1, (_DWORD *)v64 + 1);
      v13 = v12 + 2;
    }
    v59 = v13;
    v14 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    if (v64[0] == *v14)
    {
      v15 = v56;
      if ((unint64_t)v56 >= v57)
      {
        v16 = (_DWORD *)sub_20BFD7890((uint64_t *)&v55, &v50);
      }
      else
      {
        sub_20BFD6E54(v56, &v50);
        sub_20BFD6EA4(v15 + 1, (_DWORD *)&v50 + 1);
        v16 = v15 + 2;
      }
      v56 = v16;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, v64, &v48);
      v17 = v56;
      if ((unint64_t)v56 >= v57)
      {
        v18 = (_DWORD *)sub_20C12C530((uint64_t *)&v55, &v48);
      }
      else
      {
        sub_20BFD38A4(v56, &v48);
        sub_20BFD38DC(v17 + 1, &v49);
        v18 = v17 + 2;
      }
      v56 = v18;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_20BFD265C(&v48);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
    sub_20BFD265C(v64);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
    sub_20BFD265C(&v50);
  }
  do
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    i = 0uLL;
    v47 = 0;
    v19 = v55;
    if (v56 == v55)
    {
      v37 = 0;
      v36 = 0;
      v21 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = ((char *)v56 - (char *)v55) >> 3;
      do
      {
        v23 = 0;
        if (v22 <= 1)
          v22 = 1;
        while (v20 == v23
             || *(_QWORD *)&v19[2 * v20] != *(_QWORD *)&v19[2 * v23]
             || *(_QWORD *)(v61 + 8 * v20) == *(_QWORD *)(v61 + 8 * v23))
        {
          if (v22 == ++v23)
          {
            v24 = &v58[2 * v20];
            v25 = v51;
            if ((unint64_t)v51 >= v52)
            {
              v26 = (char *)sub_20BFD7890((uint64_t *)&v50, &v58[2 * v20]);
            }
            else
            {
              sub_20BFD6E54(v51, &v58[2 * v20]);
              sub_20BFD6EA4((_DWORD *)v25 + 1, v24 + 1);
              v26 = v25 + 8;
            }
            v51 = v26;
            v27 = &v55[2 * v20];
            v28 = *((_QWORD *)&i + 1);
            if (*((_QWORD *)&i + 1) >= v47)
            {
              v29 = sub_20BFD7890((uint64_t *)&i, &v55[2 * v20]);
            }
            else
            {
              sub_20BFD6E54(*((_DWORD **)&i + 1), &v55[2 * v20]);
              sub_20BFD6EA4((_DWORD *)(v28 + 4), v27 + 1);
              v29 = v28 + 8;
            }
            *((_QWORD *)&i + 1) = v29;
            goto LABEL_45;
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58[2 * v20], v64);
        v30 = v51;
        if ((unint64_t)v51 >= v52)
        {
          v31 = (char *)sub_20BFD7890((uint64_t *)&v50, v64);
        }
        else
        {
          sub_20BFD6E54(v51, v64);
          sub_20BFD6EA4((_DWORD *)v30 + 1, (_DWORD *)v64 + 1);
          v31 = v30 + 8;
        }
        v51 = v31;
        v32 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v31);
        v33 = v61 + 8 * v20;
        if (v64[0] == *v32)
        {
          sub_20BFD6E54(&v48, (_DWORD *)(v61 + 8 * v20));
          sub_20BFD6EA4(&v49, (_DWORD *)(v33 + 4));
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v61 + 8 * v20), v64, &v48);
        }
        v34 = *((_QWORD *)&i + 1);
        if (*((_QWORD *)&i + 1) >= v47)
        {
          v35 = sub_20C12C530((uint64_t *)&i, &v48);
        }
        else
        {
          sub_20BFD38A4(*((_DWORD **)&i + 1), &v48);
          sub_20BFD38DC((_DWORD *)(v34 + 4), &v49);
          v35 = v34 + 8;
        }
        *((_QWORD *)&i + 1) = v35;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
        sub_20BFD265C(&v48);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
        sub_20BFD265C(v64);
        v21 = 1;
LABEL_45:
        ++v20;
        v19 = v55;
        v22 = ((char *)v56 - (char *)v55) >> 3;
      }
      while (v20 < v22);
      v36 = v50;
      v37 = v51;
    }
    sub_20C0E29B0((uint64_t)&v58, v36, v37, (v37 - (char *)v36) >> 3);
    sub_20C0E29B0((uint64_t)&v55, (_DWORD *)i, *((_DWORD **)&i + 1), (uint64_t)(*((_QWORD *)&i + 1) - i) >> 3);
    v64[0] = (char *)&i;
    sub_20BFD6F90((void ***)v64);
    *(_QWORD *)&i = &v50;
    sub_20BFD6F90((void ***)&i);
  }
  while ((v21 & 1) != 0);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v39 = v58;
  if (v59 != v58)
  {
    v40 = 0;
    v41 = 0;
    do
    {
      if (*(_QWORD *)&v39[2 * v41] == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v38))
      {
        v42 = &(*a1)[v40];
        v43 = a4[1];
        if (v43 >= a4[2])
        {
          v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD7890(a4, &(*a1)[v40]);
        }
        else
        {
          sub_20BFD6E54((_DWORD *)a4[1], &(*a1)[v40]);
          sub_20BFD6EA4((_DWORD *)(v43 + 4), v42 + 1);
          v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v43 + 8);
        }
        a4[1] = (uint64_t)v38;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&(*a1)[v40], (char **)&v58[v40], (int *)&v50);
        v44 = a4[1];
        if (v44 >= a4[2])
        {
          v45 = sub_20C12C530(a4, &v50);
        }
        else
        {
          sub_20BFD38A4((_DWORD *)a4[1], &v50);
          sub_20BFD38DC((_DWORD *)(v44 + 4), (_DWORD *)&v50 + 1);
          v45 = v44 + 8;
        }
        a4[1] = v45;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
        v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v50);
      }
      ++v41;
      v39 = v58;
      v40 += 2;
    }
    while (v41 < ((char *)v59 - (char *)v58) >> 3);
  }
LABEL_63:
  v50 = (void **)&v55;
  sub_20BFD6F90(&v50);
  v50 = (void **)&v58;
  sub_20BFD6F90(&v50);
  v50 = (void **)&v61;
  sub_20BFD6F90(&v50);
}

void sub_20C1413E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  a13 = (void **)&a18;
  sub_20BFD6F90(&a13);
  a13 = (void **)&a21;
  sub_20BFD6F90(&a13);
  a13 = (void **)&a24;
  sub_20BFD6F90(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1414F0(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfPath>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int *v8;
  _BOOL4 HasPrefix;
  int *v10;
  int *v11;
  int *v12;
  char v14;

  v2 = *(_QWORD *)a1;
  v3 = *(int **)(a1 + 8);
  v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (int *)v2)
    v5 = 0;
  else
    v5 = v4;
  sub_20C028540(v2, v3, (uint64_t)&v14, v5, 1);
  v6 = *(int **)a1;
  v7 = *(int **)(a1 + 8);
  if (*(int **)a1 != v7)
  {
    do
    {
      v8 = v6 + 2;
      if (v6 + 2 == v7)
      {
        v6 = v7;
        return sub_20C11D784(a1, v6, *(int **)(a1 + 8));
      }
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
      v6 = v8;
    }
    while (!HasPrefix);
    v10 = v8 - 2;
    if (v8 + 2 != v7)
    {
      v11 = v8 + 3;
      do
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 1), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10))
        {
          sub_20BFD3EBC(v10 + 2, v11 - 1);
          sub_20BFD3F10(v10 + 3, v11);
          v10 += 2;
        }
        v12 = v11 + 1;
        v11 += 2;
      }
      while (v12 != v7);
    }
    v6 = v10 + 2;
  }
  return sub_20C11D784(a1, v6, *(int **)(a1 + 8));
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::RemoveAncestorPaths(uint64_t *a1)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BOOL4 HasPrefix;
  uint64_t v10;
  int *v11;
  int *v12;
  char v14;

  v2 = *a1;
  v3 = (int *)a1[1];
  v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (int *)v2)
    v5 = 0;
  else
    v5 = v4;
  sub_20C028540(v2, v3, (uint64_t)&v14, v5, 1);
  v7 = (int *)*a1;
  v6 = a1[1];
  if (v6 != *a1)
  {
    v8 = v6 + 8;
    while ((int *)(v8 - 16) != v7)
    {
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 24));
      v8 -= 8;
      if (HasPrefix)
      {
        v10 = v8 - 16;
        if ((int *)(v8 - 16) != v7)
        {
          do
          {
            v11 = (int *)(v10 - 8);
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 - 8)))
            {
              sub_20BFD3EBC((int *)(v8 - 16), (int *)(v10 - 8));
              sub_20BFD3F10((int *)(v8 - 12), (int *)(v10 - 4));
              v8 -= 8;
            }
            v10 -= 8;
          }
          while (v11 != v7);
        }
        v12 = (int *)(v8 - 8);
        return sub_20C11D784((uint64_t)a1, v7, v12);
      }
    }
  }
  v12 = v7;
  return sub_20C11D784((uint64_t)a1, v7, v12);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfPathFindLongestPrefix(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char v3;

  return sub_20C14177C(a1, a2, 0, (uint64_t)&v3);
}

_QWORD *sub_20C14177C(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v8;
  _QWORD *v9;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v17;
  int v18;

  v4 = a1 + 1;
  if (!a1[2])
    return a1 + 1;
  v8 = (_QWORD *)*v4;
  v9 = a1 + 1;
  if (!*v4)
    goto LABEL_10;
  v9 = a1 + 1;
  do
  {
    v11 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v9 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if ((a3 & 1) != 0 || v9 == v4 || (v13 = v9, *(_QWORD *)((char *)v9 + 28) != *(_QWORD *)a2))
  {
LABEL_10:
    v13 = v4;
    if (v9 != (_QWORD *)*a1)
    {
      v14 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v13 = v14;
          v14 = (_QWORD *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v15 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (v15);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), &v17);
        v13 = (_QWORD *)sub_20C14177C(a1, &v17, 0, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_20BFD265C(&v17);
      }
    }
  }
  return v13;
}

void sub_20C1418C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfPathFindLongestStrictPrefix(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char v3;

  return sub_20C14177C(a1, a2, 1, (uint64_t)&v3);
}

int *pxrInternal__aapl__pxrReserved__::SdfPathAncestorsRange::iterator::operator++(int *a1)
{
  uint64_t v2;
  uint64_t Ptr;
  unsigned int *v4;
  unsigned int v5;
  int Handle;
  int v8;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1))
    {
      v2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1 + 1);
      Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
    }
    else
    {
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)
        || *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1)
                               + 12) < 2u)
      {
        v2 = 0;
        Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(0);
LABEL_11:
        v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(v2);
        sub_20BFD3EBC(a1, &Handle);
        sub_20BFD3F10(a1 + 1, &v8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
        sub_20BFD265C(&Handle);
        return a1;
      }
      v2 = 0;
      Ptr = *(_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
    }
    Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(Ptr);
    if (Ptr)
    {
      v4 = (unsigned int *)(Ptr + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    goto LABEL_11;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::distance(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t PathElementCount;

  PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a1);
  return PathElementCount - pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a2);
}

char *pxrInternal__aapl__pxrReserved__::Sdf_PathGetDebuggerPathText(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v4;
  const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v5;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
    return "";
  Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  v4 = (const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetDebugText(Ptr, v4, v5);
}

uint64_t *sub_20C141A98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524BC8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524BC8, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C141B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C141B98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5269C8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5269C8, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C141C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C141C98(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;

  *a1 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(a2);
  if (a2)
  {
    v6 = (unsigned int *)(a2 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[1] = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(a3);
  return a1;
}

uint64_t sub_20C141CF8()
{
  return 1;
}

uint64_t sub_20C141D00(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfPath *IsPrimVariantSelectionPath;
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v5;
  void ***v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  const char *v11;
  uint64_t *v12;
  const char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  _QWORD v37[4];
  uint64_t *v38;

  v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a1)
    || (IsPrimVariantSelectionPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v2),
        (IsPrimVariantSelectionPath & 1) != 0)
    || *(_QWORD *)v2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(IsPrimVariantSelectionPath))
  {
    v4 = *(_QWORD **)(a1 + 8);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v5)
      v5 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 6) & 0xFFFFFFFFFFFFFFF8))
      return 0;
    if ((sub_20C142050(*(pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 8)) & 1) != 0)
      return 1;
    v28 = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v28)
    {
      v29 = (const char *)(v28 + 16);
      if (*(char *)(v28 + 39) < 0)
        v29 = *(const char **)v29;
    }
    else
    {
      v29 = "";
    }
    v12 = (uint64_t *)sub_20C14214C(*(void ****)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid prim name '%s'", v30, v31, v29);
    v15 = v12[1];
    v16 = (uint64_t)(v12 + 2);
    v32 = v12[2];
    if (v15 >= v32)
    {
      v19 = (uint64_t)(v15 - *v12) >> 5;
      v33 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 59)
        sub_20BDDF694();
      v34 = v32 - *v12;
      if (v34 >> 4 > v33)
        v33 = v34 >> 4;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
        v22 = 0x7FFFFFFFFFFFFFFLL;
      else
        v22 = v33;
      v38 = v12 + 2;
      if (!v22)
      {
        v23 = 0;
LABEL_28:
        v24 = &v23[32 * v19];
        v37[0] = v23;
        v37[1] = v24;
        v37[3] = &v23[32 * v22];
        *(_DWORD *)v24 = 6;
        v25 = *(_OWORD *)__p;
        *((_QWORD *)v24 + 3) = v36;
        *(_OWORD *)(v24 + 8) = v25;
        __p[1] = 0;
        v36 = 0;
        __p[0] = 0;
        v37[2] = v24 + 32;
        sub_20C1421E8(v12, v37);
        v26 = v12[1];
        sub_20BF2405C((uint64_t)v37);
        v27 = SHIBYTE(v36);
        v12[1] = v26;
        if (v27 < 0)
          operator delete(__p[0]);
        return 0;
      }
      goto LABEL_26;
    }
  }
  else
  {
    v7 = *(void ****)(a1 + 16);
    v8 = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    v10 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v2) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    v12 = (uint64_t *)sub_20C14214C(v7);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot append child '%s' to path '%s'.", v13, v14, v9, v11);
    v15 = v12[1];
    v16 = (uint64_t)(v12 + 2);
    v17 = v12[2];
    if (v15 >= v17)
    {
      v19 = (uint64_t)(v15 - *v12) >> 5;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 59)
        sub_20BDDF694();
      v21 = v17 - *v12;
      if (v21 >> 4 > v20)
        v20 = v21 >> 4;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
        v22 = 0x7FFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      v38 = v12 + 2;
      if (!v22)
      {
        v23 = 0;
        goto LABEL_28;
      }
LABEL_26:
      v23 = (char *)sub_20BED2F10(v16, v22);
      goto LABEL_28;
    }
  }
  *(_DWORD *)v15 = 6;
  v18 = *(_OWORD *)__p;
  *(_QWORD *)(v15 + 24) = v36;
  *(_OWORD *)(v15 + 8) = v18;
  v12[1] = v15 + 32;
  return 0;
}

void sub_20C14201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20BF2405C((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C142050(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t IsUtf8CodePointXidContinue;
  uint64_t *v10;
  unint64_t v11;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*((char *)EmptyString + 23) < 0)
  {
    v3 = EmptyString;
    EmptyString = (uint64_t *)*EmptyString;
    v2 = v3[1];
    if (!v2)
      return 0;
  }
  else
  {
    v2 = *((unsigned __int8 *)EmptyString + 23);
    if (!*((_BYTE *)EmptyString + 23))
      return 0;
  }
  v10 = EmptyString;
  v11 = (unint64_t)EmptyString + v2;
  LODWORD(v4) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
  if ((v4 - 57344) >= 0xFFFFF800 || v4 >= 0x110000)
    v4 = 65533;
  else
    v4 = v4;
  if ((_DWORD)v4 != 95
    && !pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v4))
  {
    return 0;
  }
  sub_20C140040((unint64_t *)&v10);
  if ((unint64_t)v10 >= v11)
    return 1;
  do
  {
    LODWORD(v6) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
    if ((v6 - 57344) >= 0xFFFFF800 || v6 >= 0x110000)
      v6 = 65533;
    else
      v6 = v6;
    IsUtf8CodePointXidContinue = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v6);
    if (!(_DWORD)IsUtf8CodePointXidContinue)
      break;
    sub_20C140040((unint64_t *)&v10);
  }
  while ((unint64_t)v10 < v11);
  return IsUtf8CodePointXidContinue;
}

void **sub_20C14214C(void ***a1)
{
  void **result;
  void **v3;
  void **v4;

  result = *a1;
  if (!result)
  {
    v3 = (void **)operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    v4 = 0;
    sub_20C1421A8(a1, v3);
    sub_20C1421A8(&v4, 0);
    return *a1;
  }
  return result;
}

void sub_20C1421A8(void ***a1, void **a2)
{
  void **v2;
  void **v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = v2;
    sub_20BF20E24(&v3);
    operator delete(v2);
  }
}

uint64_t sub_20C1421E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C14225C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C14225C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  sub_20C1422FC((uint64_t)v13);
  return v11;
}

uint64_t sub_20C1422FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF24018(a1);
  return a1;
}

uint64_t sub_20C142330(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t *EmptyString;
  uint64_t result;
  _BOOL8 IsPrimPath;
  void ***v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  const char *v10;
  uint64_t *v11;
  const char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  void *__p[2];
  uint64_t v27;
  _QWORD v28[5];

  v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  if ((**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString);
  if ((_DWORD)result)
  {
    if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v2) & 1) != 0)
      return 1;
    IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v2);
    if (IsPrimPath
      || *(_QWORD *)v2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsPrimPath))
    {
      return 1;
    }
    else
    {
      v6 = *(void ****)(a1 + 16);
      v7 = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v8 = *(const char **)v8;
      }
      else
      {
        v8 = "";
      }
      v9 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v2) & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0)
          v10 = *(const char **)v10;
      }
      else
      {
        v10 = "";
      }
      v11 = (uint64_t *)sub_20C14214C(v6);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Can only append a property '%s' to a prim path (%s)", v12, v13, v8, v10);
      v14 = v11[1];
      v15 = v11[2];
      if (v14 >= v15)
      {
        v17 = (uint64_t)(v14 - *v11) >> 5;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59)
          sub_20BDDF694();
        v19 = v15 - *v11;
        if (v19 >> 4 > v18)
          v18 = v19 >> 4;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
          v20 = 0x7FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v28[4] = v11 + 2;
        if (v20)
          v21 = (char *)sub_20BED2F10((uint64_t)(v11 + 2), v20);
        else
          v21 = 0;
        v22 = &v21[32 * v17];
        v28[0] = v21;
        v28[1] = v22;
        v28[3] = &v21[32 * v20];
        *(_DWORD *)v22 = 6;
        v23 = *(_OWORD *)__p;
        *((_QWORD *)v22 + 3) = v27;
        *(_OWORD *)(v22 + 8) = v23;
        __p[1] = 0;
        v27 = 0;
        __p[0] = 0;
        v28[2] = v22 + 32;
        sub_20C1421E8(v11, v28);
        v24 = v11[1];
        sub_20BF2405C((uint64_t)v28);
        v25 = SHIBYTE(v27);
        v11[1] = v24;
        if (v25 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)v14 = 6;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 24) = v27;
        *(_OWORD *)(v14 + 8) = v16;
        v11[1] = v14 + 32;
      }
      return 0;
    }
  }
  return result;
}

void sub_20C142528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20BF2405C((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C142554(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  unsigned __int8 *v3;
  uint64_t *v4;
  void ***v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  void *__p[2];
  uint64_t v27;
  _QWORD v28[5];

  v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  v3 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a1);
  if ((v3 & 1) == 0)
  {
    v4 = *(uint64_t **)(a1 + 8);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t *)*v4;
    v7 = a1 + 16;
    v6 = *(uint64_t **)(a1 + 16);
    v5 = *(void ****)(v7 + 8);
    if (*((char *)v6 + 23) < 0)
      v6 = (uint64_t *)*v6;
    v8 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v2) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    v10 = (uint64_t *)sub_20C14214C(v5);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot append variant selection %s = %s to <%s>; can only append a variant sel"
                                          "ection to a prim or prim variant selection path.",
      v11,
      v12,
      v4,
      v6,
      v9);
    v13 = v10[1];
    v14 = v10[2];
    if (v13 >= v14)
    {
      v16 = (uint64_t)(v13 - *v10) >> 5;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59)
        sub_20BDDF694();
      v18 = v14 - *v10;
      if (v18 >> 4 > v17)
        v17 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      v28[4] = v10 + 2;
      if (v19)
        v20 = (char *)sub_20BED2F10((uint64_t)(v10 + 2), v19);
      else
        v20 = 0;
      v21 = &v20[32 * v16];
      v28[0] = v20;
      v28[1] = v21;
      v28[3] = &v20[32 * v19];
      *(_DWORD *)v21 = 1;
      v22 = *(_OWORD *)__p;
      *((_QWORD *)v21 + 3) = v27;
      *(_OWORD *)(v21 + 8) = v22;
      __p[1] = 0;
      v27 = 0;
      __p[0] = 0;
      v28[2] = v21 + 32;
      sub_20C1421E8(v10, v28);
      v23 = v10[1];
      sub_20BF2405C((uint64_t)v28);
      v24 = SHIBYTE(v27);
      v10[1] = v23;
      if (v24 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)v13 = 1;
      v15 = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 24) = v27;
      *(_OWORD *)(v13 + 8) = v15;
      v10[1] = v13 + 32;
    }
  }
  return v3;
}

void sub_20C142708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_20BF2405C((uint64_t)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C142734(uint64_t a1)
{
  unsigned __int8 *Ptr;
  int v3;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  std::string __p;
  _QWORD v25[4];
  uint64_t *v26;

  Ptr = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(*(_QWORD *)a1 + 4));
  if (Ptr)
  {
    v3 = Ptr[14];
    if (v3 == 3 || v3 == 6)
    {
      v5 = *(_QWORD **)(a1 + 8);
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Ptr);
      if (*v5 != qword_254985B98)
        return 1;
      v6 = (uint64_t *)sub_20C14214C(*(void ****)(a1 + 16));
      sub_20C1429B4("Target path cannot be invalid.", &__p);
      v7 = v6[1];
      v8 = (uint64_t)(v6 + 2);
      v9 = v6[2];
      if (v7 < v9)
        goto LABEL_18;
      v10 = (uint64_t)(v7 - *v6) >> 5;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 59)
        sub_20BDDF694();
      v12 = v9 - *v6;
      if (v12 >> 4 > v11)
        v11 = v12 >> 4;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
        v13 = 0x7FFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      v26 = v6 + 2;
      if (v13)
        goto LABEL_16;
      v14 = 0;
      goto LABEL_30;
    }
  }
  v6 = (uint64_t *)sub_20C14214C(*(void ****)(a1 + 16));
  sub_20C1429B4("Can only append a target to a property path.", &__p);
  v7 = v6[1];
  v8 = (uint64_t)(v6 + 2);
  v15 = v6[2];
  if (v7 >= v15)
  {
    v10 = (uint64_t)(v7 - *v6) >> 5;
    v17 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v18 = v15 - *v6;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v17;
    v26 = v6 + 2;
    if (v13)
    {
LABEL_16:
      v14 = (char *)sub_20BED2F10(v8, v13);
      goto LABEL_30;
    }
    v14 = 0;
LABEL_30:
    v20 = &v14[32 * v10];
    v25[0] = v14;
    v25[1] = v20;
    v25[3] = &v14[32 * v13];
    *(_DWORD *)v20 = 6;
    v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v20 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v20 + 8) = v21;
    memset(&__p, 0, sizeof(__p));
    v25[2] = v20 + 32;
    sub_20C1421E8(v6, v25);
    v22 = v6[1];
    sub_20BF2405C((uint64_t)v25);
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v6[1] = v22;
    if (v23 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
LABEL_18:
  *(_DWORD *)v7 = 6;
  v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v7 + 8) = v16;
  v6[1] = v7 + 32;
  return 0;
}

void sub_20C142980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BF2405C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1429B4(char *__s@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;

  sub_20BDDC0E4(v7, __s);
  sub_20BDDC0E4(v5, "%%");
  sub_20BDDC0E4(__p, "%");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)v7, (unsigned __int8 *)v5, (unsigned __int8 *)__p, a2);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_20C142A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C142A94(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t v2;
  uint64_t *EmptyString;
  uint64_t Ptr;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  std::string __p;
  _QWORD v24[4];
  uint64_t *v25;

  v2 = *(_QWORD *)a1;
  if ((**((_QWORD **)a1 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((**((_QWORD **)a1 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString) & 1) != 0)
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v2 + 4));
    if (Ptr && *(_BYTE *)(Ptr + 14) == 4)
      return 1;
    v6 = (uint64_t *)sub_20C14214C(*((void ****)a1 + 2));
    sub_20C1429B4("Can only append a relational attribute to a target path.", &__p);
    v7 = v6[1];
    v8 = (uint64_t)(v6 + 2);
    v14 = v6[2];
    if (v7 < v14)
      goto LABEL_18;
    v10 = (uint64_t)(v7 - *v6) >> 5;
    v16 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v17 = v14 - *v6;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v16;
    v25 = v6 + 2;
    if (v13)
      goto LABEL_26;
    v18 = 0;
    goto LABEL_29;
  }
  v6 = (uint64_t *)sub_20C14214C(*((void ****)a1 + 2));
  sub_20C1429B4("Invalid property name.", &__p);
  v7 = v6[1];
  v8 = (uint64_t)(v6 + 2);
  v9 = v6[2];
  if (v7 >= v9)
  {
    v10 = (uint64_t)(v7 - *v6) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v12 = v9 - *v6;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v25 = v6 + 2;
    if (v13)
    {
LABEL_26:
      v18 = (char *)sub_20BED2F10(v8, v13);
      goto LABEL_29;
    }
    v18 = 0;
LABEL_29:
    v19 = &v18[32 * v10];
    v24[0] = v18;
    v24[1] = v19;
    v24[3] = &v18[32 * v13];
    *(_DWORD *)v19 = 6;
    v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v19 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v19 + 8) = v20;
    memset(&__p, 0, sizeof(__p));
    v24[2] = v19 + 32;
    sub_20C1421E8(v6, v24);
    v21 = v6[1];
    sub_20BF2405C((uint64_t)v24);
    v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v6[1] = v21;
    if (v22 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
LABEL_18:
  *(_DWORD *)v7 = 6;
  v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v7 + 8) = v15;
  v6[1] = v7 + 32;
  return 0;
}

void sub_20C142CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BF2405C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C142D14(pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  unsigned __int8 *Ptr;
  int v4;
  BOOL v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  void ***v7;
  int v8;
  void **v9;
  const char *v10;
  char *v11;
  uint64_t *v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  void ***v18;
  void **v19;
  int v20;
  void **v21;
  const char *v22;
  char *v23;
  uint64_t *v24;
  void **v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *__p[2];
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t *v59;

  v2 = *a1;
  Ptr = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)*a1 + 1);
  if (!Ptr || ((v4 = Ptr[14], v4 != 3) ? (v5 = v4 == 6) : (v5 = 1), !v5))
  {
    v17 = a1[1];
    v18 = (void ***)a1[2];
    v19 = v51;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v17, (uint64_t)v51);
    if (v52 < 0)
      v19 = (void **)v51[0];
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v2, (uint64_t)v49);
    v20 = v50;
    v21 = (void **)v49[0];
    v24 = (uint64_t *)sub_20C14214C(v18);
    v25 = v49;
    if (v20 < 0)
      v25 = v21;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannnot append mapper '%s' to non-property path <%s>.", v22, v23, v19, v25);
    v26 = v24[2];
    v27 = v24[1];
    if (v27 >= v26)
    {
      v29 = (uint64_t)(v27 - *v24) >> 5;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 59)
        sub_20BDDF694();
      v31 = v26 - *v24;
      if (v31 >> 4 > v30)
        v30 = v31 >> 4;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
        v32 = 0x7FFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      v59 = v24 + 2;
      if (v32)
        v33 = (char *)sub_20BED2F10((uint64_t)(v24 + 2), v32);
      else
        v33 = 0;
      v35 = &v33[32 * v29];
      v55 = v33;
      v56 = v35;
      v58 = &v33[32 * v32];
      *(_DWORD *)v35 = 6;
      v36 = *(_OWORD *)__p;
      *((_QWORD *)v35 + 3) = v54;
      *(_OWORD *)(v35 + 8) = v36;
      __p[1] = 0;
      v54 = 0;
      __p[0] = 0;
      v57 = v35 + 32;
      sub_20C1421E8(v24, &v55);
      v37 = v24[1];
      sub_20BF2405C((uint64_t)&v55);
      v38 = SHIBYTE(v54);
      v24[1] = v37;
      if (v38 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)v27 = 6;
      v28 = *(_OWORD *)__p;
      *(_QWORD *)(v27 + 24) = v54;
      *(_OWORD *)(v27 + 8) = v28;
      v24[1] = v27 + 32;
    }
    if ((v50 & 0x80000000) == 0)
      goto LABEL_44;
    v39 = v49[0];
    goto LABEL_33;
  }
  v6 = a1[1];
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Ptr);
  if (*(_QWORD *)v6 != qword_254985B98)
    return 1;
  v7 = (void ***)a1[2];
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v2, (uint64_t)v51);
  v8 = v52;
  v9 = (void **)v51[0];
  v12 = (uint64_t *)sub_20C14214C(v7);
  if (v8 >= 0)
    v13 = v51;
  else
    v13 = v9;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot append an empty mapper target path to <%s>", v10, v11, v13);
  v14 = v12[2];
  v15 = v12[1];
  if (v15 >= v14)
  {
    v40 = (uint64_t)(v15 - *v12) >> 5;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 59)
      sub_20BDDF694();
    v42 = v14 - *v12;
    if (v42 >> 4 > v41)
      v41 = v42 >> 4;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0)
      v43 = 0x7FFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    v59 = v12 + 2;
    if (v43)
      v44 = (char *)sub_20BED2F10((uint64_t)(v12 + 2), v43);
    else
      v44 = 0;
    v45 = &v44[32 * v40];
    v55 = v44;
    v56 = v45;
    v58 = &v44[32 * v43];
    *(_DWORD *)v45 = 6;
    v46 = *(_OWORD *)__p;
    *((_QWORD *)v45 + 3) = v54;
    *(_OWORD *)(v45 + 8) = v46;
    __p[1] = 0;
    v54 = 0;
    __p[0] = 0;
    v57 = v45 + 32;
    sub_20C1421E8(v12, &v55);
    v47 = v12[1];
    sub_20BF2405C((uint64_t)&v55);
    v48 = SHIBYTE(v54);
    v12[1] = v47;
    if ((v48 & 0x80000000) == 0)
      goto LABEL_44;
    v39 = __p[0];
LABEL_33:
    operator delete(v39);
    goto LABEL_44;
  }
  *(_DWORD *)v15 = 6;
  v16 = *(_OWORD *)__p;
  *(_QWORD *)(v15 + 24) = v54;
  *(_OWORD *)(v15 + 8) = v16;
  v12[1] = v15 + 32;
LABEL_44:
  if (v52 < 0)
    operator delete(v51[0]);
  return 0;
}

void sub_20C143040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  sub_20BF2405C((uint64_t)&a29);
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1430C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t Ptr;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  std::string __p;
  _QWORD v23[4];
  uint64_t *v24;

  v2 = *a1;
  if ((sub_20C142050((pxrInternal__aapl__pxrReserved__::TfToken *)a1[1]) & 1) != 0)
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v2 + 4));
    if (Ptr && *(_BYTE *)(Ptr + 14) == 5)
      return 1;
    v5 = (uint64_t *)sub_20C14214C((void ***)a1[2]);
    sub_20C1429B4("Can only append a mapper arg to a mapper path.", &__p);
    v6 = v5[1];
    v7 = (uint64_t)(v5 + 2);
    v13 = v5[2];
    if (v6 < v13)
      goto LABEL_15;
    v9 = (uint64_t)(v6 - *v5) >> 5;
    v15 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v16 = v13 - *v5;
    if (v16 >> 4 > v15)
      v15 = v16 >> 4;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v15;
    v24 = v5 + 2;
    if (v12)
      goto LABEL_23;
    v17 = 0;
    goto LABEL_26;
  }
  v5 = (uint64_t *)sub_20C14214C((void ***)a1[2]);
  sub_20C1429B4("Invalid arg name.", &__p);
  v6 = v5[1];
  v7 = (uint64_t)(v5 + 2);
  v8 = v5[2];
  if (v6 >= v8)
  {
    v9 = (uint64_t)(v6 - *v5) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v11 = v8 - *v5;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v24 = v5 + 2;
    if (v12)
    {
LABEL_23:
      v17 = (char *)sub_20BED2F10(v7, v12);
      goto LABEL_26;
    }
    v17 = 0;
LABEL_26:
    v18 = &v17[32 * v9];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[32 * v12];
    *(_DWORD *)v18 = 6;
    v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v18 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v18 + 8) = v19;
    memset(&__p, 0, sizeof(__p));
    v23[2] = v18 + 32;
    sub_20C1421E8(v5, v23);
    v20 = v5[1];
    sub_20BF2405C((uint64_t)v23);
    v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v5[1] = v20;
    if (v21 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
LABEL_15:
  *(_DWORD *)v6 = 6;
  v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v6 + 8) = v14;
  v5[1] = v6 + 32;
  return 0;
}

void sub_20C1432F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BF2405C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14332C(void ****a1)
{
  uint64_t Ptr;
  int v3;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  std::string __p;
  _QWORD v20[5];

  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)*a1 + 1);
  if (Ptr)
  {
    v3 = *(unsigned __int8 *)(Ptr + 14);
    if (v3 == 3 || v3 == 6)
      return 1;
  }
  v6 = (uint64_t *)sub_20C14214C(a1[1]);
  sub_20C1429B4("Can only append an expression to a property path.", &__p);
  v7 = v6[1];
  v8 = v6[2];
  if (v7 >= v8)
  {
    v10 = (uint64_t)(v7 - *v6) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v12 = v8 - *v6;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v20[4] = v6 + 2;
    if (v13)
      v14 = (char *)sub_20BED2F10((uint64_t)(v6 + 2), v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v20[0] = v14;
    v20[1] = v15;
    v20[3] = &v14[32 * v13];
    *(_DWORD *)v15 = 6;
    v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v15 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v15 + 8) = v16;
    memset(&__p, 0, sizeof(__p));
    v20[2] = v15 + 32;
    sub_20C1421E8(v6, v20);
    v17 = v6[1];
    sub_20BF2405C((uint64_t)v20);
    v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v6[1] = v17;
    if (v18 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_DWORD *)v7 = 6;
    v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v7 + 8) = v9;
    v6[1] = v7 + 32;
  }
  return 0;
}

void sub_20C14348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BF2405C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1434B8()
{
  return 1;
}

uint64_t sub_20C1434C0()
{
  return 1;
}

uint64_t sub_20C1434C8()
{
  return 1;
}

_DWORD *sub_20C1434D0(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v6;

  v6 = sub_20BFD38A4(a1, a2);
  sub_20BFD38DC(v6 + 1, a2 + 1);
  sub_20BFD38A4(a1 + 2, a3);
  sub_20BFD38DC(a1 + 3, a3 + 1);
  return a1;
}

uint64_t sub_20C143528(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  uint64_t v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  int v23;
  unint64_t v24;
  const void *v25;
  const void *v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _QWORD v34[4];
  char v35;

  v2 = *(unsigned __int8 *)(a1 + 14);
  v3 = *(unsigned __int8 *)(a2 + 14);
  v4 = v2 >= v3;
  if (v2 != v3)
    return !v4;
  result = 0;
  switch(v2)
  {
    case 0u:
      v4 = __PAIR64__((*(_BYTE *)(a1 + 15) & 1) == 0, *(_BYTE *)(a2 + 15) & 1) != 0;
      return !v4;
    case 1u:
    case 3u:
    case 6u:
    case 7u:
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_QWORD *)(a2 + 16);
      if (v7)
        v9 = v8 == 0;
      else
        v9 = 1;
      if (v9)
      {
        if (v7)
          v10 = 1;
        else
          v10 = v8 == 0;
        return !v10;
      }
      if (v7 == v8)
        goto LABEL_52;
      v11 = v7 & 0xFFFFFFFFFFFFFFF8;
      v12 = v8 & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v12 + 8);
      if (v13 < v14)
        return 1;
      if (v13 == v14)
      {
        v22 = *(const void **)(v12 + 16);
        v20 = v12 + 16;
        v21 = v22;
        v23 = *(char *)(v20 + 23);
        v26 = *(const void **)(v11 + 16);
        v24 = v11 + 16;
        v25 = v26;
        v27 = *(char *)(v24 + 23);
        if (v27 >= 0)
          v28 = *(unsigned __int8 *)(v24 + 23);
        else
          v28 = *(_QWORD *)(v24 + 8);
        if (v27 >= 0)
          v29 = (const void *)v24;
        else
          v29 = v25;
        if (v23 >= 0)
          v30 = *(unsigned __int8 *)(v20 + 23);
        else
          v30 = *(_QWORD *)(v20 + 8);
        if (v23 >= 0)
          v31 = (const void *)v20;
        else
          v31 = v21;
        if (v30 >= v28)
          v32 = v28;
        else
          v32 = v30;
        v33 = memcmp(v29, v31, v32);
        if (v33)
          return v33 < 0;
        else
          return v28 < v30;
      }
      goto LABEL_52;
    case 2u:
      return sub_20C143764(*(uint64_t **)(a1 + 16), *(uint64_t **)(a2 + 16));
    case 4u:
      v16 = *(_QWORD *)(a1 + 16);
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
      v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
      if (v16 == *(_QWORD *)(a2 + 16))
        goto LABEL_52;
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v15)
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17))
      {
        goto LABEL_30;
      }
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v15))
        goto LABEL_53;
      goto LABEL_52;
    case 5u:
      v19 = *(_QWORD *)(a1 + 16);
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
      v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
      if (v19 == *(_QWORD *)(a2 + 16))
        goto LABEL_52;
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v15)
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17))
      {
LABEL_30:
        result = pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(v15, v17, v18);
      }
      else if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v15))
      {
LABEL_52:
        result = 0;
      }
      else
      {
LABEL_53:
        result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17);
      }
      break;
    case 8u:
      return result;
    default:
      v34[0] = "sdf/pathNode.h";
      v34[1] = "Compare";
      v34[2] = 665;
      v34[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_PathNode::Compare(const Sdf_PathNode &) const [Comp = pxrInter"
               "nal__aapl__pxrReserved__::Sdf_PathNode::LessThan]";
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled Sdf_PathNode::NodeType enumerant");
      goto LABEL_52;
  }
  return result;
}

BOOL sub_20C143764(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  const void *v34;
  int v35;
  unint64_t v36;
  const void *v37;
  const void *v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v54;
  unint64_t v55;
  const void *v56;
  const void *v57;
  int v58;
  unint64_t v59;
  const void *v60;
  const void *v61;
  int v62;
  size_t v63;
  const void *v64;
  size_t v65;
  const void *v66;
  size_t v67;
  int v68;

  v4 = *a1;
  v5 = *a2;
  if (*a1)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4)
      v7 = 1;
    else
      v7 = v5 == 0;
    if (!v7)
      return 1;
  }
  else if (v4 != v5)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v9 = v5 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    v11 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v10 < v11)
      return 1;
    if (v10 == v11)
    {
      v14 = *(const void **)(v9 + 16);
      v12 = v9 + 16;
      v13 = v14;
      v15 = *(char *)(v12 + 23);
      v18 = *(const void **)(v8 + 16);
      v16 = v8 + 16;
      v17 = v18;
      v19 = *(char *)(v16 + 23);
      if (v19 >= 0)
        v20 = *(unsigned __int8 *)(v16 + 23);
      else
        v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= 0)
        v21 = (const void *)v16;
      else
        v21 = v17;
      if (v15 >= 0)
        v22 = *(unsigned __int8 *)(v12 + 23);
      else
        v22 = *(_QWORD *)(v12 + 8);
      if (v15 >= 0)
        v23 = (const void *)v12;
      else
        v23 = v13;
      if (v22 >= v20)
        v24 = v20;
      else
        v24 = v22;
      v25 = memcmp(v21, v23, v24);
      v26 = v20 < v22;
      if (v25)
        v26 = v25 < 0;
      if (v26)
        return 1;
    }
  }
  if (v4)
    v27 = v5 == 0;
  else
    v27 = 1;
  if (v27)
  {
    if (v4 && !v5)
      return 0;
  }
  else if (v5 != v4)
  {
    v28 = v5 & 0xFFFFFFFFFFFFFFF8;
    v29 = v4 & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
    v31 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v30 < v31)
      return 0;
    if (v30 == v31)
    {
      v34 = *(const void **)(v29 + 16);
      v32 = v29 + 16;
      v33 = v34;
      v35 = *(char *)(v32 + 23);
      v38 = *(const void **)(v28 + 16);
      v36 = v28 + 16;
      v37 = v38;
      v39 = *(char *)(v36 + 23);
      if (v39 >= 0)
        v40 = *(unsigned __int8 *)(v36 + 23);
      else
        v40 = *(_QWORD *)(v36 + 8);
      if (v39 >= 0)
        v41 = (const void *)v36;
      else
        v41 = v37;
      if (v35 >= 0)
        v42 = *(unsigned __int8 *)(v32 + 23);
      else
        v42 = *(_QWORD *)(v32 + 8);
      if (v35 >= 0)
        v43 = (const void *)v32;
      else
        v43 = v33;
      if (v42 >= v40)
        v44 = v40;
      else
        v44 = v42;
      v45 = memcmp(v41, v43, v44);
      v46 = v40 < v42;
      if (v45)
        v46 = v45 < 0;
      if (v46)
        return 0;
    }
  }
  v47 = a1[1];
  v48 = a2[1];
  if (v47 && v48)
  {
    if (v47 != v48)
    {
      v49 = v47 & 0xFFFFFFFFFFFFFFF8;
      v50 = v48 & 0xFFFFFFFFFFFFFFF8;
      v51 = *(_QWORD *)(v49 + 8);
      v52 = *(_QWORD *)(v50 + 8);
      if (v51 < v52)
        return 1;
      if (v51 == v52)
      {
        v57 = *(const void **)(v50 + 16);
        v55 = v50 + 16;
        v56 = v57;
        v58 = *(char *)(v55 + 23);
        v61 = *(const void **)(v49 + 16);
        v59 = v49 + 16;
        v60 = v61;
        v62 = *(char *)(v59 + 23);
        if (v62 >= 0)
          v63 = *(unsigned __int8 *)(v59 + 23);
        else
          v63 = *(_QWORD *)(v59 + 8);
        if (v62 >= 0)
          v64 = (const void *)v59;
        else
          v64 = v60;
        if (v58 >= 0)
          v65 = *(unsigned __int8 *)(v55 + 23);
        else
          v65 = *(_QWORD *)(v55 + 8);
        if (v58 >= 0)
          v66 = (const void *)v55;
        else
          v66 = v56;
        if (v65 >= v63)
          v67 = v63;
        else
          v67 = v65;
        v68 = memcmp(v64, v66, v67);
        if (v68)
          return v68 < 0;
        else
          return v63 < v65;
      }
    }
    return 0;
  }
  if (v47)
    v54 = 1;
  else
    v54 = v48 == 0;
  return !v54;
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *sub_20C14397C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C1439C4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::~SdfPathTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *sub_20C1439C4()
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)operator new(0x78uLL);
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::SdfPathTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C1439F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_20C143A04(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
    return (void **)sub_20C019CC0((uint64_t)a1, a2);
  v8 = v7 - *a1;
  v9 = a2 + (v8 >> 3);
  if (v9 >> 61)
    sub_20BDDF694();
  v10 = v8 >> 3;
  v11 = v5 - *a1;
  if (v11 >> 2 > v9)
    v9 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v9;
  v19 = v4;
  if (v12)
    v13 = (char *)sub_20BDDF6A8(v4, v12);
  else
    v13 = 0;
  v15 = v13;
  v16 = &v13[8 * v10];
  v17 = v16;
  v18 = &v13[8 * v12];
  sub_20C143AFC((uint64_t)&v15, a2);
  sub_20BFD797C(a1, &v15);
  return sub_20BFD7B28(&v15);
}

void sub_20C143AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C143AFC(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  result = *(_DWORD **)(a1 + 16);
  if (a2)
  {
    v4 = 8 * a2;
    v5 = result;
    v6 = &result[2 * a2];
    do
    {
      *v5++ = 0;
      v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(result);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v7 + 1);
      result = v5;
      v4 -= 8;
    }
    while (v4);
    result = v6;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_20C143B60(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != 0x40000; i += 16)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + i));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + i + 4));
    *(_QWORD *)(a1 + i + 8) = 0;
  }
  return a1;
}

uint64_t sub_20C143BB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = a1 + 0x4000;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 - 8));
    v4 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    v3 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  while (v2 != a1);
  return a1;
}

_QWORD *sub_20C143C10(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C143C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C143C84(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C143CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

void sub_20C143D00()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfPathExpression::Complement");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPathExpression::ImpliedUnion");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPathExpression::Union");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPathExpression::Intersection");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPathExpression::Difference");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPathExpression::ExpressionRef");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPathExpression::Pattern");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529628, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C143F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C143F94()
{
  sub_20C146E38();
  return sub_20C146F38();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference::Weaker(pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254985C20);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985C20))
  {
    v3 = operator new(0x20uLL);
    *v3 = 0;
    sub_20C019BD0(v3);
    sub_20BDDC0E4(v3 + 1, "_");
    qword_254985C18 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985C20);
  }
  return qword_254985C18;
}

void sub_20C144028(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v3;

  v3 = sub_20BFD1A18(v1);
  operator delete(v3);
  __cxa_guard_abort(&qword_254985C20);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v4;
  uint64_t v5;
  void **v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *exception;
  char *v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  void *__p[2];
  uint64_t v19;
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  _OWORD v27[2];
  std::string v28;
  __int128 v29;
  std::string::size_type v30;

  *(_OWORD *)(a1 + 48) = 0u;
  v4 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v8 = (void **)(a1 + 72);
    sub_20C148CA4((uint64_t)v25);
    v9 = "<input>";
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8))
        v9 = *(char **)a3;
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      v9 = (char *)a3;
    }
    v17 = v9;
    sub_20C14EFA4((unsigned __int8 *)__p, (__int128 *)a2, &v17);
    v27[0] = *(_OWORD *)&v20[8];
    v27[1] = v21;
    if ((sub_20C1491D4((uint64_t)__p, v25) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      v14 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v14)
      {
        sub_20BDDC0E4(&v28, v14);
        free(v14);
      }
      else
      {
        sub_20BDDC0E4(&v28, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      v15 = std::string::insert(&v28, 0, "parse error matching ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v30 = v15->__r_.__value_.__r.__words[2];
      v29 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_20C01ADA0((uint64_t)exception, (uint64_t)&v29, (uint64_t)__p);
      __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
    }
    if ((sub_20C01EACC((uint64_t)__p) & 1) == 0 && v10)
      sub_20C14EEB8((uint64_t)__p);
    sub_20C019D24((uint64_t)__p);
    sub_20C148C0C(v25, (uint64_t)__p);
    v11 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      operator delete(v11);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 16) = v19;
    __p[1] = 0;
    v19 = 0;
    __p[0] = 0;
    sub_20C00BC18((void **)(a1 + 24));
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v20;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)&v20[16];
    memset(v20, 0, sizeof(v20));
    sub_20C00BCC0(v4);
    *(_OWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 64) = v22;
    v22 = 0;
    v21 = 0uLL;
    if (*(char *)(a1 + 95) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = v23;
    *(_QWORD *)(a1 + 88) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    *(_QWORD *)&v27[0] = &v21;
    sub_20C00E25C((void ***)v27);
    *(_QWORD *)&v27[0] = v20;
    sub_20C00D5A8((void ***)v27);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_20C1490B8((uint64_t)&v26);
    __p[0] = v25;
    sub_20C149150((void ***)__p);
  }
  return a1;
}

void sub_20C14433C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,char *a22,const char *a23,uint64_t a24,const char *a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,std::string::size_type a31)
{
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  __int128 v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  void *v49;
  void *v50;

  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  if (*(char *)(v37 - 113) < 0)
  {
    operator delete(*(void **)(v37 - 136));
    if ((v36 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v36)
  {
LABEL_8:
    v40 = *(_OWORD *)(v37 - 160);
    a15 = *(_OWORD *)(v37 - 176);
    a16 = v40;
    sub_20C019D24((uint64_t)&a12);
    if (a2 == 1)
    {
      v41 = __cxa_begin_catch(a1);
      v42 = (char *)(*(uint64_t (**)(_QWORD *))(*v41 + 16))(v41);
      sub_20BDDC0E4(&a12, v42);
      std::string::append((std::string *)&a12, " -- ");
      v43 = v41[2];
      v44 = v41[3];
      if (v43 != v44)
      {
        v45 = 1;
        do
        {
          if ((v45 & 1) == 0)
            std::string::append((std::string *)&a12, ", ");
          sub_20C01B02C(v43);
          v46 = *(char *)(v37 - 153);
          if (v46 >= 0)
            v47 = (const std::string::value_type *)(v37 - 176);
          else
            v47 = *(const std::string::value_type **)(v37 - 176);
          if (v46 >= 0)
            v48 = *(unsigned __int8 *)(v37 - 153);
          else
            v48 = *(_QWORD *)(v37 - 168);
          std::string::append((std::string *)&a12, v47, v48);
          if (*(char *)(v37 - 153) < 0)
            operator delete(*(void **)(v37 - 176));
          v45 = 0;
          v43 += 48;
        }
        while (v43 != v44);
      }
      if (SHIBYTE(a10) < 0)
        operator delete((void *)__p);
      __p = a12;
      a10 = a13;
      __cxa_end_catch();
      sub_20C1490B8((uint64_t)&a25);
      *(_QWORD *)&a12 = &a22;
      sub_20C149150((void ***)&a12);
      a30 = 0uLL;
      a31 = 0;
      v49 = *(void **)v31;
      if (*(_QWORD *)v31)
      {
        *(_QWORD *)(v31 + 8) = v49;
        operator delete(v49);
        *(_QWORD *)v31 = 0;
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v31 + 16) = 0;
      }
      *(_QWORD *)v31 = 0;
      *(_QWORD *)(v31 + 8) = 0;
      *(_QWORD *)(v31 + 16) = 0;
      a23 = 0;
      a24 = 0;
      a22 = 0;
      sub_20C00BC18((void **)v34);
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = 0;
      a26 = 0;
      a27 = 0;
      a25 = 0;
      sub_20C00BCC0((void **)v32);
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      *(_QWORD *)(v32 + 16) = 0;
      a29 = 0uLL;
      a28 = 0;
      if (*(char *)(v31 + 95) < 0)
        operator delete(v33->__r_.__value_.__l.__data_);
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = a30;
      v33->__r_.__value_.__r.__words[2] = a31;
      HIBYTE(a31) = 0;
      LOBYTE(a30) = 0;
      *(_QWORD *)&a12 = &a28;
      sub_20C00E25C((void ***)&a12);
      *(_QWORD *)&a12 = &a25;
      sub_20C00D5A8((void ***)&a12);
      if (a22)
      {
        a23 = a22;
        operator delete(a22);
      }
      std::string::operator=(v33, (const std::string *)&__p);
      a22 = "sdf/pathExpression.cpp";
      a23 = "SdfPathExpression";
      a24 = 80;
      a25 = "pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(const std::string &, const std::string &)";
      LOBYTE(a26) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&a22, 3);
      if (SHIBYTE(a10) < 0)
        operator delete((void *)__p);
      JUMPOUT(0x20C144224);
    }
    sub_20C148C68((void **)&a22);
    if (SHIBYTE(a10) < 0)
      operator delete((void *)__p);
    if (*(char *)(v31 + 95) < 0)
      operator delete(v33->__r_.__value_.__l.__data_);
    *(_QWORD *)&a12 = v32;
    sub_20C00E25C((void ***)&a12);
    *(_QWORD *)&a12 = v34;
    sub_20C00D5A8((void ***)&a12);
    v50 = *(void **)v31;
    if (*(_QWORD *)v31)
    {
      *(_QWORD *)(v31 + 8) = v50;
      operator delete(v50);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  unsigned __int8 v1;
  void *v3;
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  char v7;

  v1 = atomic_load((unsigned __int8 *)&qword_254985C30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985C30))
  {
    v3 = operator new(0x60uLL);
    sub_20BDDC0E4(v6, "//");
    __p[0] = 0;
    __p[1] = 0;
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(v3, v6, __p);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
    if (v7 < 0)
      operator delete(v6[0]);
    qword_254985C28 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985C30);
  }
  return qword_254985C28;
}

void sub_20C14474C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  operator delete(v20);
  __cxa_guard_abort(&qword_254985C30);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::EveryDescendant(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  unsigned __int8 v1;
  void *v3;
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  char v7;

  v1 = atomic_load((unsigned __int8 *)&qword_254985C40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985C40))
  {
    v3 = operator new(0x60uLL);
    sub_20BDDC0E4(v6, ".//");
    __p[0] = 0;
    __p[1] = 0;
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression((uint64_t)v3, (uint64_t)v6, (uint64_t)__p);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
    if (v7 < 0)
      operator delete(v6[0]);
    qword_254985C38 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985C40);
  }
  return qword_254985C38;
}

void sub_20C14484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  operator delete(v20);
  __cxa_guard_abort(&qword_254985C40);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254985C50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985C50))
  {
    v3 = operator new(0x60uLL);
    v3[4] = 0u;
    v3[5] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    *v3 = 0u;
    v3[1] = 0u;
    qword_254985C48 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985C50);
  }
  return qword_254985C48;
}

void sub_20C144908(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985C50);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::WeakerRef(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254985C60);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985C60))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *)operator new(0x60uLL);
    v4 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference::Weaker(v3);
    sub_20C1449B4(v4, (char **)v3);
    qword_254985C58 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985C60);
  }
  return qword_254985C58;
}

void sub_20C14498C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985C60);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1449B4@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  int v5;
  int v6;
  __int128 __p;
  uint64_t v8;

  sub_20BFD6E54(&v5, (_DWORD *)a1);
  sub_20BFD6EA4(&v6, (_DWORD *)(a1 + 4));
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v5, a2);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C144A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  _DWORD *v9;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
  sub_20BFD265C(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v4;
  uint64_t v5;
  const std::string *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v25 = a1;
  v26 = a1 + 24;
  v27 = a1 + 48;
  v28 = a1 + 72;
  v21 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)a1);
  v22 = v21 + 24;
  v23 = v21 + 48;
  v24 = v21 + 72;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v29, (uint64_t)&v25, (uint64_t)&v21);
  if ((_DWORD)v4)
  {
    v5 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v4);
    v6 = (const std::string *)v5;
    if (v5 != a2)
      goto LABEL_6;
    goto LABEL_7;
  }
  v7 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v4);
  v25 = a1;
  v26 = a1 + 24;
  v27 = a1 + 48;
  v28 = a1 + 72;
  v21 = v7;
  v22 = v7 + 24;
  v23 = v7 + 48;
  v24 = v7 + 72;
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v29, (uint64_t)&v25, (uint64_t)&v21);
  if ((_DWORD)v8)
  {
    v5 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v8);
    v6 = (const std::string *)v5;
    if (v5 != a2)
    {
LABEL_6:
      sub_20BE8B37C((char *)a2, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      sub_20C147074(a2 + 24, (uint64_t)v6[1].__r_.__value_.__l.__data_, v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 5);
      sub_20C14723C(a2 + 48, (uint64_t)v6[2].__r_.__value_.__l.__data_, v6[2].__r_.__value_.__l.__size_, (uint64_t)(v6[2].__r_.__value_.__l.__size_ - v6[2].__r_.__value_.__r.__words[0]) >> 6);
    }
LABEL_7:
    std::string::operator=((std::string *)(a2 + 72), v6 + 3);
    return;
  }
  sub_20C14D5BC(a2, (__n128 *)a1);
  sub_20C00BC18((void **)(a2 + 24));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20C00BCC0((void **)(a2 + 48));
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v10 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_DWORD **)a2;
    v13 = ((uint64_t)v10 - *(_QWORD *)a2) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      sub_20BDDF694();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)sub_20BDE1330(a2 + 16, v16);
      v12 = *(_DWORD **)a2;
      v10 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = 0;
    v11 = v18 + 4;
    while (v10 != v12)
    {
      v20 = *--v10;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v10 = 0;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a2 + 8) = v11;
}

void sub_20C144CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00BBB0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(pxrInternal__aapl__pxrReserved__::SdfPathExpression *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char **v5;
  int v6;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v17;
  void **v18;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v19;
  void **v20;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v21;
  void **v22;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v23;
  unint64_t v24;
  int *v25;
  _DWORD *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  char *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  _QWORD *v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  void **v45;
  void **v46;
  void **v47;
  void **v48;
  char v49;

  v5 = (char **)a2;
  v6 = (int)a1;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if ((_DWORD)a1 == 4)
  {
    __p[0] = a2;
    __p[1] = a2 + 3;
    v39 = a2 + 6;
    *(_QWORD *)&v40 = a2 + 9;
    v45 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(a1);
    v46 = v45 + 3;
    v47 = v45 + 6;
    v48 = v45 + 9;
    v8 = sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if ((v8 & 1) != 0)
      goto LABEL_6;
    v9 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v8);
    __p[0] = (void *)a3;
    __p[1] = (void *)(a3 + 24);
    v39 = (_QWORD *)(a3 + 48);
    *(_QWORD *)&v40 = a3 + 72;
    v45 = v9;
    v46 = v9 + 3;
    v47 = v9 + 6;
    v48 = v9 + 9;
    v10 = sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if ((v10 & 1) != 0)
      goto LABEL_6;
    v11 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v10);
    __p[0] = v5;
    __p[1] = v5 + 3;
    v39 = v5 + 6;
    *(_QWORD *)&v40 = v5 + 9;
    v45 = v11;
    v46 = v11 + 3;
    v47 = v11 + 6;
    v48 = v11 + 9;
    v12 = sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if ((v12 & 1) != 0)
      goto LABEL_6;
    v13 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v12);
    __p[0] = (void *)a3;
    __p[1] = (void *)(a3 + 24);
    v39 = (_QWORD *)(a3 + 48);
    *(_QWORD *)&v40 = a3 + 72;
    v45 = v13;
    v46 = v13 + 3;
    v47 = v13 + 6;
    v48 = v13 + 9;
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if ((_DWORD)a1)
    {
LABEL_6:
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(a3, (uint64_t)__p);
      v14 = *(void **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)(a3 + 8) = v14;
        operator delete(v14);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
      }
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 16) = v39;
      __p[1] = 0;
      v39 = 0;
      __p[0] = 0;
      sub_20C00BC18((void **)(a3 + 24));
      *(_OWORD *)(a3 + 24) = v40;
      *(_QWORD *)(a3 + 40) = v41;
      v41 = 0;
      v40 = 0uLL;
      sub_20C00BCC0((void **)(a3 + 48));
      *(_OWORD *)(a3 + 48) = v42;
      *(_QWORD *)(a3 + 64) = v43;
      v43 = 0;
      v42 = 0uLL;
      v15 = (void **)(a3 + 72);
      if (*(char *)(a3 + 95) < 0)
        operator delete(*v15);
      *(_OWORD *)v15 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      *(_QWORD *)(a3 + 88) = *((_QWORD *)&v44.__r_.__value_.__l + 2);
      *((_BYTE *)&v44.__r_.__value_.__s + 23) = 0;
      v44.__r_.__value_.__s.__data_[0] = 0;
      v45 = (void **)&v42;
      sub_20C00E25C(&v45);
      v45 = (void **)&v40;
      sub_20C00D5A8(&v45);
      a1 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)__p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v6 = 3;
    }
    else
    {
      v6 = 4;
    }
  }
  v16 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(a1);
  __p[0] = v5;
  __p[1] = v5 + 3;
  v39 = v5 + 6;
  *(_QWORD *)&v40 = v5 + 9;
  v45 = v16;
  v46 = v16 + 3;
  v47 = v16 + 6;
  v48 = v16 + 9;
  v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if ((_DWORD)v17)
  {
    if (v6 == 3)
      a3 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v17);
    sub_20C00D1F0(__p, a3);
    if (__p != (void **)a4)
    {
      sub_20BE8B37C((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_20C147074(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 5);
      sub_20C14723C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 6);
    }
LABEL_36:
    std::string::operator=((std::string *)(a4 + 72), &v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v45 = (void **)&v42;
    sub_20C00E25C(&v45);
    v45 = (void **)&v40;
    sub_20C00D5A8(&v45);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return;
  }
  v18 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v17);
  __p[0] = (void *)a3;
  __p[1] = (void *)(a3 + 24);
  v39 = (_QWORD *)(a3 + 48);
  *(_QWORD *)&v40 = a3 + 72;
  v45 = v18;
  v46 = v18 + 3;
  v47 = v18 + 6;
  v48 = v18 + 9;
  v19 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if ((_DWORD)v19)
  {
    if (v6 == 3)
      v5 = (char **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v19);
    sub_20C00D1F0(__p, (uint64_t)v5);
    if (__p != (void **)a4)
    {
      sub_20BE8B37C((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_20C147074(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 5);
      sub_20C14723C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 6);
    }
    goto LABEL_36;
  }
  v20 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v19);
  __p[0] = v5;
  __p[1] = v5 + 3;
  v39 = v5 + 6;
  *(_QWORD *)&v40 = v5 + 9;
  v45 = v20;
  v46 = v20 + 3;
  v47 = v20 + 6;
  v48 = v20 + 9;
  v21 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if ((_DWORD)v21)
  {
    if (v6 != 3)
      a3 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v21);
    sub_20C00D1F0(__p, a3);
    if (__p != (void **)a4)
    {
      sub_20BE8B37C((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_20C147074(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 5);
      sub_20C14723C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 6);
    }
    goto LABEL_36;
  }
  v22 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v21);
  __p[0] = (void *)a3;
  __p[1] = (void *)(a3 + 24);
  v39 = (_QWORD *)(a3 + 48);
  *(_QWORD *)&v40 = a3 + 72;
  v45 = v22;
  v46 = v22 + 3;
  v47 = v22 + 6;
  v48 = v22 + 9;
  v23 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00C814((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if ((_DWORD)v23)
  {
    if (v6 != 3)
      v5 = (char **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v23);
    sub_20C00D1F0(__p, (uint64_t)v5);
    if (__p != (void **)a4)
    {
      sub_20BE8B37C((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_20C147074(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 5);
      sub_20C14723C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 6);
    }
    goto LABEL_36;
  }
  sub_20C14D5BC(a4, (__n128 *)a3);
  sub_20BE857FC((void **)a4, ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2) + ((v5[1] - *v5) >> 2) + 1);
  sub_20C125B2C(a4, *(_QWORD *)(a4 + 8), *v5, v5[1], (v5[1] - *v5) >> 2);
  v24 = *(_QWORD *)(a4 + 16);
  v25 = *(int **)(a4 + 8);
  if ((unint64_t)v25 >= v24)
  {
    v27 = *(int **)a4;
    v28 = ((uint64_t)v25 - *(_QWORD *)a4) >> 2;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62)
      sub_20BDDF694();
    v30 = v24 - (_QWORD)v27;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)sub_20BDE1330(a4 + 16, v31);
      v27 = *(int **)a4;
      v25 = *(int **)(a4 + 8);
    }
    else
    {
      v32 = 0;
    }
    v33 = (int *)&v32[4 * v28];
    v34 = &v32[4 * v31];
    *v33 = v6;
    v26 = v33 + 1;
    while (v25 != v27)
    {
      v35 = *--v25;
      *--v33 = v35;
    }
    *(_QWORD *)a4 = v33;
    *(_QWORD *)(a4 + 8) = v26;
    *(_QWORD *)(a4 + 16) = v34;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v25 = v6;
    v26 = v25 + 1;
  }
  *(_QWORD *)(a4 + 8) = v26;
  sub_20C00BC18((void **)(a4 + 24));
  *(_QWORD *)(a4 + 24) = v5[3];
  v36 = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a4 + 32) = v36;
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = 0;
  sub_20C14F3F4((uint64_t *)(a4 + 24), v36, *(int **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 5);
  sub_20C00BCC0((void **)(a4 + 48));
  *(_QWORD *)(a4 + 48) = v5[6];
  v37 = *(_OWORD *)(v5 + 7);
  *(_OWORD *)(a4 + 56) = v37;
  v5[7] = 0;
  v5[8] = 0;
  v5[6] = 0;
  sub_20C14FB3C((uint64_t *)(a4 + 48), v37, *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), (uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 6);
}

void sub_20C1453D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00BBB0(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  unint64_t v11;
  __int128 v12;
  uint64_t result;

  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  v4 = (char *)sub_20BDE1330((uint64_t)(a2 + 2), 1uLL);
  v5 = *a2;
  v6 = a2[1];
  v8 = &v4[4 * v7];
  *(_DWORD *)v4 = 5;
  v9 = v4 + 4;
  while (v6 != v5)
  {
    v10 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *((_DWORD *)v4 - 1) = v10;
    v4 -= 4;
  }
  *a2 = v4;
  a2[1] = v9;
  a2[2] = v8;
  if (v5)
    operator delete(v5);
  a2[1] = v9;
  v11 = (unint64_t)a2[4];
  if (v11 >= (unint64_t)a2[5])
  {
    result = sub_20C150268((uint64_t *)a2 + 3, a1);
  }
  else
  {
    sub_20BFD38A4(a2[4], (_DWORD *)a1);
    sub_20BFD38DC((_DWORD *)(v11 + 4), (_DWORD *)(a1 + 4));
    v12 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(v11 + 8) = v12;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    result = v11 + 32;
  }
  a2[4] = (char *)result;
  return result;
}

void sub_20C1454FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00BBB0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;

  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  v4 = (char *)sub_20BDE1330((uint64_t)(a2 + 2), 1uLL);
  v5 = *a2;
  v6 = a2[1];
  v8 = &v4[4 * v7];
  *(_DWORD *)v4 = 6;
  v9 = v4 + 4;
  while (v6 != v5)
  {
    v10 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *((_DWORD *)v4 - 1) = v10;
    v4 -= 4;
  }
  *a2 = v4;
  a2[1] = v9;
  a2[2] = v8;
  if (v5)
    operator delete(v5);
  a2[1] = v9;
  sub_20C1455C0((uint64_t *)a2 + 6, a1);
}

void sub_20C1455A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00BBB0(v1);
  _Unwind_Resume(a1);
}

void sub_20C1455C0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v8 = (uint64_t)(v6 - *a1) >> 6;
    if ((unint64_t)(v8 + 1) >> 58)
      sub_20BDDF694();
    v9 = v4 - *a1;
    v10 = v9 >> 5;
    if (v9 >> 5 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v17 = a1 + 2;
    if (v11)
      v12 = (char *)sub_20C00D6F0((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = v12;
    v14 = &v12[64 * v8];
    v16 = &v12[64 * v11];
    sub_20C14FEC4(v5, (uint64_t)v14, a2);
    v15 = v14 + 64;
    sub_20C1503E0(a1, &v13);
    v7 = a1[1];
    sub_20C1501F4(&v13);
  }
  else
  {
    sub_20C14FEC4((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 64;
    a1[1] = v6 + 64;
  }
  a1[1] = v7;
}

void sub_20C1456BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1501F4((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, char **), uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;

  v7 = a1[1];
  if (*a1 != v7)
  {
    v13 = a1[3];
    v14 = a1[6];
    v31 = *(unsigned int *)(v7 - 4);
    sub_20C150454(&v32, 1uLL, &v31);
    v15 = v32;
    if (v32 == v33)
    {
      if (!v32)
        return;
    }
    else
    {
      v15 = v33;
      do
      {
        v16 = *((_DWORD *)v15 - 2);
        if (v16 == 6)
        {
          a7(a6, v14);
          v17 = 0;
          v14 += 64;
        }
        else if (v16 == 5)
        {
          a5(a4, v13);
          v17 = 0;
          v13 += 32;
        }
        else
        {
          a3(a2, &v32);
          ++*((_DWORD *)v15 - 1);
          if (v16)
            v17 = 3;
          else
            v17 = 2;
        }
        if (*((_DWORD *)v15 - 1) == v17)
        {
          v15 = v33 - 8;
        }
        else
        {
          v18 = v33;
          if (v33 >= v34)
          {
            v19 = (v33 - v32) >> 3;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61)
              sub_20BDDF694();
            v21 = v34 - v32;
            if ((v34 - v32) >> 2 > v20)
              v20 = v21 >> 2;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            v23 = (char *)sub_20BDDF6A8((uint64_t)&v34, v22);
            v25 = &v23[8 * v19];
            *(_DWORD *)v25 = *(_DWORD *)(v7 - 8);
            *((_DWORD *)v25 + 1) = 0;
            v27 = v32;
            v26 = v33;
            v28 = v25;
            if (v33 != v32)
            {
              do
              {
                v29 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *((_QWORD *)v28 - 1) = v29;
                v28 -= 8;
              }
              while (v26 != v27);
              v26 = v32;
            }
            v15 = v25 + 8;
            v32 = v28;
            v33 = v25 + 8;
            v34 = &v23[8 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_QWORD *)v33 = *(unsigned int *)(v7 - 8);
            v15 = v18 + 8;
          }
          v7 -= 4;
        }
        v33 = v15;
      }
      while (v32 != v15);
    }
    v33 = v15;
    operator delete(v15);
  }
}

void sub_20C1458D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  _QWORD *v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7 = v8;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(a1, (uint64_t)&v7, (void (*)(uint64_t, char **))sub_20C147E20, a4, a5, a6, a7);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfPathExpression::ReplacePrefix@<Q0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  _QWORD *i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  int *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  int64x2_t *v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  int64x2_t v15;
  __n128 result;
  uint64_t v17;

  v8 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 24);
  v10 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 32);
  for (i = (_QWORD *)(a3 + 24); v8 != v10; v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 7))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v17, v8, a1, a2, 1);
    sub_20BFD3EBC((int *)v8, (int *)&v17);
    v11 = (int *)((char *)v8 + 4);
    sub_20BFD3F10(v11, (int *)&v17 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 48);
  v14 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 56);
  v13 = (int64x2_t *)(a3 + 48);
  if (v12 == v14)
  {
    v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v17, v12, a1, a2, 1);
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix((uint64_t)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
      sub_20BFD265C(&v17);
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 64);
    }
    while (v12 != v14);
    v15 = *v13;
  }
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 40);
  i[1] = 0;
  i[2] = 0;
  *i = 0;
  *(int64x2_t *)(a4 + 48) = v15;
  *(_QWORD *)(a4 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v13->i64[0] = 0;
  result = *(__n128 *)(a3 + 72);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a3 + 88);
  *(__n128 *)(a4 + 72) = result;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  return result;
}

void sub_20C145AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL IsAbsoluteRootOrPrimPath;
  char *v7;
  void **v8;
  char *v9;
  void **v10;
  void *__p[2];
  char v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  IsAbsoluteRootOrPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this);
  if (v4 == v5)
  {
    if (!IsAbsoluteRootOrPrimPath && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) == 0)
    {
      v13 = "sdf/pathExpression.cpp";
      v14 = "SetPrefix";
      v15 = 564;
      v16 = "void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(SdfPath &&)";
      v17 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
      if (v12 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Path pattern prefixes must be prim paths or prim-property paths: <%s> -- ignoring.", v9, v10);
      goto LABEL_15;
    }
  }
  else if (!IsAbsoluteRootOrPrimPath)
  {
    v13 = "sdf/pathExpression.cpp";
    v14 = "SetPrefix";
    v15 = 557;
    v16 = "void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(SdfPath &&)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Path patterns with match components require prim paths or the absolute root path ('/') as a prefix: <%s> -- ignoring.", v7, v8);
LABEL_15:
    if (v12 < 0)
      operator delete(__p[0]);
    return;
  }
  sub_20BFD3EBC((int *)a1, (int *)this);
  sub_20BFD3F10((int *)(a1 + 4), (int *)this + 1);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    *(_BYTE *)(a1 + 56) = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
}

void sub_20C145C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)this + 3);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)this + 4);
  while (v2 != v3)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v2))
    {
      result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v2);
      if (!result)
        return result;
    }
    v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 32);
  }
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)this + 6);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)this + 7);
  if (v6 == v5)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v6);
    if (!result)
      break;
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 64);
  }
  while (v6 != v5);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAbsolute@<Q0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD *i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  int *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  int64x2_t *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  int64x2_t v13;
  __n128 result;
  int v15;
  int v16;

  v6 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 24);
  v8 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 32);
  for (i = (_QWORD *)(a2 + 24); v6 != v8; v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 7))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v6, a1, &v15);
    sub_20BFD3EBC((int *)v6, &v15);
    v9 = (int *)((char *)v6 + 4);
    sub_20BFD3F10(v9, &v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_20BFD265C(&v15);
  }
  v10 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 48);
  v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 56);
  v11 = (int64x2_t *)(a2 + 48);
  if (v10 == v12)
  {
    v13 = vdupq_n_s64((unint64_t)v10);
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v10, a1, &v15);
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix((uint64_t)v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      sub_20BFD265C(&v15);
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 64);
    }
    while (v10 != v12);
    v13 = *v11;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a2 + 40);
  i[1] = 0;
  i[2] = 0;
  *i = 0;
  *(int64x2_t *)(a3 + 48) = v13;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11->i64[0] = 0;
  result = *(__n128 *)(a2 + 72);
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(a2 + 88);
  *(__n128 *)(a3 + 72) = result;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void sub_20C145E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::ContainsWeakerExpressionReference(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  uint64_t i;
  _QWORD *v2;
  int v3;

  for (i = *((_QWORD *)this + 3); ; i += 32)
  {
    if (i == *((_QWORD *)this + 4))
      return 0;
    v2 = (_QWORD *)(i + 8);
    v3 = *(char *)(i + 31);
    if (v3 < 0)
      break;
    if (v3 == 1)
      goto LABEL_8;
LABEL_9:
    ;
  }
  if (*(_QWORD *)(i + 16) != 1)
    goto LABEL_9;
  v2 = (_QWORD *)*v2;
LABEL_8:
  if (*(_BYTE *)v2 != 95)
    goto LABEL_9;
  return 1;
}

double pxrInternal__aapl__pxrReserved__::SdfPathExpression::ResolveReferences@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  double result;
  uint64_t *v8;
  _QWORD v9[2];
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  void ***v15;
  void **v16[2];

  v14[0] = a2;
  v14[1] = a3;
  if (*a1 == a1[1])
  {
    result = 0.0;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v8 = &v11;
    v9[0] = &v11;
    v9[1] = v14;
    v10 = &v11;
    v16[0] = (void **)&v10;
    v16[1] = (void **)sub_20C147E34;
    v15 = v16;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(a1, (uint64_t)&v15, (void (*)(uint64_t, char **))sub_20C147E20, (uint64_t)v9, (void (*)(uint64_t, uint64_t))sub_20C1481D0, (uint64_t)&v8, (void (*)(uint64_t, uint64_t))sub_20C14869C);
    v5 = v12;
    *(_OWORD *)a4 = *(_OWORD *)(v12 - 96);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v5 - 80);
    *(_QWORD *)(v5 - 96) = 0;
    *(_QWORD *)(v5 - 88) = 0;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 - 72);
    *(_QWORD *)(a4 + 40) = *(_QWORD *)(v5 - 56);
    *(_QWORD *)(v5 - 80) = 0;
    *(_QWORD *)(v5 - 72) = 0;
    *(_QWORD *)(v5 - 64) = 0;
    *(_QWORD *)(v5 - 56) = 0;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v5 - 48);
    *(_QWORD *)(a4 + 64) = *(_QWORD *)(v5 - 32);
    *(_QWORD *)(v5 - 48) = 0;
    *(_QWORD *)(v5 - 40) = 0;
    v6 = *(_OWORD *)(v5 - 24);
    *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 - 8);
    *(_OWORD *)(a4 + 72) = v6;
    *(_QWORD *)(v5 - 32) = 0;
    *(_QWORD *)(v5 - 24) = 0;
    *(_QWORD *)(v5 - 16) = 0;
    *(_QWORD *)(v5 - 8) = 0;
    v16[0] = (void **)&v11;
    sub_20C1504D4(v16);
  }
  return result;
}

void sub_20C145F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1504D4((void ***)va);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfPathExpression::ComposeOver@<Q0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  const std::string *v7;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    if ((const std::string *)a1 != a2)
    {
      sub_20BE8B37C((char *)a1, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_, (uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 2);
      sub_20C147074(a1 + 24, (uint64_t)a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 5);
      sub_20C14723C(a1 + 48, (uint64_t)a2[2].__r_.__value_.__l.__data_, a2[2].__r_.__value_.__l.__size_, (uint64_t)(a2[2].__r_.__value_.__l.__size_ - a2[2].__r_.__value_.__r.__words[0]) >> 6);
    }
    std::string::operator=((std::string *)(a1 + 72), a2 + 3);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a3 + 40) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    result = *(__n128 *)(a1 + 72);
    *(_QWORD *)(a3 + 88) = *(_QWORD *)(a1 + 88);
    *(__n128 *)(a3 + 72) = result;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    v7 = a2;
    result.n128_f64[0] = pxrInternal__aapl__pxrReserved__::SdfPathExpression::ResolveReferences((_QWORD *)a1, (uint64_t)&v7, (uint64_t)sub_20C14884C, a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText(uint64_t *__return_ptr a1@<X8>, pxrInternal__aapl__pxrReserved__::SdfPathExpression *this@<X0>)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD v4[3];
  void *__p;
  void *v6;
  uint64_t v7;
  char v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    v4[0] = &v8;
    v4[1] = &__p;
    v4[2] = a1;
    v2 = a1;
    v3 = a1;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(this, (uint64_t)v4, (void (*)(uint64_t, char **))sub_20C148894, (uint64_t)&v3, (void (*)(uint64_t, uint64_t))sub_20C148A10, (uint64_t)&v2, (void (*)(uint64_t, uint64_t))sub_20C148B8C);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C146144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::PathPattern(pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(this);
  sub_20BFD6E54(this, v2);
  sub_20BFD6EA4((_DWORD *)this + 1, v2 + 1);
  *((_BYTE *)this + 56) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(uint64_t a1, uint64_t a2)
{
  void *v2[2];
  _OWORD v3[2];
  void *__p[2];
  uint64_t v5;
  void **v6;

  v5 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v2 = 0u;
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a1, a2, (uint64_t)v2);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  v6 = (void **)v3 + 1;
  sub_20C00BE5C(&v6);
  if (v2[0])
  {
    v2[1] = v2[0];
    operator delete(v2[0]);
  }
}

void sub_20C146234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C14652C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  std::string *v6;
  void *v7;
  char IsValidIdentifier;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  _WORD *v13;
  unint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  std::string v19;
  void *__p[2];
  uint64_t v21;
  const char *v22;
  char v23;

  v3 = a2;
  if (*(_BYTE *)(a1 + 56))
  {
    __p[0] = "sdf/pathExpression.cpp";
    __p[1] = "AppendChild";
    v21 = 498;
    v22 = "void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(const std::string &, SdfPre"
          "dicateExpression &&)";
    v23 = 0;
    if (*(char *)(a2 + 23) < 0)
      v3 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::GetText((pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *)a1, &v19);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v19;
    else
      v6 = (std::string *)v19.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Cannot append child '%s' to property path expression '%s'", v5, v3, v6);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = (void *)v19.__r_.__value_.__r.__words[0];
LABEL_33:
      operator delete(v7);
      return;
    }
    return;
  }
  IsValidIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(a2);
  if ((IsValidIdentifier & 1) != 0)
    goto LABEL_10;
  v12 = *(char *)(v3 + 23);
  if (v12 < 0)
  {
    if (*(_QWORD *)(v3 + 8) != 2)
      goto LABEL_22;
    v13 = *(_WORD **)v3;
  }
  else
  {
    v13 = (_WORD *)v3;
    if (v12 != 2)
      goto LABEL_22;
  }
  if (*v13 == 11822)
  {
LABEL_10:
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8) && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v19);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19, __p);
      sub_20BFD3EBC((int *)a1, (int *)__p);
      sub_20BFD3F10((int *)(a1 + 4), (int *)__p + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if ((v19.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v10 = (unsigned int *)(v19.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      return;
    }
  }
LABEL_22:
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
    v15 = -1;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 40);
    v15 = 954437177 * ((v14 - *(_QWORD *)(a1 + 32)) >> 3);
    if (v14 >= *(_QWORD *)(a1 + 48))
    {
      v17 = sub_20C14F04C((uint64_t *)(a1 + 32), a3);
    }
    else
    {
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v14 + 40) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v16 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(v14 + 64) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)(v14 + 48) = v16;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v17 = v14 + 72;
    }
    *(_QWORD *)(a1 + 40) = v17;
  }
  v18 = (uint64_t *)(a1 + 8);
  if (*(char *)(v3 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v21 = *(_QWORD *)(v3 + 16);
  }
  LODWORD(v22) = v15;
  BYTE4(v22) = IsValidIdentifier;
  sub_20C146954(v18, (__int128 *)__p);
  if (SHIBYTE(v21) < 0)
  {
    v7 = __p[0];
    goto LABEL_33;
  }
}

{
  void *v5[3];
  uint64_t v6;
  void *__p;
  char v8;
  void **v9;

  sub_20C00DB88(v5, a3);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a1, a2, (uint64_t)v5);
  if (v8 < 0)
    operator delete(__p);
  v9 = (void **)&v6;
  sub_20C00BE5C(&v9);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_20C1464D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  unsigned int *v23;
  unsigned int v24;

  if ((a12 & 7) != 0)
  {
    v23 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C14652C(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v4 = (void **)(a1 + 24);
  sub_20C00BE5C(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C1465FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C14652C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::GetText(pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *this@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *AsString;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  std::string *v14;
  std::string::value_type v15;
  unsigned __int8 *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  const std::string::value_type *v20;
  const std::string::value_type *v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  const std::string::value_type *v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  void *__p[2];
  int64_t v38;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  AsString = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(this);
  if (*(_QWORD *)this == *(_QWORD *)AsString)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5 != *((_QWORD *)this + 2))
    {
      if (*(_DWORD *)(v5 + 24) != -1)
        goto LABEL_12;
      if (*(char *)(v5 + 23) < 0)
      {
        if (*(_QWORD *)(v5 + 8))
          goto LABEL_12;
      }
      else if (*(_BYTE *)(v5 + 23))
      {
        goto LABEL_12;
      }
    }
    AsString = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x212B929D0](a2, ".");
  }
  else
  {
    AsString = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a2->__r_.__value_.__l.__data_);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v38;
  }
LABEL_12:
  v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(AsString);
  v7 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = 0;
    v9 = v7 >> 5;
    v10 = (v7 >> 5) - 1;
    v11 = 23;
    v33 = *v6;
    v34 = *(_QWORD *)this;
    while (1)
    {
      v12 = *((_QWORD *)this + 1);
      if (*(char *)(v12 + v11) < 0)
      {
        if (*(_QWORD *)(v12 + v11 - 15))
          break;
      }
      else if (*(_BYTE *)(v12 + v11))
      {
        break;
      }
      if (*(_DWORD *)(v12 + v11 + 1) != -1)
        break;
      if (v34 == v33 && v8 == 0)
        v32 = "/";
      else
        v32 = "//";
      std::string::append(a2, v32);
LABEL_56:
      ++v8;
      v11 += 32;
      if (v9 == v8)
        return;
    }
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      size = a2->__r_.__value_.__l.__size_;
      if (size)
      {
        v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_24:
        if (v14->__r_.__value_.__s.__data_[size - 1] != 47)
        {
          if (v10 == v8 && *((_BYTE *)this + 56))
            v15 = 46;
          else
            v15 = 47;
          std::string::push_back(a2, v15);
        }
      }
    }
    else
    {
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
      {
        v14 = a2;
        goto LABEL_24;
      }
    }
    v16 = (unsigned __int8 *)(*((_QWORD *)this + 1) + v11);
    v17 = *v16;
    v18 = *(_QWORD *)(v16 - 15);
    v21 = *(const std::string::value_type **)(v16 - 23);
    v19 = (const std::string::value_type *)(v16 - 23);
    v20 = v21;
    if ((v17 & 0x80u) == 0)
      v22 = v19;
    else
      v22 = v20;
    if ((v17 & 0x80u) == 0)
      v23 = v17;
    else
      v23 = v18;
    std::string::append(a2, v22, v23);
    v24 = *(_DWORD *)(*((_QWORD *)this + 1) + v11 + 1);
    if (v24 != -1)
    {
      pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::GetText((pxrInternal__aapl__pxrReserved__::SdfPredicateExpression *)(*((_QWORD *)this + 4) + 72 * v24), &v35);
      v25 = std::string::insert(&v35, 0, "{");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v36, "}");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v38 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (v38 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if (v38 >= 0)
        v30 = HIBYTE(v38);
      else
        v30 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v29, v30);
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
    }
    goto LABEL_56;
  }
}

void sub_20C1468E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 + 23) < 0)
    operator delete(*(void **)v30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C146954(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = (uint64_t)(v7 - *a1) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      sub_20BDDF694();
    v13 = v5 - *a1;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_20BED2F10(result, v14);
    else
      v15 = 0;
    v16 = &v15[32 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[32 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *((_DWORD *)a2 + 6);
    v16[28] = *((_BYTE *)a2 + 28);
    *((_DWORD *)v16 + 6) = v18;
    v19[2] = v16 + 32;
    sub_20C150558(a1, v19);
    v10 = a1[1];
    result = sub_20BED3064((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(v7 + 28) = *((_BYTE *)a2 + 28);
    *(_DWORD *)(v7 + 24) = v9;
    v10 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v10;
  return result;
}

void sub_20C146A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED3064((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(uint64_t a1, size_t *a2)
{
  void *v2[2];
  _OWORD v3[2];
  void *__p[2];
  uint64_t v5;
  void **v6;

  v5 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v2 = 0u;
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(a1, a2, (uint64_t)v2);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  v6 = (void **)v3 + 1;
  sub_20C00BE5C(&v6);
  if (v2[0])
  {
    v2[1] = v2[0];
    operator delete(v2[0]);
  }
}

void sub_20C146AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C14652C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(uint64_t a1, size_t *__s, uint64_t a3)
{
  int IsValidNamespacedIdentifier;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  void *__p[2];
  size_t v17;
  int v18;
  char v19;
  uint64_t v20;

  IsValidNamespacedIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier(__s);
  v7 = IsValidNamespacedIdentifier;
  v8 = *(_QWORD *)a3;
  v9 = *(_QWORD *)(a3 + 8);
  if (IsValidNamespacedIdentifier && v8 == v9)
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v20);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, (int *)__p);
      sub_20BFD3EBC((int *)a1, (int *)__p);
      sub_20BFD3F10((int *)(a1 + 4), (int *)__p + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if ((v20 & 7) != 0)
      {
        v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  if (v8 == v9)
  {
LABEL_11:
    v13 = -1;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 40);
  v13 = 954437177 * ((v12 - *(_QWORD *)(a1 + 32)) >> 3);
  if (v12 >= *(_QWORD *)(a1 + 48))
  {
    v15 = sub_20C14F04C((uint64_t *)(a1 + 32), a3);
  }
  else
  {
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_OWORD *)v12 = *(_OWORD *)a3;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(v12 + 40) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v14 = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(a3 + 64);
    *(_OWORD *)(v12 + 48) = v14;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    v15 = v12 + 72;
  }
  *(_QWORD *)(a1 + 40) = v15;
LABEL_14:
  if (*((char *)__s + 23) < 0)
  {
    sub_20BDDBFAC(__p, (void *)*__s, __s[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__s;
    v17 = __s[2];
  }
  v18 = v13;
  v19 = v7;
  sub_20C146954((uint64_t *)(a1 + 8), (__int128 *)__p);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
LABEL_19:
  *(_BYTE *)(a1 + 56) = 1;
}

void sub_20C146CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int *v17;
  unsigned int v18;

  if ((a17 & 7) != 0)
  {
    v17 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(uint64_t a1, size_t *a2, uint64_t a3)
{
  void *v5[3];
  uint64_t v6;
  void *__p;
  char v8;
  void **v9;

  sub_20C00DB88(v5, a3);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(a1, a2, (uint64_t)v5);
  if (v8 < 0)
    operator delete(__p);
  v9 = (void **)&v6;
  sub_20C00BE5C(&v9);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_20C146D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C14652C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)__p, this);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C146E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C146E38()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DD8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524DD8, (char *)0x60, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C146EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C146F38()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DE8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524DE8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C146FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C147038(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C147074(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_20C00BC18((void **)a1);
    if (a4 >> 59)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BF25370((_QWORD *)a1, v12);
    result = sub_20C00D3EC(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    sub_20C1471C4((uint64_t)&v19, a2, v15, (uint64_t)v9);
    result = sub_20C00D3EC(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C1471C4((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      result = (uint64_t)sub_20C00BC84(v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_20C1471B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C1471BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C1471C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C01A074((int *)a4, (_DWORD *)v5);
    sub_20C01A0C8((int *)(a4 + 4), (_DWORD *)(v5 + 4));
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v5 + 8));
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C14723C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    sub_20C00BCC0((void **)a1);
    if (a4 >> 58)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20C00D6B0((_QWORD *)a1, v12);
    result = sub_20C00D724(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = a2 + (v14 << 6);
    sub_20C1473E4((uint64_t)&v19, a2, v15, (uint64_t)v9);
    result = sub_20C00D724(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C1473E4((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 64;
      result = (uint64_t)sub_20C00BD2C(v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_20C14737C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C147384(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20C14738C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_20C00BD84(&v3);
  v3 = (void **)(a1 + 8);
  sub_20BED2E10(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C1473E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C01A074((int *)a4, (_DWORD *)v5);
    sub_20C01A0C8((int *)(a4 + 4), (_DWORD *)(v5 + 4));
    if (a4 != v5)
    {
      sub_20C14749C(a4 + 8, *(std::string **)(v5 + 8), *(__int128 **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 5);
      sub_20C147650(a4 + 32, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v5 + 40) - *(_QWORD *)(v5 + 32)) >> 3));
    }
    *(_BYTE *)(a4 + 56) = *(_BYTE *)(v5 + 56);
    a4 += 64;
    v5 += 64;
  }
  while (v5 != v6);
  return v6;
}

void sub_20C14749C(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_20BFD3E84((uint64_t *)a1);
    if (a4 >> 59)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BF25370((_QWORD *)a1, v12);
    v13 = sub_20C00D91C(v8, (__int128 *)__str, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    sub_20C1475E0(__str, v15, v9);
    v13 = sub_20C00D91C(v8, (__int128 *)v15, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  sub_20C1475E0(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20C1475D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C1475D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_20C1475E0(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;
  std::string::value_type v6;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    v6 = v4[1].__r_.__value_.__s.__data_[4];
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__s.__data_[4] = v6;
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

void sub_20C147650(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20C1477E0((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    sub_20BED5B44((_QWORD *)a1, v11);
    v12 = sub_20C00DAE8(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_20C14784C(a2, v13, v9);
    v12 = sub_20C00DAE8(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C14784C(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      sub_20C00BE08(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C1477D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C1477D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C1477E0(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        sub_20C00BE08((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C14784C(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C1478A8(a3, v4);
      v4 += 72;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *sub_20C1478A8(std::string *a1, uint64_t a2)
{
  if (a1 != (std::string *)a2)
  {
    sub_20BE8B37C((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    sub_20C14791C((uint64_t)&a1[1], *(__int128 ***)(a2 + 24), *(__int128 ***)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  }
  std::string::operator=(a1 + 2, (const std::string *)(a2 + 48));
  return a1;
}

void sub_20C14791C(uint64_t a1, __int128 **a2, __int128 **a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20C147ABC((void **)a1);
    if (a4 > 0x492492492492492)
      sub_20BDDF694();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    sub_20BE1B554((_QWORD *)a1, v11);
    v12 = sub_20C00DD64(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_20C147B28((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = sub_20C00DD64(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C147B28((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_20C00BEE0(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C147AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C147AB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C147ABC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_20C00BEE0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__int128 **sub_20C147B28(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4)
{
  __int128 **v5;
  __int128 **v6;
  __int128 **v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 5;
  do
  {
    v7 = v6 - 5;
    *(_DWORD *)a4 = *((_DWORD *)v6 - 10);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 4));
    if ((__int128 **)a4 != v6 - 5)
      sub_20C147BC8(a4 + 32, (std::string *)*(v6 - 1), *v6, 0xCCCCCCCCCCCCCCCDLL * (((char *)*v6 - (char *)*(v6 - 1)) >> 3));
    a4 += 56;
    v6 += 7;
  }
  while (v7 + 7 != v5);
  return v5;
}

void sub_20C147BC8(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20C147D48((void **)a1);
    if (a4 > 0x666666666666666)
      sub_20BDDF694();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    sub_20BED4B34((_QWORD *)a1, v11);
    v12 = sub_20C00DF34(v8, (__int128 *)__str, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_20C147DB4((int)&v17, __str, v13, v9);
    v12 = sub_20C00DF34(v8, (__int128 *)v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C147DB4((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 40;
      sub_20C00BFA8(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C147D38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C147D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C147D48(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 40;
        sub_20C00BFA8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_20C147DB4(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_20BF4A9BC(this[1].__r_.__value_.__r.__words, v5[1].__r_.__value_.__r.__words);
    this = (std::string *)((char *)this + 40);
    v5 = (std::string *)((char *)v5 + 40);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C147E20(_QWORD **a1, uint64_t a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))(*a1)[1])(**a1, *(unsigned int *)(*(_QWORD *)(a2 + 8) - 8), *(unsigned int *)(*(_QWORD *)(a2 + 8) - 4));
}

void sub_20C147E34(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2, int a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void **v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void **v33;

  if ((_DWORD)a2)
  {
    if (a3 != 2)
      return;
    v5 = *(_QWORD *)(*a1 + 8);
    *(_OWORD *)v25 = *(_OWORD *)(v5 - 96);
    v26 = *(_QWORD *)(v5 - 80);
    *(_QWORD *)(v5 - 96) = 0;
    *(_QWORD *)(v5 - 88) = 0;
    *(_QWORD *)(v5 - 80) = 0;
    v27 = *(_OWORD *)(v5 - 72);
    v28 = *(_QWORD *)(v5 - 56);
    *(_QWORD *)(v5 - 72) = 0;
    *(_QWORD *)(v5 - 64) = 0;
    *(_QWORD *)(v5 - 56) = 0;
    v29 = *(_OWORD *)(v5 - 48);
    v30 = *(_QWORD *)(v5 - 32);
    *(_QWORD *)(v5 - 48) = 0;
    *(_QWORD *)(v5 - 40) = 0;
    *(_QWORD *)(v5 - 32) = 0;
    v6 = *(_OWORD *)(v5 - 24);
    v32 = *(_QWORD *)(v5 - 8);
    v31 = v6;
    *(_QWORD *)(v5 - 16) = 0;
    *(_QWORD *)(v5 - 8) = 0;
    *(_QWORD *)(v5 - 24) = 0;
    v7 = *a1;
    v8 = *(_QWORD *)(*a1 + 8) - 96;
    sub_20C14816C(*a1 + 16, v8);
    *(_QWORD *)(v7 + 8) = v8;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(a2, (_QWORD *)(*(_QWORD *)(*a1 + 8) - 96), (uint64_t)v25, (uint64_t)__p);
    v9 = *(_QWORD *)(*a1 + 8);
    v10 = *(void **)(v9 - 96);
    if (v10)
    {
      *(_QWORD *)(v9 - 88) = v10;
      operator delete(v10);
      *(_QWORD *)(v9 - 96) = 0;
      *(_QWORD *)(v9 - 88) = 0;
      *(_QWORD *)(v9 - 80) = 0;
    }
    *(_OWORD *)(v9 - 96) = *(_OWORD *)__p;
    *(_QWORD *)(v9 - 80) = v18;
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    sub_20C00BC18((void **)(v9 - 72));
    *(_OWORD *)(v9 - 72) = v19;
    *(_QWORD *)(v9 - 56) = v20;
    v19 = 0uLL;
    v20 = 0;
    sub_20C00BCC0((void **)(v9 - 48));
    *(_OWORD *)(v9 - 48) = v21;
    *(_QWORD *)(v9 - 32) = v22;
    v21 = 0uLL;
    v22 = 0;
    v11 = (void **)(v9 - 24);
    if (*(char *)(v9 - 1) < 0)
      operator delete(*v11);
    v12 = v23;
    *(_QWORD *)(v9 - 8) = v24;
    *(_OWORD *)v11 = v12;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    v33 = (void **)&v21;
    sub_20C00E25C(&v33);
    v33 = (void **)&v19;
    sub_20C00D5A8(&v33);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    __p[0] = &v29;
    sub_20C00E25C((void ***)__p);
    __p[0] = &v27;
  }
  else
  {
    if (a3 != 1)
      return;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(*(_QWORD *)(*a1 + 8) - 96, (uint64_t)v25);
    v13 = *(_QWORD *)(*a1 + 8);
    v14 = *(void **)(v13 - 96);
    if (v14)
    {
      *(_QWORD *)(v13 - 88) = v14;
      operator delete(v14);
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 88) = 0;
      *(_QWORD *)(v13 - 80) = 0;
    }
    *(_OWORD *)(v13 - 96) = *(_OWORD *)v25;
    *(_QWORD *)(v13 - 80) = v26;
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
    sub_20C00BC18((void **)(v13 - 72));
    *(_OWORD *)(v13 - 72) = v27;
    *(_QWORD *)(v13 - 56) = v28;
    v27 = 0uLL;
    v28 = 0;
    sub_20C00BCC0((void **)(v13 - 48));
    *(_OWORD *)(v13 - 48) = v29;
    *(_QWORD *)(v13 - 32) = v30;
    v29 = 0uLL;
    v30 = 0;
    v15 = (void **)(v13 - 24);
    if (*(char *)(v13 - 1) < 0)
      operator delete(*v15);
    v16 = v31;
    *(_QWORD *)(v13 - 8) = v32;
    *(_OWORD *)v15 = v16;
    HIBYTE(v32) = 0;
    LOBYTE(v31) = 0;
    __p[0] = &v29;
    sub_20C00E25C((void ***)__p);
    __p[0] = &v27;
  }
  sub_20C00D5A8((void ***)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_20C148128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  sub_20C00E25C((void ***)&a9);
  sub_20C00D5A8((void ***)&a9);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_20C14816C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  v4 = (void **)(a2 + 48);
  sub_20C00E25C(&v4);
  v4 = (void **)(a2 + 24);
  sub_20C00D5A8(&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void sub_20C1481D0(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  void *v6[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  void **v14;

  v1 = *(uint64_t **)a1;
  (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)(a1 + 8) + 8))(v6, **(_QWORD **)(a1 + 8));
  v2 = v1[1];
  if (v2 >= v1[2])
  {
    v4 = sub_20C1482F8(v1, (uint64_t)v6);
    v5 = SHIBYTE(v13);
    v1[1] = v4;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_OWORD *)v2 = *(_OWORD *)v6;
    *(_QWORD *)(v2 + 16) = v7;
    v6[0] = 0;
    v6[1] = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_OWORD *)(v2 + 24) = v8;
    *(_QWORD *)(v2 + 40) = v9;
    *(_QWORD *)(v2 + 48) = 0;
    v7 = 0;
    v8 = 0uLL;
    v9 = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 48) = v10;
    *(_QWORD *)(v2 + 64) = v11;
    v10 = 0uLL;
    v3 = *(_OWORD *)__p;
    *(_QWORD *)(v2 + 88) = v13;
    *(_OWORD *)(v2 + 72) = v3;
    v11 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    v1[1] = v2 + 96;
  }
  v14 = (void **)&v10;
  sub_20C00E25C(&v14);
  v14 = (void **)&v8;
  sub_20C00D5A8(&v14);
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_20C1482D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  sub_20C96B690((uint64_t)&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1482F8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE90940((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[96 * v3];
  v13 = &v7[96 * v6];
  sub_20C148400((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 96;
  sub_20C14847C(a1, &v10);
  v8 = a1[1];
  sub_20C148628(&v10);
  return v8;
}

void sub_20C1483EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C148628((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C148400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  result = *(__n128 *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(__n128 *)(a2 + 72) = result;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_20C14847C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1484F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1484F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      sub_20C148400(a1, v7 - 96, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C1485A4((uint64_t)v13);
  return v11;
}

uint64_t sub_20C1485A4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1485D8((uint64_t *)a1);
  return a1;
}

void sub_20C1485D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C14816C(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **sub_20C148628(void **a1)
{
  sub_20C148658(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C148658(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    sub_20C14816C(v4, i - 96);
  }
}

void sub_20C14869C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *v7[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  void **v15;

  v2 = *a1;
  sub_20C1487C4(a2, (char **)v7);
  v3 = v2[1];
  if (v3 >= v2[2])
  {
    v5 = sub_20C1482F8(v2, (uint64_t)v7);
    v6 = SHIBYTE(v14);
    v2[1] = v5;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_OWORD *)v3 = *(_OWORD *)v7;
    *(_QWORD *)(v3 + 16) = v8;
    v7[0] = 0;
    v7[1] = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_OWORD *)(v3 + 24) = v9;
    *(_QWORD *)(v3 + 40) = v10;
    *(_QWORD *)(v3 + 48) = 0;
    v8 = 0;
    v9 = 0uLL;
    v10 = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_OWORD *)(v3 + 48) = v11;
    *(_QWORD *)(v3 + 64) = v12;
    v11 = 0uLL;
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 88) = v14;
    *(_OWORD *)(v3 + 72) = v4;
    v12 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v14 = 0;
    v2[1] = v3 + 96;
  }
  v15 = (void **)&v11;
  sub_20C00E25C(&v15);
  v15 = (void **)&v9;
  sub_20C00D5A8(&v15);
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_20C1487A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  sub_20C96B690((uint64_t)&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1487C4@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  sub_20C00D7C4((uint64_t)&v4, a1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v4, a2);
  v8 = (void **)&v7;
  sub_20C00BD84(&v8);
  v8 = (void **)&v6;
  sub_20BED2E10(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_20BFD265C(&v4);
}

void sub_20C148838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C14738C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C14884C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  _QWORD *v3;
  int v4;

  v3 = (_QWORD *)(a2 + 8);
  v4 = *(char *)(a2 + 31);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a2 + 16) != 1)
      return sub_20C1449B4(a2, a3);
    v3 = (_QWORD *)*v3;
  }
  else if (v4 != 1)
  {
    return sub_20C1449B4(a2, a3);
  }
  if (*(_BYTE *)v3 == 95)
    return sub_20C00D1F0(a3, *a1);
  return sub_20C1449B4(a2, a3);
}

void sub_20C148894(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  int v13;

  v3 = *a2;
  v4 = a2[1];
  v6 = *(_DWORD *)(v4 - 8);
  v5 = *(_DWORD *)(v4 - 4);
  v7 = v4 - *a2;
  if ((unint64_t)v7 <= 8)
  {
    v10 = 0;
    v11 = v5 == 0;
  }
  else
  {
    v8 = (v7 >> 3) - 2;
    v9 = *(_DWORD *)(v3 + 8 * v8);
    if (v9 >= v6)
    {
      v13 = *(_DWORD *)(v3 + 8 * v8 + 4);
      v10 = v9 == v6 && v13 == 2;
    }
    else
    {
      v10 = 1;
    }
    v11 = v5 == 0;
    if (v10 && !v5)
    {
      std::string::push_back(*(std::string **)(a1 + 16), 40);
      if (v6)
        return;
      v10 = 1;
      goto LABEL_25;
    }
  }
  if (v6)
  {
    if (v5 == 1)
    {
      switch(v6)
      {
        case 1:
          std::string::append(*(std::string **)(a1 + 16), " ");
          break;
        case 2:
          std::string::append(*(std::string **)(a1 + 16), " + ");
          break;
        case 3:
          std::string::append(*(std::string **)(a1 + 16), " & ");
          break;
        case 4:
          std::string::append(*(std::string **)(a1 + 16), " - ");
          break;
        default:
          std::string::append(*(std::string **)(a1 + 16), "<unknown>");
          break;
      }
    }
    else if (v5 == 2 && v10)
    {
      goto LABEL_27;
    }
    return;
  }
  if (!v11)
  {
    if (v5 == 1 && v10)
      goto LABEL_27;
    return;
  }
LABEL_25:
  std::string::append(*(std::string **)(a1 + 16), "~");
  if (v10 && v5 == 1)
LABEL_27:
    std::string::push_back(*(std::string **)(a1 + 16), 41);
}

void sub_20C148A10(std::string **a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  int v8;
  _BYTE *v9;
  void **v10;
  std::string::size_type v11;
  std::string v12;
  void *__p[2];
  int64_t v14;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)&v12);
  v4 = std::string::insert(&v12, 0, "%");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v14 >= 0)
    v7 = HIBYTE(v14);
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(*a1, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v8 = *((char *)this + 31);
  if (v8 < 0)
  {
    if (*((_QWORD *)this + 2) != 1)
      goto LABEL_18;
    v9 = (_BYTE *)*((_QWORD *)this + 1);
  }
  else
  {
    v9 = (char *)this + 8;
    if (v8 != 1)
      goto LABEL_18;
  }
  if (*v9 == 95)
  {
    sub_20BDDC0E4(__p, "_");
    goto LABEL_19;
  }
LABEL_18:
  std::operator+<char>();
LABEL_19:
  if (v14 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v14 >= 0)
    v11 = HIBYTE(v14);
  else
    v11 = (std::string::size_type)__p[1];
  std::string::append(*a1, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20C148B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C148B8C(std::string **a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *this)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::GetText(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(*a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C148BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C148C0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_20C14E228((uint64_t *)(a1[1] - 48), a2);
  v4 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      v3 -= 48;
      sub_20C149000((uint64_t)(a1 + 2), v3);
    }
    while (v3 != v4);
  }
  a1[1] = v4;
}

void **sub_20C148C68(void **a1)
{
  void **v3;

  sub_20C1490B8((uint64_t)(a1 + 3));
  v3 = a1;
  sub_20C149150(&v3);
  return a1;
}

uint64_t sub_20C148CA4(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::PathPattern((pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *)(a1 + 24));
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_20C148D34((uint64_t *)a1);
  return a1;
}

void sub_20C148D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20C1490B8(v2);
  sub_20C149150((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C148D34(uint64_t *a1)
{
  void **result;
  unint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  v3 = v4;
  v5 = *(result - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
    v8 = v7 + 1;
    if (v7 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    v13[4] = result;
    if (v10)
      v11 = (char *)sub_20BE6D0B4((uint64_t)result, v10);
    else
      v11 = 0;
    v12 = &v11[48 * v7];
    v13[0] = v11;
    v13[1] = v12;
    v13[3] = &v11[48 * v10];
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    v13[2] = v12 + 48;
    sub_20C148E48(a1, v13);
    v6 = (_OWORD *)a1[1];
    result = sub_20C149044(v13);
  }
  else
  {
    v5[1] = 0u;
    v5[2] = 0u;
    *v5 = 0u;
    v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_20C148E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C149044((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C148E48(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C148EBC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C148EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C148F7C((uint64_t)v11);
  return v9;
}

uint64_t sub_20C148F7C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C148FB0((uint64_t *)a1);
  return a1;
}

void sub_20C148FB0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C149000(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_20C149000(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 24);
  sub_20C1504D4(&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void **sub_20C149044(void **a1)
{
  sub_20C149074(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C149074(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_20C149000(v4, i - 48);
  }
}

_DWORD *sub_20C1490B8(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  v4 = (void **)(a1 + 112);
  sub_20C00BE5C(&v4);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v4 = (void **)(a1 + 32);
  sub_20C00BD84(&v4);
  v4 = (void **)(a1 + 8);
  sub_20BED2E10(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void sub_20C149150(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20C149000((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C1491D4(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int128 *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  sub_20C149584(a1, (uint64_t)a2);
  if ((sub_20C149B08(a1, (uint64_t)a2) & 1) == 0)
  {
    sub_20C149EF4(a1, (uint64_t)a2);
    if ((v4 & 1) == 0)
    {
      v20 = *(_OWORD *)(a1 + 32);
      if ((_QWORD)v20 == *(_QWORD *)(a1 + 64) || *(_BYTE *)v20 != 40)
        return 0;
      v5 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v20 + 1;
      *(_QWORD *)(a1 + 40) = v5;
      ++*(_QWORD *)(a1 + 56);
      sub_20C148D34(a2);
      if ((sub_20C14DF60((_QWORD *)a1, (uint64_t)a2) & 1) == 0)
        sub_20C14DFB0(a1);
      if ((sub_20C14E0EC(a1, (uint64_t)a2) & 1) == 0)
        sub_20C14E344(a1);
    }
  }
  v6 = (__int128 *)(a1 + 32);
  v18 = *(_OWORD *)(a1 + 32);
  v19 = *(_OWORD *)(a1 + 48);
  v21 = v18;
  v25 = v19;
  if (sub_20C14E480(a1))
  {
    while (1)
    {
      v7 = sub_20C14E5F0((_QWORD *)a1, (uint64_t)a2);
      *v6 = v21;
      *(_OWORD *)(a1 + 48) = v25;
      if (!v7)
        break;
      v22 = *v6;
      v26 = *(_OWORD *)(a1 + 48);
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
      v8 = *(_BYTE **)(a1 + 32);
      if (v8 == *(_BYTE **)(a1 + 64) || *v8 != 43)
      {
        *v6 = v22;
        *(_OWORD *)(a1 + 48) = v26;
        v23 = *v6;
        v27 = *(_OWORD *)(a1 + 48);
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
        v10 = *(_BYTE **)(a1 + 32);
        if (v10 == *(_BYTE **)(a1 + 64) || *v10 != 38)
        {
          *v6 = v23;
          *(_OWORD *)(a1 + 48) = v27;
          v24 = *v6;
          v28 = *(_OWORD *)(a1 + 48);
          while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
            ;
          v12 = *(_BYTE **)(a1 + 32);
          if (v12 == *(_BYTE **)(a1 + 64) || *v12 != 45)
          {
            *v6 = v24;
            *(_OWORD *)(a1 + 48) = v28;
            v21 = *v6;
            v25 = *(_OWORD *)(a1 + 48);
            if (!sub_20C01AA0C((_QWORD *)a1))
              goto LABEL_40;
            while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
              ;
            sub_20C149648((char **)(a2[1] - 48), 1);
          }
          else
          {
            v13 = *(_QWORD *)(a1 + 40) + 1;
            *(_QWORD *)(a1 + 32) = v12 + 1;
            *(_QWORD *)(a1 + 40) = v13;
            ++*(_QWORD *)(a1 + 56);
            sub_20C149648((char **)(a2[1] - 48), 4);
            while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
              ;
          }
        }
        else
        {
          v11 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 32) = v10 + 1;
          *(_QWORD *)(a1 + 40) = v11;
          ++*(_QWORD *)(a1 + 56);
          sub_20C149648((char **)(a2[1] - 48), 3);
          while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
            ;
        }
      }
      else
      {
        v9 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v8 + 1;
        *(_QWORD *)(a1 + 40) = v9;
        ++*(_QWORD *)(a1 + 56);
        sub_20C149648((char **)(a2[1] - 48), 2);
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
      }
      sub_20C149584(a1, (uint64_t)a2);
      if ((sub_20C149B08(a1, (uint64_t)a2) & 1) == 0)
      {
        sub_20C149EF4(a1, (uint64_t)a2);
        if ((v14 & 1) == 0)
        {
          v15 = *(_BYTE **)(a1 + 32);
          if (v15 == *(_BYTE **)(a1 + 64) || *v15 != 40)
            break;
          v16 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 32) = v15 + 1;
          *(_QWORD *)(a1 + 40) = v16;
          ++*(_QWORD *)(a1 + 56);
          sub_20C148D34(a2);
          if ((sub_20C14DF60((_QWORD *)a1, (uint64_t)a2) & 1) == 0)
            sub_20C14DFB0(a1);
          if ((sub_20C14E0EC(a1, (uint64_t)a2) & 1) == 0)
            sub_20C14E344(a1);
        }
      }
      v18 = *v6;
      v19 = *(_OWORD *)(a1 + 48);
      v21 = *v6;
      v25 = v19;
      if ((sub_20C14E480(a1) & 1) == 0)
        goto LABEL_40;
    }
  }
  else
  {
LABEL_40:
    *v6 = v21;
    *(_OWORD *)(a1 + 48) = v25;
  }
  *v6 = v18;
  *(_OWORD *)(a1 + 48) = v19;
  return 1;
}

void sub_20C14954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  _Unwind_Resume(a1);
}

__n128 sub_20C149584(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  _BYTE *v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __n128 v9;

  v4 = (__n128 *)(a1 + 32);
  v8 = *(__n128 *)(a1 + 32);
  v9 = *(__n128 *)(a1 + 48);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v5 = *(_BYTE **)(a1 + 32);
  if (v5 == *(_BYTE **)(a1 + 64) || *v5 != 126)
  {
    result = v8;
    *v4 = v8;
    v4[1] = v9;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v5 + 1;
    *(_QWORD *)(a1 + 40) = v6;
    ++*(_QWORD *)(a1 + 56);
    sub_20C149648((char **)(*(_QWORD *)(a2 + 8) - 48), 0);
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
  }
  return result;
}

void sub_20C149634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  _OWORD *v12;

  *v12 = a11;
  v12[1] = a12;
  *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C149648(char **a1, int a2)
{
  char *i;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  for (i = *a1; ; i = *a1)
  {
    v5 = a1[1];
    if (i == v5)
      break;
    if (*((_DWORD *)v5 - 1) > a2)
      goto LABEL_6;
    sub_20C14974C(a1);
  }
  v5 = i;
LABEL_6:
  v6 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = (v5 - i) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_20BDDF694();
    v10 = v6 - (_QWORD)i;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_20BDE1330((uint64_t)(a1 + 2), v11);
      i = *a1;
      v5 = a1[1];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v7 = v13 + 4;
    while (v5 != i)
    {
      v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (i)
      operator delete(i);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v7 = v5 + 4;
  }
  a1[1] = v7;
}

void sub_20C14974C(_QWORD *a1)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void **v43;

  v2 = a1[1];
  v3 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)*(unsigned int *)(v2 - 4);
  a1[1] = v2 - 4;
  v4 = a1 + 3;
  v5 = a1[4];
  v35 = *(_OWORD *)(v5 - 96);
  v36 = *(_QWORD *)(v5 - 80);
  *(_QWORD *)(v5 - 96) = 0;
  *(_QWORD *)(v5 - 88) = 0;
  *(_QWORD *)(v5 - 80) = 0;
  v37 = *(_OWORD *)(v5 - 72);
  v38 = *(_QWORD *)(v5 - 56);
  *(_QWORD *)(v5 - 72) = 0;
  *(_QWORD *)(v5 - 64) = 0;
  *(_QWORD *)(v5 - 56) = 0;
  v39 = *(_OWORD *)(v5 - 48);
  v40 = *(_QWORD *)(v5 - 32);
  *(_QWORD *)(v5 - 48) = 0;
  *(_QWORD *)(v5 - 40) = 0;
  *(_QWORD *)(v5 - 32) = 0;
  v6 = *(_OWORD *)(v5 - 24);
  v42 = *(_QWORD *)(v5 - 8);
  v41 = v6;
  *(_QWORD *)(v5 - 16) = 0;
  *(_QWORD *)(v5 - 8) = 0;
  *(_QWORD *)(v5 - 24) = 0;
  v7 = a1[4];
  v8 = (uint64_t)(a1 + 5);
  sub_20C14816C((uint64_t)(a1 + 5), v7 - 96);
  a1[4] = v7 - 96;
  if ((_DWORD)v3)
  {
    *(_OWORD *)v27 = *(_OWORD *)(v7 - 192);
    v28 = *(_QWORD *)(v7 - 176);
    *(_QWORD *)(v7 - 192) = 0;
    *(_QWORD *)(v7 - 184) = 0;
    *(_QWORD *)(v7 - 176) = 0;
    v29 = *(_OWORD *)(v7 - 168);
    v30 = *(_QWORD *)(v7 - 152);
    *(_QWORD *)(v7 - 168) = 0;
    *(_QWORD *)(v7 - 160) = 0;
    *(_QWORD *)(v7 - 152) = 0;
    v31 = *(_OWORD *)(v7 - 144);
    v32 = *(_QWORD *)(v7 - 128);
    *(_QWORD *)(v7 - 144) = 0;
    *(_QWORD *)(v7 - 136) = 0;
    *(_QWORD *)(v7 - 128) = 0;
    v9 = *(_OWORD *)(v7 - 120);
    v34 = *(_QWORD *)(v7 - 104);
    v33 = v9;
    *(_QWORD *)(v7 - 112) = 0;
    *(_QWORD *)(v7 - 104) = 0;
    *(_QWORD *)(v7 - 120) = 0;
    v10 = a1[4] - 96;
    sub_20C14816C(v8, v10);
    a1[4] = v10;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(v3, v27, (uint64_t)&v35, (uint64_t)v19);
    v11 = a1[4];
    if (v11 >= a1[5])
    {
      v15 = sub_20C1482F8(v4, (uint64_t)v19);
      v16 = SHIBYTE(v26);
      a1[4] = v15;
      if (v16 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_OWORD *)v11 = *(_OWORD *)v19;
      *(_QWORD *)(v11 + 16) = v20;
      v19[0] = 0;
      v19[1] = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_OWORD *)(v11 + 24) = v21;
      *(_QWORD *)(v11 + 40) = v22;
      *(_QWORD *)(v11 + 48) = 0;
      v20 = 0;
      v21 = 0uLL;
      v22 = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_OWORD *)(v11 + 48) = v23;
      *(_QWORD *)(v11 + 64) = v24;
      v23 = 0uLL;
      v12 = *(_OWORD *)__p;
      *(_QWORD *)(v11 + 88) = v26;
      *(_OWORD *)(v11 + 72) = v12;
      v24 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      a1[4] = v11 + 96;
    }
    v43 = (void **)&v23;
    sub_20C00E25C(&v43);
    v43 = (void **)&v21;
    sub_20C00D5A8(&v43);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement((uint64_t)&v35, (uint64_t)v27);
    v13 = a1[4];
    if (v13 >= a1[5])
    {
      v17 = sub_20C1482F8(v4, (uint64_t)v27);
      v18 = SHIBYTE(v34);
      a1[4] = v17;
      if (v18 < 0)
        operator delete((void *)v33);
    }
    else
    {
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_OWORD *)v13 = *(_OWORD *)v27;
      *(_QWORD *)(v13 + 16) = v28;
      v27[0] = 0;
      v27[1] = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = v29;
      *(_QWORD *)(v13 + 40) = v30;
      *(_QWORD *)(v13 + 48) = 0;
      v28 = 0;
      v29 = 0uLL;
      v30 = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 0;
      *(_OWORD *)(v13 + 48) = v31;
      *(_QWORD *)(v13 + 64) = v32;
      v31 = 0uLL;
      v14 = v33;
      *(_QWORD *)(v13 + 88) = v34;
      *(_OWORD *)(v13 + 72) = v14;
      v32 = 0;
      v33 = 0uLL;
      v34 = 0;
      a1[4] = v13 + 96;
    }
  }
  v19[0] = &v31;
  sub_20C00E25C((void ***)v19);
  v19[0] = &v29;
  sub_20C00D5A8((void ***)v19);
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  v27[0] = &v39;
  sub_20C00E25C((void ***)v27);
  v27[0] = &v37;
  sub_20C00D5A8((void ***)v27);
  if ((_QWORD)v35)
  {
    *((_QWORD *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_20C149AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_20C00BBB0((uint64_t)va);
  sub_20C00BBB0(v13 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_20C149B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *__p[2];
  __int128 v28;
  std::string v29;
  uint64_t v30;
  std::string v31;

  v4 = a1 + 32;
  v21 = *(_OWORD *)(a1 + 32);
  v23 = *(_OWORD *)(a1 + 48);
  if (sub_20C14A13C((_QWORD *)a1)
    && (v5 = *(_OWORD *)(v4 + 16),
        *(_OWORD *)__p = *(_OWORD *)v4,
        v28 = v5,
        v6 = sub_20C14A194((_QWORD *)a1),
        v7 = v28,
        *(_OWORD *)v4 = *(_OWORD *)__p,
        *(_OWORD *)(v4 + 16) = v7,
        (v6 & 1) == 0))
  {
    v31.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v31.__r_.__value_.__r.__words + 1);
    sub_20BDDC0E4(__p, "_");
    sub_20C14A1FC((uint64_t *)(*(_QWORD *)(a2 + 8) - 48), (int *)&v31, (uint64_t)__p);
    if (SBYTE7(v28) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v31.__r_.__value_.__r.__words + 1);
    sub_20BFD265C(&v31);
  }
  else
  {
    *(_OWORD *)v4 = v21;
    *(_OWORD *)(v4 + 16) = v23;
    v22 = *(_OWORD *)v4;
    v24 = *(_OWORD *)(v4 + 16);
    v8 = *(_BYTE **)(a1 + 32);
    v9 = *(_BYTE **)(a1 + 64);
    if (v8 == v9 || *v8 != 37)
      goto LABEL_18;
    v10 = v8 + 1;
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v8 + 1;
    *(_QWORD *)(a1 + 40) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12 + 1;
    v25 = *(_OWORD *)(a1 + 40);
    v26 = v12 + 1;
    v13 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)__p = *(_OWORD *)v4;
    v28 = v13;
    if (v8 + 1 == v9
      || *v10 != 47
      || (*(_QWORD *)(a1 + 32) = v8 + 2,
          *(_QWORD *)(a1 + 40) = v11 + 2,
          *(_QWORD *)(a1 + 56) = v12 + 2,
          !sub_20C14A3A8(a1)))
    {
      v14 = v28;
      *(_OWORD *)v4 = *(_OWORD *)__p;
      *(_OWORD *)(v4 + 16) = v14;
      v15 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)__p = *(_OWORD *)v4;
      v28 = v15;
      if (sub_20C14A4E0(a1, a2))
      {
        sub_20C14A58C(a1, a2);
      }
      else
      {
        v16 = v28;
        *(_OWORD *)v4 = *(_OWORD *)__p;
        *(_OWORD *)(v4 + 16) = v16;
      }
      v17 = *(_BYTE **)(a1 + 32);
      if (v17 == *(_BYTE **)(a1 + 64) || *v17 != 47)
      {
        if (!sub_20C14A46C((_QWORD *)a1))
          goto LABEL_17;
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v17 + 1;
        *(_QWORD *)(a1 + 40) = v18;
        ++*(_QWORD *)(a1 + 56);
        if ((sub_20C14A3A8(a1) & 1) == 0)
        {
LABEL_17:
          *(_QWORD *)v4 = v10;
          *(_OWORD *)(a1 + 40) = v25;
          *(_QWORD *)(a1 + 56) = v26;
LABEL_18:
          result = 0;
          *(_OWORD *)v4 = v22;
          *(_OWORD *)(v4 + 16) = v24;
          return result;
        }
      }
    }
    sub_20BE93368(&v31, v10, *(char **)v4, *(_QWORD *)v4 - (_QWORD)v10);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)&v31, 58, (std::string *)__p);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v20 = (void *)BYTE7(v28);
    if (SBYTE7(v28) < 0)
      v20 = __p[1];
    if (v20)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v30, __p);
    }
    else
    {
      v30 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v30);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v30 + 1);
    }
    sub_20BE93368(&v29, v10, *(char **)v4, *(_QWORD *)v4 - (_QWORD)v10);
    pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(&v29, 58, &v31);
    sub_20C14A1FC((uint64_t *)(*(_QWORD *)(a2 + 8) - 48), (int *)&v30, (uint64_t)&v31);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
    sub_20BFD265C(&v30);
    if (SBYTE7(v28) < 0)
      operator delete(__p[0]);
  }
  return 1;
}

void sub_20C149E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 __p, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _OWORD *v27;

  if (a19 < 0)
    operator delete((void *)__p);
  *v27 = a9;
  v27[1] = a10;
  _Unwind_Resume(exception_object);
}

__n128 sub_20C149EF4(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  _BYTE *v5;
  _DWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  _BYTE *v13;
  uint64_t v14;
  _DWORD *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;

  v4 = (__n128 *)(a1 + 32);
  v16 = *(__n128 *)(a1 + 32);
  v17 = *(__n128 *)(a1 + 48);
  v5 = *(_BYTE **)(a1 + 32);
  if (v5 != *(_BYTE **)(a1 + 64) && *v5 == 47)
  {
    v6 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
    sub_20C14A868(a2 + 24, v6);
    if ((sub_20C14A8E8(a1, a2) & 1) == 0)
    {
      v7 = *(_BYTE **)(a1 + 32);
      if (v7 == *(_BYTE **)(a1 + 64) || *v7 != 47)
        sub_20C14AA08(a1);
      v8 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v7 + 1;
      *(_QWORD *)(a1 + 40) = v8;
      ++*(_QWORD *)(a1 + 56);
    }
LABEL_7:
    sub_20C14A63C(a1, a2);
LABEL_15:
    sub_20C14DD30(a2);
    return result;
  }
  v20 = *v4;
  v21 = *(__n128 *)(a1 + 48);
  if (sub_20C14A4E0(a1, a2))
  {
    sub_20C14A58C(a1, a2);
    if ((sub_20C14A8E8(a1, a2) & 1) == 0)
    {
      v9 = *(_BYTE **)(a1 + 32);
      if (v9 == *(_BYTE **)(a1 + 64) || *v9 != 47)
        goto LABEL_15;
      v10 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v9 + 1;
      *(_QWORD *)(a1 + 40) = v10;
      ++*(_QWORD *)(a1 + 56);
    }
    goto LABEL_7;
  }
  *v4 = v20;
  v4[1] = v21;
  v11 = sub_20C14A63C(a1, a2);
  if ((v11 & 1) != 0)
    goto LABEL_15;
  v13 = *(_BYTE **)(a1 + 32);
  if (v13 != *(_BYTE **)(a1 + 64) && *v13 == 46)
  {
    v14 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v13 + 1;
    *(_QWORD *)(a1 + 40) = v14;
    ++*(_QWORD *)(a1 + 56);
    v15 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
    sub_20C14A868(a2 + 24, v15);
    v18 = *v4;
    v19 = v4[1];
    if (sub_20C14A9B0((_QWORD *)a1))
    {
      sub_20C14A950(a2);
      sub_20C14A63C(a1, a2);
    }
    else
    {
      *v4 = v18;
      v4[1] = v19;
    }
    goto LABEL_15;
  }
  result = v16;
  *v4 = v16;
  v4[1] = v17;
  return result;
}

void sub_20C14A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  _OWORD *v12;

  *v12 = a11;
  v12[1] = a12;
  *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14A13C(_QWORD *a1)
{
  _WORD *v1;
  uint64_t v3;

  v1 = (_WORD *)a1[4];
  if (a1[8] - (_QWORD)v1 < 2uLL || *v1 != 24357)
    return 0;
  v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

uint64_t sub_20C14A194(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;

  if ((sub_20C01D710(a1) & 1) != 0)
    return 1;
  v2 = (_BYTE *)a1[4];
  if (v2 != (_BYTE *)a1[8] && *v2 == 58)
  {
    v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
    return 1;
  }
  return 0;
}

_DWORD *sub_20C14A1FC(uint64_t *a1, int *a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  void **v23;

  v11 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2);
  v12 = a2[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 1);
  *(_OWORD *)v13 = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v11, (char **)v15);
  v6 = a1[4];
  if (v6 >= a1[5])
  {
    v8 = sub_20C1482F8(a1 + 3, (uint64_t)v15);
    v9 = SHIBYTE(v22);
    a1[4] = v8;
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_OWORD *)v6 = *(_OWORD *)v15;
    *(_QWORD *)(v6 + 16) = v16;
    v15[0] = 0;
    v15[1] = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_OWORD *)(v6 + 24) = v17;
    *(_QWORD *)(v6 + 40) = v18;
    *(_QWORD *)(v6 + 48) = 0;
    v16 = 0;
    v17 = 0uLL;
    v18 = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 48) = v19;
    *(_QWORD *)(v6 + 64) = v20;
    v19 = 0uLL;
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 88) = v22;
    *(_OWORD *)(v6 + 72) = v7;
    v20 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    a1[4] = v6 + 96;
  }
  v23 = (void **)&v19;
  sub_20C00E25C(&v23);
  v23 = (void **)&v17;
  sub_20C00D5A8(&v23);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  return sub_20BFD265C(&v11);
}

void sub_20C14A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20C00BBB0((uint64_t)&a13);
  sub_20C147038((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14A3A8(uint64_t a1)
{
  uint64_t result;
  _BYTE *v3;
  __int128 *v4;
  _BYTE *i;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  result = sub_20C01DDD0((_QWORD *)a1);
  if ((_DWORD)result)
  {
    while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
      ;
    v4 = (__int128 *)(a1 + 32);
    v3 = *(_BYTE **)(a1 + 32);
    v7 = *(_OWORD *)(a1 + 32);
    v8 = *(_OWORD *)(a1 + 48);
    for (i = *(_BYTE **)(a1 + 64); v3 != i; i = *(_BYTE **)(a1 + 64))
    {
      if (*v3 != 47)
        break;
      v6 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v3 + 1;
      *(_QWORD *)(a1 + 40) = v6;
      ++*(_QWORD *)(a1 + 56);
      if (!sub_20C01DDD0((_QWORD *)a1))
        break;
      while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
        ;
      v7 = *v4;
      v8 = *(_OWORD *)(a1 + 48);
      v3 = *(_BYTE **)(a1 + 32);
    }
    *v4 = v7;
    *(_OWORD *)(a1 + 48) = v8;
    return sub_20C14A46C((_QWORD *)a1);
  }
  return result;
}

uint64_t sub_20C14A46C(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t result;

  v1 = (_BYTE *)a1[4];
  if (v1 == (_BYTE *)a1[8] || *v1 != 58)
    return 0;
  v3 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v3;
  ++a1[7];
  result = sub_20C01DDD0(a1);
  if ((_DWORD)result)
  {
    while ((sub_20C01D710(a1) & 1) != 0)
      ;
    return 1;
  }
  return result;
}

uint64_t sub_20C14A4E0(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  void *__p[2];
  char v9;

  v3 = (_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v4 = sub_20C01E458((_QWORD *)a1);
  if ((_DWORD)v4)
  {
    sub_20BDDC0E4(__p, "..");
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a2 + 24, (uint64_t)__p);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_20C14A560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _OWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  *v17 = a9;
  v17[1] = a10;
  _Unwind_Resume(exception_object);
}

__n128 sub_20C14A58C(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  __n128 *v3;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __n128 i;

  v3 = (__n128 *)(a1 + 32);
  v8 = *(__n128 *)(a1 + 32);
  v2 = (_BYTE *)v8.n128_u64[0];
  for (i = *(__n128 *)(a1 + 48); v2 != *(_BYTE **)(a1 + 64); v2 = *(_BYTE **)(a1 + 32))
  {
    if (*v2 != 47)
      break;
    v6 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v2 + 1;
    *(_QWORD *)(a1 + 40) = v6;
    ++*(_QWORD *)(a1 + 56);
    if ((sub_20C14A4E0(a1, a2) & 1) == 0)
      break;
    v8 = *v3;
    i = v3[1];
  }
  result = v8;
  *v3 = v8;
  v3[1] = i;
  return result;
}

void sub_20C14A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14A63C(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20[2];
  _OWORD v21[2];
  void *__p[2];
  uint64_t v23;
  void **v24;

  v4 = (__int128 *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 32);
  v15 = *(_OWORD *)(a1 + 48);
  v5 = sub_20C14AB44(a1, a2);
  if ((_DWORD)v5)
  {
    v16 = *v4;
    v18 = v4[1];
    *(_OWORD *)v20 = *v4;
    v21[0] = v18;
    if (sub_20C14D8C4((_QWORD *)a1))
    {
      while (1)
      {
        v6 = sub_20C14D92C((_QWORD *)a1, a2);
        v7 = v21[0];
        *v4 = *(_OWORD *)v20;
        v4[1] = v7;
        if (!v6)
          break;
        if ((sub_20C14A8E8(a1, a2) & 1) == 0)
        {
          v8 = *(_BYTE **)(a1 + 32);
          if (v8 == *(_BYTE **)(a1 + 64) || *v8 != 47)
            break;
          v9 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 32) = v8 + 1;
          *(_QWORD *)(a1 + 40) = v9;
          ++*(_QWORD *)(a1 + 56);
        }
        if ((sub_20C14AB44(a1, a2) & 1) == 0)
          break;
        v16 = *v4;
        v18 = v4[1];
        *(_OWORD *)v20 = *v4;
        v21[0] = v18;
        if ((sub_20C14D8C4((_QWORD *)a1) & 1) == 0)
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      v10 = v21[0];
      *v4 = *(_OWORD *)v20;
      v4[1] = v10;
    }
    *v4 = v16;
    v4[1] = v18;
    sub_20C14A8E8(a1, a2);
    v11 = *(_BYTE **)(a1 + 32);
    if (v11 != *(_BYTE **)(a1 + 64) && *v11 == 46)
    {
      v12 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v11 + 1;
      *(_QWORD *)(a1 + 40) = v12;
      ++*(_QWORD *)(a1 + 56);
      v17 = *v4;
      v19 = v4[1];
      if (!sub_20C14AC28(a1, a2))
      {
        *v4 = v17;
        v4[1] = v19;
        sub_20C14DBF4(a1);
      }
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(a2 + 24, (size_t *)(a2 + 88), a2 + 112);
      if (*(char *)(a2 + 111) < 0)
      {
        **(_BYTE **)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 88) = 0;
        *(_BYTE *)(a2 + 111) = 0;
      }
      v23 = 0;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v20 = 0u;
      memset(v21, 0, sizeof(v21));
      sub_20C14D540(a2 + 112, (uint64_t)v20);
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
      v24 = (void **)v21 + 1;
      sub_20C00BE5C(&v24);
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
    }
  }
  else
  {
    *v4 = v14;
    v4[1] = v15;
  }
  return v5;
}

void sub_20C14A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  _OWORD *v12;

  *v12 = a11;
  v12[1] = a12;
  *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

_DWORD *sub_20C14A868(uint64_t a1, _DWORD *a2)
{
  int v5;
  int v6;

  sub_20BFD6E54(&v5, a2);
  sub_20BFD6EA4(&v6, a2 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C14A8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14A8E8(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  v3 = (_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v4 = sub_20C14A9B0((_QWORD *)a1);
  if ((_DWORD)v4)
  {
    sub_20C14A950(a2);
  }
  else
  {
    *v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_20C14A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C14A950(uint64_t a1)
{
  void *__p[2];
  uint64_t v2;

  __p[0] = 0;
  __p[1] = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a1 + 24, (uint64_t)__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p[0]);
}

void sub_20C14A994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C14A9B0(_QWORD *a1)
{
  _WORD *v1;
  uint64_t v3;

  v1 = (_WORD *)a1[4];
  if (a1[8] - (_QWORD)v1 < 2uLL || *v1 != 12079)
    return 0;
  v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

void sub_20C14AA08(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114AbsPathPatternE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114AbsPathPatternE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C14AB44(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  void *v8[2];
  _OWORD v9[2];
  void *__p[2];
  uint64_t v11;
  void **v12;

  v3 = (_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v4 = sub_20C14AC28(a1, a2);
  if ((_DWORD)v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a2 + 24, a2 + 88, a2 + 112);
    if (*(char *)(a2 + 111) < 0)
    {
      **(_BYTE **)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 88) = 0;
      *(_BYTE *)(a2 + 111) = 0;
    }
    v11 = 0;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v8 = 0u;
    memset(v9, 0, sizeof(v9));
    sub_20C14D540(a2 + 112, (uint64_t)v8);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
    v12 = (void **)v9 + 1;
    sub_20C00BE5C(&v12);
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }
  else
  {
    *v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_20C14AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14AC28(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v5 = a1 + 32;
  v4 = *(char **)(a1 + 32);
  v6 = a1 + 40;
  v17 = *(_OWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 56);
  if ((sub_20C01D710((_QWORD *)a1) & 1) != 0 || sub_20C14AE48((_QWORD *)a1))
  {
    do
    {
      while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
        ;
    }
    while ((sub_20C14AE48((_QWORD *)a1) & 1) != 0);
    v7 = *(_OWORD *)(v5 + 16);
    v19 = *(_OWORD *)v5;
    v20 = v7;
    v8 = *(_BYTE **)(a1 + 32);
    if (v8 != *(_BYTE **)(a1 + 64)
      && *v8 == 91
      && ((v9 = *(_QWORD *)(a1 + 40) + 1,
           *(_QWORD *)(a1 + 32) = v8 + 1,
           *(_QWORD *)(a1 + 40) = v9,
           ++*(_QWORD *)(a1 + 56),
           (sub_20C01D710((_QWORD *)a1) & 1) != 0)
       || sub_20C14AEE0((_QWORD *)a1)))
    {
      do
      {
        while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
          ;
      }
      while ((sub_20C14AEE0((_QWORD *)a1) & 1) != 0);
    }
    else
    {
      v10 = v20;
      *(_OWORD *)v5 = v19;
      *(_OWORD *)(v5 + 16) = v10;
    }
    sub_20BE93368(&v19, v4, *(char **)v5, *(_QWORD *)v5 - (_QWORD)v4);
    v11 = (void **)(a2 + 88);
    if (*(char *)(a2 + 111) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = v19;
    *(_QWORD *)(a2 + 104) = v20;
    v12 = *(_BYTE **)(a1 + 32);
    if (v12 != *(_BYTE **)(a1 + 64) && *v12 == 123)
    {
      v13 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v12 + 1;
      *(_QWORD *)(a1 + 40) = v13;
      ++*(_QWORD *)(a1 + 56);
      v14 = *(_OWORD *)(v5 + 16);
      v19 = *(_OWORD *)v5;
      v20 = v14;
      sub_20C14AF84(a1, a2);
      sub_20C14B0F8((_QWORD *)a1);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v4;
    *(_OWORD *)v6 = v17;
    *(_QWORD *)(v6 + 16) = v18;
    if (v4 == *(char **)(a1 + 64) || *v4 != 123)
      return 0;
    v15 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v4 + 1;
    *(_QWORD *)(a1 + 40) = v15;
    ++*(_QWORD *)(a1 + 56);
    sub_20C14AF84(a1, a2);
    sub_20C14B0F8((_QWORD *)a1);
  }
  return 1;
}

void sub_20C14AE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  _Unwind_Resume(a1);
}

void sub_20C14AE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *v11 = v10;
  *(_OWORD *)v12 = a9;
  *(_QWORD *)(v12 + 16) = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14AE48(_QWORD *a1)
{
  char *v1;
  int v3;
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  __int16 __s;
  uint64_t v9;

  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  __s = 10815;
  v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_20C14AEE0(_QWORD *a1)
{
  char *v1;
  int v3;
  __int16 *v4;
  char *v5;
  uint64_t v7;
  _BYTE __s[6];
  __int16 v9;

  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  qmemcpy(__s, "[]!-?*", sizeof(__s));
  v4 = (__int16 *)memchr(__s, v3, 6uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - __s == 6)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_20C14AF84(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  char v12;
  void *v13[3];
  uint64_t v14;
  void *__p;
  char v16;
  void **v17;

  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(char **)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  if (!sub_20C14B190((_QWORD *)a1, a2))
  {
    *(_QWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    sub_20C14D60C(a1);
  }
  do
    sub_20C14D2E4(a1, a2);
  while ((v5 & 1) != 0);
  sub_20BE93368(v11, v4, *(char **)(a1 + 32), *(_QWORD *)(a1 + 32) - (_QWORD)v4);
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::SdfPredicateExpression(v13, v11, v9);
  sub_20C14D540(a2 + 112, (uint64_t)v13);
  if (v16 < 0)
    operator delete(__p);
  v17 = (void **)&v14;
  sub_20C00BE5C(&v17);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  do
    result = sub_20C01AA0C((_QWORD *)a1);
  while ((result & 1) != 0);
  return result;
}

void sub_20C14B0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  *(_QWORD *)(v23 + 32) = v24;
  *(_OWORD *)v25 = a9;
  *(_QWORD *)(v25 + 16) = a10;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C14B0F8(_QWORD *result)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)result[4];
  if (v1 == (_BYTE *)result[8] || *v1 != 125)
    sub_20C14D748((uint64_t)result);
  v2 = result[5] + 1;
  result[4] = v1 + 1;
  result[5] = v2;
  ++result[7];
  return result;
}

void sub_20C14B14C()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C14B17C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14B190(_QWORD *a1, uint64_t a2)
{
  char v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  sub_20C14B278((uint64_t)a1);
  if ((sub_20C14B3CC((uint64_t)a1) & 1) != 0)
    return 1;
  if ((sub_20C14B4B4((uint64_t)a1) & 1) != 0)
    return 1;
  sub_20C14B6F0((uint64_t)a1);
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)a1[4];
  if (v5 != (_BYTE *)a1[8] && *v5 == 40)
  {
    v6 = a1[5] + 1;
    a1[4] = v5 + 1;
    a1[5] = v6;
    ++a1[7];
    if ((sub_20C14D060(a1, a2) & 1) == 0)
      sub_20C14CF24((uint64_t)a1);
    v7 = (_BYTE *)a1[4];
    if (v7 == (_BYTE *)a1[8] || *v7 != 41)
      sub_20C14D1A8((uint64_t)a1);
    v8 = a1[5] + 1;
    a1[4] = v7 + 1;
    a1[5] = v8;
    ++a1[7];
    return 1;
  }
  return 0;
}

__n128 sub_20C14B278(uint64_t a1)
{
  __n128 *v2;
  int v3;
  int v4;
  __n128 result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  v2 = (__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 48);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  sub_20C14B320(a1);
  if (v3)
  {
    v8 = *v2;
    v9 = v2[1];
    if (sub_20C01AA0C((_QWORD *)a1))
    {
      do
      {
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
        sub_20C14B320(a1);
        if (!v4)
          break;
        v8 = *v2;
        v9 = v2[1];
      }
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0);
    }
    *v2 = v8;
    v2[1] = v9;
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
  }
  else
  {
    result = v6;
    *v2 = v6;
    v2[1] = v7;
  }
  return result;
}

__n128 sub_20C14B320(uint64_t a1)
{
  __n128 result;
  __n128 v3;
  __int128 v4;

  if (sub_20C14B368((_QWORD *)a1))
  {
    v3 = *(__n128 *)(a1 + 32);
    v4 = *(_OWORD *)(a1 + 48);
    sub_20C01D710((_QWORD *)a1);
    result = v3;
    *(__n128 *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 48) = v4;
  }
  return result;
}

uint64_t sub_20C14B368(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 3)
    return 0;
  if (*(_WORD *)v1 != 28526 || *(_BYTE *)(v1 + 2) != 116)
    return 0;
  v4 = a1[5] + 3;
  a1[4] = v1 + 3;
  a1[5] = v4;
  a1[7] += 3;
  return 1;
}

uint64_t sub_20C14B3CC(uint64_t a1)
{
  _OWORD *v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;

  v2 = (_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  sub_20C14B7EC(a1);
  if (v3 && (v4 = *(_BYTE **)(a1 + 32), v4 != *(_BYTE **)(a1 + 64)) && *v4 == 58)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v4 + 1;
      *(_QWORD *)(a1 + 40) = v5;
      ++*(_QWORD *)(a1 + 56);
      sub_20C14BC00((__n128 *)a1);
      v4 = *(_BYTE **)(a1 + 32);
    }
    while (v4 != *(_BYTE **)(a1 + 64) && *v4 == 44);
    return 1;
  }
  else
  {
    result = 0;
    *v2 = v7;
    v2[1] = v8;
  }
  return result;
}

void sub_20C14B4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14B4B4(uint64_t a1)
{
  __int128 *v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = (__int128 *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  sub_20C14B7EC(a1);
  if (!v3)
    goto LABEL_14;
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(_BYTE **)(a1 + 32);
  if (v4 == *(_BYTE **)(a1 + 64) || *v4 != 40)
  {
LABEL_14:
    result = 0;
    *v2 = v11;
    v2[1] = v12;
    return result;
  }
  v5 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = v5;
  ++*(_QWORD *)(a1 + 56);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v13 = *v2;
  v14 = v2[1];
  if (sub_20C14CC68(a1))
  {
    v15 = *v2;
    v17 = v2[1];
    if (sub_20C14CD4C((_QWORD *)a1))
    {
      do
      {
        if ((sub_20C14CC68(a1) & 1) == 0)
          break;
        v15 = *v2;
        v17 = v2[1];
      }
      while ((sub_20C14CD4C((_QWORD *)a1) & 1) != 0);
    }
    *v2 = v15;
    v2[1] = v17;
    v16 = *v2;
    v18 = v2[1];
    if (sub_20C14CD4C((_QWORD *)a1))
    {
      sub_20C14CCCC((_QWORD *)a1);
      if (v6)
        goto LABEL_13;
    }
LABEL_16:
    *v2 = v16;
    v2[1] = v18;
    goto LABEL_17;
  }
  *v2 = v13;
  v2[1] = v14;
  v16 = *v2;
  v18 = v2[1];
  sub_20C14CCCC((_QWORD *)a1);
  if (!v8)
    goto LABEL_16;
LABEL_13:
  sub_20C14BC00((__n128 *)a1);
  sub_20C14CDC4((__n128 *)a1);
LABEL_17:
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v9 = *(_BYTE **)(a1 + 32);
  if (v9 == *(_BYTE **)(a1 + 64) || *v9 != 41)
    sub_20C14CE38(a1);
  v10 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v9 + 1;
  *(_QWORD *)(a1 + 40) = v10;
  ++*(_QWORD *)(a1 + 56);
  return 1;
}

void sub_20C14B668()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C14B69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(exception_object);
}

double sub_20C14B6F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;
  int v7;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 __p;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 40;
  v14 = *(_OWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 56);
  if (!sub_20C01DDD0((_QWORD *)a1))
    goto LABEL_10;
  while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(_QWORD *)(a1 + 32);
  v8[0] = v2;
  v8[1] = v2;
  v9 = v14;
  v10 = v15;
  v11 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v13 = *(_QWORD *)(a1 + 88);
  }
  *(_QWORD *)&result = sub_20C14B8E8((uint64_t)v8).n128_u64[0];
  v7 = v5;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if (v5)
      return result;
LABEL_10:
    *(_QWORD *)(a1 + 32) = v2;
    result = *(double *)&v14;
    *(_OWORD *)v3 = v14;
    *(_QWORD *)(v3 + 16) = v15;
    return result;
  }
  operator delete((void *)__p);
  if (!v7)
    goto LABEL_10;
  return result;
}

void sub_20C14B7D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 32) = v3;
  *(_OWORD *)v2 = *(_OWORD *)(v4 - 64);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v4 - 48);
  _Unwind_Resume(a1);
}

double sub_20C14B7EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  double result;
  char v7;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 __p;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 40;
  v14 = *(_OWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 56);
  if (!sub_20C01DDD0((_QWORD *)a1))
    goto LABEL_10;
  while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(_QWORD *)(a1 + 32);
  v8[0] = v2;
  v8[1] = v2;
  v9 = v14;
  v10 = v15;
  v11 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v13 = *(_QWORD *)(a1 + 88);
  }
  *(_QWORD *)&result = sub_20C14B8E8((uint64_t)v8).n128_u64[0];
  v7 = v5;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      return result;
LABEL_10:
    *(_QWORD *)(a1 + 32) = v2;
    result = *(double *)&v14;
    *(_OWORD *)v3 = v14;
    *(_QWORD *)(v3 + 16) = v15;
    return result;
  }
  operator delete((void *)__p);
  if ((v7 & 1) == 0)
    goto LABEL_10;
  return result;
}

void sub_20C14B8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 32) = v3;
  *(_OWORD *)v2 = *(_OWORD *)(v4 - 64);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v4 - 48);
  _Unwind_Resume(a1);
}

__n128 sub_20C14B8E8(uint64_t a1)
{
  __n128 *v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;

  v2 = (__n128 *)(a1 + 8);
  v9 = *(__n128 *)(a1 + 8);
  v10 = *(__n128 *)(a1 + 24);
  if (!sub_20C14BA7C((_QWORD *)a1)
    || (v19 = *v2, v25 = v2[1], v3 = sub_20C08DDF4((_QWORD *)a1), *v2 = v19, v2[1] = v25, (v3 & 1) != 0))
  {
    *v2 = v9;
    v2[1] = v10;
    v11 = *v2;
    v15 = v2[1];
    if (!sub_20C14BAE0((_QWORD *)a1)
      || (v20 = *v2, v26 = v2[1], v4 = sub_20C08DDF4((_QWORD *)a1), *v2 = v20, v2[1] = v26, (v4 & 1) != 0))
    {
      *v2 = v11;
      v2[1] = v15;
      v12 = *v2;
      v16 = v2[1];
      if (!sub_20C14BB44((_QWORD *)a1)
        || (v21 = *v2, v27 = v2[1], v5 = sub_20C08DDF4((_QWORD *)a1), *v2 = v21, v2[1] = v27, (v5 & 1) != 0))
      {
        *v2 = v12;
        v2[1] = v16;
        v13 = *v2;
        v17 = v2[1];
        if (!sub_20C14BB9C((_QWORD *)a1)
          || (v22 = *v2, v28 = v2[1], v6 = sub_20C08DDF4((_QWORD *)a1), *v2 = v22, v2[1] = v28, (v6 & 1) != 0))
        {
          *v2 = v13;
          v2[1] = v17;
          v14 = *v2;
          v18 = v2[1];
          if (!sub_20C09C118((_QWORD *)a1)
            || (v23 = *v2, v29 = v2[1], v7 = sub_20C08DDF4((_QWORD *)a1), *v2 = v23, v2[1] = v29, (v7 & 1) != 0))
          {
            *v2 = v14;
            v2[1] = v18;
            if (sub_20C09C49C((_QWORD *)a1))
            {
              v24 = *v2;
              v30 = v2[1];
              sub_20C08DDF4((_QWORD *)a1);
              *v2 = v24;
              v2[1] = v30;
            }
          }
        }
      }
    }
  }
  result = v9;
  *v2 = v9;
  v2[1] = v10;
  return result;
}

uint64_t sub_20C14BA7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 3)
    return 0;
  if (*(_WORD *)v1 != 28526 || *(_BYTE *)(v1 + 2) != 116)
    return 0;
  v4 = a1[2] + 3;
  a1[1] = v1 + 3;
  a1[2] = v4;
  a1[4] += 3;
  return 1;
}

uint64_t sub_20C14BAE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 3)
    return 0;
  if (*(_WORD *)v1 != 28257 || *(_BYTE *)(v1 + 2) != 100)
    return 0;
  v4 = a1[2] + 3;
  a1[1] = v1 + 3;
  a1[2] = v4;
  a1[4] += 3;
  return 1;
}

uint64_t sub_20C14BB44(_QWORD *a1)
{
  _WORD *v1;
  uint64_t v3;

  v1 = (_WORD *)a1[1];
  if (a1[5] - (_QWORD)v1 < 2uLL || *v1 != 29295)
    return 0;
  v3 = a1[2] + 2;
  a1[1] = v1 + 1;
  a1[2] = v3;
  a1[4] += 2;
  return 1;
}

uint64_t sub_20C14BB9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 3)
    return 0;
  if (*(_WORD *)v1 != 28265 || *(_BYTE *)(v1 + 2) != 102)
    return 0;
  v4 = a1[2] + 3;
  a1[1] = v1 + 3;
  a1[2] = v4;
  a1[4] += 3;
  return 1;
}

void sub_20C14BC00(__n128 *a1)
{
  char v2;

  if ((sub_20C14BC60((uint64_t)a1) & 1) == 0)
  {
    sub_20C14BDE4(a1);
    if ((v2 & 1) == 0 && (sub_20C14BE58((uint64_t)a1) & 1) == 0 && (sub_20C14C31C((uint64_t)a1) & 1) == 0)
    {
      do
      {
        while ((sub_20C01D710(a1) & 1) != 0)
          ;
      }
      while ((sub_20C14CB94(a1) & 1) != 0);
    }
  }
}

uint64_t sub_20C14BC60(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  char v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = (__int128 *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  if ((_QWORD)v8 != *(_QWORD *)(a1 + 64) && *(_BYTE *)v8 == 45)
  {
    v3 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v8 + 1;
    *(_QWORD *)(a1 + 40) = v3;
    ++*(_QWORD *)(a1 + 56);
  }
  v10 = *v2;
  v11 = *(_OWORD *)(a1 + 48);
  if (sub_20C14BEF8((_QWORD *)a1))
  {
    v12 = *v2;
    v14 = v2[1];
    v4 = sub_20C01D710((_QWORD *)a1);
    *v2 = v12;
    v2[1] = v14;
    if ((v4 & 1) == 0)
      return 1;
  }
  *v2 = v10;
  v2[1] = v11;
  if (!sub_20C14BF5C((_QWORD *)a1))
    goto LABEL_16;
  v5 = *(_BYTE **)(a1 + 32);
  if (v5 != *(_BYTE **)(a1 + 64) && *v5 == 46)
  {
    v6 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v5 + 1;
    *(_QWORD *)(a1 + 40) = v6;
    ++*(_QWORD *)(a1 + 56);
    if (sub_20C14BF5C((_QWORD *)a1))
    {
      v13 = *v2;
      v15 = v2[1];
      if (sub_20C14C120((_QWORD *)a1))
      {
        sub_20C14C1B8((_QWORD *)a1);
        if ((sub_20C14BF5C((_QWORD *)a1) & 1) == 0)
          sub_20C14BFE4(a1);
      }
      else
      {
        *v2 = v13;
        v2[1] = v15;
      }
      return 1;
    }
LABEL_15:
    sub_20C14BFE4(a1);
  }
  if (!sub_20C14C120((_QWORD *)a1))
  {
LABEL_16:
    result = 0;
    *v2 = v8;
    v2[1] = v9;
    return result;
  }
  sub_20C14C1B8((_QWORD *)a1);
  if ((sub_20C14BF5C((_QWORD *)a1) & 1) == 0)
    goto LABEL_15;
  return 1;
}

void sub_20C14BDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;

  v12 = *(_OWORD *)(v11 - 32);
  *v10 = *(_OWORD *)(v11 - 48);
  v10[1] = v12;
  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_20C14BDE4(__n128 *a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __n128 v5;

  v1 = a1 + 2;
  v4 = a1[2];
  v5 = a1[3];
  if (v4.n128_u64[0] != a1[4].n128_u64[0] && *(_BYTE *)v4.n128_u64[0] == 45)
  {
    v2 = a1[2].n128_u64[1] + 1;
    a1[2].n128_u64[0] = v4.n128_u64[0] + 1;
    a1[2].n128_u64[1] = v2;
    ++a1[3].n128_u64[1];
  }
  if (!sub_20C14BF5C(a1))
  {
    result = v4;
    *v1 = v4;
    v1[1] = v5;
  }
  return result;
}

uint64_t sub_20C14BE58(uint64_t a1)
{
  __int128 *v2;
  char v3;
  char v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = (__int128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  if (sub_20C14C250((_QWORD *)a1))
  {
    v10 = *v2;
    v12 = v2[1];
    v3 = sub_20C01D710((_QWORD *)a1);
    *v2 = v10;
    v2[1] = v12;
    if ((v3 & 1) == 0)
      return 1;
  }
  *v2 = v6;
  v2[1] = v8;
  v7 = *v2;
  v9 = v2[1];
  if (sub_20C14C2B0((_QWORD *)a1))
  {
    v11 = *v2;
    v13 = v2[1];
    v4 = sub_20C01D710((_QWORD *)a1);
    *v2 = v11;
    v2[1] = v13;
    if ((v4 & 1) == 0)
      return 1;
  }
  result = 0;
  *v2 = v7;
  v2[1] = v9;
  return result;
}

uint64_t sub_20C14BEF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 3)
    return 0;
  if (*(_WORD *)v1 != 28265 || *(_BYTE *)(v1 + 2) != 102)
    return 0;
  v4 = a1[5] + 3;
  a1[4] = v1 + 3;
  a1[5] = v4;
  a1[7] += 3;
  return 1;
}

uint64_t sub_20C14BF5C(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (unsigned __int8 *)a1[4];
  v2 = (unsigned __int8 *)a1[8];
  if (v1 == v2 || *v1 - 48 > 9)
    return 0;
  v3 = v1 + 1;
  v4 = a1[5];
  a1[4] = v3;
  a1[5] = v4 + 1;
  v5 = a1[7];
  a1[7] = v5 + 1;
  if (v3 != v2)
  {
    v6 = v5 + 2;
    v7 = v4 + 2;
    do
    {
      if (*v3 - 48 > 9)
        break;
      a1[4] = ++v3;
      a1[5] = v7;
      a1[7] = v6++;
      ++v7;
    }
    while (v3 != v2);
  }
  return 1;
}

void sub_20C14BFE4(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14C0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C14C120(_QWORD *a1)
{
  char *v1;
  int v3;
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  __int16 __s;
  uint64_t v9;

  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  __s = 17765;
  v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_20C14C1B8(_QWORD *a1)
{
  char *v1;
  int v3;
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  __int16 __s;
  uint64_t v9;

  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  __s = 11053;
  v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_20C14C250(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v3;

  v1 = (_DWORD *)a1[4];
  if (a1[8] - (_QWORD)v1 < 4uLL || *v1 != 1702195828)
    return 0;
  v3 = a1[5] + 4;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 4;
  return 1;
}

uint64_t sub_20C14C2B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 5)
    return 0;
  if (*(_DWORD *)v1 != 1936482662 || *(_BYTE *)(v1 + 4) != 101)
    return 0;
  v4 = a1[5] + 5;
  a1[4] = v1 + 5;
  a1[5] = v4;
  a1[7] += 5;
  return 1;
}

uint64_t sub_20C14C31C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned __int8 **v19;
  uint64_t v21;
  __int128 *v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned __int8 **v31;
  void *v32;
  char *v33;
  void *v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void *v40;
  char *v41;
  void *exception;
  char *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  __int128 v48;
  std::string v49;
  unsigned __int8 *v50;
  __int128 __p;
  uint64_t v52;
  std::string v53;

  v2 = (unsigned __int8 **)(a1 + 32);
  v1 = *(unsigned __int8 **)(a1 + 32);
  v3 = *(unsigned __int8 **)(a1 + 64);
  if (v1 == v3)
    return 0;
  v5 = *v1;
  if (v5 != 39)
  {
    if (v5 == 34)
    {
      v6 = v1 + 1;
      v7 = (_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v8;
      v9 = (_QWORD *)(a1 + 56);
      v10 = (__int128 *)(a1 + 72);
      ++*(_QWORD *)(a1 + 56);
      while (1)
      {
        if (v6 != v3)
        {
          v11 = *v6;
          if (v11 == 92)
          {
            *v2 = v6 + 1;
            v14 = (*v7)++;
            v15 = (*v9)++;
            if (v6 + 1 == v3 || v6[1] != 34)
            {
              if ((sub_20C14CA8C((_QWORD *)a1) & 1) == 0)
              {
                exception = __cxa_allocate_exception(0x28uLL);
                v43 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
                if (v43)
                {
                  sub_20BDDC0E4(&v53, v43);
                  free(v43);
                }
                else
                {
                  sub_20BDDC0E4(&v53, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
                }
                v46 = std::string::insert(&v53, 0, "parse error matching ");
                v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                v49.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__r.__words[2];
                v48 = v47;
                v46->__r_.__value_.__l.__size_ = 0;
                v46->__r_.__value_.__r.__words[2] = 0;
                v46->__r_.__value_.__r.__words[0] = 0;
                sub_20C01ADA0((uint64_t)exception, (uint64_t)&v48, a1);
                __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
              }
            }
            else
            {
              *v2 = v6 + 2;
              *v7 = v14 + 2;
              *v9 = v15 + 2;
            }
            goto LABEL_28;
          }
          if (v11 == 34)
            goto LABEL_55;
        }
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
        v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
        if (!sub_20C14CB30((_QWORD *)a1))
        {
          *v2 = v6;
          *(_OWORD *)v7 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 56) = *((_QWORD *)&v53.__r_.__value_.__l + 2);
LABEL_57:
          v32 = __cxa_allocate_exception(0x28uLL);
          v33 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v33)
          {
            sub_20BDDC0E4(&v53, v33);
            free(v33);
          }
          else
          {
            sub_20BDDC0E4(&v53, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          v38 = std::string::insert(&v53, 0, "parse error matching ");
          v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__r.__words[2];
          v48 = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          sub_20C01ADA0((uint64_t)v32, (uint64_t)&v48, a1);
          __cxa_throw(v32, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
        }
        v12 = *(unsigned __int8 **)(a1 + 32);
        *(_QWORD *)&v48 = v6;
        *((_QWORD *)&v48 + 1) = v6;
        v49 = v53;
        v50 = v12;
        if (*(char *)(a1 + 95) < 0)
        {
          sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
          v13 = (unsigned __int8 *)*((_QWORD *)&v48 + 1);
          v12 = v50;
        }
        else
        {
          __p = *v10;
          v52 = *(_QWORD *)(a1 + 88);
          v13 = v6;
        }
        if (v13 != v12 && (v17 = *v13, v16 = v13 + 1, v17 == 34) && v16 == v12)
        {
          v18 = 0;
          v19 = v2;
        }
        else
        {
          v19 = 0;
          v18 = 1;
        }
        if (SHIBYTE(v52) < 0)
        {
          operator delete((void *)__p);
          if (v19)
          {
LABEL_22:
            *v19 = v6;
            *(std::string *)(v19 + 1) = v53;
            if ((v18 & 1) == 0)
              goto LABEL_57;
            goto LABEL_28;
          }
        }
        else if (v19)
        {
          goto LABEL_22;
        }
        if (!v18)
          goto LABEL_57;
LABEL_28:
        v6 = *(unsigned __int8 **)(a1 + 32);
        v3 = *(unsigned __int8 **)(a1 + 64);
      }
    }
    return 0;
  }
  v6 = v1 + 1;
  v7 = (_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v21;
  v9 = (_QWORD *)(a1 + 56);
  v22 = (__int128 *)(a1 + 72);
  ++*(_QWORD *)(a1 + 56);
  while (1)
  {
    if (v6 != v3)
    {
      v23 = *v6;
      if (v23 == 92)
      {
        *v2 = v6 + 1;
        v26 = (*v7)++;
        v27 = (*v9)++;
        if (v6 + 1 == v3 || v6[1] != 39)
        {
          if ((sub_20C14CA8C((_QWORD *)a1) & 1) == 0)
          {
            v40 = __cxa_allocate_exception(0x28uLL);
            v41 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v41)
            {
              sub_20BDDC0E4(&v53, v41);
              free(v41);
            }
            else
            {
              sub_20BDDC0E4(&v53, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            v44 = std::string::insert(&v53, 0, "parse error matching ");
            v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
            v49.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__r.__words[2];
            v48 = v45;
            v44->__r_.__value_.__l.__size_ = 0;
            v44->__r_.__value_.__r.__words[2] = 0;
            v44->__r_.__value_.__r.__words[0] = 0;
            sub_20C01ADA0((uint64_t)v40, (uint64_t)&v48, a1);
            __cxa_throw(v40, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
          }
        }
        else
        {
          *v2 = v6 + 2;
          *v7 = v26 + 2;
          *v9 = v27 + 2;
        }
        goto LABEL_54;
      }
      if (v23 == 39)
        break;
    }
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    if (!sub_20C14CB30((_QWORD *)a1))
    {
      *v2 = v6;
      *(_OWORD *)v7 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 56) = *((_QWORD *)&v53.__r_.__value_.__l + 2);
LABEL_60:
      v34 = __cxa_allocate_exception(0x28uLL);
      v35 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v35)
      {
        sub_20BDDC0E4(&v53, v35);
        free(v35);
      }
      else
      {
        sub_20BDDC0E4(&v53, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      v36 = std::string::insert(&v53, 0, "parse error matching ");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__r.__words[2];
      v48 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      sub_20C01ADA0((uint64_t)v34, (uint64_t)&v48, a1);
      __cxa_throw(v34, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
    }
    v24 = *(unsigned __int8 **)(a1 + 32);
    *(_QWORD *)&v48 = v6;
    *((_QWORD *)&v48 + 1) = v6;
    v49 = v53;
    v50 = v24;
    if (*(char *)(a1 + 95) < 0)
    {
      sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      v25 = (unsigned __int8 *)*((_QWORD *)&v48 + 1);
      v24 = v50;
    }
    else
    {
      __p = *v22;
      v52 = *(_QWORD *)(a1 + 88);
      v25 = v6;
    }
    if (v25 != v24 && (v29 = *v25, v28 = v25 + 1, v29 == 39) && v28 == v24)
    {
      v30 = 0;
      v31 = v2;
    }
    else
    {
      v31 = 0;
      v30 = 1;
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)__p);
      if (v31)
      {
LABEL_48:
        *v31 = v6;
        *(std::string *)(v31 + 1) = v53;
        if ((v30 & 1) == 0)
          goto LABEL_60;
        goto LABEL_54;
      }
    }
    else if (v31)
    {
      goto LABEL_48;
    }
    if (!v30)
      goto LABEL_60;
LABEL_54:
    v6 = *(unsigned __int8 **)(a1 + 32);
    v3 = *(unsigned __int8 **)(a1 + 64);
  }
LABEL_55:
  *v2 = v6 + 1;
  ++*v7;
  ++*v9;
  return 1;
}

void sub_20C14C9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete((void *)a22);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

uint64_t sub_20C14CA8C(_QWORD *a1)
{
  char *v1;
  int v3;
  __int16 *v4;
  char *v5;
  uint64_t v7;
  _BYTE __s[6];
  __int16 v9;

  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  qmemcpy(__s, "\\bfnrt", sizeof(__s));
  v4 = (__int16 *)memchr(__s, v3, 6uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - __s == 6)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

BOOL sub_20C14CB30(_QWORD *a1)
{
  unint64_t v2;
  _BOOL8 result;
  unint64_t v5;
  uint64_t v6;

  v2 = sub_20C01A30C((uint64_t)a1);
  result = (v2 & 0xFF00000000) != 0 && (v2 - 32) < 0x10FFE0;
  if (result)
  {
    v5 = HIDWORD(v2);
    v6 = a1[5] + v5;
    a1[4] += v5;
    a1[5] = v6;
    a1[7] += v5;
  }
  return result;
}

uint64_t sub_20C14CB94(_QWORD *a1)
{
  char *v1;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v7;
  __int128 v8;
  char v9;
  _BYTE v10[15];

  *(_QWORD *)&v10[7] = *MEMORY[0x24BDAC8D0];
  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  v8 = *(_OWORD *)"~!@#$%^&*-+=|\\.?/N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE";
  v9 = 47;
  v4 = memchr(&v8, v3, 0x11uLL);
  v5 = v4 ? v4 : v10;
  if (v5 - (_BYTE *)&v8 == 17)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_20C14CC68(uint64_t a1)
{
  _OWORD *v2;
  int v3;
  int v4;
  __int128 v6;
  __int128 v7;

  v2 = (_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  sub_20C14CCCC((_QWORD *)a1);
  v4 = v3;
  *v2 = v6;
  v2[1] = v7;
  if ((v3 & 1) == 0)
    sub_20C14BC00((__n128 *)a1);
  return v4 ^ 1u;
}

void sub_20C14CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C14CCCC(_QWORD *a1)
{
  int v2;
  _BYTE *v3;
  uint64_t v4;

  sub_20C14B7EC((uint64_t)a1);
  if (v2)
  {
    while ((sub_20C01AA0C(a1) & 1) != 0)
      ;
    v3 = (_BYTE *)a1[4];
    if (v3 != (_BYTE *)a1[8] && *v3 == 61)
    {
      v4 = a1[5] + 1;
      a1[4] = v3 + 1;
      a1[5] = v4;
      ++a1[7];
      while ((sub_20C01AA0C(a1) & 1) != 0)
        ;
    }
  }
}

uint64_t sub_20C14CD4C(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;

  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  v2 = (_BYTE *)a1[4];
  if (v2 == (_BYTE *)a1[8] || *v2 != 44)
    return 0;
  v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  return 1;
}

__n128 sub_20C14CDC4(__n128 *a1)
{
  __n128 *v2;
  int v3;
  __n128 result;
  __n128 v5;
  __n128 v6;

  v2 = a1 + 2;
  v5 = a1[2];
  v6 = a1[3];
  if (sub_20C14CD4C(a1))
  {
    do
    {
      sub_20C14CCCC(a1);
      if (!v3)
        break;
      sub_20C14BC00(a1);
      v5 = *v2;
      v6 = v2[1];
    }
    while ((sub_20C14CD4C(a1) & 1) != 0);
  }
  result = v5;
  *v2 = v5;
  v2[1] = v6;
  return result;
}

void sub_20C14CE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C14CE38(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C0A4E60(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14CEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C14CF24(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14CFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C14D060(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  v4 = sub_20C14D0B0(a1, a2);
  if ((_DWORD)v4)
  {
    while ((sub_20C01AA0C(a1) & 1) != 0)
      ;
  }
  return v4;
}

uint64_t sub_20C14D0B0(_QWORD *a1, uint64_t a2)
{
  double v4;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;

  sub_20C14B278((uint64_t)a1);
  if ((sub_20C14B3CC((uint64_t)a1) & 1) == 0 && (sub_20C14B4B4((uint64_t)a1) & 1) == 0)
  {
    v4 = sub_20C14B6F0((uint64_t)a1);
    if ((v5 & 1) == 0)
    {
      v6 = (_BYTE *)a1[4];
      if (v6 == (_BYTE *)a1[8] || *v6 != 40)
        return 0;
      v7 = a1[5] + 1;
      a1[4] = v6 + 1;
      a1[5] = v7;
      ++a1[7];
      if ((sub_20C14D060(a1, a2, v4) & 1) == 0)
        sub_20C14CF24((uint64_t)a1);
      v8 = (_BYTE *)a1[4];
      if (v8 == (_BYTE *)a1[8] || *v8 != 41)
        sub_20C14D1A8((uint64_t)a1);
      v9 = a1[5] + 1;
      a1[4] = v8 + 1;
      a1[5] = v9;
      ++a1[7];
    }
  }
  do
    sub_20C14D2E4((uint64_t)a1, a2);
  while ((v10 & 1) != 0);
  return 1;
}

void sub_20C14D1A8(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14D274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

__n128 sub_20C14D2E4(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;
  __n128 v8;

  v4 = (__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 32);
  v8 = *(__n128 *)(a1 + 48);
  if ((sub_20C14D398(a1) & 1) == 0)
  {
    *v4 = v7;
    v4[1] = v8;
LABEL_7:
    result = v7;
    *v4 = v7;
    v4[1] = v8;
    return result;
  }
  v5 = sub_20C14B190(a1, a2);
  *v4 = v7;
  v4[1] = v8;
  if (!v5 || !sub_20C14D398(a1) || (sub_20C14B190(a1, a2) & 1) == 0)
    goto LABEL_7;
  return result;
}

void sub_20C14D380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14D398(uint64_t a1)
{
  __int128 *v2;
  char v3;
  char v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = (__int128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  if (sub_20C14D484((_QWORD *)a1)
    && (v10 = *v2, v12 = v2[1], v3 = sub_20C01D710((_QWORD *)a1), *v2 = v10, v2[1] = v12, (v3 & 1) == 0))
  {
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
  }
  else
  {
    *v2 = v6;
    v2[1] = v8;
    v7 = *v2;
    v9 = v2[1];
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
    if (sub_20C14D4E8((_QWORD *)a1)
      && (v11 = *v2, v13 = v2[1], v4 = sub_20C01D710((_QWORD *)a1), *v2 = v11, v2[1] = v13, (v4 & 1) == 0))
    {
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
    }
    else
    {
      *v2 = v7;
      v2[1] = v9;
      result = sub_20C01AA0C((_QWORD *)a1);
      if (!(_DWORD)result)
        return result;
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
    }
  }
  return 1;
}

uint64_t sub_20C14D484(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 3)
    return 0;
  if (*(_WORD *)v1 != 28257 || *(_BYTE *)(v1 + 2) != 100)
    return 0;
  v4 = a1[5] + 3;
  a1[4] = v1 + 3;
  a1[5] = v4;
  a1[7] += 3;
  return 1;
}

uint64_t sub_20C14D4E8(_QWORD *a1)
{
  _WORD *v1;
  uint64_t v3;

  v1 = (_WORD *)a1[4];
  if (a1[8] - (_QWORD)v1 < 2uLL || *v1 != 29295)
    return 0;
  v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

uint64_t sub_20C14D540(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;

  sub_20C14D5BC(a1, (__n128 *)a2);
  sub_20C147ABC((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 71) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  return a1;
}

__n128 sub_20C14D5BC(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_20C14D60C(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_116EmbeddedPredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_116EmbeddedPredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14D6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C14D748(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C14D834(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14D7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C14D834(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB7DACLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB7DACLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C14D8B0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14D8C4(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;

  if ((sub_20C14A9B0(a1) & 1) != 0)
    return 1;
  v2 = (_BYTE *)a1[4];
  if (v2 != (_BYTE *)a1[8] && *v2 == 47)
  {
    v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
    return 1;
  }
  return 0;
}

uint64_t sub_20C14D92C(_QWORD *a1, uint64_t a2)
{
  int v4;
  _BYTE *v5;
  uint64_t v6;

  sub_20C14D9CC((uint64_t)a1);
  if (v4)
  {
    sub_20C14DAB4(a1, a2);
    return 1;
  }
  v5 = (_BYTE *)a1[4];
  if (v5 != (_BYTE *)a1[8] && *v5 == 123)
  {
    v6 = a1[5] + 1;
    a1[4] = v5 + 1;
    a1[5] = v6;
    ++a1[7];
    if ((sub_20C14D060(a1, a2) & 1) == 0)
      sub_20C14D60C((uint64_t)a1);
    sub_20C14DB54(a1);
    return 1;
  }
  return 0;
}

__n128 sub_20C14D9CC(uint64_t a1)
{
  __n128 *v2;
  _BYTE *v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  v2 = (__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 48);
  if ((sub_20C01D710((_QWORD *)a1) & 1) != 0 || sub_20C14AE48((_QWORD *)a1))
  {
    do
    {
      while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
        ;
    }
    while ((sub_20C14AE48((_QWORD *)a1) & 1) != 0);
    v8 = *v2;
    v9 = v2[1];
    v3 = *(_BYTE **)(a1 + 32);
    if (v3 != *(_BYTE **)(a1 + 64)
      && *v3 == 91
      && ((v4 = *(_QWORD *)(a1 + 40) + 1,
           *(_QWORD *)(a1 + 32) = v3 + 1,
           *(_QWORD *)(a1 + 40) = v4,
           ++*(_QWORD *)(a1 + 56),
           (sub_20C01D710((_QWORD *)a1) & 1) != 0)
       || sub_20C14AEE0((_QWORD *)a1)))
    {
      do
      {
        while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
          ;
      }
      while ((sub_20C14AEE0((_QWORD *)a1) & 1) != 0);
    }
    else
    {
      result = v8;
      *v2 = v8;
      v2[1] = v9;
    }
  }
  else
  {
    result = v6;
    *v2 = v6;
    v2[1] = v7;
  }
  return result;
}

_QWORD *sub_20C14DAB4(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_BYTE *)result[4];
  if (v2 != (_BYTE *)result[8] && *v2 == 123)
  {
    v3 = result;
    v4 = result[5] + 1;
    result[4] = v2 + 1;
    result[5] = v4;
    ++result[7];
    if ((sub_20C14D060(result, a2) & 1) == 0)
      sub_20C14D60C((uint64_t)v3);
    return sub_20C14DB54(v3);
  }
  return result;
}

void sub_20C14DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

_QWORD *sub_20C14DB54(_QWORD *result)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)result[4];
  if (v1 == (_BYTE *)result[8] || *v1 != 125)
    sub_20C14DBA0((uint64_t)result);
  v2 = result[5] + 1;
  result[4] = v1 + 1;
  result[5] = v2;
  ++result[7];
  return result;
}

void sub_20C14DBA0(uint64_t a1)
{
  sub_20C14D748(a1);
}

void sub_20C14DBB0()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C14DBE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20C14DBF4(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_119PropPathPatternElemE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_119PropPathPatternElemE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_DWORD *sub_20C14DD30(uint64_t a1)
{
  void **v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  sub_20C14DE48((uint64_t *)(*(_QWORD *)(a1 + 8) - 48), a1 + 24);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::PathPattern((pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *)v4);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  sub_20BFD3EBC((int *)(a1 + 24), (int *)v4);
  sub_20BFD3F10((int *)(a1 + 28), (int *)v4 + 1);
  sub_20BFD3E84((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)((char *)v4 + 8);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v4[1] + 1);
  memset((char *)v4 + 8, 0, 24);
  sub_20C1477E0((void **)(a1 + 56));
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)&v6 = 0;
  v5 = 0uLL;
  *(_BYTE *)(a1 + 80) = BYTE8(v6);
  v2 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v7;
  *(_QWORD *)(a1 + 104) = v8;
  BYTE7(v8) = 0;
  LOBYTE(v7) = 0;
  sub_20C14D540(a1 + 112, (uint64_t)&v8 + 8);
  return sub_20C1490B8((uint64_t)v4);
}

void sub_20C14DE48(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *v7[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  void **v15;

  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom(a2, (char **)v7);
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    v5 = sub_20C1482F8(a1 + 3, (uint64_t)v7);
    v6 = SHIBYTE(v14);
    a1[4] = v5;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_OWORD *)v3 = *(_OWORD *)v7;
    *(_QWORD *)(v3 + 16) = v8;
    v7[0] = 0;
    v7[1] = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_OWORD *)(v3 + 24) = v9;
    *(_QWORD *)(v3 + 40) = v10;
    *(_QWORD *)(v3 + 48) = 0;
    v8 = 0;
    v9 = 0uLL;
    v10 = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_OWORD *)(v3 + 48) = v11;
    *(_QWORD *)(v3 + 64) = v12;
    v11 = 0uLL;
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 88) = v14;
    *(_OWORD *)(v3 + 72) = v4;
    v12 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v14 = 0;
    a1[4] = v3 + 96;
  }
  v15 = (void **)&v11;
  sub_20C00E25C(&v15);
  v15 = (void **)&v9;
  sub_20C00D5A8(&v15);
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_20C14DF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00BBB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14DF60(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  v4 = sub_20C1491D4(a1, a2);
  if ((_DWORD)v4)
  {
    while ((sub_20C01AA0C(a1) & 1) != 0)
      ;
  }
  return v4;
}

void sub_20C14DFB0(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C14E0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 32);
  if ((_QWORD)v4 == *(_QWORD *)(a1 + 64) || *(_BYTE *)v4 != 41)
    return 0;
  v2 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = v2;
  ++*(_QWORD *)(a1 + 56);
  sub_20C14E170(a2);
  return 1;
}

void sub_20C14E164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C14E170(uint64_t a1)
{
  uint64_t v2;
  void *v3[3];
  uint64_t v4;
  uint64_t v5;
  void *__p;
  char v7;
  void **v8;

  sub_20C14E228((uint64_t *)(*(_QWORD *)(a1 + 8) - 48), (uint64_t)v3);
  v2 = *(_QWORD *)(a1 + 8);
  sub_20C149000(a1 + 16, v2 - 48);
  *(_QWORD *)(a1 + 8) = v2 - 48;
  sub_20C14E2F4((uint64_t *)(v2 - 96), (uint64_t)v3);
  if (v7 < 0)
    operator delete(__p);
  v8 = (void **)&v5;
  sub_20C00E25C(&v8);
  v8 = (void **)&v4;
  sub_20C00D5A8(&v8);
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_20C14E214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C00BBB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C14E228(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  __int128 v7;
  uint64_t j;
  uint64_t v9;

  v4 = *a1;
  for (i = a1[1]; v4 != i; i = a1[1])
  {
    sub_20C14974C(a1);
    v4 = *a1;
  }
  v6 = a1[4];
  *(_OWORD *)a2 = *(_OWORD *)(v6 - 96);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 - 80);
  *(_QWORD *)(v6 - 96) = 0;
  *(_QWORD *)(v6 - 88) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v6 - 72);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v6 - 56);
  *(_QWORD *)(v6 - 80) = 0;
  *(_QWORD *)(v6 - 72) = 0;
  *(_QWORD *)(v6 - 64) = 0;
  *(_QWORD *)(v6 - 56) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v6 - 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v6 - 32);
  *(_QWORD *)(v6 - 48) = 0;
  *(_QWORD *)(v6 - 40) = 0;
  v7 = *(_OWORD *)(v6 - 24);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(v6 - 8);
  *(_OWORD *)(a2 + 72) = v7;
  *(_QWORD *)(v6 - 32) = 0;
  *(_QWORD *)(v6 - 24) = 0;
  *(_QWORD *)(v6 - 16) = 0;
  *(_QWORD *)(v6 - 8) = 0;
  v9 = a1[3];
  for (j = a1[4]; j != v9; sub_20C14816C((uint64_t)(a1 + 5), j))
    j -= 96;
  a1[4] = v9;
}

uint64_t sub_20C14E2F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[5];
  v3 = (uint64_t)(a1 + 5);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = sub_20C1482F8(a1 + 3, a2);
  }
  else
  {
    sub_20C148400(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 96;
  }
  a1[4] = result;
  return result;
}

void sub_20C14E344(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118PathExprCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118PathExprCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14E410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C14E480(uint64_t a1)
{
  __int128 *v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = (__int128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v3 = *(_BYTE **)(a1 + 32);
  if (v3 == *(_BYTE **)(a1 + 64) || *v3 != 43)
  {
    *v2 = v10;
    v2[1] = v13;
    v11 = *v2;
    v14 = v2[1];
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
    v5 = *(_BYTE **)(a1 + 32);
    if (v5 == *(_BYTE **)(a1 + 64) || *v5 != 38)
    {
      *v2 = v11;
      v2[1] = v14;
      v12 = *v2;
      v15 = v2[1];
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
      v7 = *(_BYTE **)(a1 + 32);
      if (v7 == *(_BYTE **)(a1 + 64) || *v7 != 45)
      {
        *v2 = v12;
        v2[1] = v15;
        result = sub_20C01AA0C((_QWORD *)a1);
        if (!(_DWORD)result)
          return result;
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v7 + 1;
        *(_QWORD *)(a1 + 40) = v8;
        ++*(_QWORD *)(a1 + 56);
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
      }
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v5 + 1;
      *(_QWORD *)(a1 + 40) = v6;
      ++*(_QWORD *)(a1 + 56);
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v3 + 1;
    *(_QWORD *)(a1 + 40) = v4;
    ++*(_QWORD *)(a1 + 56);
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
  }
  return 1;
}

uint64_t sub_20C14E5F0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  sub_20C14E6CC((uint64_t)a1);
  if ((sub_20C14E758((uint64_t)a1) & 1) != 0 || (sub_20C14E8C4((uint64_t)a1, a2) & 1) != 0)
    return 1;
  v4 = (_BYTE *)a1[4];
  if (v4 != (_BYTE *)a1[8] && *v4 == 40)
  {
    v5 = a1[5] + 1;
    a1[4] = v4 + 1;
    a1[5] = v5;
    ++a1[7];
    if ((sub_20C14ED18((uint64_t)a1, a2) & 1) == 0)
      sub_20C14DFB0((uint64_t)a1);
    v6 = (_BYTE *)a1[4];
    if (v6 == (_BYTE *)a1[8] || *v6 != 41)
      sub_20C14E344((uint64_t)a1);
    v7 = a1[5] + 1;
    a1[4] = v6 + 1;
    a1[5] = v7;
    ++a1[7];
    return 1;
  }
  return 0;
}

__n128 sub_20C14E6CC(uint64_t a1)
{
  __n128 *v2;
  _BYTE *v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v2 = (__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 48);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v3 = *(_BYTE **)(a1 + 32);
  if (v3 == *(_BYTE **)(a1 + 64) || *v3 != 126)
  {
    result = v6;
    *v2 = v6;
    v2[1] = v7;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v3 + 1;
    *(_QWORD *)(a1 + 40) = v4;
    ++*(_QWORD *)(a1 + 56);
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
  }
  return result;
}

uint64_t sub_20C14E758(uint64_t a1)
{
  __int128 *v2;
  char v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = (__int128 *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  if (!sub_20C14A13C((_QWORD *)a1)
    || (v15 = *v2, v18 = v2[1], v3 = sub_20C14A194((_QWORD *)a1), *v2 = v15, v2[1] = v18, (v3 & 1) != 0))
  {
    *v2 = v11;
    v2[1] = v13;
    v12 = *v2;
    v14 = v2[1];
    v4 = *(_BYTE **)(a1 + 32);
    v5 = *(_BYTE **)(a1 + 64);
    if (v4 == v5 || *v4 != 37)
      goto LABEL_14;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v4 + 1;
    *(_QWORD *)(a1 + 40) = v6 + 1;
    v7 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v7 + 1;
    v16 = *v2;
    v19 = v2[1];
    if (v4 + 1 == v5
      || v4[1] != 47
      || (*(_QWORD *)(a1 + 32) = v4 + 2,
          *(_QWORD *)(a1 + 40) = v6 + 2,
          *(_QWORD *)(a1 + 56) = v7 + 2,
          !sub_20C14A3A8(a1)))
    {
      *v2 = v16;
      v2[1] = v19;
      v17 = *v2;
      v20 = v2[1];
      if (sub_20C01E458((_QWORD *)a1))
      {
        sub_20C14EA88(a1);
      }
      else
      {
        *v2 = v17;
        v2[1] = v20;
      }
      v8 = *(_BYTE **)(a1 + 32);
      if (v8 == *(_BYTE **)(a1 + 64) || *v8 != 47)
      {
        if (!sub_20C14A46C((_QWORD *)a1))
          goto LABEL_14;
      }
      else
      {
        v9 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v8 + 1;
        *(_QWORD *)(a1 + 40) = v9;
        ++*(_QWORD *)(a1 + 56);
        if ((sub_20C14A3A8(a1) & 1) == 0)
        {
LABEL_14:
          result = 0;
          *v2 = v12;
          v2[1] = v14;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_20C14E8C4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 *v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = (__int128 *)(a1 + 32);
  v4 = *(_BYTE **)(a1 + 32);
  if (v4 != *(_BYTE **)(a1 + 64) && *v4 == 47)
  {
    if ((sub_20C14A9B0((_QWORD *)a1) & 1) == 0)
    {
      v6 = *(_BYTE **)(a1 + 32);
      if (v6 == *(_BYTE **)(a1 + 64) || *v6 != 47)
        sub_20C14AA08(a1);
      v7 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v6 + 1;
      *(_QWORD *)(a1 + 40) = v7;
      ++*(_QWORD *)(a1 + 56);
    }
LABEL_19:
    sub_20C14EB1C(a1, a2);
    return 1;
  }
  v13 = *v5;
  v15 = *(_OWORD *)(a1 + 48);
  if (sub_20C01E458((_QWORD *)a1))
  {
    sub_20C14EA88(a1);
    if ((sub_20C14A9B0((_QWORD *)a1) & 1) == 0)
    {
      v8 = *(_BYTE **)(a1 + 32);
      if (v8 == *(_BYTE **)(a1 + 64) || *v8 != 47)
        return 1;
      v9 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v8 + 1;
      *(_QWORD *)(a1 + 40) = v9;
      ++*(_QWORD *)(a1 + 56);
    }
    goto LABEL_19;
  }
  *v5 = v13;
  v5[1] = v15;
  if ((sub_20C14EB1C(a1, a2) & 1) != 0)
    return 1;
  v11 = *(_BYTE **)(a1 + 32);
  if (v11 != *(_BYTE **)(a1 + 64) && *v11 == 46)
  {
    v12 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v11 + 1;
    *(_QWORD *)(a1 + 40) = v12;
    ++*(_QWORD *)(a1 + 56);
    v14 = *v5;
    v16 = v5[1];
    if (!sub_20C14A9B0((_QWORD *)a1))
    {
      *v5 = v14;
      v5[1] = v16;
      return 1;
    }
    goto LABEL_19;
  }
  return 0;
}

void sub_20C14EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_20C14EA88(uint64_t a1)
{
  _BYTE *v1;
  __n128 *v2;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 i;

  v2 = (__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 32);
  v1 = (_BYTE *)v6.n128_u64[0];
  for (i = *(__n128 *)(a1 + 48); v1 != *(_BYTE **)(a1 + 64); v1 = *(_BYTE **)(a1 + 32))
  {
    if (*v1 != 47)
      break;
    v4 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v1 + 1;
    *(_QWORD *)(a1 + 40) = v4;
    ++*(_QWORD *)(a1 + 56);
    if (!sub_20C01E458((_QWORD *)a1))
      break;
    v6 = *v2;
    i = v2[1];
  }
  result = v6;
  *v2 = v6;
  v2[1] = i;
  return result;
}

uint64_t sub_20C14EB1C(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = (__int128 *)(a1 + 32);
  v15 = *(_OWORD *)(a1 + 32);
  v16 = *(_OWORD *)(a1 + 48);
  v5 = sub_20C14D92C((_QWORD *)a1, a2);
  if ((_DWORD)v5)
  {
    v17 = *v4;
    v18 = v4[1];
    v19 = *v4;
    v20 = v18;
    if (sub_20C14D8C4((_QWORD *)a1))
    {
      while (1)
      {
        v6 = sub_20C14D92C((_QWORD *)a1, a2);
        *v4 = v19;
        v4[1] = v20;
        if (!v6 || !sub_20C14D8C4((_QWORD *)a1) || (sub_20C14D92C((_QWORD *)a1, a2) & 1) == 0)
          break;
        v17 = *v4;
        v18 = v4[1];
        v19 = *v4;
        v20 = v18;
        if ((sub_20C14D8C4((_QWORD *)a1) & 1) == 0)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      *v4 = v19;
      v4[1] = v20;
    }
    *v4 = v17;
    v4[1] = v18;
    sub_20C14A9B0((_QWORD *)a1);
    v7 = *(_BYTE **)(a1 + 32);
    if (v7 != *(_BYTE **)(a1 + 64) && *v7 == 46)
    {
      v8 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v7 + 1;
      *(_QWORD *)(a1 + 40) = v8;
      ++*(_QWORD *)(a1 + 56);
      sub_20C14D9CC(a1);
      if (v9)
      {
        sub_20C14DAB4((_QWORD *)a1, a2);
      }
      else
      {
        v11 = *(_BYTE **)(a1 + 32);
        if (v11 == *(_BYTE **)(a1 + 64) || *v11 != 123)
          sub_20C14DBF4(a1);
        v12 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v11 + 1;
        *(_QWORD *)(a1 + 40) = v12;
        ++*(_QWORD *)(a1 + 56);
        if ((sub_20C14D060((_QWORD *)a1, a2) & 1) == 0)
          sub_20C14D60C(a1);
        v13 = *(_BYTE **)(a1 + 32);
        if (v13 == *(_BYTE **)(a1 + 64) || *v13 != 125)
          sub_20C14DBA0(a1);
        v14 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v13 + 1;
        *(_QWORD *)(a1 + 40) = v14;
        ++*(_QWORD *)(a1 + 56);
      }
    }
  }
  else
  {
    *v4 = v15;
    v4[1] = v16;
  }
  return v5;
}

void sub_20C14ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C14ED18(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 *v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  sub_20C14E6CC(a1);
  if ((sub_20C14E758(a1) & 1) == 0 && (sub_20C14E8C4(a1, a2) & 1) == 0)
  {
    v4 = *(_BYTE **)(a1 + 32);
    if (v4 == *(_BYTE **)(a1 + 64) || *v4 != 40)
      return 0;
    v5 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v4 + 1;
    *(_QWORD *)(a1 + 40) = v5;
    ++*(_QWORD *)(a1 + 56);
    if ((sub_20C14ED18(a1, a2) & 1) == 0)
      sub_20C14DFB0(a1);
    v6 = *(_BYTE **)(a1 + 32);
    if (v6 == *(_BYTE **)(a1 + 64) || *v6 != 41)
      sub_20C14E344(a1);
    v7 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v6 + 1;
    *(_QWORD *)(a1 + 40) = v7;
    ++*(_QWORD *)(a1 + 56);
  }
  v8 = (__int128 *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  v13 = v11;
  v14 = v12;
  if (sub_20C14E480(a1))
  {
    while (1)
    {
      v9 = sub_20C14E5F0(a1, a2);
      *v8 = v13;
      *(_OWORD *)(a1 + 48) = v14;
      if (!v9 || !sub_20C14E480(a1) || !sub_20C14E5F0(a1, a2))
        break;
      v11 = *v8;
      v12 = *(_OWORD *)(a1 + 48);
      v13 = *v8;
      v14 = v12;
      if ((sub_20C14E480(a1) & 1) == 0)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    *v8 = v13;
    *(_OWORD *)(a1 + 48) = v14;
  }
  *v8 = v11;
  *(_OWORD *)(a1 + 48) = v12;
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  return 1;
}

void sub_20C14EEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C14EEB8(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C01EC2C(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C14EF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *sub_20C14EFA4(unsigned __int8 *__dst, __int128 *a2, char **a3)
{
  __int128 v5;
  uint64_t v6;
  unsigned __int8 *v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if ((char)__dst[23] < 0)
  {
    v7 = *(unsigned __int8 **)__dst;
    v6 = *((_QWORD *)__dst + 1);
  }
  else
  {
    v6 = __dst[23];
    v7 = __dst;
  }
  *((_QWORD *)__dst + 3) = v7;
  *((_QWORD *)__dst + 4) = v7;
  *(_OWORD *)(__dst + 40) = xmmword_20CA59F70;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = &v7[v6];
  sub_20BDDC0E4((_QWORD *)__dst + 9, *a3);
  return __dst;
}

void sub_20C14F030(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C14F04C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE7BBA0(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[72 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = v12;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v15[2] = v11 + 72;
  sub_20C14F1B0(a1, v15);
  v13 = a1[1];
  sub_20C14F380(v15);
  return v13;
}

void sub_20C14F19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C14F380((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C14F1B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C14F224((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C14F224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      v8 = *(_OWORD *)(a3 - 72);
      a3 -= 72;
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v9 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C14F2FC((uint64_t)v12);
  return v10;
}

uint64_t sub_20C14F2FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C14F330((uint64_t *)a1);
  return a1;
}

void sub_20C14F330(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C00BE08(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_20C14F380(void **a1)
{
  sub_20C14F3B0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C14F3B0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_20C00BE08(v4, i - 72);
  }
}

uint64_t sub_20C14F3F4(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      v19 = v12 - a2;
      v20 = (uint64_t)(v12 - a2) >> 5;
      if (v20 >= a5)
      {
        v21 = &a3[8 * a5];
      }
      else
      {
        v21 = &a3[8 * v20];
        a1[1] = sub_20C14F780(v9, (uint64_t)v21, a4, *(_QWORD *)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_20C14F574((uint64_t)a1, v5, v12, v5 + 32 * a5);
      sub_20C14F8E0((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59)
        sub_20BDDF694();
      v15 = (a2 - v13) >> 5;
      v16 = v10 - v13;
      if (v16 >> 4 > v14)
        v14 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v27 = v9;
      if (v17)
        v18 = (char *)sub_20BED2F10(v9, v17);
      else
        v18 = 0;
      v23 = v18;
      v24 = &v18[32 * v15];
      v25 = v24;
      v26 = &v18[32 * v17];
      sub_20C14F644(&v23, (uint64_t)a3, a5);
      v5 = sub_20C14F6D0(a1, &v23, v5);
      sub_20C14FAC8(&v23);
    }
  }
  return v5;
}

void sub_20C14F554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C14F574(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + 32 * ((v6 - a4) >> 5) + 4;
    v11 = v6 + 4;
    do
    {
      sub_20BFD38A4((_DWORD *)(v11 - 4), (_DWORD *)(v10 - 4));
      sub_20BFD38DC((_DWORD *)v11, (_DWORD *)v10);
      v12 = *(_OWORD *)(v10 + 4);
      *(_QWORD *)(v11 + 20) = *(_QWORD *)(v10 + 20);
      *(_OWORD *)(v11 + 4) = v12;
      *(_QWORD *)(v10 + 12) = 0;
      *(_QWORD *)(v10 + 4) = 0;
      *(_QWORD *)(v10 + 20) = 0;
      v13 = v10 + 28;
      v10 += 32;
      v11 += 32;
    }
    while (v13 < a3);
    v8 = v11 - 4;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C14F830((uint64_t)&v15, a2, v7, v6);
}

_DWORD *sub_20C14F644(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (a3)
  {
    v5 = v4 + 4;
    v6 = 32 * a3;
    v7 = a2 + 4;
    v4 += 32 * a3;
    do
    {
      sub_20BFD38A4((_DWORD *)(v5 - 4), (_DWORD *)(v7 - 4));
      result = sub_20BFD38DC((_DWORD *)v5, (_DWORD *)v7);
      v8 = *(_OWORD *)(v7 + 4);
      *(_QWORD *)(v5 + 20) = *(_QWORD *)(v7 + 20);
      *(_OWORD *)(v5 + 4) = v8;
      *(_QWORD *)(v7 + 12) = 0;
      *(_QWORD *)(v7 + 4) = 0;
      *(_QWORD *)(v7 + 20) = 0;
      v5 += 32;
      v7 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

uint64_t sub_20C14F6D0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C14F978((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C14F780(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C14F780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD38A4((_DWORD *)v4, (_DWORD *)v6);
      sub_20BFD38DC((_DWORD *)(v4 + 4), (_DWORD *)(v6 + 4));
      v7 = *(_OWORD *)(v6 + 8);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(v6 + 24);
      *(_OWORD *)(v4 + 8) = v7;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      v4 = v12 + 32;
      v12 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C00D524((uint64_t)v9);
  return v4;
}

uint64_t sub_20C14F830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      sub_20BFD3EBC((int *)(a4 + v7 - 32), (int *)(a3 + v7 - 32));
      sub_20BFD3F10((int *)(a4 + v7 - 28), (int *)(a3 + v7 - 28));
      v9 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(a4 + v7 - 8) = *(_QWORD *)(v8 - 8);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

int *sub_20C14F8E0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int *v5;
  int *v7;
  void **v8;
  __int128 v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20BFD3EBC((int *)a4, v5);
      v7 = v5 + 1;
      sub_20BFD3F10((int *)(a4 + 4), v7);
      v8 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v8);
      v9 = *(_OWORD *)(v7 + 1);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v7 + 5);
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v7 + 27) = 0;
      *((_BYTE *)v7 + 4) = 0;
      a4 += 32;
      v5 = v7 + 7;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C14F978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 32;
    do
    {
      sub_20BFD38A4((_DWORD *)(v7 - 32), (_DWORD *)v9);
      sub_20BFD38DC((_DWORD *)(v7 - 28), (_DWORD *)(v9 + 4));
      v10 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v7 - 24) = v10;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v7 = *((_QWORD *)&v17 + 1) - 32;
      *((_QWORD *)&v17 + 1) -= 32;
      v11 = v9 == a5;
      v9 -= 32;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  sub_20C14FA44((uint64_t)v14);
  return v12;
}

uint64_t sub_20C14FA44(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C14FA78((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C14FA78(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C00BC84(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C14FAC8(void **a1)
{
  sub_20C14FAF8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C14FAF8(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 32;
      result = sub_20C00BC84(v4, v1 - 32);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C14FB3C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v25[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v10 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    v11 = a1[1];
    if (a5 <= (uint64_t)(v9 - v11) >> 6)
    {
      v18 = v11 - a2;
      v19 = (uint64_t)(v11 - a2) >> 6;
      if (v19 >= a5)
      {
        v20 = a3 + (a5 << 6);
      }
      else
      {
        v20 = a3 + (v19 << 6);
        a1[1] = sub_20C14FE34((uint64_t)(a1 + 2), v20, a4, v11);
        if (v18 < 1)
          return v5;
      }
      sub_20C14FCE4((uint64_t)a1, v5, v11, v5 + (a5 << 6));
      sub_20C150008((uint64_t)v25, v7, v20, v5);
    }
    else
    {
      v12 = *a1;
      v13 = a5 + ((uint64_t)(v11 - *a1) >> 6);
      if (v13 >> 58)
        sub_20BDDF694();
      v14 = (a2 - v12) >> 6;
      v15 = v9 - v12;
      if (v15 >> 5 > v13)
        v13 = v15 >> 5;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
        v16 = 0x3FFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v25[4] = a1 + 2;
      if (v16)
        v17 = (char *)sub_20C00D6F0((uint64_t)(a1 + 2), v16);
      else
        v17 = 0;
      v21 = &v17[64 * v14];
      v25[0] = v17;
      v25[1] = v21;
      v25[3] = &v17[64 * v16];
      v22 = a5 << 6;
      v23 = &v21[64 * a5];
      do
      {
        sub_20C14FEC4(v10, (uint64_t)v21, v7);
        v21 += 64;
        v7 += 64;
        v22 -= 64;
      }
      while (v22);
      v25[2] = v23;
      v5 = sub_20C14FD84(a1, v25, v5);
      sub_20C1501F4(v25);
    }
  }
  return v5;
}

void sub_20C14FCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C14FCE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      sub_20C14FEC4(a1 + 16, v8, v10);
      v10 += 64;
      v8 += 64;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C14FF44((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_20C14FD84(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C1500BC((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C14FE34(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C14FE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C14FEC4(a1, v4, v6);
      v6 += 64;
      v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C00E1D8((uint64_t)v9);
  return v4;
}

__n128 sub_20C14FEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  sub_20BFD38A4((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD38DC((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = *(__n128 *)(a3 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a3 + 56);
  return result;
}

uint64_t sub_20C14FF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      sub_20BFD3EBC((int *)(a4 + v7 - 64), (int *)(a3 + v7 - 64));
      sub_20BFD3F10((int *)(a4 + v7 - 60), (int *)(a3 + v7 - 60));
      sub_20BFD3E84((uint64_t *)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      sub_20C1477E0((void **)(a4 + v7 - 32));
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_BYTE *)(v9 - 8) = *(_BYTE *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_20C150008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20BFD3EBC((int *)a4, (int *)v5);
    sub_20BFD3F10((int *)(a4 + 4), (int *)(v5 + 4));
    sub_20BFD3E84((uint64_t *)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    sub_20C1477E0((void **)(a4 + 32));
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(v5 + 48);
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_BYTE *)(a4 + 56) = *(_BYTE *)(v5 + 56);
    a4 += 64;
    v5 += 64;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C1500BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 64;
      sub_20C14FEC4(a1, v7 - 64, v9);
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C150170((uint64_t)v13);
  return v11;
}

uint64_t sub_20C150170(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1501A4((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C1501A4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C00BD2C(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C1501F4(void **a1)
{
  sub_20C150224(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C150224(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 64;
      result = sub_20C00BD2C(v4, v1 - 64);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C150268(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BED2F10(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v9];
  sub_20BFD38A4(v11, (_DWORD *)a2);
  sub_20BFD38DC((_DWORD *)v11 + 1, (_DWORD *)(a2 + 4));
  v12 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v12;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v15[2] = v11 + 32;
  sub_20C15036C(a1, v15);
  v13 = a1[1];
  sub_20C14FAC8(v15);
  return v13;
}

void sub_20C150358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C14FAC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15036C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C14F978((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1503E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1500BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20C150454(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C1504B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C1504D4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_20C14816C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C150558(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1505CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1505CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      v9 = *(_DWORD *)(a3 - 8);
      *(_BYTE *)(v7 - 4) = *(_BYTE *)(a3 - 4);
      *(_DWORD *)(v7 - 8) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C15067C((uint64_t)v12);
  return v10;
}

uint64_t sub_20C15067C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED3020(a1);
  return a1;
}

void sub_20C1506B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(a1 + 48);
  sub_20C00E25C(&a10);
}

void sub_20C1506C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 24);
  sub_20C00D5A8(&a10);
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_EvalExpr(int **a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  int *v3;
  int *v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      switch(*v4)
      {
        case 0:
          v12 = a3(a2, 0);
          v8 = v12 & 1;
          if (HIDWORD(v12) == 1 && (_DWORD)v7 == 0)
            v7 = 1;
          else
            v7 = v7;
          break;
        case 1:
          v8 ^= 1u;
          break;
        case 2:
          v9 = (v9 + 1);
          break;
        case 3:
          v9 = (v9 - 1);
          break;
        case 4:
        case 5:
          if (v4 != v3 && ((v8 ^ (*v4 != 5)) & 1) == 0)
          {
            v10 = v9;
            do
            {
              v11 = *v4;
              if (*v4 == 3)
              {
                v10 = (v10 - 1);
                if ((_DWORD)v10 == (_DWORD)v9)
                  goto LABEL_25;
              }
              else if (v11 == 2)
              {
                v10 = (v10 + 1);
              }
              else if (!v11)
              {
                a3(a2, 1);
              }
              ++v4;
            }
            while (v4 != v3);
            v4 = v3;
            v9 = v10;
          }
          break;
        default:
          break;
      }
LABEL_25:
      ++v4;
    }
    while (v4 != v3);
  }
  return v8 | (unint64_t)(v7 << 32);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t *v25;
  int64x2_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  std::string *v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64x2_t *v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  int64x2_t *v52;
  int64x2_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  int64x2_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  int64x2_t **v73;
  void **v74;
  uint64_t v75;
  unsigned int v77;
  std::string v78;
  void *__p[2];
  std::string::size_type v80;

  sub_20C01A074((int *)a1, (_DWORD *)a2);
  sub_20C01A0C8((int *)(a1 + 4), (_DWORD *)(a2 + 4));
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 104) = 0;
  v7 = (void **)(a1 + 8);
  sub_20C150ED4((char **)(a1 + 8), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8 != v9)
  {
    v75 = a1 + 24;
    v73 = (int64x2_t **)(a1 + 48);
    v74 = (void **)(a1 + 32);
    while (1)
    {
      if (*(_DWORD *)(v8 + 24) == -1)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          if (!*(_QWORD *)(v8 + 8))
          {
LABEL_24:
            v23 = *(_QWORD *)(a1 + 8);
            v22 = *(_QWORD *)(a1 + 16);
            if (v23 == v22)
              *(_BYTE *)(a1 + 104) = 1;
            if (v8 + 32 == v9)
            {
              *(_BYTE *)(a1 + 105) = 1;
            }
            else
            {
              v24 = *(int64x2_t **)(a1 + 32);
              v25 = *(int64x2_t **)(a1 + 40);
              v26 = *(int64x2_t **)(a1 + 48);
              if (v24 == v25)
              {
                if (v24 >= v26)
                {
                  v43 = (char *)v26 - (char *)v24;
                  v44 = ((char *)v26 - (char *)v24) >> 3;
                  if (v44 <= 1)
                    v44 = 1;
                  if (v43 >= 0x7FFFFFFFFFFFFFF0)
                    v45 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v45 = v44;
                  v47 = (int64x2_t *)sub_20BDEA2F0((uint64_t)v73, v45);
                  v48 = *(char **)(a1 + 32);
                  v49 = *(char **)(a1 + 40);
                  v47->i64[0] = 0;
                  v47->i64[1] = 0;
                  v50 = (uint64_t *)v47;
                  if (v49 != v48)
                  {
                    do
                    {
                      *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
                      v50 -= 2;
                      v49 -= 16;
                    }
                    while (v49 != v48);
                    v48 = (char *)*v74;
                  }
                  v26 = &v47[v46];
                  v25 = v47 + 1;
                  *(_QWORD *)(a1 + 32) = v50;
                  *(_QWORD *)(a1 + 40) = v47 + 1;
                  *(_QWORD *)(a1 + 48) = v26;
                  if (v48)
                  {
                    operator delete(v48);
                    v26 = *v73;
                  }
                }
                else
                {
                  v25 = v24 + 1;
                  v24->i64[0] = 0;
                  v24->i64[1] = 0;
                }
                *(_QWORD *)(a1 + 40) = v25;
                v23 = *(_QWORD *)(a1 + 8);
                v22 = *(_QWORD *)(a1 + 16);
              }
              v51 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 2);
              v25[-1].i64[1] = v51;
              if (v25 >= v26)
              {
                v53 = (int64x2_t *)*v74;
                v54 = ((char *)v25 - (_BYTE *)*v74) >> 4;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 60)
                  sub_20BDDF694();
                v56 = (char *)v26 - (char *)v53;
                if (v56 >> 3 > v55)
                  v55 = v56 >> 3;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                  v57 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57)
                {
                  v58 = (char *)sub_20BDEA2F0((uint64_t)v73, v57);
                  v53 = *(int64x2_t **)(a1 + 32);
                  v25 = *(int64x2_t **)(a1 + 40);
                }
                else
                {
                  v58 = 0;
                }
                v59 = (int64x2_t *)&v58[16 * v54];
                *v59 = vdupq_n_s64(v51);
                v52 = v59 + 1;
                if (v25 != v53)
                {
                  do
                  {
                    v59[-1] = v25[-1];
                    --v59;
                    --v25;
                  }
                  while (v25 != v53);
                  v53 = (int64x2_t *)*v74;
                }
                *(_QWORD *)(a1 + 32) = v59;
                *(_QWORD *)(a1 + 40) = v52;
                *(_QWORD *)(a1 + 48) = &v58[16 * v57];
                if (v53)
                  operator delete(v53);
              }
              else
              {
                v25->i64[0] = v51;
                v25->i64[1] = v51;
                v52 = v25 + 1;
              }
              *(_QWORD *)(a1 + 40) = v52;
            }
            goto LABEL_62;
          }
        }
        else if (!*(_BYTE *)(v8 + 23))
        {
          goto LABEL_24;
        }
      }
      if (*(_BYTE *)(v8 + 28))
        break;
      if (*(char *)(v8 + 23) < 0)
      {
        if (!*(_QWORD *)(v8 + 8))
          break;
      }
      else if (!*(_BYTE *)(v8 + 23))
      {
        break;
      }
      std::operator+<char>();
      v31 = std::string::append(&v78, "$");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v80 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v77 = 2;
      v33 = *(_QWORD *)(a1 + 88);
      if (v33 >= *(_QWORD *)(a1 + 96))
      {
        v34 = sub_20C15226C((uint64_t *)(a1 + 80), (uint64_t)__p, &v77);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(*(_QWORD *)(a1 + 88), __p, 2);
        v34 = v33 + 48;
        *(_QWORD *)(a1 + 88) = v33 + 48;
      }
      *(_QWORD *)(a1 + 88) = v34;
      if (SHIBYTE(v80) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v13 = -1 - 1431655765 * ((*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4);
      v15 = *(char **)(a1 + 16);
      v35 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v15 >= v35)
      {
        v16 = (char *)*v7;
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)*v7) >> 2);
        v38 = v37 + 1;
        if (v37 + 1 > 0x1555555555555555)
LABEL_109:
          sub_20BDDF694();
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v16) >> 2);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0xAAAAAAAAAAAAAAALL)
          v20 = 0x1555555555555555;
        else
          v20 = v38;
        if (v20)
        {
          v21 = (char *)sub_20C152228(v75, v20);
          v16 = *(char **)(a1 + 8);
          v15 = *(char **)(a1 + 16);
        }
        else
        {
          v21 = 0;
        }
        v27 = &v21[12 * v37];
        *(_DWORD *)v27 = 1;
        *((_DWORD *)v27 + 1) = v13;
        *((_DWORD *)v27 + 2) = -1;
        v28 = v27;
        if (v15 != v16)
        {
          do
          {
            v40 = *(_QWORD *)(v15 - 12);
            v15 -= 12;
            v41 = *((_DWORD *)v15 + 2);
            *(_QWORD *)(v28 - 12) = v40;
            v28 -= 12;
            *((_DWORD *)v28 + 2) = v41;
          }
          while (v15 != v16);
LABEL_57:
          v16 = (char *)*v7;
        }
LABEL_58:
        v36 = v27 + 12;
        *(_QWORD *)(a1 + 8) = v28;
        *(_QWORD *)(a1 + 16) = v27 + 12;
        *(_QWORD *)(a1 + 24) = &v21[12 * v20];
        if (v16)
          operator delete(v16);
        goto LABEL_60;
      }
      *(_DWORD *)v15 = 1;
LABEL_44:
      v36 = v15 + 12;
      *((_DWORD *)v15 + 1) = v13;
      *((_DWORD *)v15 + 2) = -1;
LABEL_60:
      *(_QWORD *)(a1 + 16) = v36;
      v42 = *(_DWORD *)(v8 + 24);
      if (v42 != -1)
        *(_DWORD *)(*(_QWORD *)(a1 + 16) - 4) = a4(a3, *(_QWORD *)(a2 + 32) + 72 * v42);
LABEL_62:
      v8 += 32;
      if (v8 == v9)
        goto LABEL_92;
    }
    v10 = *(_QWORD *)(a1 + 64);
    v11 = (uint64_t *)(a1 + 56);
    if (v10 >= *(_QWORD *)(a1 + 72))
    {
      v12 = sub_20BE4EE50(v11, (__int128 *)v8);
    }
    else
    {
      sub_20BE4EDF4(v11, (__int128 *)v8);
      v12 = v10 + 24;
    }
    *(_QWORD *)(a1 + 64) = v12;
    v13 = -1 - 1431655765 * ((unint64_t)(v12 - *(_QWORD *)(a1 + 56)) >> 3);
    v15 = *(char **)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v15 >= v14)
    {
      v16 = (char *)*v7;
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)*v7) >> 2);
      v18 = v17 + 1;
      if (v17 + 1 > 0x1555555555555555)
        goto LABEL_109;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v16) >> 2);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0xAAAAAAAAAAAAAAALL)
        v20 = 0x1555555555555555;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)sub_20C152228(v75, v20);
        v16 = *(char **)(a1 + 8);
        v15 = *(char **)(a1 + 16);
      }
      else
      {
        v21 = 0;
      }
      v27 = &v21[12 * v17];
      *(_DWORD *)v27 = 0;
      *((_DWORD *)v27 + 1) = v13;
      *((_DWORD *)v27 + 2) = -1;
      v28 = v27;
      if (v15 != v16)
      {
        do
        {
          v29 = *(_QWORD *)(v15 - 12);
          v15 -= 12;
          v30 = *((_DWORD *)v15 + 2);
          *(_QWORD *)(v28 - 12) = v29;
          v28 -= 12;
          *((_DWORD *)v28 + 2) = v30;
        }
        while (v15 != v16);
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    *(_DWORD *)v15 = 0;
    goto LABEL_44;
  }
LABEL_92:
  v61 = *(_QWORD *)(a1 + 8);
  v60 = *(_QWORD *)(a1 + 16);
  if (v61 != v60)
  {
    v62 = *(_QWORD **)(a1 + 32);
    v63 = *(_QWORD **)(a1 + 40);
    if (v62 == v63)
    {
      v64 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v62 >= v64)
      {
        v65 = v64 - (_QWORD)v62;
        v66 = v65 >> 3;
        if ((unint64_t)(v65 >> 3) <= 1)
          v66 = 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
          v67 = 0xFFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        v68 = sub_20BDEA2F0(a1 + 48, v67);
        v69 = *(char **)(a1 + 32);
        v70 = *(char **)(a1 + 40);
        v72 = &v68[2 * v71];
        v63 = v68 + 2;
        *v68 = 0;
        v68[1] = 0;
        if (v70 != v69)
        {
          do
          {
            *((_OWORD *)v68 - 1) = *((_OWORD *)v70 - 1);
            v68 -= 2;
            v70 -= 16;
          }
          while (v70 != v69);
          v69 = *(char **)(a1 + 32);
        }
        *(_QWORD *)(a1 + 32) = v68;
        *(_QWORD *)(a1 + 40) = v63;
        *(_QWORD *)(a1 + 48) = v72;
        if (v69)
          operator delete(v69);
      }
      else
      {
        v63 = v62 + 2;
        *v62 = 0;
        v62[1] = 0;
      }
      *(_QWORD *)(a1 + 40) = v63;
      v61 = *(_QWORD *)(a1 + 8);
      v60 = *(_QWORD *)(a1 + 16);
    }
    *(v63 - 1) = 0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 2);
  }
}

void sub_20C150E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_20C150ED4(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_20BDDF694();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)sub_20C152228(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Match(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, uint64_t a4)
{
  uint64_t PathElementCount;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v27;
  char *v28;
  void **v29;
  int v30;
  unint64_t v31;
  void *__p[2];
  char v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  char v39;
  _QWORD v40[2];

  v40[0] = a3;
  v40[1] = a4;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this)
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) == 0)
  {
    v35 = "sdf/pathExpressionEval.cpp";
    v36 = "_Match";
    v37 = 192;
    v38 = "SdfPredicateFunctionResult pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Ma"
          "tch(const SdfPath &, TfFunctionRef<SdfPredicateFunctionResult (int, const SdfPath &)>) const";
    v39 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (v34 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Unsupported path <%s>; can only match prim or prim-property paths",
      v28,
      v29);
    if (v34 < 0)
      operator delete(__p[0]);
    LOBYTE(v18) = 0;
    v13 = 0;
    v27 = 0;
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, this))
      v18 = 0x100000000;
    else
      v18 = 0;
    v13 = HIDWORD(v18);
    v27 = v18;
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  if (*(_BYTE *)(a1 + 106) && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this))
  {
    LOBYTE(v18) = 0;
    v27 = 0;
    v13 = 1;
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 105))
    {
      v13 = 0;
      v27 = 0;
      LOBYTE(v18) = 1;
    }
    else
    {
      v27 = 0;
      LOBYTE(v18) = *(_QWORD *)this == *(_QWORD *)a1;
      v13 = v18;
    }
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(this);
  v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(this, (uint64_t *)&v35, PathElementCount - v7);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v35;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v36;
  __p[0] = (void *)a1;
  __p[1] = v40;
  v10 = *(_QWORD **)(a1 + 32);
  v11 = *(_QWORD **)(a1 + 40);
  if (v10 == v11)
  {
    v27 = 0;
    LOBYTE(v18) = 1;
    v13 = 1;
    goto LABEL_56;
  }
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  v13 = 1;
  v14 = v12;
  while (1)
  {
    if (v14 > (v9 - v8) >> 3)
    {
LABEL_50:
      LOBYTE(v18) = 0;
      v27 = 0;
      goto LABEL_56;
    }
    v15 = v10[1];
    v16 = v15 - *v10;
    v14 -= v16;
    if (*(_BYTE *)(a1 + 104) || *v10 != 0)
      break;
    v18 = sub_20C151368(__p, v10, v8);
    if (v18 != 1)
    {
LABEL_51:
      v27 = v18 & 0xFFFFFF00;
      v13 = HIDWORD(v18);
      goto LABEL_56;
    }
    v19 = v10[1];
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * (v19 - *v10));
    if (!*(_BYTE *)(a1 + 105) && v19 == v12 && v8 != v9)
      goto LABEL_50;
LABEL_33:
    v10 += 2;
    if (v10 == v11)
    {
      v27 = 0;
      LOBYTE(v18) = 1;
      goto LABEL_56;
    }
  }
  if (!*(_BYTE *)(a1 + 105) && v15 == v12)
  {
    v18 = sub_20C151368(__p, v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 - 8 * v16));
    v8 = v9;
    if (v18 != 1)
      goto LABEL_51;
    goto LABEL_33;
  }
  v20 = ((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 - 8 * v14) - v8) >> 3;
  v21 = v20 >= v16;
  v22 = v20 - v16;
  if (!v21 || (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * v22 + 8) == v8)
  {
    v26 = 0;
    v30 = 0;
    v31 = 0x100000000;
    goto LABEL_55;
  }
  v23 = 0;
  v24 = 8 * v22 + 8;
  while (1)
  {
    v25 = sub_20C151368(__p, v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + v23));
    v26 = v25;
    if ((_BYTE)v25)
      break;
    v23 += 8;
    if (v24 == v23)
      goto LABEL_31;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + v23);
LABEL_31:
  if (v25 == 1)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * (v10[1] - *v10));
    goto LABEL_33;
  }
  v30 = v25 & 0xFFFFFF00;
  v31 = v25 & 0xFFFFFFFF00000000;
LABEL_55:
  v27 = v30 & 0xFFFFFF00 | v31;
  LOBYTE(v18) = v31 | v26;
  v13 = HIDWORD(v31);
LABEL_56:
  __p[0] = &v35;
  sub_20BFD6F90((void ***)__p);
  return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
}

void sub_20C151328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  __p = &a17;
  sub_20BFD6F90((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t sub_20C151368(_QWORD *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t *Name;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;

  v3 = a2[1];
  if (*a2 != v3)
  {
    v9 = *a1;
    v10 = *(_QWORD *)(*a1 + 8);
    v11 = (_DWORD *)(v10 + 12 * v3);
    v12 = (_DWORD *)(v10 + 12 * *a2);
    v6 = 1;
    while (1)
    {
      if (*v12 == 1)
      {
        v14 = *(_QWORD *)(v9 + 80) + 48 * (int)v12[1];
        Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
        if (!pxrInternal__aapl__pxrReserved__::ArchRegex::Match(v14, (const char *)Name))
          goto LABEL_30;
      }
      else if (!*v12)
      {
        v13 = (unsigned __int8 *)(*(_QWORD *)(v9 + 56) + 24 * (int)v12[1]);
        if ((char)v13[23] < 0)
        {
          if (!*((_QWORD *)v13 + 1))
            goto LABEL_10;
        }
        else if (!v13[23])
        {
          goto LABEL_10;
        }
        v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
        v19 = v13[23];
        if ((v19 & 0x80u) == 0)
          v20 = v13[23];
        else
          v20 = *((_QWORD *)v13 + 1);
        v21 = *((unsigned __int8 *)v18 + 23);
        v22 = (char)v21;
        if ((v21 & 0x80u) != 0)
          v21 = v18[1];
        if (v20 != v21)
          goto LABEL_30;
        if (v22 >= 0)
          v23 = (unsigned __int8 *)v18;
        else
          v23 = (unsigned __int8 *)*v18;
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v13, v23, *((_QWORD *)v13 + 1)))
            goto LABEL_30;
        }
        else if (v13[23])
        {
          while (*v13 == *v23)
          {
            ++v13;
            ++v23;
            if (!--v19)
              goto LABEL_10;
          }
LABEL_30:
          v6 = 0;
LABEL_31:
          v4 = 0;
          v5 = 0x100000000;
          return v6 | v5 | v4;
        }
      }
LABEL_10:
      v16 = v12[2];
      if ((_DWORD)v16 != -1)
      {
        v17 = (*(uint64_t (**)(_QWORD, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(a1[1] + 8))(*(_QWORD *)a1[1], v16, this);
        if (v17 != 1)
        {
          v5 = v17 & 0xFFFFFFFF00000000;
          v4 = v17 & 0xFFFFFF00;
          v6 = v17;
          return v6 | v5 | v4;
        }
      }
      v12 += 3;
      this = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8);
      if (v12 == v11)
        goto LABEL_31;
    }
  }
  v4 = 0;
  v5 = 0x100000000;
  v6 = 1;
  return v6 | v5 | v4;
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Next(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD *))
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  char *v21;
  void **v22;
  unint64_t v23;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t *Name;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t PathElementCount;
  void *__p[2];
  char v53;
  _QWORD v54[4];
  char v55;

  if (*(_DWORD *)(a2 + 24) == -1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this)
      || (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) != 0)
    {
      PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(this);
      v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, this))
          goto LABEL_28;
        v8 = 0;
        v6 = 0;
        LODWORD(v7) = 0;
        *(_DWORD *)(a2 + 24) = v14;
        goto LABEL_72;
      }
      if (*(_BYTE *)(a1 + 106) && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this))
        goto LABEL_28;
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16))
      {
        v16 = *(_QWORD *)a2;
        v15 = *(_QWORD *)(a2 + 8);
        v17 = (v15 - *(_QWORD *)a2) >> 2;
        v18 = *(_QWORD *)(a1 + 32);
        if (v17 == (*(_QWORD *)(a1 + 40) - v18) >> 4)
        {
          v15 -= 4;
          *(_QWORD *)(a2 + 8) = v15;
          v17 = (v15 - v16) >> 2;
        }
        v19 = (_QWORD *)(v18 + 16 * v17);
        if (v15 != v16)
        {
          v20 = v19 + 1;
          if (PathElementCount - *(int *)(v15 - 4) >= v19[1] - *v19)
            goto LABEL_33;
LABEL_28:
          v8 = 0;
          LODWORD(v7) = 0;
          v6 = 0x100000000;
          return v6 | ((_DWORD)v7 << 8) | v8;
        }
        v20 = v19 + 1;
        v23 = v19[1] - *v19;
        if (PathElementCount - v14 < v23)
          goto LABEL_28;
        if (PathElementCount - v14 <= v23 || *(_BYTE *)(a1 + 104) != 0)
        {
LABEL_33:
          sub_20BFD6E54(v54, this);
          v25 = (_DWORD *)((char *)this + 4);
          sub_20BFD6EA4((_DWORD *)v54 + 1, (_DWORD *)this + 1);
          v26 = *(_QWORD *)(a1 + 8);
          v27 = *v20;
          v28 = v26 + 12 * *v19;
          if (*v20 != *v19)
          {
            v50 = v20;
            v29 = v26 + 12 * v27;
            v30 = v29;
            while (1)
            {
              v31 = *(_DWORD *)(v30 - 12);
              v30 -= 12;
              if (!v31)
                break;
LABEL_57:
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, __p);
              sub_20BFD3EBC((int *)v54, (int *)__p);
              sub_20BFD3F10((int *)v54 + 1, (int *)__p + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
              sub_20BFD265C(__p);
              v29 = v30;
              if (v30 == v28)
              {
                v26 = *(_QWORD *)(a1 + 8);
                v25 = (_DWORD *)((char *)this + 4);
                v27 = *v50;
                goto LABEL_59;
              }
            }
            v32 = (unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 24 * *(int *)(v29 - 8));
            if ((char)v32[23] < 0)
            {
              if (!*((_QWORD *)v32 + 1))
              {
LABEL_55:
                v39 = *(unsigned int *)(v29 - 4);
                if ((_DWORD)v39 != -1)
                {
                  v40 = a5(a4, v39, v54);
                  if (v40 != 1)
                    goto LABEL_75;
                }
                goto LABEL_57;
              }
            }
            else if (!v32[23])
            {
              goto LABEL_55;
            }
            Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v54);
            v34 = v32[23];
            if ((v34 & 0x80u) == 0)
              v35 = v32[23];
            else
              v35 = *((_QWORD *)v32 + 1);
            v36 = *((unsigned __int8 *)Name + 23);
            v37 = (char)v36;
            if ((v36 & 0x80u) != 0)
              v36 = Name[1];
            if (v35 != v36)
              goto LABEL_69;
            if (v37 >= 0)
              v38 = (unsigned __int8 *)Name;
            else
              v38 = (unsigned __int8 *)*Name;
            if ((v34 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v32, v38, *((_QWORD *)v32 + 1)))
                goto LABEL_69;
            }
            else if (v32[23])
            {
              while (*v32 == *v38)
              {
                ++v32;
                ++v38;
                if (!--v34)
                  goto LABEL_55;
              }
LABEL_69:
              v8 = 0;
              LODWORD(v7) = 0;
              goto LABEL_70;
            }
            goto LABEL_55;
          }
LABEL_59:
          v41 = v26 + 12 * v27;
          sub_20C01A074((int *)v54, this);
          sub_20C01A0C8((int *)v54 + 1, v25);
          if (v41 == v28)
          {
LABEL_66:
            LODWORD(__p[0]) = PathElementCount;
            sub_20C151AC4(a2, __p);
            if ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2 != (uint64_t)(*(_QWORD *)(a1 + 40)
                                                                                - *(_QWORD *)(a1 + 32)) >> 4)
              goto LABEL_69;
            LODWORD(v7) = 0;
            v48 = *(unsigned __int8 *)(a1 + 105);
            v8 = 1;
            if (!v48)
            {
LABEL_70:
              v6 = 0x100000000;
LABEL_78:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v54 + 1);
              sub_20BFD265C(v54);
              return v6 | ((_DWORD)v7 << 8) | v8;
            }
            LOBYTE(v49) = 1;
          }
          else
          {
            v42 = v41;
            while (1)
            {
              v43 = *(_DWORD *)(v42 - 12);
              v42 -= 12;
              if (v43 == 1)
              {
                v44 = *(_DWORD *)(v41 - 8);
                v45 = *(_QWORD *)(a1 + 80);
                v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v54);
                if (!pxrInternal__aapl__pxrReserved__::ArchRegex::Match(v45 + 48 * v44, (const char *)v46))goto LABEL_69;
                v47 = *(unsigned int *)(v41 - 4);
                if ((_DWORD)v47 != -1)
                {
                  v40 = a5(a4, v47, v54);
                  if (v40 != 1)
                    break;
                }
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, __p);
              sub_20BFD3EBC((int *)v54, (int *)__p);
              sub_20BFD3F10((int *)v54 + 1, (int *)__p + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
              sub_20BFD265C(__p);
              v41 = v42;
              if (v42 == v28)
                goto LABEL_66;
            }
LABEL_75:
            v8 = v40;
            v7 = v40 >> 8;
            v49 = HIDWORD(v40);
            if (HIDWORD(v40))
            {
              v6 = v40 & 0xFFFFFFFF00000000;
              goto LABEL_78;
            }
          }
          v6 = 0;
          *(_DWORD *)(a2 + 24) = PathElementCount;
          *(_BYTE *)(a2 + 28) = v49;
          goto LABEL_78;
        }
        v8 = 0;
        v6 = 0;
        LODWORD(v7) = 0;
        *(_DWORD *)(a2 + 24) = PathElementCount;
LABEL_72:
        *(_BYTE *)(a2 + 28) = 0;
        return v6 | ((_DWORD)v7 << 8) | v8;
      }
      if (*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 105))
      {
        v6 = 0;
        LODWORD(v7) = 0;
        *(_DWORD *)(a2 + 24) = 0;
        v8 = 1;
        *(_BYTE *)(a2 + 28) = 1;
        return v6 | ((_DWORD)v7 << 8) | v8;
      }
      if (PathElementCount <= v14)
      {
        LODWORD(v7) = 0;
        v6 = 0x100000000;
        v8 = 1;
        return v6 | ((_DWORD)v7 << 8) | v8;
      }
    }
    else
    {
      v54[0] = "sdf/pathExpressionEval.cpp";
      v54[1] = "_Next";
      v54[2] = 423;
      v54[3] = "SdfPredicateFunctionResult pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase"
               "::_Next(_PatternIncrSearchState &, const SdfPath &, TfFunctionRef<SdfPredicateFunctionResult (int, const "
               "SdfPath &)>) const";
      v55 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
      if (v53 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v54, (pxrInternal__aapl__pxrReserved__ *)"Unsupported path <%s>; can only match prim or prim-property paths",
        v21,
        v22);
      if (v53 < 0)
        operator delete(__p[0]);
    }
    v8 = 0;
    v6 = 0;
    LODWORD(v7) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    goto LABEL_72;
  }
  v6 = 0;
  LODWORD(v7) = 0;
  v8 = *(_BYTE *)(a2 + 28);
  return v6 | ((_DWORD)v7 << 8) | v8;
}

void sub_20C151A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21)
{
  sub_20BFD1A18(&a21);
  _Unwind_Resume(a1);
}

void sub_20C151AC4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20BDDF694();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_20BDE1330(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(char *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *this, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  unint64_t *Instance;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  void **v12;
  unint64_t v14;
  char v15;
  void *__p[2];
  char v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if (*((_QWORD *)this + 3) == *((_QWORD *)this + 4)
    && pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(this))
  {
    v18 = a1;
    v19 = &v15;
    __p[0] = this;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v14);
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(this, (uint64_t)&v18, (uint64_t)sub_20C151D34, (uint64_t)__p, (void (*)(uint64_t, uint64_t))sub_20C15217C, a3, a4);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v9 = v14;
    v10 = atomic_load(Instance + 18);
    v11 = v9 >= v10
       || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v14, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v14);
  }
  else
  {
    v18 = "sdf/pathExpressionEval.cpp";
    v19 = "Sdf_MakePathExpressionEvalImpl";
    v20 = 649;
    v21 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(Sdf_PathExpressionEvalBase &, const SdfP"
          "athExpression &, TfFunctionRef<void (const SdfPathExpression::PathPattern &)>)";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)__p, this);
    if (v17 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build evaluator for incomplete SdfPathExpression; must contain only abs"
                                          "olute paths and no expression references: <%s>",
      (const char *)v12);
    if (v17 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v11;
}

void sub_20C151D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_20C151D34(uint64_t *a1, int a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  int *v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int *v36;
  char *v37;
  int v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  _QWORD v65[4];
  char v66;

  v4 = a2 - 1;
  if ((a2 - 1) < 4)
  {
    if (a3 != 2)
    {
      if (a3 != 1)
        return;
      v5 = *a1;
      if (v4 > 3)
        v6 = -1;
      else
        v6 = dword_20CAB7F40[v4];
      v15 = *(_QWORD *)(v5 + 16);
      v16 = *(int **)(v5 + 8);
      if ((unint64_t)v16 < v15)
      {
        *v16 = v6;
        v17 = v16 + 1;
        goto LABEL_48;
      }
      v18 = *(int **)v5;
      v19 = ((uint64_t)v16 - *(_QWORD *)v5) >> 2;
      v20 = v19 + 1;
      if (!((unint64_t)(v19 + 1) >> 62))
      {
        v21 = v15 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)sub_20BDE1330(v5 + 16, v22);
          v18 = *(int **)v5;
          v16 = *(int **)(v5 + 8);
        }
        else
        {
          v23 = 0;
        }
        v36 = (int *)&v23[4 * v19];
        v37 = &v23[4 * v22];
        *v36 = v6;
        v17 = v36 + 1;
        while (v16 != v18)
        {
          v38 = *--v16;
          *--v36 = v38;
        }
        *(_QWORD *)v5 = v36;
        *(_QWORD *)(v5 + 8) = v17;
        *(_QWORD *)(v5 + 16) = v37;
        if (v18)
          operator delete(v18);
LABEL_48:
        *(_QWORD *)(v5 + 8) = v17;
        v7 = *a1;
        v8 = *(int **)(v7 + 8);
        v39 = *(_QWORD *)(v7 + 16);
        if ((unint64_t)v8 < v39)
        {
          v10 = 2;
          goto LABEL_50;
        }
        v30 = *(int **)v7;
        v41 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
        v42 = v41 + 1;
        if (!((unint64_t)(v41 + 1) >> 62))
        {
          v43 = v39 - (_QWORD)v30;
          if (v43 >> 1 > v42)
            v42 = v43 >> 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            v45 = (char *)sub_20BDE1330(v7 + 16, v44);
            v30 = *(int **)v7;
            v8 = *(int **)(v7 + 8);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[4 * v41];
          v47 = &v45[4 * v44];
          *(_DWORD *)v46 = 2;
          v40 = v46 + 4;
          while (v8 != v30)
          {
            v48 = *--v8;
            *((_DWORD *)v46 - 1) = v48;
            v46 -= 4;
          }
LABEL_91:
          *(_QWORD *)v7 = v46;
          *(_QWORD *)(v7 + 8) = v40;
          *(_QWORD *)(v7 + 16) = v47;
          if (v30)
            operator delete(v30);
          goto LABEL_93;
        }
        goto LABEL_96;
      }
LABEL_95:
      sub_20BDDF694();
    }
    v11 = *a1;
    if (a2 == 4)
    {
      v12 = *(_QWORD *)(v11 + 16);
      v13 = *(_DWORD **)(v11 + 8);
      if ((unint64_t)v13 >= v12)
      {
        v24 = *(_DWORD **)v11;
        v25 = ((uint64_t)v13 - *(_QWORD *)v11) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          goto LABEL_95;
        v27 = v12 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)sub_20BDE1330(v11 + 16, v28);
          v24 = *(_DWORD **)v11;
          v13 = *(_DWORD **)(v11 + 8);
        }
        else
        {
          v29 = 0;
        }
        v49 = &v29[4 * v25];
        v50 = &v29[4 * v28];
        *(_DWORD *)v49 = 1;
        v14 = v49 + 4;
        while (v13 != v24)
        {
          v51 = *--v13;
          *((_DWORD *)v49 - 1) = v51;
          v49 -= 4;
        }
        *(_QWORD *)v11 = v49;
        *(_QWORD *)(v11 + 8) = v14;
        *(_QWORD *)(v11 + 16) = v50;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v13 = 1;
        v14 = v13 + 1;
      }
      *(_QWORD *)(v11 + 8) = v14;
      v11 = *a1;
    }
    v52 = *(_QWORD *)(v11 + 16);
    v53 = *(_DWORD **)(v11 + 8);
    if ((unint64_t)v53 >= v52)
    {
      v55 = *(_DWORD **)v11;
      v56 = ((uint64_t)v53 - *(_QWORD *)v11) >> 2;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62)
        goto LABEL_95;
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 1 > v57)
        v57 = v58 >> 1;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
        v59 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        v60 = (char *)sub_20BDE1330(v11 + 16, v59);
        v55 = *(_DWORD **)v11;
        v53 = *(_DWORD **)(v11 + 8);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[4 * v56];
      v62 = &v60[4 * v59];
      *(_DWORD *)v61 = 3;
      v54 = v61 + 4;
      while (v53 != v55)
      {
        v63 = *--v53;
        *((_DWORD *)v61 - 1) = v63;
        v61 -= 4;
      }
      *(_QWORD *)v11 = v61;
      *(_QWORD *)(v11 + 8) = v54;
      *(_QWORD *)(v11 + 16) = v62;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *v53 = 3;
      v54 = v53 + 1;
    }
    *(_QWORD *)(v11 + 8) = v54;
    return;
  }
  if (a2 == 5)
  {
    v65[0] = "sdf/pathExpressionEval.cpp";
    v65[1] = "operator()";
    v65[2] = 700;
    v65[3] = "auto pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(Sdf_PathExpressionEvalBase &, const S"
             "dfPathExpression &, TfFunctionRef<void (const SdfPathExpression::PathPattern &)>)::(anonymous class)::opera"
             "tor()(Expr::Op, int) const";
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v65, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build evaluator for incomplete SdfPathExpression");
    return;
  }
  if (!a2 && a3 == 1)
  {
    v7 = *a1;
    v8 = *(int **)(*a1 + 8);
    v9 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v8 < v9)
    {
      v10 = 1;
LABEL_50:
      *v8 = v10;
      v40 = v8 + 1;
LABEL_93:
      *(_QWORD *)(v7 + 8) = v40;
      return;
    }
    v30 = *(int **)v7;
    v31 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
    v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 62))
    {
      v33 = v9 - (_QWORD)v30;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)sub_20BDE1330(v7 + 16, v34);
        v30 = *(int **)v7;
        v8 = *(int **)(v7 + 8);
      }
      else
      {
        v35 = 0;
      }
      v46 = &v35[4 * v31];
      v47 = &v35[4 * v34];
      *(_DWORD *)v46 = 1;
      v40 = v46 + 4;
      while (v8 != v30)
      {
        v64 = *--v8;
        *((_DWORD *)v46 - 1) = v64;
        v46 -= 4;
      }
      goto LABEL_91;
    }
LABEL_96:
    sub_20BDDF694();
  }
}

void sub_20C15217C(pxrInternal__aapl__pxrReserved__::SdfPathExpression **a1)
{
  void **v1;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "sdf/pathExpressionEval.cpp";
  v4[1] = "operator()";
  v4[2] = 710;
  v4[3] = "auto pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(Sdf_PathExpressionEvalBase &, const SdfP"
          "athExpression &, TfFunctionRef<void (const SdfPathExpression::PathPattern &)>)::(anonymous class)::operator()("
          "const Expr::ExpressionReference &) const";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)__p, *a1);
  if (v3 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected reference in path expression: <%s>", (const char *)v1);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20C15220C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20C152228(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    sub_20BDDF5B4();
  return operator new(12 * a2);
}

uint64_t sub_20C15226C(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BE6D0B4(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[48 * v5];
  v17 = v16;
  v18 = &v12[48 * v11];
  pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(v16, a2, *a3);
  v17 = v16 + 48;
  sub_20C152378(a1, &v15);
  v13 = a1[1];
  sub_20C152410((uint64_t)&v15);
  return v13;
}

void sub_20C152364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C152410((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C152378(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 48) = *(_DWORD *)(v2 + v5 - 48);
      v8 = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v8;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C152410(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_FreeList::Pop(uint64_t a1)
{
  _DWORD *result;

  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a1);
  *(_DWORD *)a1 = *result;
  --*(_QWORD *)(a1 + 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_FreeList::Push(uint64_t a1, int a2)
{
  _DWORD *result;
  int v4;

  v4 = a2;
  ++*(_QWORD *)(a1 + 8);
  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v4);
  *result = *(_DWORD *)a1;
  *(_DWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_PoolSpan::size(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_PoolSpan::Alloc(int *a1)
{
  int v1;
  int v2;
  unsigned int v4;

  v1 = *a1;
  v2 = a1[1];
  a1[1] = v2 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1, v2);
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_PoolSpan::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8);
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::_RegionState(int *result, int a2, int a3)
{
  *result = a2 | (a3 << 8);
  return result;
}

{
  *result = a2 | (a3 << 8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::Reserve(_DWORD *a1, unsigned int a2)
{
  if (0x1000000 - (*a1 >> 8) <= a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 | ((a2 + (*a1 >> 8)) << 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetIndex(_DWORD *a1)
{
  return *a1 >> 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetRegion(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetInitState()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetLockedState()
{
  return 0xFFFFFFFFLL;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::IsLocked(_DWORD *a1)
{
  return *a1 == -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  char *v3;
  int v4;
  int v6;
  int v7;
  _BYTE *v9;
  uint64_t (**v10)(_QWORD);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v0 = *(_QWORD *)off_254740B88();
  if (!v0)
  {
    v9 = (_BYTE *)off_254740BB8(&off_254740BB8);
    v10 = &off_254740BA0;
    if ((*v9 & 1) == 0)
    {
      v12 = off_254740BA0(&off_254740BA0);
      *(_DWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)v14(v13) = 1;
    }
    v0 = (*v10)(v10);
    *v11 = v0;
  }
  v15 = *(_DWORD *)v0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15))
    goto LABEL_6;
  v1 = *(_DWORD *)(v0 + 20);
  if (v1 != *(_DWORD *)(v0 + 24))
  {
    v4 = *(_DWORD *)(v0 + 16);
    *(_DWORD *)(v0 + 20) = v1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v16, v4, v1);
    return v16;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_TakeSharedFreeList((_OWORD *)v0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ReserveSpan((_DWORD *)(v0 + 16), v2, v3);
    v6 = *(_DWORD *)(v0 + 16);
    v7 = *(_DWORD *)(v0 + 20);
    *(_DWORD *)(v0 + 20) = v7 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v17, v6, v7);
    return v17;
  }
  v15 = *(_DWORD *)v0;
LABEL_6:
  *(_DWORD *)v0 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)v0);
  --*(_QWORD *)(v0 + 8);
  return v15;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPrimTagELj24ELj8ELj16384EE8AllocateEv();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_TakeSharedFreeList(_OWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2)
  {
    v2 = sub_20C158740();
    while (!__ldaxr(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists))
    {
      if (!__stlxr((unint64_t)v2, &pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists))return sub_20C158988((uint64_t)v2, a1);
    }
    __clrex();
    if (v2)
      (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    v2 = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  }
  return sub_20C158988((uint64_t)v2, a1);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPrimTagELj24ELj8ELj16384EE19_TakeSharedFreeListERNS2_9_FreeListE(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ReserveSpan(_DWORD *a1, unint64_t a2, char *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState)
  {
    while (1)
    {
      v4 = __ldaxr((unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState);
      if (v4)
        break;
      if (!__stlxr(0xFFFFFFFF, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState))
      {
        qword_25473B518 = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
        v4 = 257;
        atomic_store(0x101u, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState);
        goto LABEL_6;
      }
    }
    __clrex();
  }
LABEL_6:
  v5 = v4;
  do
  {
    while (1)
    {
      while (v5 == -1)
      {
        sched_yield();
        v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState;
      }
      v6 = v5;
      v7 = v5 + 0x400000;
      v8 = v5 >= 0xFFC00000 ? -1 : v5 + 0x400000;
      v5 = __ldaxr((unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState);
      if (v5 == v6)
        break;
      __clrex();
    }
  }
  while (__stlxr(v8, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState));
  if (v8 == -1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v6 + 1] = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
    v7 = (v6 + 1) | 0x100;
    atomic_store(v7, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState);
  }
  *a1 = v6;
  a1[1] = v6 >> 8;
  if (v6 == v7)
    v9 = v7 >> 8;
  else
    v9 = 0xFFFFFF;
  a1[2] = v9;
  return pxrInternal__aapl__pxrReserved__::Sdf_PoolCommitRange((pxrInternal__aapl__pxrReserved__ *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v6]+ 24 * (v6 >> 8)), (char *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v6]+ (24 * v9)), a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPrimTagELj24ELj8ELj16384EE12_ReserveSpanERNS2_9_PoolSpanE(a1, a2, a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Free()
{
  int v0;
  uint64_t v1;
  _DWORD *result;
  _BYTE *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  int v9;

  v1 = *(_QWORD *)off_254740B88();
  if (!v1)
  {
    v3 = (_BYTE *)off_254740BB8(&off_254740BB8);
    v4 = &off_254740BA0;
    if ((*v3 & 1) == 0)
    {
      v6 = off_254740BA0(&off_254740BA0);
      *(_DWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_BYTE *)v8(v7) = 1;
    }
    v1 = (*v4)(v4);
    *v5 = v1;
  }
  v9 = v0;
  ++*(_QWORD *)(v1 + 8);
  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v9);
  *result = *(_DWORD *)v1;
  *(_DWORD *)v1 = v9;
  if (*(_QWORD *)(v1 + 8) >= 0x4000uLL)
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ShareFreeList(v1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ShareFreeList(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;
  uint64_t *v7;

  v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2)
  {
    v7 = sub_20C158740();
    v2 = v7;
    while (!__ldaxr(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists))
    {
      if (!__stlxr((unint64_t)v7, &pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists))goto LABEL_2;
    }
    __clrex();
    if (v7)
      (*(void (**)(uint64_t *))(*v7 + 8))(v7);
    v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  }
LABEL_2:
  v3 = v2[1];
  v4 = (unint64_t *)(v3 + 128);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = sub_20BF39FFC((_QWORD *)(v3 + 40 * ((3 * (_BYTE)v5) & 7) + 384), a1, v5, v2, (uint64_t (*)(_QWORD *, uint64_t))sub_20C158B64);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPrimTagELj24ELj8ELj16384EE14_ShareFreeListERNS2_9_FreeListE(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_GetPtr(int a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[a1]
       + (24 * a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_GetHandle(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v4;

  if (a1)
  {
    v1 = 0;
    while (1)
    {
      v2 = a1
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v1 + 1];
      if (v2 >> 27 < 3)
        break;
      if ((_DWORD)++v1 == 256)
        goto LABEL_5;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1 + 1, v2 / 0x18);
  }
  else
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  }
  return v4;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_FreeList::Pop(uint64_t a1)
{
  _DWORD *result;

  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a1);
  *(_DWORD *)a1 = *result;
  --*(_QWORD *)(a1 + 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_FreeList::Push(uint64_t a1, int a2)
{
  _DWORD *result;
  int v4;

  v4 = a2;
  ++*(_QWORD *)(a1 + 8);
  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v4);
  *result = *(_DWORD *)a1;
  *(_DWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_PoolSpan::size(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_PoolSpan::Alloc(int *a1)
{
  int v1;
  int v2;
  unsigned int v4;

  v1 = *a1;
  v2 = a1[1];
  a1[1] = v2 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1, v2);
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_PoolSpan::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8);
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::_RegionState(int *result, int a2, int a3)
{
  *result = a2 | (a3 << 8);
  return result;
}

{
  *result = a2 | (a3 << 8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::Reserve(_DWORD *a1, unsigned int a2)
{
  if (0x1000000 - (*a1 >> 8) <= a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 | ((a2 + (*a1 >> 8)) << 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetIndex(_DWORD *a1)
{
  return *a1 >> 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetRegion(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetInitState()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetLockedState()
{
  return 0xFFFFFFFFLL;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::IsLocked(_DWORD *a1)
{
  return *a1 == -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  char *v3;
  int v4;
  int v6;
  int v7;
  _BYTE *v9;
  uint64_t (**v10)(_QWORD);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v0 = *(_QWORD *)off_254740BD0();
  if (!v0)
  {
    v9 = (_BYTE *)off_254740C00(&off_254740C00);
    v10 = &off_254740BE8;
    if ((*v9 & 1) == 0)
    {
      v12 = off_254740BE8(&off_254740BE8);
      *(_DWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)v14(v13) = 1;
    }
    v0 = (*v10)(v10);
    *v11 = v0;
  }
  v15 = *(_DWORD *)v0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15))
    goto LABEL_6;
  v1 = *(_DWORD *)(v0 + 20);
  if (v1 != *(_DWORD *)(v0 + 24))
  {
    v4 = *(_DWORD *)(v0 + 16);
    *(_DWORD *)(v0 + 20) = v1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v16, v4, v1);
    return v16;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_TakeSharedFreeList((_OWORD *)v0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ReserveSpan((_DWORD *)(v0 + 16), v2, v3);
    v6 = *(_DWORD *)(v0 + 16);
    v7 = *(_DWORD *)(v0 + 20);
    *(_DWORD *)(v0 + 20) = v7 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v17, v6, v7);
    return v17;
  }
  v15 = *(_DWORD *)v0;
LABEL_6:
  *(_DWORD *)v0 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)v0);
  --*(_QWORD *)(v0 + 8);
  return v15;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPropTagELj24ELj8ELj16384EE8AllocateEv();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_TakeSharedFreeList(_OWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2)
  {
    v2 = sub_20C158B70();
    while (!__ldaxr(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists))
    {
      if (!__stlxr((unint64_t)v2, &pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists))return sub_20C158988((uint64_t)v2, a1);
    }
    __clrex();
    if (v2)
      (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    v2 = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  }
  return sub_20C158988((uint64_t)v2, a1);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPropTagELj24ELj8ELj16384EE19_TakeSharedFreeListERNS2_9_FreeListE(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ReserveSpan(_DWORD *a1, unint64_t a2, char *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState)
  {
    while (1)
    {
      v4 = __ldaxr((unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState);
      if (v4)
        break;
      if (!__stlxr(0xFFFFFFFF, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState))
      {
        qword_25473BD30 = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
        v4 = 257;
        atomic_store(0x101u, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState);
        goto LABEL_6;
      }
    }
    __clrex();
  }
LABEL_6:
  v5 = v4;
  do
  {
    while (1)
    {
      while (v5 == -1)
      {
        sched_yield();
        v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState;
      }
      v6 = v5;
      v7 = v5 + 0x400000;
      v8 = v5 >= 0xFFC00000 ? -1 : v5 + 0x400000;
      v5 = __ldaxr((unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState);
      if (v5 == v6)
        break;
      __clrex();
    }
  }
  while (__stlxr(v8, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState));
  if (v8 == -1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v6 + 1] = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
    v7 = (v6 + 1) | 0x100;
    atomic_store(v7, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState);
  }
  *a1 = v6;
  a1[1] = v6 >> 8;
  if (v6 == v7)
    v9 = v7 >> 8;
  else
    v9 = 0xFFFFFF;
  a1[2] = v9;
  return pxrInternal__aapl__pxrReserved__::Sdf_PoolCommitRange((pxrInternal__aapl__pxrReserved__ *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v6]+ 24 * (v6 >> 8)), (char *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v6]+ (24 * v9)), a3);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPropTagELj24ELj8ELj16384EE12_ReserveSpanERNS2_9_PoolSpanE(a1, a2, a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Free()
{
  int v0;
  uint64_t v1;
  _DWORD *result;
  _BYTE *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  int v9;

  v1 = *(_QWORD *)off_254740BD0();
  if (!v1)
  {
    v3 = (_BYTE *)off_254740C00(&off_254740C00);
    v4 = &off_254740BE8;
    if ((*v3 & 1) == 0)
    {
      v6 = off_254740BE8(&off_254740BE8);
      *(_DWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_BYTE *)v8(v7) = 1;
    }
    v1 = (*v4)(v4);
    *v5 = v1;
  }
  v9 = v0;
  ++*(_QWORD *)(v1 + 8);
  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v9);
  *result = *(_DWORD *)v1;
  *(_DWORD *)v1 = v9;
  if (*(_QWORD *)(v1 + 8) >= 0x4000uLL)
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ShareFreeList(v1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ShareFreeList(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;
  uint64_t *v7;

  v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2)
  {
    v7 = sub_20C158B70();
    v2 = v7;
    while (!__ldaxr(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists))
    {
      if (!__stlxr((unint64_t)v7, &pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists))goto LABEL_2;
    }
    __clrex();
    if (v7)
      (*(void (**)(uint64_t *))(*v7 + 8))(v7);
    v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  }
LABEL_2:
  v3 = v2[1];
  v4 = (unint64_t *)(v3 + 128);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = sub_20BF39FFC((_QWORD *)(v3 + 40 * ((3 * (_BYTE)v5) & 7) + 384), a1, v5, v2, (uint64_t (*)(_QWORD *, uint64_t))sub_20C158D44);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8Sdf_PoolINS_15Sdf_PathPropTagELj24ELj8ELj16384EE14_ShareFreeListERNS2_9_FreeListE(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_GetPtr(int a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[a1]
       + (24 * a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_GetHandle(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v4;

  if (a1)
  {
    v1 = 0;
    while (1)
    {
      v2 = a1
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v1 + 1];
      if (v2 >> 27 < 3)
        break;
      if ((_DWORD)++v1 == 256)
        goto LABEL_5;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1 + 1, v2 / 0x18);
  }
  else
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v4);
  }
  return v4;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  int v9;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(a1);
  v2 = *(_QWORD *)off_254740B88();
  if (!v2)
  {
    v3 = (_BYTE *)off_254740BB8(&off_254740BB8);
    v4 = &off_254740BA0;
    if ((*v3 & 1) == 0)
    {
      v6 = off_254740BA0(&off_254740BA0);
      *(_DWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_BYTE *)v8(v7) = 1;
    }
    v2 = (*v4)(v4);
    *v5 = v2;
  }
  v9 = v1;
  ++*(_QWORD *)(v2 + 8);
  *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v9) = *(_DWORD *)v2;
  *(_DWORD *)v2 = v9;
  if (*(_QWORD *)(v2 + 8) >= 0x4000uLL)
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ShareFreeList(v2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  int v9;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(a1);
  v2 = *(_QWORD *)off_254740BD0();
  if (!v2)
  {
    v3 = (_BYTE *)off_254740C00(&off_254740C00);
    v4 = &off_254740BE8;
    if ((*v3 & 1) == 0)
    {
      v6 = off_254740BE8(&off_254740BE8);
      *(_DWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_BYTE *)v8(v7) = 1;
    }
    v2 = (*v4)(v4);
    *v5 = v2;
  }
  v9 = v1;
  ++*(_QWORD *)(v2 + 8);
  *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v9) = *(_DWORD *)v2;
  *(_DWORD *)v2 = v9;
  if (*(_QWORD *)(v2 + 8) >= 0x4000uLL)
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ShareFreeList(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_RootPathNode::New(pxrInternal__aapl__pxrReserved__::Sdf_RootPathNode *this)
{
  char v1;
  uint64_t result;
  int v3;

  v1 = (char)this;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v3);
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_BYTE *)(result + 15) = v1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  void *v1;
  _QWORD *Ptr;
  char *v4;
  _QWORD v6[4];
  char v7;
  int v8;

  v1 = (void *)atomic_load(&qword_254985C68);
  if (!v1)
  {
    v1 = operator new(8uLL);
    LODWORD(v6[0]) = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
    Ptr = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(v6);
    *Ptr = 0;
    Ptr[1] = 0x100000000000001;
    *(_QWORD *)v1 = Ptr;
    if ((Ptr[1] & 0x7FFFFFFF) != 1)
    {
      v6[0] = "sdf/pathNode.cpp";
      v6[1] = "_absoluteRootNode_Tf_StaticDataFactoryImpl";
      v6[2] = 332;
      v6[3] = "void pxrInternal__aapl__pxrReserved__::_absoluteRootNode_Tf_StaticDataFactoryImpl(std::remove_const_t<cons"
              "t Sdf_PathNode *> *)";
      v7 = 0;
      v8 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v4, "(*_absoluteRootNode)->GetCurrentRefCount() == 1");
    }
    while (!__ldaxr(&qword_254985C68))
    {
      if (!__stlxr((unint64_t)v1, &qword_254985C68))
        return *(_QWORD *)v1;
    }
    __clrex();
    operator delete(v1);
    v1 = (void *)atomic_load(&qword_254985C68);
  }
  return *(_QWORD *)v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  void *v1;
  _QWORD *Ptr;
  char *v4;
  _QWORD v6[4];
  char v7;
  int v8;

  v1 = (void *)atomic_load(&qword_254985C70);
  if (!v1)
  {
    v1 = operator new(8uLL);
    LODWORD(v6[0]) = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
    Ptr = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(v6);
    *Ptr = 0;
    Ptr[1] = 1;
    *(_QWORD *)v1 = Ptr;
    if ((Ptr[1] & 0x7FFFFFFF) != 1)
    {
      v6[0] = "sdf/pathNode.cpp";
      v6[1] = "_relativeRootNode_Tf_StaticDataFactoryImpl";
      v6[2] = 336;
      v6[3] = "void pxrInternal__aapl__pxrReserved__::_relativeRootNode_Tf_StaticDataFactoryImpl(std::remove_const_t<cons"
              "t Sdf_PathNode *> *)";
      v7 = 0;
      v8 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v4, "(*_relativeRootNode)->GetCurrentRefCount() == 1");
    }
    while (!__ldaxr(&qword_254985C70))
    {
      if (!__stlxr((unint64_t)v1, &qword_254985C70))
        return *(_QWORD *)v1;
    }
    __clrex();
    operator delete(v1);
    v1 = (void *)atomic_load(&qword_254985C70);
  }
  return *(_QWORD *)v1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _WORD *v32;
  unsigned __int16 v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  int *v43;
  _WORD *v44;
  unsigned __int16 i;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  uint64_t Ptr;
  _DWORD *result;
  _BYTE *v61;
  _BYTE *v62;
  int v63;

  v10 = sub_20C153934()
      + 88
      * ((((0x1E3779B97F4A7C55
                        * ((*a2 & 0xFFFFFFFFFFFFFFF8)
                         + (((*a2 & 0xFFFFFFFFFFFFFFF8)
                           + a1
                           + ((*a2 & 0xFFFFFFFFFFFFFFF8) + a1) * ((*a2 & 0xFFFFFFFFFFFFFFF8) + a1)) >> 1))) >> 32) >> 24) & 0x7F);
  sub_20BEB3FEC((uint64_t)&v62, v10 + 80);
  v11 = *a2;
  if ((*a2 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = bswap64(0x9E3779B97F4A7C55* ((v11 & 0xFFFFFFFFFFFFFFF8)+ (((v11 & 0xFFFFFFFFFFFFFFF8)+ a1+ ((v11 & 0xFFFFFFFFFFFFFFF8) + a1) * ((v11 & 0xFFFFFFFFFFFFFFF8) + a1)) >> 1)));
  v15 = *(_QWORD *)v10;
  v16 = *(_QWORD *)(v10 + 32);
  v17 = v14 & *(_QWORD *)v10;
  if (*(__int16 *)(v16 + 32 * v17 + 4) < 0)
  {
    LOWORD(v18) = 0;
LABEL_13:
    if (*(_BYTE *)(v10 + 72) || (v22 = *(_QWORD *)(v10 + 48), v22 >= *(_QWORD *)(v10 + 56)))
    {
      v30 = sub_20BED1164((_QWORD *)v10);
      sub_20C1590EC((uint64_t *)v10, v30);
      *(_BYTE *)(v10 + 72) = 0;
    }
    else
    {
      if (!*(_BYTE *)(v10 + 73))
        goto LABEL_30;
      *(_BYTE *)(v10 + 73) = 0;
      v23 = *(float *)(v10 + 64);
      if (v23 == 0.0)
        goto LABEL_30;
      v24 = *(_QWORD *)(v10 + 40);
      v25 = 0.0;
      if (v24)
        v25 = (float)v22 / (float)v24;
      if (v25 >= v23)
        goto LABEL_30;
      v26 = *(float *)(v10 + 68);
      v27 = vcvtps_u32_f32((float)(v22 + 1) / v26);
      v28 = vcvtps_u32_f32((float)v22 / v26);
      if (v28 <= v27)
        v29 = v27;
      else
        v29 = v28;
      sub_20C1590EC((uint64_t *)v10, v29);
    }
    v15 = *(_QWORD *)v10;
    v16 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)v10 & v14;
    if (*(__int16 *)(v16 + 32 * v17 + 4) < 0)
    {
      LOWORD(v18) = 0;
    }
    else
    {
      LOWORD(v18) = 0;
      do
      {
        v18 = (__int16)(v18 + 1);
        v17 = (v17 + 1) & v15;
      }
      while (v18 <= *(__int16 *)(v16 + 32 * v17 + 4));
    }
LABEL_30:
    v31 = (int *)(v16 + 32 * v17);
    v32 = v31 + 1;
    v33 = *((_WORD *)v31 + 2);
    v34 = (uint64_t *)(v31 + 2);
    v35 = (uint64_t *)(v31 + 4);
    if (v33 == 0xFFFF)
    {
      *v34 = a1;
      *v35 = v11;
      v31[6] = 0;
      *v31 = v14;
      *v32 = v18;
    }
    else
    {
      v36 = *v34;
      v37 = *v35;
      *v34 = a1;
      *v35 = v11;
      v38 = v31[6];
      v31[6] = 0;
      *v32 = v18;
      v39 = *v31;
      *v31 = v14;
      v40 = (v17 + 1) & v15;
      v41 = v33 + 1;
      v42 = *(_QWORD *)(v10 + 32);
      v43 = (int *)(v42 + 32 * v40);
      v44 = v43 + 1;
      for (i = *((_WORD *)v43 + 2); i != 0xFFFF; i = *((_WORD *)v43 + 2))
      {
        if (v41 > (__int16)i)
        {
          if (v41 >= 4096)
            *(_BYTE *)(v10 + 72) = 1;
          v47 = *((_QWORD *)v43 + 1);
          v46 = *((_QWORD *)v43 + 2);
          *((_QWORD *)v43 + 1) = v36;
          *((_QWORD *)v43 + 2) = v37;
          v48 = v43[6];
          v43[6] = v38;
          v49 = *((_WORD *)v43 + 2);
          *((_WORD *)v43 + 2) = v41;
          v50 = *v43;
          *v43 = v39;
          v38 = v48;
          v37 = v46;
          v36 = v47;
          v39 = v50;
          v41 = v49;
          v42 = *(_QWORD *)(v10 + 32);
        }
        v40 = v15 & (v40 + 1);
        ++v41;
        v43 = (int *)(v42 + 32 * v40);
        v44 = v43 + 1;
      }
      v51 = v42 + 32 * v40;
      *(_QWORD *)(v51 + 8) = v36;
      *(_QWORD *)(v51 + 16) = v37;
      *(_DWORD *)(v51 + 24) = v38;
      *v43 = v39;
      *v44 = v41;
    }
    v11 = 0;
    v52 = 0;
    ++*(_QWORD *)(v10 + 48);
    v53 = *(_QWORD *)(v10 + 32) + 32 * v17;
    goto LABEL_40;
  }
  LOWORD(v18) = 0;
  while (1)
  {
    v19 = v16 + 32 * v17;
    v21 = *(_QWORD *)(v19 + 8);
    v20 = v19 + 8;
    if (v21 == a1 && (*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8))
      break;
    v18 = (__int16)(v18 + 1);
    v17 = (v17 + 1) & v15;
    if (v18 > *(__int16 *)(v16 + 32 * v17 + 4))
      goto LABEL_13;
  }
  v53 = v16 + 32 * v17;
  v52 = 1;
LABEL_40:
  if ((v11 & 7) != 0)
  {
    v54 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  if ((v52 & 1) != 0)
  {
    v63 = *(_DWORD *)(v53 + 24);
    v56 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v63)
                         + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
    if ((v57 & 0x7FFFFFFF) != 0)
    {
      v58 = *(_DWORD *)(v53 + 24);
LABEL_50:
      v63 = v58;
      *a5 = v58;
      result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
      goto LABEL_51;
    }
LABEL_49:
    v63 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v63);
    sub_20C159350(Ptr, a1, a2);
    v58 = v63;
    *(_DWORD *)(v53 + 24) = v63;
    goto LABEL_50;
  }
  if ((a4(a3) & 1) != 0)
    goto LABEL_49;
  sub_20C158FC4((uint64_t *)v10, v53);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a5);
LABEL_51:
  v61 = v62;
  if (v62)
  {
    __dmb(0xBu);
    *v61 = 0;
  }
  return result;
}

void sub_20C153900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C153934()
{
  char *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void **v6;

  v0 = (char *)atomic_load(&qword_254985C78);
  if (!v0)
  {
    v0 = (char *)operator new(0x2C00uLL);
    v2 = 0;
    v3 = 128;
    do
    {
      *(_BYTE *)(sub_20C158D50((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    while (!__ldaxr(&qword_254985C78))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985C78))
        return (unint64_t)v0;
    }
    v5 = 0;
    __clrex();
    do
    {
      v6 = (void **)&v0[v5 + 11184];
      sub_20C158F18(&v6);
      v5 -= 88;
    }
    while (v5 != -11264);
    operator delete(v0);
    return atomic_load(&qword_254985C78);
  }
  return (unint64_t)v0;
}

void sub_20C153A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C158F18((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, _DWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *Ptr;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  _DWORD *result;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;

  v20 = 0;
  v21 = a1;
  v22 = 0;
  v8 = (uint64_t *)(sub_20C153B9C()
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*v21 & 0xFFFFFFFFFFFFFFF8)
                                    + (((*v21 & 0xFFFFFFFFFFFFFFF8 | 1) * (*v21 & 0xFFFFFFFFFFFFFFF8)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v19, (uint64_t)(v8 + 10));
  v9 = sub_20C1595D0(v8, &v20);
  v10 = v9;
  if (!v11)
  {
    v16 = *(_DWORD *)(v9 + 24);
LABEL_10:
    v23 = v16;
    *a4 = v16;
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    goto LABEL_11;
  }
  if ((a3(a2) & 1) != 0)
  {
    v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    Ptr = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v23);
    *Ptr = 0;
    Ptr[1] = 0x3000100000001;
    v13 = *a1;
    Ptr[2] = *a1;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        Ptr[2] &= 0xFFFFFFFFFFFFFFF8;
    }
    v16 = v23;
    *(_DWORD *)(v10 + 24) = v23;
    goto LABEL_10;
  }
  sub_20C158FC4(v8, v10);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4);
LABEL_11:
  v18 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *v18 = 0;
  }
  return result;
}

void sub_20C153B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C153B9C()
{
  char *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void **v6;

  v0 = (char *)atomic_load(&qword_254985C80);
  if (!v0)
  {
    v0 = (char *)operator new(0x2C00uLL);
    v2 = 0;
    v3 = 128;
    do
    {
      *(_BYTE *)(sub_20C1593D0((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    while (!__ldaxr(&qword_254985C80))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985C80))
        return (unint64_t)v0;
    }
    v5 = 0;
    __clrex();
    do
    {
      v6 = (void **)&v0[v5 + 11184];
      sub_20C158F18(&v6);
      v5 -= 88;
    }
    while (v5 != -11264);
    operator delete(v0);
    return atomic_load(&qword_254985C80);
  }
  return (unint64_t)v0;
}

void sub_20C153C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C158F18((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimVariantSelection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, _DWORD *a6@<X8>)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  unsigned __int16 i;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  uint64_t Ptr;
  _DWORD *result;
  _BYTE *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char v68;
  __int16 v69;

  v12 = sub_20C154250();
  sub_20C157C64(&v57, a2, a3);
  v60 = a1;
  v61 = &v57;
  v62 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  sub_20C159F30((uint64_t)&v63, &v60, &v57);
  v13 = v12 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v63) >> 32) >> 24) & 0x7F);
  sub_20BEB3FEC((uint64_t)&v59, v13 + 80);
  v63 = v60;
  sub_20C15A32C(&v64, v61);
  v66 = v62;
  v67 = 0;
  v68 = 0;
  sub_20C159F30((uint64_t)&v67, &v63, &v64);
  v14 = bswap64(0x9E3779B97F4A7C55 * v67);
  v15 = *(_QWORD *)(v13 + 32);
  v16 = v14 & *(_QWORD *)v13;
  if (*(__int16 *)(v15 + 40 * v16 + 4) < 0)
  {
    LOWORD(v17) = 0;
LABEL_9:
    if (*(_BYTE *)(v13 + 72) || (v22 = *(_QWORD *)(v13 + 48), v22 >= *(_QWORD *)(v13 + 56)))
    {
      v30 = sub_20BED1164((_QWORD *)v13);
      sub_20C159FB0((uint64_t *)v13, v30);
      *(_BYTE *)(v13 + 72) = 0;
    }
    else
    {
      if (!*(_BYTE *)(v13 + 73))
        goto LABEL_26;
      *(_BYTE *)(v13 + 73) = 0;
      v23 = *(float *)(v13 + 64);
      if (v23 == 0.0)
        goto LABEL_26;
      v24 = *(_QWORD *)(v13 + 40);
      v25 = 0.0;
      if (v24)
        v25 = (float)v22 / (float)v24;
      if (v25 >= v23)
        goto LABEL_26;
      v26 = *(float *)(v13 + 68);
      v27 = vcvtps_u32_f32((float)(v22 + 1) / v26);
      v28 = vcvtps_u32_f32((float)v22 / v26);
      if (v28 <= v27)
        v29 = v27;
      else
        v29 = v28;
      sub_20C159FB0((uint64_t *)v13, v29);
    }
    v15 = *(_QWORD *)(v13 + 32);
    v16 = *(_QWORD *)v13 & v14;
    if (*(__int16 *)(v15 + 40 * v16 + 4) < 0)
    {
      LOWORD(v17) = 0;
    }
    else
    {
      LOWORD(v17) = 0;
      do
      {
        v17 = (__int16)(v17 + 1);
        v16 = (v16 + 1) & *(_QWORD *)v13;
      }
      while (v17 <= *(__int16 *)(v15 + 40 * v16 + 4));
    }
LABEL_26:
    v31 = v15 + 40 * v16;
    if (*(__int16 *)(v31 + 4) == -1)
    {
      v41 = v15 + 40 * v16;
      *(_QWORD *)(v41 + 8) = v63;
      *(_QWORD *)(v41 + 16) = v64;
      v64 = 0;
      *(_QWORD *)(v41 + 24) = v65;
      v65 = 0;
      *(_DWORD *)(v41 + 32) = v66;
      *(_DWORD *)v31 = v14;
      *(_WORD *)(v31 + 4) = v17;
    }
    else
    {
      v69 = v17;
      LODWORD(v67) = v14;
      sub_20C15A1C8((int *)v31, &v69, (int *)&v67, &v63);
      v32 = *(_QWORD *)v13;
      v33 = *(_QWORD *)v13 & (v16 + 1);
      v34 = ++v69;
      v35 = *(_QWORD *)(v13 + 32);
      v36 = v35 + 40 * v33;
      v37 = (__int16 *)(v36 + 4);
      for (i = *(_WORD *)(v36 + 4); i != 0xFFFF; i = *(_WORD *)(v36 + 4))
      {
        if (v34 > (__int16)i)
        {
          if (v34 >= 4096)
            *(_BYTE *)(v13 + 72) = 1;
          sub_20C15A1C8((int *)v36, &v69, (int *)&v67, &v63);
          v32 = *(_QWORD *)v13;
          v34 = v69;
          v35 = *(_QWORD *)(v13 + 32);
        }
        v33 = v32 & (v33 + 1);
        v69 = ++v34;
        v36 = v35 + 40 * v33;
        v37 = (__int16 *)(v36 + 4);
      }
      v39 = v67;
      v40 = v35 + 40 * v33;
      *(_QWORD *)(v40 + 8) = v63;
      *(_QWORD *)(v40 + 16) = v64;
      v64 = 0;
      *(_QWORD *)(v40 + 24) = v65;
      v65 = 0;
      *(_DWORD *)(v40 + 32) = v66;
      *(_DWORD *)v36 = v39;
      *v37 = v34;
    }
    v42 = 0;
    ++*(_QWORD *)(v13 + 48);
    v43 = *(_QWORD *)(v13 + 32) + 40 * v16;
    goto LABEL_36;
  }
  LOWORD(v17) = 0;
  v18 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
  while (1)
  {
    v19 = v15 + 40 * v16;
    v21 = *(_QWORD *)(v19 + 8);
    v20 = v19 + 8;
    if (v21 == v63
      && (*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8) == (v64 & 0xFFFFFFFFFFFFFFF8)
      && (unsigned int *)(*(_QWORD *)(v20 + 16) & 0xFFFFFFFFFFFFFFF8) == v18)
    {
      break;
    }
    v17 = (__int16)(v17 + 1);
    v16 = (v16 + 1) & *(_QWORD *)v13;
    if (v17 > *(__int16 *)(v15 + 40 * v16 + 4))
      goto LABEL_9;
  }
  v43 = v15 + 40 * v16;
  if ((v65 & 7) != 0)
  {
    do
      v56 = __ldxr(v18);
    while (__stlxr(v56 - 2, v18));
  }
  v42 = 1;
LABEL_36:
  if ((v64 & 7) != 0)
  {
    v44 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if ((v42 & 1) != 0)
  {
    LODWORD(v63) = *(_DWORD *)(v43 + 32);
    v46 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v63)
                         + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
    if ((v47 & 0x7FFFFFFF) != 0)
    {
      v48 = *(_DWORD *)(v43 + 32);
LABEL_46:
      LODWORD(v63) = v48;
      *a6 = v48;
      result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
      goto LABEL_47;
    }
LABEL_45:
    LODWORD(v63) = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v63);
    sub_20C15A398(Ptr, a1, &v57);
    v48 = v63;
    *(_DWORD *)(v43 + 32) = v63;
    goto LABEL_46;
  }
  if ((a5(a4) & 1) != 0)
    goto LABEL_45;
  sub_20C159DA4((uint64_t *)v13, v43);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a6);
LABEL_47:
  v51 = v59;
  if (v59)
  {
    __dmb(0xBu);
    *v51 = 0;
  }
  if ((v58 & 7) != 0)
  {
    v52 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  if ((v57 & 7) != 0)
  {
    v54 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  return result;
}

void sub_20C1541B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((a9 & 7) != 0)
  {
    v13 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C154250()
{
  char *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void **v6;

  v0 = (char *)atomic_load(&qword_254985C88);
  if (!v0)
  {
    v0 = (char *)operator new(0x2C00uLL);
    v2 = 0;
    v3 = 128;
    do
    {
      *(_BYTE *)(sub_20C159ADC((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    while (!__ldaxr(&qword_254985C88))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985C88))
        return (unint64_t)v0;
    }
    v5 = 0;
    __clrex();
    do
    {
      v6 = (void **)&v0[v5 + 11184];
      sub_20C159CB8(&v6);
      v5 -= 88;
    }
    while (v5 != -11264);
    operator delete(v0);
    return atomic_load(&qword_254985C88);
  }
  return (unint64_t)v0;
}

void sub_20C154320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C159CB8((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C154354(_QWORD *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = result[1];
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if ((*result & 7) != 0)
  {
    v4 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateTarget@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t Ptr;
  int v16;
  _DWORD *result;
  _BYTE *v18;
  uint64_t v19[2];
  int v20;
  _BYTE *v21;
  char v22;
  int v23;

  v10 = atomic_load(&qword_254985C90);
  if (!v10)
    v10 = sub_20C15A434();
  v19[0] = a1;
  v19[1] = (uint64_t)a2;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_20C15ABAC((uint64_t)&v21, v19, a2);
  v11 = (uint64_t *)(v10
                  + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * (_QWORD)v21) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v21, (uint64_t)(v11 + 10));
  v12 = sub_20C15A838(v11, (uint64_t)v19);
  v13 = v12;
  if (!v14)
  {
    v16 = *(_DWORD *)(v12 + 24);
    goto LABEL_7;
  }
  if ((a4(a3) & 1) != 0)
  {
    v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v23);
    sub_20C15B030(Ptr, a1, a2);
    v16 = v23;
    *(_DWORD *)(v13 + 24) = v23;
LABEL_7:
    v23 = v16;
    *a5 = v16;
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    goto LABEL_8;
  }
  sub_20C15AF20((uint64_t)v11, v13);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
LABEL_8:
  v18 = v21;
  if (v21)
  {
    __dmb(0xBu);
    *v18 = 0;
  }
  return result;
}

void sub_20C1544DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateRelationalAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t Ptr;
  int v15;
  _DWORD *result;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;

  v19 = a1;
  v20 = a2;
  v21 = 0;
  v10 = (uint64_t *)(sub_20C154630()
                  + 88
                  * ((((0x1E3779B97F4A7C55
                                    * ((*v20 & 0xFFFFFFFFFFFFFFF8)
                                     + (((*v20 & 0xFFFFFFFFFFFFFFF8)
                                       + v19
                                       + ((*v20 & 0xFFFFFFFFFFFFFFF8) + v19) * ((*v20 & 0xFFFFFFFFFFFFFFF8) + v19)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v18, (uint64_t)(v10 + 10));
  v11 = sub_20C1595D0(v10, &v19);
  v12 = v11;
  if (!v13)
  {
    v15 = *(_DWORD *)(v11 + 24);
    goto LABEL_5;
  }
  if ((a4(a3) & 1) != 0)
  {
    v22 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v22);
    sub_20C15B0BC(Ptr, a1, a2);
    v15 = v22;
    *(_DWORD *)(v12 + 24) = v22;
LABEL_5:
    v22 = v15;
    *a5 = v15;
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    goto LABEL_6;
  }
  sub_20C158FC4(v10, v12);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
LABEL_6:
  v17 = v18;
  if (v18)
  {
    __dmb(0xBu);
    *v17 = 0;
  }
  return result;
}

void sub_20C154618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C154630()
{
  char *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void **v6;

  v0 = (char *)atomic_load(&qword_254985C98);
  if (!v0)
  {
    v0 = (char *)operator new(0x2C00uLL);
    v2 = 0;
    v3 = 128;
    do
    {
      *(_BYTE *)(sub_20C1593D0((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    while (!__ldaxr(&qword_254985C98))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985C98))
        return (unint64_t)v0;
    }
    v5 = 0;
    __clrex();
    do
    {
      v6 = (void **)&v0[v5 + 11184];
      sub_20C158F18(&v6);
      v5 -= 88;
    }
    while (v5 != -11264);
    operator delete(v0);
    return atomic_load(&qword_254985C98);
  }
  return (unint64_t)v0;
}

void sub_20C154700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C158F18((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapper@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t Ptr;
  int v16;
  _DWORD *result;
  _BYTE *v18;
  uint64_t v19[2];
  int v20;
  _BYTE *v21;
  char v22;
  int v23;

  v10 = atomic_load(&qword_254985CA0);
  if (!v10)
    v10 = sub_20C15B140();
  v19[0] = a1;
  v19[1] = (uint64_t)a2;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_20C15ABAC((uint64_t)&v21, v19, a2);
  v11 = (uint64_t *)(v10
                  + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * (_QWORD)v21) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v21, (uint64_t)(v11 + 10));
  v12 = sub_20C15A838(v11, (uint64_t)v19);
  v13 = v12;
  if (!v14)
  {
    v16 = *(_DWORD *)(v12 + 24);
    goto LABEL_7;
  }
  if ((a4(a3) & 1) != 0)
  {
    v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v23);
    sub_20C15B238(Ptr, a1, a2);
    v16 = v23;
    *(_DWORD *)(v13 + 24) = v23;
LABEL_7:
    v23 = v16;
    *a5 = v16;
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    goto LABEL_8;
  }
  sub_20C15AF20((uint64_t)v11, v13);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
LABEL_8:
  v18 = v21;
  if (v21)
  {
    __dmb(0xBu);
    *v18 = 0;
  }
  return result;
}

void sub_20C154878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapperArg@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t Ptr;
  int v15;
  _DWORD *result;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;

  v19 = a1;
  v20 = a2;
  v21 = 0;
  v10 = (uint64_t *)(sub_20C1549CC()
                  + 88
                  * ((((0x1E3779B97F4A7C55
                                    * ((*v20 & 0xFFFFFFFFFFFFFFF8)
                                     + (((*v20 & 0xFFFFFFFFFFFFFFF8)
                                       + v19
                                       + ((*v20 & 0xFFFFFFFFFFFFFFF8) + v19) * ((*v20 & 0xFFFFFFFFFFFFFFF8) + v19)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v18, (uint64_t)(v10 + 10));
  v11 = sub_20C1595D0(v10, &v19);
  v12 = v11;
  if (!v13)
  {
    v15 = *(_DWORD *)(v11 + 24);
    goto LABEL_5;
  }
  if ((a4(a3) & 1) != 0)
  {
    v22 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v22);
    sub_20C15B2C4(Ptr, a1, a2);
    v15 = v22;
    *(_DWORD *)(v12 + 24) = v22;
LABEL_5:
    v22 = v15;
    *a5 = v15;
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    goto LABEL_6;
  }
  sub_20C158FC4(v10, v12);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
LABEL_6:
  v17 = v18;
  if (v18)
  {
    __dmb(0xBu);
    *v17 = 0;
  }
  return result;
}

void sub_20C1549B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C1549CC()
{
  char *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void **v6;

  v0 = (char *)atomic_load(&qword_254985CA8);
  if (!v0)
  {
    v0 = (char *)operator new(0x2C00uLL);
    v2 = 0;
    v3 = 128;
    do
    {
      *(_BYTE *)(sub_20C1593D0((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    while (!__ldaxr(&qword_254985CA8))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985CA8))
        return (unint64_t)v0;
    }
    v5 = 0;
    __clrex();
    do
    {
      v6 = (void **)&v0[v5 + 11184];
      sub_20C158F18(&v6);
      v5 -= 88;
    }
    while (v5 != -11264);
    operator delete(v0);
    return atomic_load(&qword_254985CA8);
  }
  return (unint64_t)v0;
}

void sub_20C154A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C158F18((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateExpression@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  int v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int *v35;
  int i;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t Ptr;
  unsigned int *v46;
  unsigned int v47;
  __int16 v48;
  char v49;
  _DWORD *result;
  _BYTE *v51;
  _BYTE *v52;
  int v53;

  v8 = sub_20C154EA4() + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * a1) >> 32) >> 24) & 0x7F);
  sub_20BEB3FEC((uint64_t)&v52, v8 + 80);
  v9 = bswap64(0x9E3779B97F4A7C55 * a1);
  v10 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 32);
  v12 = *(_QWORD *)v8 & v9;
  if ((*(__int16 *)(v11 + 24 * v12 + 4) & 0x80000000) == 0)
  {
    LOWORD(v13) = 0;
    while (*(_QWORD *)(v11 + 24 * v12 + 8) != a1)
    {
      v13 = (__int16)(v13 + 1);
      v12 = (v12 + 1) & v10;
      if (v13 > *(__int16 *)(v11 + 24 * v12 + 4))
        goto LABEL_7;
    }
    v23 = v11 + 24 * v12;
    goto LABEL_42;
  }
  LOWORD(v13) = 0;
LABEL_7:
  if (*(_BYTE *)(v8 + 72) || (v14 = *(_QWORD *)(v8 + 48), v14 >= *(_QWORD *)(v8 + 56)))
  {
    v22 = sub_20BED1164((_QWORD *)v8);
    sub_20C15B66C((uint64_t *)v8, v22);
    *(_BYTE *)(v8 + 72) = 0;
LABEL_19:
    v10 = *(_QWORD *)v8;
    v11 = *(_QWORD *)(v8 + 32);
    v12 = *(_QWORD *)v8 & v9;
    if (*(__int16 *)(v11 + 24 * v12 + 4) < 0)
    {
      LOWORD(v13) = 0;
    }
    else
    {
      LOWORD(v13) = 0;
      do
      {
        v13 = (__int16)(v13 + 1);
        v12 = (v12 + 1) & v10;
      }
      while (v13 <= *(__int16 *)(v11 + 24 * v12 + 4));
    }
    goto LABEL_25;
  }
  if (*(_BYTE *)(v8 + 73))
  {
    *(_BYTE *)(v8 + 73) = 0;
    v15 = *(float *)(v8 + 64);
    if (v15 != 0.0)
    {
      v16 = *(_QWORD *)(v8 + 40);
      v17 = 0.0;
      if (v16)
        v17 = (float)v14 / (float)v16;
      if (v17 < v15)
      {
        v18 = *(float *)(v8 + 68);
        v19 = vcvtps_u32_f32((float)(v14 + 1) / v18);
        v20 = vcvtps_u32_f32((float)v14 / v18);
        if (v20 <= v19)
          v21 = v19;
        else
          v21 = v20;
        sub_20C15B66C((uint64_t *)v8, v21);
        goto LABEL_19;
      }
    }
  }
LABEL_25:
  v24 = (int *)(v11 + 24 * v12);
  v25 = (uint64_t *)(v24 + 2);
  v27 = v24 + 1;
  v26 = *((unsigned __int16 *)v24 + 2);
  if (v26 == 0xFFFF)
  {
    *v25 = a1;
    v24[4] = 0;
    *v24 = v9;
    *v27 = v13;
  }
  else
  {
    v28 = *v25;
    *v25 = a1;
    v29 = v11 + 24 * v12;
    v30 = *(_DWORD *)(v29 + 16);
    *(_DWORD *)(v29 + 16) = 0;
    *v27 = v13;
    v31 = *v24;
    *v24 = v9;
    v32 = (v12 + 1) & v10;
    v33 = v26 + 1;
    v34 = *(_QWORD *)(v8 + 32);
    v35 = (int *)(v34 + 24 * v32);
    v37 = v35 + 1;
    for (i = *((unsigned __int16 *)v35 + 2); i != 0xFFFF; i = *((unsigned __int16 *)v35 + 2))
    {
      if ((__int16)v33 <= (__int16)i)
      {
        i = v33;
      }
      else
      {
        if ((__int16)v33 >= 4096)
          *(_BYTE *)(v8 + 72) = 1;
        v38 = v34 + 24 * v32;
        v39 = *(_QWORD *)(v38 + 8);
        *(_QWORD *)(v38 + 8) = v28;
        v40 = *(_DWORD *)(v38 + 16);
        *(_DWORD *)(v38 + 16) = v30;
        *v37 = v33;
        v41 = *v35;
        *v35 = v31;
        v34 = *(_QWORD *)(v8 + 32);
        v30 = v40;
        v28 = v39;
        v31 = v41;
      }
      v32 = (v32 + 1) & v10;
      v33 = i + 1;
      v35 = (int *)(v34 + 24 * v32);
      v37 = v35 + 1;
    }
    v42 = v34 + 24 * v32;
    *(_QWORD *)(v42 + 8) = v28;
    *(_DWORD *)(v42 + 16) = v30;
    *v35 = v31;
    *v37 = v33;
  }
  ++*(_QWORD *)(v8 + 48);
  v43 = *(_QWORD *)(v8 + 32);
  v44 = a3(a2);
  v23 = v43 + 24 * v12;
  if ((v44 & 1) != 0)
  {
    v53 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v53);
    *(_QWORD *)Ptr = a1;
    if (a1)
    {
      v46 = (unsigned int *)(a1 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v48 = *(_WORD *)(a1 + 12) + 1;
      v49 = *(_BYTE *)(a1 + 15);
    }
    else
    {
      v49 = 0;
      v48 = 1;
    }
    *(_DWORD *)(Ptr + 8) = 1;
    *(_WORD *)(Ptr + 12) = v48;
    *(_BYTE *)(Ptr + 14) = 8;
    *(_BYTE *)(Ptr + 15) = v49;
    *(_DWORD *)(v43 + 24 * v12 + 16) = v53;
LABEL_42:
    v53 = *(_DWORD *)(v23 + 16);
    *a4 = v53;
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    goto LABEL_43;
  }
  sub_20C15B580(v8, v43 + 24 * v12);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4);
LABEL_43:
  v51 = v52;
  if (v52)
  {
    __dmb(0xBu);
    *v51 = 0;
  }
  return result;
}

void sub_20C154E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C154EA4()
{
  char *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void **v6;

  v0 = (char *)atomic_load(&qword_254985CB0);
  if (!v0)
  {
    v0 = (char *)operator new(0x2C00uLL);
    v2 = 0;
    v3 = 128;
    do
    {
      *(_BYTE *)(sub_20C15B348((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    while (!__ldaxr(&qword_254985CB0))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985CB0))
        return (unint64_t)v0;
    }
    v5 = 0;
    __clrex();
    do
    {
      v6 = (void **)&v0[v5 + 11184];
      sub_20C15B524(&v6);
      v5 -= 88;
    }
    while (v5 != -11264);
    operator delete(v0);
    return atomic_load(&qword_254985CB0);
  }
  return (unint64_t)v0;
}

void sub_20C154F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C15B524((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::Sdf_PathNode(uint64_t this, char a2)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  *(_WORD *)(this + 12) = 0;
  *(_BYTE *)(this + 14) = 0;
  *(_BYTE *)(this + 15) = a2;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  *(_WORD *)(this + 12) = 0;
  *(_BYTE *)(this + 14) = 0;
  *(_BYTE *)(this + 15) = a2;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetEmptyVariantSelection(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254985CC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985CC8))
  {
    __cxa_atexit((void (*)(void *))sub_20C154354, &unk_254985CB8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985CC8);
  }
  return &unk_254985CB8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetPathToken(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this, std::string *a2, const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a3)
{
  unsigned int *v5;
  unsigned int v6;
  char *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v26;
  tbb::internal *v27;
  int v28;
  BOOL v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64x2_t v47;
  uint64_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  int8x16_t v51;
  int64x2_t v52;
  uint64x2_t v53;
  int8x16_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *p_shared_owners;
  unint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  unint64_t v69;
  BOOL v70;
  _QWORD *v71;
  tbb::spin_rw_mutex_v3 *v72;
  unsigned int *v73;
  unsigned int v74;
  tbb::spin_rw_mutex_v3 *v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v81[2];
  std::__shared_weak_count *v82;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v83;
  __int128 v84;
  unint64_t *v85;
  char v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  int v92;
  tbb::spin_rw_mutex_v3 *v93;
  char v94;
  uint64_t v95;

  v5 = (unsigned int *)((char *)this + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 | 0x80000000, v5));
  sub_20BEB59B0((uint64_t)&v91, (uint64_t)"Sdf", (uint64_t)"SdfPath");
  v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v8 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Sdf_PathNode::GetPathToken", 0, v7);
    v10 = v9 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v89 = v9;
  v90 = v10;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v11 = (uint64_t *)sub_20C15583C();
  v12 = operator new(0x20uLL);
  v12[2] = 0;
  v12[1] = 0;
  *v12 = v12 + 1;
  *((_BYTE *)v12 + 24) = 0;
  v93 = (tbb::spin_rw_mutex_v3 *)v12;
  v13 = operator new(0x20uLL);
  *v13 = &off_24C529648;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  v93 = 0;
  sub_20C157CD0((_QWORD ***)&v93);
  v83 = this;
  *(_QWORD *)&v84 = v12;
  *((_QWORD *)&v84 + 1) = v13;
  v81[1] = 0;
  v82 = 0;
  v81[0] = (uint64_t)this;
  v14 = this;
  if (v87)
  {
    v15 = v85;
    v85 = 0;
    if (v86)
    {
      while (1)
      {
        v16 = *v15;
        v17 = *v15 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          while (1)
          {
            v18 = __ldaxr(v15);
            if (v18 != v16)
              break;
            if (!__stlxr(v17, v15))
              goto LABEL_17;
          }
          __clrex();
          do
            v19 = __ldxr(v15);
          while (__stxr(v19, v15));
        }
        while (v19 == v16);
        sched_yield();
      }
    }
    do
      v20 = __ldaxr(v15);
    while (__stlxr(v20 - 4, v15));
LABEL_17:
    v87 = 0;
    v14 = v83;
  }
  v21 = 0;
  v22 = 0;
  v23 = (unint64_t)v14 ^ ((unint64_t)v14 >> 3);
  v24 = *v11;
  __dmb(0xBu);
  while (1)
  {
    sub_20C15B880((uint64_t)&v93, (uint64_t)v11, v24 & v23);
    v25 = (_QWORD *)(v95 + 16);
    v26 = v83;
    while (1)
    {
      v25 = (_QWORD *)*v25;
      if ((unint64_t)v25 < 0x40)
        break;
      if (v83 == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)v25[2])
        goto LABEL_24;
    }
    if (v25)
    {
LABEL_24:
      v27 = (tbb::internal *)v21;
      goto LABEL_25;
    }
    if (!v21)
    {
      v21 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = v26;
      *(_OWORD *)(v21 + 24) = v84;
      v84 = 0uLL;
    }
    if (!v94)
    {
      v94 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade(v93) & 1) == 0)
      {
        v25 = (_QWORD *)(v95 + 16);
        while (1)
        {
          v25 = (_QWORD *)*v25;
          if ((unint64_t)v25 < 0x40)
            break;
          if (v26 == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)v25[2])
          {
            if (v94)
            {
              v37 = (unint64_t *)v93;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 + 3, v37));
              v94 = 0;
            }
            goto LABEL_24;
          }
        }
      }
    }
    v36 = *v11;
    __dmb(0xBu);
    if (v24 == v36)
      break;
    if (!sub_20BECF7E4((uint64_t)v11, v23, v24, v36))
      goto LABEL_48;
LABEL_40:
    sub_20BEBF29C(&v93);
    v24 = v36;
  }
  v36 = v24;
LABEL_48:
  v22 = sub_20BECF26C((uint64_t)v11, v95, (_QWORD *)v21, v36);
  v27 = 0;
  v25 = (_QWORD *)v21;
LABEL_25:
  v86 = 1;
  if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer((tbb::spin_rw_mutex_v3 *)(v25 + 1)))
  {
    sched_yield();
    v28 = 2;
    while (1)
    {
      v86 = 1;
      if (tbb::spin_rw_mutex_v3::internal_try_acquire_writer((tbb::spin_rw_mutex_v3 *)(v25 + 1)))
        break;
      sched_yield();
      v29 = v28 < 16;
      v28 *= 2;
      if (!v29)
      {
        v30 = (unint64_t *)v93;
        v93 = 0;
        if (v94)
        {
          while (1)
          {
            v31 = *v30;
            v32 = *v30 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v33 = __ldaxr(v30);
                if (v33 != v31)
                  break;
                if (!__stlxr(v32, v30))
                  goto LABEL_39;
              }
              __clrex();
              do
                v34 = __ldxr(v30);
              while (__stxr(v34, v30));
            }
            while (v34 == v31);
            sched_yield();
          }
        }
        do
          v35 = __ldaxr(v30);
        while (__stlxr(v35 - 4, v30));
LABEL_39:
        sched_yield();
        v36 = *v11;
        __dmb(0xBu);
        v21 = (uint64_t)v27;
        goto LABEL_40;
      }
    }
  }
  v85 = v25 + 1;
  sub_20BEBF29C(&v93);
  v87 = v25;
  v88 = v23;
  if (v22)
  {
    if (v22 < 8)
    {
      v44 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      v45 = -6096;
      do
      {
        v46 = v44 + v45;
        *(_QWORD *)(v46 + 6104) = 0;
        *(_QWORD *)(v46 + 6112) = 3;
        v45 += 24;
      }
      while (v45);
      v47 = (int64x2_t)xmmword_20CA59F60;
      v48 = v44 - 48;
      v49 = (uint64x2_t)vdupq_n_s64(7uLL);
      v50 = (uint64x2_t)vdupq_n_s64(1uLL);
      v51 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      v52 = vdupq_n_s64(2uLL);
      v43 = 255;
      do
      {
        v53 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v45), (int8x16_t)xmmword_20CA59F70);
        v54 = vandq_s8((int8x16_t)vshlq_u64(v50, (uint64x2_t)v47), v51);
        if ((vmovn_s64((int64x2_t)vcgtq_u64(v49, v53)).u8[0] & 1) != 0)
          v11[v45 + 2] = v48 + 24 * v54.i64[0];
        if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v53)).i32[1] & 1) != 0)
          v11[v45 + 3] = v48 + 24 * v54.i64[1];
        v45 += 2;
        v47 = vaddq_s64(v47, v52);
      }
      while (v45 != 8);
    }
    else
    {
      v40 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v22));
      v41 = 1 << v22;
      v42 = (_QWORD *)(v40 + 16);
      do
      {
        *(v42 - 1) = 0;
        *v42 = 3;
        v42 += 3;
        --v41;
      }
      while (v41);
      v11[v22 + 1] = v40;
      v43 = (2 << v22) - 1;
    }
    __dmb(0xBu);
    *v11 = v43;
  }
  if (v27)
    sub_20C15B820(v27, v39);
  if (*((_QWORD *)&v84 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
    }
  }
  if (v82)
  {
    p_shared_owners = &v82->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v58 - 1, (unint64_t *)p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v59 = v87;
  if (v87)
  {
    v60 = v85;
    v85 = 0;
    if (v86)
    {
      while (1)
      {
        v61 = *v60;
        v62 = *v60 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          while (1)
          {
            v63 = __ldaxr(v60);
            if (v63 != v61)
              break;
            if (!__stlxr(v62, v60))
              goto LABEL_93;
          }
          __clrex();
          do
            v64 = __ldxr(v60);
          while (__stxr(v64, v60));
        }
        while (v64 == v61);
        sched_yield();
      }
    }
    do
      v65 = __ldaxr(v60);
    while (__stlxr(v65 - 4, v60));
LABEL_93:
    v87 = 0;
  }
  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a2;
  v66 = v59[3];
  sub_20BEB3FEC((uint64_t)&v93, v66 + 24);
  v67 = *(_QWORD **)(v66 + 8);
  if (!v67)
    goto LABEL_105;
  v68 = (uint64_t *)(v66 + 8);
  do
  {
    v69 = v67[4];
    v70 = v69 >= (unint64_t)a2;
    if (v69 >= (unint64_t)a2)
      v71 = v67;
    else
      v71 = v67 + 1;
    if (v70)
      v68 = v67;
    v67 = (_QWORD *)*v71;
  }
  while (*v71);
  if (v68 == (uint64_t *)(v66 + 8) || v68[4] > (unint64_t)a2)
  {
LABEL_105:
    v72 = v93;
    __dmb(0xBu);
    *(_BYTE *)v72 = 0;
    v93 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_CreatePathToken(this, a2, (uint64_t)v81);
    sub_20C15BA90(&v93, v66 + 24);
    v68 = sub_20C15BB0C((uint64_t **)v66, (unint64_t *)&v83, (uint64_t *)&v83, v81);
    if ((v81[0] & 7) != 0)
    {
      v73 = (unsigned int *)(v81[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
  }
  v75 = v93;
  if (v93)
  {
    __dmb(0xBu);
    *(_BYTE *)v75 = 0;
  }
  v87 = 0;
  sub_20BEBF29C(&v85);
  v76 = v90--;
  if (v76)
  {
    v77 = (uint64_t)v89;
    v78 = v76 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v77);
      v90 = v78--;
    }
    while (v78 != -2);
  }
  while (v92--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v91);
  return v68 + 5;
}

void sub_20C15574C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va4;
  uint64_t v24;
  va_list va5;

  va_start(va5, a3);
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v17 = va_arg(va4, _QWORD);
  v19 = va_arg(va4, _QWORD);
  v20 = va_arg(va4, _QWORD);
  v21 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v22 = va_arg(va5, _QWORD);
  v24 = va_arg(va5, _QWORD);
  *(_QWORD *)(v3 + 8 * v4 + 8) = 0;
  sub_20C155A14((uint64_t)va2);
  sub_20C155A14((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  v20 = 0;
  sub_20BEBF29C((uint64_t *)va3);
  sub_20BEB24F4((uint64_t)va4);
  sub_20BEB24F4((uint64_t)va5);
  _Unwind_Resume(a1);
}

unint64_t sub_20C15583C()
{
  _QWORD *v0;
  char *v2;
  _OWORD *v3;
  uint64_t i;
  unint64_t v6;
  void *v7;
  unint64_t j;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  tbb::internal *v16;
  tbb::internal **v17;
  unint64_t v18;

  v0 = (_QWORD *)atomic_load((unint64_t *)&unk_254985CD0);
  if (!v0)
  {
    v2 = (char *)operator new(0x248uLL);
    v0 = v2;
    v3 = v2 + 528;
    for (i = 536; i != 584; i += 24)
      *(_QWORD *)&v2[i] = 0;
    *(_OWORD *)(v2 + 248) = 0u;
    *(_OWORD *)(v2 + 232) = 0u;
    *(_OWORD *)(v2 + 216) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 488) = 0u;
    *(_OWORD *)(v2 + 504) = 0u;
    *(_OWORD *)(v2 + 456) = 0u;
    *(_OWORD *)(v2 + 472) = 0u;
    *(_OWORD *)(v2 + 424) = 0u;
    *(_OWORD *)(v2 + 440) = 0u;
    *(_OWORD *)(v2 + 392) = 0u;
    *(_OWORD *)(v2 + 408) = 0u;
    *(_OWORD *)(v2 + 360) = 0u;
    *(_OWORD *)(v2 + 376) = 0u;
    *(_OWORD *)(v2 + 328) = 0u;
    *(_OWORD *)(v2 + 344) = 0u;
    *(_OWORD *)(v2 + 296) = 0u;
    *(_OWORD *)(v2 + 312) = 0u;
    *(_OWORD *)(v2 + 264) = 0u;
    *(_OWORD *)(v2 + 280) = 0u;
    __dmb(0xBu);
    *(_QWORD *)v2 = 0;
    __dmb(0xBu);
    *((_QWORD *)v2 + 65) = 0;
    *v3 = 0u;
    *((_OWORD *)v2 + 34) = 0u;
    *((_OWORD *)v2 + 35) = 0u;
    *((_QWORD *)v2 + 1) = v3;
    __dmb(0xBu);
    *(_QWORD *)v2 = 1;
    while (!__ldaxr((unint64_t *)&unk_254985CD0))
    {
      if (!__stlxr((unint64_t)v2, (unint64_t *)&unk_254985CD0))
        return (unint64_t)v0;
    }
    __clrex();
    v6 = *(_QWORD *)v2;
    __dmb(0xBu);
    v0[65] = 0;
    for (j = sub_20BEB4B94(v6); ; --j)
    {
      v9 = 0;
      v10 = &v0[j];
      v13 = v10[1];
      v11 = v10 + 1;
      v12 = v13;
      if (j <= 1)
        v14 = 1;
      else
        v14 = j;
      do
      {
        v15 = v12 + 24 * v9;
        v18 = *(_QWORD *)(v15 + 16);
        v17 = (tbb::internal **)(v15 + 16);
        v16 = (tbb::internal *)v18;
        if (v18 >= 0x40)
        {
          do
          {
            *v17 = *(tbb::internal **)v16;
            sub_20C15B820(v16, v7);
            v16 = *v17;
          }
          while ((unint64_t)*v17 > 0x3F);
        }
        ++v9;
      }
      while (!(v9 >> v14));
      if (j >= 8 || j == 1)
      {
        tbb::internal::deallocate_via_handler_v3(*v11, v7);
      }
      else if (!j)
      {
        __dmb(0xBu);
        *v0 = 1;
        operator delete(v0);
        return atomic_load((unint64_t *)&unk_254985CD0);
      }
      *v11 = 0;
    }
  }
  return (unint64_t)v0;
}

uint64_t sub_20C155A14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_CreatePathToken(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p;
  char v6;
  void *v7[2];
  __int128 v8;

  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  sub_20C155EE0((uint64_t)this, a2, (uint64_t)v7);
  sub_20C155EB0((uint64_t)v7, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v6 < 0)
    operator delete(__p);
  if (SBYTE7(v8) < 0)
    operator delete(v7[0]);
}

void sub_20C155ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetElementImpl(std::string *this@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  char v4;
  _BYTE v5[32];

  memset(v5, 0, sizeof(v5));
  sub_20C155BB8(this, (std::string *)v5);
  sub_20C155EB0((uint64_t)v5, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (v4 < 0)
    operator delete(__p);
  if ((v5[23] & 0x80000000) != 0)
    operator delete(*(void **)v5);
}

void sub_20C155B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *sub_20C155BB8(std::string *result, std::string *this)
{
  std::string *v3;
  std::string::size_type v4;
  unint64_t v5;
  const char *v6;
  _QWORD *v7;
  unint64_t v8;
  const char *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v14;
  unint64_t v15;
  const char *v16;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v17;
  unint64_t v18;
  const char *v19;
  std::string::size_type size;
  unint64_t v21;
  const char *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;

  v3 = result;
  switch(result->__r_.__value_.__s.__data_[14])
  {
    case 1:
      v5 = result->__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        v6 = (const char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0)
          v6 = *(const char **)v6;
      }
      else
      {
        v6 = "";
      }
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0)
        size = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = size;
      goto LABEL_49;
    case 2:
      v7 = (_QWORD *)result->__r_.__value_.__r.__words[2];
      v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = (const char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0)
          v9 = *(const char **)v9;
      }
      else
      {
        v9 = "";
      }
      v21 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0)
          v22 = *(const char **)v22;
      }
      else
      {
        v22 = "";
      }
      v25 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v25 & 0x80u) != 0)
        v25 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v25;
      std::string::append(this, "{");
      std::string::append(this, v9);
      std::string::append(this, "=");
      std::string::append(this, v22);
      v6 = "}";
      goto LABEL_49;
    case 3:
    case 6:
    case 7:
      v4 = result->__r_.__value_.__r.__words[2];
      goto LABEL_26;
    case 4:
      v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v10 & 0x80u) != 0)
        v10 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v10;
      sub_20C15BC20(this, "]");
      sub_20C15BC98(&v3->__r_.__value_.__r.__words[2], (uint64_t)this);
      v11 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v11 & 0x80u) != 0)
        v11 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v11;
      v6 = "[";
      goto LABEL_49;
    case 5:
      v12 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) != 0)
        v12 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v12;
      sub_20C15BC20(this, "]");
      sub_20C15BC98(&v3->__r_.__value_.__r.__words[2], (uint64_t)this);
      v13 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v13 & 0x80u) != 0)
        v13 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v13;
      sub_20C15BC20(this, "[");
      v14 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v14)
        v14 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v15 = *((_QWORD *)v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        v16 = (const char *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0)
          v16 = *(const char **)v16;
      }
      else
      {
        v16 = "";
      }
      v23 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v23 & 0x80u) != 0)
        v23 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v23;
      sub_20C15BC20(this, v16);
      v24 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v24 & 0x80u) != 0)
        v24 = this->__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__r.__words[0] = v24;
      v6 = ".";
LABEL_49:
      result = sub_20C15BC20(this, v6);
      break;
    case 8:
      v17 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v17)
        v17 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v4 = *((_QWORD *)v17 + 8);
LABEL_26:
      v18 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      result = sub_20C15BBD0(this, v19);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_20C155EB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;

  if (*(char *)(a1 + 23) < 0)
  {
    v5 = a1;
    a1 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
  }
  return sub_20C157DA0(a2, a1 + v4, a1 + v4, a1, a1, v4);
}

std::string *sub_20C155EE0(uint64_t a1, std::string *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *RelativeRootNode;
  const std::string::value_type *v7;
  std::string *result;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1);
  if (!a2 && RelativeRootNode == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1)
  {
    v7 = ".";
LABEL_35:
    v17 = *(unsigned __int8 *)(a3 + 23);
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 24) = v17;
    return sub_20C15BC20((std::string *)a3, v7);
  }
  if ((*(_BYTE *)(a1 + 15) & 1) != 0)
    result = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(RelativeRootNode);
  else
    result = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(RelativeRootNode);
  v9 = result;
  if (a2)
  {
    v10 = a2;
    do
    {
      result = sub_20C155BB8(v10, (std::string *)a3);
      v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
    }
    while (v10);
    if (*(_BYTE *)(a1 + 14) == 1)
    {
      result = (std::string *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!result)
        result = (std::string *)sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) == (result[2].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = *(unsigned __int8 *)(a3 + 23);
        if ((v11 & 0x80u) != 0)
          v11 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 24) = v11;
        result = sub_20C15BC20((std::string *)a3, "/");
      }
    }
  }
  if (a1 && v9 != (std::string *)a1)
  {
    v12 = (std::string *)a1;
    do
    {
      v13 = v12;
      result = sub_20C155BB8(v12, (std::string *)a3);
      v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
      v14 = v13->__r_.__value_.__s.__data_[14] != 1 || v12 == 0;
      if (!v14 && v12->__r_.__value_.__s.__data_[14] == 1)
      {
        v15 = *(unsigned __int8 *)(a3 + 23);
        if ((v15 & 0x80u) != 0)
          v15 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 24) = v15;
        result = sub_20C15BC20((std::string *)a3, "/");
      }
      if (v12)
        v16 = v12 == v9;
      else
        v16 = 1;
    }
    while (!v16);
  }
  if ((*(_BYTE *)(a1 + 15) & 1) != 0)
  {
    v7 = "/";
    goto LABEL_35;
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetDebugText(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this, const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a2, const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a3)
{
  char *result;
  char *v4;
  char *v6;
  char v7;
  unint64_t v9;
  char v10;

  v9 = 0;
  v10 = 0;
  sub_20C156114((uint64_t)this, a2, &v9);
  if (v10)
    return aPathTextExceed;
  result = (char *)&unk_254985CD8;
  v4 = (char *)(qword_25473C568 - 1);
  if ((_UNKNOWN *)qword_25473C568 != &unk_254985CD8 && v4 > (char *)&unk_254985CD8)
  {
    v6 = (char *)&unk_254985CD9;
    do
    {
      v7 = *(v6 - 1);
      *(v6 - 1) = *v4;
      *v4-- = v7;
    }
    while (v6++ < v4);
  }
  qword_25473C568 = (uint64_t)&unk_254985CD8;
  return result;
}

uint64_t sub_20C156114(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *RelativeRootNode;
  char *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1);
  if (!a2 && RelativeRootNode == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1)
  {
    v7 = ".";
LABEL_31:
    *a3 = qword_25473C568;
    return sub_20C15BF74(a3, v7);
  }
  if ((*(_BYTE *)(a1 + 15) & 1) != 0)
    result = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(RelativeRootNode);
  else
    result = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(RelativeRootNode);
  v9 = result;
  if (a2)
  {
    v10 = a2;
    do
    {
      result = sub_20C15BCDC((uint64_t)v10, a3);
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    if (*(_BYTE *)(a1 + 14) == 1)
    {
      result = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!result)
        result = (uint64_t)sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        *a3 = qword_25473C568;
        result = sub_20C15BF74(a3, "/");
      }
    }
  }
  if (a1 && v9 != a1)
  {
    v11 = a1;
    do
    {
      v12 = v11;
      result = sub_20C15BCDC(v11, a3);
      v11 = *(_QWORD *)v11;
      v13 = *(_BYTE *)(v12 + 14) != 1 || v11 == 0;
      if (!v13 && *(_BYTE *)(v11 + 14) == 1)
      {
        *a3 = qword_25473C568;
        result = sub_20C15BF74(a3, "/");
      }
      if (v11)
        v14 = v11 == v9;
      else
        v14 = 1;
    }
    while (!v14);
  }
  if ((*(_BYTE *)(a1 + 15) & 1) != 0)
  {
    v7 = "/";
    goto LABEL_31;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(unint64_t this)
{
  uint64_t *v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode **v4;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode **v5;
  uint64_t v6;
  BOOL v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  tbb::spin_rw_mutex_v3 *v12;
  char v13;
  uint64_t v14;

  v2 = (uint64_t *)sub_20C15583C();
  v3 = *v2;
  __dmb(0xBu);
  while (2)
  {
    sub_20C15B880((uint64_t)&v12, (uint64_t)v2, v3 & (this ^ (this >> 3)));
    while (1)
    {
      v4 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)(v14 + 16);
      while (1)
      {
        v5 = v4;
        v4 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)*v4;
        if ((unint64_t)v4 < 0x40)
          break;
        if (v4[2] == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)this)
          goto LABEL_8;
      }
      if (!v4)
        break;
LABEL_8:
      if (v13 || (v13 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v12) & 1) != 0))
      {
        *v5 = *v4;
        v8 = (unint64_t *)(v2 + 65);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        sub_20BEBF29C(&v12);
        v13 = 1;
        v12 = (tbb::spin_rw_mutex_v3 *)(v4 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(v4 + 1));
        sub_20BEBF29C(&v12);
        return (_QWORD *)sub_20C15B820((tbb::internal *)v4, v10);
      }
      v6 = *v2;
      __dmb(0xBu);
      if (v3 != v6)
      {
        v7 = sub_20BECF7E4((uint64_t)v2, this ^ (this >> 3), v3, v6);
        v3 = v6;
        if (v7)
          goto LABEL_15;
      }
    }
    v6 = *v2;
    __dmb(0xBu);
    if (v3 != v6 && sub_20BECF7E4((uint64_t)v2, this ^ (this >> 3), v3, v6))
    {
LABEL_15:
      sub_20BEBF29C(&v12);
      v3 = v6;
      continue;
    }
    return sub_20BEBF29C(&v12);
  }
}

void sub_20C156404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_IsNamespacedImpl(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v1;
  char v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v7;
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v9;
  std::string::value_type *v10;

  switch(*((_BYTE *)this + 14))
  {
    case 0:
      v2 = *((_BYTE *)this + 15);
      v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if ((v2 & 1) != 0)
      {
        if (!v1)
          v1 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      else
      {
        if (!v1)
          v1 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v1 + 8);
      }
      break;
    case 1:
    case 3:
    case 6:
    case 7:
      v1 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)((char *)this + 16);
      break;
    case 2:
      v3 = *((_QWORD *)this + 2);
      v5 = *(_QWORD *)(v3 + 8);
      v4 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(v3 + 8);
      if (v5)
        v1 = v4;
      else
        v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)*((_QWORD *)this + 2);
      break;
    case 8:
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v7)
        v7 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v7 + 64);
      break;
    default:
      v6 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v6)
        v6 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v6 + 88);
      break;
  }
  if ((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v1);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v9)
    v9 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if ((*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = (std::string::value_type *)((*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v10 = (std::string::value_type *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  if (v10[23] < 0)
    v10 = *(std::string::value_type **)v10;
  return std::string::find(EmptyString, *v10, 0) != -1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;

  v2 = sub_20C153934();
  v3 = *(_QWORD *)this;
  v24 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (uint64_t *)(v2
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8)
                                    + (((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8)
                                      + v3
                                      + ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) + v3)
                                      * ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) + v3)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v25, (uint64_t)(v6 + 10));
  v7 = *((_QWORD *)this + 2);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
  v11 = v6[4];
  v12 = bswap64(0x9E3779B97F4A7C55* ((v7 & 0xFFFFFFFFFFFFFFF8)+ (((v7 & 0xFFFFFFFFFFFFFFF8) + v3 + ((v7 & 0xFFFFFFFFFFFFFFF8) + v3) * ((v7 & 0xFFFFFFFFFFFFFFF8) + v3)) >> 1))) & *v6;
  if (*(__int16 *)(v11 + 32 * v12 + 4) < 0)
  {
LABEL_14:
    v12 = v6[5];
  }
  else
  {
    LOWORD(v13) = 0;
    while (1)
    {
      v14 = v11 + 32 * v12;
      v16 = *(_QWORD *)(v14 + 8);
      v15 = v14 + 8;
      if (v16 == v3 && (unsigned int *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8) == v10)
        break;
      v13 = (__int16)(v13 + 1);
      v12 = (v12 + 1) & *v6;
      if (v13 > *(__int16 *)(v11 + 32 * v12 + 4))
        goto LABEL_14;
    }
  }
  v17 = v11 + 32 * v12;
  if ((v7 & 7) != 0)
  {
    do
      v18 = __ldxr(v10);
    while (__stlxr(v18 - 2, v10));
    v19 = v6[4];
  }
  else
  {
    v19 = v6[4];
  }
  if (v17 != v19 + 32 * v6[5]
    && (pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v11 + 32 * v12 + 24)) == this)
  {
    sub_20C158FC4(v6, v17);
  }
  v20 = v25;
  if (v25)
  {
    __dmb(0xBu);
    *v20 = 0;
  }
  sub_20BFD276C(&v24);
  v21 = *((_QWORD *)this + 2);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  sub_20BFD2738(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v2 = sub_20C153B9C();
  v3 = *(_QWORD *)this;
  v9 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C1567E4((uint64_t)this, v2, &v9, (uint64_t *)this + 2);
  sub_20BFD276C(&v9);
  v6 = *((_QWORD *)this + 2);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20BFD2738(this);
}

uint64_t sub_20C1567E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;

  v6 = *a3;
  v7 = (uint64_t *)(a2
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*a4 & 0xFFFFFFFFFFFFFFF8)
                                    + (((*a4 & 0xFFFFFFFFFFFFFFF8)
                                      + *a3
                                      + ((*a4 & 0xFFFFFFFFFFFFFFF8) + *a3) * ((*a4 & 0xFFFFFFFFFFFFFFF8) + *a3)) >> 1))) >> 32) >> 24) & 0x7F));
  result = sub_20BEB3FEC((uint64_t)&v23, (uint64_t)(v7 + 10));
  v9 = *a4;
  if ((*a4 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v13 = v7[4];
  v14 = bswap64(0x9E3779B97F4A7C55* ((v9 & 0xFFFFFFFFFFFFFFF8)+ (((v9 & 0xFFFFFFFFFFFFFFF8) + v6 + ((v9 & 0xFFFFFFFFFFFFFFF8) + v6) * ((v9 & 0xFFFFFFFFFFFFFFF8) + v6)) >> 1))) & *v7;
  if (*(__int16 *)(v13 + 32 * v14 + 4) < 0)
  {
LABEL_11:
    v14 = v7[5];
  }
  else
  {
    LOWORD(v15) = 0;
    while (1)
    {
      v16 = v13 + 32 * v14;
      v18 = *(_QWORD *)(v16 + 8);
      v17 = v16 + 8;
      if (v18 == v6 && (unsigned int *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8) == v12)
        break;
      v15 = (__int16)(v15 + 1);
      v14 = (v14 + 1) & *v7;
      if (v15 > *(__int16 *)(v13 + 32 * v14 + 4))
        goto LABEL_11;
    }
  }
  v19 = v13 + 32 * v14;
  if ((v9 & 7) != 0)
  {
    do
      v20 = __ldxr(v12);
    while (__stlxr(v20 - 2, v12));
    v21 = v7[4];
  }
  else
  {
    v21 = v7[4];
  }
  if (v19 != v21 + 32 * v7[5])
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v13 + 32 * v14 + 24));
    if (result == a1)
      result = (uint64_t)sub_20C158FC4(v7, v19);
  }
  v22 = v23;
  if (v23)
  {
    __dmb(0xBu);
    *v22 = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v2 = v1 + 8;
  if (v3)
    return v2;
  else
    return *((_QWORD *)this + 2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  _QWORD **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;

  v2 = sub_20C154250();
  v3 = *(_QWORD *)this;
  v23 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v7 = (_QWORD **)((char *)this + 16);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v28 = v3;
  v29 = v6;
  v24 = 0;
  LOBYTE(v25) = 0;
  sub_20C159F30((uint64_t)&v24, &v28, v6);
  v8 = (uint64_t *)(v2 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v24) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v27, (uint64_t)(v8 + 10));
  v24 = v28;
  sub_20C15A32C(&v25, v29);
  v30 = 0;
  v31 = 0;
  sub_20C159F30((uint64_t)&v30, &v24, &v25);
  v9 = v8[4];
  v10 = *v8 & bswap64(0x9E3779B97F4A7C55 * v30);
  if (*(__int16 *)(v9 + 40 * v10 + 4) < 0)
  {
    v12 = v26;
LABEL_12:
    v10 = v8[5];
  }
  else
  {
    LOWORD(v11) = 0;
    v12 = v26;
    while (1)
    {
      v13 = v9 + 40 * v10;
      v15 = *(_QWORD *)(v13 + 8);
      v14 = v13 + 8;
      if (v15 == v24
        && (*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) == (v25 & 0xFFFFFFFFFFFFFFF8)
        && (*(_QWORD *)(v14 + 16) & 0xFFFFFFFFFFFFFFF8) == (v26 & 0xFFFFFFFFFFFFFFF8))
      {
        break;
      }
      v11 = (__int16)(v11 + 1);
      v10 = (v10 + 1) & *v8;
      if (v11 > *(__int16 *)(v9 + 40 * v10 + 4))
        goto LABEL_12;
    }
  }
  if ((v12 & 7) != 0)
  {
    v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v18 = v9 + 40 * v10;
  if ((v25 & 7) != 0)
  {
    v19 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  if (v18 != v8[4] + 40 * v8[5]
    && (pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v9 + 40 * v10 + 32)) == this)
  {
    sub_20C159DA4(v8, v18);
  }
  v21 = v27;
  if (v27)
  {
    __dmb(0xBu);
    *v21 = 0;
  }
  sub_20BFD276C(&v23);
  v22 = *v7;
  *v7 = 0;
  if (v22)
    sub_20C1586F0((_DWORD)this + 16, v22);
  sub_20BFD2738(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v2 = atomic_load(&qword_254985C90);
  if (!v2)
    v2 = sub_20C15A434();
  v3 = *(_QWORD *)this;
  v6 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C156CB4((uint64_t)this, v2, &v6, (_DWORD *)this + 4);
  sub_20BFD276C(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_20BFD265C((_DWORD *)this + 4);
  sub_20BFD2738(this);
}

uint64_t sub_20C156CB4(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;

  v20 = *a3;
  v21 = a4;
  v22 = 0;
  v23 = 0;
  sub_20C15ABAC((uint64_t)&v22, &v20, a4);
  v6 = (_QWORD *)(a2 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v22) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v19, (uint64_t)(v6 + 10));
  v7 = v21;
  v17 = v20;
  sub_20BFD6E54(&v18, v21);
  sub_20BFD6EA4((_DWORD *)&v18 + 1, v7 + 1);
  v22 = 0;
  v23 = 0;
  sub_20C15ABAC((uint64_t)&v22, &v17, (unsigned int *)&v18);
  v8 = v6[4];
  v9 = *v6 & bswap64(0x9E3779B97F4A7C55 * v22);
  if (*(__int16 *)(v8 + 32 * v9 + 4) < 0)
  {
LABEL_8:
    v9 = v6[5];
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      v11 = v8 + 32 * v9;
      v13 = *(_QWORD *)(v11 + 8);
      v12 = *(_QWORD *)(v11 + 16);
      if (v13 == v17 && v12 == v18)
        break;
      v10 = (__int16)(v10 + 1);
      v9 = (v9 + 1) & *v6;
      if (v10 > *(__int16 *)(v8 + 32 * v9 + 4))
        goto LABEL_8;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  result = (uint64_t)sub_20BFD265C(&v18);
  if (v8 + 32 * v9 != v6[4] + 32 * v6[5])
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v8 + 32 * v9 + 24));
    if (result == a1)
      result = (uint64_t)sub_20C15AF20((uint64_t)v6, v8 + 32 * v9);
  }
  v16 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *v16 = 0;
  }
  return result;
}

void sub_20C156E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v2 = sub_20C154630();
  v3 = *(_QWORD *)this;
  v9 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C1567E4((uint64_t)this, v2, &v9, (uint64_t *)this + 2);
  sub_20BFD276C(&v9);
  v6 = *((_QWORD *)this + 2);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20BFD2738(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v2 = atomic_load(&qword_254985CA0);
  if (!v2)
    v2 = sub_20C15B140();
  v3 = *(_QWORD *)this;
  v6 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C156CB4((uint64_t)this, v2, &v6, (_DWORD *)this + 4);
  sub_20BFD276C(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_20BFD265C((_DWORD *)this + 4);
  sub_20BFD2738(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v2 = sub_20C1549CC();
  v3 = *(_QWORD *)this;
  v9 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C1567E4((uint64_t)this, v2, &v9, (uint64_t *)this + 2);
  sub_20BFD276C(&v9);
  v6 = *((_QWORD *)this + 2);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20BFD2738(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;

  v2 = sub_20C154EA4();
  v3 = *(_QWORD *)this;
  v11 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)(v2 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v3) >> 32) >> 24) & 0x7F));
  sub_20BEB3FEC((uint64_t)&v12, (uint64_t)(v6 + 10));
  v7 = v6[4];
  v8 = *v6 & bswap64(0x9E3779B97F4A7C55 * v3);
  if ((*(__int16 *)(v7 + 24 * v8 + 4) & 0x80000000) == 0)
  {
    LOWORD(v9) = 0;
    while (*(_QWORD *)(v7 + 24 * v8 + 8) != v3)
    {
      v9 = (__int16)(v9 + 1);
      v8 = (v8 + 1) & *v6;
      if (v9 > *(__int16 *)(v7 + 24 * v8 + 4))
        goto LABEL_12;
    }
    if (v8 != v6[5]
      && (pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v7 + 24 * v8 + 16)) == this)
    {
      sub_20C15B580((uint64_t)v6, v7 + 24 * v8);
    }
  }
LABEL_12:
  v10 = v12;
  if (v12)
  {
    __dmb(0xBu);
    *v10 = 0;
  }
  sub_20BFD276C(&v11);
  sub_20BFD2738(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_DumpPathStats(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t AbsoluteRootNode;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v2;
  uint64_t RelativeRootNode;
  uint64_t i;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t j;
  void *v15[2];
  __int128 v16;
  void *__p[2];
  _OWORD v18[5];
  _QWORD v19[10];

  v19[9] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  AbsoluteRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(this);
  sub_20C1574CC(AbsoluteRootNode, (uint64_t)v15);
  RelativeRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(v2);
  sub_20C1574CC(RelativeRootNode, (uint64_t)v15);
  puts("Sdf_PathNode stats:");
  printf("\tnum node refs: %i\n", HIDWORD(v15[0]));
  printf("\tnum nodes:     %i\n", LODWORD(v15[0]));
  printf("\tsizeof(SdfPath), aka node ref:  %zu\n", 8uLL);
  printf("\tsizeof(Sdf_PathNode), aka node: %zu\n", 0x10uLL);
  v19[0] = "RootNode";
  v19[1] = "PrimNode";
  v19[2] = "PrimVariantSelectionNode";
  v19[3] = "PrimPropertyNode";
  v19[4] = "TargetNode";
  v19[5] = "MapperNode";
  v19[6] = "RelationalAttributeNode";
  v19[7] = "MapperArgNode";
  v19[8] = "ExpressionNode";
  printf("------------------------------------------------");
  puts("-- By Type");
  for (i = 0; i != 9; ++i)
    printf("\t%32ss: %8zu -- %6.2f%%\n", (const char *)v19[i], *(_QWORD *)((char *)v18 + i * 8 + 8), (double)*(unint64_t *)((char *)v18 + i * 8 + 8) * 100.0 / (double)SLODWORD(v15[0]));
  printf("------------------------------------------------");
  puts("-- By Length");
  v5 = v15[1];
  if ((void *)v16 == v15[1])
  {
    v8 = 0.0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      printf("\tnum nodes with %3zu components : %i\n", v6, v5[v6]);
      v5 = v15[1];
      v7 += v6 * *((int *)v15[1] + v6);
      ++v6;
    }
    while (v6 < (uint64_t)(v16 - (unint64_t)v15[1]) >> 2);
    v8 = (float)v7;
  }
  printf("\tavg num components: %g\n", (float)(v8 / (float)SLODWORD(v15[0])));
  printf("------------------------------------------------");
  puts("-- By Number of Children");
  v9 = __p[1];
  if (__p[1] == __p[0])
  {
    v11 = ((char *)__p[1] - (char *)__p[0]) >> 2;
  }
  else
  {
    v10 = 0;
    v9 = __p[0];
    do
    {
      printf("\tnum nodes with %3zu children : %i\n", v10, v9[v10]);
      ++v10;
      v9 = __p[0];
    }
    while (v10 < ((char *)__p[1] - (char *)__p[0]) >> 2);
    v11 = ((char *)__p[1] - (char *)__p[0]) >> 2;
  }
  v12 = 0.0;
  if (v11 >= 2)
  {
    v13 = 0;
    for (j = 1; j != v11; ++j)
      v13 += j * (int)v9[j];
    v12 = (float)v13;
  }
  printf("\tavg num children (for nodes with any children): %g\n", (float)(v12 / (float)(LODWORD(v15[0]) - *v9)));
  putchar(10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15[1])
  {
    *(void **)&v16 = v15[1];
    operator delete(v15[1]);
  }
}

void sub_20C1574B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C157C24((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C1574CC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  void **v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t i;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t j;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t k;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  void **v66;
  void **v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  _QWORD *v79;
  void **v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  void **Ptr;
  void **v87;
  uint64_t v88;
  const char *v89;
  char v90;

  v4 = *(_DWORD *)(a2 + 4);
  ++*(_DWORD *)a2;
  *(_DWORD *)(a2 + 4) = v4 + (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF);
  v5 = a2 + 8 * *(unsigned __int8 *)(a1 + 14);
  ++*(_QWORD *)(v5 + 56);
  v6 = *(unsigned __int16 *)(a1 + 12) + 1;
  v8 = (void **)(a2 + 8);
  v7 = *(char **)(a2 + 8);
  v9 = *(char **)(a2 + 16);
  v10 = (v9 - v7) >> 2;
  if (v10 <= v6)
  {
    v11 = (_QWORD *)(a2 + 24);
    do
    {
      if ((unint64_t)v9 >= *v11)
      {
        v13 = v10 + 1;
        if ((v10 + 1) >> 62)
          sub_20BDDF694();
        v14 = *v11 - (_QWORD)v7;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_20BDE1330(a2 + 24, v15);
          v7 = *(char **)(a2 + 8);
          v9 = *(char **)(a2 + 16);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v10];
        *(_DWORD *)v17 = 0;
        v12 = v17 + 4;
        while (v9 != v7)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(_QWORD *)(a2 + 8) = v17;
        *(_QWORD *)(a2 + 16) = v12;
        *(_QWORD *)(a2 + 24) = &v16[4 * v15];
        if (v7)
        {
          operator delete(v7);
          v7 = (char *)*v8;
        }
        else
        {
          v7 = v17;
        }
      }
      else
      {
        *(_DWORD *)v9 = 0;
        v12 = v9 + 4;
      }
      *(_QWORD *)(a2 + 16) = v12;
      v10 = (v12 - v7) >> 2;
      v9 = v12;
    }
    while (v10 <= v6);
  }
  ++*(_DWORD *)&v7[4 * v6];
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v19 = atomic_load(&qword_254985CA0);
  if (!v19)
    v19 = sub_20C15B140();
  sub_20C157F64(a1, v19, (char **)&v80);
  v20 = atomic_load(&qword_254985C90);
  if (!v20)
    v20 = sub_20C15A434();
  sub_20C157F64(a1, v20, (char **)&v80);
  v21 = sub_20C1549CC();
  sub_20C1580FC(a1, v21, (char **)&v80);
  v22 = sub_20C153934();
  for (i = 0; i != 128; ++i)
  {
    sub_20BEB3FEC((uint64_t)v85, v22 + 88 * i + 80);
    v27 = *(_QWORD *)(v22 + 88 * i + 32);
    v26 = *(_QWORD *)(v22 + 88 * i + 40);
    v28 = 0;
    if (v26)
    {
      v29 = (__int16 *)(v27 + 4);
      while (1)
      {
        v30 = *v29;
        v29 += 16;
        if (v30 != -1)
          break;
        if (v26 == ++v28)
          goto LABEL_41;
      }
    }
    v83 = v27 + 32 * v28;
    v84 = v27 + 32 * v26;
    if (v28 != v26)
    {
      do
      {
        sub_20C158518(&v83, v24, v25);
        v31 = v83;
        if (*(_QWORD *)(v83 + 8) == a1)
        {
          sub_20C158518(&v83, v24, v25);
          Ptr = (void **)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v83 + 24));
          sub_20C15830C((char **)&v80, (uint64_t *)&Ptr);
          v31 = v83;
        }
        v32 = v84;
        if (v31 == v84)
        {
          Ptr = (void **)"tf/iterator.h";
          v87 = (void **)"operator++";
          v88 = 250;
          v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserve"
                "d__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal_"
                "_aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserve"
                "d__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = cons"
                "t pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous name"
                "space)::_ParentAnd<pxrInternal__aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Poo"
                "l<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::T"
                "fHash>, Reverse = false]";
          v90 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Ptr, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          v34 = v83;
          v32 = v84;
        }
        else
        {
          v33 = v31 + 32;
          do
          {
            v34 = v33;
            if (*(_BYTE *)(v33 - 26))
              break;
            v33 += 32;
          }
          while (*(__int16 *)(v34 + 4) == -1);
          v83 = v34;
        }
      }
      while (v34 != v32);
    }
LABEL_41:
    v35 = (_BYTE *)v85[0];
    if (v85[0])
    {
      __dmb(0xBu);
      *v35 = 0;
    }
  }
  v36 = sub_20C153B9C();
  sub_20C1580FC(a1, v36, (char **)&v80);
  v37 = sub_20C154630();
  sub_20C1580FC(a1, v37, (char **)&v80);
  v38 = sub_20C154250();
  for (j = 0; j != 128; ++j)
  {
    sub_20BEB3FEC((uint64_t)v85, v38 + 88 * j + 80);
    v43 = *(_QWORD *)(v38 + 88 * j + 32);
    v42 = *(_QWORD *)(v38 + 88 * j + 40);
    v44 = 0;
    if (v42)
    {
      v45 = (__int16 *)(v43 + 4);
      while (1)
      {
        v46 = *v45;
        v45 += 20;
        if (v46 != -1)
          break;
        if (v42 == ++v44)
          goto LABEL_60;
      }
    }
    v83 = v43 + 40 * v44;
    v84 = v43 + 40 * v42;
    if (v44 != v42)
    {
      do
      {
        sub_20C158590(&v83, v40, v41);
        v47 = v83;
        if (*(_QWORD *)(v83 + 8) == a1)
        {
          sub_20C158590(&v83, v40, v41);
          Ptr = (void **)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v83 + 32));
          sub_20C15830C((char **)&v80, (uint64_t *)&Ptr);
          v47 = v83;
        }
        v48 = v84;
        if (v47 == v84)
        {
          Ptr = (void **)"tf/iterator.h";
          v87 = (void **)"operator++";
          v88 = 250;
          v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserve"
                "d__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<std::pair<px"
                "rInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::TfToken>>, pxrInternal__aapl_"
                "_pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal_"
                "_aapl__pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl::robin"
                "_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<std::pair<pxrInternal__aapl__px"
                "rReserved__::TfToken, pxrInternal__aapl__pxrReserved__::TfToken>>, pxrInternal__aapl__pxrReserved__::Sdf"
                "_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved_"
                "_::TfHash>, Reverse = false]";
          v90 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Ptr, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          v50 = v83;
          v48 = v84;
        }
        else
        {
          v49 = v47 + 40;
          do
          {
            v50 = v49;
            if (*(_BYTE *)(v49 - 34))
              break;
            v49 += 40;
          }
          while (*(__int16 *)(v50 + 4) == -1);
          v83 = v50;
        }
      }
      while (v50 != v48);
    }
LABEL_60:
    v51 = (_BYTE *)v85[0];
    if (v85[0])
    {
      __dmb(0xBu);
      *v51 = 0;
    }
  }
  v52 = sub_20C154EA4();
  for (k = 0; k != 128; ++k)
  {
    sub_20BEB3FEC((uint64_t)v85, v52 + 88 * k + 80);
    v57 = *(_QWORD *)(v52 + 88 * k + 32);
    v56 = *(_QWORD *)(v52 + 88 * k + 40);
    v58 = 0;
    if (v56)
    {
      v59 = (__int16 *)(v57 + 4);
      while (1)
      {
        v60 = *v59;
        v59 += 12;
        if (v60 != -1)
          break;
        if (v56 == ++v58)
          goto LABEL_79;
      }
    }
    v83 = v57 + 24 * v58;
    v84 = v57 + 24 * v56;
    if (v58 != v56)
    {
      do
      {
        sub_20C158608(&v83, v54, v55);
        v61 = v83;
        if (*(_QWORD *)(v83 + 8) == a1)
        {
          sub_20C158608(&v83, v54, v55);
          Ptr = (void **)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v83 + 16));
          sub_20C15830C((char **)&v80, (uint64_t *)&Ptr);
          v61 = v83;
        }
        v62 = v84;
        if (v61 == v84)
        {
          Ptr = (void **)"tf/iterator.h";
          v87 = (void **)"operator++";
          v88 = 250;
          v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserve"
                "d__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrIn"
                "ternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle,"
                " pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::p"
                "xr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrInternal"
                "__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrIn"
                "ternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
          v90 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Ptr, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          v64 = v83;
          v62 = v84;
        }
        else
        {
          v63 = v61 + 24;
          do
          {
            v64 = v63;
            if (*(_BYTE *)(v63 - 18))
              break;
            v63 += 24;
          }
          while (*(__int16 *)(v64 + 4) == -1);
          v83 = v64;
        }
      }
      while (v64 != v62);
    }
LABEL_79:
    v65 = (_BYTE *)v85[0];
    if (v85[0])
    {
      __dmb(0xBu);
      *v65 = 0;
    }
  }
  v67 = v80;
  v66 = v81;
  v68 = v81 - v80;
  v69 = *(char **)(a2 + 32);
  v70 = *(char **)(a2 + 40);
  v71 = (v70 - v69) >> 2;
  if (v71 <= v68)
  {
    v72 = (_QWORD *)(a2 + 48);
    do
    {
      if ((unint64_t)v70 >= *v72)
      {
        v74 = v71 + 1;
        if ((v71 + 1) >> 62)
          sub_20BDDF694();
        v75 = *v72 - (_QWORD)v69;
        if (v75 >> 1 > v74)
          v74 = v75 >> 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v74;
        if (v54)
        {
          v76 = (char *)sub_20BDE1330(a2 + 48, v54);
          v69 = *(char **)(a2 + 32);
          v70 = *(char **)(a2 + 40);
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[4 * v71];
        *(_DWORD *)v77 = 0;
        v73 = v77 + 4;
        while (v70 != v69)
        {
          v78 = *((_DWORD *)v70 - 1);
          v70 -= 4;
          *((_DWORD *)v77 - 1) = v78;
          v77 -= 4;
        }
        *(_QWORD *)(a2 + 32) = v77;
        *(_QWORD *)(a2 + 40) = v73;
        *(_QWORD *)(a2 + 48) = &v76[4 * v54];
        if (v69)
        {
          operator delete(v69);
          v69 = *(char **)(a2 + 32);
        }
        else
        {
          v69 = v77;
        }
      }
      else
      {
        *(_DWORD *)v70 = 0;
        v73 = v70 + 4;
      }
      *(_QWORD *)(a2 + 40) = v73;
      v71 = (v73 - v69) >> 2;
      v70 = v73;
    }
    while (v71 <= v68);
    v67 = v80;
    v66 = v81;
  }
  ++*(_DWORD *)&v69[4 * v68];
  Ptr = v67;
  v87 = v66;
  while (Ptr != v87)
  {
    v79 = sub_20C157E70(&Ptr, v54, v55);
    sub_20C1574CC(*(_QWORD *)*v79, a2);
    sub_20C157EE8(&Ptr);
  }
  Ptr = (void **)&v80;
  sub_20C158680(&Ptr);
}

void sub_20C157BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_20C158680(&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C157C24(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_20C157C64(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *result = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *a3;
  result[1] = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD ***sub_20C157CD0(_QWORD ***a1)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20BF383C0((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
  return a1;
}

void sub_20C157D14(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C157D28(uint64_t a1)
{
  sub_20C157D70(*(_QWORD ***)(a1 + 24));
}

uint64_t sub_20C157D30(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529698))
    return a1 + 24;
  else
    return 0;
}

void sub_20C157D70(_QWORD **a1)
{
  if (a1)
  {
    sub_20BF383C0((uint64_t)a1, a1[1]);
    operator delete(a1);
  }
}

_QWORD *sub_20C157DA0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20BDDC038();
  if (a6 > 0x16)
  {
    v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v10 = a6 | 7;
    v11 = v10 + 1;
    result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *v6 = result;
    v6 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    v12 = *(_BYTE *)--a3;
    *(_BYTE *)v6 = v12;
    v6 = (_QWORD *)((char *)v6 + 1);
  }
  *(_BYTE *)v6 = 0;
  return result;
}

_DWORD *sub_20C157E44(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_QWORD *sub_20C157E70(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<boost::intrusive_ptr<const pxrInter"
            "nal__aapl__pxrReserved__::Sdf_PathNode>>>::operator->() [T = const std::vector<boost::intrusive_ptr<const px"
            "rInternal__aapl__pxrReserved__::Sdf_PathNode>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C157EE8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<boost::intrusive_ptr<"
            "const pxrInternal__aapl__pxrReserved__::Sdf_PathNode>>>::operator++() [T = const std::vector<boost::intrusiv"
            "e_ptr<const pxrInternal__aapl__pxrReserved__::Sdf_PathNode>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_20C157F64(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23[4];
  char v24;

  for (i = 0; i != 128; ++i)
  {
    v7 = a2 + 88 * i;
    sub_20BEB3FEC((uint64_t)&v22, v7 + 80);
    v11 = *(_QWORD *)(v7 + 32);
    v10 = *(_QWORD *)(v7 + 40);
    v12 = 0;
    if (v10)
    {
      v13 = (__int16 *)(v11 + 4);
      while (1)
      {
        v14 = *v13;
        v13 += 16;
        if (v14 != -1)
          break;
        if (v10 == ++v12)
          goto LABEL_17;
      }
    }
    v20 = v11 + 32 * v12;
    v21 = v11 + 32 * v10;
    if (v12 != v10)
    {
      do
      {
        sub_20C158294(&v20, v8, v9);
        v15 = v20;
        if (*(_QWORD *)(v20 + 8) == a1)
        {
          sub_20C158294(&v20, v8, v9);
          v23[0] = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v20 + 24));
          sub_20C15830C(a3, v23);
          v15 = v20;
        }
        v16 = v21;
        if (v15 == v21)
        {
          v23[0] = (uint64_t)"tf/iterator.h";
          v23[1] = (uint64_t)"operator++";
          v23[2] = 250;
          v23[3] = (uint64_t)"TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl"
                            "__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
                            ":_ParentAnd<pxrInternal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::Sd"
                            "f_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl_"
                            "_pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl:"
                            ":robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__"
                            "aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl_"
                            "_pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, "
                            "Reverse = false]";
          v24 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          v18 = v20;
          v16 = v21;
        }
        else
        {
          v17 = v15 + 32;
          do
          {
            v18 = v17;
            if (*(_BYTE *)(v17 - 26))
              break;
            v17 += 32;
          }
          while (*(__int16 *)(v18 + 4) == -1);
          v20 = v18;
        }
      }
      while (v18 != v16);
    }
LABEL_17:
    v19 = v22;
    if (v22)
    {
      __dmb(0xBu);
      *v19 = 0;
    }
  }
}

void sub_20C1580E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

void sub_20C1580FC(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23[4];
  char v24;

  for (i = 0; i != 128; ++i)
  {
    v7 = a2 + 88 * i;
    sub_20BEB3FEC((uint64_t)&v22, v7 + 80);
    v11 = *(_QWORD *)(v7 + 32);
    v10 = *(_QWORD *)(v7 + 40);
    v12 = 0;
    if (v10)
    {
      v13 = (__int16 *)(v11 + 4);
      while (1)
      {
        v14 = *v13;
        v13 += 16;
        if (v14 != -1)
          break;
        if (v10 == ++v12)
          goto LABEL_17;
      }
    }
    v20 = v11 + 32 * v12;
    v21 = v11 + 32 * v10;
    if (v12 != v10)
    {
      do
      {
        sub_20C1584A0(&v20, v8, v9);
        v15 = v20;
        if (*(_QWORD *)(v20 + 8) == a1)
        {
          sub_20C1584A0(&v20, v8, v9);
          v23[0] = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v20 + 24));
          sub_20C15830C(a3, v23);
          v15 = v20;
        }
        v16 = v21;
        if (v15 == v21)
        {
          v23[0] = (uint64_t)"tf/iterator.h";
          v23[1] = (uint64_t)"operator++";
          v23[2] = 250;
          v23[3] = (uint64_t)"TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl"
                            "__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
                            ":_ParentAnd<pxrInternal__aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sd"
                            "f_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl_"
                            "_pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl:"
                            ":robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__"
                            "aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl_"
                            "_pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, "
                            "Reverse = false]";
          v24 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          v18 = v20;
          v16 = v21;
        }
        else
        {
          v17 = v15 + 32;
          do
          {
            v18 = v17;
            if (*(_BYTE *)(v17 - 26))
              break;
            v17 += 32;
          }
          while (*(__int16 *)(v18 + 4) == -1);
          v20 = v18;
        }
      }
      while (v18 != v16);
    }
LABEL_17:
    v19 = v22;
    if (v22)
    {
      __dmb(0xBu);
      *v19 = 0;
    }
  }
}

void sub_20C15827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20C158294(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aapl__pxrReserved__::"
            "SdfPath>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, "
            "8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserv"
            "ed__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aa"
            "pl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

char *sub_20C15830C(char **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20BDDF694();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = v4;
    if (v15)
      v16 = (char *)sub_20BDDF6A8(v4, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v30 = v18;
    v19 = *a2;
    *(_QWORD *)v17 = *a2;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v11 = v17 + 8;
    v29.i64[1] = (uint64_t)(v17 + 8);
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v25 = vdupq_n_s64((unint64_t)v22);
    }
    else
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v17 - 1) = v24;
        v17 -= 8;
        *(_QWORD *)v22 = 0;
      }
      while (v22 != v23);
      v25 = *(int64x2_t *)a1;
      v11 = (char *)v29.i64[1];
      v18 = v30;
    }
    *a1 = v17;
    a1[1] = v11;
    v29 = v25;
    v26 = a1[2];
    a1[2] = v18;
    v30 = v26;
    v28 = v25.i64[0];
    sub_20C158454((uint64_t)&v28);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)v7 = *a2;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 8;
  }
  a1[1] = v11;
  return v11 - 8;
}

uint64_t sub_20C158454(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20BFD276C((uint64_t *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20C1584A0(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aapl__pxrReserved__::"
            "TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, "
            "8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserv"
            "ed__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aa"
            "pl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C158518(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aapl__pxrReserved__::"
            "TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, "
            "8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserv"
            "ed__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aa"
            "pl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C158590(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<std::pair<pxrInternal__aapl__pxrRe"
            "served__::TfToken, pxrInternal__aapl__pxrReserved__::TfToken>>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<p"
            "xrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>"
            "::operator->() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserve"
            "d__::(anonymous namespace)::_ParentAnd<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aap"
            "l__pxrReserved__::TfToken>>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C158608(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrInternal__aapl__pxrReser"
            "ved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrRes"
            "erved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<pxrInternal_"
            "_aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<px"
            "rInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, "
            "Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C158680(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20BFD276C(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C1586F0(int a1, _QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  if (__p)
  {
    v2 = __p[1];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    if ((*__p & 7) != 0)
    {
      v5 = (unsigned int *)(*__p & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(__p);
  }
}

_QWORD *sub_20C158740()
{
  _QWORD *v0;
  void *v1;
  int64x2_t *v2;

  v0 = operator new(0x18uLL);
  *v0 = &unk_24C529730;
  v2 = (int64x2_t *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v1);
  v0[1] = v2;
  bzero(v2, 0x2C0uLL);
  v2[16] = vdupq_n_s64(0x10uLL);
  *v0 = &unk_24C5296C0;
  return v0;
}

void sub_20C1587B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C1587CC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C158854(a1);
  operator delete(v1);
}

uint64_t sub_20C1587E0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C1587F8(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C158810(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C15884C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_20C158854(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C5296C0;
  sub_20C1588D8((_BOOL8)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C15894C((uint64_t)a1, v4);
}

BOOL sub_20C1588D8(_BOOL8 result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v1 = result;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = 0;
  while (1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    result = sub_20C158988(v1, &v7);
  }
  return result;
}

uint64_t sub_20C15894C(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C529730;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

BOOL sub_20C158988(uint64_t a1, _OWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20C158A58((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20C158A58(uint64_t *a1, _OWORD *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v23[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v23[0] = v8 + 8;
  v23[1] = (uint64_t)a1;
  v23[2] = v17;
  v23[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    *a2 = *(_OWORD *)(v13 + 16 * v16 + 16);
  }
  else
  {
    v19 = (unint64_t *)(v14 + 272);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  v21 = v18 != 0;
  sub_20BF39F2C(v23);
  return v21;
}

__n128 sub_20C158B64(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_20C158B70()
{
  _QWORD *v0;
  void *v1;
  int64x2_t *v2;

  v0 = operator new(0x18uLL);
  *v0 = &unk_24C5297E0;
  v2 = (int64x2_t *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v1);
  v0[1] = v2;
  bzero(v2, 0x2C0uLL);
  v2[16] = vdupq_n_s64(0x10uLL);
  *v0 = &unk_24C529770;
  return v0;
}

void sub_20C158BE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C158BFC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C158C84(a1);
  operator delete(v1);
}

uint64_t sub_20C158C10(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C158C28(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C158C40(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C158C7C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_20C158C84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C529770;
  sub_20C1588D8((_BOOL8)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C158D08((uint64_t)a1, v4);
}

uint64_t sub_20C158D08(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C5297E0;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

__n128 sub_20C158D44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_20C158D50(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  std::logic_error *exception;
  uint64_t v16[2];
  char v17;

  v16[0] = a2;
  sub_20BED1408((unint64_t *)a1, v16);
  v7 = v16[0];
  if ((unint64_t)v16[0] >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v16[1] = a1 + 8;
  v17 = 0;
  if (v7)
  {
    v8 = (int *)operator new(32 * v7);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * v7];
    *(_QWORD *)(a1 + 24) = v9;
    v10 = v8;
    do
    {
      *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((_BYTE *)v10 + 6) = 0;
      v10 += 8;
    }
    while (v10 != v9);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254987CF8);
    if ((v11 & 1) != 0)
    {
      v8 = &dword_254987CD8;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_254987CF8))
      {
        dword_254987CD8 = 0;
        word_254987CDC = -1;
        byte_254987CDE = 1;
        __cxa_atexit((void (*)(void *))sub_20C158F8C, &dword_254987CD8, &dword_20BDBC000);
        __cxa_guard_release(&qword_254987CF8);
      }
      v8 = &dword_254987CD8;
    }
  }
  v12 = v16[0];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v12)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 26) = 1;
  v13 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v13;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v13 * (float)v12);
  return a1;
}

void sub_20C158EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_20C158F18(void ***a1)
{
  void **v1;
  __int16 *v2;
  __int16 *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *a1;
  v2 = (__int16 *)**a1;
  if (v2)
  {
    v3 = (__int16 *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 14) != -1)
        {
          v5 = *((_QWORD *)v3 - 2);
          if ((v5 & 7) != 0)
          {
            v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
            do
              v7 = __ldxr(v6);
            while (__stlxr(v7 - 2, v6));
          }
          *(v3 - 14) = -1;
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_20C158F8C(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if (*(__int16 *)(result + 4) != -1)
  {
    v1 = *(_QWORD *)(result + 16);
    if ((v1 & 7) != 0)
    {
      v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t *sub_20C158FC4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int16 *v20;
  int v21;

  if (*(__int16 *)(a2 + 4) != -1)
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  v5 = result[4];
  v6 = (a2 - v5) >> 5;
  v7 = *result;
  v8 = (v6 + 1) & *result;
  v9 = *(__int16 *)(v5 + 32 * v8 + 4);
  if (v9 < 1)
    goto LABEL_15;
  do
  {
    v10 = (int *)(v5 + 32 * v8);
    v11 = v5 + 32 * v6;
    v12 = *v10;
    v13 = *((_QWORD *)v10 + 2);
    *(_QWORD *)(v11 + 8) = *((_QWORD *)v10 + 1);
    *(_QWORD *)(v11 + 16) = v13;
    *((_QWORD *)v10 + 2) = 0;
    *(_DWORD *)(v11 + 24) = v10[6];
    *(_DWORD *)v11 = v12;
    *(_WORD *)(v11 + 4) = v9 - 1;
    v5 = result[4];
    v14 = v5 + 32 * v8;
    v16 = *(__int16 *)(v14 + 4);
    v15 = (_WORD *)(v14 + 4);
    if (v16 != -1)
    {
      v17 = *(_QWORD *)(v5 + 32 * v8 + 16);
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
        v7 = *result;
        v5 = result[4];
      }
      *v15 = -1;
    }
    v6 = v8;
    v8 = v7 & (v8 + 1);
    v9 = *(__int16 *)(v5 + 32 * v8 + 4);
  }
  while (v9 > 0);
  if (*(__int16 *)(a2 + 4) == -1)
  {
LABEL_15:
    v20 = (__int16 *)(a2 + 36);
    do
    {
      if (*((_BYTE *)v20 - 30))
        break;
      v21 = *v20;
      v20 += 16;
    }
    while (v21 == -1);
  }
  *((_BYTE *)result + 73) = 1;
  return result;
}

__n128 sub_20C1590EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int64x2_t *v30;
  __int16 v31;

  sub_20C158D50((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  v3 = v25;
  v4 = (unsigned int *)a1[1];
  v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1)
      goto LABEL_13;
    if (v6)
      v7 = bswap64(0x9E3779B97F4A7C55* ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ (((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ *((_QWORD *)v4 + 1)+ ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((_QWORD *)v4 + 1))* ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((_QWORD *)v4 + 1))) >> 1)));
    else
      v7 = *v4;
    v8 = 0;
    v9 = v22;
    v10 = v22 & v7;
    v31 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      v11 = *((_QWORD *)&v24 + 1) + 32 * v10;
      v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8)
        goto LABEL_11;
      if (v12 == -1)
        break;
      sub_20C1592C8((int *)v11, &v31, (int *)&v30, (int *)v4 + 2);
      v8 = v31;
      v9 = v22;
LABEL_11:
      v31 = ++v8;
      v10 = v9 & (v10 + 1);
    }
    v13 = (int)v30;
    v14 = *((_QWORD *)&v24 + 1) + 32 * v10;
    *(_QWORD *)(v14 + 8) = *((_QWORD *)v4 + 1);
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    *(_DWORD *)(v14 + 24) = v4[6];
    *(_DWORD *)v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 8;
  }
  while (v4 != v5);
  v15 = *(int64x2_t *)(a1 + 1);
  v3 = v25;
LABEL_16:
  v16 = v22;
  v22 = *a1;
  *a1 = v16;
  v17 = v23;
  v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  v18 = v24;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v18;
  v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  v25 = v19;
  v20 = v26;
  v26 = a1[7];
  a1[7] = v20;
  *(_QWORD *)&v18 = v27;
  v27 = a1[8];
  a1[8] = v18;
  LOBYTE(v20) = v28;
  v28 = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  v29 = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = v20;
  v30 = &v23;
  sub_20C158F18((void ***)&v30);
  return result;
}

int *sub_20C1592C8(int *result, _WORD *a2, int *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  int v10;

  v5 = *(_QWORD *)a4;
  v4 = *((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = 0;
  *(_QWORD *)a4 = *((_QWORD *)result + 1);
  if (result + 2 == a4)
  {
    v6 = *((_QWORD *)result + 2);
    *(_QWORD *)a4 = v5;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  else
  {
    *((_QWORD *)a4 + 1) = *((_QWORD *)result + 2);
    *((_QWORD *)result + 1) = v5;
  }
  *((_QWORD *)result + 2) = v4;
  v9 = a4[4];
  a4[4] = result[6];
  result[6] = v9;
  LOWORD(v9) = *a2;
  *a2 = *((_WORD *)result + 2);
  *((_WORD *)result + 2) = v9;
  v10 = *result;
  *result = *a3;
  *a3 = v10;
  return result;
}

uint64_t sub_20C159350(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned int *v3;
  unsigned int v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)result = a2;
  if (a2)
  {
    v3 = (unsigned int *)(a2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    v5 = *(_WORD *)(a2 + 12) + 1;
    v6 = *(_BYTE *)(a2 + 15);
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = v5;
  *(_BYTE *)(result + 14) = 1;
  *(_BYTE *)(result + 15) = v6;
  v7 = *a3;
  *(_QWORD *)(result + 16) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_20C1593D0(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  std::logic_error *exception;
  uint64_t v16[2];
  char v17;

  v16[0] = a2;
  sub_20BED1408((unint64_t *)a1, v16);
  v7 = v16[0];
  if ((unint64_t)v16[0] >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v16[1] = a1 + 8;
  v17 = 0;
  if (v7)
  {
    v8 = (int *)operator new(32 * v7);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * v7];
    *(_QWORD *)(a1 + 24) = v9;
    v10 = v8;
    do
    {
      *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((_BYTE *)v10 + 6) = 0;
      v10 += 8;
    }
    while (v10 != v9);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254987D20);
    if ((v11 & 1) != 0)
    {
      v8 = &dword_254987D00;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_254987D20))
      {
        dword_254987D00 = 0;
        word_254987D04 = -1;
        byte_254987D06 = 1;
        __cxa_atexit((void (*)(void *))sub_20C159598, &dword_254987D00, &dword_20BDBC000);
        __cxa_guard_release(&qword_254987D20);
      }
      v8 = &dword_254987D00;
    }
  }
  v12 = v16[0];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v12)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 26) = 1;
  v13 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v13;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v13 * (float)v12);
  return a1;
}

void sub_20C159574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C159598(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if (*(__int16 *)(result + 4) != -1)
  {
    v1 = *(_QWORD *)(result + 16);
    if ((v1 & 7) != 0)
    {
      v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t sub_20C1595D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unsigned __int16 v26;
  _WORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  int *v37;
  _WORD *v38;
  unsigned __int16 i;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t result;
  unsigned int *v47;
  unsigned int v48;

  v3 = *a2;
  v4 = *(_QWORD *)a2[1];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v8 = bswap64(0x9E3779B97F4A7C55* ((v4 & 0xFFFFFFFFFFFFFFF8)+ (((v4 & 0xFFFFFFFFFFFFFFF8) + v3 + ((v4 & 0xFFFFFFFFFFFFFFF8) + v3) * ((v4 & 0xFFFFFFFFFFFFFFF8) + v3)) >> 1)));
  v9 = *a1;
  v10 = a1[4];
  v11 = v8 & *a1;
  if (*(__int16 *)(v10 + 32 * v11 + 4) < 0)
  {
    LOWORD(v12) = 0;
LABEL_13:
    if (*((_BYTE *)a1 + 72) || (v16 = a1[6], v16 >= a1[7]))
    {
      v24 = sub_20BED1164(a1);
      sub_20C159900(a1, v24);
      *((_BYTE *)a1 + 72) = 0;
    }
    else
    {
      if (!*((_BYTE *)a1 + 73))
        goto LABEL_30;
      *((_BYTE *)a1 + 73) = 0;
      v17 = *((float *)a1 + 16);
      if (v17 == 0.0)
        goto LABEL_30;
      v18 = a1[5];
      v19 = 0.0;
      if (v18)
        v19 = (float)v16 / (float)v18;
      if (v19 >= v17)
        goto LABEL_30;
      v20 = *((float *)a1 + 17);
      v21 = vcvtps_u32_f32((float)(v16 + 1) / v20);
      v22 = vcvtps_u32_f32((float)v16 / v20);
      if (v22 <= v21)
        v23 = v21;
      else
        v23 = v22;
      sub_20C159900(a1, v23);
    }
    v9 = *a1;
    v10 = a1[4];
    v11 = *a1 & v8;
    if (*(__int16 *)(v10 + 32 * v11 + 4) < 0)
    {
      LOWORD(v12) = 0;
    }
    else
    {
      LOWORD(v12) = 0;
      do
      {
        v12 = (__int16)(v12 + 1);
        v11 = (v11 + 1) & v9;
      }
      while (v12 <= *(__int16 *)(v10 + 32 * v11 + 4));
    }
LABEL_30:
    v25 = (int *)(v10 + 32 * v11);
    v27 = v25 + 1;
    v26 = *((_WORD *)v25 + 2);
    v28 = (uint64_t *)(v25 + 2);
    v29 = (uint64_t *)(v25 + 4);
    if (v26 == 0xFFFF)
    {
      *v28 = v3;
      *v29 = v4;
      v25[6] = v7;
      *v25 = v8;
      *v27 = v12;
    }
    else
    {
      v30 = *v28;
      v31 = *v29;
      *v28 = v3;
      *v29 = v4;
      v32 = v25[6];
      v25[6] = v7;
      *v27 = v12;
      v33 = *v25;
      *v25 = v8;
      v34 = (v11 + 1) & v9;
      v35 = v26 + 1;
      v36 = a1[4];
      v37 = (int *)(v36 + 32 * v34);
      v38 = v37 + 1;
      for (i = *((_WORD *)v37 + 2); i != 0xFFFF; i = *((_WORD *)v37 + 2))
      {
        if (v35 > (__int16)i)
        {
          if (v35 >= 4096)
            *((_BYTE *)a1 + 72) = 1;
          v41 = *((_QWORD *)v37 + 1);
          v40 = *((_QWORD *)v37 + 2);
          *((_QWORD *)v37 + 1) = v30;
          *((_QWORD *)v37 + 2) = v31;
          v42 = v37[6];
          v37[6] = v32;
          v43 = *((_WORD *)v37 + 2);
          *((_WORD *)v37 + 2) = v35;
          v44 = *v37;
          *v37 = v33;
          v32 = v42;
          v31 = v40;
          v30 = v41;
          v33 = v44;
          v35 = v43;
          v36 = a1[4];
        }
        v34 = v9 & (v34 + 1);
        ++v35;
        v37 = (int *)(v36 + 32 * v34);
        v38 = v37 + 1;
      }
      v45 = v36 + 32 * v34;
      *(_QWORD *)(v45 + 8) = v30;
      *(_QWORD *)(v45 + 16) = v31;
      *(_DWORD *)(v45 + 24) = v32;
      *v37 = v33;
      *v38 = v35;
    }
    v4 = 0;
    ++a1[6];
    result = a1[4] + 32 * v11;
    goto LABEL_40;
  }
  LOWORD(v12) = 0;
  while (1)
  {
    v13 = v10 + 32 * v11;
    v15 = *(_QWORD *)(v13 + 8);
    v14 = v13 + 8;
    if (v15 == v3 && (*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) == (v4 & 0xFFFFFFFFFFFFFFF8))
      break;
    v12 = (__int16)(v12 + 1);
    v11 = (v11 + 1) & v9;
    if (v12 > *(__int16 *)(v10 + 32 * v11 + 4))
      goto LABEL_13;
  }
  result = v10 + 32 * v11;
LABEL_40:
  if ((v4 & 7) != 0)
  {
    v47 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  return result;
}

__n128 sub_20C159900(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int64x2_t *v30;
  __int16 v31;

  sub_20C1593D0((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  v3 = v25;
  v4 = (unsigned int *)a1[1];
  v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1)
      goto LABEL_13;
    if (v6)
      v7 = bswap64(0x9E3779B97F4A7C55* ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ (((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ *((_QWORD *)v4 + 1)+ ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((_QWORD *)v4 + 1))* ((*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((_QWORD *)v4 + 1))) >> 1)));
    else
      v7 = *v4;
    v8 = 0;
    v9 = v22;
    v10 = v22 & v7;
    v31 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      v11 = *((_QWORD *)&v24 + 1) + 32 * v10;
      v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8)
        goto LABEL_11;
      if (v12 == -1)
        break;
      sub_20C1592C8((int *)v11, &v31, (int *)&v30, (int *)v4 + 2);
      v8 = v31;
      v9 = v22;
LABEL_11:
      v31 = ++v8;
      v10 = v9 & (v10 + 1);
    }
    v13 = (int)v30;
    v14 = *((_QWORD *)&v24 + 1) + 32 * v10;
    *(_QWORD *)(v14 + 8) = *((_QWORD *)v4 + 1);
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    *(_DWORD *)(v14 + 24) = v4[6];
    *(_DWORD *)v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 8;
  }
  while (v4 != v5);
  v15 = *(int64x2_t *)(a1 + 1);
  v3 = v25;
LABEL_16:
  v16 = v22;
  v22 = *a1;
  *a1 = v16;
  v17 = v23;
  v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  v18 = v24;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v18;
  v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  v25 = v19;
  v20 = v26;
  v26 = a1[7];
  a1[7] = v20;
  *(_QWORD *)&v18 = v27;
  v27 = a1[8];
  a1[8] = v18;
  LOBYTE(v20) = v28;
  v28 = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  v29 = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = v20;
  v30 = &v23;
  sub_20C158F18((void ***)&v30);
  return result;
}

uint64_t sub_20C159ADC(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  std::logic_error *exception;
  uint64_t v16[2];
  char v17;

  v16[0] = a2;
  sub_20BED1408((unint64_t *)a1, v16);
  v7 = v16[0];
  if (v16[0] >= 0x666666666666667uLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v16[1] = a1 + 8;
  v17 = 0;
  if (v7)
  {
    v8 = (int *)operator new(40 * v7);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[10 * v7];
    *(_QWORD *)(a1 + 24) = v9;
    v10 = v8;
    do
    {
      *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((_BYTE *)v10 + 6) = 0;
      v10 += 10;
    }
    while (v10 != v9);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254987D50);
    if ((v11 & 1) != 0)
    {
      v8 = &dword_254987D28;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_254987D50))
      {
        dword_254987D28 = 0;
        word_254987D2C = -1;
        byte_254987D2E = 1;
        __cxa_atexit((void (*)(void *))sub_20C159D4C, &dword_254987D28, &dword_20BDBC000);
        __cxa_guard_release(&qword_254987D50);
      }
      v8 = &dword_254987D28;
    }
  }
  v12 = v16[0];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v12)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 34) = 1;
  v13 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v13;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v13 * (float)v12);
  return a1;
}

void sub_20C159C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_20C159CB8(void ***a1)
{
  void **v1;
  __int16 *v2;
  __int16 *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v1 = *a1;
  v2 = (__int16 *)**a1;
  if (v2)
  {
    v3 = (__int16 *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 18) != -1)
        {
          v5 = *((_QWORD *)v3 - 2);
          if ((v5 & 7) != 0)
          {
            v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
            do
              v7 = __ldxr(v6);
            while (__stlxr(v7 - 2, v6));
          }
          v8 = *((_QWORD *)v3 - 3);
          if ((v8 & 7) != 0)
          {
            v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
            do
              v10 = __ldxr(v9);
            while (__stlxr(v10 - 2, v9));
          }
          *(v3 - 18) = -1;
        }
        v3 -= 20;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_20C159D4C(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (*(__int16 *)(result + 4) != -1)
  {
    v1 = *(_QWORD *)(result + 24);
    if ((v1 & 7) != 0)
    {
      v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t *sub_20C159DA4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _WORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  __int16 *v26;
  int v27;

  if (*(__int16 *)(a2 + 4) != -1)
  {
    v2 = *(_QWORD *)(a2 + 24);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = *(_QWORD *)(a2 + 16);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  v8 = result[4];
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v8) >> 3);
  v10 = *result;
  v11 = (v9 + 1) & *result;
  v12 = *(__int16 *)(v8 + 40 * v11 + 4);
  if (v12 < 1)
    goto LABEL_20;
  do
  {
    v13 = (int *)(v8 + 40 * v11);
    v14 = v8 + 40 * v9;
    v15 = *v13;
    *(_QWORD *)(v14 + 8) = *((_QWORD *)v13 + 1);
    *(_OWORD *)(v14 + 16) = *((_OWORD *)v13 + 1);
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = 0;
    *(_DWORD *)(v14 + 32) = v13[8];
    *(_DWORD *)v14 = v15;
    *(_WORD *)(v14 + 4) = v12 - 1;
    v8 = result[4];
    v16 = v8 + 40 * v11;
    v18 = *(__int16 *)(v16 + 4);
    v17 = (_WORD *)(v16 + 4);
    if (v18 != -1)
    {
      v19 = v8 + 40 * v11;
      v20 = *(_QWORD *)(v19 + 24);
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      v23 = *(_QWORD *)(v19 + 16);
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      *v17 = -1;
      v10 = *result;
      v8 = result[4];
    }
    v9 = v11;
    v11 = v10 & (v11 + 1);
    v12 = *(__int16 *)(v8 + 40 * v11 + 4);
  }
  while (v12 > 0);
  if (*(__int16 *)(a2 + 4) == -1)
  {
LABEL_20:
    v26 = (__int16 *)(a2 + 44);
    do
    {
      if (*((_BYTE *)v26 - 38))
        break;
      v27 = *v26;
      v26 += 20;
    }
    while (v27 == -1);
  }
  *((_BYTE *)result + 73) = 1;
  return result;
}

uint64_t sub_20C159F30(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C159F64(a1, a3);
}

uint64_t sub_20C159F64(uint64_t result, _QWORD *a2)
{
  unint64_t v2;

  v2 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(result + 8))
    v2 += (*(_QWORD *)result + v2 + (*(_QWORD *)result + v2) * (*(_QWORD *)result + v2)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v2;
  *(_QWORD *)result = (a2[1] & 0xFFFFFFFFFFFFFFF8)
                    + (((a2[1] & 0xFFFFFFFFFFFFFFF8)
                      + v2
                      + ((a2[1] & 0xFFFFFFFFFFFFFFF8) + v2) * ((a2[1] & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
  return result;
}

__n128 sub_20C159FB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int64x2_t *v30;
  char v31;
  __int16 v32;

  sub_20C159ADC((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  v3 = v25;
  v4 = (uint64_t *)a1[1];
  v5 = (unsigned int *)a1[2];
  if (v4 == (uint64_t *)v5)
  {
    v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1)
      goto LABEL_13;
    if (v6)
    {
      v30 = 0;
      v31 = 0;
      sub_20C159F30((uint64_t)&v30, v4 + 1, v4 + 2);
      v7 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v30);
    }
    else
    {
      v7 = *(unsigned int *)v4;
    }
    v8 = 0;
    v9 = v22;
    v10 = v22 & v7;
    v32 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      v11 = *((_QWORD *)&v24 + 1) + 40 * v10;
      v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8)
        goto LABEL_11;
      if (v12 == -1)
        break;
      sub_20C15A1C8((int *)v11, &v32, (int *)&v30, v4 + 1);
      v8 = v32;
      v9 = v22;
LABEL_11:
      v32 = ++v8;
      v10 = v9 & (v10 + 1);
    }
    v13 = (int)v30;
    v14 = *((_QWORD *)&v24 + 1) + 40 * v10;
    *(_QWORD *)(v14 + 8) = v4[1];
    *(_QWORD *)(v14 + 16) = v4[2];
    v4[2] = 0;
    *(_QWORD *)(v14 + 24) = v4[3];
    v4[3] = 0;
    *(_DWORD *)(v14 + 32) = *((_DWORD *)v4 + 8);
    *(_DWORD *)v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 5;
  }
  while (v4 != (uint64_t *)v5);
  v15 = *(int64x2_t *)(a1 + 1);
  v3 = v25;
LABEL_16:
  v16 = v22;
  v22 = *a1;
  *a1 = v16;
  v17 = v23;
  v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v24;
  v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  v24 = v18;
  v25 = v19;
  v20 = v26;
  v26 = a1[7];
  a1[7] = v20;
  v17.i64[0] = v27;
  v27 = a1[8];
  a1[8] = v17.i64[0];
  LOBYTE(v20) = v28;
  v28 = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  v29 = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = v20;
  v30 = &v23;
  sub_20C159CB8((void ***)&v30);
  return result;
}

void sub_20C15A1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 88) = &a11;
  sub_20C159CB8((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C15A1C8(int *a1, _WORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  _QWORD *result;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  __int128 v16;

  v8 = *a4;
  v16 = *(_OWORD *)(a4 + 1);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = *((_QWORD *)a1 + 1);
  sub_20C15A2C8(a4 + 1, (_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = v8;
  result = sub_20C15A2C8((_QWORD *)a1 + 2, &v16);
  if ((BYTE8(v16) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((v16 & 7) != 0)
  {
    v12 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 6) = a1[8];
  a1[8] = v14;
  LOWORD(v14) = *a2;
  *a2 = *((_WORD *)a1 + 2);
  *((_WORD *)a1 + 2) = v14;
  v15 = *a1;
  *a1 = *a3;
  *a3 = v15;
  return result;
}

_QWORD *sub_20C15A2C8(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2 != result)
  {
    if ((*result & 7) != 0)
    {
      v2 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    *result = *a2;
    *a2 = 0;
    v4 = result[1];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    result[1] = a2[1];
    a2[1] = 0;
  }
  return result;
}

uint64_t *sub_20C15A32C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *a2;
  *result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = a2[1];
  result[1] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_20C15A398(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v5;
  unsigned int v6;
  __int16 v7;
  char v8;
  uint64_t *v9;

  *(_QWORD *)a1 = a2;
  if (a2)
  {
    v5 = (unsigned int *)(a2 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *(_WORD *)(a2 + 12) + 1;
    v8 = *(_BYTE *)(a2 + 15) | 2;
  }
  else
  {
    v7 = 1;
    v8 = 2;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = v7;
  *(_BYTE *)(a1 + 14) = 2;
  *(_BYTE *)(a1 + 15) = v8;
  v9 = (uint64_t *)operator new(0x10uLL);
  *(_QWORD *)(a1 + 16) = sub_20C15A32C(v9, a3);
  return a1;
}

void sub_20C15A420(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v1;

  sub_20BFD2738(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20C15A434()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v6;

  v0 = (char *)operator new(0x2C00uLL);
  v1 = 0;
  v2 = 128;
  do
  {
    *(_BYTE *)(sub_20C15A52C((uint64_t)&v0[v1], 0, 0.0, 0.5) + 80) = 0;
    v1 += 88;
    --v2;
  }
  while (v2);
  while (!__ldaxr(&qword_254985C90))
  {
    if (!__stlxr((unint64_t)v0, &qword_254985C90))
      return (unint64_t)v0;
  }
  v4 = 0;
  __clrex();
  do
  {
    v6 = (void **)&v0[v4 + 11184];
    sub_20C15A6F4(&v6);
    v4 -= 88;
  }
  while (v4 != -11264);
  operator delete(v0);
  return atomic_load(&qword_254985C90);
}

void sub_20C15A4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C15A6F4((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15A52C(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  std::logic_error *exception;
  uint64_t v16[2];
  char v17;

  v16[0] = a2;
  sub_20BED1408((unint64_t *)a1, v16);
  v7 = v16[0];
  if ((unint64_t)v16[0] >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v16[1] = a1 + 8;
  v17 = 0;
  if (v7)
  {
    v8 = (int *)operator new(32 * v7);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * v7];
    *(_QWORD *)(a1 + 24) = v9;
    v10 = v8;
    do
    {
      *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((_BYTE *)v10 + 6) = 0;
      v10 += 8;
    }
    while (v10 != v9);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254987D78);
    if ((v11 & 1) != 0)
    {
      v8 = &dword_254987D58;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_254987D78))
      {
        dword_254987D58 = 0;
        word_254987D5C = -1;
        byte_254987D5E = 1;
        __cxa_atexit((void (*)(void *))sub_20C15A78C, &dword_254987D58, &dword_20BDBC000);
        __cxa_guard_release(&qword_254987D78);
      }
      v8 = &dword_254987D58;
    }
  }
  v12 = v16[0];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v12)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 26) = 1;
  v13 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v13;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v13 * (float)v12);
  return a1;
}

void sub_20C15A6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_20C15A6F4(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 32;
      do
      {
        if (*(__int16 *)(v6 + 4) != -1)
        {
          sub_20C15A80C(v6);
          *(_WORD *)(v6 + 4) = -1;
        }
        v7 = v6 == (_QWORD)v2;
        v6 -= 32;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C15A78C(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_20C15A80C(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

_DWORD *sub_20C15A7C8(_DWORD *result)
{
  _DWORD *v1;

  if (*((__int16 *)result + 2) != -1)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(result + 5);
    result = sub_20BFD265C(v1 + 4);
    *((_WORD *)v1 + 2) = -1;
  }
  return result;
}

_DWORD *sub_20C15A80C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  return sub_20BFD265C((_DWORD *)(a1 + 16));
}

uint64_t sub_20C15A838(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 i;
  __int16 *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  __int16 v36;

  v4 = *(_DWORD **)(a2 + 8);
  v31 = *(_QWORD *)a2;
  sub_20BFD6E54(&v32, v4);
  sub_20BFD6EA4((_DWORD *)&v32 + 1, v4 + 1);
  v33 = *(_DWORD *)(a2 + 16);
  v34 = 0;
  v35 = 0;
  sub_20C15ABAC((uint64_t)&v34, &v31, (unsigned int *)&v32);
  v5 = bswap64(0x9E3779B97F4A7C55 * v34);
  v6 = a1[4];
  v7 = v5 & *a1;
  if (*(__int16 *)(v6 + 32 * v7 + 4) < 0)
  {
    LOWORD(v8) = 0;
LABEL_10:
    if (*((_BYTE *)a1 + 72) || (v11 = a1[6], v11 >= a1[7]))
    {
      v19 = sub_20BED1164(a1);
      sub_20C15ABE0(a1, v19);
      *((_BYTE *)a1 + 72) = 0;
    }
    else
    {
      if (!*((_BYTE *)a1 + 73))
        goto LABEL_28;
      *((_BYTE *)a1 + 73) = 0;
      v12 = *((float *)a1 + 16);
      if (v12 == 0.0)
        goto LABEL_28;
      v13 = a1[5];
      v14 = 0.0;
      if (v13)
        v14 = (float)v11 / (float)v13;
      if (v14 >= v12)
        goto LABEL_28;
      v15 = *((float *)a1 + 17);
      v16 = vcvtps_u32_f32((float)(v11 + 1) / v15);
      v17 = vcvtps_u32_f32((float)v11 / v15);
      if (v17 <= v16)
        v18 = v16;
      else
        v18 = v17;
      sub_20C15ABE0(a1, v18);
    }
    v6 = a1[4];
    v7 = *a1 & v5;
    if (*(__int16 *)(v6 + 32 * v7 + 4) < 0)
    {
      LOWORD(v8) = 0;
    }
    else
    {
      LOWORD(v8) = 0;
      do
      {
        v8 = (__int16)(v8 + 1);
        v7 = (v7 + 1) & *a1;
      }
      while (v8 <= *(__int16 *)(v6 + 32 * v7 + 4));
    }
LABEL_28:
    v20 = v6 + 32 * v7;
    if (*(__int16 *)(v20 + 4) == -1)
    {
      *(_QWORD *)(v20 + 8) = v31;
      sub_20BFD38A4((_DWORD *)(v20 + 16), &v32);
      sub_20BFD38DC((_DWORD *)(v20 + 20), (_DWORD *)&v32 + 1);
      *(_DWORD *)(v20 + 24) = v33;
      *(_DWORD *)v20 = v5;
      *(_WORD *)(v20 + 4) = v8;
    }
    else
    {
      v36 = v8;
      LODWORD(v34) = v5;
      sub_20C15ADFC((int *)v20, &v36, (int *)&v34, &v31);
      v21 = *a1;
      v22 = *a1 & (v7 + 1);
      v23 = ++v36;
      v24 = a1[4];
      v25 = v24 + 32 * v22;
      v27 = (__int16 *)(v25 + 4);
      for (i = *(_WORD *)(v25 + 4); i != 0xFFFF; i = *(_WORD *)(v25 + 4))
      {
        if (v23 > (__int16)i)
        {
          if (v23 >= 4096)
            *((_BYTE *)a1 + 72) = 1;
          sub_20C15ADFC((int *)v25, &v36, (int *)&v34, &v31);
          v21 = *a1;
          v23 = v36;
          v24 = a1[4];
        }
        v22 = v21 & (v22 + 1);
        v36 = ++v23;
        v25 = v24 + 32 * v22;
        v27 = (__int16 *)(v25 + 4);
      }
      v28 = v34;
      v29 = v24 + 32 * v22;
      *(_QWORD *)(v29 + 8) = v31;
      sub_20BFD38A4((_DWORD *)(v29 + 16), &v32);
      sub_20BFD38DC((_DWORD *)(v29 + 20), (_DWORD *)&v32 + 1);
      *(_DWORD *)(v29 + 24) = v33;
      *(_DWORD *)v25 = v28;
      *v27 = v23;
    }
    ++a1[6];
    v9 = a1[4] + 32 * v7;
    goto LABEL_38;
  }
  LOWORD(v8) = 0;
  while (1)
  {
    v9 = v6 + 32 * v7;
    if (*(_QWORD *)(v9 + 8) == v31 && *(_QWORD *)(v9 + 16) == v32)
      break;
    v8 = (__int16)(v8 + 1);
    v7 = (v7 + 1) & *a1;
    if (v8 > *(__int16 *)(v6 + 32 * v7 + 4))
      goto LABEL_10;
  }
LABEL_38:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  return v9;
}

void sub_20C15AB8C(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15ABAC(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20BFD84AC(a1, a3);
}

__n128 sub_20C15ABE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int64x2_t *v30;
  char v31;
  __int16 v32;

  sub_20C15A52C((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  v3 = v25;
  v4 = (unsigned int *)a1[1];
  v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1)
      goto LABEL_13;
    if (v6)
    {
      v30 = 0;
      v31 = 0;
      sub_20C15ABAC((uint64_t)&v30, (uint64_t *)v4 + 1, v4 + 4);
      v7 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v30);
    }
    else
    {
      v7 = *v4;
    }
    v8 = 0;
    v9 = v22;
    v10 = v22 & v7;
    v32 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      v11 = *((_QWORD *)&v24 + 1) + 32 * v10;
      v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8)
        goto LABEL_11;
      if (v12 == -1)
        break;
      sub_20C15ADFC((int *)(*((_QWORD *)&v24 + 1) + 32 * v10), &v32, (int *)&v30, (uint64_t *)v4 + 1);
      v8 = v32;
      v9 = v22;
LABEL_11:
      v32 = ++v8;
      v10 = v9 & (v10 + 1);
    }
    v13 = (int)v30;
    v14 = *((_QWORD *)&v24 + 1) + 32 * v10;
    *(_QWORD *)(v14 + 8) = *((_QWORD *)v4 + 1);
    sub_20BFD38A4((_DWORD *)(v14 + 16), v4 + 4);
    sub_20BFD38DC((_DWORD *)(v14 + 20), v4 + 5);
    *(_DWORD *)(v14 + 24) = v4[6];
    *(_DWORD *)v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 8;
  }
  while (v4 != v5);
  v15 = *(int64x2_t *)(a1 + 1);
  v3 = v25;
LABEL_16:
  v16 = v22;
  v22 = *a1;
  *a1 = v16;
  v17 = v23;
  v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v24;
  v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  v24 = v18;
  v25 = v19;
  v20 = v26;
  v26 = a1[7];
  a1[7] = v20;
  v17.i64[0] = v27;
  v27 = a1[8];
  a1[8] = v17.i64[0];
  LOBYTE(v20) = v28;
  v28 = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  v29 = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = v20;
  v30 = &v23;
  sub_20C15A6F4((void ***)&v30);
  return result;
}

void sub_20C15ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 88) = &a11;
  sub_20C15A6F4((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C15ADFC(int *a1, _WORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  int *v9;
  _DWORD *result;
  int v11;
  int v12;
  int v13;
  int v14;

  v8 = *a4;
  v9 = (int *)(a4 + 1);
  v13 = *((_DWORD *)a4 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a4 + 2);
  v14 = *((_DWORD *)a4 + 3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a4 + 3);
  *a4 = *((_QWORD *)a1 + 1);
  sub_20BFD3EBC(v9, a1 + 4);
  sub_20BFD3F10((int *)a4 + 3, a1 + 5);
  *((_QWORD *)a1 + 1) = v8;
  sub_20BFD3EBC(a1 + 4, &v13);
  sub_20BFD3F10(a1 + 5, &v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  result = sub_20BFD265C(&v13);
  v11 = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = a1[6];
  a1[6] = v11;
  LOWORD(v11) = *a2;
  *a2 = *((_WORD *)a1 + 2);
  *((_WORD *)a1 + 2) = v11;
  v12 = *a1;
  *a1 = *a3;
  *a3 = v12;
  return result;
}

_DWORD *sub_20C15AF20(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  __int16 *v13;
  int v14;

  result = sub_20C15A7C8((_DWORD *)a2);
  --*(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (a2 - v5) >> 5;
  v7 = (v6 + 1) & *(_QWORD *)a1;
  v8 = *(__int16 *)(v5 + 32 * v7 + 4);
  if (v8 >= 1)
  {
    do
    {
      v9 = (int *)(v5 + 32 * v7);
      v10 = v8 - 1;
      v11 = v5 + 32 * v6;
      v12 = *v9;
      *(_QWORD *)(v11 + 8) = *((_QWORD *)v9 + 1);
      sub_20BFD38A4((_DWORD *)(v11 + 16), v9 + 4);
      sub_20BFD38DC((_DWORD *)(v11 + 20), v9 + 5);
      *(_DWORD *)(v11 + 24) = v9[6];
      *(_DWORD *)v11 = v12;
      *(_WORD *)(v11 + 4) = v10;
      result = sub_20C15A7C8((_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v7));
      v6 = v7;
      v7 = *(_QWORD *)a1 & (v7 + 1);
      v5 = *(_QWORD *)(a1 + 32);
      v8 = *(__int16 *)(v5 + 32 * v7 + 4);
    }
    while (v8 > 0);
  }
  if (*(__int16 *)(a2 + 4) == -1)
  {
    v13 = (__int16 *)(a2 + 36);
    do
    {
      if (*((_BYTE *)v13 - 30))
        break;
      v14 = *v13;
      v13 += 16;
    }
    while (v14 == -1);
  }
  *(_BYTE *)(a1 + 73) = 1;
  return result;
}

uint64_t sub_20C15B030(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int *v5;
  unsigned int v6;
  __int16 v7;
  char v8;

  *(_QWORD *)a1 = a2;
  if (a2)
  {
    v5 = (unsigned int *)(a2 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *(_WORD *)(a2 + 12) + 1;
    v8 = *(_BYTE *)(a2 + 15) | 4;
  }
  else
  {
    v7 = 1;
    v8 = 4;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = v7;
  *(_BYTE *)(a1 + 14) = 4;
  *(_BYTE *)(a1 + 15) = v8;
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  return a1;
}

uint64_t sub_20C15B0BC(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned int *v3;
  unsigned int v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)result = a2;
  if (a2)
  {
    v3 = (unsigned int *)(a2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    v5 = *(_WORD *)(a2 + 12) + 1;
    v6 = *(_BYTE *)(a2 + 15);
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = v5;
  *(_BYTE *)(result + 14) = 6;
  *(_BYTE *)(result + 15) = v6;
  v7 = *a3;
  *(_QWORD *)(result + 16) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

unint64_t sub_20C15B140()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v6;

  v0 = (char *)operator new(0x2C00uLL);
  v1 = 0;
  v2 = 128;
  do
  {
    *(_BYTE *)(sub_20C15A52C((uint64_t)&v0[v1], 0, 0.0, 0.5) + 80) = 0;
    v1 += 88;
    --v2;
  }
  while (v2);
  while (!__ldaxr(&qword_254985CA0))
  {
    if (!__stlxr((unint64_t)v0, &qword_254985CA0))
      return (unint64_t)v0;
  }
  v4 = 0;
  __clrex();
  do
  {
    v6 = (void **)&v0[v4 + 11184];
    sub_20C15A6F4(&v6);
    v4 -= 88;
  }
  while (v4 != -11264);
  operator delete(v0);
  return atomic_load(&qword_254985CA0);
}

void sub_20C15B204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_20C15A6F4((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15B238(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int *v5;
  unsigned int v6;
  __int16 v7;
  char v8;

  *(_QWORD *)a1 = a2;
  if (a2)
  {
    v5 = (unsigned int *)(a2 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *(_WORD *)(a2 + 12) + 1;
    v8 = *(_BYTE *)(a2 + 15) | 4;
  }
  else
  {
    v8 = 4;
    v7 = 1;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = v7;
  *(_BYTE *)(a1 + 14) = 5;
  *(_BYTE *)(a1 + 15) = v8;
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  return a1;
}

uint64_t sub_20C15B2C4(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned int *v3;
  unsigned int v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)result = a2;
  if (a2)
  {
    v3 = (unsigned int *)(a2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    v5 = *(_WORD *)(a2 + 12) + 1;
    v6 = *(_BYTE *)(a2 + 15);
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = v5;
  *(_BYTE *)(result + 14) = 7;
  *(_BYTE *)(result + 15) = v6;
  v7 = *a3;
  *(_QWORD *)(result + 16) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_20C15B348(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  std::logic_error *exception;
  uint64_t v16[2];
  char v17;

  v16[0] = a2;
  sub_20BED1408((unint64_t *)a1, v16);
  v7 = v16[0];
  if (v16[0] >= 0xAAAAAAAAAAAAAABuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v16[1] = a1 + 8;
  v17 = 0;
  if (v7)
  {
    v8 = (int *)operator new(24 * v7);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[6 * v7];
    *(_QWORD *)(a1 + 24) = v9;
    v10 = v8;
    do
    {
      *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((_BYTE *)v10 + 6) = 0;
      v10 += 6;
    }
    while (v10 != v9);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254987D98);
    if ((v11 & 1) != 0)
    {
      v8 = &dword_254987D80;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_254987D98))
      {
        dword_254987D80 = 0;
        word_254987D84 = -1;
        byte_254987D86 = 1;
        __cxa_atexit((void (*)(void *))sub_20C15B568, &dword_254987D80, &dword_20BDBC000);
        __cxa_guard_release(&qword_254987D98);
      }
      v8 = &dword_254987D80;
    }
  }
  v12 = v16[0];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v12)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 18) = 1;
  v13 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v13;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v13 * (float)v12);
  return a1;
}

void sub_20C15B500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_20C15B524(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 24)
    {
      if (*((__int16 *)i - 10) != -1)
        *((_WORD *)i - 10) = -1;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_20C15B568(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
    *(_WORD *)(result + 4) = -1;
  return result;
}

uint64_t sub_20C15B580(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  __int16 *v12;
  int v13;

  if (*(__int16 *)(a2 + 4) != -1)
    *(_WORD *)(a2 + 4) = -1;
  --*(_QWORD *)(result + 48);
  v2 = *(_QWORD *)(result + 32);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v2) >> 3);
  v4 = (v3 + 1) & *(_QWORD *)result;
  v5 = *(__int16 *)(v2 + 24 * v4 + 4);
  if (v5 < 1)
    goto LABEL_8;
  do
  {
    v6 = (int *)(v2 + 24 * v4);
    v7 = v2 + 24 * v3;
    v8 = *v6;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(v6 + 2);
    *(_DWORD *)v7 = v8;
    *(_WORD *)(v7 + 4) = v5 - 1;
    v2 = *(_QWORD *)(result + 32);
    v9 = v2 + 24 * v4;
    v11 = *(__int16 *)(v9 + 4);
    v10 = (_WORD *)(v9 + 4);
    if (v11 != -1)
      *v10 = -1;
    v3 = v4;
    v4 = *(_QWORD *)result & (v4 + 1);
    v5 = *(__int16 *)(v2 + 24 * v4 + 4);
  }
  while (v5 > 0);
  if (*(__int16 *)(a2 + 4) == -1)
  {
LABEL_8:
    v12 = (__int16 *)(a2 + 28);
    do
    {
      if (*((_BYTE *)v12 - 22))
        break;
      v13 = *v12;
      v12 += 12;
    }
    while (v13 == -1);
  }
  *(_BYTE *)(result + 73) = 1;
  return result;
}

__n128 sub_20C15B66C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int64x2_t v21;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __n128 result;
  uint64_t v28;
  int64x2_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  int64x2_t *v36;

  sub_20C15B348((uint64_t)&v28, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  v3 = v31;
  v4 = (unsigned int *)a1[1];
  v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    v21 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  v6 = (unint64_t)(v31 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1)
      goto LABEL_13;
    if (v6)
      v7 = bswap64(0x9E3779B97F4A7C55 * *((_QWORD *)v4 + 1));
    else
      v7 = *v4;
    v8 = 0;
    v9 = v28;
    for (i = v7; ; i = v11 + 1)
    {
      v11 = i & v9;
      v12 = *((_QWORD *)&v30 + 1);
      v13 = *((_QWORD *)&v30 + 1) + 24 * v11;
      v14 = (_WORD *)(v13 + 4);
      v15 = *(__int16 *)(v13 + 4);
      if (v15 >= v8)
        goto LABEL_11;
      v16 = (_QWORD *)(*((_QWORD *)&v30 + 1) + 24 * v11 + 8);
      if (v15 == -1)
        break;
      v17 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = *v16;
      *v16 = v17;
      v18 = v12 + 24 * v11;
      v19 = v4[4];
      v4[4] = *(_DWORD *)(v18 + 16);
      *(_DWORD *)(v18 + 16) = v19;
      *v14 = v8;
      v20 = *(_DWORD *)v13;
      *(_DWORD *)v13 = v7;
      v8 = v15;
      LODWORD(v7) = v20;
LABEL_11:
      ++v8;
    }
    *(_OWORD *)v16 = *(_OWORD *)(v4 + 2);
    *(_DWORD *)v13 = v7;
    *v14 = v8;
LABEL_13:
    v4 += 6;
  }
  while (v4 != v5);
  v21 = *(int64x2_t *)(a1 + 1);
  v3 = v31;
LABEL_16:
  v22 = v28;
  v28 = *a1;
  *a1 = v22;
  v23 = v29;
  v29 = v21;
  *(int64x2_t *)(a1 + 1) = v23;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v30;
  v25 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  v30 = v24;
  v31 = v25;
  v26 = v32;
  v32 = a1[7];
  a1[7] = v26;
  v23.i64[0] = v33;
  v33 = a1[8];
  a1[8] = v23.i64[0];
  LOBYTE(v26) = v34;
  v34 = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = v26;
  LOBYTE(v26) = v35;
  v35 = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = v26;
  v36 = &v29;
  sub_20C15B524((void ***)&v36);
  return result;
}

uint64_t sub_20C15B820(tbb::internal *this, void *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, a2);
}

uint64_t sub_20C15B880(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  tbb::spin_rw_mutex_v3 *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  unint64_t *v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  tbb::spin_rw_mutex_v3 *v21;
  char v22;
  uint64_t v23;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v6 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3
    && (v8 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(_QWORD *)a1 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(_QWORD *)(v9 + 16) = 0;
      if (a3)
      {
        v10 = HIDWORD(a3);
        if (!HIDWORD(a3))
          v10 = a3;
        v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        v12 = v10 >= 4;
        if (v10 >= 4)
          LODWORD(v10) = v10 >> 2;
        v13 = (v10 >> 1) & 1;
        if (v12)
          v11 += 2;
        v14 = v13 + v11;
      }
      else
      {
        v14 = -1;
      }
      v17 = ~(-1 << v14);
      sub_20C15B880(&v21, a2, v17 & a3);
      v18 = (_QWORD *)(v23 + 16);
      v19 = *(_QWORD **)(v23 + 16);
      __dmb(0xBu);
      if ((unint64_t)v19 >= 0x40)
      {
        v20 = (2 * v17) | 1;
        while ((((v19[2] >> 3) ^ v19[2]) & v20) == a3)
        {
          if (v22 || (v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v21) & 1) != 0))
          {
            *v18 = *v19;
            *v19 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = v19;
LABEL_29:
            v19 = (_QWORD *)*v18;
            if (*v18 <= 0x3FuLL)
              goto LABEL_32;
          }
          else
          {
            v18 = (_QWORD *)(v23 + 16);
            v19 = *(_QWORD **)(v23 + 16);
            __dmb(0xBu);
            if ((unint64_t)v19 < 0x40)
              goto LABEL_32;
          }
        }
        v18 = v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_20BEBF29C(&v21);
    }
  }
  else
  {
    v15 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_20C15BA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  sub_20BEBF29C(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C15BA90(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  *result = a2;
  v2 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v3 = 1 << (8 * (a2 & 3));
  v4 = ~(255 << (8 * (a2 & 3)));
LABEL_2:
  v5 = *v2 & v4;
  do
  {
    while (1)
    {
      v6 = __ldaxr(v2);
      if (v6 == v5)
        break;
      __clrex();
      if (*v2 != v5)
      {
        result = (_QWORD *)sched_yield();
        goto LABEL_2;
      }
    }
  }
  while (__stlxr(v5 | v3, v2));
  return result;
}

uint64_t *sub_20C15BB0C(uint64_t **a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x30uLL);
    v13 = *a4;
    v12[4] = *a3;
    v12[5] = v13;
    *a4 = 0;
    sub_20BDDE1B4(a1, (uint64_t)v10, v8, v12);
    return v12;
  }
  return (uint64_t *)v10;
}

std::string *sub_20C15BBD0(std::string *this, const std::string::value_type *a2)
{
  std::string::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  this[1].__r_.__value_.__r.__words[0] = size;
  std::string::append(this, ".");
  return sub_20C15BC20(this, a2);
}

std::string *sub_20C15BC20(std::string *a1, const std::string::value_type *a2)
{
  std::string *v2;
  std::string *result;
  std::string::size_type size;
  std::string::pointer data;
  std::string *v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  unint64_t v11;
  char v12;

  v2 = a1;
  result = std::string::append(a1, a2);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    data = v2[1].__r_.__value_.__l.__data_;
    v6 = v2;
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    size = v6->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    data = v2[1].__r_.__value_.__l.__data_;
  }
  v7 = (unint64_t)&data[(_QWORD)v2];
  v8 = (char *)v2 + size;
  v9 = (char *)v2 + size - 1;
  if ((char *)v7 != v8 && (unint64_t)v9 > v7)
  {
    v11 = v7 + 1;
    do
    {
      v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
  return result;
}

uint64_t sub_20C15BC98(_DWORD *a1, uint64_t a2)
{
  uint64_t Ptr;
  uint64_t v5;

  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1 + 1);
  return sub_20C155EE0(Ptr, v5, a2);
}

uint64_t sub_20C15BCDC(uint64_t result, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v10;
  unint64_t v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;

  v3 = result;
  switch(*(_BYTE *)(result + 14))
  {
    case 1:
      v5 = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        v6 = (char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0)
          v6 = *(char **)v6;
      }
      else
      {
        v6 = "";
      }
      *a2 = qword_25473C568;
      goto LABEL_31;
    case 2:
      v7 = *(_QWORD **)(result + 16);
      v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = (char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0)
          v9 = *(char **)v9;
      }
      else
      {
        v9 = "";
      }
      v16 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        v17 = (char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0)
          v17 = *(char **)v17;
      }
      else
      {
        v17 = "";
      }
      *a2 = qword_25473C568;
      result = sub_20C15BFD8((uint64_t)a2, "{");
      if (!(_DWORD)result)
        return result;
      result = sub_20C15BFD8((uint64_t)a2, v9);
      if (!(_DWORD)result)
        return result;
      result = sub_20C15BFD8((uint64_t)a2, "=");
      if (!(_DWORD)result)
        return result;
      result = sub_20C15BFD8((uint64_t)a2, v17);
      if (!(_DWORD)result)
        return result;
      v6 = "}";
LABEL_31:
      result = sub_20C15BF74(a2, v6);
      break;
    case 3:
    case 6:
    case 7:
      v4 = *(_QWORD *)(result + 16);
      goto LABEL_18;
    case 4:
      *a2 = qword_25473C568;
      sub_20C15BF74(a2, "]");
      sub_20C15C0A0((_DWORD *)(v3 + 16), (uint64_t)a2);
      *a2 = qword_25473C568;
      v6 = "[";
      goto LABEL_31;
    case 5:
      *a2 = qword_25473C568;
      sub_20C15BF74(a2, "]");
      sub_20C15C0A0((_DWORD *)(v3 + 16), (uint64_t)a2);
      *a2 = qword_25473C568;
      sub_20C15BF74(a2, "[");
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v10)
        v10 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v11 = *((_QWORD *)v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        v12 = (char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v12 = *(char **)v12;
      }
      else
      {
        v12 = "";
      }
      *a2 = qword_25473C568;
      sub_20C15BF74(a2, v12);
      *a2 = qword_25473C568;
      v6 = ".";
      goto LABEL_31;
    case 8:
      v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v13)
        v13 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      v4 = *((_QWORD *)v13 + 8);
LABEL_18:
      v14 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        v15 = (char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0)
          v15 = *(char **)v15;
      }
      else
      {
        v15 = "";
      }
      result = sub_20C15C050(a2, v15);
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_20C15BF74(unint64_t *a1, char *a2)
{
  _BOOL8 result;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v7;
  char v8;

  result = sub_20C15BFD8((uint64_t)a1, a2);
  if (result)
  {
    v4 = *a1;
    v5 = (_BYTE *)(qword_25473C568 - 1);
    if (*a1 != qword_25473C568 && (unint64_t)v5 > v4)
    {
      v7 = v4 + 1;
      do
      {
        v8 = *(_BYTE *)(v7 - 1);
        *(_BYTE *)(v7 - 1) = *v5;
        *v5-- = v8;
      }
      while (v7++ < (unint64_t)v5);
    }
  }
  return result;
}

BOOL sub_20C15BFD8(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = qword_25473C568 + strlen(__s);
  if (v4 >= (unint64_t)&dword_254987CD8)
  {
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    strcpy((char *)qword_25473C568, __s);
    qword_25473C568 = v4;
  }
  return v4 < (unint64_t)&dword_254987CD8;
}

BOOL sub_20C15C050(unint64_t *a1, char *a2)
{
  _BOOL8 result;

  *a1 = qword_25473C568;
  result = sub_20C15BFD8((uint64_t)a1, ".");
  if (result)
    return sub_20C15BF74(a1, a2);
  return result;
}

uint64_t sub_20C15C0A0(_DWORD *a1, uint64_t a2)
{
  uint64_t Ptr;
  uint64_t v5;

  Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1 + 1);
  return sub_20C156114(Ptr, v5, a2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_VisitPathTableInParallel(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v12;
  _QWORD v13[3];
  pxrInternal__aapl__pxrReserved__ *v14;
  tbb::task_group_context *v15;
  _DWORD v16[32];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13[2] = a4;
  v14 = a1;
  v13[0] = &v14;
  v13[1] = a3;
  if (a2)
  {
    v6 = a2;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v16[0] = 0;
      v17 = 65539;
      v18 = 55;
      tbb::task_group_context::init((uint64_t)v16, v7, v8, v9);
      v15 = (tbb::task_group_context *)v16;
      v10 = tbb::internal::allocate_root_with_context_proxy::allocate(&v15, 0x38uLL);
      *(_BYTE *)(v10 - 11) = 1;
      *(_QWORD *)v10 = &off_24C529820;
      *(_QWORD *)(v10 + 8) = v6;
      *(_OWORD *)(v10 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v10 + 32) = v13;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v10);
      *(_DWORD *)(v10 + 48) = 0;
      *(_BYTE *)(v10 + 52) = 5;
      *(_QWORD *)(v10 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v10 - 40) + 16))(*(_QWORD *)(v10 - 40), v10, v10 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v16);
    }
    else
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)((char *)v14 + v12))
          a4(a3);
        v12 += 8;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_20C15C22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  tbb::task *v17;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a13, v17);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15C274(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C529820;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C529820;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C15C614((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C15C614((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

uint64_t sub_20C15C614(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 != v2)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = 8 * v2;
    do
    {
      if (*(_QWORD *)(**(_QWORD **)v4 + v5))
        result = (*(uint64_t (**)(_QWORD))(v4 + 16))(*(_QWORD *)(v4 + 8));
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

__n128 sub_20C15C670(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  char v6;
  __n128 *v7;
  __n128 *v8;
  unint64_t *v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  __n128 result;
  uint64_t v14;
  unint64_t v15;

  v2 = a1[2];
  if (v2 <= 7)
  {
    v3 = a1 + 16;
    v4 = *a1;
    v5 = a1[v4 + 3];
    do
    {
      if (a2 <= v5)
        break;
      v6 = v4;
      v7 = (__n128 *)&v3[24 * v4];
      v8 = v7 + 1;
      v9 = &v7->n128_u64[1];
      if (v7[1].n128_u64[0] >= v7->n128_u64[0] - v7->n128_u64[1])
        break;
      v4 = (unint64_t)&a1[v4];
      v10 = (v6 + 1) & 7;
      v11 = (__n128 *)&v3[24 * v10];
      v12 = v7[1].n128_u64[0];
      result = *v7;
      *v11 = *v7;
      v11[1].n128_u64[0] = v12;
      v14 = v11->n128_i64[1];
      v7->n128_u64[0] = v11->n128_u64[0];
      *a1 = v10;
      v15 = v14 + ((v11->n128_u64[0] - v14) >> 1);
      v11->n128_u64[0] = v15;
      *v9 = v15;
      v8->n128_u64[0] = v12;
      v5 = *(_BYTE *)(v4 + 3) + 1;
      *(_BYTE *)(v4 + 3) = v5;
      a1[v10 + 3] = v5;
      a1[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

uint64_t *sub_20C15C734()
{
  sub_20C15CA7C();
  return sub_20C15CB7C();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(uint64_t a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  void *v8[2];
  uint64_t v9;
  void *__p;
  char v11;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v8, a2);
  if (SHIBYTE(v9) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a1, v8[0], (unint64_t)v8[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 16) = v9;
  }
  if (v11 < 0)
    operator delete(__p);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  sub_20BFD6E54((_DWORD *)(a1 + 24), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 28), a3 + 1);
  *(_OWORD *)(a1 + 32) = *a4;
  return a1;
}

void sub_20C15C7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double *v6;
  unsigned __int8 *v8;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = (double *)a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*((_QWORD *)a1 + 3) == *((_QWORD *)v6 + 3))
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)a1 + 4, v6 + 4);
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(const void **a1, unsigned __int8 *a2)
{
  double *v3;
  int v4;
  uint64_t v5;
  size_t v6;
  const void **v7;
  size_t v8;
  size_t v9;
  unsigned __int8 *v10;
  size_t v11;
  int v12;
  BOOL v13;
  double *v15;

  v3 = (double *)a1;
  v4 = (char)a2[23];
  v5 = *((unsigned __int8 *)a1 + 23);
  v7 = (const void **)*a1;
  v6 = (size_t)a1[1];
  if ((v5 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)a1 + 23);
  else
    v8 = (size_t)a1[1];
  if ((v5 & 0x80u) != 0)
    a1 = (const void **)*a1;
  if (v4 >= 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  if (v4 >= 0)
    v10 = a2;
  else
    v10 = *(unsigned __int8 **)a2;
  if (v9 >= v8)
    v11 = v8;
  else
    v11 = v9;
  v12 = memcmp(a1, v10, v11);
  v13 = v8 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  if (v8 != v9)
    return 0;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(v7, v10, v6))
      return 0;
  }
  else if ((_DWORD)v5)
  {
    v15 = v3;
    while (*(unsigned __int8 *)v15 == *v10)
    {
      v15 = (double *)((char *)v15 + 1);
      ++v10;
      if (!--v5)
        goto LABEL_27;
    }
    return 0;
  }
LABEL_27:
  if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24)) & 1) != 0)return 1;
  if (*((_QWORD *)v3 + 3) == *((_QWORD *)a2 + 3))
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator<(v3 + 4, (double *)a2 + 4);
  return 0;
}

uint64_t *sub_20C15CA7C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529858, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529858, (char *)0x30, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C15CB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C15CB7C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529868, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529868, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C15CC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(_DWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(int *result, int a2, int a3)
{
  *result = a2 | (a3 << 8);
  return result;
}

{
  *result = a2 | (a3 << 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(_DWORD *a1)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[*a1]
       + 24 * (*a1 >> 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (result)
  {
    v1 = 1;
    while (1)
    {
      v2 = result
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v1];
      if (v2 >> 27 < 3)
        break;
      if (++v1 == 257)
        return 0;
    }
    return v1 | ((v2 / 0x18) << 8);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(_DWORD *a1)
{
  return *a1 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator!=(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator<(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(int *result, int *a2)
{
  int v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(_DWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(int *result, int a2, int a3)
{
  *result = a2 | (a3 << 8);
  return result;
}

{
  *result = a2 | (a3 << 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(_DWORD *a1)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[*a1]
       + 24 * (*a1 >> 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (result)
  {
    v1 = 1;
    while (1)
    {
      v2 = result
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v1];
      if (v2 >> 27 < 3)
        break;
      if (++v1 == 257)
        return 0;
    }
    return v1 | ((v2 / 0x18) << 8);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(_DWORD *a1)
{
  return *a1 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator!=(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator<(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(int *result, int *a2)
{
  int v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_PoolCommitRange(pxrInternal__aapl__pxrReserved__ *this, char *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::ArchCommitVirtualMemoryRange((unint64_t)this, (void *)(a2 - (char *)this));
}

void sub_20C15CEA0()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfPredicateExpression::FnCall::BareCall");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529878, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::FnCall::ColonCall");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529878, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::FnCall::ParenCall");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529878, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::Call");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529888, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::Not");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529888, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::ImpliedAnd");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529888, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::And");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529888, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateExpression::Or");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529888, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C15D140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeNot(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v4 = (_QWORD *)(a2 + 16);
  sub_20C14D5BC(a2, (__n128 *)a1);
  sub_20C147ABC((void **)(a2 + 24));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v5 >= *v4)
  {
    v7 = *(_DWORD **)a2;
    v8 = ((uint64_t)v5 - *(_QWORD *)a2) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_20BDDF694();
    v10 = *v4 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_20BDE1330((uint64_t)v4, v11);
      v7 = *(_DWORD **)a2;
      v5 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = 1;
    v6 = v13 + 4;
    while (v5 != v7)
    {
      v15 = *--v5;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = 1;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
}

void sub_20C15D2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C14652C(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeOp@<X0>(int a1@<W0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  __int128 v20;

  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  sub_20C14D5BC(a4, a3);
  sub_20BE857FC((void **)a4, ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2) + ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) + 1);
  sub_20C125B2C(a4, *(_QWORD *)(a4 + 8), *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_DWORD **)(a4 + 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_DWORD **)a4;
    v12 = ((uint64_t)v9 - *(_QWORD *)a4) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_20BDDF694();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_20BDE1330(a4 + 16, v15);
      v11 = *(_DWORD **)a4;
      v9 = *(_DWORD **)(a4 + 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = a1;
    v10 = v17 + 4;
    while (v9 != v11)
    {
      v19 = *--v9;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = v10;
    *(_QWORD *)(a4 + 16) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v9 = a1;
    v10 = v9 + 1;
  }
  *(_QWORD *)(a4 + 8) = v10;
  sub_20C147ABC((void **)(a4 + 24));
  *(_QWORD *)(a4 + 24) = *(_QWORD *)(a2 + 24);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a4 + 32) = v20;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return sub_20C15EF18((uint64_t *)(a4 + 24), v20, a3[1].n128_i64[1], a3[2].n128_i64[0], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3[2].n128_u64[0] - a3[1].n128_u64[1]) >> 3));
}

void sub_20C15D45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C14652C(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeCall@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  unint64_t v11;
  __int128 v12;
  uint64_t result;

  a2[8] = 0;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  v4 = (char *)sub_20BDE1330((uint64_t)(a2 + 2), 1uLL);
  v5 = *a2;
  v6 = a2[1];
  v8 = &v4[4 * v7];
  *(_DWORD *)v4 = 0;
  v9 = v4 + 4;
  while (v6 != v5)
  {
    v10 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *((_DWORD *)v4 - 1) = v10;
    v4 -= 4;
  }
  *a2 = v4;
  a2[1] = v9;
  a2[2] = v8;
  if (v5)
    operator delete(v5);
  a2[1] = v9;
  v11 = (unint64_t)a2[4];
  if (v11 >= (unint64_t)a2[5])
  {
    result = sub_20C15F658((uint64_t *)a2 + 3, a1);
  }
  else
  {
    *(_DWORD *)v11 = *(_DWORD *)a1;
    v12 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(v11 + 8) = v12;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    result = v11 + 56;
  }
  a2[4] = (char *)result;
  return result;
}

void sub_20C15D560(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C14652C(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::WalkWithOpStack(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, char **), uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;

  v5 = a1[1];
  if (*a1 != v5)
  {
    v10 = a1[3];
    v27 = *(unsigned int *)(v5 - 4);
    sub_20C15F80C(&v28, 1uLL, &v27);
    v11 = v28;
    if (v28 == v29)
    {
      if (!v28)
        return;
    }
    else
    {
      v11 = v29;
      do
      {
        v12 = *((_DWORD *)v11 - 2);
        if (v12)
        {
          a3(a2, &v28);
          v13 = *((_DWORD *)v11 - 1) + 1;
          *((_DWORD *)v11 - 1) = v13;
          if (v12 == 1)
            v14 = 2;
          else
            v14 = 3;
        }
        else
        {
          a5(a4, v10);
          v14 = 0;
          v10 += 56;
          v13 = *((_DWORD *)v11 - 1);
        }
        if (v13 == v14)
        {
          v11 = v29 - 8;
        }
        else
        {
          v15 = v29;
          if (v29 >= v30)
          {
            v16 = (v29 - v28) >> 3;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              sub_20BDDF694();
            v18 = v30 - v28;
            if ((v30 - v28) >> 2 > v17)
              v17 = v18 >> 2;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            v20 = (char *)sub_20BDDF6A8((uint64_t)&v30, v19);
            v22 = &v20[8 * v16];
            *(_DWORD *)v22 = *(_DWORD *)(v5 - 8);
            *((_DWORD *)v22 + 1) = 0;
            v24 = v28;
            v23 = v29;
            v25 = v22;
            if (v29 != v28)
            {
              do
              {
                v26 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v25 - 1) = v26;
                v25 -= 8;
              }
              while (v23 != v24);
              v23 = v28;
            }
            v11 = v22 + 8;
            v28 = v25;
            v29 = v22 + 8;
            v30 = &v20[8 * v21];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_QWORD *)v29 = *(unsigned int *)(v5 - 8);
            v11 = v15 + 8;
          }
          v5 -= 4;
        }
        v29 = v11;
      }
      while (v28 != v11);
    }
    v29 = v11;
    operator delete(v11);
  }
}

void sub_20C15D744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::Walk(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  _QWORD *v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v5 = v6;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::WalkWithOpStack(a1, (uint64_t)&v5, (void (*)(uint64_t, char **))sub_20C15DF94, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::GetText(pxrInternal__aapl__pxrReserved__::SdfPredicateExpression *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD v3[3];
  void *__p;
  void *v5;
  uint64_t v6;
  char v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    __p = 0;
    v5 = 0;
    v6 = 0;
    v3[0] = &v7;
    v3[1] = &__p;
    v3[2] = a2;
    v2 = a2;
    pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::WalkWithOpStack(this, (uint64_t)v3, (void (*)(uint64_t, char **))sub_20C15DFA8, (uint64_t)&v2, (void (*)(uint64_t, uint64_t))sub_20C15E110);
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C15D820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;

  if (__p)
    operator delete(__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPredicateExpression *this)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::GetText(this, __p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C15D8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::SdfPredicateExpression(uint64_t a1, __int128 *a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  char *v8;
  std::string *p_dst;
  char *v10;
  uint64_t v11;
  void *exception;
  char *v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  std::string __dst;
  uint64_t v19;
  void *__p;
  char v21;
  std::string v22;
  void *v23;
  char v24;
  int v25;
  char v26;
  void *v27;
  char v28;
  uint64_t v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = atomic_load((unsigned __int8 *)&qword_254987DA8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254987DA8))
  {
    qword_254987DA0 = sub_20C15F88C();
    __cxa_guard_release(&qword_254987DA8);
  }
  v7 = qword_254987DA0;
  if (qword_254987DA0)
  {
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/predicateExpressionParser.h";
    v22.__r_.__value_.__l.__size_ = (std::string::size_type)"Analyze";
    v22.__r_.__value_.__r.__words[2] = 408;
    v23 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Analyze() [Grammar = pxrInternal__aapl__pxrReser"
          "ved__::(anonymous namespace)::PredExpr]";
    v24 = 0;
    v25 = 4;
    sub_20BDDC0E4(&v31, "Analyze");
    sub_20BDDC0E4(&v30, "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Analyze() [Grammar = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::PredExpr]");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)&v31, &v30, &__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v22, (pxrInternal__aapl__pxrReserved__ *)"%zu issues found in '%s'", v8, v7, p_dst);
  }
  sub_20C15E66C((uint64_t)&v22);
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      v10 = *(char **)a3;
    else
      v10 = "<input>";
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v10 = (char *)a3;
  }
  else
  {
    v10 = "<input>";
  }
  v17 = v10;
  sub_20C14EFA4((unsigned __int8 *)&__dst, a2, &v17);
  if (!sub_20C17FC80((uint64_t)&__dst, &v22) || (sub_20C01EACC((uint64_t)&__dst) & 1) == 0 && v11)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v14 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii4eolfEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v14)
    {
      sub_20BDDC0E4(&v30, v14);
      free(v14);
    }
    else
    {
      sub_20BDDC0E4(&v30, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii4eolfEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    v15 = std::string::insert(&v30, 0, "parse error matching ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v32 = v15->__r_.__value_.__r.__words[2];
    v31 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_20C01ADA0((uint64_t)exception, (uint64_t)&v31, (uint64_t)&__dst);
    __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
  }
  sub_20C019D24((uint64_t)&__dst);
  sub_20C15DE84((uint64_t *)&v22, (uint64_t)&__dst);
  sub_20C14D540(a1, (uint64_t)&__dst);
  if (v21 < 0)
    operator delete(__p);
  *(_QWORD *)&v31 = &v19;
  sub_20C00BE5C((void ***)&v31);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  sub_20C00BF24((void ***)&__dst);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v23);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  sub_20C15EA74((void ***)&__dst);
  return a1;
}

void sub_20C15DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void *__pa, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::string *a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  __cxa_guard_abort(&qword_254987DA8);
  if (*(char *)(v21 + 71) < 0)
    operator delete(*a14);
  *(_QWORD *)(v22 - 120) = v21 + 24;
  sub_20C00BE5C((void ***)(v22 - 120));
  v24 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_20C15DD00()
{
  JUMPOUT(0x20C15DD4CLL);
}

void sub_20C15DD24()
{
  JUMPOUT(0x20C15DD54);
}

void sub_20C15DD34()
{
  JUMPOUT(0x20C15DD3CLL);
}

void sub_20C15DE3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20C15DCC4);
}

void sub_20C15DE84(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  sub_20C15EAF8((uint64_t *)(a1[1] - 48), a2);
  v4 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      v3 -= 48;
      sub_20C15E9BC((uint64_t)(a1 + 2), v3);
    }
    while (v3 != v4);
  }
  a1[1] = v4;
  v6 = a1[9];
  for (i = a1[10]; i != v6; sub_20C00BFA8((uint64_t)(a1 + 11), i))
    i -= 40;
  a1[10] = v6;
  if (*((char *)a1 + 47) < 0)
  {
    *(_BYTE *)a1[3] = 0;
    a1[4] = 0;
  }
  else
  {
    *((_BYTE *)a1 + 24) = 0;
    *((_BYTE *)a1 + 47) = 0;
  }
}

uint64_t sub_20C15DF2C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 72);
  sub_20C00BF24(&v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v3 = (void **)a1;
  sub_20C15EA74(&v3);
  return a1;
}

uint64_t sub_20C15DF94(_QWORD **a1, uint64_t a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))(*a1)[1])(**a1, *(unsigned int *)(*(_QWORD *)(a2 + 8) - 8), *(unsigned int *)(*(_QWORD *)(a2 + 8) - 4));
}

void sub_20C15DFA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  int v13;

  v3 = *a2;
  v4 = a2[1];
  v6 = *(_DWORD *)(v4 - 8);
  v5 = *(_DWORD *)(v4 - 4);
  v7 = v4 - *a2;
  if ((unint64_t)v7 <= 8)
  {
    v10 = 0;
    v11 = v5 == 0;
  }
  else
  {
    v8 = (v7 >> 3) - 2;
    v9 = *(_DWORD *)(v3 + 8 * v8);
    if (v9 >= v6)
    {
      v13 = *(_DWORD *)(v3 + 8 * v8 + 4);
      v10 = v9 == v6 && v13 == 2;
    }
    else
    {
      v10 = 1;
    }
    v11 = v5 == 0;
    if (v10 && !v5)
    {
      std::string::push_back(*(std::string **)(a1 + 16), 40);
      if (v6 != 1)
        return;
      v10 = 1;
      goto LABEL_27;
    }
  }
  if (v6 != 1)
  {
    if (v5 == 1)
    {
      switch(v6)
      {
        case 4:
          std::string::append(*(std::string **)(a1 + 16), " or ");
          break;
        case 3:
          std::string::append(*(std::string **)(a1 + 16), " and ");
          break;
        case 2:
          std::string::append(*(std::string **)(a1 + 16), " ");
          break;
        default:
          std::string::append(*(std::string **)(a1 + 16), "<unknown>");
          break;
      }
    }
    else if (v5 == 2 && v10)
    {
      goto LABEL_29;
    }
    return;
  }
  if (!v11)
  {
    if (v5 == 1 && v10)
      goto LABEL_29;
    return;
  }
LABEL_27:
  std::string::append(*(std::string **)(a1 + 16), "not ");
  if (v10 && v5 == 1)
LABEL_29:
    std::string::push_back(*(std::string **)(a1 + 16), 41);
}

void sub_20C15E110(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  std::string::size_type v17;
  __int128 v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  const char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  std::string::size_type v38;
  __int128 v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string **v43;
  std::string v44;
  std::string __p;
  std::string *v46;
  std::string *v47;
  unint64_t v48;
  std::string v49;
  char *v50;
  unint64_t *v51;

  v4 = *a1;
  v5 = *(unsigned __int8 *)(a2 + 31);
  v6 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v7 = (const std::string::value_type *)(a2 + 8);
  else
    v7 = *(const std::string::value_type **)(a2 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  std::string::append(v4, v7, v8);
  if (*(_DWORD *)a2 == 2)
  {
    v43 = a1;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v24 = *(_QWORD *)(a2 + 32);
    for (i = *(_QWORD *)(a2 + 40); v24 != i; v24 += 40)
    {
      if (*(char *)(v24 + 23) < 0)
      {
        if (*(_QWORD *)(v24 + 8))
        {
          v27 = *(const char **)v24;
          v26 = 1;
        }
        else
        {
          v26 = 0;
          v27 = "";
        }
      }
      else
      {
        v26 = *(unsigned __int8 *)(v24 + 23);
        if (*(_BYTE *)(v24 + 23))
          v27 = (const char *)v24;
        else
          v27 = "";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)(v24 + 24), &v44);
      if (v26)
        v30 = "=";
      else
        v30 = "";
      v31 = &v44;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s%s", v28, v29, v27, v30, v31);
      v32 = v47;
      if ((unint64_t)v47 >= v48)
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3);
        v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        if (0x5555555555555556 * ((uint64_t)(v48 - (_QWORD)v46) >> 3) > v35)
          v35 = 0x5555555555555556 * ((uint64_t)(v48 - (_QWORD)v46) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v46) >> 3) >= 0x555555555555555)
          v36 = 0xAAAAAAAAAAAAAAALL;
        else
          v36 = v35;
        v51 = &v48;
        if (v36)
          v37 = (char *)sub_20BDE4FF4((uint64_t)&v48, v36);
        else
          v37 = 0;
        v38 = (std::string::size_type)&v37[24 * v34];
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v49.__r_.__value_.__l.__size_ = v38;
        v50 = &v37[24 * v36];
        v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v38 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v38 = v39;
        memset(&__p, 0, sizeof(__p));
        v49.__r_.__value_.__r.__words[2] = v38 + 24;
        sub_20BDF34C0((uint64_t *)&v46, &v49);
        v40 = v47;
        sub_20BDF3648((uint64_t)&v49);
        v47 = v40;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
        memset(&__p, 0, sizeof(__p));
        v47 = v32 + 1;
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
    }
    std::string::append(*v43, "(");
    if (v46 != v47)
    {
      pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", &v46, &v49);
      v41 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v49
          : (std::string *)v49.__r_.__value_.__r.__words[0];
      v42 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v49.__r_.__value_.__r.__words[2])
          : v49.__r_.__value_.__l.__size_;
      std::string::append(*v43, (const std::string::value_type *)v41, v42);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    std::string::append(*v43, ")");
  }
  else
  {
    if (*(_DWORD *)a2 != 1)
      return;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    if (v9 != v10)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)(v9 + 24), &__p);
        v11 = v47;
        if ((unint64_t)v47 >= v48)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          if (0x5555555555555556 * ((uint64_t)(v48 - (_QWORD)v46) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(v48 - (_QWORD)v46) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v46) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v51 = &v48;
          if (v15)
            v16 = (char *)sub_20BDE4FF4((uint64_t)&v48, v15);
          else
            v16 = 0;
          v17 = (std::string::size_type)&v16[24 * v13];
          v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
          v49.__r_.__value_.__l.__size_ = v17;
          v50 = &v16[24 * v15];
          v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v17 = v18;
          memset(&__p, 0, sizeof(__p));
          v49.__r_.__value_.__r.__words[2] = v17 + 24;
          sub_20BDF34C0((uint64_t *)&v46, &v49);
          v19 = v47;
          sub_20BDF3648((uint64_t)&v49);
          v47 = v19;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
          v47 = v11 + 1;
        }
        v9 += 40;
      }
      while (v9 != v10);
      if (v46 != v47)
      {
        pxrInternal__aapl__pxrReserved__::TfStringJoin(",", &v46, &__p);
        v20 = std::string::insert(&__p, 0, ":");
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v49;
        else
          v22 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        else
          size = v49.__r_.__value_.__l.__size_;
        std::string::append(*a1, (const std::string::value_type *)v22, size);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_20BDE5038((void ***)&v49);
}

void sub_20C15E5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  a20 = &a26;
  sub_20BDE5038((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15E66C(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20C15E6F0((uint64_t *)a1);
  return a1;
}

void sub_20C15E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 72);
  sub_20C00BF24(&a10);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*(void **)(v10 + 48));
  if (*(char *)(v10 + 47) < 0)
    operator delete(*(void **)(v10 + 24));
  a10 = (void **)v10;
  sub_20C15EA74(&a10);
  _Unwind_Resume(a1);
}

void **sub_20C15E6F0(uint64_t *a1)
{
  void **result;
  unint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  v3 = v4;
  v5 = *(result - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
    v8 = v7 + 1;
    if (v7 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    v13[4] = result;
    if (v10)
      v11 = (char *)sub_20BE6D0B4((uint64_t)result, v10);
    else
      v11 = 0;
    v12 = &v11[48 * v7];
    v13[0] = v11;
    v13[1] = v12;
    v13[3] = &v11[48 * v10];
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    v13[2] = v12 + 48;
    sub_20C15E804(a1, v13);
    v6 = (_OWORD *)a1[1];
    result = sub_20C15EA00(v13);
  }
  else
  {
    v5[1] = 0u;
    v5[2] = 0u;
    *v5 = 0u;
    v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_20C15E7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C15EA00((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15E804(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C15E878((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C15E878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C15E938((uint64_t)v11);
  return v9;
}

uint64_t sub_20C15E938(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C15E96C((uint64_t *)a1);
  return a1;
}

void sub_20C15E96C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C15E9BC(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_20C15E9BC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 24);
  sub_20C00BD84(&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void **sub_20C15EA00(void **a1)
{
  sub_20C15EA30(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C15EA30(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_20C15E9BC(v4, i - 48);
  }
}

void sub_20C15EA74(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20C15E9BC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C15EAF8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  __int128 v7;
  uint64_t j;
  uint64_t v9;

  v4 = *a1;
  for (i = a1[1]; v4 != i; i = a1[1])
  {
    sub_20C15EBB0(a1);
    v4 = *a1;
  }
  v6 = a1[4];
  *(_OWORD *)a2 = *(_OWORD *)(v6 - 72);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 - 56);
  *(_QWORD *)(v6 - 72) = 0;
  *(_QWORD *)(v6 - 64) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v6 - 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v6 - 32);
  *(_QWORD *)(v6 - 56) = 0;
  *(_QWORD *)(v6 - 48) = 0;
  *(_QWORD *)(v6 - 40) = 0;
  *(_QWORD *)(v6 - 32) = 0;
  v7 = *(_OWORD *)(v6 - 24);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v6 - 8);
  *(_OWORD *)(a2 + 48) = v7;
  *(_QWORD *)(v6 - 24) = 0;
  *(_QWORD *)(v6 - 16) = 0;
  *(_QWORD *)(v6 - 8) = 0;
  v9 = a1[3];
  for (j = a1[4]; j != v9; sub_20C00BE08((uint64_t)(a1 + 5), j))
    j -= 72;
  a1[4] = v9;
}

void sub_20C15EBB0(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void **v37;

  v2 = a1[1];
  v3 = *(_DWORD *)(v2 - 4);
  a1[1] = v2 - 4;
  v4 = a1 + 3;
  v5 = a1[4];
  v31 = *(__n128 *)(v5 - 72);
  v32 = *(_QWORD *)(v5 - 56);
  *(_QWORD *)(v5 - 72) = 0;
  *(_QWORD *)(v5 - 64) = 0;
  *(_QWORD *)(v5 - 56) = 0;
  v33 = *(_OWORD *)(v5 - 48);
  v34 = *(_QWORD *)(v5 - 32);
  *(_QWORD *)(v5 - 48) = 0;
  *(_QWORD *)(v5 - 40) = 0;
  *(_QWORD *)(v5 - 32) = 0;
  v6 = *(_OWORD *)(v5 - 24);
  v36 = *(_QWORD *)(v5 - 8);
  v35 = v6;
  *(_QWORD *)(v5 - 16) = 0;
  *(_QWORD *)(v5 - 8) = 0;
  *(_QWORD *)(v5 - 24) = 0;
  v7 = a1[4];
  v8 = (uint64_t)(a1 + 5);
  sub_20C00BE08((uint64_t)(a1 + 5), v7 - 72);
  a1[4] = v7 - 72;
  if (v3 == 1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeNot((uint64_t)&v31, (uint64_t)v25);
    v9 = a1[4];
    if (v9 >= a1[5])
    {
      v15 = sub_20C14F04C(v4, (uint64_t)v25);
      v16 = SHIBYTE(v30);
      a1[4] = v15;
      if (v16 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_OWORD *)v9 = *(_OWORD *)v25;
      *(_QWORD *)(v9 + 16) = v26;
      v25[0] = 0;
      v25[1] = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_OWORD *)(v9 + 24) = v27;
      *(_QWORD *)(v9 + 40) = v28;
      v26 = 0;
      v27 = 0uLL;
      v28 = 0;
      v10 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 64) = v30;
      *(_OWORD *)(v9 + 48) = v10;
      __p[1] = 0;
      v30 = 0;
      __p[0] = 0;
      a1[4] = v9 + 72;
    }
    v19[0] = &v27;
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)(v7 - 144);
    v26 = *(_QWORD *)(v7 - 128);
    *(_QWORD *)(v7 - 144) = 0;
    *(_QWORD *)(v7 - 136) = 0;
    *(_QWORD *)(v7 - 128) = 0;
    v27 = *(_OWORD *)(v7 - 120);
    v28 = *(_QWORD *)(v7 - 104);
    *(_QWORD *)(v7 - 120) = 0;
    *(_QWORD *)(v7 - 112) = 0;
    *(_QWORD *)(v7 - 104) = 0;
    v11 = *(_OWORD *)(v7 - 96);
    v30 = *(_QWORD *)(v7 - 80);
    *(_OWORD *)__p = v11;
    *(_QWORD *)(v7 - 88) = 0;
    *(_QWORD *)(v7 - 80) = 0;
    *(_QWORD *)(v7 - 96) = 0;
    v12 = a1[4] - 72;
    sub_20C00BE08(v8, v12);
    a1[4] = v12;
    pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeOp(v3, (uint64_t)v25, &v31, (uint64_t)v19);
    v13 = a1[4];
    if (v13 >= a1[5])
    {
      v17 = sub_20C14F04C(v4, (uint64_t)v19);
      v18 = SHIBYTE(v24);
      a1[4] = v17;
      if (v18 < 0)
        operator delete(v23[0]);
    }
    else
    {
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_OWORD *)v13 = *(_OWORD *)v19;
      *(_QWORD *)(v13 + 16) = v20;
      v19[0] = 0;
      v19[1] = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = v21;
      *(_QWORD *)(v13 + 40) = v22;
      v20 = 0;
      v21 = 0uLL;
      v22 = 0;
      v14 = *(_OWORD *)v23;
      *(_QWORD *)(v13 + 64) = v24;
      *(_OWORD *)(v13 + 48) = v14;
      v23[1] = 0;
      v24 = 0;
      v23[0] = 0;
      a1[4] = v13 + 72;
    }
    v37 = (void **)&v21;
    sub_20C00BE5C(&v37);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    v19[0] = &v27;
  }
  sub_20C00BE5C((void ***)v19);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  v25[0] = &v33;
  sub_20C00BE5C((void ***)v25);
  if (v31.n128_u64[0])
  {
    v31.n128_u64[1] = v31.n128_u64[0];
    operator delete((void *)v31.n128_u64[0]);
  }
}

void sub_20C15EE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_20C14652C((uint64_t)&a9);
  sub_20C14652C((uint64_t)&a19);
  sub_20C14652C(v19 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15EED0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_20C00BF24(&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20C15EF18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  void *v26[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = a1 + 2;
    v10 = v11;
    v12 = *(v9 - 1);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = a3 + 56 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_20C15F290((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1)
          return v5;
      }
      sub_20C15F144((uint64_t)a1, v5, v12, v5 + 56 * a5);
      sub_20C15F3FC((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492)
        sub_20BDDF694();
      v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v26[4] = v9;
      if (v18)
        v19 = (char *)sub_20BE16B34((uint64_t)v9, v18);
      else
        v19 = 0;
      v22 = &v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v26[3] = &v19[56 * v18];
      v23 = &v22[56 * a5];
      do
      {
        *(_DWORD *)v22 = *(_DWORD *)v7;
        v24 = *(_OWORD *)(v7 + 8);
        *((_QWORD *)v22 + 3) = *(_QWORD *)(v7 + 24);
        *(_OWORD *)(v22 + 8) = v24;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *((_QWORD *)v22 + 4) = 0;
        *((_QWORD *)v22 + 5) = 0;
        *((_QWORD *)v22 + 6) = 0;
        *((_OWORD *)v22 + 2) = *(_OWORD *)(v7 + 32);
        *((_QWORD *)v22 + 6) = *(_QWORD *)(v7 + 48);
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        v22 += 56;
        v7 += 56;
      }
      while (v22 != v23);
      v26[2] = v23;
      v5 = sub_20C15F1E0(a1, v26, v5);
      sub_20C15F5E4(v26);
    }
  }
  return v5;
}

void sub_20C15F124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C15F144(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      v10 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      v8 += 56;
      v9 += 56;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C15F33C((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_20C15F1E0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C15F4A0((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C15F290(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C15F290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)a2;
      v5 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v4 + 8) = v5;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v4 += 56;
      a2 += 56;
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  sub_20C00E0D0((uint64_t)v7);
  return v4;
}

uint64_t sub_20C15F33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  __int128 v11;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 56) = *(_DWORD *)(a3 + v7 - 56);
      v10 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0)
        operator delete(*v10);
      v11 = *(_OWORD *)(v8 - 48);
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(v8 - 32);
      *(_OWORD *)v10 = v11;
      *(_BYTE *)(v8 - 25) = 0;
      *(_BYTE *)(v8 - 48) = 0;
      sub_20C147D48((void **)(v9 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_20C15F3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      sub_20C147D48((void **)(a4 + 32));
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a4 + 48) = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      a4 += 56;
      v5 += 56;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C15F4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 56);
      a3 -= 56;
      *(_DWORD *)(v7 - 56) = v8;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 48) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 56;
      *((_QWORD *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C15F560((uint64_t)v12);
  return v10;
}

uint64_t sub_20C15F560(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C15F594((uint64_t *)a1);
  return a1;
}

void sub_20C15F594(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C00BEE0(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_20C15F5E4(void **a1)
{
  sub_20C15F614(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C15F614(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_20C00BEE0(v4, i - 56);
  }
}

uint64_t sub_20C15F658(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)sub_20BE16B34(v7, v9);
  v11 = &v10[56 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[56 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v13 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = v13;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v16[2] = v11 + 56;
  sub_20C15F798(a1, v16);
  v14 = a1[1];
  sub_20C15F5E4(v16);
  return v14;
}

void sub_20C15F784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C15F5E4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15F798(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C15F4A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20C15F80C(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C15F870(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C15F88C()
{
  uint64_t *v0;
  BOOL v1;
  uint64_t *v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  char v7[4];
  unsigned int v8;
  uint64_t *v9;
  _QWORD *v10[2];
  char **v11;
  char *v12[2];
  char **v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17[2];
  void *__p[2];
  char v19;
  uint64_t *v20;

  v7[0] = 1;
  v8 = 0;
  v9 = (uint64_t *)v10;
  v10[0] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v10[1] = 0;
  v11 = v12;
  v13 = &v14;
  v14 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15 = 0;
  v16 = v17;
  sub_20C15FA9C(&v9, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  v0 = v9;
  if (v9 != (uint64_t *)v10)
  {
    do
    {
      v20 = v0;
      v1 = sub_20C17F804((uint64_t)v7, (uint64_t *)&v20, 0);
      __p[0] = v0 + 4;
      *((_BYTE *)sub_20BEB938C((uint64_t **)&v16, (const void **)v0 + 4, (uint64_t)&unk_20CAC184C, (__int128 **)__p) + 56) = v1;
      sub_20BDECAB8((uint64_t)&v13, v14);
      v14 = 0;
      v15 = 0;
      v13 = &v14;
      v2 = (uint64_t *)v0[1];
      if (v2)
      {
        do
        {
          v3 = v2;
          v2 = (uint64_t *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          v3 = (uint64_t *)v0[2];
          v4 = *v3 == (_QWORD)v0;
          v0 = v3;
        }
        while (!v4);
      }
      v0 = v3;
    }
    while (v3 != (uint64_t *)v10);
  }
  v5 = v8;
  sub_20BDECAB8((uint64_t)&v16, v17[0]);
  sub_20BDECAB8((uint64_t)&v13, v14);
  sub_20BDECAB8((uint64_t)&v11, v12[0]);
  sub_20C17F7BC((uint64_t)&v9, v10[0]);
  return v5;
}

void sub_20C15FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_20BDECAB8(v23, a20);
  sub_20BDECAB8(v22, a17);
  sub_20BDECAB8(v21, a14);
  sub_20C17F7BC(v20, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C15FA4C(uint64_t a1)
{
  sub_20BDECAB8(a1 + 80, *(char **)(a1 + 88));
  sub_20BDECAB8(a1 + 56, *(char **)(a1 + 64));
  sub_20BDECAB8(a1 + 32, *(char **)(a1 + 40));
  sub_20C17F7BC(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_20C15FA9C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t *v22;
  char v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  void *v62[2];
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  void *v66[2];
  uint64_t v67;
  uint64_t v68;
  void *v69[2];
  _QWORD *v70;
  void *__p[2];
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77[2];

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v69, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v69, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v69;
  v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  LOBYTE(v73) = 2;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v67 = 0;
  v68 = 0;
  v66[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v64[0] = &v74;
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  v64[0] = &v66[1];
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  if (v8)
  {
    sub_20C160254(a1, (uint64_t)v64);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v74 = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v73 = &v18[24 * v17];
      v20 = *(_OWORD *)v64;
      *((_QWORD *)v19 + 2) = v65;
      *(_OWORD *)v19 = v20;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v72 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v64;
      *(_QWORD *)(v11 + 16) = v65;
      *(_OWORD *)v11 = v12;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4starINS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEEJS5_S6_EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_20BDDC0E4(v69, v21);
      free(v21);
    }
    else
    {
      sub_20BDDC0E4(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4starINS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEEJS5_S6_EEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 1;
    *(_OWORD *)__p = *(_OWORD *)v69;
    v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    LOBYTE(v73) = 1;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v67 = 0;
    v68 = 0;
    v66[1] = 0;
    v22 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v24 = v23;
    v77[0] = (void **)&v74;
    sub_20BDE5038(v77);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    v77[0] = &v66[1];
    sub_20BDE5038(v77);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
    if (v24)
    {
      sub_20C17CA00(a1, (uint64_t)v66);
      v25 = v22 + 8;
      v26 = v22[10];
      v27 = v22[9];
      if (v27 >= v26)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v74 = v22 + 10;
        if (v33)
          v34 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v33);
        else
          v34 = 0;
        v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        v73 = &v34[24 * v33];
        v36 = *(_OWORD *)v66;
        *((_QWORD *)v35 + 2) = v67;
        *(_OWORD *)v35 = v36;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v72 = v35 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v29 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v28 = *(_OWORD *)v66;
        *(_QWORD *)(v27 + 16) = v67;
        *(_OWORD *)v27 = v28;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_20C17D510(a1, (uint64_t)v69);
      v38 = v22[9];
      v37 = v22[10];
      if (v38 >= v37)
      {
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        else
          v43 = v41;
        v74 = v22 + 10;
        if (v43)
          v44 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v43);
        else
          v44 = 0;
        v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        v73 = &v44[24 * v43];
        v46 = *(_OWORD *)v69;
        *((_QWORD *)v45 + 2) = v70;
        *(_OWORD *)v45 = v46;
        v69[1] = 0;
        v70 = 0;
        v69[0] = 0;
        v72 = v45 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v47 = v22[9];
        sub_20BDF3648((uint64_t)__p);
        v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0)
          operator delete(v69[0]);
      }
      else
      {
        v39 = *(_OWORD *)v69;
        *(_QWORD *)(v38 + 16) = v70;
        *(_OWORD *)v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0)
        operator delete(v66[0]);
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_20BDDBFAC(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)v62 = *((_OWORD *)v22 + 2);
      v63 = v22[6];
    }
    v50 = v6[9];
    v49 = v6[10];
    if (v50 >= v49)
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      v74 = v6 + 10;
      if (v55)
        v56 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v55);
      else
        v56 = 0;
      v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      v73 = &v56[24 * v55];
      v58 = *(_OWORD *)v62;
      *((_QWORD *)v57 + 2) = v63;
      *(_OWORD *)v57 = v58;
      v62[1] = 0;
      v63 = 0;
      v62[0] = 0;
      v72 = v57 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v59 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0)
        operator delete(v62[0]);
    }
    else
    {
      v51 = *(_OWORD *)v62;
      *(_QWORD *)(v50 + 16) = v63;
      *(_OWORD *)v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0)
      operator delete(v64[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v61 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_20C16013C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_20BDF3648((uint64_t)&a35);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C160254(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  char v5;
  char v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  char v11;
  char v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  char v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t *v31;
  char v32;
  char v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  uint64_t *v48;
  char v49;
  char v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  char *v135;
  char v136;
  char v137;
  char *v138;
  uint64_t *v139;
  char v140;
  char v141;
  char *v142;
  uint64_t *v143;
  char v144;
  char v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  __int128 v157;
  unint64_t v158;
  unint64_t v159;
  __int128 v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  __int128 v181;
  char *v182;
  uint64_t *v183;
  char v184;
  char v185;
  _QWORD *v186;
  unint64_t v187;
  unint64_t v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  __int128 v197;
  char *v198;
  uint64_t *v199;
  char v200;
  char v201;
  uint64_t *v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  __int128 v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  __int128 v214;
  unint64_t v215;
  unint64_t v216;
  __int128 v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  __int128 v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  __int128 v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  __int128 v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  __int128 v248;
  uint64_t v249;
  int v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  __int128 v263;
  char *v264;
  uint64_t *v265;
  char v266;
  char v267;
  _QWORD *v268;
  unint64_t v269;
  unint64_t v270;
  __int128 v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  __int128 v279;
  unint64_t v280;
  unint64_t v281;
  __int128 v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  __int128 v290;
  char *v291;
  uint64_t *v292;
  char v293;
  char v294;
  char *v295;
  char v296;
  char v297;
  char *v298;
  uint64_t *v299;
  char v300;
  char v301;
  uint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  __int128 v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  __int128 v313;
  char *v314;
  uint64_t *v315;
  char v316;
  char v317;
  char *v318;
  uint64_t *v319;
  char v320;
  char v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t *v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  __int128 v334;
  unint64_t v335;
  unint64_t v336;
  __int128 v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  char *v343;
  __int128 v344;
  uint64_t v345;
  int v346;
  unint64_t v347;
  unint64_t v348;
  __int128 v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  __int128 v357;
  uint64_t v358;
  int v359;
  unint64_t v360;
  unint64_t v361;
  __int128 v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  __int128 v369;
  uint64_t v370;
  int v371;
  uint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  __int128 v384;
  char *v385;
  uint64_t *v386;
  char v387;
  char v388;
  char *v389;
  uint64_t *v390;
  char v391;
  char v392;
  unint64_t v393;
  unint64_t v394;
  __int128 v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  char *v401;
  char *v402;
  __int128 v403;
  uint64_t v404;
  int v405;
  _QWORD *v406;
  unint64_t v407;
  unint64_t v408;
  __int128 v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  char *v415;
  char *v416;
  __int128 v417;
  char *v418;
  uint64_t *v419;
  char v420;
  char v421;
  unint64_t v422;
  unint64_t v423;
  __int128 v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  char *v431;
  __int128 v432;
  uint64_t v433;
  int v434;
  unint64_t v435;
  unint64_t v436;
  __int128 v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  char *v442;
  char *v443;
  __int128 v444;
  uint64_t v445;
  int v446;
  unint64_t v447;
  unint64_t v448;
  __int128 v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  __int128 v456;
  uint64_t v457;
  int v458;
  _QWORD *v459;
  unint64_t v460;
  unint64_t v461;
  __int128 v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  char *v468;
  char *v469;
  __int128 v470;
  unint64_t v471;
  unint64_t v472;
  __int128 v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  __int128 v481;
  unint64_t v482;
  unint64_t v483;
  __int128 v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  char *v489;
  char *v490;
  __int128 v491;
  uint64_t v492;
  int v493;
  unint64_t v494;
  unint64_t v495;
  __int128 v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  char *v501;
  char *v502;
  __int128 v503;
  uint64_t v504;
  int v505;
  uint64_t *v506;
  unint64_t v507;
  unint64_t v508;
  __int128 v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  char *v515;
  char *v516;
  __int128 v517;
  char *v518;
  uint64_t *v519;
  char v520;
  char v521;
  _QWORD *v522;
  unint64_t v523;
  unint64_t v524;
  __int128 v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  char *v532;
  __int128 v533;
  unint64_t v534;
  unint64_t v535;
  __int128 v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  char *v541;
  char *v542;
  __int128 v543;
  uint64_t v544;
  int v545;
  uint64_t *v546;
  unint64_t v547;
  unint64_t v548;
  __int128 v549;
  uint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  char *v555;
  char *v556;
  __int128 v557;
  char *v558;
  uint64_t *v559;
  char v560;
  char v561;
  char *v562;
  uint64_t *v563;
  unint64_t v564;
  unint64_t v565;
  __int128 v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  char *v573;
  char *v574;
  __int128 v575;
  char *v576;
  uint64_t *v577;
  char v578;
  char v579;
  char *v580;
  uint64_t *v581;
  char v582;
  char v583;
  _QWORD *v584;
  unint64_t v585;
  unint64_t v586;
  __int128 v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  char *v593;
  char *v594;
  __int128 v595;
  unint64_t v596;
  unint64_t v597;
  __int128 v598;
  uint64_t v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  char *v604;
  char *v605;
  __int128 v606;
  unint64_t v607;
  unint64_t v608;
  __int128 v609;
  unint64_t v610;
  unint64_t v611;
  unint64_t v612;
  unint64_t v613;
  char *v614;
  char *v615;
  __int128 v616;
  uint64_t v617;
  int v618;
  _QWORD *v619;
  unint64_t v620;
  unint64_t v621;
  __int128 v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  char *v628;
  char *v629;
  __int128 v630;
  char *v631;
  uint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  __int128 v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unint64_t v639;
  char *v640;
  char *v641;
  __int128 v642;
  uint64_t v643;
  int v644;
  unint64_t v645;
  unint64_t v646;
  __int128 v647;
  unint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  char *v652;
  char *v653;
  __int128 v654;
  uint64_t v655;
  int v656;
  unint64_t v657;
  unint64_t v658;
  __int128 v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  char *v664;
  char *v665;
  __int128 v666;
  uint64_t v667;
  int v668;
  unint64_t v669;
  unint64_t v670;
  __int128 v671;
  unint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  char *v676;
  char *v677;
  __int128 v678;
  uint64_t v679;
  int v680;
  __int128 v681;
  uint64_t *v682;
  uint64_t *v683;
  uint64_t v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t *v687;
  uint64_t *v688;
  uint64_t *v689;
  uint64_t *v690;
  uint64_t *v692;
  uint64_t *v693;
  void *v694[2];
  uint64_t v695;
  void *v696[2];
  uint64_t v697;
  void *v698[2];
  uint64_t v699;
  void *v700[2];
  uint64_t v701;
  void *v702[2];
  uint64_t v703;
  __int128 v704;
  uint64_t v705;
  void *v706[2];
  uint64_t v707;
  void *v708[2];
  uint64_t v709;
  void **v710;
  void *__dst[2];
  uint64_t v712;
  void *v713[2];
  uint64_t v714;
  void *__p[2];
  uint64_t v716;
  __int128 v717;
  uint64_t v718;
  __int128 v719;
  uint64_t v720;
  uint64_t v721;
  __int128 v722;
  char *v723;
  __int128 v724;
  char *v725;
  char *v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t v729;

  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredFactorE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    sub_20BDDC0E4(&v722, v3);
    free(v4);
  }
  else
  {
    sub_20BDDC0E4(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredFactorE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v719) = 2;
  v724 = v722;
  v725 = v723;
  v722 = 0uLL;
  v723 = 0;
  LOBYTE(v726) = 2;
  v728 = 0;
  v729 = 0;
  v727 = 0;
  v720 = 0;
  v721 = 0;
  *((_QWORD *)&v719 + 1) = 0;
  v692 = sub_20C165DCC(a1, (const void **)&v724, &v724);
  v6 = v5;
  *(_QWORD *)&v717 = &v727;
  sub_20BDE5038((void ***)&v717);
  if (SHIBYTE(v725) < 0)
    operator delete((void *)v724);
  *(_QWORD *)&v717 = (char *)&v719 + 8;
  sub_20BDE5038((void ***)&v717);
  if (SHIBYTE(v723) < 0)
    operator delete((void *)v722);
  v7 = v692;
  if (v6)
  {
    v8 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES9_S9_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v8)
    {
      v9 = v8;
      sub_20BDDC0E4(&v722, v8);
      free(v9);
    }
    else
    {
      sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES9_S9_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v719) = 1;
    v724 = v722;
    v725 = v723;
    v722 = 0uLL;
    v723 = 0;
    LOBYTE(v726) = 1;
    v728 = 0;
    v729 = 0;
    v727 = 0;
    v720 = 0;
    v721 = 0;
    *((_QWORD *)&v719 + 1) = 0;
    v10 = sub_20C165DCC(a1, (const void **)&v724, &v724);
    v12 = v11;
    *(_QWORD *)&v717 = &v727;
    sub_20BDE5038((void ***)&v717);
    if (SHIBYTE(v725) < 0)
      operator delete((void *)v724);
    *(_QWORD *)&v717 = (char *)&v719 + 8;
    sub_20BDE5038((void ***)&v717);
    if (SHIBYTE(v723) < 0)
      operator delete((void *)v722);
    if (v12)
    {
      v13 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v13)
      {
        v14 = v13;
        sub_20BDDC0E4(&v722, v13);
        free(v14);
      }
      else
      {
        sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      v724 = v722;
      v725 = v723;
      v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      v720 = 0;
      v721 = 0;
      *((_QWORD *)&v719 + 1) = 0;
      v15 = sub_20C165DCC(a1, (const void **)&v724, &v724);
      v17 = v16;
      *(_QWORD *)&v717 = &v727;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v725) < 0)
        operator delete((void *)v724);
      *(_QWORD *)&v717 = (char *)&v719 + 8;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v723) < 0)
        operator delete((void *)v722);
      if (v17)
      {
        sub_20C165FC0(a1, (uint64_t)v713);
        v18 = v15[10];
        v19 = v15 + 8;
        v20 = v15[9];
        if (v20 >= v18)
        {
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v19) >> 3);
          v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v19) >> 3);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v24;
          v727 = v15 + 10;
          if (v26)
            v27 = (char *)sub_20BDE4FF4((uint64_t)(v15 + 10), v26);
          else
            v27 = 0;
          v28 = &v27[24 * v23];
          *(_QWORD *)&v724 = v27;
          *((_QWORD *)&v724 + 1) = v28;
          v726 = &v27[24 * v26];
          v29 = *(_OWORD *)v713;
          *((_QWORD *)v28 + 2) = v714;
          *(_OWORD *)v28 = v29;
          v713[1] = 0;
          v714 = 0;
          v713[0] = 0;
          v725 = v28 + 24;
          sub_20BDF34C0(v15 + 8, &v724);
          v22 = v15[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v21 = *(_OWORD *)v713;
          *(_QWORD *)(v20 + 16) = v714;
          *(_OWORD *)v20 = v21;
          v713[1] = 0;
          v714 = 0;
          v713[0] = 0;
          v22 = v20 + 24;
          v15[9] = v20 + 24;
        }
        v15[9] = v22;
        v30 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v30)
        {
          sub_20BDDC0E4(&v722, v30);
          free(v30);
        }
        else
        {
          sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        v724 = v722;
        v725 = v723;
        v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        v728 = 0;
        v729 = 0;
        v727 = 0;
        v720 = 0;
        v721 = 0;
        *((_QWORD *)&v719 + 1) = 0;
        v31 = sub_20C165DCC(a1, (const void **)&v724, &v724);
        v33 = v32;
        *(_QWORD *)&v717 = &v727;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v725) < 0)
          operator delete((void *)v724);
        *(_QWORD *)&v717 = (char *)&v719 + 8;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v723) < 0)
          operator delete((void *)v722);
        v34 = v15 + 8;
        if (v33)
        {
          sub_20C166630(a1, (uint64_t)&v717);
          v35 = v31 + 8;
          v36 = v31[10];
          v37 = v31[9];
          v688 = v31 + 8;
          if (v37 >= v36)
          {
            v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v35) >> 3);
            v41 = v40 + 1;
            if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v35) >> 3);
            if (2 * v42 > v41)
              v41 = 2 * v42;
            if (v42 >= 0x555555555555555)
              v43 = 0xAAAAAAAAAAAAAAALL;
            else
              v43 = v41;
            v727 = v31 + 10;
            if (v43)
              v44 = (char *)sub_20BDE4FF4((uint64_t)(v31 + 10), v43);
            else
              v44 = 0;
            v45 = &v44[24 * v40];
            *(_QWORD *)&v724 = v44;
            *((_QWORD *)&v724 + 1) = v45;
            v726 = &v44[24 * v43];
            v46 = v717;
            *((_QWORD *)v45 + 2) = v718;
            *(_OWORD *)v45 = v46;
            v718 = 0;
            v717 = 0uLL;
            v725 = v45 + 24;
            sub_20BDF34C0(v31 + 8, &v724);
            v39 = v31[9];
            sub_20BDF3648((uint64_t)&v724);
          }
          else
          {
            v38 = v717;
            *(_QWORD *)(v37 + 16) = v718;
            *(_OWORD *)v37 = v38;
            v718 = 0;
            v717 = 0uLL;
            v39 = v37 + 24;
            v31[9] = v37 + 24;
          }
          v31[9] = v39;
          v47 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_4plusINS0_5ascii5blankEJEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v47)
          {
            sub_20BDDC0E4(&v722, v47);
            free(v47);
          }
          else
          {
            sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_4plusINS0_5ascii5blankEJEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 1;
          v724 = v722;
          v725 = v723;
          v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 1;
          v728 = 0;
          v729 = 0;
          v727 = 0;
          v720 = 0;
          v721 = 0;
          *((_QWORD *)&v719 + 1) = 0;
          v48 = sub_20C165DCC(a1, (const void **)&v724, &v724);
          v50 = v49;
          v706[0] = &v727;
          sub_20BDE5038((void ***)v706);
          if (SHIBYTE(v725) < 0)
            operator delete((void *)v724);
          v706[0] = (char *)&v719 + 8;
          sub_20BDE5038((void ***)v706);
          if (SHIBYTE(v723) < 0)
            operator delete((void *)v722);
          v34 = v15 + 8;
          if (v50)
          {
            sub_20C167140(a1, (uint64_t)&v719);
            v51 = v48 + 8;
            v52 = v48[10];
            v53 = v48[9];
            if (v53 >= v52)
            {
              v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v51) >> 3);
              v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *v51) >> 3);
              if (2 * v58 > v57)
                v57 = 2 * v58;
              if (v58 >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v57;
              v727 = v48 + 10;
              if (v59)
                v60 = (char *)sub_20BDE4FF4((uint64_t)(v48 + 10), v59);
              else
                v60 = 0;
              v61 = &v60[24 * v56];
              *(_QWORD *)&v724 = v60;
              *((_QWORD *)&v724 + 1) = v61;
              v726 = &v60[24 * v59];
              v62 = v719;
              *((_QWORD *)v61 + 2) = v720;
              *(_OWORD *)v61 = v62;
              v720 = 0;
              v719 = 0uLL;
              v725 = v61 + 24;
              sub_20BDF34C0(v48 + 8, &v724);
              v55 = v48[9];
              sub_20BDF3648((uint64_t)&v724);
            }
            else
            {
              v54 = v719;
              *(_QWORD *)(v53 + 16) = v720;
              *(_OWORD *)v53 = v54;
              v720 = 0;
              v719 = 0uLL;
              v55 = v53 + 24;
              v48[9] = v53 + 24;
            }
            v48[9] = v55;
            sub_20C167548(a1, (uint64_t)&v722);
            v64 = v48[9];
            v63 = v48[10];
            if (v64 >= v63)
            {
              v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *v51) >> 3);
              v67 = v66 + 1;
              if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *v51) >> 3);
              if (2 * v68 > v67)
                v67 = 2 * v68;
              if (v68 >= 0x555555555555555)
                v69 = 0xAAAAAAAAAAAAAAALL;
              else
                v69 = v67;
              v727 = v48 + 10;
              if (v69)
                v70 = (char *)sub_20BDE4FF4((uint64_t)(v48 + 10), v69);
              else
                v70 = 0;
              v71 = &v70[24 * v66];
              *(_QWORD *)&v724 = v70;
              *((_QWORD *)&v724 + 1) = v71;
              v726 = &v70[24 * v69];
              v72 = v722;
              *((_QWORD *)v71 + 2) = v723;
              *(_OWORD *)v71 = v72;
              v723 = 0;
              v722 = 0uLL;
              v725 = v71 + 24;
              sub_20BDF34C0(v48 + 8, &v724);
              v73 = v48[9];
              sub_20BDF3648((uint64_t)&v724);
              v74 = SHIBYTE(v723);
              v48[9] = v73;
              v34 = v15 + 8;
              if (v74 < 0)
                operator delete((void *)v722);
            }
            else
            {
              v65 = v722;
              *(_QWORD *)(v64 + 16) = v723;
              *(_OWORD *)v64 = v65;
              v48[9] = v64 + 24;
              v34 = v15 + 8;
            }
            if (SHIBYTE(v720) < 0)
              operator delete((void *)v719);
          }
          if (*((char *)v48 + 55) < 0)
          {
            sub_20BDDBFAC(__p, (void *)v48[4], v48[5]);
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v48 + 2);
            v716 = v48[6];
          }
          v76 = v31[9];
          v75 = v31[10];
          if (v76 >= v75)
          {
            v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *v688) >> 3);
            v79 = v78 + 1;
            if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *v688) >> 3);
            if (2 * v80 > v79)
              v79 = 2 * v80;
            if (v80 >= 0x555555555555555)
              v81 = 0xAAAAAAAAAAAAAAALL;
            else
              v81 = v79;
            v727 = v31 + 10;
            if (v81)
              v82 = (char *)sub_20BDE4FF4((uint64_t)(v31 + 10), v81);
            else
              v82 = 0;
            v83 = &v82[24 * v78];
            *(_QWORD *)&v724 = v82;
            *((_QWORD *)&v724 + 1) = v83;
            v726 = &v82[24 * v81];
            v84 = *(_OWORD *)__p;
            *((_QWORD *)v83 + 2) = v716;
            *(_OWORD *)v83 = v84;
            __p[1] = 0;
            v716 = 0;
            __p[0] = 0;
            v725 = v83 + 24;
            sub_20BDF34C0(v688, &v724);
            v85 = v31[9];
            sub_20BDF3648((uint64_t)&v724);
            v86 = SHIBYTE(v716);
            v31[9] = v85;
            if (v86 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v77 = *(_OWORD *)__p;
            *(_QWORD *)(v76 + 16) = v716;
            *(_OWORD *)v76 = v77;
            v31[9] = v76 + 24;
          }
          if (SHIBYTE(v718) < 0)
            operator delete((void *)v717);
        }
        if (*((char *)v31 + 55) < 0)
        {
          sub_20BDDBFAC(__dst, (void *)v31[4], v31[5]);
        }
        else
        {
          *(_OWORD *)__dst = *((_OWORD *)v31 + 2);
          v712 = v31[6];
        }
        v87 = v15[9];
        v88 = v15[10];
        if (v87 >= v88)
        {
          v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *v34) >> 3);
          v92 = v91 + 1;
          if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *v34) >> 3);
          if (2 * v93 > v92)
            v92 = 2 * v93;
          if (v93 >= 0x555555555555555)
            v94 = 0xAAAAAAAAAAAAAAALL;
          else
            v94 = v92;
          v727 = v15 + 10;
          if (v94)
            v95 = (char *)sub_20BDE4FF4((uint64_t)(v15 + 10), v94);
          else
            v95 = 0;
          v96 = &v95[24 * v91];
          *(_QWORD *)&v724 = v95;
          *((_QWORD *)&v724 + 1) = v96;
          v726 = &v95[24 * v94];
          v97 = *(_OWORD *)__dst;
          *((_QWORD *)v96 + 2) = v712;
          *(_OWORD *)v96 = v97;
          __dst[1] = 0;
          v712 = 0;
          __dst[0] = 0;
          v725 = v96 + 24;
          sub_20BDF34C0(v34, &v724);
          v90 = v15[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v89 = *(_OWORD *)__dst;
          *(_QWORD *)(v87 + 16) = v712;
          *(_OWORD *)v87 = v89;
          __dst[1] = 0;
          v712 = 0;
          __dst[0] = 0;
          v90 = v87 + 24;
          v15[9] = v87 + 24;
        }
        v15[9] = v90;
        sub_20C165FC0(a1, (uint64_t)&v719);
        v99 = v15[9];
        v98 = v15[10];
        if (v99 >= v98)
        {
          v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *v34) >> 3);
          v102 = v101 + 1;
          if (v101 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *v34) >> 3);
          if (2 * v103 > v102)
            v102 = 2 * v103;
          if (v103 >= 0x555555555555555)
            v104 = 0xAAAAAAAAAAAAAAALL;
          else
            v104 = v102;
          v727 = v15 + 10;
          if (v104)
            v105 = (char *)sub_20BDE4FF4((uint64_t)(v15 + 10), v104);
          else
            v105 = 0;
          v106 = &v105[24 * v101];
          *(_QWORD *)&v724 = v105;
          *((_QWORD *)&v724 + 1) = v106;
          v726 = &v105[24 * v104];
          v107 = v719;
          *((_QWORD *)v106 + 2) = v720;
          *(_OWORD *)v106 = v107;
          v720 = 0;
          v719 = 0uLL;
          v725 = v106 + 24;
          sub_20BDF34C0(v34, &v724);
          v108 = v15[9];
          sub_20BDF3648((uint64_t)&v724);
          v109 = SHIBYTE(v720);
          v15[9] = v108;
          if (v109 < 0)
            operator delete((void *)v719);
        }
        else
        {
          v100 = v719;
          *(_QWORD *)(v99 + 16) = v720;
          *(_OWORD *)v99 = v100;
          v15[9] = v99 + 24;
        }
        if (SHIBYTE(v712) < 0)
          operator delete(__dst[0]);
        if (SHIBYTE(v714) < 0)
          operator delete(v713[0]);
      }
      if (*((char *)v15 + 55) < 0)
      {
        sub_20BDDBFAC(v708, (void *)v15[4], v15[5]);
      }
      else
      {
        *(_OWORD *)v708 = *((_OWORD *)v15 + 2);
        v709 = v15[6];
      }
      v110 = v10[10];
      v111 = v10[9];
      if (v111 >= v110)
      {
        v113 = v10[8];
        v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - v113) >> 3);
        v115 = v114 + 1;
        if (v114 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v113) >> 3);
        if (2 * v116 > v115)
          v115 = 2 * v116;
        if (v116 >= 0x555555555555555)
          v117 = 0xAAAAAAAAAAAAAAALL;
        else
          v117 = v115;
        v727 = v10 + 10;
        if (v117)
          v118 = (char *)sub_20BDE4FF4((uint64_t)(v10 + 10), v117);
        else
          v118 = 0;
        v119 = &v118[24 * v114];
        *(_QWORD *)&v724 = v118;
        *((_QWORD *)&v724 + 1) = v119;
        v726 = &v118[24 * v117];
        v120 = *(_OWORD *)v708;
        *((_QWORD *)v119 + 2) = v709;
        *(_OWORD *)v119 = v120;
        v708[1] = 0;
        v709 = 0;
        v708[0] = 0;
        v725 = v119 + 24;
        sub_20BDF34C0(v10 + 8, &v724);
        v121 = v10[9];
        sub_20BDF3648((uint64_t)&v724);
        v122 = SHIBYTE(v709);
        v10[9] = v121;
        if (v122 < 0)
          operator delete(v708[0]);
      }
      else
      {
        v112 = *(_OWORD *)v708;
        *(_QWORD *)(v111 + 16) = v709;
        *(_OWORD *)v111 = v112;
        v10[9] = v111 + 24;
      }
    }
    if (*((char *)v10 + 55) < 0)
    {
      sub_20BDDBFAC(v696, (void *)v10[4], v10[5]);
    }
    else
    {
      *(_OWORD *)v696 = *((_OWORD *)v10 + 2);
      v697 = v10[6];
    }
    v123 = v692[10];
    v124 = v692[9];
    v687 = v692 + 8;
    if (v124 >= v123)
    {
      v127 = v692[8];
      v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - v127) >> 3);
      v129 = v128 + 1;
      if (v128 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - v127) >> 3);
      if (2 * v130 > v129)
        v129 = 2 * v130;
      if (v130 >= 0x555555555555555)
        v131 = 0xAAAAAAAAAAAAAAALL;
      else
        v131 = v129;
      v727 = v692 + 10;
      if (v131)
        v132 = (char *)sub_20BDE4FF4((uint64_t)(v692 + 10), v131);
      else
        v132 = 0;
      v133 = &v132[24 * v128];
      *(_QWORD *)&v724 = v132;
      *((_QWORD *)&v724 + 1) = v133;
      v726 = &v132[24 * v131];
      v134 = *(_OWORD *)v696;
      *((_QWORD *)v133 + 2) = v697;
      *(_OWORD *)v133 = v134;
      v696[1] = 0;
      v697 = 0;
      v696[0] = 0;
      v725 = v133 + 24;
      sub_20BDF34C0(v687, &v724);
      v126 = v692[9];
      sub_20BDF3648((uint64_t)&v724);
    }
    else
    {
      v125 = *(_OWORD *)v696;
      *(_QWORD *)(v124 + 16) = v697;
      *(_OWORD *)v124 = v125;
      v696[1] = 0;
      v697 = 0;
      v696[0] = 0;
      v126 = v124 + 24;
      v692[9] = v124 + 24;
    }
    v692[9] = v126;
    v135 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredAtomE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v135)
    {
      sub_20BDDC0E4(&v722, v135);
      free(v135);
    }
    else
    {
      sub_20BDDC0E4(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredAtomE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v719) = 3;
    v724 = v722;
    v725 = v723;
    v722 = 0uLL;
    v723 = 0;
    LOBYTE(v726) = 3;
    v728 = 0;
    v729 = 0;
    v727 = 0;
    v720 = 0;
    v721 = 0;
    *((_QWORD *)&v719 + 1) = 0;
    v693 = sub_20C165DCC(a1, (const void **)&v724, &v724);
    v137 = v136;
    *(_QWORD *)&v717 = &v727;
    sub_20BDE5038((void ***)&v717);
    if (SHIBYTE(v725) < 0)
      operator delete((void *)v724);
    *(_QWORD *)&v717 = (char *)&v719 + 8;
    sub_20BDE5038((void ***)&v717);
    if (SHIBYTE(v723) < 0)
      operator delete((void *)v722);
    if (v137)
    {
      v138 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonCallE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v138)
      {
        sub_20BDDC0E4(&v722, v138);
        free(v138);
      }
      else
      {
        sub_20BDDC0E4(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonCallE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      v724 = v722;
      v725 = v723;
      v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      v720 = 0;
      v721 = 0;
      *((_QWORD *)&v719 + 1) = 0;
      v139 = sub_20C165DCC(a1, (const void **)&v724, &v724);
      v141 = v140;
      *(_QWORD *)&v717 = &v727;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v725) < 0)
        operator delete((void *)v724);
      *(_QWORD *)&v717 = (char *)&v719 + 8;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v723) < 0)
        operator delete((void *)v722);
      if (v141)
      {
        v142 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameENS0_5ascii3oneIJLc58EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v142)
        {
          sub_20BDDC0E4(&v722, v142);
          free(v142);
        }
        else
        {
          sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameENS0_5ascii3oneIJLc58EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        v724 = v722;
        v725 = v723;
        v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        v728 = 0;
        v729 = 0;
        v727 = 0;
        v720 = 0;
        v721 = 0;
        *((_QWORD *)&v719 + 1) = 0;
        v143 = sub_20C165DCC(a1, (const void **)&v724, &v724);
        v145 = v144;
        *(_QWORD *)&v717 = &v727;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v725) < 0)
          operator delete((void *)v724);
        *(_QWORD *)&v717 = (char *)&v719 + 8;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v723) < 0)
          operator delete((void *)v722);
        if (v145)
        {
          sub_20C1685A8(a1, (uint64_t)&v719);
          v146 = v143 + 8;
          v147 = v143[10];
          v148 = v143[9];
          if (v148 >= v147)
          {
            v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *v146) >> 3);
            v152 = v151 + 1;
            if (v151 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v146) >> 3);
            if (2 * v153 > v152)
              v152 = 2 * v153;
            if (v153 >= 0x555555555555555)
              v154 = 0xAAAAAAAAAAAAAAALL;
            else
              v154 = v152;
            v727 = v143 + 10;
            if (v154)
              v155 = (char *)sub_20BDE4FF4((uint64_t)(v143 + 10), v154);
            else
              v155 = 0;
            v156 = &v155[24 * v151];
            *(_QWORD *)&v724 = v155;
            *((_QWORD *)&v724 + 1) = v156;
            v726 = &v155[24 * v154];
            v157 = v719;
            *((_QWORD *)v156 + 2) = v720;
            *(_OWORD *)v156 = v157;
            v720 = 0;
            v719 = 0uLL;
            v725 = v156 + 24;
            sub_20BDF34C0(v143 + 8, &v724);
            v150 = v143[9];
            sub_20BDF3648((uint64_t)&v724);
          }
          else
          {
            v149 = v719;
            *(_QWORD *)(v148 + 16) = v720;
            *(_OWORD *)v148 = v149;
            v720 = 0;
            v719 = 0uLL;
            v150 = v148 + 24;
            v143[9] = v148 + 24;
          }
          v143[9] = v150;
          sub_20C1689B0(a1, (uint64_t)&v722);
          v159 = v143[9];
          v158 = v143[10];
          if (v159 >= v158)
          {
            v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - *v146) >> 3);
            v162 = v161 + 1;
            if (v161 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - *v146) >> 3);
            if (2 * v163 > v162)
              v162 = 2 * v163;
            if (v163 >= 0x555555555555555)
              v164 = 0xAAAAAAAAAAAAAAALL;
            else
              v164 = v162;
            v727 = v143 + 10;
            if (v164)
              v165 = (char *)sub_20BDE4FF4((uint64_t)(v143 + 10), v164);
            else
              v165 = 0;
            v166 = &v165[24 * v161];
            *(_QWORD *)&v724 = v165;
            *((_QWORD *)&v724 + 1) = v166;
            v726 = &v165[24 * v164];
            v167 = v722;
            *((_QWORD *)v166 + 2) = v723;
            *(_OWORD *)v166 = v167;
            v723 = 0;
            v722 = 0uLL;
            v725 = v166 + 24;
            sub_20BDF34C0(v143 + 8, &v724);
            v168 = v143[9];
            sub_20BDF3648((uint64_t)&v724);
            v169 = SHIBYTE(v723);
            v143[9] = v168;
            if (v169 < 0)
              operator delete((void *)v722);
          }
          else
          {
            v160 = v722;
            *(_QWORD *)(v159 + 16) = v723;
            *(_OWORD *)v159 = v160;
            v143[9] = v159 + 24;
          }
          if (SHIBYTE(v720) < 0)
            operator delete((void *)v719);
        }
        if (*((char *)v143 + 55) < 0)
        {
          sub_20BDDBFAC(v713, (void *)v143[4], v143[5]);
        }
        else
        {
          *(_OWORD *)v713 = *((_OWORD *)v143 + 2);
          v714 = v143[6];
        }
        v170 = v139[10];
        v171 = v139[9];
        v689 = v139 + 8;
        if (v171 >= v170)
        {
          v174 = v139[8];
          v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - v174) >> 3);
          v176 = v175 + 1;
          if (v175 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - v174) >> 3);
          if (2 * v177 > v176)
            v176 = 2 * v177;
          if (v177 >= 0x555555555555555)
            v178 = 0xAAAAAAAAAAAAAAALL;
          else
            v178 = v176;
          v727 = v139 + 10;
          if (v178)
            v179 = (char *)sub_20BDE4FF4((uint64_t)(v139 + 10), v178);
          else
            v179 = 0;
          v180 = &v179[24 * v175];
          *(_QWORD *)&v724 = v179;
          *((_QWORD *)&v724 + 1) = v180;
          v726 = &v179[24 * v178];
          v181 = *(_OWORD *)v713;
          *((_QWORD *)v180 + 2) = v714;
          *(_OWORD *)v180 = v181;
          v713[1] = 0;
          v714 = 0;
          v713[0] = 0;
          v725 = v180 + 24;
          sub_20BDF34C0(v689, &v724);
          v173 = v139[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v172 = *(_OWORD *)v713;
          *(_QWORD *)(v171 + 16) = v714;
          *(_OWORD *)v171 = v172;
          v713[1] = 0;
          v714 = 0;
          v713[0] = 0;
          v173 = v171 + 24;
          v139[9] = v171 + 24;
        }
        v139[9] = v173;
        v182 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v182)
        {
          sub_20BDDC0E4(&v722, v182);
          free(v182);
        }
        else
        {
          sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        v724 = v722;
        v725 = v723;
        v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        v728 = 0;
        v729 = 0;
        v727 = 0;
        v720 = 0;
        v721 = 0;
        *((_QWORD *)&v719 + 1) = 0;
        v183 = sub_20C165DCC(a1, (const void **)&v724, &v724);
        v185 = v184;
        *(_QWORD *)&v717 = &v727;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v725) < 0)
          operator delete((void *)v724);
        *(_QWORD *)&v717 = (char *)&v719 + 8;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v723) < 0)
          operator delete((void *)v722);
        if (v185)
        {
          sub_20C169204(a1, (uint64_t)&v717);
          v186 = v183 + 8;
          v187 = v183[10];
          v188 = v183[9];
          if (v188 >= v187)
          {
            v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v188 - *v186) >> 3);
            v192 = v191 + 1;
            if (v191 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v193 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - *v186) >> 3);
            if (2 * v193 > v192)
              v192 = 2 * v193;
            if (v193 >= 0x555555555555555)
              v194 = 0xAAAAAAAAAAAAAAALL;
            else
              v194 = v192;
            v727 = v183 + 10;
            if (v194)
              v195 = (char *)sub_20BDE4FF4((uint64_t)(v183 + 10), v194);
            else
              v195 = 0;
            v196 = &v195[24 * v191];
            *(_QWORD *)&v724 = v195;
            *((_QWORD *)&v724 + 1) = v196;
            v726 = &v195[24 * v194];
            v197 = v717;
            *((_QWORD *)v196 + 2) = v718;
            *(_OWORD *)v196 = v197;
            v718 = 0;
            v717 = 0uLL;
            v725 = v196 + 24;
            sub_20BDF34C0(v183 + 8, &v724);
            v190 = v183[9];
            sub_20BDF3648((uint64_t)&v724);
          }
          else
          {
            v189 = v717;
            *(_QWORD *)(v188 + 16) = v718;
            *(_OWORD *)v188 = v189;
            v718 = 0;
            v717 = 0uLL;
            v190 = v188 + 24;
            v183[9] = v188 + 24;
          }
          v183[9] = v190;
          v198 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_5ascii3oneIJLc44EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v198)
          {
            sub_20BDDC0E4(&v722, v198);
            free(v198);
          }
          else
          {
            sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_5ascii3oneIJLc44EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 1;
          v724 = v722;
          v725 = v723;
          v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 1;
          v728 = 0;
          v729 = 0;
          v727 = 0;
          v720 = 0;
          v721 = 0;
          *((_QWORD *)&v719 + 1) = 0;
          v199 = sub_20C165DCC(a1, (const void **)&v724, &v724);
          v201 = v200;
          v708[0] = &v727;
          sub_20BDE5038((void ***)v708);
          if (SHIBYTE(v725) < 0)
            operator delete((void *)v724);
          v708[0] = (char *)&v719 + 8;
          sub_20BDE5038((void ***)v708);
          v202 = v183 + 8;
          if (SHIBYTE(v723) < 0)
            operator delete((void *)v722);
          if (v201)
          {
            sub_20C176EA0(a1, (uint64_t)&v719);
            v203 = v199 + 8;
            v204 = v199[10];
            v205 = v199[9];
            if (v205 >= v204)
            {
              v208 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v205 - *v203) >> 3);
              v209 = v208 + 1;
              if (v208 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - *v203) >> 3);
              if (2 * v210 > v209)
                v209 = 2 * v210;
              if (v210 >= 0x555555555555555)
                v211 = 0xAAAAAAAAAAAAAAALL;
              else
                v211 = v209;
              v727 = v199 + 10;
              if (v211)
                v212 = (char *)sub_20BDE4FF4((uint64_t)(v199 + 10), v211);
              else
                v212 = 0;
              v213 = &v212[24 * v208];
              *(_QWORD *)&v724 = v212;
              *((_QWORD *)&v724 + 1) = v213;
              v726 = &v212[24 * v211];
              v214 = v719;
              *((_QWORD *)v213 + 2) = v720;
              *(_OWORD *)v213 = v214;
              v720 = 0;
              v719 = 0uLL;
              v725 = v213 + 24;
              sub_20BDF34C0(v199 + 8, &v724);
              v207 = v199[9];
              sub_20BDF3648((uint64_t)&v724);
            }
            else
            {
              v206 = v719;
              *(_QWORD *)(v205 + 16) = v720;
              *(_OWORD *)v205 = v206;
              v720 = 0;
              v719 = 0uLL;
              v207 = v205 + 24;
              v199[9] = v205 + 24;
            }
            v199[9] = v207;
            sub_20C1772A8(a1, (uint64_t)&v722);
            v216 = v199[9];
            v215 = v199[10];
            if (v216 >= v215)
            {
              v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v216 - *v203) >> 3);
              v219 = v218 + 1;
              if (v218 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v220 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215 - *v203) >> 3);
              if (2 * v220 > v219)
                v219 = 2 * v220;
              if (v220 >= 0x555555555555555)
                v221 = 0xAAAAAAAAAAAAAAALL;
              else
                v221 = v219;
              v727 = v199 + 10;
              if (v221)
                v222 = (char *)sub_20BDE4FF4((uint64_t)(v199 + 10), v221);
              else
                v222 = 0;
              v223 = &v222[24 * v218];
              *(_QWORD *)&v724 = v222;
              *((_QWORD *)&v724 + 1) = v223;
              v726 = &v222[24 * v221];
              v224 = v722;
              *((_QWORD *)v223 + 2) = v723;
              *(_OWORD *)v223 = v224;
              v723 = 0;
              v722 = 0uLL;
              v725 = v223 + 24;
              sub_20BDF34C0(v199 + 8, &v724);
              v225 = v199[9];
              sub_20BDF3648((uint64_t)&v724);
              v226 = SHIBYTE(v723);
              v199[9] = v225;
              v202 = v183 + 8;
              if (v226 < 0)
                operator delete((void *)v722);
            }
            else
            {
              v217 = v722;
              *(_QWORD *)(v216 + 16) = v723;
              *(_OWORD *)v216 = v217;
              v199[9] = v216 + 24;
              v202 = v183 + 8;
            }
            if (SHIBYTE(v720) < 0)
              operator delete((void *)v719);
          }
          if (*((char *)v199 + 55) < 0)
          {
            sub_20BDDBFAC(__p, (void *)v199[4], v199[5]);
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v199 + 2);
            v716 = v199[6];
          }
          v228 = v183[9];
          v227 = v183[10];
          if (v228 >= v227)
          {
            v230 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228 - *v202) >> 3);
            v231 = v230 + 1;
            if (v230 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v232 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227 - *v202) >> 3);
            if (2 * v232 > v231)
              v231 = 2 * v232;
            if (v232 >= 0x555555555555555)
              v233 = 0xAAAAAAAAAAAAAAALL;
            else
              v233 = v231;
            v727 = v183 + 10;
            if (v233)
              v234 = (char *)sub_20BDE4FF4((uint64_t)(v183 + 10), v233);
            else
              v234 = 0;
            v235 = &v234[24 * v230];
            *(_QWORD *)&v724 = v234;
            *((_QWORD *)&v724 + 1) = v235;
            v726 = &v234[24 * v233];
            v236 = *(_OWORD *)__p;
            *((_QWORD *)v235 + 2) = v716;
            *(_OWORD *)v235 = v236;
            __p[1] = 0;
            v716 = 0;
            __p[0] = 0;
            v725 = v235 + 24;
            sub_20BDF34C0(v202, &v724);
            v237 = v183[9];
            sub_20BDF3648((uint64_t)&v724);
            v238 = SHIBYTE(v716);
            v183[9] = v237;
            if (v238 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v229 = *(_OWORD *)__p;
            *(_QWORD *)(v228 + 16) = v716;
            *(_OWORD *)v228 = v229;
            v183[9] = v228 + 24;
          }
          if (SHIBYTE(v718) < 0)
            operator delete((void *)v717);
        }
        if (*((char *)v183 + 55) < 0)
        {
          sub_20BDDBFAC(__dst, (void *)v183[4], v183[5]);
        }
        else
        {
          *(_OWORD *)__dst = *((_OWORD *)v183 + 2);
          v712 = v183[6];
        }
        v240 = v139[9];
        v239 = v139[10];
        if (v240 >= v239)
        {
          v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - *v689) >> 3);
          v243 = v242 + 1;
          if (v242 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - *v689) >> 3);
          if (2 * v244 > v243)
            v243 = 2 * v244;
          if (v244 >= 0x555555555555555)
            v245 = 0xAAAAAAAAAAAAAAALL;
          else
            v245 = v243;
          v727 = v139 + 10;
          if (v245)
            v246 = (char *)sub_20BDE4FF4((uint64_t)(v139 + 10), v245);
          else
            v246 = 0;
          v247 = &v246[24 * v242];
          *(_QWORD *)&v724 = v246;
          *((_QWORD *)&v724 + 1) = v247;
          v726 = &v246[24 * v245];
          v248 = *(_OWORD *)__dst;
          *((_QWORD *)v247 + 2) = v712;
          *(_OWORD *)v247 = v248;
          __dst[1] = 0;
          v712 = 0;
          __dst[0] = 0;
          v725 = v247 + 24;
          sub_20BDF34C0(v689, &v724);
          v249 = v139[9];
          sub_20BDF3648((uint64_t)&v724);
          v250 = SHIBYTE(v712);
          v139[9] = v249;
          if (v250 < 0)
            operator delete(__dst[0]);
        }
        else
        {
          v241 = *(_OWORD *)__dst;
          *(_QWORD *)(v240 + 16) = v712;
          *(_OWORD *)v240 = v241;
          v139[9] = v240 + 24;
        }
        if (SHIBYTE(v714) < 0)
          operator delete(v713[0]);
      }
      if (*((char *)v139 + 55) < 0)
      {
        sub_20BDDBFAC(v700, (void *)v139[4], v139[5]);
      }
      else
      {
        *(_OWORD *)v700 = *((_OWORD *)v139 + 2);
        v701 = v139[6];
      }
      v251 = v693;
      v252 = v693[10];
      v686 = (uint64_t)(v693 + 10);
      v253 = v693[9];
      v690 = v693 + 8;
      if (v253 >= v252)
      {
        v256 = v693[8];
        v257 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v253 - v256) >> 3);
        v258 = v257 + 1;
        if (v257 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v259 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v252 - v256) >> 3);
        if (2 * v259 > v258)
          v258 = 2 * v259;
        if (v259 >= 0x555555555555555)
          v260 = 0xAAAAAAAAAAAAAAALL;
        else
          v260 = v258;
        v727 = v693 + 10;
        if (v260)
          v261 = (char *)sub_20BDE4FF4(v686, v260);
        else
          v261 = 0;
        v262 = &v261[24 * v257];
        *(_QWORD *)&v724 = v261;
        *((_QWORD *)&v724 + 1) = v262;
        v726 = &v261[24 * v260];
        v263 = *(_OWORD *)v700;
        *((_QWORD *)v262 + 2) = v701;
        *(_OWORD *)v262 = v263;
        v700[1] = 0;
        v701 = 0;
        v700[0] = 0;
        v725 = v262 + 24;
        sub_20BDF34C0(v690, &v724);
        v251 = v693;
        v255 = v693[9];
        sub_20BDF3648((uint64_t)&v724);
      }
      else
      {
        v254 = *(_OWORD *)v700;
        *(_QWORD *)(v253 + 16) = v701;
        *(_OWORD *)v253 = v254;
        v700[1] = 0;
        v701 = 0;
        v700[0] = 0;
        v255 = v253 + 24;
        v693[9] = v253 + 24;
      }
      v251[9] = v255;
      v264 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenCallE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v264)
      {
        sub_20BDDC0E4(&v722, v264);
        free(v264);
      }
      else
      {
        sub_20BDDC0E4(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenCallE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      v724 = v722;
      v725 = v723;
      v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      v720 = 0;
      v721 = 0;
      *((_QWORD *)&v719 + 1) = 0;
      v265 = sub_20C165DCC(a1, (const void **)&v724, &v724);
      v267 = v266;
      *(_QWORD *)&v717 = &v727;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v725) < 0)
        operator delete((void *)v724);
      *(_QWORD *)&v717 = (char *)&v719 + 8;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v723) < 0)
        operator delete((void *)v722);
      if (v267)
      {
        sub_20C1685A8(a1, (uint64_t)v706);
        v268 = v265 + 8;
        v269 = v265[10];
        v684 = (uint64_t)(v265 + 10);
        v270 = v265[9];
        if (v270 >= v269)
        {
          v273 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v270 - *v268) >> 3);
          v274 = v273 + 1;
          if (v273 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v275 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v269 - *v268) >> 3);
          if (2 * v275 > v274)
            v274 = 2 * v275;
          if (v275 >= 0x555555555555555)
            v276 = 0xAAAAAAAAAAAAAAALL;
          else
            v276 = v274;
          v727 = v265 + 10;
          if (v276)
            v277 = (char *)sub_20BDE4FF4(v684, v276);
          else
            v277 = 0;
          v278 = &v277[24 * v273];
          *(_QWORD *)&v724 = v277;
          *((_QWORD *)&v724 + 1) = v278;
          v726 = &v277[24 * v276];
          v279 = *(_OWORD *)v706;
          *((_QWORD *)v278 + 2) = v707;
          *(_OWORD *)v278 = v279;
          v706[1] = 0;
          v707 = 0;
          v706[0] = 0;
          v725 = v278 + 24;
          sub_20BDF34C0(v265 + 8, &v724);
          v272 = v265[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v271 = *(_OWORD *)v706;
          *(_QWORD *)(v270 + 16) = v707;
          *(_OWORD *)v270 = v271;
          v706[1] = 0;
          v707 = 0;
          v706[0] = 0;
          v272 = v270 + 24;
          v265[9] = v270 + 24;
        }
        v265[9] = v272;
        sub_20C177804(a1, (uint64_t)&v704);
        v280 = v265[9];
        v281 = v265[10];
        if (v280 >= v281)
        {
          v284 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v280 - *v268) >> 3);
          v285 = v284 + 1;
          if (v284 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v286 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v281 - *v268) >> 3);
          if (2 * v286 > v285)
            v285 = 2 * v286;
          if (v286 >= 0x555555555555555)
            v287 = 0xAAAAAAAAAAAAAAALL;
          else
            v287 = v285;
          v727 = v265 + 10;
          if (v287)
            v288 = (char *)sub_20BDE4FF4(v684, v287);
          else
            v288 = 0;
          v289 = &v288[24 * v284];
          *(_QWORD *)&v724 = v288;
          *((_QWORD *)&v724 + 1) = v289;
          v726 = &v288[24 * v287];
          v290 = v704;
          *((_QWORD *)v289 + 2) = v705;
          *(_OWORD *)v289 = v290;
          v705 = 0;
          v704 = 0uLL;
          v725 = v289 + 24;
          sub_20BDF34C0(v265 + 8, &v724);
          v283 = v265[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v282 = v704;
          *(_QWORD *)(v280 + 16) = v705;
          *(_OWORD *)v280 = v282;
          v705 = 0;
          v704 = 0uLL;
          v283 = v280 + 24;
          v265[9] = v280 + 24;
        }
        v265[9] = v283;
        v291 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsENS0_4starINS0_5ascii5blankEJEEENS6_3oneIJLc41EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v291)
        {
          sub_20BDDC0E4(&v722, v291);
          free(v291);
        }
        else
        {
          sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsENS0_4starINS0_5ascii5blankEJEEENS6_3oneIJLc41EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        v724 = v722;
        v725 = v723;
        v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        v728 = 0;
        v729 = 0;
        v727 = 0;
        v720 = 0;
        v721 = 0;
        *((_QWORD *)&v719 + 1) = 0;
        v292 = sub_20C165DCC(a1, (const void **)&v724, &v724);
        v294 = v293;
        *(_QWORD *)&v717 = &v727;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v725) < 0)
          operator delete((void *)v724);
        *(_QWORD *)&v717 = (char *)&v719 + 8;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v723) < 0)
          operator delete((void *)v722);
        if (v294)
        {
          v295 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v295)
          {
            sub_20BDDC0E4(&v722, v295);
            free(v295);
          }
          else
          {
            sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 3;
          v724 = v722;
          v725 = v723;
          v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 3;
          v728 = 0;
          v729 = 0;
          v727 = 0;
          v720 = 0;
          v721 = 0;
          *((_QWORD *)&v719 + 1) = 0;
          v683 = sub_20C165DCC(a1, (const void **)&v724, &v724);
          v297 = v296;
          *(_QWORD *)&v717 = &v727;
          sub_20BDE5038((void ***)&v717);
          if (SHIBYTE(v725) < 0)
            operator delete((void *)v724);
          *(_QWORD *)&v717 = (char *)&v719 + 8;
          sub_20BDE5038((void ***)&v717);
          if (SHIBYTE(v723) < 0)
            operator delete((void *)v722);
          if (v297)
          {
            v298 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEENS0_3optIJSC_NS3_INS5_9PredKWArgESC_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v298)
            {
              sub_20BDDC0E4(&v722, v298);
              free(v298);
            }
            else
            {
              sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEENS0_3optIJSC_NS3_INS5_9PredKWArgESC_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v719) = 2;
            v724 = v722;
            v725 = v723;
            v722 = 0uLL;
            v723 = 0;
            LOBYTE(v726) = 2;
            v728 = 0;
            v729 = 0;
            v727 = 0;
            v720 = 0;
            v721 = 0;
            *((_QWORD *)&v719 + 1) = 0;
            v299 = sub_20C165DCC(a1, (const void **)&v724, &v724);
            v301 = v300;
            *(_QWORD *)&v717 = &v727;
            sub_20BDE5038((void ***)&v717);
            if (SHIBYTE(v725) < 0)
              operator delete((void *)v724);
            *(_QWORD *)&v717 = (char *)&v719 + 8;
            sub_20BDE5038((void ***)&v717);
            if (SHIBYTE(v723) < 0)
              operator delete((void *)v722);
            if (v301)
            {
              sub_20C17825C(a1, (uint64_t)__p);
              v302 = v299 + 8;
              v303 = v299[10];
              v304 = v299[9];
              if (v304 >= v303)
              {
                v307 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v304 - *v302) >> 3);
                v308 = v307 + 1;
                if (v307 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v309 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303 - *v302) >> 3);
                if (2 * v309 > v308)
                  v308 = 2 * v309;
                if (v309 >= 0x555555555555555)
                  v310 = 0xAAAAAAAAAAAAAAALL;
                else
                  v310 = v308;
                v727 = v299 + 10;
                if (v310)
                  v311 = (char *)sub_20BDE4FF4((uint64_t)(v299 + 10), v310);
                else
                  v311 = 0;
                v312 = &v311[24 * v307];
                *(_QWORD *)&v724 = v311;
                *((_QWORD *)&v724 + 1) = v312;
                v726 = &v311[24 * v310];
                v313 = *(_OWORD *)__p;
                *((_QWORD *)v312 + 2) = v716;
                *(_OWORD *)v312 = v313;
                __p[1] = 0;
                v716 = 0;
                __p[0] = 0;
                v725 = v312 + 24;
                sub_20BDF34C0(v299 + 8, &v724);
                v306 = v299[9];
                sub_20BDF3648((uint64_t)&v724);
              }
              else
              {
                v305 = *(_OWORD *)__p;
                *(_QWORD *)(v304 + 16) = v716;
                *(_OWORD *)v304 = v305;
                __p[1] = 0;
                v716 = 0;
                __p[0] = 0;
                v306 = v304 + 24;
                v299[9] = v304 + 24;
              }
              v299[9] = v306;
              v314 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_5ascii3oneIJLc44EEEENS3_5blankES6_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES7_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
              if (v314)
              {
                sub_20BDDC0E4(&v722, v314);
                free(v314);
              }
              else
              {
                sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_5ascii3oneIJLc44EEEENS3_5blankES6_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES7_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
              }
              LOBYTE(v719) = 1;
              v724 = v722;
              v725 = v723;
              v722 = 0uLL;
              v723 = 0;
              LOBYTE(v726) = 1;
              v728 = 0;
              v729 = 0;
              v727 = 0;
              v720 = 0;
              v721 = 0;
              *((_QWORD *)&v719 + 1) = 0;
              v315 = sub_20C165DCC(a1, (const void **)&v724, &v724);
              v317 = v316;
              *(_QWORD *)&v717 = &v727;
              sub_20BDE5038((void ***)&v717);
              if (SHIBYTE(v725) < 0)
                operator delete((void *)v724);
              *(_QWORD *)&v717 = (char *)&v719 + 8;
              sub_20BDE5038((void ***)&v717);
              if (SHIBYTE(v723) < 0)
                operator delete((void *)v722);
              if (v317)
              {
                v318 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES8_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
                if (v318)
                {
                  sub_20BDDC0E4(&v722, v318);
                  free(v318);
                }
                else
                {
                  sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES8_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
                }
                LOBYTE(v719) = 2;
                v724 = v722;
                v725 = v723;
                v722 = 0uLL;
                v723 = 0;
                LOBYTE(v726) = 2;
                v728 = 0;
                v729 = 0;
                v727 = 0;
                v720 = 0;
                v721 = 0;
                *((_QWORD *)&v719 + 1) = 0;
                v319 = sub_20C165DCC(a1, (const void **)&v724, &v724);
                v321 = v320;
                v710 = (void **)&v727;
                sub_20BDE5038(&v710);
                if (SHIBYTE(v725) < 0)
                  operator delete((void *)v724);
                v710 = (void **)&v719 + 1;
                sub_20BDE5038(&v710);
                if (SHIBYTE(v723) < 0)
                  operator delete((void *)v722);
                if (v321)
                {
                  sub_20C17A710(a1, (uint64_t)&v719);
                  v322 = v319[10];
                  v323 = v319[9];
                  if (v323 >= v322)
                  {
                    v324 = v319 + 8;
                    v327 = v319[8];
                    v328 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v323 - v327) >> 3);
                    v329 = v328 + 1;
                    if (v328 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20BDDF694();
                    v330 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v322 - v327) >> 3);
                    if (2 * v330 > v329)
                      v329 = 2 * v330;
                    if (v330 >= 0x555555555555555)
                      v331 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v331 = v329;
                    v727 = v319 + 10;
                    if (v331)
                      v332 = (char *)sub_20BDE4FF4((uint64_t)(v319 + 10), v331);
                    else
                      v332 = 0;
                    v333 = &v332[24 * v328];
                    *(_QWORD *)&v724 = v332;
                    *((_QWORD *)&v724 + 1) = v333;
                    v726 = &v332[24 * v331];
                    v334 = v719;
                    *((_QWORD *)v333 + 2) = v720;
                    *(_OWORD *)v333 = v334;
                    v720 = 0;
                    v719 = 0uLL;
                    v725 = v333 + 24;
                    sub_20BDF34C0(v319 + 8, &v724);
                    v326 = v319[9];
                    sub_20BDF3648((uint64_t)&v724);
                  }
                  else
                  {
                    v324 = v319 + 8;
                    v325 = v719;
                    *(_QWORD *)(v323 + 16) = v720;
                    *(_OWORD *)v323 = v325;
                    v720 = 0;
                    v719 = 0uLL;
                    v326 = v323 + 24;
                    v319[9] = v323 + 24;
                  }
                  v319[9] = v326;
                  sub_20C17ACC4(a1, (uint64_t)&v722);
                  v336 = v319[9];
                  v335 = v319[10];
                  if (v336 >= v335)
                  {
                    v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v336 - *v324) >> 3);
                    v339 = v338 + 1;
                    if (v338 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20BDDF694();
                    v340 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335 - *v324) >> 3);
                    if (2 * v340 > v339)
                      v339 = 2 * v340;
                    if (v340 >= 0x555555555555555)
                      v341 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v341 = v339;
                    v727 = v319 + 10;
                    if (v341)
                      v342 = (char *)sub_20BDE4FF4((uint64_t)(v319 + 10), v341);
                    else
                      v342 = 0;
                    v343 = &v342[24 * v338];
                    *(_QWORD *)&v724 = v342;
                    *((_QWORD *)&v724 + 1) = v343;
                    v726 = &v342[24 * v341];
                    v344 = v722;
                    *((_QWORD *)v343 + 2) = v723;
                    *(_OWORD *)v343 = v344;
                    v723 = 0;
                    v722 = 0uLL;
                    v725 = v343 + 24;
                    sub_20BDF34C0(v324, &v724);
                    v345 = v319[9];
                    sub_20BDF3648((uint64_t)&v724);
                    v346 = SHIBYTE(v723);
                    v319[9] = v345;
                    v302 = v299 + 8;
                    if (v346 < 0)
                      operator delete((void *)v722);
                  }
                  else
                  {
                    v337 = v722;
                    *(_QWORD *)(v336 + 16) = v723;
                    *(_OWORD *)v336 = v337;
                    v319[9] = v336 + 24;
                    v302 = v299 + 8;
                  }
                  if (SHIBYTE(v720) < 0)
                    operator delete((void *)v719);
                }
                if (*((char *)v319 + 55) < 0)
                {
                  sub_20BDDBFAC(&v717, (void *)v319[4], v319[5]);
                }
                else
                {
                  v717 = *((_OWORD *)v319 + 2);
                  v718 = v319[6];
                }
                v347 = v315[10];
                v348 = v315[9];
                if (v348 >= v347)
                {
                  v350 = v315[8];
                  v351 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - v350) >> 3);
                  v352 = v351 + 1;
                  if (v351 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_20BDDF694();
                  v353 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v347 - v350) >> 3);
                  if (2 * v353 > v352)
                    v352 = 2 * v353;
                  if (v353 >= 0x555555555555555)
                    v354 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v354 = v352;
                  v727 = v315 + 10;
                  if (v354)
                    v355 = (char *)sub_20BDE4FF4((uint64_t)(v315 + 10), v354);
                  else
                    v355 = 0;
                  v356 = &v355[24 * v351];
                  *(_QWORD *)&v724 = v355;
                  *((_QWORD *)&v724 + 1) = v356;
                  v726 = &v355[24 * v354];
                  v357 = v717;
                  *((_QWORD *)v356 + 2) = v718;
                  *(_OWORD *)v356 = v357;
                  v718 = 0;
                  v717 = 0uLL;
                  v725 = v356 + 24;
                  sub_20BDF34C0(v315 + 8, &v724);
                  v358 = v315[9];
                  sub_20BDF3648((uint64_t)&v724);
                  v359 = SHIBYTE(v718);
                  v315[9] = v358;
                  if (v359 < 0)
                    operator delete((void *)v717);
                }
                else
                {
                  v349 = v717;
                  *(_QWORD *)(v348 + 16) = v718;
                  *(_OWORD *)v348 = v349;
                  v315[9] = v348 + 24;
                }
              }
              if (*((char *)v315 + 55) < 0)
              {
                sub_20BDDBFAC(v713, (void *)v315[4], v315[5]);
              }
              else
              {
                *(_OWORD *)v713 = *((_OWORD *)v315 + 2);
                v714 = v315[6];
              }
              v361 = v299[9];
              v360 = v299[10];
              if (v361 >= v360)
              {
                v363 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v361 - *v302) >> 3);
                v364 = v363 + 1;
                if (v363 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v365 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v360 - *v302) >> 3);
                if (2 * v365 > v364)
                  v364 = 2 * v365;
                if (v365 >= 0x555555555555555)
                  v366 = 0xAAAAAAAAAAAAAAALL;
                else
                  v366 = v364;
                v727 = v299 + 10;
                if (v366)
                  v367 = (char *)sub_20BDE4FF4((uint64_t)(v299 + 10), v366);
                else
                  v367 = 0;
                v368 = &v367[24 * v363];
                *(_QWORD *)&v724 = v367;
                *((_QWORD *)&v724 + 1) = v368;
                v726 = &v367[24 * v366];
                v369 = *(_OWORD *)v713;
                *((_QWORD *)v368 + 2) = v714;
                *(_OWORD *)v368 = v369;
                v713[1] = 0;
                v714 = 0;
                v713[0] = 0;
                v725 = v368 + 24;
                sub_20BDF34C0(v302, &v724);
                v370 = v299[9];
                sub_20BDF3648((uint64_t)&v724);
                v371 = SHIBYTE(v714);
                v299[9] = v370;
                if (v371 < 0)
                  operator delete(v713[0]);
              }
              else
              {
                v362 = *(_OWORD *)v713;
                *(_QWORD *)(v361 + 16) = v714;
                *(_OWORD *)v361 = v362;
                v299[9] = v361 + 24;
              }
              if (SHIBYTE(v716) < 0)
                operator delete(__p[0]);
            }
            if (*((char *)v299 + 55) < 0)
            {
              sub_20BDDBFAC(__dst, (void *)v299[4], v299[5]);
            }
            else
            {
              *(_OWORD *)__dst = *((_OWORD *)v299 + 2);
              v712 = v299[6];
            }
            v372 = v683;
            v373 = v683[10];
            v374 = v683[9];
            v682 = v683 + 8;
            if (v374 >= v373)
            {
              v377 = v683[8];
              v378 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v374 - v377) >> 3);
              v379 = v378 + 1;
              if (v378 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v380 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v373 - v377) >> 3);
              if (2 * v380 > v379)
                v379 = 2 * v380;
              if (v380 >= 0x555555555555555)
                v381 = 0xAAAAAAAAAAAAAAALL;
              else
                v381 = v379;
              v727 = v683 + 10;
              if (v381)
                v382 = (char *)sub_20BDE4FF4((uint64_t)(v683 + 10), v381);
              else
                v382 = 0;
              v383 = &v382[24 * v378];
              *(_QWORD *)&v724 = v382;
              *((_QWORD *)&v724 + 1) = v383;
              v726 = &v382[24 * v381];
              v384 = *(_OWORD *)__dst;
              *((_QWORD *)v383 + 2) = v712;
              *(_OWORD *)v383 = v384;
              __dst[1] = 0;
              v712 = 0;
              __dst[0] = 0;
              v725 = v383 + 24;
              sub_20BDF34C0(v682, &v724);
              v372 = v683;
              v376 = v683[9];
              sub_20BDF3648((uint64_t)&v724);
            }
            else
            {
              v375 = *(_OWORD *)__dst;
              *(_QWORD *)(v374 + 16) = v712;
              *(_OWORD *)v374 = v375;
              __dst[1] = 0;
              v712 = 0;
              __dst[0] = 0;
              v376 = v374 + 24;
              v683[9] = v374 + 24;
            }
            v372[9] = v376;
            v385 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS9_5blankESC_EEvEEEEENS0_3optIJNS4_INS6_9PredKWArgESD_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v385)
            {
              sub_20BDDC0E4(&v722, v385);
              free(v385);
            }
            else
            {
              sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS9_5blankESC_EEvEEEEENS0_3optIJNS4_INS6_9PredKWArgESD_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v719) = 2;
            v724 = v722;
            v725 = v723;
            v722 = 0uLL;
            v723 = 0;
            LOBYTE(v726) = 2;
            v728 = 0;
            v729 = 0;
            v727 = 0;
            v720 = 0;
            v721 = 0;
            *((_QWORD *)&v719 + 1) = 0;
            v386 = sub_20C165DCC(a1, (const void **)&v724, &v724);
            v388 = v387;
            *(_QWORD *)&v717 = &v727;
            sub_20BDE5038((void ***)&v717);
            if (SHIBYTE(v725) < 0)
              operator delete((void *)v724);
            *(_QWORD *)&v717 = (char *)&v719 + 8;
            sub_20BDE5038((void ***)&v717);
            if (SHIBYTE(v723) < 0)
              operator delete((void *)v722);
            if (v388)
            {
              v389 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
              if (v389)
              {
                sub_20BDDC0E4(&v722, v389);
                free(v389);
              }
              else
              {
                sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
              }
              LOBYTE(v719) = 1;
              v724 = v722;
              v725 = v723;
              v722 = 0uLL;
              v723 = 0;
              LOBYTE(v726) = 1;
              v728 = 0;
              v729 = 0;
              v727 = 0;
              v720 = 0;
              v721 = 0;
              *((_QWORD *)&v719 + 1) = 0;
              v390 = sub_20C165DCC(a1, (const void **)&v724, &v724);
              v392 = v391;
              __p[0] = &v727;
              sub_20BDE5038((void ***)__p);
              if (SHIBYTE(v725) < 0)
                operator delete((void *)v724);
              __p[0] = (char *)&v719 + 8;
              sub_20BDE5038((void ***)__p);
              if (SHIBYTE(v723) < 0)
                operator delete((void *)v722);
              if (v392)
              {
                sub_20C17825C(a1, (uint64_t)&v719);
                v393 = v390[10];
                v394 = v390[9];
                if (v394 >= v393)
                {
                  v396 = v390[8];
                  v397 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v394 - v396) >> 3);
                  v398 = v397 + 1;
                  if (v397 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_20BDDF694();
                  v399 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v393 - v396) >> 3);
                  if (2 * v399 > v398)
                    v398 = 2 * v399;
                  if (v399 >= 0x555555555555555)
                    v400 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v400 = v398;
                  v727 = v390 + 10;
                  if (v400)
                    v401 = (char *)sub_20BDE4FF4((uint64_t)(v390 + 10), v400);
                  else
                    v401 = 0;
                  v402 = &v401[24 * v397];
                  *(_QWORD *)&v724 = v401;
                  *((_QWORD *)&v724 + 1) = v402;
                  v726 = &v401[24 * v400];
                  v403 = v719;
                  *((_QWORD *)v402 + 2) = v720;
                  *(_OWORD *)v402 = v403;
                  v720 = 0;
                  v719 = 0uLL;
                  v725 = v402 + 24;
                  sub_20BDF34C0(v390 + 8, &v724);
                  v404 = v390[9];
                  sub_20BDF3648((uint64_t)&v724);
                  v405 = SHIBYTE(v720);
                  v390[9] = v404;
                  if (v405 < 0)
                    operator delete((void *)v719);
                }
                else
                {
                  v395 = v719;
                  *(_QWORD *)(v394 + 16) = v720;
                  *(_OWORD *)v394 = v395;
                  v390[9] = v394 + 24;
                }
              }
              if (*((char *)v390 + 55) < 0)
              {
                sub_20BDDBFAC(&v717, (void *)v390[4], v390[5]);
              }
              else
              {
                v717 = *((_OWORD *)v390 + 2);
                v718 = v390[6];
              }
              v406 = v386 + 8;
              v407 = v386[10];
              v408 = v386[9];
              if (v408 >= v407)
              {
                v411 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v408 - *v406) >> 3);
                v412 = v411 + 1;
                if (v411 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v413 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v407 - *v406) >> 3);
                if (2 * v413 > v412)
                  v412 = 2 * v413;
                if (v413 >= 0x555555555555555)
                  v414 = 0xAAAAAAAAAAAAAAALL;
                else
                  v414 = v412;
                v727 = v386 + 10;
                if (v414)
                  v415 = (char *)sub_20BDE4FF4((uint64_t)(v386 + 10), v414);
                else
                  v415 = 0;
                v416 = &v415[24 * v411];
                *(_QWORD *)&v724 = v415;
                *((_QWORD *)&v724 + 1) = v416;
                v726 = &v415[24 * v414];
                v417 = v717;
                *((_QWORD *)v416 + 2) = v718;
                *(_OWORD *)v416 = v417;
                v718 = 0;
                v717 = 0uLL;
                v725 = v416 + 24;
                sub_20BDF34C0(v386 + 8, &v724);
                v410 = v386[9];
                sub_20BDF3648((uint64_t)&v724);
              }
              else
              {
                v409 = v717;
                *(_QWORD *)(v408 + 16) = v718;
                *(_OWORD *)v408 = v409;
                v718 = 0;
                v717 = 0uLL;
                v410 = v408 + 24;
                v386[9] = v408 + 24;
              }
              v386[9] = v410;
              v418 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS7_5blankESA_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
              if (v418)
              {
                sub_20BDDC0E4(&v722, v418);
                free(v418);
              }
              else
              {
                sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS7_5blankESA_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
              }
              LOBYTE(v719) = 1;
              v724 = v722;
              v725 = v723;
              v722 = 0uLL;
              v723 = 0;
              LOBYTE(v726) = 1;
              v728 = 0;
              v729 = 0;
              v727 = 0;
              v720 = 0;
              v721 = 0;
              *((_QWORD *)&v719 + 1) = 0;
              v419 = sub_20C165DCC(a1, (const void **)&v724, &v724);
              v421 = v420;
              v710 = (void **)&v727;
              sub_20BDE5038(&v710);
              if (SHIBYTE(v725) < 0)
                operator delete((void *)v724);
              v710 = (void **)&v719 + 1;
              sub_20BDE5038(&v710);
              if (SHIBYTE(v723) < 0)
                operator delete((void *)v722);
              if (v421)
              {
                sub_20C17ACC4(a1, (uint64_t)&v719);
                v422 = v419[10];
                v423 = v419[9];
                if (v423 >= v422)
                {
                  v425 = v419[8];
                  v426 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v423 - v425) >> 3);
                  v427 = v426 + 1;
                  if (v426 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_20BDDF694();
                  v428 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v422 - v425) >> 3);
                  if (2 * v428 > v427)
                    v427 = 2 * v428;
                  if (v428 >= 0x555555555555555)
                    v429 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v429 = v427;
                  v727 = v419 + 10;
                  if (v429)
                    v430 = (char *)sub_20BDE4FF4((uint64_t)(v419 + 10), v429);
                  else
                    v430 = 0;
                  v431 = &v430[24 * v426];
                  *(_QWORD *)&v724 = v430;
                  *((_QWORD *)&v724 + 1) = v431;
                  v726 = &v430[24 * v429];
                  v432 = v719;
                  *((_QWORD *)v431 + 2) = v720;
                  *(_OWORD *)v431 = v432;
                  v720 = 0;
                  v719 = 0uLL;
                  v725 = v431 + 24;
                  sub_20BDF34C0(v419 + 8, &v724);
                  v433 = v419[9];
                  sub_20BDF3648((uint64_t)&v724);
                  v434 = SHIBYTE(v720);
                  v419[9] = v433;
                  if (v434 < 0)
                    operator delete((void *)v719);
                }
                else
                {
                  v424 = v719;
                  *(_QWORD *)(v423 + 16) = v720;
                  *(_OWORD *)v423 = v424;
                  v419[9] = v423 + 24;
                }
              }
              if (*((char *)v419 + 55) < 0)
              {
                sub_20BDDBFAC(__p, (void *)v419[4], v419[5]);
              }
              else
              {
                *(_OWORD *)__p = *((_OWORD *)v419 + 2);
                v716 = v419[6];
              }
              v436 = v386[9];
              v435 = v386[10];
              if (v436 >= v435)
              {
                v438 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v436 - *v406) >> 3);
                v439 = v438 + 1;
                if (v438 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v440 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v435 - *v406) >> 3);
                if (2 * v440 > v439)
                  v439 = 2 * v440;
                if (v440 >= 0x555555555555555)
                  v441 = 0xAAAAAAAAAAAAAAALL;
                else
                  v441 = v439;
                v727 = v386 + 10;
                if (v441)
                  v442 = (char *)sub_20BDE4FF4((uint64_t)(v386 + 10), v441);
                else
                  v442 = 0;
                v443 = &v442[24 * v438];
                *(_QWORD *)&v724 = v442;
                *((_QWORD *)&v724 + 1) = v443;
                v726 = &v442[24 * v441];
                v444 = *(_OWORD *)__p;
                *((_QWORD *)v443 + 2) = v716;
                *(_OWORD *)v443 = v444;
                __p[1] = 0;
                v716 = 0;
                __p[0] = 0;
                v725 = v443 + 24;
                sub_20BDF34C0(v386 + 8, &v724);
                v445 = v386[9];
                sub_20BDF3648((uint64_t)&v724);
                v446 = SHIBYTE(v716);
                v386[9] = v445;
                if (v446 < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v437 = *(_OWORD *)__p;
                *(_QWORD *)(v436 + 16) = v716;
                *(_OWORD *)v436 = v437;
                v386[9] = v436 + 24;
              }
              if (SHIBYTE(v718) < 0)
                operator delete((void *)v717);
            }
            if (*((char *)v386 + 55) < 0)
            {
              sub_20BDDBFAC(v713, (void *)v386[4], v386[5]);
            }
            else
            {
              *(_OWORD *)v713 = *((_OWORD *)v386 + 2);
              v714 = v386[6];
            }
            v448 = v683[9];
            v447 = v683[10];
            if (v448 >= v447)
            {
              v450 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v448 - *v682) >> 3);
              v451 = v450 + 1;
              if (v450 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v452 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v447 - *v682) >> 3);
              if (2 * v452 > v451)
                v451 = 2 * v452;
              if (v452 >= 0x555555555555555)
                v453 = 0xAAAAAAAAAAAAAAALL;
              else
                v453 = v451;
              v727 = v683 + 10;
              if (v453)
                v454 = (char *)sub_20BDE4FF4((uint64_t)(v683 + 10), v453);
              else
                v454 = 0;
              v455 = &v454[24 * v450];
              *(_QWORD *)&v724 = v454;
              *((_QWORD *)&v724 + 1) = v455;
              v726 = &v454[24 * v453];
              v456 = *(_OWORD *)v713;
              *((_QWORD *)v455 + 2) = v714;
              *(_OWORD *)v455 = v456;
              v713[1] = 0;
              v714 = 0;
              v713[0] = 0;
              v725 = v455 + 24;
              sub_20BDF34C0(v682, &v724);
              v457 = v683[9];
              sub_20BDF3648((uint64_t)&v724);
              v458 = SHIBYTE(v714);
              v683[9] = v457;
              if (v458 < 0)
                operator delete(v713[0]);
            }
            else
            {
              v449 = *(_OWORD *)v713;
              *(_QWORD *)(v448 + 16) = v714;
              *(_OWORD *)v448 = v449;
              v683[9] = v448 + 24;
            }
            if (SHIBYTE(v712) < 0)
              operator delete(__dst[0]);
          }
          if (*((char *)v683 + 55) < 0)
          {
            sub_20BDDBFAC(v708, (void *)v683[4], v683[5]);
          }
          else
          {
            *(_OWORD *)v708 = *((_OWORD *)v683 + 2);
            v709 = v683[6];
          }
          v459 = v292 + 8;
          v460 = v292[10];
          v461 = v292[9];
          if (v461 >= v460)
          {
            v464 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v461 - *v459) >> 3);
            v465 = v464 + 1;
            if (v464 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v466 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v460 - *v459) >> 3);
            if (2 * v466 > v465)
              v465 = 2 * v466;
            if (v466 >= 0x555555555555555)
              v467 = 0xAAAAAAAAAAAAAAALL;
            else
              v467 = v465;
            v727 = v292 + 10;
            if (v467)
              v468 = (char *)sub_20BDE4FF4((uint64_t)(v292 + 10), v467);
            else
              v468 = 0;
            v469 = &v468[24 * v464];
            *(_QWORD *)&v724 = v468;
            *((_QWORD *)&v724 + 1) = v469;
            v726 = &v468[24 * v467];
            v470 = *(_OWORD *)v708;
            *((_QWORD *)v469 + 2) = v709;
            *(_OWORD *)v469 = v470;
            v708[1] = 0;
            v709 = 0;
            v708[0] = 0;
            v725 = v469 + 24;
            sub_20BDF34C0(v292 + 8, &v724);
            v463 = v292[9];
            sub_20BDF3648((uint64_t)&v724);
          }
          else
          {
            v462 = *(_OWORD *)v708;
            *(_QWORD *)(v461 + 16) = v709;
            *(_OWORD *)v461 = v462;
            v708[1] = 0;
            v709 = 0;
            v708[0] = 0;
            v463 = v461 + 24;
            v292[9] = v461 + 24;
          }
          v292[9] = v463;
          sub_20C177F0C(a1, (uint64_t)&v719);
          v471 = v292[9];
          v472 = v292[10];
          if (v471 >= v472)
          {
            v475 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v471 - *v459) >> 3);
            v476 = v475 + 1;
            if (v475 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v477 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v472 - *v459) >> 3);
            if (2 * v477 > v476)
              v476 = 2 * v477;
            if (v477 >= 0x555555555555555)
              v478 = 0xAAAAAAAAAAAAAAALL;
            else
              v478 = v476;
            v727 = v292 + 10;
            if (v478)
              v479 = (char *)sub_20BDE4FF4((uint64_t)(v292 + 10), v478);
            else
              v479 = 0;
            v480 = &v479[24 * v475];
            *(_QWORD *)&v724 = v479;
            *((_QWORD *)&v724 + 1) = v480;
            v726 = &v479[24 * v478];
            v481 = v719;
            *((_QWORD *)v480 + 2) = v720;
            *(_OWORD *)v480 = v481;
            v720 = 0;
            v719 = 0uLL;
            v725 = v480 + 24;
            sub_20BDF34C0(v292 + 8, &v724);
            v474 = v292[9];
            sub_20BDF3648((uint64_t)&v724);
          }
          else
          {
            v473 = v719;
            *(_QWORD *)(v471 + 16) = v720;
            *(_OWORD *)v471 = v473;
            v720 = 0;
            v719 = 0uLL;
            v474 = v471 + 24;
            v292[9] = v471 + 24;
          }
          v292[9] = v474;
          sub_20C178208(a1, (uint64_t)&v722);
          v483 = v292[9];
          v482 = v292[10];
          if (v483 >= v482)
          {
            v485 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v483 - *v459) >> 3);
            v486 = v485 + 1;
            if (v485 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v487 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v482 - *v459) >> 3);
            if (2 * v487 > v486)
              v486 = 2 * v487;
            if (v487 >= 0x555555555555555)
              v488 = 0xAAAAAAAAAAAAAAALL;
            else
              v488 = v486;
            v727 = v292 + 10;
            if (v488)
              v489 = (char *)sub_20BDE4FF4((uint64_t)(v292 + 10), v488);
            else
              v489 = 0;
            v490 = &v489[24 * v485];
            *(_QWORD *)&v724 = v489;
            *((_QWORD *)&v724 + 1) = v490;
            v726 = &v489[24 * v488];
            v491 = v722;
            *((_QWORD *)v490 + 2) = v723;
            *(_OWORD *)v490 = v491;
            v723 = 0;
            v722 = 0uLL;
            v725 = v490 + 24;
            sub_20BDF34C0(v292 + 8, &v724);
            v492 = v292[9];
            sub_20BDF3648((uint64_t)&v724);
            v493 = SHIBYTE(v723);
            v292[9] = v492;
            if (v493 < 0)
              operator delete((void *)v722);
          }
          else
          {
            v484 = v722;
            *(_QWORD *)(v483 + 16) = v723;
            *(_OWORD *)v483 = v484;
            v292[9] = v483 + 24;
          }
          if (SHIBYTE(v720) < 0)
            operator delete((void *)v719);
          if (SHIBYTE(v709) < 0)
            operator delete(v708[0]);
        }
        if (*((char *)v292 + 55) < 0)
        {
          sub_20BDDBFAC(v702, (void *)v292[4], v292[5]);
        }
        else
        {
          *(_OWORD *)v702 = *((_OWORD *)v292 + 2);
          v703 = v292[6];
        }
        v495 = v265[9];
        v494 = v265[10];
        if (v495 >= v494)
        {
          v497 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v495 - *v268) >> 3);
          v498 = v497 + 1;
          if (v497 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v499 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v494 - *v268) >> 3);
          if (2 * v499 > v498)
            v498 = 2 * v499;
          if (v499 >= 0x555555555555555)
            v500 = 0xAAAAAAAAAAAAAAALL;
          else
            v500 = v498;
          v727 = v265 + 10;
          if (v500)
            v501 = (char *)sub_20BDE4FF4(v684, v500);
          else
            v501 = 0;
          v502 = &v501[24 * v497];
          *(_QWORD *)&v724 = v501;
          *((_QWORD *)&v724 + 1) = v502;
          v726 = &v501[24 * v500];
          v503 = *(_OWORD *)v702;
          *((_QWORD *)v502 + 2) = v703;
          *(_OWORD *)v502 = v503;
          v702[1] = 0;
          v703 = 0;
          v702[0] = 0;
          v725 = v502 + 24;
          sub_20BDF34C0(v265 + 8, &v724);
          v504 = v265[9];
          sub_20BDF3648((uint64_t)&v724);
          v505 = SHIBYTE(v703);
          v265[9] = v504;
          if (v505 < 0)
            operator delete(v702[0]);
        }
        else
        {
          v496 = *(_OWORD *)v702;
          *(_QWORD *)(v495 + 16) = v703;
          *(_OWORD *)v495 = v496;
          v265[9] = v495 + 24;
        }
        if (SHIBYTE(v705) < 0)
          operator delete((void *)v704);
        if (SHIBYTE(v707) < 0)
          operator delete(v706[0]);
      }
      if (*((char *)v265 + 55) < 0)
      {
        sub_20BDDBFAC(v698, (void *)v265[4], v265[5]);
      }
      else
      {
        *(_OWORD *)v698 = *((_OWORD *)v265 + 2);
        v699 = v265[6];
      }
      v506 = v693;
      v507 = v693[9];
      v508 = v693[10];
      if (v507 >= v508)
      {
        v511 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v507 - *v690) >> 3);
        v512 = v511 + 1;
        if (v511 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v513 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v508 - *v690) >> 3);
        if (2 * v513 > v512)
          v512 = 2 * v513;
        if (v513 >= 0x555555555555555)
          v514 = 0xAAAAAAAAAAAAAAALL;
        else
          v514 = v512;
        v727 = v693 + 10;
        if (v514)
          v515 = (char *)sub_20BDE4FF4(v686, v514);
        else
          v515 = 0;
        v516 = &v515[24 * v511];
        *(_QWORD *)&v724 = v515;
        *((_QWORD *)&v724 + 1) = v516;
        v726 = &v515[24 * v514];
        v517 = *(_OWORD *)v698;
        *((_QWORD *)v516 + 2) = v699;
        *(_OWORD *)v516 = v517;
        v698[1] = 0;
        v699 = 0;
        v698[0] = 0;
        v725 = v516 + 24;
        sub_20BDF34C0(v690, &v724);
        v506 = v693;
        v510 = v693[9];
        sub_20BDF3648((uint64_t)&v724);
      }
      else
      {
        v509 = *(_OWORD *)v698;
        *(_QWORD *)(v507 + 16) = v699;
        *(_OWORD *)v507 = v509;
        v698[1] = 0;
        v699 = 0;
        v698[0] = 0;
        v510 = v507 + 24;
        v693[9] = v507 + 24;
      }
      v506[9] = v510;
      v518 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredBareCallE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v518)
      {
        sub_20BDDC0E4(&v722, v518);
        free(v518);
      }
      else
      {
        sub_20BDDC0E4(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredBareCallE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      v724 = v722;
      v725 = v723;
      v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      v720 = 0;
      v721 = 0;
      *((_QWORD *)&v719 + 1) = 0;
      v519 = sub_20C165DCC(a1, (const void **)&v724, &v724);
      v521 = v520;
      *(_QWORD *)&v717 = &v727;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v725) < 0)
        operator delete((void *)v724);
      *(_QWORD *)&v717 = (char *)&v719 + 8;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v723) < 0)
        operator delete((void *)v722);
      if (v521)
      {
        sub_20C168A04(a1, (uint64_t)&v719);
        v522 = v519 + 8;
        v523 = v519[10];
        v524 = v519[9];
        if (v524 >= v523)
        {
          v527 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v524 - *v522) >> 3);
          v528 = v527 + 1;
          if (v527 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v529 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v523 - *v522) >> 3);
          if (2 * v529 > v528)
            v528 = 2 * v529;
          if (v529 >= 0x555555555555555)
            v530 = 0xAAAAAAAAAAAAAAALL;
          else
            v530 = v528;
          v727 = v519 + 10;
          if (v530)
            v531 = (char *)sub_20BDE4FF4((uint64_t)(v519 + 10), v530);
          else
            v531 = 0;
          v532 = &v531[24 * v527];
          *(_QWORD *)&v724 = v531;
          *((_QWORD *)&v724 + 1) = v532;
          v726 = &v531[24 * v530];
          v533 = v719;
          *((_QWORD *)v532 + 2) = v720;
          *(_OWORD *)v532 = v533;
          v720 = 0;
          v719 = 0uLL;
          v725 = v532 + 24;
          sub_20BDF34C0(v519 + 8, &v724);
          v526 = v519[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v525 = v719;
          *(_QWORD *)(v524 + 16) = v720;
          *(_OWORD *)v524 = v525;
          v720 = 0;
          v719 = 0uLL;
          v526 = v524 + 24;
          v519[9] = v524 + 24;
        }
        v519[9] = v526;
        sub_20C168A58(a1, (uint64_t)&v722);
        v535 = v519[9];
        v534 = v519[10];
        if (v535 >= v534)
        {
          v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v535 - *v522) >> 3);
          v538 = v537 + 1;
          if (v537 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v539 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v534 - *v522) >> 3);
          if (2 * v539 > v538)
            v538 = 2 * v539;
          if (v539 >= 0x555555555555555)
            v540 = 0xAAAAAAAAAAAAAAALL;
          else
            v540 = v538;
          v727 = v519 + 10;
          if (v540)
            v541 = (char *)sub_20BDE4FF4((uint64_t)(v519 + 10), v540);
          else
            v541 = 0;
          v542 = &v541[24 * v537];
          *(_QWORD *)&v724 = v541;
          *((_QWORD *)&v724 + 1) = v542;
          v726 = &v541[24 * v540];
          v543 = v722;
          *((_QWORD *)v542 + 2) = v723;
          *(_OWORD *)v542 = v543;
          v723 = 0;
          v722 = 0uLL;
          v725 = v542 + 24;
          sub_20BDF34C0(v519 + 8, &v724);
          v544 = v519[9];
          sub_20BDF3648((uint64_t)&v724);
          v545 = SHIBYTE(v723);
          v519[9] = v544;
          if (v545 < 0)
            operator delete((void *)v722);
        }
        else
        {
          v536 = v722;
          *(_QWORD *)(v535 + 16) = v723;
          *(_OWORD *)v535 = v536;
          v519[9] = v535 + 24;
        }
        if (SHIBYTE(v720) < 0)
          operator delete((void *)v719);
      }
      if (*((char *)v519 + 55) < 0)
      {
        sub_20BDDBFAC(v708, (void *)v519[4], v519[5]);
      }
      else
      {
        *(_OWORD *)v708 = *((_OWORD *)v519 + 2);
        v709 = v519[6];
      }
      v546 = v693;
      v547 = v693[9];
      v548 = v693[10];
      if (v547 >= v548)
      {
        v551 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v547 - *v690) >> 3);
        v552 = v551 + 1;
        if (v551 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v553 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v548 - *v690) >> 3);
        if (2 * v553 > v552)
          v552 = 2 * v553;
        if (v553 >= 0x555555555555555)
          v554 = 0xAAAAAAAAAAAAAAALL;
        else
          v554 = v552;
        v727 = v693 + 10;
        if (v554)
          v555 = (char *)sub_20BDE4FF4(v686, v554);
        else
          v555 = 0;
        v556 = &v555[24 * v551];
        *(_QWORD *)&v724 = v555;
        *((_QWORD *)&v724 + 1) = v556;
        v726 = &v555[24 * v554];
        v557 = *(_OWORD *)v708;
        *((_QWORD *)v556 + 2) = v709;
        *(_OWORD *)v556 = v557;
        v708[1] = 0;
        v709 = 0;
        v708[0] = 0;
        v725 = v556 + 24;
        sub_20BDF34C0(v690, &v724);
        v546 = v693;
        v550 = v693[9];
        sub_20BDF3648((uint64_t)&v724);
      }
      else
      {
        v549 = *(_OWORD *)v708;
        *(_QWORD *)(v547 + 16) = v709;
        *(_OWORD *)v547 = v549;
        v708[1] = 0;
        v709 = 0;
        v708[0] = 0;
        v550 = v547 + 24;
        v693[9] = v547 + 24;
      }
      v546[9] = v550;
      v558 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupEJNS0_3padINS3_8PredExprENS0_5ascii5blankES8_EENS3_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v558)
      {
        sub_20BDDC0E4(&v722, v558);
        free(v558);
      }
      else
      {
        sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupEJNS0_3padINS3_8PredExprENS0_5ascii5blankES8_EENS3_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      v724 = v722;
      v725 = v723;
      v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      v720 = 0;
      v721 = 0;
      *((_QWORD *)&v719 + 1) = 0;
      v559 = sub_20C165DCC(a1, (const void **)&v724, &v724);
      v561 = v560;
      *(_QWORD *)&v717 = &v727;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v725) < 0)
        operator delete((void *)v724);
      *(_QWORD *)&v717 = (char *)&v719 + 8;
      sub_20BDE5038((void ***)&v717);
      if (SHIBYTE(v723) < 0)
        operator delete((void *)v722);
      if (v561)
      {
        v562 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v562)
        {
          sub_20BDDC0E4(&v722, v562);
          free(v562);
        }
        else
        {
          sub_20BDDC0E4(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 0;
        v724 = v722;
        v725 = v723;
        v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 0;
        v728 = 0;
        v729 = 0;
        v727 = 0;
        v720 = 0;
        v721 = 0;
        *((_QWORD *)&v719 + 1) = 0;
        v563 = sub_20C165DCC(a1, (const void **)&v724, &v724);
        *(_QWORD *)&v717 = &v727;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v725) < 0)
          operator delete((void *)v724);
        *(_QWORD *)&v717 = (char *)&v719 + 8;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v723) < 0)
          operator delete((void *)v722);
        if (*((char *)v563 + 55) < 0)
        {
          sub_20BDDBFAC(v713, (void *)v563[4], v563[5]);
        }
        else
        {
          *(_OWORD *)v713 = *((_OWORD *)v563 + 2);
          v714 = v563[6];
        }
        v564 = v559[10];
        v565 = v559[9];
        v685 = v559 + 8;
        if (v565 >= v564)
        {
          v568 = v559[8];
          v569 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v565 - v568) >> 3);
          v570 = v569 + 1;
          if (v569 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v571 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v564 - v568) >> 3);
          if (2 * v571 > v570)
            v570 = 2 * v571;
          if (v571 >= 0x555555555555555)
            v572 = 0xAAAAAAAAAAAAAAALL;
          else
            v572 = v570;
          v727 = v559 + 10;
          if (v572)
            v573 = (char *)sub_20BDE4FF4((uint64_t)(v559 + 10), v572);
          else
            v573 = 0;
          v574 = &v573[24 * v569];
          *(_QWORD *)&v724 = v573;
          *((_QWORD *)&v724 + 1) = v574;
          v726 = &v573[24 * v572];
          v575 = *(_OWORD *)v713;
          *((_QWORD *)v574 + 2) = v714;
          *(_OWORD *)v574 = v575;
          v713[1] = 0;
          v714 = 0;
          v713[0] = 0;
          v725 = v574 + 24;
          sub_20BDF34C0(v685, &v724);
          v567 = v559[9];
          sub_20BDF3648((uint64_t)&v724);
        }
        else
        {
          v566 = *(_OWORD *)v713;
          *(_QWORD *)(v565 + 16) = v714;
          *(_OWORD *)v565 = v566;
          v713[1] = 0;
          v714 = 0;
          v713[0] = 0;
          v567 = v565 + 24;
          v559[9] = v565 + 24;
        }
        v559[9] = v567;
        v576 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EENS5_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v576)
        {
          sub_20BDDC0E4(&v722, v576);
          free(v576);
        }
        else
        {
          sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EENS5_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        v724 = v722;
        v725 = v723;
        v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        v728 = 0;
        v729 = 0;
        v727 = 0;
        v720 = 0;
        v721 = 0;
        *((_QWORD *)&v719 + 1) = 0;
        v577 = sub_20C165DCC(a1, (const void **)&v724, &v724);
        v579 = v578;
        *(_QWORD *)&v717 = &v727;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v725) < 0)
          operator delete((void *)v724);
        *(_QWORD *)&v717 = (char *)&v719 + 8;
        sub_20BDE5038((void ***)&v717);
        if (SHIBYTE(v723) < 0)
          operator delete((void *)v722);
        if (v579)
        {
          v580 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v580)
          {
            sub_20BDDC0E4(&v722, v580);
            free(v580);
          }
          else
          {
            sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 2;
          v724 = v722;
          v725 = v723;
          v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 2;
          v728 = 0;
          v729 = 0;
          v727 = 0;
          v720 = 0;
          v721 = 0;
          *((_QWORD *)&v719 + 1) = 0;
          v581 = sub_20C165DCC(a1, (const void **)&v724, &v724);
          v583 = v582;
          *(_QWORD *)&v717 = &v727;
          sub_20BDE5038((void ***)&v717);
          if (SHIBYTE(v725) < 0)
            operator delete((void *)v724);
          *(_QWORD *)&v717 = (char *)&v719 + 8;
          sub_20BDE5038((void ***)&v717);
          if (SHIBYTE(v723) < 0)
            operator delete((void *)v722);
          if (v583)
          {
            sub_20C165FC0(a1, (uint64_t)&v719);
            v584 = v581 + 8;
            v585 = v581[10];
            v586 = v581[9];
            if (v586 >= v585)
            {
              v589 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v586 - *v584) >> 3);
              v590 = v589 + 1;
              if (v589 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v591 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v585 - *v584) >> 3);
              if (2 * v591 > v590)
                v590 = 2 * v591;
              if (v591 >= 0x555555555555555)
                v592 = 0xAAAAAAAAAAAAAAALL;
              else
                v592 = v590;
              v727 = v581 + 10;
              if (v592)
                v593 = (char *)sub_20BDE4FF4((uint64_t)(v581 + 10), v592);
              else
                v593 = 0;
              v594 = &v593[24 * v589];
              *(_QWORD *)&v724 = v593;
              *((_QWORD *)&v724 + 1) = v594;
              v726 = &v593[24 * v592];
              v595 = v719;
              *((_QWORD *)v594 + 2) = v720;
              *(_OWORD *)v594 = v595;
              v720 = 0;
              v719 = 0uLL;
              v725 = v594 + 24;
              sub_20BDF34C0(v581 + 8, &v724);
              v588 = v581[9];
              sub_20BDF3648((uint64_t)&v724);
            }
            else
            {
              v587 = v719;
              *(_QWORD *)(v586 + 16) = v720;
              *(_OWORD *)v586 = v587;
              v720 = 0;
              v719 = 0uLL;
              v588 = v586 + 24;
              v581[9] = v586 + 24;
            }
            v581[9] = v588;
            sub_20C15FA9C(&v722, a1);
            v596 = v581[9];
            v597 = v581[10];
            if (v596 >= v597)
            {
              v600 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v596 - *v584) >> 3);
              v601 = v600 + 1;
              if (v600 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v602 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v597 - *v584) >> 3);
              if (2 * v602 > v601)
                v601 = 2 * v602;
              if (v602 >= 0x555555555555555)
                v603 = 0xAAAAAAAAAAAAAAALL;
              else
                v603 = v601;
              v727 = v581 + 10;
              if (v603)
                v604 = (char *)sub_20BDE4FF4((uint64_t)(v581 + 10), v603);
              else
                v604 = 0;
              v605 = &v604[24 * v600];
              *(_QWORD *)&v724 = v604;
              *((_QWORD *)&v724 + 1) = v605;
              v726 = &v604[24 * v603];
              v606 = v722;
              *((_QWORD *)v605 + 2) = v723;
              *(_OWORD *)v605 = v606;
              v723 = 0;
              v722 = 0uLL;
              v725 = v605 + 24;
              sub_20BDF34C0(v581 + 8, &v724);
              v599 = v581[9];
              sub_20BDF3648((uint64_t)&v724);
            }
            else
            {
              v598 = v722;
              *(_QWORD *)(v596 + 16) = v723;
              *(_OWORD *)v596 = v598;
              v723 = 0;
              v722 = 0uLL;
              v599 = v596 + 24;
              v581[9] = v596 + 24;
            }
            v581[9] = v599;
            sub_20C165FC0(a1, (uint64_t)&v717);
            v608 = v581[9];
            v607 = v581[10];
            if (v608 >= v607)
            {
              v610 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v608 - *v584) >> 3);
              v611 = v610 + 1;
              if (v610 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v612 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v607 - *v584) >> 3);
              if (2 * v612 > v611)
                v611 = 2 * v612;
              if (v612 >= 0x555555555555555)
                v613 = 0xAAAAAAAAAAAAAAALL;
              else
                v613 = v611;
              v727 = v581 + 10;
              if (v613)
                v614 = (char *)sub_20BDE4FF4((uint64_t)(v581 + 10), v613);
              else
                v614 = 0;
              v615 = &v614[24 * v610];
              *(_QWORD *)&v724 = v614;
              *((_QWORD *)&v724 + 1) = v615;
              v726 = &v614[24 * v613];
              v616 = v717;
              *((_QWORD *)v615 + 2) = v718;
              *(_OWORD *)v615 = v616;
              v718 = 0;
              v717 = 0uLL;
              v725 = v615 + 24;
              sub_20BDF34C0(v581 + 8, &v724);
              v617 = v581[9];
              sub_20BDF3648((uint64_t)&v724);
              v618 = SHIBYTE(v718);
              v581[9] = v617;
              if (v618 < 0)
                operator delete((void *)v717);
            }
            else
            {
              v609 = v717;
              *(_QWORD *)(v608 + 16) = v718;
              *(_OWORD *)v608 = v609;
              v581[9] = v608 + 24;
            }
            if (SHIBYTE(v723) < 0)
              operator delete((void *)v722);
            if (SHIBYTE(v720) < 0)
              operator delete((void *)v719);
          }
          if (*((char *)v581 + 55) < 0)
          {
            sub_20BDDBFAC(__p, (void *)v581[4], v581[5]);
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v581 + 2);
            v716 = v581[6];
          }
          v619 = v577 + 8;
          v620 = v577[10];
          v621 = v577[9];
          if (v621 >= v620)
          {
            v624 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v621 - *v619) >> 3);
            v625 = v624 + 1;
            if (v624 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v626 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v620 - *v619) >> 3);
            if (2 * v626 > v625)
              v625 = 2 * v626;
            if (v626 >= 0x555555555555555)
              v627 = 0xAAAAAAAAAAAAAAALL;
            else
              v627 = v625;
            v727 = v577 + 10;
            if (v627)
              v628 = (char *)sub_20BDE4FF4((uint64_t)(v577 + 10), v627);
            else
              v628 = 0;
            v629 = &v628[24 * v624];
            *(_QWORD *)&v724 = v628;
            *((_QWORD *)&v724 + 1) = v629;
            v726 = &v628[24 * v627];
            v630 = *(_OWORD *)__p;
            *((_QWORD *)v629 + 2) = v716;
            *(_OWORD *)v629 = v630;
            __p[1] = 0;
            v716 = 0;
            __p[0] = 0;
            v725 = v629 + 24;
            sub_20BDF34C0(v577 + 8, &v724);
            v623 = v577[9];
            sub_20BDF3648((uint64_t)&v724);
          }
          else
          {
            v622 = *(_OWORD *)__p;
            *(_QWORD *)(v621 + 16) = v716;
            *(_OWORD *)v621 = v622;
            __p[1] = 0;
            v716 = 0;
            __p[0] = 0;
            v623 = v621 + 24;
            v577[9] = v621 + 24;
          }
          v577[9] = v623;
          v631 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v631)
          {
            sub_20BDDC0E4(&v722, v631);
            free(v631);
          }
          else
          {
            sub_20BDDC0E4(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 0;
          v724 = v722;
          v725 = v723;
          v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 0;
          v728 = 0;
          v729 = 0;
          v727 = 0;
          v720 = 0;
          v721 = 0;
          *((_QWORD *)&v719 + 1) = 0;
          v632 = sub_20C165DCC(a1, (const void **)&v724, &v724);
          *(_QWORD *)&v704 = &v727;
          sub_20BDE5038((void ***)&v704);
          if (SHIBYTE(v725) < 0)
            operator delete((void *)v724);
          *(_QWORD *)&v704 = (char *)&v719 + 8;
          sub_20BDE5038((void ***)&v704);
          if (SHIBYTE(v723) < 0)
            operator delete((void *)v722);
          if (*((char *)v632 + 55) < 0)
          {
            sub_20BDDBFAC(&v717, (void *)v632[4], v632[5]);
          }
          else
          {
            v717 = *((_OWORD *)v632 + 2);
            v718 = v632[6];
          }
          v634 = v577[9];
          v633 = v577[10];
          if (v634 >= v633)
          {
            v636 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v634 - *v619) >> 3);
            v637 = v636 + 1;
            if (v636 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v638 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v633 - *v619) >> 3);
            if (2 * v638 > v637)
              v637 = 2 * v638;
            if (v638 >= 0x555555555555555)
              v639 = 0xAAAAAAAAAAAAAAALL;
            else
              v639 = v637;
            v727 = v577 + 10;
            if (v639)
              v640 = (char *)sub_20BDE4FF4((uint64_t)(v577 + 10), v639);
            else
              v640 = 0;
            v641 = &v640[24 * v636];
            *(_QWORD *)&v724 = v640;
            *((_QWORD *)&v724 + 1) = v641;
            v726 = &v640[24 * v639];
            v642 = v717;
            *((_QWORD *)v641 + 2) = v718;
            *(_OWORD *)v641 = v642;
            v718 = 0;
            v717 = 0uLL;
            v725 = v641 + 24;
            sub_20BDF34C0(v577 + 8, &v724);
            v643 = v577[9];
            sub_20BDF3648((uint64_t)&v724);
            v644 = SHIBYTE(v718);
            v577[9] = v643;
            if (v644 < 0)
              operator delete((void *)v717);
          }
          else
          {
            v635 = v717;
            *(_QWORD *)(v634 + 16) = v718;
            *(_OWORD *)v634 = v635;
            v577[9] = v634 + 24;
          }
          if (SHIBYTE(v716) < 0)
            operator delete(__p[0]);
        }
        if (*((char *)v577 + 55) < 0)
        {
          sub_20BDDBFAC(__dst, (void *)v577[4], v577[5]);
        }
        else
        {
          *(_OWORD *)__dst = *((_OWORD *)v577 + 2);
          v712 = v577[6];
        }
        v646 = v559[9];
        v645 = v559[10];
        if (v646 >= v645)
        {
          v648 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v646 - *v685) >> 3);
          v649 = v648 + 1;
          if (v648 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v650 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v645 - *v685) >> 3);
          if (2 * v650 > v649)
            v649 = 2 * v650;
          if (v650 >= 0x555555555555555)
            v651 = 0xAAAAAAAAAAAAAAALL;
          else
            v651 = v649;
          v727 = v559 + 10;
          if (v651)
            v652 = (char *)sub_20BDE4FF4((uint64_t)(v559 + 10), v651);
          else
            v652 = 0;
          v653 = &v652[24 * v648];
          *(_QWORD *)&v724 = v652;
          *((_QWORD *)&v724 + 1) = v653;
          v726 = &v652[24 * v651];
          v654 = *(_OWORD *)__dst;
          *((_QWORD *)v653 + 2) = v712;
          *(_OWORD *)v653 = v654;
          __dst[1] = 0;
          v712 = 0;
          __dst[0] = 0;
          v725 = v653 + 24;
          sub_20BDF34C0(v685, &v724);
          v655 = v559[9];
          sub_20BDF3648((uint64_t)&v724);
          v656 = SHIBYTE(v712);
          v559[9] = v655;
          if (v656 < 0)
            operator delete(__dst[0]);
        }
        else
        {
          v647 = *(_OWORD *)__dst;
          *(_QWORD *)(v646 + 16) = v712;
          *(_OWORD *)v646 = v647;
          v559[9] = v646 + 24;
        }
        if (SHIBYTE(v714) < 0)
          operator delete(v713[0]);
      }
      if (*((char *)v559 + 55) < 0)
      {
        sub_20BDDBFAC(v706, (void *)v559[4], v559[5]);
      }
      else
      {
        *(_OWORD *)v706 = *((_OWORD *)v559 + 2);
        v707 = v559[6];
      }
      v658 = v693[9];
      v657 = v693[10];
      if (v658 >= v657)
      {
        v660 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v658 - *v690) >> 3);
        v661 = v660 + 1;
        if (v660 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v662 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v657 - *v690) >> 3);
        if (2 * v662 > v661)
          v661 = 2 * v662;
        if (v662 >= 0x555555555555555)
          v663 = 0xAAAAAAAAAAAAAAALL;
        else
          v663 = v661;
        v727 = v693 + 10;
        if (v663)
          v664 = (char *)sub_20BDE4FF4(v686, v663);
        else
          v664 = 0;
        v665 = &v664[24 * v660];
        *(_QWORD *)&v724 = v664;
        *((_QWORD *)&v724 + 1) = v665;
        v726 = &v664[24 * v663];
        v666 = *(_OWORD *)v706;
        *((_QWORD *)v665 + 2) = v707;
        *(_OWORD *)v665 = v666;
        v706[1] = 0;
        v707 = 0;
        v706[0] = 0;
        v725 = v665 + 24;
        sub_20BDF34C0(v690, &v724);
        v667 = v693[9];
        sub_20BDF3648((uint64_t)&v724);
        v668 = SHIBYTE(v707);
        v693[9] = v667;
        if (v668 < 0)
          operator delete(v706[0]);
      }
      else
      {
        v659 = *(_OWORD *)v706;
        *(_QWORD *)(v658 + 16) = v707;
        *(_OWORD *)v658 = v659;
        v693[9] = v658 + 24;
      }
      if (SHIBYTE(v709) < 0)
        operator delete(v708[0]);
      if (SHIBYTE(v699) < 0)
        operator delete(v698[0]);
      if (SHIBYTE(v701) < 0)
        operator delete(v700[0]);
    }
    if (*((char *)v693 + 55) < 0)
    {
      sub_20BDDBFAC(v694, (void *)v693[4], v693[5]);
    }
    else
    {
      *(_OWORD *)v694 = *((_OWORD *)v693 + 2);
      v695 = v693[6];
    }
    v7 = v692;
    v670 = v692[9];
    v669 = v692[10];
    if (v670 >= v669)
    {
      v672 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - *v687) >> 3);
      v673 = v672 + 1;
      if (v672 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v674 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v669 - *v687) >> 3);
      if (2 * v674 > v673)
        v673 = 2 * v674;
      if (v674 >= 0x555555555555555)
        v675 = 0xAAAAAAAAAAAAAAALL;
      else
        v675 = v673;
      v727 = v692 + 10;
      if (v675)
        v676 = (char *)sub_20BDE4FF4((uint64_t)(v692 + 10), v675);
      else
        v676 = 0;
      v677 = &v676[24 * v672];
      *(_QWORD *)&v724 = v676;
      *((_QWORD *)&v724 + 1) = v677;
      v726 = &v676[24 * v675];
      v678 = *(_OWORD *)v694;
      *((_QWORD *)v677 + 2) = v695;
      *(_OWORD *)v677 = v678;
      v694[1] = 0;
      v695 = 0;
      v694[0] = 0;
      v725 = v677 + 24;
      sub_20BDF34C0(v687, &v724);
      v679 = v692[9];
      sub_20BDF3648((uint64_t)&v724);
      v680 = SHIBYTE(v695);
      v692[9] = v679;
      if (v680 < 0)
        operator delete(v694[0]);
    }
    else
    {
      v671 = *(_OWORD *)v694;
      *(_QWORD *)(v670 + 16) = v695;
      *(_OWORD *)v670 = v671;
      v692[9] = v670 + 24;
    }
    if (SHIBYTE(v697) < 0)
      operator delete(v696[0]);
  }
  if (*((char *)v7 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v7[4], v7[5]);
  }
  else
  {
    v681 = *((_OWORD *)v7 + 2);
    *(_QWORD *)(a2 + 16) = v7[6];
    *(_OWORD *)a2 = v681;
  }
}

void sub_20C1651B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;
  char a72;
  uint64_t v72;

  sub_20BDF3648(v72 - 160);
  if (*(char *)(v72 - 161) < 0)
    operator delete(*(void **)(v72 - 184));
  if (*(char *)(v72 - 193) < 0)
    operator delete(*(void **)(v72 - 216));
  if (a72 < 0)
    operator delete(__p);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  if (a41 < 0)
    operator delete(a36);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20C165D84(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_20BDE5038(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20C165DCC(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C165E5C((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20C165F38((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *sub_20C165E5C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C165EC4(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C165EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C165F38(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C165EC4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_BYTE *)__dst + 24) = *((_BYTE *)a2 + 24);
  __dst[5] = 0;
  __dst[6] = 0;
  __dst[4] = 0;
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  return __dst;
}

void sub_20C165F38(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C165F7C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C165F7C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  sub_20BDE5038(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C165FC0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;

  v4 = sub_20C1662BC(a1, 1);
  if (v5)
  {
    sub_20C1663BC(a1, (uint64_t)v33);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v39 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v35 = v15;
      v36 = v16;
      v38 = &v15[24 * v14];
      v17 = *(_OWORD *)v33;
      *((_QWORD *)v16 + 2) = v34;
      *(_OWORD *)v16 = v17;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v37 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
    }
    else
    {
      v9 = *(_OWORD *)v33;
      *(_QWORD *)(v8 + 16) = v34;
      *(_OWORD *)v8 = v9;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C165FC0(__p, a1);
    v19 = v4[9];
    v18 = v4[10];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v39 = v4 + 10;
      if (v24)
        v25 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v24);
      else
        v25 = 0;
      v26 = &v25[24 * v21];
      v35 = v25;
      v36 = v26;
      v38 = &v25[24 * v24];
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v26 + 2) = v32;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      v32 = 0;
      __p[0] = 0;
      v37 = v26 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v28 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
      v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v30 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_20C166264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1662BC(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C166410(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1663BC@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C1664A0(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C166410(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8782 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8782 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16648C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1664A0(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C1665A0(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C166570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1665A0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB87C3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB87C3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16661C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C166630(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C166A38(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C166A8C(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C1669A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C166A38@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C166C3C(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C166A8C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C166DCC(a1, 1);
  if (v5)
  {
    sub_20C166ECC(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C166C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C166C3C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C166D3C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C166D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C166D3C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB88A3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB88A3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C166DB8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C166DCC(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C166F20(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C166E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C166ECC@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C166FB0(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C166F20(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB88E7 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB88E7 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C166F9C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C166FB0(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C1670B0(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C167080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1670B0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB895CLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB895CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16712C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C167140(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C167950(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C166630(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C1674B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C167548(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C167140(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C167548(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C1678C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C167950(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;

  v4 = sub_20C167C4C(a1, 2);
  if (v5)
  {
    sub_20C1663BC(a1, (uint64_t)v33);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v39 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v35 = v15;
      v36 = v16;
      v38 = &v15[24 * v14];
      v17 = *(_OWORD *)v33;
      *((_QWORD *)v16 + 2) = v34;
      *(_OWORD *)v16 = v17;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v37 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
    }
    else
    {
      v9 = *(_OWORD *)v33;
      *(_QWORD *)(v8 + 16) = v34;
      *(_OWORD *)v8 = v9;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C167D4C(a1, (uint64_t)__p);
    v19 = v4[9];
    v18 = v4[10];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v39 = v4 + 10;
      if (v24)
        v25 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v24);
      else
        v25 = 0;
      v26 = &v25[24 * v21];
      v35 = v25;
      v36 = v26;
      v38 = &v25[24 * v24];
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v26 + 2) = v32;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      v32 = 0;
      __p[0] = 0;
      v37 = v26 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v28 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
      v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v30 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_20C167BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C167C4C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C167EFC(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C167D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C167D4C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C167F8C(a1, 1);
  if (v5)
  {
    sub_20C16808C(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C167ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C167EFC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8B62 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8B62 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C167F78(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C167F8C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C168388(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C16808C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;

  v4 = sub_20C168418(a1, 2);
  if (v5)
  {
    sub_20C1663BC(a1, (uint64_t)v33);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v39 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v35 = v15;
      v36 = v16;
      v38 = &v15[24 * v14];
      v17 = *(_OWORD *)v33;
      *((_QWORD *)v16 + 2) = v34;
      *(_OWORD *)v16 = v17;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v37 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
    }
    else
    {
      v9 = *(_OWORD *)v33;
      *(_QWORD *)(v8 + 16) = v34;
      *(_OWORD *)v8 = v9;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C167D4C(__p, a1);
    v19 = v4[9];
    v18 = v4[10];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v39 = v4 + 10;
      if (v24)
        v25 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v24);
      else
        v25 = 0;
      v26 = &v25[24 * v21];
      v35 = v25;
      v36 = v26;
      v38 = &v25[24 * v24];
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v26 + 2) = v32;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      v32 = 0;
      __p[0] = 0;
      v37 = v26 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v28 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
      v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v30 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

